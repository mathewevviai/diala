Directory structure:
└── onboarding/
    ├── README.md
    ├── ONBOARDING_RULES.md
    ├── blog/
    │   ├── page.tsx
    │   └── [blogId]/
    │       └── page.tsx
    ├── calls/
    │   ├── page.tsx
    │   └── page.tsx.broken
    ├── cloning/
    │   ├── page-refactored.tsx
    │   ├── page.tsx
    │   └── page.tsx.backup
    ├── courses/
    │   └── page.tsx
    ├── guides/
    │   └── page.tsx
    ├── hunter/
    │   ├── page.tsx
    │   └── page.txt
    ├── procedural/
    │   └── page.tsx
    ├── rag/
    │   ├── page.tsx
    │   ├── types.ts
    │   ├── utils.ts
    │   └── components/
    │       ├── InfoSectionStep1.tsx
    │       ├── InfoSectionStep3.tsx
    │       ├── SocialMediaVideoDisplay.tsx
    │       ├── Step1ChooseSource.tsx
    │       ├── Step2SourceDetails.tsx
    │       ├── Step3ConfigureProcessing.tsx
    │       ├── Step3VideoSelection.tsx
    │       ├── Step4ProcessingProgress.tsx
    │       ├── Step5Completion.tsx
    │       └── VideoSelectionGrid.tsx
    ├── rtc/
    │   └── page.tsx
    ├── transcribe/
    │   ├── DragDropUpload.tsx
    │   └── page.tsx
    ├── transcripts/
    │   └── page.tsx
    └── voice/
        └── page.tsx

================================================
FILE: README.md
================================================
# Diala Onboarding Flow Documentation

This directory contains the complete onboarding flow implementation for the Diala voice agent platform. The onboarding system guides users through setting up various AI-powered features using a distinctive Neobrutalist/Memphis design system.

## Overview

The onboarding flow consists of multiple specialized workflows, each designed to help users configure different aspects of the Diala platform:

- **Voice Agent Creation** - Set up and manage AI voice agents
- **Campaign Management** - Create and launch outbound calling campaigns  
- **Lead Generation** - Hunt for prospects using multiple data sources
- **Knowledge Base Setup** - Build RAG systems from various content sources
- **Multi-Agent Coordination** - Deploy intelligent agent swarms
- **Audio Transcription** - Convert audio files to text with voice cloning
- **YouTube Transcript Processing** - Extract and process YouTube video transcripts
- **Voice Interface** - Access the main voice interaction system

## File Structure

```
onboarding/
├── agents/page.tsx          # AI agent management interface
├── calls/page.tsx           # Campaign creation workflow (6 steps)
├── hunter/page.tsx          # Lead generation workflow (6 steps) - Enhanced with real backend
├── rag/page.tsx            # Knowledge base creation (6 steps)
├── swarms/page.tsx         # Multi-agent coordination (6 steps)
├── transcribe/page.tsx     # Audio file transcription (2 steps) - NEW
├── transcripts/page.tsx    # YouTube transcript extraction (2 steps)
└── voice/page.tsx          # Voice interface wrapper
```

## Individual Page Analysis

### Agents Page (`/onboarding/agents`)

**Purpose**: Comprehensive AI agent management and creation interface

**Key Features**:
- **Agent Overview Dashboard**: Shows total agents, active agents, total calls, and average success rate
- **Agent Creation Form**: Multi-field form for creating new agents with:
  - Agent name and purpose definition
  - Language selection (English, Spanish, French, German)
  - Voice selection (Sarah, Michael, Emma, James)
  - Personality types (Discovery Calls, Customer Support, Appointment Setting, Custom)
  - Advanced settings (voice speed, response time sliders)
- **Agent Management**: View, edit, activate/deactivate, and delete existing agents
- **Mock Data**: Pre-populated with example agents (Sales Champion, Support Star)

**Design Elements**:
- Blue color scheme (rgb(0,82,255) background)
- Neobrutalist card design with heavy borders and shadows
- Interactive elements with hover effects and animations

### Calls Page (`/onboarding/calls`) 

**Purpose**: Complete campaign creation and management workflow

**6-Step Process**:

1. **Campaign Setup**: Define campaign name, type (Sales/Follow-up/Survey), and goals
2. **Agent Selection**: Choose from available AI agents for the campaign
3. **Target Audience**: Configure contact lists via:
   - CSV upload with contact validation
   - Existing leads from Hunter results
   - Manual phone number entry
4. **Call Configuration**: Advanced settings including:
   - Schedule configuration (start/end times, timezone)
   - Capacity limits (max calls per day)
   - Retry logic (attempts and delays)
   - Features (voicemail, call recording)
5. **Preview & Launch**: Review all settings and launch campaign
6. **Campaign Active**: Real-time progress tracking and campaign management

**Key Features**:
- **Progress Tracking**: Visual progress bar and status updates during launch
- **Verification Modal**: Email/phone verification before campaign launch
- **Premium Features**: Smart scheduling and optimization options
- **Real-time Stats**: Campaign performance metrics and analytics

**Design Elements**:
- Orange color scheme (orange-500 background)
- Step-by-step navigation with visual progress indicators
- Premium feature cards with upgrade prompts

### Hunter Page (`/onboarding/hunter`) - Enhanced with Real Backend

**Purpose**: Lead generation and prospecting workflow using multiple data sources with full backend integration

**6-Step Process**:

1. **Search Definition**: Define search objectives and select lead sources:
   - Web Search (available)
   - B2B Database (premium/locked)
   - Business Directories (premium/locked)
   - **Real-time Usage Display**: Shows current subscription tier and daily/monthly limits
2. **Search Criteria**: Configure targeting parameters:
   - Industry selection (Technology, Healthcare, Finance, etc.)
   - Geographic location
   - Company size (1-10, 11-50, 51-200, 201-1000, 1000+ employees)
   - Job titles (CEO, CTO, VP Sales, etc.)
   - Keywords (optional)
3. **Contact Preferences**: Choose data types to include:
   - Email addresses (verified business emails)
   - Phone numbers (direct dial and mobile)
   - LinkedIn integration (premium feature)
4. **Search Preview**: Review search parameters and estimated results with rate limit checks
5. **Search Progress**: Real-time search execution with actual backend processing and status polling
6. **Results Display**: Search completion with live data from Convex backend

**Enhanced Features**:
- **User Authentication**: Full Clerk integration for user management
- **Real Backend Integration**: Convex database operations for actual lead searches
- **Usage Tracking**: Live subscription tier display (Free/Premium/Enterprise)
- **Rate Limiting**: Real-time usage validation with search/lead limits
- **Live Data**: Actual search creation and progress polling from backend
- **Usage Statistics**: Daily searches and monthly lead usage with remaining quotas
- **Smart Validation**: Prevents searches when limits are exceeded

**Backend Integration**:
- **Convex Actions**: `createLeadSearch`, `getSearchStatus` for real operations
- **Convex Queries**: `getUserUsageStats` for live usage tracking
- **Search Polling**: 10-second intervals with 5-minute timeout for real-time updates
- **Error Handling**: Comprehensive error states and user feedback

**Design Elements**:
- Violet color scheme (violet-400 background)
- Source selection cards with locked/unlocked states
- Progress visualization for search stages
- Usage statistics cards with subscription tier badges

### RAG Page (`/onboarding/rag`)

**Purpose**: Knowledge base creation from various content sources for AI agent training

**6-Step Process**:

1. **Welcome**: Name collection using WelcomeCard component
2. **Source Selection**: Choose knowledge source type:
   - YouTube videos (channel/playlist URLs)
   - Documents (PDF, Word, text files)
   - Web pages (URL scraping)
   - Structured data (CSV, knowledge base files)
3. **Source Input**: Provide specific source details:
   - YouTube URLs with processing up to 100 videos
   - File upload with drag-and-drop interface
   - URL list input (up to 20 URLs)
4. **Processing Configuration**: Advanced settings with accordion interface:
   - Chunk size (256-1024 tokens)
   - Overlap settings (0 to chunk_size/4 words)
   - Embedding model selection (openai-ada)
   - Vector store configuration (pinecone)
5. **Processing Progress**: Real-time processing with 4-stage pipeline:
   - Content fetching
   - Text extraction
   - Embedding generation
   - Vector index building
6. **Completion**: Knowledge base ready with comprehensive statistics

**Key Features**:
- **Multi-format Support**: Videos, documents, web content, structured data
- **Advanced Configuration**: Customizable chunking and embedding parameters
- **Processing Pipeline**: Automated content extraction and indexing
- **Statistics Dashboard**: Processing metrics and knowledge base analytics

**Design Elements**:
- Yellow color scheme (yellow-400 background)
- Accordion interface for advanced settings
- Progress visualization with stage indicators

### Swarms Page (`/onboarding/swarms`)

**Purpose**: Multi-agent coordination system for deploying intelligent agent networks

**6-Step Process**:

1. **Swarm Definition**: Define swarm name and objectives for agent collaboration
2. **Workflow Templates**: Choose from pre-built collaboration patterns:
   - Sales Pipeline (Research → Qualify → Schedule → Follow-up)
   - Support Escalation (Triage → Resolve → Escalate → Analyze)
   - Lead Nurturing (Discover → Engage → Educate → Convert)
   - Custom Workflow (build your own)
3. **Agent Selection**: Choose from specialized agents (minimum 2 required):
   - Research Agent (information gathering)
   - Sales Agent (lead engagement)
   - Support Agent (customer service)
   - Scheduling Agent (calendar management)
   - Analytics Agent (performance analysis)
   - Coordinator Agent (workflow management)
4. **Swarm Configuration**: Advanced settings with tooltips:
   - Collaboration mode (Sequential/Parallel/Adaptive)
   - Max concurrent agents (2-10)
   - Communication protocol (Direct/Broadcast/Hierarchical)
   - Auto-scaling and performance optimization
   - Error handling strategies
5. **Review & Deploy**: Comprehensive swarm summary and deployment preparation
6. **Deployment**: Real-time deployment with progress tracking and final statistics

**Key Features**:
- **Template System**: Pre-configured workflows for common use cases
- **Agent Specialization**: Role-specific capabilities and training
- **Advanced Configuration**: Fine-tuned collaboration and communication settings
- **Deployment Infrastructure**: Global deployment with automatic failover
- **Premium Features**: Enterprise swarm capabilities and unlimited scaling

**Design Elements**:
- Cyan color scheme (cyan-500 background)
- Template selection cards with agent badges
- Tooltip system for complex configuration options

### Transcribe Page (`/onboarding/transcribe`) - NEW

**Purpose**: Audio file transcription service with voice cloning capabilities

**2-Step Process**:

1. **File Upload**: Audio file selection and upload:
   - **Drag-and-Drop Interface**: Interactive file drop zone with visual feedback
   - **Multi-format Support**: MP3, WAV, OGG, M4A, FLAC audio files
   - **File Validation**: Real-time format and size validation
   - **Upload Progress**: Visual progress tracking during file processing
   - **File Metadata**: Display of file name, size, and format

2. **Transcription & Actions**: Audio player and transcript processing:
   - **Audio Player**: Built-in HTML5 audio player for file playback
   - **Real-time Transcription**: Progress tracking with percentage completion
   - **Transcript Display**: Interactive text output with chunked formatting
   - **Action Grid**: 2x2 grid layout with specialized actions:
     - **Copy Transcript**: One-click clipboard functionality
     - **Voice Clone**: AI voice cloning from audio sample
     - **Bulk Process**: Batch transcription capabilities
     - **Chat with Diala**: Integration with AI chat system

**Key Features**:
- **Advanced File Handling**: Drag-and-drop with visual drag states and animations
- **Multiple Audio Formats**: Support for all major audio file types
- **Voice Cloning Integration**: Create AI voice models from uploaded audio
- **Professional Interface**: Clean, intuitive design for serious audio work
- **Progress Tracking**: Real-time feedback during transcription process
- **Interactive Transcript**: Chunked text display for easy reading and editing

**Technical Implementation**:
- **File Upload**: HTML5 FileReader API with drag-and-drop event handling
- **Audio Processing**: Web Audio API integration for playback
- **Progress Simulation**: Interval-based progress updates (placeholder for real API)
- **Modals Integration**: Voice cloning, bulk processing, and chat modals
- **Responsive Design**: Mobile-friendly layout with adaptive grid

**Design Elements**:
- **Blue Color Scheme**: Blue-500 background with matching accents
- **Audio-focused Icons**: Microphone, music note, and volume icons
- **Interactive Drop Zone**: Animated drag states with pulsing effects
- **2x2 Action Grid**: Organized button layout with hover transformations
- **Clean Typography**: Professional text hierarchy for audio transcription work

### Transcripts Page (`/onboarding/transcripts`)

**Purpose**: YouTube transcript extraction and processing tool

**2-Step Process**:

1. **URL Input**: YouTube URL entry with feature showcase:
   - Free transcript generation
   - Multi-language support (125+ languages)
   - One-click copy functionality
   - Translation capabilities
2. **Processing & Display**: Video player and transcript interaction:
   - Embedded YouTube player
   - Real-time transcript fetching with job polling
   - Interactive transcript with chunked display
   - Action buttons (Copy, Bulk Download, Chat with Diala)
   - Social sharing integration

**Key Features**:
- **Free Service**: No cost transcript generation
- **Multi-language**: Support for 125+ languages with translation
- **Real-time Processing**: Job-based processing with status polling
- **Interactive Interface**: Chunked transcript display with hover effects
- **Integration Options**: Bulk download and Diala chat integration
- **Social Features**: Like, subscribe, and sharing buttons

**Design Elements**:
- Red color scheme (red-500 background)
- YouTube branding integration
- Social media button stack
- Video player embedding with responsive design

### Voice Page (`/onboarding/voice`)

**Purpose**: Simple wrapper for the main voice interface application

**Implementation**:
- Minimal wrapper component that renders the main `App` component
- Centered layout with responsive design
- Direct integration with the core voice interface system

**Design Elements**:
- Clean, minimal layout
- Full-width responsive container
- Integration point for the main application

## Technical Implementation Details

### Common Design Patterns

**Neobrutalist/Memphis Design System**:
- **Heavy Borders**: 3-4px black borders on all major elements
- **Bold Shadows**: Box-shadow effects with offset positioning
- **Vibrant Colors**: High-contrast color palette (pink, yellow, cyan, violet, orange, red, blue)
- **Geometric Elements**: Rotated cards and decorative shapes
- **Typography**: Noyh-Bold font family with uppercase text styling

**Component Architecture**:
- **Step-based Navigation**: Most flows use multi-step progression
- **Progress Indicators**: Visual step tracking and completion states
- **Modal Integration**: Verification and configuration modals
- **Responsive Design**: Mobile-first approach with breakpoint handling

**State Management**:
- **React Hooks**: useState for local component state
- **Convex Integration**: useAction and useQuery hooks for backend operations
- **Authentication**: Clerk integration for user management and session handling
- **Real-time Updates**: Polling mechanisms for job status tracking
- **Form Validation**: Client-side validation with disabled states
- **File Handling**: HTML5 FileReader API for drag-and-drop functionality

**Backend Integration**:
- **Real Database Operations**: Live data persistence and retrieval via Convex
- **Usage Tracking**: Subscription tier management and rate limiting
- **Job Processing**: Asynchronous task handling with progress updates
- **Error Handling**: Comprehensive error states and user feedback systems

### Common Components Used

- **UI Components**: Card, Button, Input, Badge, Slider, Switch, Select
- **Custom Components**: OnboardingNav, PremiumFeatureCard, VerificationModal
- **Modal Components**: Voice cloning, bulk processing, and chat integration modals
- **Icons**: Iconscout Unicons React library for consistent iconography
- **Navigation**: Step-based progression with back/continue buttons
- **File Upload**: Drag-and-drop zones with visual feedback and validation

### Premium Feature Integration

Most workflows include premium feature cards that showcase:
- Advanced capabilities available with upgrades
- Feature comparison between basic and premium plans
- Upgrade prompts and pricing information
- Feature locking with visual indicators

## User Flow Summary

### Primary Onboarding Paths

1. **Voice Agent Setup** → Agents → Voice → Calls (agent creation to campaign deployment)
2. **Lead Generation** → Hunter → Calls (prospect discovery to outreach with real backend)
3. **Knowledge Enhancement** → RAG → Agents (content ingestion to smarter agents)
4. **Scale Operations** → Swarms → Calls (multi-agent deployment to campaign execution)
5. **Audio Content Processing** → Transcribe → Voice Cloning → Agents (audio transcription to voice modeling)
6. **Video Content Processing** → Transcripts → RAG (YouTube content extraction to knowledge base)

### Cross-workflow Integration

- **Agent Reuse**: Agents created in the Agents flow are available in Calls and Swarms
- **Lead Integration**: Hunter results feed directly into Calls workflows with real backend data
- **Knowledge Sharing**: RAG knowledge bases enhance all agent capabilities
- **Voice Cloning**: Audio transcriptions can generate custom voice models for agents
- **Content Pipeline**: Audio/video content flows through transcription to knowledge bases
- **Swarm Coordination**: Multi-agent setups can be used across all campaign types
- **Usage Tracking**: Real-time subscription and rate limiting across all premium features

### Verification and Launch Patterns

Most workflows include:
1. **Configuration Phase**: Step-by-step setup with validation
2. **Review Phase**: Comprehensive settings summary
3. **Verification Phase**: Email/phone verification modal
4. **Launch Phase**: Real-time progress tracking
5. **Completion Phase**: Success confirmation with next steps

This comprehensive onboarding system provides users with multiple entry points and workflow options while maintaining consistent design patterns and user experience throughout the platform.


================================================
FILE: ONBOARDING_RULES.md
================================================
# Onboarding Pages Implementation Rules

This document defines the specific patterns and rules for creating multi-step onboarding pages based on the established patterns in the calls onboarding page.

## Page Structure

### 1. Background and Container
```tsx
<div 
  className="min-h-screen bg-orange-500 relative pb-8" 
  style={{ 
    fontFamily: 'Noyh-Bold, sans-serif',
    backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
    backgroundSize: '60px 60px'
  }}
>
  <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
    <div className="w-full max-w-4xl space-y-8">
      {/* Content goes here */}
    </div>
  </div>
</div>
```

### 2. Persistent Title Card
The title card remains visible throughout all steps with dynamic content:

```tsx
<Card className="transform rotate-1 relative overflow-hidden">
  <CardHeader className="relative">
    {/* Decorative elements */}
    <div className="absolute top-2 left-4 w-8 h-8 bg-orange-600 border-2 border-black flex items-center justify-center">
      <UilPhone className="h-4 w-4 text-white" />
    </div>
    <div className="absolute top-2 right-4 w-8 h-8 bg-orange-500 border-2 border-black flex items-center justify-center">
      <UilPhoneVolume className="h-4 w-4 text-white" />
    </div>
    <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
      <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
    </div>
    <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
    
    {/* Central icon button */}
    <div className="flex justify-center mb-4">
      <Button className="w-20 h-20 bg-orange-600 hover:bg-orange-700 border-4 border-black p-0">
        {currentStep === 1 && <UilBriefcase className="h-12 w-12 text-white" />}
        {/* Add icons for other steps */}
      </Button>
    </div>
    
    {/* Dynamic title */}
    <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
      {currentStep === 1 && 'STEP ONE TITLE'}
      {/* Add titles for other steps */}
    </CardTitle>
    
    {/* Subtitle */}
    <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
      {currentStep === 1 && 'STEP ONE SUBTITLE'}
    </p>
    
    {/* Animated decorative bars */}
    <div className="flex justify-center items-center mt-3 gap-2">
      <div className="w-3 h-3 bg-orange-600 animate-pulse"></div>
      <div className="w-2 h-6 bg-black"></div>
      <div className="w-4 h-4 bg-orange-500 animate-pulse delay-150"></div>
      <div className="w-2 h-8 bg-black"></div>
      <div className="w-3 h-3 bg-orange-600 animate-pulse delay-300"></div>
    </div>
  </CardHeader>
</Card>
```

## Dev Mode Autofill Button

### Overview
A sticky development mode toggle that automatically populates form fields with realistic test data for faster development and testing.

### Implementation Pattern (from hunter/page.tsx)
```tsx
// State management
const [devMode, setDevMode] = React.useState(false);

// Auto-fill effect
React.useEffect(() => {
  if (devMode) {
    setSearchName('Belfast Roofing Contractors Q4');
    setSearchObjective('Finding roofing contractors and construction companies in Belfast area for partnership opportunities');
    setSelectedSources(['web']);
    setSearchCriteria({
      industry: 'Other',
      location: 'Belfast, Northern Ireland',
      companySize: '1-10',
      jobTitles: ['Business Owner', 'Operations Manager'],
      keywords: 'roofing, roof repair, slate, tiles, guttering, Belfast'
    });
    setCustomIndustry('Roofing & Construction');
    setContactPreferences({
      includeEmails: true,
      includePhones: true,
      includeLinkedIn: false
    });
    setValidationCriteria({
      mustHaveWebsite: true,
      mustHaveContactInfo: true,
      mustHaveSpecificKeywords: ['roofing', 'contractor', 'Belfast'],
      mustBeInIndustry: true,
      customValidationRules: 'Must offer residential or commercial roofing services'
    });
  }
}, [devMode]);
```

### Component Implementation (from hunter/page.tsx)
```tsx
{process.env.NODE_ENV === 'development' && (
  <div className="fixed top-4 right-4 z-50">
    <Button
      onClick={() => setDevMode(!devMode)}
      className={`h-10 px-4 text-sm font-black uppercase ${
        devMode
          ? 'bg-green-500 hover:bg-green-600 text-white'
          : 'bg-gray-200 hover:bg-gray-300 text-black'
      } border-2 border-black`}
    >
      DEV MODE {devMode ? 'ON' : 'OFF'}
    </Button>
  </div>
)}
```

### Styling Rules
- **Position**: `fixed top-4 right-4 z-50`
- **Visual State**: Green when active, gray when inactive
- **Size**: `h-10 px-4 text-sm`
- **Border**: `border-2 border-black`
- **Z-index**: `z-50` to ensure visibility above all content
- **Environment Check**: `process.env.NODE_ENV === 'development'`
- **Toggle Behavior**: Click to enable/disable auto-fill
- **Font**: `font-black uppercase text-sm`

### Data Patterns by Page Type

#### Hunter Onboarding (Lead Generation)
```tsx
// Search Definition
searchName: 'Belfast Roofing Contractors Q4',
searchObjective: 'Finding roofing contractors and construction companies in Belfast area for partnership opportunities',
selectedSources: ['web'],
searchCriteria: {
  industry: 'Other',
  location: 'Belfast, Northern Ireland',
  companySize: '1-10',
  jobTitles: ['Business Owner', 'Operations Manager'],
  keywords: 'roofing, roof repair, slate, tiles, guttering, Belfast'
},
customIndustry: 'Roofing & Construction'
```

#### Voice Agents
```tsx
agentName: 'Sarah - Sales Assistant',
description: 'Professional sales agent for B2B software outreach',
purpose: 'sales',
voiceProvider: 'elevenlabs',
voiceId: 'pNInz6obpgDQGcFmaJgB',
voiceStyle: 'professional',
systemPrompt: 'You are Sarah, a professional sales assistant...'
```

#### RAG Workflows
```tsx
workflowName: 'Tech Startup Documentation',
description: 'Knowledge base for tech startup documentation and FAQs',
sourceType: 'mixed',
embeddingModel: 'jina-clip-v2',
chunkSize: 512,
chunkOverlap: 50
```

### Best Practices
1. **Environment Check**: Only show in development mode
2. **Realistic Data**: Use actual business scenarios
3. **Complete Coverage**: Populate all required fields
4. **Contextual**: Tailor data to the specific onboarding flow
5. **Toggle Behavior**: Click to enable/disable auto-fill
6. **Visual Feedback**: Clear on/off states with color coding

### Integration Steps
1. Add `devMode` state to your component
2. Create the sticky button with environment check
3. Implement the auto-fill effect with realistic data
4. Ensure all form fields are populated correctly
5. Test toggle functionality in development

### Alternative Patterns
- **Floating Action Button**: Bottom-right corner for mobile
- **Keyboard Shortcut**: Add `Ctrl+D` or `Cmd+D` toggle
- **Context Menu**: Right-click to enable dev mode
- **Console Toggle**: `window.toggleDevMode()` for debugging

## Selection Cards with Star15

### Implementation Pattern
```tsx
<div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
  <div className="relative"> {/* IMPORTANT: No overflow-hidden */}
    {selectedItem === 'item-id' && (
      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" 
           style={{animation: 'overshoot 0.3s ease-out'}}>
        <div className="relative">
          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
            <Star15 color="#FFD700" size={80} 
                    className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" 
                    stroke="black" strokeWidth={8} />
          </div>
          <div className="absolute inset-0 flex items-center justify-center">
            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" 
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              SELECTED
            </span>
          </div>
        </div>
      </div>
    )}
    <Card 
      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
        selectedItem === 'item-id' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
      }`}
      onClick={() => setSelectedItem('item-id')}
    >
      <CardContent className="p-4 text-center">
        <UilIcon className="h-8 w-8 mx-auto mb-2" />
        <h4 className="font-black uppercase">ITEM TITLE</h4>
        <p className="text-sm text-gray-600">Item description</p>
      </CardContent>
    </Card>
  </div>
</div>
```

### Key Rules for Star15:
1. **NEVER** add `overflow-hidden` to the parent card wrapper
2. Use responsive positioning for the star (-top-8/-right-8 on mobile, scaling up)
3. Animation duration: 15s for spin, 0.3s delay
4. Overshoot animation on initial appearance
5. "SELECTED" text rotated 12 degrees inside the star

## Info/Tip Boxes

### Standard Info Box Pattern
```tsx
<Card className="bg-yellow-100 border-2 border-black mt-6">
  <CardContent className="p-4">
    <div className="flex items-start gap-3">
      <Button 
        size="sm" 
        variant="neutral" 
        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
      >
        <UilInfoCircle className="h-4 w-4" />
      </Button>
      <div>
        <p className="text-sm font-bold">INFO BOX TITLE</p>
        <p className="text-sm text-gray-700 mt-1">
          Helpful information or tips about the current step go here.
        </p>
      </div>
    </div>
  </CardContent>
</Card>
```

## Form Elements

### Input Fields
```tsx
<div>
  <label className="text-xl font-black uppercase mb-3 block">
    FIELD LABEL
  </label>
  <Input
    type="text"
    value={value}
    onChange={(e) => setValue(e.target.value)}
    placeholder="Placeholder text"
    className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
  />
</div>
```

### Textarea Fields
```tsx
<Textarea
  value={value}
  onChange={(e) => setValue(e.target.value)}
  placeholder="Placeholder text"
  className="min-h-[120px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
/>
```

## File Upload Pattern

### CSV Upload Card Implementation
Used for uploading contact lists, data files, or any bulk import functionality.

```tsx
{targetListType === 'upload' && (
  <Card className="bg-orange-50 border-4 border-black">
    <CardContent className="p-8">
      <div className="border-4 border-dashed border-black rounded-lg p-8 text-center bg-white">
        <input
          type="file"
          accept=".csv"
          onChange={handleFileUpload}
          className="hidden"
          id="csv-upload"
        />
        <label htmlFor="csv-upload" className="cursor-pointer">
          <Button size="icon" variant="header" className="w-16 h-16 mb-4 bg-orange-500 hover:bg-orange-600">
            <UilUpload className="h-8 w-8 text-white" />
          </Button>
          <p className="text-lg font-bold">Click to upload CSV file</p>
          <p className="text-sm text-gray-600 mt-2">Format: Name, Phone Number, Company (optional)</p>
        </label>
      </div>
      {uploadedFile && (
        <div className="mt-4 p-4 bg-green-50 border-2 border-black rounded">
          <p className="font-bold">✓ {uploadedFile.name} uploaded</p>
          <p className="text-sm text-gray-600">Estimated contacts: {estimatedContacts}</p>
        </div>
      )}
    </CardContent>
  </Card>
)}
```

### File Upload Handler
```tsx
const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
  if (e.target.files && e.target.files[0]) {
    setUploadedFile(e.target.files[0]);
    // Process file or update contact count
    setEstimatedContacts(Math.floor(Math.random() * 500) + 100);
  }
};
```

## Navigation Controls

### Standard Navigation Layout
```tsx
<div className="flex gap-4 mt-8">
  <Button
    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
    onClick={() => setCurrentStep(currentStep - 1)}
  >
    <UilArrowLeft className="mr-2 h-6 w-6" />
    BACK
  </Button>
  <Button
    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
    onClick={() => setCurrentStep(currentStep + 1)}
    disabled={!canProceed()}
  >
    CONTINUE
    <UilArrowRight className="ml-2 h-6 w-6" />
  </Button>
</div>
```

## Color Schemes by Page Type

### Calls Page (Orange Theme)
- Background: `bg-orange-500`
- Primary buttons: `bg-orange-600`
- Info cards: `bg-orange-50`
- Selection highlight: `bg-orange-100`

### Other Pages
- Agents: Blue theme (`bg-blue-500`)
- Hunter: Violet theme (`bg-violet-400`)
- RAG: Cyan theme (`bg-cyan-400`)
- Transcribe: Blue theme (`bg-blue-500`)
- Voice: Pink theme (`bg-pink-500`)

## Important Implementation Notes

1. **Font Family**: Always include `style={{ fontFamily: 'Noyh-Bold, sans-serif' }}` on the root container
2. **Grid Pattern**: Use the specified background image with 60px x 60px grid
3. **Uppercase Text**: All headings and button text should be uppercase
4. **Bold Weights**: Use `font-black` for headings, `font-bold` for emphasis
5. **Shadow Pattern**: Consistent shadow usage (e.g., `shadow-[6px_6px_0_rgba(0,0,0,1)]`)
6. **Border Width**: 4px borders for main elements, 2px for secondary
7. **Transform Effects**: Use rotation (-1 or 1 degree) for Neobrutalist style
8. **Responsive Breakpoints**: Use sm/md prefixes for responsive design
9. **Step Content**: Wrap each step in a single Card, avoid nested cards
10. **Selection UI**: Use grid layouts with cards for selections, not dropdowns
11. **Info Boxes**: Keep them simple with yellow background and minimal decoration
12. **Clean Design**: Focus on functionality over excessive decoration
13. **Dev Mode**: Always include the sticky dev mode toggle for development
14. **Realistic Data**: Use actual business scenarios in dev mode auto-fill


================================================
FILE: blog/page.tsx
================================================
'use client';

import * as React from 'react';
import Link from 'next/link';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  UilBook,
  UilClock,
  UilUser,
  UilArrowRight,
  UilFire,
  UilStar,
  UilBookOpen,
  UilApps,
  UilRocket,
  UilChart,
  UilMicrophone,
  UilBrain
} from '@tooni/iconscout-unicons-react';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { Star15 } from '@/components/ui/star';

interface BlogPost {
  id: string;
  title: string;
  excerpt: string;
  author: string;
  readTime: string;
  category: string;
  featured: boolean;
  date: string;
  content: string;
}

const mockBlogPosts: BlogPost[] = [
  {
    id: '1',
    title: 'HOW TO BUILD YOUR FIRST AI VOICE AGENT',
    excerpt: 'Learn the fundamentals of creating conversational AI agents that can handle complex business interactions.',
    author: 'Sarah Chen',
    readTime: '5 min read',
    category: 'Getting Started',
    featured: true,
    date: 'January 15, 2024',
    content: `<p>Hey creator,</p><p><strong>Welcome to the world of AI voice agents!</strong></p><p>Building your first AI voice agent might seem daunting, but with the right approach, you'll have a working conversational AI up and running in no time.</p><h3><strong>What you'll need</strong></h3><ul><li><p><strong>Voice recognition:</strong> Choose between cloud-based (Google Speech-to-Text, AWS Transcribe) or on-premise solutions</p></li><li><p><strong>Natural Language Processing:</strong> OpenAI GPT-4, Claude, or open-source alternatives like Llama</p></li><li><p><strong>Text-to-Speech:</strong> ElevenLabs, Azure Cognitive Services, or our own Chatterbox TTS</p></li><li><p><strong>Integration platform:</strong> Webhook endpoints, real-time communication protocols</p></li></ul><h3><strong>Building blocks</strong></h3><ul><li><p>Set up speech recognition pipeline with proper audio preprocessing</p></li><li><p>Design conversation flows and handle context switching</p></li><li><p>Implement error handling and fallback responses</p></li><li><p>Test with real users and iterate based on feedback</p></li></ul><h3><strong>Pro tips for success</strong></h3><p>Consider these essential aspects:</p><ul><li><p>Keep conversations natural and flowing</p></li><li><p>Handle interruptions gracefully</p></li><li><p>Maintain conversation context across multiple turns</p></li><li><p>Implement proper latency optimization</p></li><li><p>Plan for scalability from day one</p></li></ul><p>The key is starting simple and iterating quickly. Don't try to build the perfect agent on your first attempt!</p><p>Happy building,</p><p>Sarah Chen</p><hr contenteditable="false"><p><strong>Resources:</strong></p><ul><li><p>Diala Platform Documentation</p></li><li><p>Voice Agent Best Practices Guide</p></li></ul>`
  },
  {
    id: '2',
    title: 'MAXIMIZING COLD CALL SUCCESS WITH AI',
    excerpt: 'Discover proven strategies for using AI voice agents to improve your outbound sales performance.',
    author: 'Mike Rodriguez',
    readTime: '8 min read',
    category: 'Sales',
    featured: false,
    date: 'January 12, 2024',
    content: `<p>Sales professional,</p><p><strong>AI is revolutionizing cold calling, and here's how you can leverage it.</strong></p><p>After implementing AI voice agents across 500+ sales teams, we've identified the strategies that consistently deliver 3x better conversion rates.</p><h3><strong>The AI advantage</strong></h3><ul><li><p><strong>24/7 availability:</strong> Your AI agents never sleep, maximizing contact opportunities</p></li><li><p><strong>Consistent messaging:</strong> Every call delivers your perfect pitch</p></li><li><p><strong>Instant qualification:</strong> AI pre-qualifies leads before human handoff</p></li><li><p><strong>Data-driven optimization:</strong> Real-time analysis improves performance continuously</p></li></ul><h3><strong>Implementation strategy</strong></h3><ul><li><p>Start with simple qualification calls</p></li><li><p>Train AI on your top performer's conversations</p></li><li><p>Set clear handoff triggers for human intervention</p></li><li><p>Monitor and optimize conversation flows weekly</p></li></ul><h3><strong>Measuring success</strong></h3><p>Track these key metrics:</p><ul><li><p>Contact rate improvements (typically 40-60% increase)</p></li><li><p>Qualification accuracy (aim for 85%+ precision)</p></li><li><p>Conversion to human agent (optimize for quality handoffs)</p></li><li><p>Overall pipeline velocity improvements</p></li></ul><p>Remember: AI doesn't replace human sales skills – it amplifies them by handling routine tasks and providing better qualified opportunities.</p><p>Keep selling,</p><p>Mike Rodriguez</p>`
  },
  {
    id: '3',
    title: 'VOICE CLONING BEST PRACTICES',
    excerpt: 'Essential tips for creating natural-sounding voice clones that maintain authenticity and engagement.',
    author: 'Lisa Park',
    readTime: '6 min read',
    category: 'Voice Technology',
    featured: false,
    date: 'January 10, 2024',
    content: `<p>Audio engineer,</p><p><strong>Creating authentic voice clones requires both technical precision and artistic sensibility.</strong></p><p>After producing voice clones for hundreds of creators, here are the non-negotiable best practices that separate amateur attempts from professional results.</p><h3><strong>Recording requirements</strong></h3><ul><li><p><strong>Clean audio:</strong> Record in a treated room with minimal background noise</p></li><li><p><strong>Consistent levels:</strong> Maintain steady volume throughout your session</p></li><li><p><strong>Natural delivery:</strong> Speak conversationally, avoid over-articulation</p></li><li><p><strong>Sufficient data:</strong> Provide 15-30 minutes of varied content</p></li></ul><h3><strong>Content strategy</strong></h3><ul><li><p>Include emotional range: happy, serious, questioning tones</p></li><li><p>Cover common business scenarios and vocabulary</p></li><li><p>Record phonetically diverse content</p></li><li><p>Include natural pauses and speech patterns</p></li></ul><h3><strong>Technical optimization</strong></h3><p>For best results:</p><ul><li><p>Use 48kHz/24-bit recording quality minimum</p></li><li><p>Apply gentle noise reduction if needed</p></li><li><p>Normalize audio levels consistently</p></li><li><p>Remove mouth sounds and breathing artifacts</p></li><li><p>Split into 10-30 second segments for training</p></li></ul><p>The goal isn't perfection – it's authenticity. Your voice clone should sound like you on your best day, not like a robot trying to be you.</p><p>Keep it real,</p><p>Lisa Park</p>`
  },
  {
    id: '4',
    title: 'INTEGRATING RAG FOR SMARTER AGENTS',
    excerpt: 'How to leverage Retrieval-Augmented Generation to create more knowledgeable and context-aware agents.',
    author: 'David Kim',
    readTime: '10 min read',
    category: 'Advanced',
    featured: false,
    date: 'January 8, 2024',
    content: `<p>AI developer,</p><p><strong>RAG transforms static AI agents into dynamic, knowledge-powered assistants.</strong></p><p>Implementing Retrieval-Augmented Generation correctly can increase your agent's accuracy by 75% while reducing hallucinations to near-zero levels.</p><h3><strong>RAG fundamentals</strong></h3><ul><li><p><strong>Vector databases:</strong> Store and retrieve relevant context efficiently</p></li><li><p><strong>Embedding models:</strong> Convert text into searchable vector representations</p></li><li><p><strong>Retrieval strategies:</strong> Find the most relevant information for each query</p></li><li><p><strong>Context injection:</strong> Seamlessly integrate retrieved data into responses</p></li></ul><h3><strong>Implementation steps</strong></h3><ul><li><p>Choose your vector database (Pinecone, Weaviate, or Chroma)</p></li><li><p>Process and chunk your knowledge base effectively</p></li><li><p>Select appropriate embedding models for your domain</p></li><li><p>Implement semantic search with proper scoring</p></li><li><p>Design context windows for optimal performance</p></li></ul><h3><strong>Advanced techniques</strong></h3><p>Take your RAG system further:</p><ul><li><p><strong>Hybrid search:</strong> Combine semantic and keyword matching</p></li><li><p><strong>Reranking:</strong> Improve relevance with secondary scoring models</p></li><li><p><strong>Query expansion:</strong> Generate related search terms automatically</p></li><li><p><strong>Context compression:</strong> Fit more relevant information in token limits</p></li><li><p><strong>Multi-hop reasoning:</strong> Chain multiple retrievals for complex queries</p></li></ul><h3><strong>Performance optimization</strong></h3><p>Monitor these key metrics:</p><ul><li><p>Retrieval precision and recall rates</p></li><li><p>Response accuracy improvements</p></li><li><p>Query latency (target under 500ms)</p></li><li><p>User satisfaction scores</p></li></ul><p>RAG isn't just about adding a database to your AI – it's about creating intelligent systems that know when and how to find the right information at the right time.</p><p>Build wisely,</p><p>David Kim</p>`
  }
];

export default function BlogPage() {
  const [selectedCategory, setSelectedCategory] = React.useState('all');
  const [selectedPost, setSelectedPost] = React.useState<string | null>(null);

  const categories = [
    { name: 'all', icon: UilApps },
    { name: 'Getting Started', icon: UilRocket },
    { name: 'Sales', icon: UilChart },
    { name: 'Voice Technology', icon: UilMicrophone },
    { name: 'Advanced', icon: UilBrain }
  ];

  const filteredPosts = selectedCategory === 'all' 
    ? mockBlogPosts 
    : mockBlogPosts.filter(post => post.category === selectedCategory);

  return (
    <div 
      className="min-h-screen bg-white relative" 
      style={{ 
        fontFamily: 'Noyh-Bold, sans-serif'
      }}
    >
      <div className="max-w-6xl mx-auto px-4 py-8">
        {/* Page Header */}
        <div className="text-center mb-12">
          <h1 className="text-6xl md:text-7xl font-black uppercase text-black mb-4">
            DIALA BLOG
          </h1>
          <p className="text-xl text-gray-700 font-bold max-w-2xl mx-auto">
            Learn from experts and level up your AI voice game
          </p>
        </div>


        {/* Featured Post - Most Recent */}
        <div className="mb-12 flex gap-8">
          <div className="w-2/3">
            {mockBlogPosts.slice(0, 1).map((post) => (
              <Link key={post.id} href={`/onboarding/blog/${post.id}`}>
                <Card 
                  className="border-4 border-black shadow-[6px_6px_0_rgba(0,0,0,1)] hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all cursor-pointer"
                >
                <div className="h-full border-b-4 border-black relative overflow-hidden bg-yellow-400">
                  <img 
                    src="/424f35f4c6837cba6f15.webp" 
                    alt="AI Voice Agents for Small Business"
                    className="w-full h-full object-cover"
                  />
                </div>
                <CardContent className="p-8">
                  <h2 className="text-3xl md:text-4xl font-black uppercase text-black mb-4 leading-tight">
                    {post.title}
                  </h2>
                  <span className="font-bold text-lg">{post.author}</span>
                </CardContent>
                </Card>
              </Link>
            ))}
          </div>
          
          {/* Recent Posts Titles */}
          <div className="w-1/3 space-y-4">
            {mockBlogPosts.slice(1, 6).map((post, index) => (
              <Link key={post.id} href={`/onboarding/blog/${post.id}`}>
                <div 
                  className="px-4 pt-4 pb-2 cursor-pointer border-b-2 border-black hover:bg-gray-50 transition-colors"
                >
                <h4 className="font-black uppercase text-2xl leading-tight">{post.title}</h4>
                <div className="flex items-center gap-3 mt-3">
                  <span className="text-base text-gray-600">{post.author}</span>
                </div>
                </div>
              </Link>
            ))}
          </div>
        </div>

        {/* Blog Posts Grid - Remaining Posts */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {mockBlogPosts.slice(1).map((post, index) => {
            const images = ['/gr.png', '/gr2.png', '/gr3.png'];
            const image = images[index % images.length];
            
            return (
              <Link key={post.id} href={`/onboarding/blog/${post.id}`}>
                <Card 
                  className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all cursor-pointer relative"
                >
                <div className="w-full border-b-4 border-black relative overflow-hidden">
                  <img 
                    src={image}
                    alt={post.title}
                    className="w-full h-full object-cover"
                  />
                </div>
                <CardContent className="p-6">
                  <h3 className="font-black uppercase text-lg mb-8 leading-tight">{post.title}</h3>
                </CardContent>
                <div className="absolute bottom-6 left-6">
                  <span className="font-bold text-lg text-black">{post.date}</span>
                </div>
                </Card>
              </Link>
            );
          })}
        </div>
      </div>
        
      {/* Footer */}
      <div className="mt-16 bg-gray-50 border-t-4 border-black">
        <div className="max-w-6xl mx-auto px-4 py-8">
          <OnboardingFooter />
        </div>
      </div>
    </div>
  );
}


================================================
FILE: blog/[blogId]/page.tsx
================================================
'use client';

import * as React from 'react';
import Link from 'next/link';
import { notFound } from 'next/navigation';
import { UilArrowLeft } from '@tooni/iconscout-unicons-react';

interface BlogPost {
  id: string;
  title: string;
  excerpt: string;
  author: string;
  readTime: string;
  category: string;
  featured: boolean;
  date: string;
  content: string;
}

const mockBlogPosts: BlogPost[] = [
  {
    id: '1',
    title: 'HOW TO BUILD YOUR FIRST AI VOICE AGENT',
    excerpt: 'Learn the fundamentals of creating conversational AI agents that can handle complex business interactions.',
    author: 'Sarah Chen',
    readTime: '5 min read',
    category: 'Getting Started',
    featured: true,
    date: 'January 15, 2024',
    content: `<p>Hey creator,</p><p><strong>Welcome to the world of AI voice agents!</strong></p><p>Building your first AI voice agent might seem daunting, but with the right approach, you'll have a working conversational AI up and running in no time.</p><h3><strong>What you'll need</strong></h3><ul><li><p><strong>Voice recognition:</strong> Choose between cloud-based (Google Speech-to-Text, AWS Transcribe) or on-premise solutions</p></li><li><p><strong>Natural Language Processing:</strong> OpenAI GPT-4, Claude, or open-source alternatives like Llama</p></li><li><p><strong>Text-to-Speech:</strong> ElevenLabs, Azure Cognitive Services, or our own Chatterbox TTS</p></li><li><p><strong>Integration platform:</strong> Webhook endpoints, real-time communication protocols</p></li></ul><h3><strong>Building blocks</strong></h3><ul><li><p>Set up speech recognition pipeline with proper audio preprocessing</p></li><li><p>Design conversation flows and handle context switching</p></li><li><p>Implement error handling and fallback responses</p></li><li><p>Test with real users and iterate based on feedback</p></li></ul><h3><strong>Pro tips for success</strong></h3><p>Consider these essential aspects:</p><ul><li><p>Keep conversations natural and flowing</p></li><li><p>Handle interruptions gracefully</p></li><li><p>Maintain conversation context across multiple turns</p></li><li><p>Implement proper latency optimization</p></li><li><p>Plan for scalability from day one</p></li></ul><p>The key is starting simple and iterating quickly. Don't try to build the perfect agent on your first attempt!</p><p>Happy building,</p><p>Sarah Chen</p><hr contenteditable="false"><p><strong>Resources:</strong></p><ul><li><p>Diala Platform Documentation</p></li><li><p>Voice Agent Best Practices Guide</p></li></ul>`
  },
  {
    id: '2',
    title: 'MAXIMIZING COLD CALL SUCCESS WITH AI',
    excerpt: 'Discover proven strategies for using AI voice agents to improve your outbound sales performance.',
    author: 'Mike Rodriguez',
    readTime: '8 min read',
    category: 'Sales',
    featured: false,
    date: 'January 12, 2024',
    content: `<p>Sales professional,</p><p><strong>AI is revolutionizing cold calling, and here's how you can leverage it.</strong></p><p>After implementing AI voice agents across 500+ sales teams, we've identified the strategies that consistently deliver 3x better conversion rates.</p><h3><strong>The AI advantage</strong></h3><ul><li><p><strong>24/7 availability:</strong> Your AI agents never sleep, maximizing contact opportunities</p></li><li><p><strong>Consistent messaging:</strong> Every call delivers your perfect pitch</p></li><li><p><strong>Instant qualification:</strong> AI pre-qualifies leads before human handoff</p></li><li><p><strong>Data-driven optimization:</strong> Real-time analysis improves performance continuously</p></li></ul><h3><strong>Implementation strategy</strong></h3><ul><li><p>Start with simple qualification calls</p></li><li><p>Train AI on your top performer's conversations</p></li><li><p>Set clear handoff triggers for human intervention</p></li><li><p>Monitor and optimize conversation flows weekly</p></li></ul><h3><strong>Measuring success</strong></h3><p>Track these key metrics:</p><ul><li><p>Contact rate improvements (typically 40-60% increase)</p></li><li><p>Qualification accuracy (aim for 85%+ precision)</p></li><li><p>Conversion to human agent (optimize for quality handoffs)</p></li><li><p>Overall pipeline velocity improvements</p></li></ul><p>Remember: AI doesn't replace human sales skills – it amplifies them by handling routine tasks and providing better qualified opportunities.</p><p>Keep selling,</p><p>Mike Rodriguez</p>`
  },
  {
    id: '3',
    title: 'VOICE CLONING BEST PRACTICES',
    excerpt: 'Essential tips for creating natural-sounding voice clones that maintain authenticity and engagement.',
    author: 'Lisa Park',
    readTime: '6 min read',
    category: 'Voice Technology',
    featured: false,
    date: 'January 10, 2024',
    content: `<p>Audio engineer,</p><p><strong>Creating authentic voice clones requires both technical precision and artistic sensibility.</strong></p><p>After producing voice clones for hundreds of creators, here are the non-negotiable best practices that separate amateur attempts from professional results.</p><h3><strong>Recording requirements</strong></h3><ul><li><p><strong>Clean audio:</strong> Record in a treated room with minimal background noise</p></li><li><p><strong>Consistent levels:</strong> Maintain steady volume throughout your session</p></li><li><p><strong>Natural delivery:</strong> Speak conversationally, avoid over-articulation</p></li><li><p><strong>Sufficient data:</strong> Provide 15-30 minutes of varied content</p></li></ul><h3><strong>Content strategy</strong></h3><ul><li><p>Include emotional range: happy, serious, questioning tones</p></li><li><p>Cover common business scenarios and vocabulary</p></li><li><p>Record phonetically diverse content</p></li><li><p>Include natural pauses and speech patterns</p></li></ul><h3><strong>Technical optimization</strong></h3><p>For best results:</p><ul><li><p>Use 48kHz/24-bit recording quality minimum</p></li><li><p>Apply gentle noise reduction if needed</p></li><li><p>Normalize audio levels consistently</p></li><li><p>Remove mouth sounds and breathing artifacts</p></li><li><p>Split into 10-30 second segments for training</p></li></ul><p>The goal isn't perfection – it's authenticity. Your voice clone should sound like you on your best day, not like a robot trying to be you.</p><p>Keep it real,</p><p>Lisa Park</p>`
  },
  {
    id: '4',
    title: 'INTEGRATING RAG FOR SMARTER AGENTS',
    excerpt: 'How to leverage Retrieval-Augmented Generation to create more knowledgeable and context-aware agents.',
    author: 'David Kim',
    readTime: '10 min read',
    category: 'Advanced',
    featured: false,
    date: 'January 8, 2024',
    content: `<p>AI developer,</p><p><strong>RAG transforms static AI agents into dynamic, knowledge-powered assistants.</strong></p><p>Implementing Retrieval-Augmented Generation correctly can increase your agent's accuracy by 75% while reducing hallucinations to near-zero levels.</p><h3><strong>RAG fundamentals</strong></h3><ul><li><p><strong>Vector databases:</strong> Store and retrieve relevant context efficiently</p></li><li><p><strong>Embedding models:</strong> Convert text into searchable vector representations</p></li><li><p><strong>Retrieval strategies:</strong> Find the most relevant information for each query</p></li><li><p><strong>Context injection:</strong> Seamlessly integrate retrieved data into responses</p></li></ul><h3><strong>Implementation steps</strong></h3><ul><li><p>Choose your vector database (Pinecone, Weaviate, or Chroma)</p></li><li><p>Process and chunk your knowledge base effectively</p></li><li><p>Select appropriate embedding models for your domain</p></li><li><p>Implement semantic search with proper scoring</p></li><li><p>Design context windows for optimal performance</p></li></ul><h3><strong>Advanced techniques</strong></h3><p>Take your RAG system further:</p><ul><li><p><strong>Hybrid search:</strong> Combine semantic and keyword matching</p></li><li><p><strong>Reranking:</strong> Improve relevance with secondary scoring models</p></li><li><p><strong>Query expansion:</strong> Generate related search terms automatically</p></li><li><p><strong>Context compression:</strong> Fit more relevant information in token limits</p></li><li><p><strong>Multi-hop reasoning:</strong> Chain multiple retrievals for complex queries</p></li></ul><h3><strong>Performance optimization</strong></h3><p>Monitor these key metrics:</p><ul><li><p>Retrieval precision and recall rates</p></li><li><p>Response accuracy improvements</p></li><li><p>Query latency (target under 500ms)</p></li><li><p>User satisfaction scores</p></li></ul><p>RAG isn't just about adding a database to your AI – it's about creating intelligent systems that know when and how to find the right information at the right time.</p><p>Build wisely,</p><p>David Kim</p>`
  }
];

export default function BlogPostPage({ params }: { params: { blogId: string } }) {
  const post = mockBlogPosts.find(p => p.id === params.blogId);

  if (!post) {
    notFound();
  }

  return (
    <div 
      className="min-h-screen bg-white relative" 
      style={{ 
        fontFamily: 'Noyh-Bold, sans-serif'
      }}
    >
      <div className="container mx-auto px-8 py-16 sm:px-6 md:py-24 lg:px-8">
        <div className="mx-auto max-w-3xl">
          {/* Back to Blog Navigation */}
          <div className="mb-6">
            <Link 
              href="/onboarding/blog" 
              className="text-pink-600 hover:text-pink-800 mt-4 flex items-center font-medium transition-colors"
            >
              <UilArrowLeft className="mr-1.5" style={{width: '18px', height: '18px'}} />
              Back to Blog
            </Link>
          </div>

          {/* Header */}
          <header className="mb-12">
            <h1 className="text-4xl md:text-5xl font-black uppercase text-black mb-4 leading-tight">
              {post.title}
            </h1>
            <time className="text-gray-600 text-lg font-bold">
              {post.date}
            </time>
          </header>

          {/* Content */}
          <div className="mx-auto grid max-w-3xl gap-6 border-b-4 border-black py-12 text-xl">
            <div className="rich-text">
              <div 
                className="prose prose-xl max-w-none prose-headings:font-black prose-headings:uppercase prose-h3:text-2xl prose-h3:mb-4 prose-p:mb-4 prose-p:leading-relaxed prose-ul:mb-6 prose-li:mb-2 prose-strong:font-black prose-hr:border-black prose-hr:border-2"
                dangerouslySetInnerHTML={{ __html: post.content }}
                style={{
                  fontFamily: 'inherit',
                  color: '#000'
                }}
              />
            </div>
          </div>

          {/* Bottom Navigation */}
          <div className="mt-8">
            <Link 
              href="/onboarding/blog" 
              className="text-pink-600 hover:text-pink-800 mt-4 flex items-center font-medium transition-colors"
            >
              <UilArrowLeft className="mr-1.5" style={{width: '18px', height: '18px'}} />
              Back to Blog
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: calls/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import OnboardingNav from '@/components/custom/onboarding-nav';
import PremiumFeatureCard from '@/components/custom/premium-feature-card';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import InfoSection from '@/components/custom/info-section';
import { useAction } from "convex/react";
import { api } from "@convex/_generated/api";
import { useConvexErrorHandler } from '@/hooks/useConvexErrorHandler';
import { StarBadge, Star15 } from '@/components/ui/star';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { 
  UilPhone,
  UilPhoneVolume,
  UilOutgoingCall,
  UilMissedCall,
  UilCalendarAlt,
  UilClock,
  UilUpload,
  UilUsersAlt,
  UilRobot,
  UilArrowRight,
  UilArrowLeft,
  UilCheckCircle,
  UilPlay,
  UilPause,
  UilInfoCircle,
  UilChartGrowth,
  UilBell,
  UilVoicemail,
  UilClipboardNotes,
  UilListUl,
  UilAnalytics,
  UilTachometerFast,
  UilBriefcase,
  UilQuestionCircle
} from '@tooni/iconscout-unicons-react';

interface Agent {
  id: string;
  name: string;
  language: string;
  pitch: string;
}

interface CallSettings {
  startTime: string;
  endTime: string;
  timezone: string;
  maxCallsPerDay: number;
  retryAttempts: number;
  daysBetweenRetries: number;
  leaveVoicemail: boolean;
  callRecording: boolean;
}

const mockAgents: Agent[] = [
  { id: 'agent-1', name: 'Sales Champion', language: 'English', pitch: 'Discovery Calls' },
  { id: 'agent-2', name: 'Support Hero', language: 'English', pitch: 'Customer Support' },
  { id: 'agent-3', name: 'Booking Pro', language: 'English', pitch: 'Appointment Setter' },
];

interface Voice {
  id: string;
  name: string;
  description: string;
  previewText: string;
  premium?: boolean;
}

const voices: Voice[] = [
  {
    id: 'voice-1',
    name: 'Professional Sarah',
    description: 'Clear, confident business voice',
    previewText: "Hello, this is Sarah calling about your business growth opportunities..."
  },
  {
    id: 'voice-2',
    name: 'Friendly Alex',
    description: 'Warm, approachable conversational tone',
    previewText: "Hi there! I hope you&apos;re having a great day. I&apos;m reaching out to discuss..."
  },
  {
    id: 'voice-3',
    name: 'Executive Maya',
    description: 'Sophisticated, authoritative presence',
    previewText: "Good afternoon. This is Maya with an important business opportunity..."
  },
  {
    id: 'voice-4',
    name: 'Energetic Jake',
    description: 'Enthusiastic, high-energy approach',
    previewText: "Hey! Jake here with some exciting news about your business potential..."
  },
  {
    id: 'custom',
    name: 'Create Your Own',
    description: 'Clone your own voice for personalized calls',
    previewText: "Use your own voice for authentic conversations",
    premium: true
  }
];

const timezones = [
  'America/New_York',
  'America/Chicago',
  'America/Denver',
  'America/Los_Angeles',
  'Europe/London',
  'Europe/Paris',
  'Asia/Tokyo',
  'Australia/Sydney'
];

export default function CallsOnboarding() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [campaignName, setCampaignName] = React.useState('');
  const [campaignGoals, setCampaignGoals] = React.useState('');
  const [campaignType, setCampaignType] = React.useState('');
  const [selectedAgent, setSelectedAgent] = React.useState('');
  const [targetListType, setTargetListType] = React.useState('');
  const [uploadedFile, setUploadedFile] = React.useState<File | null>(null);
  const [manualNumbers, setManualNumbers] = React.useState('');
  const [callSettings, setCallSettings] = React.useState<CallSettings>({
    startTime: '09:00',
    endTime: '17:00',
    timezone: 'America/New_York',
    maxCallsPerDay: 100,
    retryAttempts: 3,
    daysBetweenRetries: 2,
    leaveVoicemail: true,
    callRecording: true
  });

  const [selectedVoice, setSelectedVoice] = React.useState('');
  const [isPlaying, setIsPlaying] = React.useState<string | null>(null);
  const [isLaunching, setIsLaunching] = React.useState(false);
  const [launchProgress, setLaunchProgress] = React.useState(0);
  const [showVerification, setShowVerification] = React.useState(false);
  const [campaignStats, setCampaignStats] = React.useState<any>(null);
  const [estimatedContacts, setEstimatedContacts] = React.useState(0);

  // Auto-adjust max calls based on contact count
  React.useEffect(() => {
    if (estimatedContacts > 0) {
      const maxCalls = Math.min(Math.max(10, estimatedContacts * 2), 200);
      setCallSettings(prev => ({ ...prev, maxCallsPerDay: maxCalls }));
    }
  }, [estimatedContacts]);
  const [devMode, setDevMode] = React.useState(false);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setUploadedFile(e.target.files[0]);
      // Simulate contact count
      setEstimatedContacts(Math.floor(Math.random() * 500) + 100);
    }
  };

  const canProceedFromStep1 = () => {
    return campaignName.trim() !== '' && campaignGoals.trim() !== '' && campaignType !== '';
  };

  const canProceedFromStep4 = () => {
    if (targetListType === 'upload' && uploadedFile) return true;
    if (targetListType === 'manual' && manualNumbers.trim()) return true;
    if (targetListType === 'existing') return true;
    return false;
  };

  const handleLaunchCampaign = async () => {
    setIsLaunching(true);
    setCurrentStep(6);
    
    // Simulate launch progress
    for (let i = 0; i <= 100; i += 20) {
      setLaunchProgress(i);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // Show verification modal after progress reaches 100%
    setShowVerification(true);
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerification(false);
    
    // Calculate realistic duration based on settings
    const contactsCount = estimatedContacts || 250;
    const dailyCalls = callSettings.maxCallsPerDay;
    const daysNeeded = Math.ceil(contactsCount / dailyCalls);
    const estimatedDuration = daysNeeded === 1 ? '1 day' : 
                             daysNeeded <= 3 ? `${daysNeeded} days` :
                             daysNeeded <= 7 ? '1 week' : 
                             `${Math.ceil(daysNeeded / 7)} weeks`;
    
    // Set campaign stats
    setCampaignStats({
      totalContacts: contactsCount,
      callsScheduled: contactsCount,
      estimatedDuration: estimatedDuration,
      startTime: new Date().toLocaleString(),
      status: 'Active'
    });
    
    setIsLaunching(false);
  };

  // Only allow explicit navigation via button clicks
  const handleStepChange = (step: number) => {
    setCurrentStep(step);
  };

  // Dev mode auto-fill effect
  React.useEffect(() => {
    if (devMode) {
      setCampaignName('Q4 Sales Outreach Campaign');
      setCampaignGoals('Generate 50 qualified leads for our SaaS platform through targeted outreach to mid-market companies');
      setCampaignType('sales');
      setSelectedAgent('agent-1');
      setSelectedVoice('voice-1');
      setTargetListType('manual');
      setManualNumbers('+1 555-0123\n+1 555-0124\n+1 555-0125\n+1 555-0126\n+1 555-0127');
      setEstimatedContacts(6);
      setCallSettings({
        startTime: '09:00',
        endTime: '17:00',
        timezone: 'America/New_York',
        maxCallsPerDay: 12, // Auto-adjusted: 6 contacts × 2 = 12 max calls
        retryAttempts: 3,
        daysBetweenRetries: 2,
        leaveVoicemail: true,
        callRecording: true
      });
    }
  }, [devMode]);

  const handlePlayVoice = (voiceId: string, previewText: string) => {
    setIsPlaying(voiceId);
    // Simulate audio playback
    setTimeout(() => {
      setIsPlaying(null);
    }, 2000);
  };

  return (
    <TooltipProvider>
      <div 
        className="min-h-screen bg-orange-500 relative pb-8" 
        style={{ 
          fontFamily: 'Noyh-Bold, sans-serif',
          backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
          backgroundSize: '60px 60px'
        }}
      >
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-4 right-4 z-50">
          <Button
            onClick={() => setDevMode(!devMode)}
            className={`h-10 px-4 text-sm font-black uppercase ${
              devMode
                ? 'bg-green-500 hover:bg-green-600 text-white'
                : 'bg-gray-200 hover:bg-gray-300 text-black'
            } border-2 border-black`}
          >
            DEV MODE {devMode ? 'ON' : 'OFF'}
          </Button>
        </div>
      )}
      <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          {/* Persistent Title Card */}
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-orange-600 border-2 border-black flex items-center justify-center">
                <UilPhone className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-orange-500 border-2 border-black flex items-center justify-center">
                <UilPhoneVolume className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-orange-600 hover:bg-orange-700 border-4 border-black p-0">
                {currentStep === 1 && <UilBriefcase className="h-12 w-12 text-white" />}
                {currentStep === 2 && <UilRobot className="h-12 w-12 text-white" />}
                {currentStep === 3 && <UilPhone className="h-12 w-12 text-white" />}
                {currentStep === 4 && <UilUsersAlt className="h-12 w-12 text-white" />}
                {currentStep === 5 && <UilClock className="h-12 w-12 text-white" />}
                {currentStep === 6 && <UilPlay className="h-12 w-12 text-white" />}
                {currentStep === 7 && <UilCheckCircle className="h-12 w-12 text-white" />}
              </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'CAMPAIGN CREATION'}
                {currentStep === 2 && 'AGENT SELECTION'}
                {currentStep === 3 && 'VOICE SELECTION'}
                {currentStep === 4 && 'TARGET AUDIENCE'}
                {currentStep === 5 && 'CALL CONFIGURATION'}
                {currentStep === 6 && 'LAUNCH READY'}
                {currentStep === 7 && (isLaunching ? 'LAUNCHING CAMPAIGN' : 'CAMPAIGN LAUNCHED')}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'BUILD YOUR OUTREACH STRATEGY'}
                {currentStep === 2 && 'CHOOSE YOUR AI REPRESENTATIVE'}
                {currentStep === 3 && 'SELECT THE PERFECT VOICE'}
                {currentStep === 4 && 'DEFINE WHO TO REACH'}
                {currentStep === 5 && 'OPTIMIZE YOUR CAMPAIGN'}
                {currentStep === 6 && 'REVIEW AND DEPLOY'}
                {currentStep === 7 && (isLaunching ? 'SETTING UP YOUR CAMPAIGN' : 'YOUR CAMPAIGN IS LIVE')}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-orange-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-orange-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-orange-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>
          {/* Step 1: Campaign Setup */}
          {currentStep === 1 && (
            <div className="space-y-8">
              {/* Campaign Details Card */}
              <Card className="transform -rotate-1">
                <CardContent className="p-8">
                  <div className="text-center mb-8">
                    <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                      CAMPAIGN SETUP
                    </h1>
                  </div>
                  
                  <div className="space-y-6">
                    <div>
                      <label className="text-xl font-black uppercase mb-3 block">
                        CAMPAIGN NAME
                      </label>
                      <Input
                        type="text"
                        value={campaignName}
                        onChange={(e) => setCampaignName(e.target.value)}
                        placeholder="e.g., Q4 Sales Blitz, Customer Feedback"
                        className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
                      />
                    </div>

                    <div>
                      <label className="text-xl font-black uppercase mb-3 block">
                        CAMPAIGN TYPE
                      </label>
                      <TooltipProvider>
                      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                        <div className="relative">
                          {campaignType === 'sales' && (
                            <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                </div>
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                    SELECTED
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Card 
                                className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                                  campaignType === 'sales' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                                }`}
                                onClick={() => setCampaignType('sales')}
                              >
                                <CardContent className="p-4 text-center">
                                  <UilTachometerFast className="h-8 w-8 mx-auto mb-2" />
                                  <h4 className="font-black uppercase">SALES</h4>
                                  <p className="text-sm text-gray-600">Outbound prospecting</p>
                                </CardContent>
                              </Card>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Focused on qualifying leads and booking meetings. Agents use persistent follow-up and objection handling techniques.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="relative">
                          {campaignType === 'followup' && (
                            <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                </div>
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                    SELECTED
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Card 
                                className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                                  campaignType === 'followup' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                                }`}
                                onClick={() => setCampaignType('followup')}
                              >
                                <CardContent className="p-4 text-center">
                                  <UilBell className="h-8 w-8 mx-auto mb-2" />
                                  <h4 className="font-black uppercase">FOLLOW-UP</h4>
                                  <p className="text-sm text-gray-600">Re-engage leads</p>
                                </CardContent>
                              </Card>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Re-engage existing leads or customers. Agents focus on relationship building and identifying new opportunities.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="relative">
                          {campaignType === 'survey' && (
                            <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                </div>
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                    SELECTED
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Card 
                                className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                                  campaignType === 'survey' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                                }`}
                                onClick={() => setCampaignType('survey')}
                              >
                                <CardContent className="p-4 text-center">
                                  <UilClipboardNotes className="h-8 w-8 mx-auto mb-2" />
                                  <h4 className="font-black uppercase">SURVEY</h4>
                                  <p className="text-sm text-gray-600">Gather feedback</p>
                                </CardContent>
                              </Card>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Collect customer feedback and insights. Agents conduct structured interviews and ensure high completion rates.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                      </div>
                      </TooltipProvider>
                    </div>

                    <div>
                      <label className="text-xl font-black uppercase mb-3 block">
                        CAMPAIGN GOALS
                      </label>
                      <Textarea
                        value={campaignGoals}
                        onChange={(e) => setCampaignGoals(e.target.value)}
                        placeholder="What do you want to achieve? e.g., Book 50 demos, collect customer feedback, qualify 100 leads..."
                        className="min-h-[120px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
                      />
                    </div>
                  </div>

                  {/* Info Box */}
                  <Card className="bg-yellow-100 border-2 border-black mt-6">
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <Button 
                          size="sm" 
                          variant="neutral" 
                          className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                        >
                          <UilInfoCircle className="h-4 w-4" />
                        </Button>
                        <div>
                          <p className="text-sm font-bold">CAMPAIGN TIPS</p>
                          <p className="text-sm text-gray-700 mt-1">
                            Give your campaign a clear name and specific goals. This helps our AI agents understand 
                            your objectives and adapt their conversations accordingly.
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Button
                    className="w-full mt-8 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(2)}
                    disabled={!canProceedFromStep1()}
                  >
                    <span className="flex items-center justify-center">
                      CONTINUE
                      <UilArrowRight className="ml-2 h-6 w-6" />
                    </span>
                  </Button>
                </CardContent>
              </Card>

              
              {/* Custom Info Cards */}
              <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilChartGrowth className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        CAMPAIGN PERFORMANCE AT SCALE
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our campaigns achieve <span className="font-black text-orange-600">3x higher connection rates</span> than traditional dialers. 
                        AI-powered scheduling ensures calls happen at optimal times, while intelligent retry logic maximizes reach without annoying prospects.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Real-time campaign analytics</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">AI-optimized call timing</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Smart retry logic</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Voicemail detection</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    >
                      <UilAnalytics className="h-6 w-6 text-black" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        CONVERSION OPTIMIZATION
                      </h3>
                      <p className="text-gray-700 text-lg leading-relaxed">
                        Track every interaction and optimize for conversions. Our AI learns from each call, improving scripts and timing to 
                        <span className="font-black text-orange-600"> boost your conversion rates by up to 40%</span>. Get detailed insights on what works 
                        and what doesn&apos;t, with actionable recommendations for improvement.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 1 */}
          {currentStep === 1 && (
            <InfoSection customContent={{
              icon: <UilBriefcase className="h-6 w-6 text-white" />,
              title: "Build Powerful Outreach Campaigns",
              description: "Create targeted campaigns that convert. Our AI-powered approach combines smart goal setting, intelligent campaign types, and strategic planning to maximize your outreach success and drive meaningful business results.",
              benefits: [
                "3x higher conversion rates than traditional dialers",
                "AI-optimized campaign strategies and timing",
                "Real-time performance tracking and analytics",
                "Intelligent lead qualification and scoring"
              ],
              faqs: [
                {
                  icon: <UilBriefcase className="h-5 w-5" />,
                  question: "What makes campaign types important?",
                  answer: "Different campaign types are optimized for specific outcomes. Sales campaigns focus on conversion and qualification, Follow-up campaigns nurture existing relationships, and Survey campaigns gather valuable feedback - each with tailored AI strategies."
                },
                {
                  icon: <UilChartGrowth className="h-5 w-5" />,
                  question: "How do clear goals improve performance?",
                  answer: "Specific goals help our AI adapt conversation strategies in real-time. Whether booking demos or qualifying leads, clear objectives enable the system to optimize scripts, timing, and follow-up sequences for maximum success."
                },
                {
                  icon: <UilTachometerFast className="h-5 w-5" />,
                  question: "Can I modify my campaign after launching?",
                  answer: "Absolutely! You can pause, modify goals, adjust targeting, or change campaign types anytime. Our system adapts immediately to new parameters while maintaining conversation quality and tracking performance changes."
                }
              ]
            }} />
          )}

          {/* Step 2: Agent Selection */}
          {currentStep === 2 && (
            <Card className="transform -rotate-1">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    SELECT YOUR AGENT
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Choose which AI agent will handle your campaign calls
                </p>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                  {mockAgents.map((agent) => (
                    <div key={agent.id} className="relative">
                      {selectedAgent === agent.id && (
                        <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                          <div className="relative">
                            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                              <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                            </div>
                            <div className="absolute inset-0 flex items-center justify-center">
                              <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                SELECTED
                              </span>
                            </div>
                          </div>
                        </div>
                      )}
                      <Card 
                        className={`cursor-pointer border-4 border-black hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all ${
                          selectedAgent === agent.id ? 'bg-orange-100 shadow-[8px_8px_0_rgba(0,0,0,1)]' : 'bg-white'
                        }`}
                        onClick={() => setSelectedAgent(agent.id)}
                      >
                        <CardContent className="p-6">
                        <div className="flex items-start gap-4">
                          <Button size="icon" variant="header" className="w-16 h-16 bg-orange-500 hover:bg-orange-600 flex-shrink-0">
                            <UilRobot className="h-8 w-8 text-white" />
                          </Button>
                          <div className="flex-1">
                            <h3 className="text-xl font-black uppercase mb-2">{agent.name}</h3>
                            <div className="flex flex-wrap gap-2">
                              <Badge className="bg-orange-200 text-black border-2 border-black">
                                {agent.language}
                              </Badge>
                              <Badge className="bg-yellow-200 text-black border-2 border-black">
                                {agent.pitch}
                              </Badge>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                    </div>
                  ))}
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">AGENT SELECTION</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Choose an agent that matches your campaign type. Sales agents are persistent, 
                          support agents are empathetic, and booking agents focus on scheduling.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(1)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(3)}
                    disabled={!selectedAgent}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 2 */}
          {currentStep === 2 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilRobot className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        AI-POWERED AGENT EXCELLENCE
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our AI agents achieve <span className="font-black text-orange-600">85% conversation success rates</span> by adapting their approach in real-time. 
                        Each agent specializes in different conversation styles, from assertive sales pitches to empathetic support interactions.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Natural conversation flow</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Objection handling</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Sentiment analysis</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Multi-language support</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 2 */}
          {currentStep === 2 && (
            <InfoSection customContent={{
              icon: <UilRobot className="h-6 w-6 text-white" />,
              title: "Choose Your Perfect AI Representative",
              description: "Select the AI agent that best matches your campaign goals. Each agent is trained with specialized conversation skills, industry knowledge, and personality traits optimized for different business scenarios and customer interactions.",
              benefits: [
                "85% conversation success rates across all agent types",
                "Real-time conversation adaptation and objection handling",
                "Specialized training for sales, support, and appointments",
                "Natural personality matching for authentic interactions"
              ],
              faqs: [
                {
                  icon: <UilRobot className="h-5 w-5" />,
                  question: "What makes each agent different?",
                  answer: "Sales Champion excels at discovery calls and lead qualification with assertive techniques. Support Hero handles customer service with empathy and problem-solving skills. Booking Pro specializes in appointment scheduling with persistence and calendar management."
                },
                {
                  icon: <UilUsersAlt className="h-5 w-5" />,
                  question: "How do agents handle different personality types?",
                  answer: "Our AI agents use real-time sentiment analysis to adapt their approach. They can shift from formal to casual, adjust pace and enthusiasm, and modify their questioning style based on prospect responses and engagement levels."
                },
                {
                  icon: <UilInfoCircle className="h-5 w-5" />,
                  question: "Can agents speak multiple languages fluently?",
                  answer: "Yes! Each agent supports multiple languages with native-level pronunciation and cultural awareness. They understand regional business customs, appropriate formality levels, and industry-specific terminology for natural conversations."
                }
              ]
            }} />
          )}

          {/* Step 3: Voice Selection */}
          {currentStep === 3 && (
            <Card className="transform -rotate-1">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    SELECT YOUR VOICE
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Choose the perfect voice for your AI agent
                </p>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                  {voices.filter(voice => !voice.premium).map((voice) => (
                    <div key={voice.id} className="relative">
                      {selectedVoice === voice.id && (
                        <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                          <div className="relative">
                            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                              <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                            </div>
                            <div className="absolute inset-0 flex items-center justify-center">
                              <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                SELECTED
                              </span>
                            </div>
                          </div>
                        </div>
                      )}
                      <Card 
                        className={`cursor-pointer border-4 border-black hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all ${
                          selectedVoice === voice.id ? 'bg-orange-100 shadow-[8px_8px_0_rgba(0,0,0,1)]' : 'bg-white'
                        }`}
                        onClick={() => setSelectedVoice(voice.id)}
                      >
                        <CardContent className="p-6">
                          <div className="flex items-start gap-4">
                            <Button size="icon" variant="header" className="w-16 h-16 bg-orange-500 hover:bg-orange-600 flex-shrink-0">
                              <UilPhone className="h-8 w-8 text-white" />
                            </Button>
                            <div className="flex-1">
                              <h3 className="text-xl font-black uppercase mb-2">{voice.name}</h3>
                              <p className="text-gray-700 mb-3">{voice.description}</p>
                              <Button
                                size="sm"
                                variant="outline"
                                className="border-2 border-black hover:bg-orange-100"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handlePlayVoice(voice.id, voice.previewText);
                                }}
                              >
                                {isPlaying === voice.id ? (
                                  <>
                                    <UilPause className="h-4 w-4 mr-1" />
                                    PLAYING
                                  </>
                                ) : (
                                  <>
                                    <UilPlay className="h-4 w-4 mr-1" />
                                    PREVIEW
                                  </>
                                )}
                              </Button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  ))}
                  
                  <div className="md:col-span-2">
                    <PremiumFeatureCard 
                      title="CREATE YOUR OWN VOICE"
                      description="Clone your own voice for personalized calls. Use advanced AI to create a perfect replica of your voice for authentic conversations with prospects."
                      price="$99/month"
                    />
                  </div>
                </div>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(2)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(6)}
                    disabled={!selectedVoice}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">VOICE SELECTION</p>
                          <p className="text-sm text-gray-700 mt-1">
                            Choose a voice that matches your brand personality. Preview each option to hear how they&apos;ll sound to your prospects.
                          </p>                      </div>
                    </div>
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          )}

          {/* Step 4: Target List */}
          {currentStep === 4 && (
            <Card className="transform rotate-1">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    TARGET LIST
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Who should we call?
                </p>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                  <div className="relative">
                    {targetListType === 'upload' && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        targetListType === 'upload' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => setTargetListType('upload')}
                    >
                      <CardContent className="p-6 text-center">
                        <UilUpload className="h-8 w-8 mx-auto mb-2" />
                        <h4 className="font-black uppercase mb-1">UPLOAD CSV</h4>
                        <p className="text-sm text-gray-600">Import your contact list</p>
                      </CardContent>
                    </Card>
                  </div>
                  <div className="relative">
                    {targetListType === 'existing' && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        targetListType === 'existing' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => setTargetListType('existing')}
                    >
                      <CardContent className="p-6 text-center">
                        <UilUsersAlt className="h-8 w-8 mx-auto mb-2" />
                        <h4 className="font-black uppercase mb-1">EXISTING LEADS</h4>
                        <p className="text-sm text-gray-600">Use Hunter results</p>
                      </CardContent>
                    </Card>
                  </div>
                  <div className="relative">
                    {targetListType === 'manual' && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        targetListType === 'manual' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => setTargetListType('manual')}
                    >
                      <CardContent className="p-6 text-center">
                        <UilListUl className="h-8 w-8 mx-auto mb-2" />
                        <h4 className="font-black uppercase mb-1">MANUAL ENTRY</h4>
                        <p className="text-sm text-gray-600">Add numbers directly</p>
                      </CardContent>
                    </Card>
                  </div>
                </div>

                {targetListType === 'upload' && (
                  <Card className="bg-orange-50 border-4 border-black">
                    <CardContent className="p-8">
                      <div className="border-4 border-dashed border-black rounded-lg p-8 text-center bg-white">
                        <input
                          type="file"
                          accept=".csv"
                          onChange={handleFileUpload}
                          className="hidden"
                          id="csv-upload"
                        />
                        <label htmlFor="csv-upload" className="cursor-pointer">
                          <Button size="icon" variant="header" className="w-16 h-16 mb-4 bg-orange-500 hover:bg-orange-600">
                            <UilUpload className="h-8 w-8 text-white" />
                          </Button>
                          <p className="text-lg font-bold">Click to upload CSV file</p>
                          <p className="text-sm text-gray-600 mt-2">Format: Name, Phone Number, Company (optional)</p>
                        </label>
                      </div>
                      {uploadedFile && (
                        <div className="mt-4 p-4 bg-green-50 border-2 border-black rounded">
                          <p className="font-bold">✓ {uploadedFile.name} uploaded</p>
                          <p className="text-sm text-gray-600">Estimated contacts: {estimatedContacts}</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}

                {targetListType === 'existing' && (
                  <Card className="bg-orange-50 border-4 border-black">
                    <CardContent className="p-8 text-center">
                      <UilUsersAlt className="h-16 w-16 mx-auto mb-4 text-orange-600" />
                      <h3 className="text-xl font-black uppercase mb-2">250 LEADS AVAILABLE</h3>
                      <p className="text-gray-700 mb-4">From your recent Hunter search</p>
                      <Button className="bg-orange-500 hover:bg-orange-600 text-white">
                        USE ALL LEADS
                      </Button>
                    </CardContent>
                  </Card>
                )}

                {targetListType === 'manual' && (
                  <Card className="bg-orange-50 border-4 border-black">
                    <CardContent className="p-8">
                      <label className="text-lg font-black uppercase mb-3 block">
                        PHONE NUMBERS (ONE PER LINE)
                      </label>
                      <Textarea
                        value={manualNumbers}
                        onChange={(e) => setManualNumbers(e.target.value)}
                        placeholder="+1 555-0123&#10;+1 555-0124&#10;+1 555-0125"
                        className="min-h-[200px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none font-mono"
                      />
                      <p className="text-sm text-gray-600 mt-2">
                        Enter phone numbers with country code
                      </p>
                    </CardContent>
                  </Card>
                )}

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(3)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(6)}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">TARGET LIST TIPS</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Upload a CSV for bulk imports, use existing leads from Hunter searches, 
                          or manually enter numbers for smaller campaigns. We&apos;ll validate all numbers before calling.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 3 */}
          {currentStep === 4 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilUsersAlt className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        INTELLIGENT LEAD MANAGEMENT
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our system validates and enriches every contact before calling. <span className="font-black text-orange-600">Invalid numbers are automatically filtered</span>, 
                        while valid contacts are enhanced with timezone detection and optimal call time predictions.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Phone number validation</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Timezone detection</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">DNC list checking</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Duplicate removal</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 3 */}
          {currentStep === 4 && (
            <InfoSection customContent={{
              icon: <UilUsersAlt className="h-6 w-6 text-white" />,
              title: "Smart Target Audience Management",
              description: "Upload, import, or select your ideal prospects with intelligent data validation and enrichment. Our system automatically optimizes contact lists for maximum reachability while ensuring compliance with calling regulations.",
              benefits: [
                "Automatic phone number validation and formatting",
                "Real-time timezone detection for optimal call timing",
                "DNC list checking and compliance management",
                "Duplicate detection and contact data enrichment"
              ],
              faqs: [
                {
                  icon: <UilUpload className="h-5 w-5" />,
                  question: "What format should my CSV file be in?",
                  answer: "Upload CSV files with columns for Name, Phone Number, and optionally Company. Our system accepts various formats and automatically standardizes the data for optimal calling. Include country codes for international numbers."
                },
                {
                  icon: <UilUsersAlt className="h-5 w-5" />,
                  question: "How does the system validate phone numbers?",
                  answer: "We verify number format, check for valid area codes, detect mobile vs landline, and cross-reference against Do Not Call lists. Invalid numbers are automatically flagged and excluded from your campaign to maintain compliance."
                },
                {
                  icon: <UilClipboardNotes className="h-5 w-5" />,
                  question: "Can I use leads from Hunter or other sources?",
                  answer: "Absolutely! Import existing leads from Hunter searches, CRM exports, or any lead generation tool. Our system will validate and enhance the data with additional information like timezone and optimal calling times."
                }
              ]
            }} />
          )}

          {/* Step 4: Call Settings */}
          {currentStep === 5 && (
            <Card className="transform -rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    CALL SETTINGS
                  </h1>
                </div>
                <div className="space-y-6">
                  {/* Schedule Settings */}
                  <Card className="bg-orange-50 border-2 border-black">
                    <CardContent className="p-6">
                      <h3 className="text-lg font-black uppercase mb-4 flex items-center gap-2">
                        <UilClock className="h-5 w-5" />
                        SCHEDULE
                      </h3>
                      <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                          <label className="text-sm font-bold uppercase">Start Time</label>
                          <Input
                            type="time"
                            value={callSettings.startTime}
                            onChange={(e) => setCallSettings({...callSettings, startTime: e.target.value})}
                            className="h-12 font-semibold border-2 border-black"
                          />
                        </div>
                        <div>
                          <label className="text-sm font-bold uppercase">End Time</label>
                          <Input
                            type="time"
                            value={callSettings.endTime}
                            onChange={(e) => setCallSettings({...callSettings, endTime: e.target.value})}
                            className="h-12 font-semibold border-2 border-black"
                          />
                        </div>
                      </div>
                      <div>
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <label className="text-sm font-bold uppercase cursor-help">
                                Timezone
                                <UilInfoCircle className="inline-block h-3 w-3 ml-1 text-gray-600" />
                              </label>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>All call times will be scheduled according to this timezone. Calls automatically adjust for each contact&apos;s local time.</p>
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                        <Select
                          value={callSettings.timezone}
                          onValueChange={(value) => setCallSettings({...callSettings, timezone: value})}
                        >
                          <SelectTrigger className="w-full h-12 px-4 text-lg font-semibold border-4 border-black bg-white hover:bg-gray-50">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] bg-white">
                            {timezones.map(tz => (
                              <SelectItem key={tz} value={tz}>{tz}</SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Capacity Settings */}
                  <div>
                    <div className="flex items-center gap-2 mb-3">
                      <label className="text-lg font-black uppercase block">
                        MAX CALLS PER DAY: {callSettings.maxCallsPerDay}
                      </label>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button className="p-0 bg-transparent border-none outline-none">
                            <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent side="top">
                          <p>Maximum number of calls your agents will make in a 24-hour period. Helps manage campaign pacing.</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <Slider 
                      value={[callSettings.maxCallsPerDay]}
                      onValueChange={(value) => setCallSettings({...callSettings, maxCallsPerDay: value[0]})}
                      min={1}
                      max={Math.max(20, Math.min(200, estimatedContacts * 5))}
                      step={1}
                      className="mb-2"
                    />
                    <div className="text-sm text-gray-600 space-y-1">
                      {estimatedContacts > 0 && (
                        <>
                          <div>• {estimatedContacts} contacts</div>
                          <div>• {callSettings.maxCallsPerDay} calls/day</div>
                          <div>• 
                            {callSettings.maxCallsPerDay < estimatedContacts ? 'Conservative pace' :
                             callSettings.maxCallsPerDay <= estimatedContacts * 2 ? 'Balanced pace' :
                             'Aggressive pace'}
                          </div>
                        </>
                      )}
                    </div>
                  </div>

                  {/* Retry Settings */}
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <div className="flex items-center gap-2 mb-2">
                        <label className="text-sm font-black uppercase block">
                          RETRY ATTEMPTS: {callSettings.retryAttempts}
                        </label>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button className="p-0 bg-transparent border-none outline-none">
                              <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent side="top">
                            <p>Number of times to retry unanswered calls. Set to 0 to disable retries.</p>
                          </TooltipContent>
                        </Tooltip>
                      </div>
                      <Slider 
                        value={[callSettings.retryAttempts]}
                        onValueChange={(value) => setCallSettings({...callSettings, retryAttempts: value[0]})}
                        min={0}
                        max={5}
                        step={1}
                      />
                      <p className="text-xs text-gray-600 mt-1">
                        {callSettings.retryAttempts === 0 ? 'No retries - single attempt only' :
                         callSettings.retryAttempts === 1 ? 'One retry attempt' :
                         `${callSettings.retryAttempts} retry attempts`}
                      </p>
                    </div>
                    <div>
                      <div className="flex items-center gap-2 mb-2">
                        <label className="text-sm font-black uppercase block">
                          DAYS BETWEEN: {callSettings.daysBetweenRetries}
                        </label>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button className="p-0 bg-transparent border-none outline-none">
                              <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent side="top">
                            <p>Wait time between retry attempts to avoid being too persistent.</p>
                          </TooltipContent>
                        </Tooltip>
                      </div>
                      <Slider 
                        value={[callSettings.daysBetweenRetries]}
                        onValueChange={(value) => setCallSettings({...callSettings, daysBetweenRetries: value[0]})}
                        min={1}
                        max={7}
                        step={1}
                        disabled={callSettings.retryAttempts === 0}
                      />
                      {callSettings.retryAttempts === 0 ? (
                        <p className="text-xs text-gray-500 mt-1">Enable retry attempts to configure retry delay</p>
                      ) : (
                        <p className="text-xs text-gray-600 mt-1">
                          {callSettings.daysBetweenRetries === 1 ? 'Next day retry' :
                           callSettings.daysBetweenRetries === 7 ? 'Weekly retry cycle' :
                           `Wait ${callSettings.daysBetweenRetries} days between attempts`}
                        </p>
                      )}
                    </div>
                  </div>

                  {/* Features */}
                  <div className="grid grid-cols-2 gap-4">
                    <Card className="bg-orange-50 border-2 border-black">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <UilVoicemail className="h-5 w-5" />
                            <span className="font-black uppercase">Voicemail</span>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <button className="p-0 bg-transparent border-none outline-none">
                                  <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                </button>
                              </TooltipTrigger>
                              <TooltipContent side="top">
                                <p>AI agent will leave a voicemail if the call goes to voicemail. Increases message delivery rate.</p>
                              </TooltipContent>
                            </Tooltip>
                          </div>
                          <Switch 
                            checked={callSettings.leaveVoicemail}
                            onCheckedChange={(checked) => setCallSettings({...callSettings, leaveVoicemail: checked})}
                          />
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-orange-50 border-2 border-black">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <UilPhone className="h-5 w-5" />
                            <span className="font-black uppercase">Recording</span>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <button className="p-0 bg-transparent border-none outline-none">
                                  <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                </button>
                              </TooltipTrigger>
                              <TooltipContent side="top">
                                <p>Record all calls for quality assurance and training. Stored securely with compliance standards.</p>
                              </TooltipContent>
                            </Tooltip>
                          </div>
                          <Switch 
                            checked={callSettings.callRecording}
                            onCheckedChange={(checked) => setCallSettings({...callSettings, callRecording: checked})}
                          />
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  <PremiumFeatureCard 
                    title="SMART SCHEDULING"
                    description="AI optimizes call times based on answer rates. Automatically adjusts schedule for each timezone."
                    price="$49/month"
                  />
                </div>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(3)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(6)}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">CALL SETTINGS</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Configure when your agents should call. We respect timezone settings and 
                          automatically skip weekends and holidays. Enable recording for quality assurance.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 4 */}
          {currentStep === 5 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilClock className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        SMART SCHEDULING TECHNOLOGY
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our AI analyzes <span className="font-black text-orange-600">millions of call patterns</span> to determine optimal contact times. 
                        Automatic timezone adjustments and holiday detection ensure your calls always happen at the right moment, maximizing connection rates while respecting boundaries.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Answer rate optimization</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Automatic timezone handling</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Holiday detection</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Business hours compliance</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 4 */}
          {currentStep === 5 && (
            <InfoSection customContent={{
              icon: <UilClock className="h-6 w-6 text-white" />,
              title: "Optimize Call Timing & Performance",
              description: "Configure intelligent call scheduling and performance settings that maximize connection rates while respecting boundaries. Our AI-powered timing optimization ensures calls happen when prospects are most likely to answer and engage.",
              benefits: [
                "AI-optimized call timing for 40% higher answer rates",
                "Automatic timezone handling across global contacts",
                "Smart retry logic that respects prospect preferences",
                "Compliance with business hours and holiday detection"
              ],
              faqs: [
                {
                  icon: <UilClock className="h-5 w-5" />,
                  question: "How does AI optimize call timing?",
                  answer: "Our system analyzes millions of successful calls to identify patterns. It considers factors like industry, time zone, historical answer rates, and even weather patterns to determine the optimal time to reach each specific contact."
                },
                {
                  icon: <UilVoicemail className="h-5 w-5" />,
                  question: "Should I enable voicemail messages?",
                  answer: "Yes! Voicemail messages increase callback rates by 23%. Our AI agents leave personalized, professional messages that reference your campaign goals and provide clear next steps for interested prospects to engage."
                },
                {
                  icon: <UilPhone className="h-5 w-5" />,
                  question: "How many retry attempts work best?",
                  answer: "We recommend 2-3 retry attempts with 2-3 days between calls. This balances persistence with respect for prospects' time. Our smart retry system adjusts timing based on previous call outcomes and prospect engagement signals."
                }
              ]
            }} />
          )}

          {/* Step 5: Preview & Launch */}
          {currentStep === 6 && (
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    PREVIEW & LAUNCH
                  </h1>
                </div>
                <div className="space-y-6">
                  {/* Campaign Summary */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Card className="bg-white border-2 border-black transform -rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Campaign</h4>
                        <p className="text-lg font-bold">{campaignName}</p>
                        <Badge className="bg-orange-200 text-black border-2 border-black mt-2">
                          {campaignType.toUpperCase()}
                        </Badge>
                      </CardContent>
                    </Card>
                    <Card className="bg-white border-2 border-black transform rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Agent</h4>
                        <p className="text-lg font-bold">
                          {mockAgents.find(a => a.id === selectedAgent)?.name || 'Selected Agent'}
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-white border-2 border-black transform -rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Contacts</h4>
                        <p className="text-2xl font-black text-orange-600">
                          {estimatedContacts || 250}
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-white border-2 border-black transform rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Schedule</h4>
                        <p className="text-sm font-bold">
                          {callSettings.startTime} - {callSettings.endTime}
                        </p>
                        <p className="text-xs text-gray-600">{callSettings.timezone}</p>
                      </CardContent>
                    </Card>
                  </div>

                  {/* Goals Recap */}
                  <Card className="bg-orange-50 border-2 border-black">
                    <CardContent className="p-4">
                      <h4 className="font-black uppercase mb-2">Goals</h4>
                      <p className="text-gray-700">{campaignGoals}</p>
                    </CardContent>
                  </Card>

                  {/* Launch Button */}
                  <div className="text-center">
                  <Button
                    className="px-12 py-4 h-16 text-xl font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={handleLaunchCampaign}
                  >
                    <UilPlay className="mr-2 h-6 w-6" />
                    LAUNCH CAMPAIGN
                  </Button>                    <p className="text-sm text-gray-600 mt-4">
                      You can pause or modify the campaign anytime from the dashboard
                    </p>
                  </div>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">LAUNCH READINESS</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Review all settings before launching. Your campaign will start immediately and 
                          begin calling contacts based on your schedule. You can pause or modify settings anytime.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Button
                  className="w-full mt-8 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                  onClick={() => setCurrentStep(6)}
                >
                  <UilArrowLeft className="mr-2 h-6 w-6" />
                  BACK TO SETTINGS
                </Button>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 5 */}
          {currentStep === 6 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilPlay className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        LAUNCH WITH CONFIDENCE
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Your campaign is ready to achieve <span className="font-black text-orange-600">exceptional results</span>. 
                        Our platform handles thousands of concurrent calls while maintaining conversation quality. Real-time monitoring and adjustment capabilities ensure optimal performance from day one.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Real-time performance tracking</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Instant campaign adjustments</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Comprehensive call analytics</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">24/7 monitoring</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 5 */}
          {currentStep === 6 && (
            <InfoSection customContent={{
              icon: <UilPlay className="h-6 w-6 text-white" />,
              title: "Ready to Launch Your Campaign",
              description: "Your AI-powered calling campaign is fully configured and ready to deliver outstanding results. With intelligent agents, optimized targeting, and smart scheduling, you're set to achieve exceptional conversion rates and meaningful business growth.",
              benefits: [
                "Instant deployment with professional-quality setup",
                "Real-time campaign monitoring and live adjustments",
                "Comprehensive analytics and performance insights",
                "24/7 system monitoring with automatic optimization"
              ],
              faqs: [
                {
                  icon: <UilPlay className="h-5 w-5" />,
                  question: "What happens immediately after I launch?",
                  answer: "Your AI agents begin calling according to your schedule within minutes. You'll see real-time updates in the dashboard showing call progress, connection rates, and conversation outcomes. The system automatically adapts for optimal performance."
                },
                {
                  icon: <UilAnalytics className="h-5 w-5" />,
                  question: "How can I track campaign performance?",
                  answer: "Access comprehensive dashboards with live call monitoring, conversion metrics, call recordings, transcripts, and detailed analytics. Get insights on best-performing scripts, optimal call times, and prospect engagement patterns."
                },
                {
                  icon: <UilClock className="h-5 w-5" />,
                  question: "Can I pause or modify the campaign after launching?",
                  answer: "Yes! You have full control to pause, adjust targeting, modify scripts, change scheduling, or stop the campaign at any time. All changes take effect immediately without losing your progress or data."
                }
              ]
            }} />
          )}

          {/* Step 6: Launch Progress */}
          {currentStep === 6 && (
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    {isLaunching ? 'LAUNCHING CAMPAIGN' : 'CAMPAIGN LAUNCHED'}
                  </h1>
                </div>
                <div className="space-y-6">
                  {isLaunching ? (
                    <>
                      <Progress value={launchProgress} className="h-4" />
                      <p className="text-center text-lg">
                        Setting up your campaign...
                      </p>
                    </>
                  ) : (
                    <>
                      {/* Campaign Stats */}
                      <div className="grid grid-cols-2 gap-4">
                        <Card className="bg-white border-2 border-black">
                          <CardContent className="p-4 text-center">
                            <UilPhone className="h-8 w-8 mx-auto mb-2 text-orange-600" />
                            <p className="text-sm font-bold uppercase text-gray-600">Total Contacts</p>
                            <p className="text-2xl font-black">{campaignStats?.totalContacts}</p>
                          </CardContent>
                        </Card>
                        <Card className="bg-white border-2 border-black">
                          <CardContent className="p-4 text-center">
                            <UilCalendarAlt className="h-8 w-8 mx-auto mb-2 text-blue-600" />
                            <p className="text-sm font-bold uppercase text-gray-600">Est. Duration</p>
                            <p className="text-2xl font-black">{campaignStats?.estimatedDuration}</p>
                          </CardContent>
                        </Card>
                      </div>

                      <Card className="bg-orange-50 border-2 border-black">
                        <CardContent className="p-4">
                          <h4 className="font-black uppercase mb-2">Campaign Details</h4>
                          <p className="text-gray-700">
                            <strong>Name:</strong> {campaignName}<br/>
                            <strong>Type:</strong> {campaignType}<br/>
                            <strong>Agent:</strong> {mockAgents.find(a => a.id === selectedAgent)?.name}<br/>
                            <strong>Status:</strong> <span className="text-green-600 font-bold">Active</span>
                          </p>
                        </CardContent>
                      </Card>

                      <p className="text-xl text-center text-gray-700">
                        Your campaign is now live! Calls will begin according to your schedule.
                      </p>

                      <div className="flex flex-col sm:flex-row gap-4">
                        <Button
                          className="flex-1 h-14 text-lg font-black uppercase bg-orange-600 hover:bg-orange-700 text-white"
                          onClick={() => window.location.href = '/dashboard/calls'}
                        >
                          VIEW CAMPAIGN
                          <UilAnalytics className="ml-2 h-6 w-6" />
                        </Button>
                        <Button
                          className="flex-1 h-14 text-lg font-black uppercase bg-[rgb(0,82,255)] hover:bg-blue-600 text-white"
                          onClick={() => window.location.href = '/dashboard'}
                        >
                          GO TO DASHBOARD
                          <UilArrowRight className="ml-2 h-6 w-6" />
                        </Button>
                      </div>
                    </>
                  )}
                </div>

                {/* Info Box */}
                {!isLaunching && (
                  <Card className="bg-yellow-100 border-2 border-black mt-6">
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <Button 
                          size="sm" 
                          variant="neutral" 
                          className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                        >
                          <UilInfoCircle className="h-4 w-4" />
                        </Button>
                        <div>
                          <p className="text-sm font-bold">CAMPAIGN ACTIVE</p>
                          <p className="text-sm text-gray-700 mt-1">
                            Your AI agents are now making calls. Track progress in real-time from the dashboard. 
                            You&apos;ll receive notifications for important events and completed conversations.
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )}
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 6 */}
          {currentStep === 6 && !isLaunching && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-green-600 hover:bg-green-700 text-white border-black"
                    >
                      <UilCheckCircle className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        CAMPAIGN LIVE & SCALING
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Your AI agents are now <span className="font-black text-orange-600">actively making calls</span> and engaging with prospects. 
                        Our system automatically scales to handle response volumes while maintaining quality. Every conversation improves future performance through machine learning.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Live call monitoring</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Automatic scaling</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Real-time optimization</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Performance learning</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 6 */}
          {currentStep === 6 && !isLaunching && (
            <InfoSection customContent={{
              icon: <UilCheckCircle className="h-6 w-6 text-white" />,
              title: "Your Campaign is Now Live",
              description: "Congratulations! Your AI-powered calling campaign is now active and delivering results. Monitor real-time performance, track conversion rates, and watch as your AI agents engage prospects with professional, personalized conversations that drive business growth.",
              benefits: [
                "Live call monitoring with real-time conversation insights",
                "Automatic performance optimization through machine learning",
                "Instant notification of qualified leads and appointments",
                "Continuous improvement with every successful interaction"
              ],
              faqs: [
                {
                  icon: <UilAnalytics className="h-5 w-5" />,
                  question: "Where can I view live campaign performance?",
                  answer: "Access your comprehensive dashboard to see real-time call metrics, live call monitoring, conversation transcripts, lead qualification status, and detailed performance analytics. Get instant notifications for important events and successful conversions."
                },
                {
                  icon: <UilCheckCircle className="h-5 w-5" />,
                  question: "How will I know when prospects are interested?",
                  answer: "The system sends instant notifications for qualified leads, scheduled appointments, and positive responses. You'll receive detailed summaries with prospect information, conversation highlights, and recommended next steps for follow-up."
                },
                {
                  icon: <UilClock className="h-5 w-5" />,
                  question: "What should I expect in the first few hours?",
                  answer: "Initial calls begin immediately based on your schedule. You'll see connection rates, conversation quality metrics, and early performance indicators within the first hour. The AI learns quickly and optimizes approach for better results throughout the day."
                }
              ]
            }} />
          )}
        </div>
      </div>



      {/* Verification Modal */}
      {showVerification && (
        <VerificationModal
          isOpen={showVerification}
          onClose={() => setShowVerification(false)}
          onComplete={handleVerificationComplete}
          devMode={devMode}
        />
      )}
      
      <div className="mt-8">
        <OnboardingFooter />
      </div>
    </div>
    </TooltipProvider>
  );
}


================================================
FILE: calls/page.tsx.broken
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import OnboardingNav from '@/components/custom/onboarding-nav';
import PremiumFeatureCard from '@/components/custom/premium-feature-card';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import InfoSection from '@/components/custom/info-section';
import { useAction } from "convex/react";
import { api } from "@convex/_generated/api";
import { useConvexErrorHandler } from '@/hooks/useConvexErrorHandler';
import { StarBadge, Star15 } from '@/components/ui/star';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { 
  UilPhone,
  UilPhoneVolume,
  UilOutgoingCall,
  UilMissedCall,
  UilCalendarAlt,
  UilClock,
  UilUpload,
  UilUsersAlt,
  UilRobot,
  UilArrowRight,
  UilArrowLeft,
  UilCheckCircle,
  UilPlay,
  UilPause,
  UilInfoCircle,
  UilChartGrowth,
  UilBell,
  UilVoicemail,
  UilClipboardNotes,
  UilListUl,
  UilAnalytics,
  UilTachometerFast,
  UilBriefcase,
  UilQuestionCircle
} from '@tooni/iconscout-unicons-react';

interface Agent {
  id: string;
  name: string;
  language: string;
  pitch: string;
}

interface CallSettings {
  startTime: string;
  endTime: string;
  timezone: string;
  maxCallsPerDay: number;
  retryAttempts: number;
  daysBetweenRetries: number;
  leaveVoicemail: boolean;
  callRecording: boolean;
}

const mockAgents: Agent[] = [
  { id: 'agent-1', name: 'Sales Champion', language: 'English', pitch: 'Discovery Calls' },
  { id: 'agent-2', name: 'Support Hero', language: 'English', pitch: 'Customer Support' },
  { id: 'agent-3', name: 'Booking Pro', language: 'English', pitch: 'Appointment Setter' },
];

interface Voice {
  id: string;
  name: string;
  description: string;
  previewText: string;
  premium?: boolean;
}

const voices: Voice[] = [
  {
    id: 'voice-1',
    name: 'Professional Sarah',
    description: 'Clear, confident business voice',
    previewText: "Hello, this is Sarah calling about your business growth opportunities..."
  },
  {
    id: 'voice-2',
    name: 'Friendly Alex',
    description: 'Warm, approachable conversational tone',
    previewText: "Hi there! I hope you&apos;re having a great day. I&apos;m reaching out to discuss..."
  },
  {
    id: 'voice-3',
    name: 'Executive Maya',
    description: 'Sophisticated, authoritative presence',
    previewText: "Good afternoon. This is Maya with an important business opportunity..."
  },
  {
    id: 'voice-4',
    name: 'Energetic Jake',
    description: 'Enthusiastic, high-energy approach',
    previewText: "Hey! Jake here with some exciting news about your business potential..."
  },
  {
    id: 'custom',
    name: 'Create Your Own',
    description: 'Clone your own voice for personalized calls',
    previewText: "Use your own voice for authentic conversations",
    premium: true
  }
];

const timezones = [
  'America/New_York',
  'America/Chicago',
  'America/Denver',
  'America/Los_Angeles',
  'Europe/London',
  'Europe/Paris',
  'Asia/Tokyo',
  'Australia/Sydney'
];

export default function CallsOnboarding() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [campaignName, setCampaignName] = React.useState('');
  const [campaignGoals, setCampaignGoals] = React.useState('');
  const [campaignType, setCampaignType] = React.useState('');
  const [selectedAgent, setSelectedAgent] = React.useState('');
  const [targetListType, setTargetListType] = React.useState('');
  const [uploadedFile, setUploadedFile] = React.useState<File | null>(null);
  const [manualNumbers, setManualNumbers] = React.useState('');
  const [callSettings, setCallSettings] = React.useState<CallSettings>({
    startTime: '09:00',
    endTime: '17:00',
    timezone: 'America/New_York',
    maxCallsPerDay: 100,
    retryAttempts: 3,
    daysBetweenRetries: 2,
    leaveVoicemail: true,
    callRecording: true
  });

  const [selectedVoice, setSelectedVoice] = React.useState('');
  const [isPlaying, setIsPlaying] = React.useState<string | null>(null);
  const [isLaunching, setIsLaunching] = React.useState(false);
  const [launchProgress, setLaunchProgress] = React.useState(0);
  const [showVerification, setShowVerification] = React.useState(false);
  const [campaignStats, setCampaignStats] = React.useState<any>(null);
  const [estimatedContacts, setEstimatedContacts] = React.useState(0);

  // Auto-adjust max calls based on contact count
  React.useEffect(() => {
    if (estimatedContacts > 0) {
      const maxCalls = Math.min(Math.max(10, estimatedContacts * 2), 200);
      setCallSettings(prev => ({ ...prev, maxCallsPerDay: maxCalls }));
    }
  }, [estimatedContacts]);
  const [devMode, setDevMode] = React.useState(false);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setUploadedFile(e.target.files[0]);
      // Simulate contact count
      setEstimatedContacts(Math.floor(Math.random() * 500) + 100);
    }
  };

  const canProceedFromStep1 = () => {
    return campaignName.trim() !== '' && campaignGoals.trim() !== '' && campaignType !== '';
  };

  const canProceedFromStep4 = () => {
    if (targetListType === 'upload' && uploadedFile) return true;
    if (targetListType === 'manual' && manualNumbers.trim()) return true;
    if (targetListType === 'existing') return true;
    return false;
  };

  const handleLaunchCampaign = async () => {
    setIsLaunching(true);
    setCurrentStep(6);
    
    // Show verification modal immediately
    setShowVerification(true);
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerification(false);
    
    // Calculate realistic duration based on settings
    const contactsCount = estimatedContacts || 250;
    const dailyCalls = callSettings.maxCallsPerDay;
    const daysNeeded = Math.ceil(contactsCount / dailyCalls);
    const estimatedDuration = daysNeeded === 1 ? '1 day' : 
                             daysNeeded <= 3 ? `${daysNeeded} days` :
                             daysNeeded <= 7 ? '1 week' : 
                             `${Math.ceil(daysNeeded / 7)} weeks`;
    
    // Set campaign stats
    setCampaignStats({
      totalContacts: contactsCount,
      callsScheduled: contactsCount,
      estimatedDuration: estimatedDuration,
      startTime: new Date().toLocaleString(),
      status: 'Active'
    });

    // Collect all data for final display
    const finalData = {
      campaignName,
      campaignGoals,
      campaignType,
      selectedAgent,
      selectedVoice,
      targetListType,
      manualNumbers: targetListType === 'manual' ? manualNumbers : null,
      csvFile: targetListType === 'csv' ? csvFile?.name : null,
      estimatedContacts,
      callSettings,
      email,
      phone,
      campaignStats: {
        totalContacts: contactsCount,
        callsScheduled: contactsCount,
        estimatedDuration,
        startTime: new Date().toLocaleString(),
        status: 'Active'
      }
    };

    console.log('=== FINAL CAMPAIGN DATA ===');
    console.log(JSON.stringify(finalData, null, 2));
    console.log('==========================');
    
    setIsLaunching(false);
    setCurrentStep(7);
  };

  const handleStepChange = (step: number) => {
    if (step < currentStep || step === 1) {
      setCurrentStep(step);
    }
  };

  // Dev mode auto-fill effect
  React.useEffect(() => {
    if (devMode) {
      setCampaignName('Q4 Sales Outreach Campaign');
      setCampaignGoals('Generate 50 qualified leads for our SaaS platform through targeted outreach to mid-market companies');
      setCampaignType('sales');
      setSelectedAgent('agent-1');
      setSelectedVoice('voice-1');
      setTargetListType('manual');
      setManualNumbers('+1 555-0123\n+1 555-0124\n+1 555-0125\n+1 555-0126\n+1 555-0127');
      setEstimatedContacts(6);
      setCallSettings({
        startTime: '09:00',
        endTime: '17:00',
        timezone: 'America/New_York',
        maxCallsPerDay: 12, // Auto-adjusted: 6 contacts × 2 = 12 max calls
        retryAttempts: 3,
        daysBetweenRetries: 2,
        leaveVoicemail: true,
        callRecording: true
      });
      
      console.log('=== DEV MODE AUTO-FILL ACTIVATED ===');
      console.log('Campaign Name:', 'Q4 Sales Outreach Campaign');
      console.log('Campaign Goals:', 'Generate 50 qualified leads...');
      console.log('Campaign Type:', 'sales');
      console.log('Selected Agent:', 'agent-1');
      console.log('Selected Voice:', 'voice-1');
      console.log('Target List Type:', 'manual');
      console.log('Estimated Contacts:', 6);
      console.log('Call Settings:', {
        startTime: '09:00',
        endTime: '17:00',
        timezone: 'America/New_York',
        maxCallsPerDay: 12,
        retryAttempts: 3,
        daysBetweenRetries: 2,
        leaveVoicemail: true,
        callRecording: true
      });
    }
  }, [devMode]);

  const handlePlayVoice = (voiceId: string, previewText: string) => {
    setIsPlaying(voiceId);
    // Simulate audio playback
    setTimeout(() => {
      setIsPlaying(null);
    }, 2000);
  };

  return (
    <TooltipProvider>
      <div 
        className="min-h-screen bg-orange-500 relative pb-8" 
        style={{ 
          fontFamily: 'Noyh-Bold, sans-serif',
          backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
          backgroundSize: '60px 60px'
        }}
      >
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-4 right-4 z-50">
          <Button
            onClick={() => setDevMode(!devMode)}
            className={`h-10 px-4 text-sm font-black uppercase ${
              devMode
                ? 'bg-green-500 hover:bg-green-600 text-white'
                : 'bg-gray-200 hover:bg-gray-300 text-black'
            } border-2 border-black`}
          >
            DEV MODE {devMode ? 'ON' : 'OFF'}
          </Button>
        </div>
      )}
      <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          {/* Persistent Title Card */}
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-orange-600 border-2 border-black flex items-center justify-center">
                <UilPhone className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-orange-500 border-2 border-black flex items-center justify-center">
                <UilPhoneVolume className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-orange-600 hover:bg-orange-700 border-4 border-black p-0">
                {currentStep === 1 && <UilBriefcase className="h-12 w-12 text-white" />}
                {currentStep === 2 && <UilRobot className="h-12 w-12 text-white" />}
                {currentStep === 3 && <UilPhone className="h-12 w-12 text-white" />}
                {currentStep === 4 && <UilUsersAlt className="h-12 w-12 text-white" />}
                {currentStep === 5 && <UilClock className="h-12 w-12 text-white" />}
                {currentStep === 6 && <UilPlay className="h-12 w-12 text-white" />}
                {currentStep === 7 && <UilCheckCircle className="h-12 w-12 text-white" />}
              </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'CAMPAIGN CREATION'}
                {currentStep === 2 && 'AGENT SELECTION'}
                {currentStep === 3 && 'VOICE SELECTION'}
                {currentStep === 4 && 'TARGET AUDIENCE'}
                {currentStep === 5 && 'CALL CONFIGURATION'}
                {currentStep === 6 && 'LAUNCH READY'}
                 {currentStep === 7 && 'CAMPAIGN LAUNCHED'}              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'BUILD YOUR OUTREACH STRATEGY'}
                {currentStep === 2 && 'CHOOSE YOUR AI REPRESENTATIVE'}
                {currentStep === 3 && 'SELECT THE PERFECT VOICE'}
                {currentStep === 4 && 'DEFINE WHO TO REACH'}
                {currentStep === 5 && 'OPTIMIZE YOUR CAMPAIGN'}
                {currentStep === 6 && 'REVIEW AND DEPLOY'}
                 {currentStep === 7 && 'YOUR CAMPAIGN IS LIVE'}              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-orange-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-orange-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-orange-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>
          {/* Step 1: Campaign Setup */}
          {currentStep === 1 && (
            <div className="space-y-8">
              {/* Campaign Details Card */}
              <Card className="transform -rotate-1">
                <CardContent className="p-8">
                  <div className="text-center mb-8">
                    <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                      CAMPAIGN SETUP
                    </h1>
                  </div>
                  
                  <div className="space-y-6">
                    <div>
                      <label className="text-xl font-black uppercase mb-3 block">
                        CAMPAIGN NAME
                      </label>
                      <Input
                        type="text"
                        value={campaignName}
                        onChange={(e) => setCampaignName(e.target.value)}
                        placeholder="e.g., Q4 Sales Blitz, Customer Feedback"
                        className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
                      />
                    </div>

                    <div>
                      <label className="text-xl font-black uppercase mb-3 block">
                        CAMPAIGN TYPE
                      </label>
                      <TooltipProvider>
                      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                        <div className="relative">
                          {campaignType === 'sales' && (
                            <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                </div>
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                    SELECTED
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Card 
                                className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                                  campaignType === 'sales' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                                }`}
                                onClick={() => setCampaignType('sales')}
                              >
                                <CardContent className="p-4 text-center">
                                  <UilTachometerFast className="h-8 w-8 mx-auto mb-2" />
                                  <h4 className="font-black uppercase">SALES</h4>
                                  <p className="text-sm text-gray-600">Outbound prospecting</p>
                                </CardContent>
                              </Card>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Focused on qualifying leads and booking meetings. Agents use persistent follow-up and objection handling techniques.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="relative">
                          {campaignType === 'followup' && (
                            <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                </div>
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                    SELECTED
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Card 
                                className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                                  campaignType === 'followup' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                                }`}
                                onClick={() => setCampaignType('followup')}
                              >
                                <CardContent className="p-4 text-center">
                                  <UilBell className="h-8 w-8 mx-auto mb-2" />
                                  <h4 className="font-black uppercase">FOLLOW-UP</h4>
                                  <p className="text-sm text-gray-600">Re-engage leads</p>
                                </CardContent>
                              </Card>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Re-engage existing leads or customers. Agents focus on relationship building and identifying new opportunities.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="relative">
                          {campaignType === 'survey' && (
                            <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                </div>
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                    SELECTED
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Card 
                                className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                                  campaignType === 'survey' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                                }`}
                                onClick={() => setCampaignType('survey')}
                              >
                                <CardContent className="p-4 text-center">
                                  <UilClipboardNotes className="h-8 w-8 mx-auto mb-2" />
                                  <h4 className="font-black uppercase">SURVEY</h4>
                                  <p className="text-sm text-gray-600">Gather feedback</p>
                                </CardContent>
                              </Card>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Collect customer feedback and insights. Agents conduct structured interviews and ensure high completion rates.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                      </div>
                      </TooltipProvider>
                    </div>

                    <div>
                      <label className="text-xl font-black uppercase mb-3 block">
                        CAMPAIGN GOALS
                      </label>
                      <Textarea
                        value={campaignGoals}
                        onChange={(e) => setCampaignGoals(e.target.value)}
                        placeholder="What do you want to achieve? e.g., Book 50 demos, collect customer feedback, qualify 100 leads..."
                        className="min-h-[120px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
                      />
                    </div>
                  </div>

                  {/* Info Box */}
                  <Card className="bg-yellow-100 border-2 border-black mt-6">
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <Button 
                          size="sm" 
                          variant="neutral" 
                          className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                        >
                          <UilInfoCircle className="h-4 w-4" />
                        </Button>
                        <div>
                          <p className="text-sm font-bold">CAMPAIGN TIPS</p>
                          <p className="text-sm text-gray-700 mt-1">
                            Give your campaign a clear name and specific goals. This helps our AI agents understand 
                            your objectives and adapt their conversations accordingly.
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Button
                    className="w-full mt-8 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(2)}
                    disabled={!canProceedFromStep1()}
                  >
                    <span className="flex items-center justify-center">
                      CONTINUE
                      <UilArrowRight className="ml-2 h-6 w-6" />
                    </span>
                  </Button>
                </CardContent>
              </Card>

              
              {/* Custom Info Cards */}
              <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilChartGrowth className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        CAMPAIGN PERFORMANCE AT SCALE
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our campaigns achieve <span className="font-black text-orange-600">3x higher connection rates</span> than traditional dialers. 
                        AI-powered scheduling ensures calls happen at optimal times, while intelligent retry logic maximizes reach without annoying prospects.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Real-time campaign analytics</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">AI-optimized call timing</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Smart retry logic</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Voicemail detection</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    >
                      <UilAnalytics className="h-6 w-6 text-black" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        CONVERSION OPTIMIZATION
                      </h3>
                      <p className="text-gray-700 text-lg leading-relaxed">
                        Track every interaction and optimize for conversions. Our AI learns from each call, improving scripts and timing to 
                        <span className="font-black text-orange-600"> boost your conversion rates by up to 40%</span>. Get detailed insights on what works 
                        and what doesn&apos;t, with actionable recommendations for improvement.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 1 */}
          {currentStep === 1 && (
            <InfoSection customContent={{
              icon: <UilBriefcase className="h-6 w-6 text-white" />,
              title: "Build Powerful Outreach Campaigns",
              description: "Create targeted campaigns that convert. Our AI-powered approach combines smart goal setting, intelligent campaign types, and strategic planning to maximize your outreach success and drive meaningful business results.",
              benefits: [
                "3x higher conversion rates than traditional dialers",
                "AI-optimized campaign strategies and timing",
                "Real-time performance tracking and analytics",
                "Intelligent lead qualification and scoring"
              ],
              faqs: [
                {
                  icon: <UilBriefcase className="h-5 w-5" />,
                  question: "What makes campaign types important?",
                  answer: "Different campaign types are optimized for specific outcomes. Sales campaigns focus on conversion and qualification, Follow-up campaigns nurture existing relationships, and Survey campaigns gather valuable feedback - each with tailored AI strategies."
                },
                {
                  icon: <UilChartGrowth className="h-5 w-5" />,
                  question: "How do clear goals improve performance?",
                  answer: "Specific goals help our AI adapt conversation strategies in real-time. Whether booking demos or qualifying leads, clear objectives enable the system to optimize scripts, timing, and follow-up sequences for maximum success."
                },
                {
                  icon: <UilTachometerFast className="h-5 w-5" />,
                  question: "Can I modify my campaign after launching?",
                  answer: "Absolutely! You can pause, modify goals, adjust targeting, or change campaign types anytime. Our system adapts immediately to new parameters while maintaining conversation quality and tracking performance changes."
                }
              ]
            }} />
          )}

          {/* Step 2: Agent Selection */}
          {currentStep === 2 && (
            <Card className="transform -rotate-1">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    SELECT YOUR AGENT
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Choose which AI agent will handle your campaign calls
                </p>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                  {mockAgents.map((agent) => (
                    <div key={agent.id} className="relative">
                      {selectedAgent === agent.id && (
                        <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                          <div className="relative">
                            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                              <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                            </div>
                            <div className="absolute inset-0 flex items-center justify-center">
                              <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                SELECTED
                              </span>
                            </div>
                          </div>
                        </div>
                      )}
                      <Card 
                        className={`cursor-pointer border-4 border-black hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all ${
                          selectedAgent === agent.id ? 'bg-orange-100 shadow-[8px_8px_0_rgba(0,0,0,1)]' : 'bg-white'
                        }`}
                        onClick={() => setSelectedAgent(agent.id)}
                      >
                        <CardContent className="p-6">
                        <div className="flex items-start gap-4">
                          <Button size="icon" variant="header" className="w-16 h-16 bg-orange-500 hover:bg-orange-600 flex-shrink-0">
                            <UilRobot className="h-8 w-8 text-white" />
                          </Button>
                          <div className="flex-1">
                            <h3 className="text-xl font-black uppercase mb-2">{agent.name}</h3>
                            <div className="flex flex-wrap gap-2">
                              <Badge className="bg-orange-200 text-black border-2 border-black">
                                {agent.language}
                              </Badge>
                              <Badge className="bg-yellow-200 text-black border-2 border-black">
                                {agent.pitch}
                              </Badge>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                    </div>
                  ))}
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">AGENT SELECTION</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Choose an agent that matches your campaign type. Sales agents are persistent, 
                          support agents are empathetic, and booking agents focus on scheduling.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(1)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(3)}
                    disabled={!selectedAgent}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 2 */}
          {currentStep === 2 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilRobot className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        AI-POWERED AGENT EXCELLENCE
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our AI agents achieve <span className="font-black text-orange-600">85% conversation success rates</span> by adapting their approach in real-time. 
                        Each agent specializes in different conversation styles, from assertive sales pitches to empathetic support interactions.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Natural conversation flow</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Objection handling</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Sentiment analysis</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Multi-language support</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 2 */}
          {currentStep === 2 && (
            <InfoSection customContent={{
              icon: <UilRobot className="h-6 w-6 text-white" />,
              title: "Choose Your Perfect AI Representative",
              description: "Select the AI agent that best matches your campaign goals. Each agent is trained with specialized conversation skills, industry knowledge, and personality traits optimized for different business scenarios and customer interactions.",
              benefits: [
                "85% conversation success rates across all agent types",
                "Real-time conversation adaptation and objection handling",
                "Specialized training for sales, support, and appointments",
                "Natural personality matching for authentic interactions"
              ],
              faqs: [
                {
                  icon: <UilRobot className="h-5 w-5" />,
                  question: "What makes each agent different?",
                  answer: "Sales Champion excels at discovery calls and lead qualification with assertive techniques. Support Hero handles customer service with empathy and problem-solving skills. Booking Pro specializes in appointment scheduling with persistence and calendar management."
                },
                {
                  icon: <UilUsersAlt className="h-5 w-5" />,
                  question: "How do agents handle different personality types?",
                  answer: "Our AI agents use real-time sentiment analysis to adapt their approach. They can shift from formal to casual, adjust pace and enthusiasm, and modify their questioning style based on prospect responses and engagement levels."
                },
                {
                  icon: <UilInfoCircle className="h-5 w-5" />,
                  question: "Can agents speak multiple languages fluently?",
                  answer: "Yes! Each agent supports multiple languages with native-level pronunciation and cultural awareness. They understand regional business customs, appropriate formality levels, and industry-specific terminology for natural conversations."
                }
              ]
            }} />
          )}

          {/* Step 3: Voice Selection */}
          {currentStep === 3 && (
            <Card className="transform -rotate-1">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    SELECT YOUR VOICE
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Choose the perfect voice for your AI agent
                </p>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                  {voices.filter(voice => !voice.premium).map((voice) => (
                    <div key={voice.id} className="relative">
                      {selectedVoice === voice.id && (
                        <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                          <div className="relative">
                            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                              <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                            </div>
                            <div className="absolute inset-0 flex items-center justify-center">
                              <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                SELECTED
                              </span>
                            </div>
                          </div>
                        </div>
                      )}
                      <Card 
                        className={`cursor-pointer border-4 border-black hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all ${
                          selectedVoice === voice.id ? 'bg-orange-100 shadow-[8px_8px_0_rgba(0,0,0,1)]' : 'bg-white'
                        }`}
                        onClick={() => setSelectedVoice(voice.id)}
                      >
                        <CardContent className="p-6">
                          <div className="flex items-start gap-4">
                            <Button size="icon" variant="header" className="w-16 h-16 bg-orange-500 hover:bg-orange-600 flex-shrink-0">
                              <UilPhone className="h-8 w-8 text-white" />
                            </Button>
                            <div className="flex-1">
                              <h3 className="text-xl font-black uppercase mb-2">{voice.name}</h3>
                              <p className="text-gray-700 mb-3">{voice.description}</p>
                              <Button
                                size="sm"
                                variant="outline"
                                className="border-2 border-black hover:bg-orange-100"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handlePlayVoice(voice.id, voice.previewText);
                                }}
                              >
                                {isPlaying === voice.id ? (
                                  <>
                                    <UilPause className="h-4 w-4 mr-1" />
                                    PLAYING
                                  </>
                                ) : (
                                  <>
                                    <UilPlay className="h-4 w-4 mr-1" />
                                    PREVIEW
                                  </>
                                )}
                              </Button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  ))}
                  
                  <div className="md:col-span-2">
                    <PremiumFeatureCard 
                      title="CREATE YOUR OWN VOICE"
                      description="Clone your own voice for personalized calls. Use advanced AI to create a perfect replica of your voice for authentic conversations with prospects."
                      price="$99/month"
                    />
                  </div>
                </div>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(2)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(6)}
                    disabled={!selectedVoice}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">VOICE SELECTION</p>
                          <p className="text-sm text-gray-700 mt-1">
                            Choose a voice that matches your brand personality. Preview each option to hear how they&apos;ll sound to your prospects.
                          </p>                      </div>
                    </div>
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          )}

          {/* Step 4: Target List */}
          {currentStep === 4 && (
            <Card className="transform rotate-1">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    TARGET LIST
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Who should we call?
                </p>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                  <div className="relative">
                    {targetListType === 'upload' && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        targetListType === 'upload' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => setTargetListType('upload')}
                    >
                      <CardContent className="p-6 text-center">
                        <UilUpload className="h-8 w-8 mx-auto mb-2" />
                        <h4 className="font-black uppercase mb-1">UPLOAD CSV</h4>
                        <p className="text-sm text-gray-600">Import your contact list</p>
                      </CardContent>
                    </Card>
                  </div>
                  <div className="relative">
                    {targetListType === 'existing' && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        targetListType === 'existing' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => setTargetListType('existing')}
                    >
                      <CardContent className="p-6 text-center">
                        <UilUsersAlt className="h-8 w-8 mx-auto mb-2" />
                        <h4 className="font-black uppercase mb-1">EXISTING LEADS</h4>
                        <p className="text-sm text-gray-600">Use Hunter results</p>
                      </CardContent>
                    </Card>
                  </div>
                  <div className="relative">
                    {targetListType === 'manual' && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        targetListType === 'manual' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => setTargetListType('manual')}
                    >
                      <CardContent className="p-6 text-center">
                        <UilListUl className="h-8 w-8 mx-auto mb-2" />
                        <h4 className="font-black uppercase mb-1">MANUAL ENTRY</h4>
                        <p className="text-sm text-gray-600">Add numbers directly</p>
                      </CardContent>
                    </Card>
                  </div>
                </div>

                {targetListType === 'upload' && (
                  <Card className="bg-orange-50 border-4 border-black">
                    <CardContent className="p-8">
                      <div className="border-4 border-dashed border-black rounded-lg p-8 text-center bg-white">
                        <input
                          type="file"
                          accept=".csv"
                          onChange={handleFileUpload}
                          className="hidden"
                          id="csv-upload"
                        />
                        <label htmlFor="csv-upload" className="cursor-pointer">
                          <Button size="icon" variant="header" className="w-16 h-16 mb-4 bg-orange-500 hover:bg-orange-600">
                            <UilUpload className="h-8 w-8 text-white" />
                          </Button>
                          <p className="text-lg font-bold">Click to upload CSV file</p>
                          <p className="text-sm text-gray-600 mt-2">Format: Name, Phone Number, Company (optional)</p>
                        </label>
                      </div>
                      {uploadedFile && (
                        <div className="mt-4 p-4 bg-green-50 border-2 border-black rounded">
                          <p className="font-bold">✓ {uploadedFile.name} uploaded</p>
                          <p className="text-sm text-gray-600">Estimated contacts: {estimatedContacts}</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}

                {targetListType === 'existing' && (
                  <Card className="bg-orange-50 border-4 border-black">
                    <CardContent className="p-8 text-center">
                      <UilUsersAlt className="h-16 w-16 mx-auto mb-4 text-orange-600" />
                      <h3 className="text-xl font-black uppercase mb-2">250 LEADS AVAILABLE</h3>
                      <p className="text-gray-700 mb-4">From your recent Hunter search</p>
                      <Button className="bg-orange-500 hover:bg-orange-600 text-white">
                        USE ALL LEADS
                      </Button>
                    </CardContent>
                  </Card>
                )}

                {targetListType === 'manual' && (
                  <Card className="bg-orange-50 border-4 border-black">
                    <CardContent className="p-8">
                      <label className="text-lg font-black uppercase mb-3 block">
                        PHONE NUMBERS (ONE PER LINE)
                      </label>
                      <Textarea
                        value={manualNumbers}
                        onChange={(e) => setManualNumbers(e.target.value)}
                        placeholder="+1 555-0123&#10;+1 555-0124&#10;+1 555-0125"
                        className="min-h-[200px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none font-mono"
                      />
                      <p className="text-sm text-gray-600 mt-2">
                        Enter phone numbers with country code
                      </p>
                    </CardContent>
                  </Card>
                )}

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(3)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(6)}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">TARGET LIST TIPS</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Upload a CSV for bulk imports, use existing leads from Hunter searches, 
                          or manually enter numbers for smaller campaigns. We&apos;ll validate all numbers before calling.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 3 */}
          {currentStep === 4 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilUsersAlt className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        INTELLIGENT LEAD MANAGEMENT
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our system validates and enriches every contact before calling. <span className="font-black text-orange-600">Invalid numbers are automatically filtered</span>, 
                        while valid contacts are enhanced with timezone detection and optimal call time predictions.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Phone number validation</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Timezone detection</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">DNC list checking</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Duplicate removal</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 3 */}
          {currentStep === 4 && (
            <InfoSection customContent={{
              icon: <UilUsersAlt className="h-6 w-6 text-white" />,
              title: "Smart Target Audience Management",
              description: "Upload, import, or select your ideal prospects with intelligent data validation and enrichment. Our system automatically optimizes contact lists for maximum reachability while ensuring compliance with calling regulations.",
              benefits: [
                "Automatic phone number validation and formatting",
                "Real-time timezone detection for optimal call timing",
                "DNC list checking and compliance management",
                "Duplicate detection and contact data enrichment"
              ],
              faqs: [
                {
                  icon: <UilUpload className="h-5 w-5" />,
                  question: "What format should my CSV file be in?",
                  answer: "Upload CSV files with columns for Name, Phone Number, and optionally Company. Our system accepts various formats and automatically standardizes the data for optimal calling. Include country codes for international numbers."
                },
                {
                  icon: <UilUsersAlt className="h-5 w-5" />,
                  question: "How does the system validate phone numbers?",
                  answer: "We verify number format, check for valid area codes, detect mobile vs landline, and cross-reference against Do Not Call lists. Invalid numbers are automatically flagged and excluded from your campaign to maintain compliance."
                },
                {
                  icon: <UilClipboardNotes className="h-5 w-5" />,
                  question: "Can I use leads from Hunter or other sources?",
                  answer: "Absolutely! Import existing leads from Hunter searches, CRM exports, or any lead generation tool. Our system will validate and enhance the data with additional information like timezone and optimal calling times."
                }
              ]
            }} />
          )}

          {/* Step 4: Call Settings */}
          {currentStep === 5 && (
            <Card className="transform -rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    CALL SETTINGS
                  </h1>
                </div>
                <div className="space-y-6">
                  {/* Schedule Settings */}
                  <Card className="bg-orange-50 border-2 border-black">
                    <CardContent className="p-6">
                      <h3 className="text-lg font-black uppercase mb-4 flex items-center gap-2">
                        <UilClock className="h-5 w-5" />
                        SCHEDULE
                      </h3>
                      <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                          <label className="text-sm font-bold uppercase">Start Time</label>
                          <Input
                            type="time"
                            value={callSettings.startTime}
                            onChange={(e) => setCallSettings({...callSettings, startTime: e.target.value})}
                            className="h-12 font-semibold border-2 border-black"
                          />
                        </div>
                        <div>
                          <label className="text-sm font-bold uppercase">End Time</label>
                          <Input
                            type="time"
                            value={callSettings.endTime}
                            onChange={(e) => setCallSettings({...callSettings, endTime: e.target.value})}
                            className="h-12 font-semibold border-2 border-black"
                          />
                        </div>
                      </div>
                      <div>
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <label className="text-sm font-bold uppercase cursor-help">
                                Timezone
                                <UilInfoCircle className="inline-block h-3 w-3 ml-1 text-gray-600" />
                              </label>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>All call times will be scheduled according to this timezone. Calls automatically adjust for each contact&apos;s local time.</p>
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                        <Select
                          value={callSettings.timezone}
                          onValueChange={(value) => setCallSettings({...callSettings, timezone: value})}
                        >
                          <SelectTrigger className="w-full h-12 px-4 text-lg font-semibold border-4 border-black bg-white hover:bg-gray-50">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] bg-white">
                            {timezones.map(tz => (
                              <SelectItem key={tz} value={tz}>{tz}</SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Capacity Settings */}
                  <div>
                    <div className="flex items-center gap-2 mb-3">
                      <label className="text-lg font-black uppercase block">
                        MAX CALLS PER DAY: {callSettings.maxCallsPerDay}
                      </label>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button className="p-0 bg-transparent border-none outline-none">
                            <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent side="top">
                          <p>Maximum number of calls your agents will make in a 24-hour period. Helps manage campaign pacing.</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <Slider 
                      value={[callSettings.maxCallsPerDay]}
                      onValueChange={(value) => setCallSettings({...callSettings, maxCallsPerDay: value[0]})}
                      min={1}
                      max={Math.max(20, Math.min(200, estimatedContacts * 5))}
                      step={1}
                      className="mb-2"
                    />
                    <div className="text-sm text-gray-600 space-y-1">
                      {estimatedContacts > 0 && (
                        <>
                          <div>• {estimatedContacts} contacts</div>
                          <div>• {callSettings.maxCallsPerDay} calls/day</div>
                          <div>• 
                            {callSettings.maxCallsPerDay < estimatedContacts ? 'Conservative pace' :
                             callSettings.maxCallsPerDay <= estimatedContacts * 2 ? 'Balanced pace' :
                             'Aggressive pace'}
                          </div>
                        </>
                      )}
                    </div>
                  </div>

                  {/* Retry Settings */}
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <div className="flex items-center gap-2 mb-2">
                        <label className="text-sm font-black uppercase block">
                          RETRY ATTEMPTS: {callSettings.retryAttempts}
                        </label>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button className="p-0 bg-transparent border-none outline-none">
                              <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent side="top">
                            <p>Number of times to retry unanswered calls. Set to 0 to disable retries.</p>
                          </TooltipContent>
                        </Tooltip>
                      </div>
                      <Slider 
                        value={[callSettings.retryAttempts]}
                        onValueChange={(value) => setCallSettings({...callSettings, retryAttempts: value[0]})}
                        min={0}
                        max={5}
                        step={1}
                      />
                      <p className="text-xs text-gray-600 mt-1">
                        {callSettings.retryAttempts === 0 ? 'No retries - single attempt only' :
                         callSettings.retryAttempts === 1 ? 'One retry attempt' :
                         `${callSettings.retryAttempts} retry attempts`}
                      </p>
                    </div>
                    <div>
                      <div className="flex items-center gap-2 mb-2">
                        <label className="text-sm font-black uppercase block">
                          DAYS BETWEEN: {callSettings.daysBetweenRetries}
                        </label>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button className="p-0 bg-transparent border-none outline-none">
                              <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent side="top">
                            <p>Wait time between retry attempts to avoid being too persistent.</p>
                          </TooltipContent>
                        </Tooltip>
                      </div>
                      <Slider 
                        value={[callSettings.daysBetweenRetries]}
                        onValueChange={(value) => setCallSettings({...callSettings, daysBetweenRetries: value[0]})}
                        min={1}
                        max={7}
                        step={1}
                        disabled={callSettings.retryAttempts === 0}
                      />
                      {callSettings.retryAttempts === 0 ? (
                        <p className="text-xs text-gray-500 mt-1">Enable retry attempts to configure retry delay</p>
                      ) : (
                        <p className="text-xs text-gray-600 mt-1">
                          {callSettings.daysBetweenRetries === 1 ? 'Next day retry' :
                           callSettings.daysBetweenRetries === 7 ? 'Weekly retry cycle' :
                           `Wait ${callSettings.daysBetweenRetries} days between attempts`}
                        </p>
                      )}
                    </div>
                  </div>

                  {/* Features */}
                  <div className="grid grid-cols-2 gap-4">
                    <Card className="bg-orange-50 border-2 border-black">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <UilVoicemail className="h-5 w-5" />
                            <span className="font-black uppercase">Voicemail</span>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <button className="p-0 bg-transparent border-none outline-none">
                                  <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                </button>
                              </TooltipTrigger>
                              <TooltipContent side="top">
                                <p>AI agent will leave a voicemail if the call goes to voicemail. Increases message delivery rate.</p>
                              </TooltipContent>
                            </Tooltip>
                          </div>
                          <Switch 
                            checked={callSettings.leaveVoicemail}
                            onCheckedChange={(checked) => setCallSettings({...callSettings, leaveVoicemail: checked})}
                          />
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-orange-50 border-2 border-black">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <UilPhone className="h-5 w-5" />
                            <span className="font-black uppercase">Recording</span>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <button className="p-0 bg-transparent border-none outline-none">
                                  <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                </button>
                              </TooltipTrigger>
                              <TooltipContent side="top">
                                <p>Record all calls for quality assurance and training. Stored securely with compliance standards.</p>
                              </TooltipContent>
                            </Tooltip>
                          </div>
                          <Switch 
                            checked={callSettings.callRecording}
                            onCheckedChange={(checked) => setCallSettings({...callSettings, callRecording: checked})}
                          />
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  <PremiumFeatureCard 
                    title="SMART SCHEDULING"
                    description="AI optimizes call times based on answer rates. Automatically adjusts schedule for each timezone."
                    price="$49/month"
                  />
                </div>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(3)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(6)}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">CALL SETTINGS</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Configure when your agents should call. We respect timezone settings and 
                          automatically skip weekends and holidays. Enable recording for quality assurance.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 4 */}
          {currentStep === 5 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilClock className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        SMART SCHEDULING TECHNOLOGY
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our AI analyzes <span className="font-black text-orange-600">millions of call patterns</span> to determine optimal contact times. 
                        Automatic timezone adjustments and holiday detection ensure your calls always happen at the right moment, maximizing connection rates while respecting boundaries.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Answer rate optimization</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Automatic timezone handling</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Holiday detection</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Business hours compliance</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 4 */}
          {currentStep === 5 && (
            <InfoSection customContent={{
              icon: <UilClock className="h-6 w-6 text-white" />,
              title: "Optimize Call Timing & Performance",
              description: "Configure intelligent call scheduling and performance settings that maximize connection rates while respecting boundaries. Our AI-powered timing optimization ensures calls happen when prospects are most likely to answer and engage.",
              benefits: [
                "AI-optimized call timing for 40% higher answer rates",
                "Automatic timezone handling across global contacts",
                "Smart retry logic that respects prospect preferences",
                "Compliance with business hours and holiday detection"
              ],
              faqs: [
                {
                  icon: <UilClock className="h-5 w-5" />,
                  question: "How does AI optimize call timing?",
                  answer: "Our system analyzes millions of successful calls to identify patterns. It considers factors like industry, time zone, historical answer rates, and even weather patterns to determine the optimal time to reach each specific contact."
                },
                {
                  icon: <UilVoicemail className="h-5 w-5" />,
                  question: "Should I enable voicemail messages?",
                  answer: "Yes! Voicemail messages increase callback rates by 23%. Our AI agents leave personalized, professional messages that reference your campaign goals and provide clear next steps for interested prospects to engage."
                },
                {
                  icon: <UilPhone className="h-5 w-5" />,
                  question: "How many retry attempts work best?",
                  answer: "We recommend 2-3 retry attempts with 2-3 days between calls. This balances persistence with respect for prospects' time. Our smart retry system adjusts timing based on previous call outcomes and prospect engagement signals."
                }
              ]
            }} />
          )}

          {/* Step 5: Preview & Launch */}
          {currentStep === 6 && (
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    PREVIEW & LAUNCH
                  </h1>
                </div>
                <div className="space-y-6">
                  {/* Campaign Summary */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Card className="bg-white border-2 border-black transform -rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Campaign</h4>
                        <p className="text-lg font-bold">{campaignName}</p>
                        <Badge className="bg-orange-200 text-black border-2 border-black mt-2">
                          {campaignType.toUpperCase()}
                        </Badge>
                      </CardContent>
                    </Card>
                    <Card className="bg-white border-2 border-black transform rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Agent</h4>
                        <p className="text-lg font-bold">
                          {mockAgents.find(a => a.id === selectedAgent)?.name || 'Selected Agent'}
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-white border-2 border-black transform -rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Contacts</h4>
                        <p className="text-2xl font-black text-orange-600">
                          {estimatedContacts || 250}
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-white border-2 border-black transform rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Schedule</h4>
                        <p className="text-sm font-bold">
                          {callSettings.startTime} - {callSettings.endTime}
                        </p>
                        <p className="text-xs text-gray-600">{callSettings.timezone}</p>
                      </CardContent>
                    </Card>
                  </div>

                  {/* Goals Recap */}
                  <Card className="bg-orange-50 border-2 border-black">
                    <CardContent className="p-4">
                      <h4 className="font-black uppercase mb-2">Goals</h4>
                      <p className="text-gray-700">{campaignGoals}</p>
                    </CardContent>
                  </Card>

                  {/* Launch Button */}
                  <div className="text-center">
                  <Button
                    className="px-12 py-4 h-16 text-xl font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={handleLaunchCampaign}
                  >
                    <UilPlay className="mr-2 h-6 w-6" />
                    LAUNCH CAMPAIGN
                  </Button>                    <p className="text-sm text-gray-600 mt-4">
                      You can pause or modify the campaign anytime from the dashboard
                    </p>
                  </div>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">LAUNCH READINESS</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Review all settings before launching. Your campaign will start immediately and 
                          begin calling contacts based on your schedule. You can pause or modify settings anytime.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Button
                  className="w-full mt-8 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                  onClick={() => setCurrentStep(6)}
                >
                  <UilArrowLeft className="mr-2 h-6 w-6" />
                  BACK TO SETTINGS
                </Button>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 5 */}
          {currentStep === 6 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilPlay className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        LAUNCH WITH CONFIDENCE
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Your campaign is ready to achieve <span className="font-black text-orange-600">exceptional results</span>. 
                        Our platform handles thousands of concurrent calls while maintaining conversation quality. Real-time monitoring and adjustment capabilities ensure optimal performance from day one.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Real-time performance tracking</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Instant campaign adjustments</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Comprehensive call analytics</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">24/7 monitoring</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 5 */}
          {currentStep === 6 && (
            <InfoSection customContent={{
              icon: <UilPlay className="h-6 w-6 text-white" />,
              title: "Ready to Launch Your Campaign",
              description: "Your AI-powered calling campaign is fully configured and ready to deliver outstanding results. With intelligent agents, optimized targeting, and smart scheduling, you're set to achieve exceptional conversion rates and meaningful business growth.",
              benefits: [
                "Instant deployment with professional-quality setup",
                "Real-time campaign monitoring and live adjustments",
                "Comprehensive analytics and performance insights",
                "24/7 system monitoring with automatic optimization"
              ],
              faqs: [
                {
                  icon: <UilPlay className="h-5 w-5" />,
                  question: "What happens immediately after I launch?",
                  answer: "Your AI agents begin calling according to your schedule within minutes. You'll see real-time updates in the dashboard showing call progress, connection rates, and conversation outcomes. The system automatically adapts for optimal performance."
                },
                {
                  icon: <UilAnalytics className="h-5 w-5" />,
                  question: "How can I track campaign performance?",
                  answer: "Access comprehensive dashboards with live call monitoring, conversion metrics, call recordings, transcripts, and detailed analytics. Get insights on best-performing scripts, optimal call times, and prospect engagement patterns."
                },
                {
                  icon: <UilClock className="h-5 w-5" />,
                  question: "Can I pause or modify the campaign after launching?",
                  answer: "Yes! You have full control to pause, adjust targeting, modify scripts, change scheduling, or stop the campaign at any time. All changes take effect immediately without losing your progress or data."
                }
              ]
            }} />
          )}

           {/* Step 6: Campaign Launched */}
           {currentStep === 7 && (
             <Card className="transform rotate-1 relative overflow-hidden">
               <CardContent className="p-8">
                 <div className="text-center mb-8">
                   <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                     CAMPAIGN LAUNCHED
                   </h1>
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-green-600 hover:bg-green-700 text-white border-black"
                    >
                      <UilCheckCircle className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        CAMPAIGN LIVE & SCALING
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Your AI agents are now <span className="font-black text-orange-600">actively making calls</span> and engaging with prospects. 
                        Our system automatically scales to handle response volumes while maintaining quality. Every conversation improves future performance through machine learning.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Live call monitoring</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Automatic scaling</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Real-time optimization</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Performance learning</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 6 */}
          {currentStep === 6 && !isLaunching && (
            <InfoSection customContent={{
              icon: <UilCheckCircle className="h-6 w-6 text-white" />,
              title: "Your Campaign is Now Live",
              description: "Congratulations! Your AI-powered calling campaign is now active and delivering results. Monitor real-time performance, track conversion rates, and watch as your AI agents engage prospects with professional, personalized conversations that drive business growth.",
              benefits: [
                "Live call monitoring with real-time conversation insights",
                "Automatic performance optimization through machine learning",
                "Instant notification of qualified leads and appointments",
                "Continuous improvement with every successful interaction"
              ],
              faqs: [
                {
                  icon: <UilAnalytics className="h-5 w-5" />,
                  question: "Where can I view live campaign performance?",
                  answer: "Access your comprehensive dashboard to see real-time call metrics, live call monitoring, conversation transcripts, lead qualification status, and detailed performance analytics. Get instant notifications for important events and successful conversions."
                },
                {
                  icon: <UilCheckCircle className="h-5 w-5" />,
                  question: "How will I know when prospects are interested?",
                  answer: "The system sends instant notifications for qualified leads, scheduled appointments, and positive responses. You'll receive detailed summaries with prospect information, conversation highlights, and recommended next steps for follow-up."
                },
                {
                  icon: <UilClock className="h-5 w-5" />,
                  question: "What should I expect in the first few hours?",
                  answer: "Initial calls begin immediately based on your schedule. You'll see connection rates, conversation quality metrics, and early performance indicators within the first hour. The AI learns quickly and optimizes approach for better results throughout the day."
                }
              ]
            }} />
          )}
        </div>
      </div>

      {/* Navigation */}
      {currentStep > 1 && currentStep < 6 && (
        <div className="fixed bottom-8 left-1/2 transform -translate-x-1/2">
          <OnboardingNav 
            currentStep={currentStep - 1} 
            totalSteps={6}
            onStepChange={(step) => handleStepChange(step + 1)}
          />
        </div>
      )}

      {/* Verification Modal */}
      {showVerification && (
        <VerificationModal
          isOpen={showVerification}
          onClose={() => setShowVerification(false)}
          onComplete={handleVerificationComplete}
          devMode={devMode}
        />
      )}
      
      <div className="mt-8">
        <OnboardingFooter />
      </div>
    </div>
    </TooltipProvider>
  );
}


================================================
FILE: cloning/page-refactored.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { UilYoutube, UilChannel, UilCheckCircle, UilVideo, UilCog, UilQuestionCircle, UilCopy } from '@tooni/iconscout-unicons-react';
import { useTikTokContent } from '@/hooks/useTikTokContent';
import { useYouTubeContent } from '@/hooks/useYouTubeContent';
import { useTwitchContent } from '@/hooks/useTwitchContent';
import { useQuery } from 'convex/react';
import { api } from '@convex/_generated/api';

// Import all step components
import { PlatformSelectionStep } from '@/components/onboarding/cloning/PlatformSelectionStep';
import { ChannelSetupStep } from '@/components/onboarding/cloning/ChannelSetupStep';
import { ContentSelectionStep } from '@/components/onboarding/cloning/ContentSelectionStep';
import { VoiceSettingsStep } from '@/components/onboarding/cloning/VoiceSettingsStep';
import { IdentityVerificationStep } from '@/components/onboarding/cloning/IdentityVerificationStep';
import { ReviewCompleteStep } from '@/components/onboarding/cloning/ReviewCompleteStep';

interface ContentItem {
  id: string; 
  title: string;
  duration: string;
  views: string;
  likes: string;
  published: string;
  thumbnail?: string;
}

export default function CloningOnboarding() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [selectedPlatform, setSelectedPlatform] = React.useState('');
  const [channelName, setChannelName] = React.useState('');
  const [selectedContent, setSelectedContent] = React.useState<string[]>([]);
  const [isLoading, setIsLoading] = React.useState(false);
  const [loadProgress, setLoadProgress] = React.useState(0);
  const [isProcessing, setIsProcessing] = React.useState(false);
  const [processProgress, setProcessProgress] = React.useState(0);
  const [uploadedFile, setUploadedFile] = React.useState<File | null>(null);
  const [audioUrl, setAudioUrl] = React.useState<string>('');
  const [processingProgress, setProcessingProgress] = React.useState(0);
  const [voiceCloneReady, setVoiceCloneReady] = React.useState(false);
  const [selectedAction, setSelectedAction] = React.useState<string | null>(null);
  const [isVerified, setIsVerified] = React.useState(false);
  const [showVerificationModal, setShowVerificationModal] = React.useState(false);
  const [voiceSettings, setVoiceSettings] = React.useState({
    exaggeration: 0.5,    // Controls expressiveness (0.25-2.0)
    cfgWeight: 0.5,       // CFG/Pace control (0.2-1.0)
    temperature: 0.8,     // Controls randomness (0.05-5.0)
    seed: 0,              // Random seed (0 for random)
    refWav: null as File | null  // Optional reference audio
  });

  // TikTok content hook
  const {
    user: tiktokUser,
    userLoading: tiktokUserLoading,
    userError: tiktokUserError,
    fetchUser: fetchTikTokUser,
    videos: tiktokVideos,
    videosLoading: tiktokVideosLoading,
    videosError: tiktokVideosError,
    fetchVideos: fetchTikTokVideos,
    downloadVideos: downloadTikTokVideos,
    downloadProgress: tiktokDownloadProgress,
    downloadStatus: tiktokDownloadStatus,
  } = useTikTokContent();

  // YouTube content hook
  const {
    channel: youtubeChannel,
    channelLoading: youtubeChannelLoading,
    channelError: youtubeChannelError,
    fetchChannel: fetchYouTubeChannel,
    videos: youtubeVideos,
    videosLoading: youtubeVideosLoading,
    videosError: youtubeVideosError,
    fetchVideos: fetchYouTubeVideos,
    downloadVideos: downloadYouTubeVideos,
    downloadProgress: youtubeDownloadProgress,
    downloadStatus: youtubeDownloadStatus,
  } = useYouTubeContent();

  // Twitch content hook
  const {
    channel: twitchChannel,
    channelLoading: twitchChannelLoading,
    channelError: twitchChannelError,
    channelDataComplete: twitchChannelDataComplete,
    fetchChannel: fetchTwitchChannel,
    videos: twitchVideos,
    videosLoading: twitchVideosLoading,
    videosError: twitchVideosError,
    fetchVideos: fetchTwitchVideos,
    downloadVideos: downloadTwitchVideos,
    downloadProgress: twitchDownloadProgress,
    downloadStatus: twitchDownloadStatus,
  } = useTwitchContent();

  const cleanupTikTokData = React.useCallback(async () => {
    console.log('[Cleanup] TikTok data cleanup called');
  }, []);
  const cleanupYouTubeData = React.useCallback(async () => {
    console.log('[Cleanup] YouTube data cleanup called');
  }, []);
  const cleanupTwitchData = React.useCallback(async () => {
    console.log('[Cleanup] Twitch data cleanup called');
  }, []);

  // TikTok user data complete fallback
  const tiktokUserDataComplete = !!tiktokUser;

  // Track if we've already attempted to fetch videos for this channel
  const fetchedChannelsRef = React.useRef<Set<string>>(new Set());

  // Auto-fetch YouTube videos when channel is loaded
  React.useEffect(() => {
    if (selectedPlatform === 'youtube' && youtubeChannel && !youtubeVideosLoading) {
      const channelId = youtubeChannel.channelId;
      
      // Only fetch if we haven't already fetched for this channel
      if (!fetchedChannelsRef.current.has(channelId) && youtubeVideos.length === 0) {
        console.log('Auto-fetching YouTube videos for channel:', channelId);
        fetchedChannelsRef.current.add(channelId);
        fetchYouTubeVideos(channelId, 6);
      }
    }
  }, [youtubeChannel, selectedPlatform, youtubeVideosLoading, youtubeVideos.length, fetchYouTubeVideos]);
  
  // Auto-fetch Twitch videos when channel is loaded
  React.useEffect(() => {
    if (selectedPlatform === 'twitch' && twitchChannel && !twitchVideosLoading) {
      const username = twitchChannel.username;
      
      // Only fetch if we haven't already fetched for this channel
      if (!fetchedChannelsRef.current.has(username) && twitchVideos.length === 0) {
        console.log('Auto-fetching Twitch videos for channel:', username);
        fetchedChannelsRef.current.add(username);
        fetchTwitchVideos(username, 6, 'archive');
      }
    }
  }, [twitchChannel, selectedPlatform, twitchVideosLoading, twitchVideos.length, fetchTwitchVideos]);
  
  // Debug YouTube videos
  React.useEffect(() => {
    console.log('[YouTube Debug] Videos state:', {
      videosLength: youtubeVideos.length,
      videos: youtubeVideos,
      loading: youtubeVideosLoading,
      error: youtubeVideosError
    });
  }, [youtubeVideos, youtubeVideosLoading, youtubeVideosError]);

  // Debug query to check database state
  const debugYouTubeData = useQuery(api.queries.debugYouTube.getAllYouTubeVideos);
  // const debugTwitchData = useQuery(api.queries.twitchContent.getAllTwitchVideos); // TODO: Add twitchContent queries
  React.useEffect(() => {
    if (debugYouTubeData) {
      console.log('[Debug] YouTube Database state:', debugYouTubeData);
    }
    // if (debugTwitchData) {
    //   console.log('[Debug] Twitch Database state:', debugTwitchData);
    // }
  }, [debugYouTubeData]);
  
  // Debug TikTok videos
  React.useEffect(() => {
    console.log('[TikTok Debug] Videos state:', {
      videosLength: tiktokVideos.length,
      videos: tiktokVideos,
      loading: tiktokVideosLoading,
      error: tiktokVideosError,
      user: tiktokUser
    });
  }, [tiktokVideos, tiktokVideosLoading, tiktokVideosError, tiktokUser]);
  
  // Debug TikTok user loading state
  React.useEffect(() => {
    console.log('[TikTok Debug] User profile state:', {
      hasUser: !!tiktokUser,
      userLoading: tiktokUserLoading,
      userDataComplete: tiktokUserDataComplete,
      shouldShowSkeleton: tiktokUserLoading || (!tiktokUser || !tiktokUserDataComplete),
      avatar: tiktokUser?.avatar,
      followerCount: tiktokUser?.followerCount
    });
  }, [tiktokUser, tiktokUserLoading, tiktokUserDataComplete]);
  
  // Debug Twitch videos
  React.useEffect(() => {
    console.log('[Twitch Debug] Videos state:', {
      videosLength: twitchVideos.length,
      videos: twitchVideos,
      loading: twitchVideosLoading,
      error: twitchVideosError,
      channel: twitchChannel
    });
  }, [twitchVideos, twitchVideosLoading, twitchVideosError, twitchChannel]);
  
  // Debug Twitch channel loading state
  React.useEffect(() => {
    console.log('[Twitch Debug] Channel state:', {
      hasChannel: !!twitchChannel,
      channelLoading: twitchChannelLoading,
      channelDataComplete: twitchChannelDataComplete,
      shouldShowSkeleton: twitchChannelLoading || (!twitchChannel || !twitchChannelDataComplete),
      profileImage: twitchChannel?.profileImage,
      followerCount: twitchChannel?.followerCount,
      isLive: twitchChannel?.isLive
    });
  }, [twitchChannel, twitchChannelLoading, twitchChannelDataComplete]);
  
  // Cleanup when platform changes
  React.useEffect(() => {
    const cleanup = async () => {
      if (selectedPlatform !== 'tiktok' && tiktokUser) {
        console.log('[Cloning] Platform changed from TikTok, cleaning up data');
        try {
          await cleanupTikTokData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up TikTok data:', error);
        }
      }
      if (selectedPlatform !== 'youtube' && youtubeChannel) {
        console.log('[Cloning] Platform changed from YouTube, cleaning up data');
        try {
          await cleanupYouTubeData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up YouTube data:', error);
        }
      }
      if (selectedPlatform !== 'twitch' && twitchChannel) {
        console.log('[Cloning] Platform changed from Twitch, cleaning up data');
        try {
          await cleanupTwitchData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up Twitch data:', error);
        }
      }
    };
    
    cleanup();
  }, [selectedPlatform, tiktokUser, youtubeChannel, twitchChannel, cleanupTikTokData, cleanupYouTubeData, cleanupTwitchData]);
  
  // Cleanup when channel name is cleared
  React.useEffect(() => {
    if (channelName === '' && (tiktokUser || tiktokVideos.length > 0) && selectedPlatform === 'tiktok') {
      console.log('[Cloning] Channel name cleared, cleaning up TikTok data');
      cleanupTikTokData();
    }
    if (channelName === '' && (youtubeChannel || youtubeVideos.length > 0) && selectedPlatform === 'youtube') {
      console.log('[Cloning] Channel name cleared, cleaning up YouTube data');
      cleanupYouTubeData();
    }
    if (channelName === '' && (twitchChannel || twitchVideos.length > 0) && selectedPlatform === 'twitch') {
      console.log('[Cloning] Channel name cleared, cleaning up Twitch data');
      cleanupTwitchData();
    }
  }, [channelName, tiktokUser, tiktokVideos.length, youtubeChannel, youtubeVideos.length, twitchChannel, twitchVideos.length, selectedPlatform, cleanupTikTokData, cleanupYouTubeData, cleanupTwitchData]);
  
  React.useEffect(() => {
    if (isLoading && currentStep === 3) {
      if (selectedPlatform === 'tiktok' && !tiktokUserLoading && !tiktokVideosLoading) {
        if (tiktokVideos.length > 0 || tiktokVideosError) {
          console.log('[Cloning] TikTok loading complete, videos:', tiktokVideos.length);
          setIsLoading(false);
        }
      }
      else if (selectedPlatform === 'youtube' && !youtubeChannelLoading && !youtubeVideosLoading) {
        if (youtubeVideos.length > 0 || youtubeVideosError) {
          console.log('[Cloning] YouTube loading complete, videos:', youtubeVideos.length);
          setIsLoading(false);
        }
      }
      else if (selectedPlatform === 'twitch' && !twitchChannelLoading && !twitchVideosLoading) {
        if (twitchVideos.length > 0 || twitchVideosError) {
          console.log('[Cloning] Twitch loading complete, videos:', twitchVideos.length);
          setIsLoading(false);
        }
      }
    }
  }, [isLoading, currentStep, selectedPlatform, tiktokUserLoading, tiktokVideosLoading, 
      tiktokVideos.length, tiktokVideosError, youtubeChannelLoading, youtubeVideosLoading, 
      youtubeVideos.length, youtubeVideosError, twitchChannelLoading, twitchVideosLoading,
      twitchVideos.length, twitchVideosError, ]);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setUploadedFile(file);
      setAudioUrl(URL.createObjectURL(file));
    }
  };

  const handleLoadContent = async () => {
    setIsLoading(true);
    setCurrentStep(3);
    
    if (selectedPlatform === 'upload') {
      setProcessingProgress(0);
      for (let i = 0; i <= 100; i += 10) {
        setProcessingProgress(i);
        await new Promise(resolve => setTimeout(resolve, 200));
      }
      setVoiceCloneReady(true);
      setIsLoading(false);
    } else if (selectedPlatform === 'tiktok') {
      try {
        if (tiktokUser || tiktokVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing TikTok data before new search');
          await cleanupTikTokData();
        }
        
        setLoadProgress(10);
        console.log('Fetching TikTok user:', channelName);
        await fetchTikTokUser(channelName);
        setLoadProgress(50);
        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading TikTok content:', error);
        setIsLoading(false);
      }
    } else if (selectedPlatform === 'youtube') {
      try {
        if (youtubeChannel || youtubeVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing YouTube data before new search');
          await cleanupYouTubeData();
        }
        
        setLoadProgress(10);
        let channelUrl = channelName;
        if (!channelName.includes('youtube.com') && !channelName.includes('youtu.be')) {
          if (channelName.startsWith('@')) {
            channelUrl = `https://youtube.com/${channelName}`;
          } else if (channelName.startsWith('UC') && channelName.length === 24) {
            channelUrl = `https://youtube.com/channel/${channelName}`;
          } else {
            channelUrl = `https://youtube.com/@${channelName}`;
          }
        }
        
        console.log('Fetching YouTube channel:', channelUrl);
        await fetchYouTubeChannel(channelUrl);
        setLoadProgress(50);
        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading YouTube content:', error);
        setIsLoading(false);
      }
    } else if (selectedPlatform === 'twitch') {
      try {
        if (twitchChannel || twitchVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing Twitch data before new search');
          await cleanupTwitchData();
        }
        
        setLoadProgress(10);
        console.log('Fetching Twitch channel:', channelName);
        await fetchTwitchChannel(channelName);
        setLoadProgress(50);
        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading Twitch content:', error);
        setIsLoading(false);
      }
    }
  };

  const handleProcessClone = async () => {
    setIsProcessing(true);
    setProcessProgress(0);
    
    // Download content based on platform
    if (selectedPlatform === 'tiktok' && selectedContent.length > 0) {
      await downloadTikTokVideos(selectedContent);
    } else if (selectedPlatform === 'youtube' && selectedContent.length > 0) {
      await downloadYouTubeVideos(selectedContent);
    } else if (selectedPlatform === 'twitch' && selectedContent.length > 0) {
      await downloadTwitchVideos(selectedContent);
    }
    
    // Simulate clone processing
    for (let i = 0; i <= 100; i += 10) {
      setProcessProgress(i);
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    setIsProcessing(false);
    setCurrentStep(6);
  };

  const handleContinue = () => {
    if (currentStep === 5) {
      handleProcessClone();
    } else {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
      if (currentStep === 3 && selectedPlatform !== 'upload') {
        setChannelName('');
        setSelectedContent([]);
      }
    }
  };

  const handleSkip = () => {
    if (currentStep === 4) {
      setCurrentStep(5);
    }
  };

  const handleIdentityVerificationComplete = () => {
    setIsVerified(true);
    setShowVerificationModal(false);
  };

  const handleVerificationComplete = () => {
    setIsVerified(true);
    setShowVerificationModal(false);
    handleContinue();
  };

  const isNextEnabled = () => {
    switch (currentStep) {
      case 1:
        return selectedPlatform !== '';
      case 2:
        return selectedPlatform === 'upload' ? uploadedFile !== null : channelName !== '';
      case 3:
        return selectedPlatform === 'upload' ? voiceCloneReady : selectedContent.length > 0;
      case 4:
        return true;
      case 5:
        return selectedAction !== null && isVerified;
      default:
        return false;
    }
  };

  const getProgressPercentage = () => {
    const totalSteps = 6;
    return (currentStep / totalSteps) * 100;
  };

  // Get current platform-specific data
  const getCurrentPlatformData = () => {
    switch (selectedPlatform) {
      case 'tiktok':
        return {
          channel: tiktokUser,
          videos: tiktokVideos,
          loading: tiktokUserLoading || tiktokVideosLoading,
          error: tiktokUserError || tiktokVideosError,
          downloadProgress: tiktokDownloadProgress,
          downloadStatus: tiktokDownloadStatus
        };
      case 'youtube':
        return {
          channel: youtubeChannel,
          videos: youtubeVideos,
          loading: youtubeChannelLoading || youtubeVideosLoading,
          error: youtubeChannelError || youtubeVideosError,
          downloadProgress: youtubeDownloadProgress,
          downloadStatus: youtubeDownloadStatus
        };
      case 'twitch':
        return {
          channel: twitchChannel,
          videos: twitchVideos,
          loading: twitchChannelLoading || twitchVideosLoading,
          error: twitchChannelError || twitchVideosError,
          downloadProgress: twitchDownloadProgress,
          downloadStatus: twitchDownloadStatus
        };
      default:
        return {
          channel: null,
          videos: [],
          loading: false,
          error: null,
          downloadProgress: {},
          downloadStatus: ''
        };
    }
  };

  return (
    <div 
      className="min-h-screen bg-pink-500 relative pb-8" 
      style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}
    >
      <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-pink-600 border-2 border-black flex items-center justify-center">
                <UilCopy className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-pink-500 border-2 border-black flex items-center justify-center">
                <UilVideo className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-pink-600 hover:bg-pink-700 border-4 border-black p-0">
                  {currentStep === 1 && <UilChannel className="h-12 w-12 text-white" />}
                  {currentStep === 2 && <UilYoutube className="h-12 w-12 text-white" />}
                  {currentStep === 3 && <UilVideo className="h-12 w-12 text-white" />}
                  {currentStep === 4 && <UilCog className="h-12 w-12 text-white" />}
                  {currentStep === 5 && <UilQuestionCircle className="h-12 w-12 text-white" />}
                  {currentStep === 6 && <UilCheckCircle className="h-12 w-12 text-white" />}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'CHOOSE PLATFORM'}
                {currentStep === 2 && 'CHANNEL SETUP'}
                {currentStep === 3 && (isLoading ? 'LOADING CONTENT' : selectedPlatform === 'upload' ? 'VOICE STUDIO' : 'SELECT CONTENT')}
                {currentStep === 4 && 'VOICE SETTINGS'}
                {currentStep === 5 && 'VERIFY IDENTITY'}
                {currentStep === 6 && 'REVIEW & COMPLETE'}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'SELECT YOUR CONTENT SOURCE'}
                {currentStep === 2 && 'ENTER CHANNEL INFORMATION'}
                {currentStep === 3 && (isLoading ? 'FETCHING CHANNEL DATA' : selectedPlatform === 'upload' ? 'PROCESS YOUR MEDIA' : 'CHOOSE VIDEOS TO CLONE')}
                {currentStep === 4 && 'CUSTOMIZE VOICE PARAMETERS'}
                {currentStep === 5 && 'CONFIRM YOUR IDENTITY'}
                {currentStep === 6 && (isProcessing ? 'CREATING YOUR AI CLONE' : 'YOUR CLONE IS READY')}
              </p>
              <div className="mt-6">
                <Progress value={getProgressPercentage()} className="h-4 border-2 border-black" />
                <p className="text-center mt-2 font-bold text-black">
                  STEP {currentStep} OF 6
                </p>
              </div>
            </CardHeader>
          </Card>

          {currentStep === 1 && (
            <PlatformSelectionStep
              selectedPlatform={selectedPlatform}
              onSelectPlatform={setSelectedPlatform}
              onNext={() => setCurrentStep(2)}
              onBack={handleBack}
            />
          )}

          {currentStep === 2 && (
            <ChannelSetupStep
              selectedPlatform={selectedPlatform}
              channelName={channelName}
              onChannelNameChange={setChannelName}
              uploadedFile={uploadedFile}
              onFileUpload={handleFileUpload}
              onNext={handleLoadContent}
              onBack={handleBack}
            />
          )}

          {currentStep === 3 && (
            <ContentSelectionStep
              selectedPlatform={selectedPlatform}
              isLoading={isLoading}
              loadProgress={loadProgress}
              selectedContent={selectedContent}
              onContentSelect={setSelectedContent}
              platformData={getCurrentPlatformData()}
              processingProgress={processingProgress}
              voiceCloneReady={voiceCloneReady}
              audioUrl={audioUrl}
              onNext={handleContinue}
              onBack={handleBack}
            />
          )}

          {currentStep === 4 && (
            <VoiceSettingsStep
              voiceSettings={voiceSettings}
              onSettingsChange={setVoiceSettings}
              onNext={handleContinue}
              onBack={handleBack}
              onSkip={handleSkip}
            />
          )}

          {currentStep === 5 && (
            <IdentityVerificationStep
              selectedAction={selectedAction}
              onActionSelect={setSelectedAction}
              isVerified={isVerified}
              onShowVerificationModal={() => setShowVerificationModal(true)}
              onNext={handleContinue}
              onBack={handleBack}
            />
          )}

          {currentStep === 6 && (
            <ReviewCompleteStep
              isProcessing={isProcessing}
              processProgress={processProgress}
              selectedPlatform={selectedPlatform}
              channelData={getCurrentPlatformData().channel}
              selectedContent={selectedContent}
              contentItems={getCurrentPlatformData().videos}
            />
          )}
        </div>

        <div className="mt-8">
          <OnboardingFooter />
        </div>
      </div>
      
      <VerificationModal
        isOpen={showVerificationModal}
        onClose={() => setShowVerificationModal(false)}
        onComplete={handleVerificationComplete}
      />
    </div>
  );
}


================================================
FILE: cloning/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import VerificationModal from '@/components/custom/modals/verification-modal';
import SimpleOnboardingNav from '@/components/custom/simple-onboarding-nav';
import { Star15 } from '@/components/ui/star' ;
import { UilYoutube, UilPlay, UilChannel, UilArrowRight, UilArrowLeft, UilCheckCircle, UilInfoCircle, UilVideo, UilClock, UilEye, UilThumbsUp, UilCopy, UilSpinner, UilUpload, UilCloudDownload, UilCog, UilQuestionCircle, UilUser } from '@tooni/iconscout-unicons-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { useTikTokContent } from '@/hooks/useTikTokContent';
import { useYouTubeContent } from '@/hooks/useYouTubeContent';
import { useTwitchContent } from '@/hooks/useTwitchContent';
import { useQuery } from 'convex/react';
import { api } from '@convex/_generated/api';
import { VideoPreviewProvider } from '@/contexts/VideoPreviewContext';
import { useVoiceCloning } from '@/hooks/useVoiceCloning';

// Import step components
import { PlatformSelectionStep } from '@/components/onboarding/cloning/PlatformSelectionStep';
import { ChannelSetupStep } from '@/components/onboarding/cloning/ChannelSetupStep';
import { ContentSelectionStep } from '@/components/onboarding/cloning/ContentSelectionStep';
import { VoiceSettingsStep } from '@/components/onboarding/cloning/VoiceSettingsStep';
import { TextInputStep } from '@/components/onboarding/cloning/TextInputStep';
import { IdentityVerificationStep } from '@/components/onboarding/cloning/IdentityVerificationStep';
import { ReviewCompleteStep } from '@/components/onboarding/cloning/ReviewCompleteStep';
import ModelSelectionStep from '@/components/onboarding/cloning/ModelSelectionStep';
import { Platform, ModelData } from '@/components/onboarding/cloning/types';

interface ContentItem {
  id: string; 
  title: string;
  duration: string;
  views: string;
  likes: string;
  published: string;
  thumbnail?: string;
}

export default function CloningOnboarding() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [selectedPlatform, setSelectedPlatform] = React.useState<Platform>('');
  const [channelName, setChannelName] = React.useState('');
  const [selectedContent, setSelectedContent] = React.useState<string[]>([]);
  const [isLoading, setIsLoading] = React.useState(false);
  const [loadProgress, setLoadProgress] = React.useState(0);
  const [isProcessing, setIsProcessing] = React.useState(false);
  const [processProgress, setProcessProgress] = React.useState(0);
  const [uploadedFile, setUploadedFile] = React.useState<File | null>(null);
  const [audioUrl, setAudioUrl] = React.useState<string>('');
  const [processingProgress, setProcessingProgress] = React.useState(0);
  const [voiceCloneReady, setVoiceCloneReady] = React.useState(false);
  const [selectedAction, setSelectedAction] = React.useState<string | null>(null);
  const [isVerified, setIsVerified] = React.useState(false);
  const [showVerificationModal, setShowVerificationModal] = React.useState(false);
  const [voiceSettings, setVoiceSettings] = React.useState({
    exaggeration: 1.0,    // Controls expressiveness (0.25-2.0)
    cfgWeight: 1.7,       // CFG/Pace control (0.5-3.0)
    chunkSize: 2048,      // Audio generation chunk size (512-4096)
  });
  const [selectedModel, setSelectedModel] = React.useState<ModelData | null>(null);
  const [testText, setTestText] = React.useState<string>('');
  const [devMode, setDevMode] = React.useState(false);
  
  // Rate limiting state
  const [lastDownloadTime, setLastDownloadTime] = React.useState<number>(0);
  const DOWNLOAD_COOLDOWN = 5000; // 5 seconds between batch downloads

  // TikTok content hook
  const {
    user: tiktokUser,
    userLoading: tiktokUserLoading,
    userError: tiktokUserError,
    fetchUser: fetchTikTokUser,
    videos: tiktokVideos,
    videosLoading: tiktokVideosLoading,
    videosError: tiktokVideosError,
    fetchVideos: fetchTikTokVideos,
    downloadVideos: downloadTikTokVideos,
    downloadProgress: tiktokDownloadProgress,
    downloadStatus: tiktokDownloadStatus,
  } = useTikTokContent();

  // YouTube content hook
  const {
    channel: youtubeChannel,
    channelLoading: youtubeChannelLoading,
    channelError: youtubeChannelError,
    fetchChannel: fetchYouTubeChannel,
    videos: youtubeVideos,
    videosLoading: youtubeVideosLoading,
    videosError: youtubeVideosError,
    fetchVideos: fetchYouTubeVideos,
    downloadVideos: downloadYouTubeVideos,
    downloadProgress: youtubeDownloadProgress,
    downloadStatus: youtubeDownloadStatus,
  } = useYouTubeContent();

  // Twitch content hook
  const {
    channel: twitchChannel,
    channelLoading: twitchChannelLoading,
    channelError: twitchChannelError,
    channelDataComplete: twitchChannelDataComplete,
    fetchChannel: fetchTwitchChannel,
    videos: twitchVideos,
    videosLoading: twitchVideosLoading,
    videosError: twitchVideosError,
    fetchVideos: fetchTwitchVideos,
    downloadVideos: downloadTwitchVideos,
    downloadProgress: twitchDownloadProgress,
    downloadStatus: twitchDownloadStatus,
  } = useTwitchContent();

  const cleanupTikTokData = React.useCallback(async () => {
    console.log('[Cleanup] TikTok data cleanup called');
    // TODO: Implement actual cleanup
  }, []);
  const cleanupYouTubeData = React.useCallback(async () => {
    console.log('[Cleanup] YouTube data cleanup called');
    // TODO: Implement actual cleanup
  }, []);
  const cleanupTwitchData = React.useCallback(async () => {
    console.log('[Cleanup] Twitch data cleanup called');
    // TODO: Implement actual cleanup
  }, []);

      // Selective cleanup - only remove unselected content
      const cleanupUnselectedContent = async () => {
        console.log('[Cleanup] Cleaning up unselected content, keeping:', selectedContent);
        const selectedIds = new Set(selectedContent);
        
        if (selectedPlatform === 'tiktok' && tiktokVideos.length > 0) {
          // TODO: Implement selective cleanup for TikTok
          const unselectedVideos = tiktokVideos.filter(v => !selectedIds.has(v.videoId));
          console.log('[Cleanup] Would remove TikTok videos:', unselectedVideos.map(v => v.videoId));
        } else if (selectedPlatform === 'youtube' && youtubeVideos.length > 0) {
          // TODO: Implement selective cleanup for YouTube
          const unselectedVideos = youtubeVideos.filter(v => !selectedIds.has(v.videoId));
          console.log('[Cleanup] Would remove YouTube videos:', unselectedVideos.map(v => v.videoId));
        } else if (selectedPlatform === 'twitch' && twitchVideos.length > 0) {
          // TODO: Implement selective cleanup for Twitch
          const unselectedVideos = twitchVideos.filter(v => !selectedIds.has(v.videoId));
          console.log('[Cleanup] Would remove Twitch videos:', unselectedVideos.map(v => v.videoId));
        }
      };
  // Complete cleanup - remove all content
  const cleanupAllContent = async () => {
    console.log('[Cleanup] Complete cleanup of all content');
    if (selectedPlatform === 'tiktok') {
      await cleanupTikTokData();
    } else if (selectedPlatform === 'youtube') {
      await cleanupYouTubeData();
    } else if (selectedPlatform === 'twitch') {
      await cleanupTwitchData();
    }
    setSelectedContent([]);
  };

  // TikTok user data complete fallback
  const tiktokUserDataComplete = !!tiktokUser;

  // Voice cloning hook
  const {
    createClone,
    jobId,
    jobStatus,
    voiceId,
    sampleAudioUrl,
    isProcessing: voiceCloneProcessing,
    error: voiceCloneError,
    testVoice,
    reset: resetVoiceClone,
  } = useVoiceCloning();

  // Track if we've already attempted to fetch videos for this channel
  const fetchedChannelsRef = React.useRef<Set<string>>(new Set());

  // Dev mode auto-fill effect
  React.useEffect(() => {
    if (devMode) {
      // Auto-fill TikTok username
      setSelectedPlatform('tiktok');
      setChannelName('dylan.page');
      
      // Auto-select first 5 videos when available
      if (tiktokVideos.length > 0) {
        const firstFiveVideos = tiktokVideos.slice(0, 5).map(v => v.videoId);
        setSelectedContent(firstFiveVideos);
      }
      
      // Set test text
      setTestText('Hello, this is a test of the voice clone. How does it sound?');
    }
  }, [devMode, tiktokVideos]);

  // Auto-load content when dev mode is enabled and we have the channel name
  // Note: Removed auto-trigger to allow manual control
  React.useEffect(() => {
    // Dev mode now only pre-fills, doesn't auto-trigger
  }, [devMode, selectedPlatform, channelName, isLoading]);

  // Update process progress based on voice cloning job status
  React.useEffect(() => {
    if (jobStatus) {
      switch (jobStatus.status) {
        case 'pending':
          setProcessProgress(10);
          break;
        case 'processing':
          setProcessProgress(50);
          break;
        case 'completed':
          setProcessProgress(100);
          setIsProcessing(false);
          if (jobStatus.result_url) {
            setAudioUrl(jobStatus.result_url);
          }
          break;
        case 'failed':
          setProcessProgress(0);
          setIsProcessing(false);
          console.error('[Cloning] Voice clone failed:', jobStatus.error);
          break;
      }
    }
  }, [jobStatus]);

  // Auto-fetch YouTube videos when channel is loaded
  React.useEffect(() => {
    if (selectedPlatform === 'youtube' && youtubeChannel && !youtubeVideosLoading) {
      const channelId = youtubeChannel.channelId;
      
      // Only fetch if we haven't already fetched for this channel
      if (!fetchedChannelsRef.current.has(channelId) && youtubeVideos.length === 0) {
        console.log('Auto-fetching YouTube videos for channel:', channelId);
        fetchedChannelsRef.current.add(channelId);
        fetchYouTubeVideos(channelId, 6);
      }
    }
  }, [youtubeChannel, selectedPlatform, youtubeVideosLoading, youtubeVideos.length, fetchYouTubeVideos]);
  
  // Auto-fetch Twitch videos when channel is loaded
  React.useEffect(() => {
    if (selectedPlatform === 'twitch' && twitchChannel && !twitchVideosLoading) {
      const username = twitchChannel.username;
      
      // Only fetch if we haven't already fetched for this channel
      if (!fetchedChannelsRef.current.has(username) && twitchVideos.length === 0) {
        console.log('Auto-fetching Twitch videos for channel:', username);
        fetchedChannelsRef.current.add(username);
        fetchTwitchVideos(username, 6, 'archive');
      }
    }
  }, [twitchChannel, selectedPlatform, twitchVideosLoading, twitchVideos.length, fetchTwitchVideos]);
  
  // Debug YouTube videos
  React.useEffect(() => {
    console.log('[YouTube Debug] Videos state:', {
      videosLength: youtubeVideos.length,
      videos: youtubeVideos,
      loading: youtubeVideosLoading,
      error: youtubeVideosError
    });
  }, [youtubeVideos, youtubeVideosLoading, youtubeVideosError]);

  // Debug query to check database state
  const debugYouTubeData = useQuery(api.queries.debugYouTube.getAllYouTubeVideos);
  // const debugTwitchData = useQuery(api.queries.twitchContent.getAllTwitchVideos); // TODO: Add twitchContent queries
  React.useEffect(() => {
    if (debugYouTubeData) {
      console.log('[Debug] YouTube Database state:', debugYouTubeData);
    }
    // if (debugTwitchData) {
    //   console.log('[Debug] Twitch Database state:', debugTwitchData);
    // }
  }, [debugYouTubeData]);
  
  // Debug TikTok videos
  React.useEffect(() => {
    console.log('[TikTok Debug] Videos state:', {
      videosLength: tiktokVideos.length,
      videos: tiktokVideos,
      loading: tiktokVideosLoading,
      error: tiktokVideosError,
      user: tiktokUser
    });
  }, [tiktokVideos, tiktokVideosLoading, tiktokVideosError, tiktokUser]);
  
  // Debug TikTok user loading state
  React.useEffect(() => {
    console.log('[TikTok Debug] User profile state:', {
      hasUser: !!tiktokUser,
      userLoading: tiktokUserLoading,
      userDataComplete: tiktokUserDataComplete,
      shouldShowSkeleton: tiktokUserLoading || (!tiktokUser || !tiktokUserDataComplete),
      avatar: tiktokUser?.avatar,
      followerCount: tiktokUser?.followerCount
    });
  }, [tiktokUser, tiktokUserLoading, tiktokUserDataComplete]);
  
  // Debug Twitch videos
  React.useEffect(() => {
    console.log('[Twitch Debug] Videos state:', {
      videosLength: twitchVideos.length,
      videos: twitchVideos,
      loading: twitchVideosLoading,
      error: twitchVideosError,
      channel: twitchChannel
    });
  }, [twitchVideos, twitchVideosLoading, twitchVideosError, twitchChannel]);
  
  // Debug Twitch channel loading state
  React.useEffect(() => {
    console.log('[Twitch Debug] Channel state:', {
      hasChannel: !!twitchChannel,
      channelLoading: twitchChannelLoading,
      channelDataComplete: twitchChannelDataComplete,
      shouldShowSkeleton: twitchChannelLoading || (!twitchChannel || !twitchChannelDataComplete),
      profileImage: twitchChannel?.profileImage,
      followerCount: twitchChannel?.followerCount,
      isLive: twitchChannel?.isLive
    });
  }, [twitchChannel, twitchChannelLoading, twitchChannelDataComplete]);
  
  // Cleanup when platform changes
  React.useEffect(() => {
    const cleanup = async () => {
      if (selectedPlatform !== 'tiktok' && tiktokUser) {
        console.log('[Cloning] Platform changed from TikTok, cleaning up data');
        try {
          await cleanupTikTokData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up TikTok data:', error);
        }
      }
      if (selectedPlatform !== 'youtube' && youtubeChannel) {
        console.log('[Cloning] Platform changed from YouTube, cleaning up data');
        try {
          await cleanupYouTubeData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up YouTube data:', error);
        }
      }
      if (selectedPlatform !== 'twitch' && twitchChannel) {
        console.log('[Cloning] Platform changed from Twitch, cleaning up data');
        try {
          await cleanupTwitchData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up Twitch data:', error);
        }
      }
    };
    
    cleanup();
  }, [selectedPlatform, tiktokUser, youtubeChannel, twitchChannel, cleanupTikTokData, cleanupYouTubeData, cleanupTwitchData]);
  
  // Cleanup when channel name is cleared
  React.useEffect(() => {
    if (channelName === '' && (tiktokUser || tiktokVideos.length > 0) && selectedPlatform === 'tiktok') {
      console.log('[Cloning] Channel name cleared, cleaning up TikTok data');
      cleanupTikTokData();
    }
    if (channelName === '' && (youtubeChannel || youtubeVideos.length > 0) && selectedPlatform === 'youtube') {
      console.log('[Cloning] Channel name cleared, cleaning up YouTube data');
      cleanupYouTubeData();
    }
    if (channelName === '' && (twitchChannel || twitchVideos.length > 0) && selectedPlatform === 'twitch') {
      console.log('[Cloning] Channel name cleared, cleaning up Twitch data');
      cleanupTwitchData();
    }
  }, [channelName, tiktokUser, tiktokVideos.length, youtubeChannel, youtubeVideos.length, twitchChannel, twitchVideos.length, selectedPlatform, cleanupTikTokData, cleanupYouTubeData, cleanupTwitchData]);
  
  React.useEffect(() => {
    if (isLoading && currentStep === 3) {
      if (selectedPlatform === 'tiktok' && !tiktokUserLoading && !tiktokVideosLoading) {
        if (tiktokVideos.length > 0 || tiktokVideosError) {
          console.log('[Cloning] TikTok loading complete, videos:', tiktokVideos.length);
          setIsLoading(false);
        }
      }
      else if (selectedPlatform === 'youtube' && !youtubeChannelLoading && !youtubeVideosLoading) {
        if (youtubeVideos.length > 0 || youtubeVideosError) {
          console.log('[Cloning] YouTube loading complete, videos:', youtubeVideos.length);
          setIsLoading(false);
        }
      }
      else if (selectedPlatform === 'twitch' && !twitchChannelLoading && !twitchVideosLoading) {
        if (twitchVideos.length > 0 || twitchVideosError) {
          console.log('[Cloning] Twitch loading complete, videos:', twitchVideos.length);
          setIsLoading(false);
        }
      }
    }
  }, [isLoading, currentStep, selectedPlatform, tiktokUserLoading, tiktokVideosLoading, 
      tiktokVideos.length, tiktokVideosError, youtubeChannelLoading, youtubeVideosLoading, 
      youtubeVideos.length, youtubeVideosError, twitchChannelLoading, twitchVideosLoading,
      twitchVideos.length, twitchVideosError, ]);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setUploadedFile(file);
      setAudioUrl(URL.createObjectURL(file));
    }
  };

  const handleLoadContent = async () => {
    // Rate limiting check
    const now = Date.now();
    if (now - lastDownloadTime < DOWNLOAD_COOLDOWN) {
      const waitTime = Math.ceil((DOWNLOAD_COOLDOWN - (now - lastDownloadTime)) / 1000);
      console.log(`[RateLimit] Please wait ${waitTime} seconds before loading more content`);
      // Could show a toast/notification here
      return;
    }
    
    setLastDownloadTime(now);
    setIsLoading(true);
    setCurrentStep(3);
    
    if (selectedPlatform === 'upload') {

      setProcessingProgress(0);
      for (let i = 0; i <= 100; i += 10) {
        setProcessingProgress(i);
        await new Promise(resolve => setTimeout(resolve, 200));
      }
      setVoiceCloneReady(true);
      setIsLoading(false);
    } else if (selectedPlatform === 'tiktok') {

      try {
        if (tiktokUser || tiktokVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing TikTok data before new search');
          await cleanupTikTokData();
        }
        
        setLoadProgress(10);

        console.log('Fetching TikTok user:', channelName);
        await fetchTikTokUser(channelName);
        setLoadProgress(50);

        setLoadProgress(100);
        setIsLoading(false);
      } catch (error) {
        console.error('Error loading TikTok content:', error);
        setIsLoading(false);
        // Allow user to continue even if content loading fails
        setLoadProgress(100);
      }
    } else if (selectedPlatform === 'youtube') {

      try {

        if (youtubeChannel || youtubeVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing YouTube data before new search');
          await cleanupYouTubeData();
        }
        
        setLoadProgress(10);

        let channelUrl = channelName;
        if (!channelName.includes('youtube.com') && !channelName.includes('youtu.be')) {
          if (channelName.startsWith('@')) {
            channelUrl = `https://youtube.com/${channelName}`;
          } else if (channelName.startsWith('UC') && channelName.length === 24) {
            channelUrl = `https://youtube.com/channel/${channelName}`;
          } else {
            channelUrl = `https://youtube.com/@${channelName}`;
          }
        }
        console.log('Fetching YouTube channel with URL:', channelUrl);
        await fetchYouTubeChannel(channelUrl);
        setLoadProgress(50);

        setLoadProgress(100);
        setIsLoading(false);
      } catch (error) {
        console.error('Error loading YouTube content:', error);
        setIsLoading(false);
        // Allow user to continue even if content loading fails
        setLoadProgress(100);
      }
    } else if (selectedPlatform === 'twitch') {

      try {

        if (twitchChannel || twitchVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing Twitch data before new search');
          await cleanupTwitchData();
        }
        
        setLoadProgress(10);

        let channelUrl = channelName;
        if (!channelName.includes('twitch.tv')) {
          channelUrl = `https://twitch.tv/${channelName}`;
        }
        console.log('Fetching Twitch channel:', channelUrl);
        await fetchTwitchChannel(channelUrl);
        setLoadProgress(50);
        setIsLoading(false);
        setLoadProgress(100);
        setIsLoading(false);
      } catch (error) {
        console.error('Error loading Twitch content:', error);
        setIsLoading(false);
        // Allow user to continue even if content loading fails
        setLoadProgress(100);
      }
    }
  };


  const canProceedFromStep1 = () => selectedPlatform !== '';
  const canProceedFromStep2 = () => {
    if (selectedPlatform === 'upload') {
      return uploadedFile !== null;
    }
    return channelName.trim() !== '';
  };
  const canProceedFromStep3 = () => {
    if (selectedPlatform === 'upload') {
      return voiceCloneReady;
    }
    return selectedContent.length > 0;
  };

  const toggleContentSelection = (contentId: string) => {
    setSelectedContent(prev => 
      prev.includes(contentId) 
        ? prev.filter(id => id !== contentId)
        : [...prev, contentId]
    );
  };

  const handleExportAudio = () => {
    if (!audioUrl && !sampleAudioUrl) {
      console.error('[Cloning] No audio URL available for export');
      return;
    }
    
    const exportUrl = sampleAudioUrl || audioUrl;
    const link = document.createElement('a');
    link.href = exportUrl;
    link.download = `voice-clone-${voiceId || Date.now()}.mp3`;
    link.click();
  };


  const handleStepChange = async (step: number) => {
    // Going forward
    if (step > currentStep) {
      // Leaving content selection (step 3) to voice settings (step 4)
      if (currentStep === 3 && step === 4) {
        console.log('[Navigation] Moving forward from content selection, cleaning up unselected');
        await cleanupUnselectedContent();
      }
    } 
    // Going backward
    else if (step < currentStep) {
      // Going back to content selection from later steps
      if (step === 3 && currentStep > 3) {
        console.log('[Navigation] Going back to content selection');
        // Videos should still be available if they were selected
        // If not available, they'll be re-downloaded when needed
      }
      // Going back before content selection (clearing everything)
      else if (step <= 2 && currentStep >= 3) {
        console.log('[Navigation] Going back before content selection, full cleanup');
        await cleanupAllContent();
        setChannelName('');
      }
    }
    
    setCurrentStep(step);
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerificationModal(false);
    setIsVerified(true);
    setIsProcessing(true);
    setCurrentStep(8);
    
    try {
      // Prepare audio file based on platform
      let audioFile: File | null = null;
      let voiceName = '';

      if (selectedPlatform === 'upload' && uploadedFile) {
        // Direct upload - use the uploaded file
        audioFile = uploadedFile;
        voiceName = uploadedFile.name.replace(/\.[^/.]+$/, '') + ' AI';
      } else if (selectedPlatform && selectedContent.length > 0) {
        // Platform content - download audio from first selected video
        const firstVideoId = selectedContent[0];
        
        try {
          let audioBlob: Blob | null = null;
          
          if (selectedPlatform === 'tiktok') {
            // Use TikTok audio extraction endpoint
            const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/public/tiktok/audio/${firstVideoId}?format=mp3`, {
              headers: {
                'X-API-Key': process.env.NEXT_PUBLIC_API_KEY || 'your-secret-key-here',
              },
            });
            
            if (response.ok) {
              audioBlob = await response.blob();
            }
          } else if (selectedPlatform === 'youtube') {
            // For YouTube, we'll need to use the video file directly
            // The voice cloning API will extract audio from the video
            const videoUrl = youtubeVideos.find(v => v.id === firstVideoId)?.url;
            if (videoUrl) {
              // Download video and submit it directly
              const response = await fetch(videoUrl);
              if (response.ok) {
                audioBlob = await response.blob();
              }
            }
          } else if (selectedPlatform === 'twitch') {
            // Similar to YouTube, use video directly
            const videoUrl = twitchVideos.find(v => v.id === firstVideoId)?.url;
            if (videoUrl) {
              const response = await fetch(videoUrl);
              if (response.ok) {
                audioBlob = await response.blob();
              }
            }
          }

          if (audioBlob) {
            audioFile = new File([audioBlob], `${channelName}-voice.mp3`, { 
              type: selectedPlatform === 'tiktok' ? 'audio/mp3' : 'video/mp4' 
            });
            voiceName = `${channelName} AI`;
          } else {
            throw new Error('Failed to download audio from platform content');
          }
        } catch (error) {
          console.error('[Cloning] Error downloading audio:', error);
          throw error;
        }
      }

      if (audioFile && testText) {
        // Create voice clone
        await createClone(
          audioFile,
          voiceName,
          testText,
          voiceSettings
        );
        
        // If we get here without error, voice clone was created successfully
        // Safe to cleanup all content now
        console.log('[Verification] Voice clone created successfully, cleaning up all content');
        await cleanupAllContent();
      } else {
        throw new Error('Missing audio file or test text');
      }
    } catch (error) {
      console.error('[Cloning] Error creating voice clone:', error);
      setIsProcessing(false);
      // Error will be shown in ReviewCompleteStep via voiceCloneError prop
    }
  };

  const handleProcessContent = async () => {
    setIsProcessing(true);
    setCurrentStep(5);
    
    if (selectedPlatform === 'tiktok' && tiktokUser) {
      await downloadTikTokVideos(tiktokUser.username, selectedContent);
    } else if (selectedPlatform === 'youtube' && youtubeChannel) {
      await downloadYouTubeVideos(youtubeChannel.channelId, selectedContent);
    } else if (selectedPlatform === 'twitch' && twitchChannel) {
      await downloadTwitchVideos(twitchChannel.username, selectedContent);
    }
    
    setIsProcessing(false);
  };

  const handleActionSelect = (action: string) => {
    setSelectedAction(action);
  };

  return (
    <VideoPreviewProvider>
      <div 
        className="min-h-screen bg-pink-500 relative pb-8" 
        style={{ 
          fontFamily: 'Noyh-Bold, sans-serif',
          backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
          backgroundSize: '60px 60px'
        }}
      >
        {process.env.NODE_ENV === 'development' && (
          <div className="fixed top-4 right-4 z-50">
            <Button
              onClick={() => setDevMode(!devMode)}
              className={`h-10 px-4 text-sm font-black uppercase ${
                devMode
                  ? 'bg-green-500 hover:bg-green-600 text-white'
                  : 'bg-gray-200 hover:bg-gray-300 text-black'
              } border-2 border-black`}
            >
              DEV MODE {devMode ? 'ON' : 'OFF'}
            </Button>
          </div>
        )}

        <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
          <div className="w-full max-w-4xl space-y-8">
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-pink-600 border-2 border-black flex items-center justify-center">
                <UilCopy className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-pink-500 border-2 border-black flex items-center justify-center">
                <UilVideo className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-pink-600 hover:bg-pink-700 border-4 border-black p-0">
                  {currentStep === 1 && <UilChannel className="h-12 w-12 text-white" />}
                  {currentStep === 2 && <UilYoutube className="h-12 w-12 text-white" />}
                  {currentStep === 3 && <UilVideo className="h-12 w-12 text-white" />}
                  {currentStep === 4 && <UilCog className="h-12 w-12 text-white" />}
                  {currentStep === 5 && <UilQuestionCircle className="h-12 w-12 text-white" />}
                  {currentStep === 6 && <UilCheckCircle className="h-12 w-12 text-white" />}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'CHOOSE PLATFORM'}
                {currentStep === 2 && 'CHANNEL SETUP'}
                {currentStep === 3 && (isLoading ? 'LOADING CONTENT' : selectedPlatform === 'upload' ? 'VOICE STUDIO' : 'SELECT CONTENT')}
                {currentStep === 4 && 'SELECT MODEL'}
                {currentStep === 5 && 'VOICE SETTINGS'}
                {currentStep === 6 && 'TEST VOICE'}
                {currentStep === 7 && 'VERIFY IDENTITY'}
                {currentStep === 8 && 'REVIEW & COMPLETE'}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'SELECT YOUR CONTENT SOURCE'}
                {currentStep === 2 && 'ENTER CHANNEL INFORMATION'}
                {currentStep === 3 && (isLoading ? 'FETCHING CHANNEL DATA' : selectedPlatform === 'upload' ? 'PROCESS YOUR MEDIA' : 'CHOOSE VIDEOS TO CLONE')}
                {currentStep === 4 && 'CHOOSE YOUR AI VOICE MODEL'}
                {currentStep === 5 && 'CUSTOMIZE VOICE PARAMETERS'}
                {currentStep === 6 && 'TEST YOUR VOICE CLONE'}
                {currentStep === 7 && 'CONFIRM YOUR IDENTITY'}
                {currentStep === 8 && (isProcessing ? 'CREATING YOUR AI CLONE' : 'YOUR CLONE IS READY')}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-pink-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-pink-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-pink-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {currentStep === 1 && (
            <PlatformSelectionStep
              selectedPlatform={selectedPlatform}
              setSelectedPlatform={setSelectedPlatform}
              setCurrentStep={setCurrentStep}
            />
          )}

          {currentStep === 2 && (
            <ChannelSetupStep
              selectedPlatform={selectedPlatform}
              channelName={channelName}
              setChannelName={setChannelName}
              uploadedFile={uploadedFile}
              setUploadedFile={setUploadedFile}
              setAudioUrl={setAudioUrl}
              setCurrentStep={setCurrentStep}
              handleLoadContent={handleLoadContent}
              handleStepChange={handleStepChange}
              fetchedChannelsRef={fetchedChannelsRef}
            />
          )}

          {currentStep === 3 && (
            <ContentSelectionStep
              selectedPlatform={selectedPlatform}
              channelName={channelName}
              uploadedFile={uploadedFile}
              audioUrl={audioUrl}
              isLoading={isLoading}
              loadProgress={loadProgress}
              processingProgress={processingProgress}
              voiceCloneReady={voiceCloneReady}
              selectedContent={selectedContent}
              toggleContentSelection={toggleContentSelection}
              setSelectedContent={setSelectedContent}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
              tiktokUser={tiktokUser}
              tiktokVideos={tiktokVideos}
              youtubeChannel={youtubeChannel}
              youtubeVideos={youtubeVideos}
              twitchChannel={twitchChannel}
              twitchVideos={twitchVideos}
              twitchChannelDataComplete={twitchChannelDataComplete}
            />
          )}

          {currentStep === 4 && (
            <ModelSelectionStep
              selectedModel={selectedModel}
              setSelectedModel={setSelectedModel}
              currentStep={currentStep}
              setCurrentStep={setCurrentStep}
            />
          )}

          {currentStep === 5 && (
            <VoiceSettingsStep
              voiceSettings={voiceSettings}
              setVoiceSettings={setVoiceSettings}
              handleStepChange={handleStepChange}
              setCurrentStep={setCurrentStep}
              selectedContent={selectedContent}
              selectedPlatform={selectedPlatform}
              selectedModel={selectedModel}
              tiktokVideos={tiktokVideos}
              youtubeVideos={youtubeVideos}
              twitchVideos={twitchVideos}
            />
          )}

          {currentStep === 6 && (
            <TextInputStep
              testText={testText}
              setTestText={setTestText}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}

          {currentStep === 7 && (
            <IdentityVerificationStep
              setShowVerificationModal={setShowVerificationModal}
              handleStepChange={handleStepChange}
            />
          )}

          {currentStep === 8 && (
            <ReviewCompleteStep
              isProcessing={isProcessing}
              processProgress={processProgress}
              selectedPlatform={selectedPlatform}
              uploadedFile={uploadedFile}
              channelName={channelName}
              selectedContent={selectedContent}
              voiceSettings={voiceSettings}
              audioUrl={audioUrl}
              handleExportAudio={handleExportAudio}
              handleStepChange={handleStepChange}
              setSelectedPlatform={setSelectedPlatform}
              setChannelName={setChannelName}
              setSelectedContent={setSelectedContent}
              setUploadedFile={setUploadedFile}
              setAudioUrl={setAudioUrl}
              setVoiceCloneReady={setVoiceCloneReady}
              setIsVerified={setIsVerified}
              cleanupTikTokData={cleanupTikTokData}
              cleanupYouTubeData={cleanupYouTubeData}
              cleanupTwitchData={cleanupTwitchData}
              voiceId={voiceId}
              voiceCloneError={voiceCloneError}
              testText={testText}
              testVoice={testVoice}
              resetVoiceClone={resetVoiceClone}
            />
          )}
        </div>

        <div className="mt-8">
          <OnboardingFooter />
        </div>
      </div>
      
      <VerificationModal
        isOpen={showVerificationModal}
        onClose={() => setShowVerificationModal(false)}
        onComplete={handleVerificationComplete}
      />
    </div>
    </VideoPreviewProvider>
  );
}


================================================
FILE: cloning/page.tsx.backup
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { Star15 } from '@/components/ui/star';
import { UilYoutube, UilPlay, UilChannel, UilArrowRight, UilArrowLeft, UilCheckCircle, UilInfoCircle, UilVideo, UilClock, UilEye, UilThumbsUp, UilCopy, UilSpinner, UilUpload, UilCloudDownload, UilCog, UilQuestionCircle, UilUser } from '@tooni/iconscout-unicons-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { useTikTokContent } from '@/hooks/useTikTokContent';
import { useYouTubeContent } from '@/hooks/useYouTubeContent';
import { useTwitchContent } from '@/hooks/useTwitchContent';
import { useQuery } from 'convex/react';
import { api } from '@convex/_generated/api';

// Import step components
import { PlatformSelectionStep } from '@/components/onboarding/cloning/PlatformSelectionStep';
import { ChannelSetupStep } from '@/components/onboarding/cloning/ChannelSetupStep';
import { ContentSelectionStep } from '@/components/onboarding/cloning/ContentSelectionStep';
import { VoiceSettingsStep } from '@/components/onboarding/cloning/VoiceSettingsStep';
import { IdentityVerificationStep } from '@/components/onboarding/cloning/IdentityVerificationStep';
import { ReviewCompleteStep } from '@/components/onboarding/cloning/ReviewCompleteStep';
import { Platform } from '@/components/onboarding/cloning/types';

interface ContentItem {
  id: string; 
  title: string;
  duration: string;
  views: string;
  likes: string;
  published: string;
  thumbnail?: string;
}

export default function CloningOnboarding() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [selectedPlatform, setSelectedPlatform] = React.useState('');
  const [channelName, setChannelName] = React.useState('');
  const [selectedContent, setSelectedContent] = React.useState<string[]>([]);
  const [isLoading, setIsLoading] = React.useState(false);
  const [loadProgress, setLoadProgress] = React.useState(0);
  const [isProcessing, setIsProcessing] = React.useState(false);
  const [processProgress, setProcessProgress] = React.useState(0);
  const [uploadedFile, setUploadedFile] = React.useState<File | null>(null);
  const [audioUrl, setAudioUrl] = React.useState<string>('');
  const [processingProgress, setProcessingProgress] = React.useState(0);
  const [voiceCloneReady, setVoiceCloneReady] = React.useState(false);
  const [selectedAction, setSelectedAction] = React.useState<string | null>(null);
  const [isVerified, setIsVerified] = React.useState(false);
  const [showVerificationModal, setShowVerificationModal] = React.useState(false);
  const [voiceSettings, setVoiceSettings] = React.useState({
    exaggeration: 0.5,    // Controls expressiveness (0.25-2.0)
    cfgWeight: 0.5,       // CFG/Pace control (0.2-1.0)
    temperature: 0.8,     // Controls randomness (0.05-5.0)
    seed: 0,              // Random seed (0 for random)
    refWav: null as File | null  // Optional reference audio
  });

  // TikTok content hook
  const {
    user: tiktokUser,
    userLoading: tiktokUserLoading,
    userError: tiktokUserError,
    fetchUser: fetchTikTokUser,
    videos: tiktokVideos,
    videosLoading: tiktokVideosLoading,
    videosError: tiktokVideosError,
    fetchVideos: fetchTikTokVideos,
    downloadVideos: downloadTikTokVideos,
    downloadProgress: tiktokDownloadProgress,
    downloadStatus: tiktokDownloadStatus,
  } = useTikTokContent();

  // YouTube content hook
  const {
    channel: youtubeChannel,
    channelLoading: youtubeChannelLoading,
    channelError: youtubeChannelError,
    fetchChannel: fetchYouTubeChannel,
    videos: youtubeVideos,
    videosLoading: youtubeVideosLoading,
    videosError: youtubeVideosError,
    fetchVideos: fetchYouTubeVideos,
    downloadVideos: downloadYouTubeVideos,
    downloadProgress: youtubeDownloadProgress,
    downloadStatus: youtubeDownloadStatus,
  } = useYouTubeContent();

  // Twitch content hook
  const {
    channel: twitchChannel,
    channelLoading: twitchChannelLoading,
    channelError: twitchChannelError,
    channelDataComplete: twitchChannelDataComplete,
    fetchChannel: fetchTwitchChannel,
    videos: twitchVideos,
    videosLoading: twitchVideosLoading,
    videosError: twitchVideosError,
    fetchVideos: fetchTwitchVideos,
    downloadVideos: downloadTwitchVideos,
    downloadProgress: twitchDownloadProgress,
    downloadStatus: twitchDownloadStatus,
  } = useTwitchContent();

  const cleanupTikTokData = async () => {
    console.log('[Cleanup] TikTok data cleanup called');
  };
  const cleanupYouTubeData = async () => {
    console.log('[Cleanup] YouTube data cleanup called');
  };
  const cleanupTwitchData = async () => {
    console.log('[Cleanup] Twitch data cleanup called');
  };

  // TikTok user data complete fallback
  const tiktokUserDataComplete = !!tiktokUser;

  // Track if we've already attempted to fetch videos for this channel
  const fetchedChannelsRef = React.useRef<Set<string>>(new Set());

  // Auto-fetch YouTube videos when channel is loaded
  React.useEffect(() => {
    if (selectedPlatform === 'youtube' && youtubeChannel && !youtubeVideosLoading) {
      const channelId = youtubeChannel.channelId;
      
      // Only fetch if we haven't already fetched for this channel
      if (!fetchedChannelsRef.current.has(channelId) && youtubeVideos.length === 0) {
        console.log('Auto-fetching YouTube videos for channel:', channelId);
        fetchedChannelsRef.current.add(channelId);
        fetchYouTubeVideos(channelId, 6);
      }
    }
  }, [youtubeChannel, selectedPlatform, youtubeVideosLoading, youtubeVideos.length, fetchYouTubeVideos]);
  
  // Auto-fetch Twitch videos when channel is loaded
  React.useEffect(() => {
    if (selectedPlatform === 'twitch' && twitchChannel && !twitchVideosLoading) {
      const username = twitchChannel.username;
      
      // Only fetch if we haven't already fetched for this channel
      if (!fetchedChannelsRef.current.has(username) && twitchVideos.length === 0) {
        console.log('Auto-fetching Twitch videos for channel:', username);
        fetchedChannelsRef.current.add(username);
        fetchTwitchVideos(username, 6, 'archive');
      }
    }
  }, [twitchChannel, selectedPlatform, twitchVideosLoading, twitchVideos.length, fetchTwitchVideos]);
  
  // Debug YouTube videos
  React.useEffect(() => {
    console.log('[YouTube Debug] Videos state:', {
      videosLength: youtubeVideos.length,
      videos: youtubeVideos,
      loading: youtubeVideosLoading,
      error: youtubeVideosError
    });
  }, [youtubeVideos, youtubeVideosLoading, youtubeVideosError]);

  // Debug query to check database state
  const debugYouTubeData = useQuery(api.queries.debugYouTube.getAllYouTubeVideos);
  // const debugTwitchData = useQuery(api.queries.twitchContent.getAllTwitchVideos); // TODO: Add twitchContent queries
  React.useEffect(() => {
    if (debugYouTubeData) {
      console.log('[Debug] YouTube Database state:', debugYouTubeData);
    }
    // if (debugTwitchData) {
    //   console.log('[Debug] Twitch Database state:', debugTwitchData);
    // }
  }, [debugYouTubeData]);
  
  // Debug TikTok videos
  React.useEffect(() => {
    console.log('[TikTok Debug] Videos state:', {
      videosLength: tiktokVideos.length,
      videos: tiktokVideos,
      loading: tiktokVideosLoading,
      error: tiktokVideosError,
      user: tiktokUser
    });
  }, [tiktokVideos, tiktokVideosLoading, tiktokVideosError, tiktokUser]);
  
  // Debug TikTok user loading state
  React.useEffect(() => {
    console.log('[TikTok Debug] User profile state:', {
      hasUser: !!tiktokUser,
      userLoading: tiktokUserLoading,
      userDataComplete: tiktokUserDataComplete,
      shouldShowSkeleton: tiktokUserLoading || (!tiktokUser || !tiktokUserDataComplete),
      avatar: tiktokUser?.avatar,
      followerCount: tiktokUser?.followerCount
    });
  }, [tiktokUser, tiktokUserLoading, tiktokUserDataComplete]);
  
  // Debug Twitch videos
  React.useEffect(() => {
    console.log('[Twitch Debug] Videos state:', {
      videosLength: twitchVideos.length,
      videos: twitchVideos,
      loading: twitchVideosLoading,
      error: twitchVideosError,
      channel: twitchChannel
    });
  }, [twitchVideos, twitchVideosLoading, twitchVideosError, twitchChannel]);
  
  // Debug Twitch channel loading state
  React.useEffect(() => {
    console.log('[Twitch Debug] Channel state:', {
      hasChannel: !!twitchChannel,
      channelLoading: twitchChannelLoading,
      channelDataComplete: twitchChannelDataComplete,
      shouldShowSkeleton: twitchChannelLoading || (!twitchChannel || !twitchChannelDataComplete),
      profileImage: twitchChannel?.profileImage,
      followerCount: twitchChannel?.followerCount,
      isLive: twitchChannel?.isLive
    });
  }, [twitchChannel, twitchChannelLoading, twitchChannelDataComplete]);
  
  // Cleanup when platform changes
  React.useEffect(() => {
    const cleanup = async () => {
      if (selectedPlatform !== 'tiktok' && tiktokUser) {
        console.log('[Cloning] Platform changed from TikTok, cleaning up data');
        try {
          await cleanupTikTokData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up TikTok data:', error);
        }
      }
      if (selectedPlatform !== 'youtube' && youtubeChannel) {
        console.log('[Cloning] Platform changed from YouTube, cleaning up data');
        try {
          await cleanupYouTubeData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up YouTube data:', error);
        }
      }
      if (selectedPlatform !== 'twitch' && twitchChannel) {
        console.log('[Cloning] Platform changed from Twitch, cleaning up data');
        try {
          await cleanupTwitchData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up Twitch data:', error);
        }
      }
    };
    
    cleanup();
  }, [selectedPlatform, tiktokUser, youtubeChannel, twitchChannel, cleanupTikTokData, cleanupYouTubeData, cleanupTwitchData]);
  
  // Cleanup when channel name is cleared
  React.useEffect(() => {
    if (channelName === '' && (tiktokUser || tiktokVideos.length > 0) && selectedPlatform === 'tiktok') {
      console.log('[Cloning] Channel name cleared, cleaning up TikTok data');
      cleanupTikTokData();
    }
    if (channelName === '' && (youtubeChannel || youtubeVideos.length > 0) && selectedPlatform === 'youtube') {
      console.log('[Cloning] Channel name cleared, cleaning up YouTube data');
      cleanupYouTubeData();
    }
    if (channelName === '' && (twitchChannel || twitchVideos.length > 0) && selectedPlatform === 'twitch') {
      console.log('[Cloning] Channel name cleared, cleaning up Twitch data');
      cleanupTwitchData();
    }
  }, [channelName, tiktokUser, tiktokVideos.length, youtubeChannel, youtubeVideos.length, twitchChannel, twitchVideos.length, selectedPlatform, cleanupTikTokData, cleanupYouTubeData, cleanupTwitchData]);
  
  React.useEffect(() => {
    if (isLoading && currentStep === 3) {
      if (selectedPlatform === 'tiktok' && !tiktokUserLoading && !tiktokVideosLoading) {
        if (tiktokVideos.length > 0 || tiktokVideosError) {
          console.log('[Cloning] TikTok loading complete, videos:', tiktokVideos.length);
          setIsLoading(false);
        }
      }
      else if (selectedPlatform === 'youtube' && !youtubeChannelLoading && !youtubeVideosLoading) {
        if (youtubeVideos.length > 0 || youtubeVideosError) {
          console.log('[Cloning] YouTube loading complete, videos:', youtubeVideos.length);
          setIsLoading(false);
        }
      }
      else if (selectedPlatform === 'twitch' && !twitchChannelLoading && !twitchVideosLoading) {
        if (twitchVideos.length > 0 || twitchVideosError) {
          console.log('[Cloning] Twitch loading complete, videos:', twitchVideos.length);
          setIsLoading(false);
        }
      }
    }
  }, [isLoading, currentStep, selectedPlatform, tiktokUserLoading, tiktokVideosLoading, 
      tiktokVideos.length, tiktokVideosError, youtubeChannelLoading, youtubeVideosLoading, 
      youtubeVideos.length, youtubeVideosError, twitchChannelLoading, twitchVideosLoading,
      twitchVideos.length, twitchVideosError, ]);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setUploadedFile(file);
      setAudioUrl(URL.createObjectURL(file));
    }
  };

  const handleLoadContent = async () => {
    setIsLoading(true);
    setCurrentStep(3);
    
    if (selectedPlatform === 'upload') {

      setProcessingProgress(0);
      for (let i = 0; i <= 100; i += 10) {
        setProcessingProgress(i);
        await new Promise(resolve => setTimeout(resolve, 200));
      }
      setVoiceCloneReady(true);
      setIsLoading(false);
    } else if (selectedPlatform === 'tiktok') {

      try {

        if (tiktokUser || tiktokVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing TikTok data before new search');
          await cleanupTikTokData();
        }
        
        setLoadProgress(10);

        console.log('Fetching TikTok user:', channelName);
        await fetchTikTokUser(channelName);
        setLoadProgress(50);

        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading TikTok content:', error);
        setIsLoading(false);
      }
    } else if (selectedPlatform === 'youtube') {

      try {

        if (youtubeChannel || youtubeVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing YouTube data before new search');
          await cleanupYouTubeData();
        }
        
        setLoadProgress(10);

        let channelUrl = channelName;
        if (!channelName.includes('youtube.com') && !channelName.includes('youtu.be')) {
          if (channelName.startsWith('@')) {
            channelUrl = `https://youtube.com/${channelName}`;
          } else if (channelName.startsWith('UC') && channelName.length === 24) {
            channelUrl = `https://youtube.com/channel/${channelName}`;
          } else {
            channelUrl = `https://youtube.com/@${channelName}`;
          }
        }
        console.log('Fetching YouTube channel with URL:', channelUrl);
        await fetchYouTubeChannel(channelUrl);
        setLoadProgress(50);

        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading YouTube content:', error);
        setIsLoading(false);
      }
    } else if (selectedPlatform === 'twitch') {

      try {

        if (twitchChannel || twitchVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing Twitch data before new search');
          await cleanupTwitchData();
        }
        
        setLoadProgress(10);

        let channelUrl = channelName;
        if (!channelName.includes('twitch.tv')) {
          channelUrl = `https://twitch.tv/${channelName}`;
        }
        console.log('Fetching Twitch channel:', channelUrl);
        await fetchTwitchChannel(channelUrl);
        setLoadProgress(50);
        // Videos are auto-fetched by the hook after channel is loaded
        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading Twitch content:', error);
        setIsLoading(false);
      }
      for (let i = 0; i <= 100; i += 20) {
        setLoadProgress(i);
        await new Promise(resolve => setTimeout(resolve, 300));
      }
      setIsLoading(false);
    }
  };


  const canProceedFromStep1 = () => selectedPlatform !== '';
  const canProceedFromStep2 = () => {
    if (selectedPlatform === 'upload') {
      return uploadedFile !== null;
    }
    return channelName.trim() !== '';
  };
  const canProceedFromStep3 = () => {
    if (selectedPlatform === 'upload') {
      return voiceCloneReady;
    }
    return selectedContent.length > 0;
  };

  const toggleContentSelection = (contentId: string) => {
    setSelectedContent(prev => 
      prev.includes(contentId) 
        ? prev.filter(id => id !== contentId)
        : [...prev, contentId]
    );
  };

  const handleExportAudio = () => {
    const link = document.createElement('a');
    link.href = audioUrl;
    link.download = `voice-clone-${Date.now()}.wav`;
    link.click();
  };


  const handleStepChange = async (step: number) => {
    if (step < currentStep || step === 1) {
      if (step <= 2 && currentStep >= 3) {
        if (selectedPlatform === 'tiktok') {
          console.log('[Cloning] Cleaning up TikTok data on navigation back');
          try {
            await cleanupTikTokData();
            setChannelName('');
            setSelectedContent([]);
          } catch (error) {
            console.error('[Cloning] Error cleaning up TikTok data:', error);
          }
        } else if (selectedPlatform === 'youtube') {
          console.log('[Cloning] Cleaning up YouTube data on navigation back');
          try {
            await cleanupYouTubeData();
            setChannelName('');
            setSelectedContent([]);
          } catch (error) {
            console.error('[Cloning] Error cleaning up YouTube data:', error);
          }
        } else if (selectedPlatform === 'twitch') {
          console.log('[Cloning] Cleaning up Twitch data on navigation back');
          try {
            await cleanupTwitchData();
            setChannelName('');
            setSelectedContent([]);
          } catch (error) {
            console.error('[Cloning] Error cleaning up Twitch data:', error);
          }
      }
      setCurrentStep(step);
    }
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerificationModal(false);
    setIsVerified(true);
    setIsProcessing(true);
    setCurrentStep(6);
    
    for (let i = 0; i <= 100; i += 10) {
      setProcessProgress(i);
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    setIsProcessing(false);
  };

  const handleProcessContent = async () => {
    setIsProcessing(true);
    setCurrentStep(4);
    
    if (selectedPlatform === 'tiktok') {
      await downloadTikTokVideos(selectedContent);
    } else if (selectedPlatform === 'youtube') {
      await downloadYouTubeVideos(selectedContent);
    } else if (selectedPlatform === 'twitch') {
      await downloadTwitchVideos(selectedContent);
    }
    
    setIsProcessing(false);
  };

  const handleActionSelect = (action: string) => {
    setSelectedAction(action);
  };

  return (
    <div 
      className="min-h-screen bg-pink-500 relative pb-8" 
      style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}
    >
      <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-pink-600 border-2 border-black flex items-center justify-center">
                <UilCopy className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-pink-500 border-2 border-black flex items-center justify-center">
                <UilVideo className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-pink-600 hover:bg-pink-700 border-4 border-black p-0">
                  {currentStep === 1 && <UilChannel className="h-12 w-12 text-white" />}
                  {currentStep === 2 && <UilYoutube className="h-12 w-12 text-white" />}
                  {currentStep === 3 && <UilVideo className="h-12 w-12 text-white" />}
                  {currentStep === 4 && <UilCog className="h-12 w-12 text-white" />}
                  {currentStep === 5 && <UilQuestionCircle className="h-12 w-12 text-white" />}
                  {currentStep === 6 && <UilCheckCircle className="h-12 w-12 text-white" />}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'CHOOSE PLATFORM'}
                {currentStep === 2 && 'CHANNEL SETUP'}
                {currentStep === 3 && (isLoading ? 'LOADING CONTENT' : selectedPlatform === 'upload' ? 'VOICE STUDIO' : 'SELECT CONTENT')}
                {currentStep === 4 && 'VOICE SETTINGS'}
                {currentStep === 5 && 'VERIFY IDENTITY'}
                {currentStep === 6 && 'REVIEW & COMPLETE'}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'SELECT YOUR CONTENT SOURCE'}
                {currentStep === 2 && 'ENTER CHANNEL INFORMATION'}
                {currentStep === 3 && (isLoading ? 'FETCHING CHANNEL DATA' : selectedPlatform === 'upload' ? 'PROCESS YOUR MEDIA' : 'CHOOSE VIDEOS TO CLONE')}
                {currentStep === 4 && 'CUSTOMIZE VOICE PARAMETERS'}
                {currentStep === 5 && 'CONFIRM YOUR IDENTITY'}
                {currentStep === 6 && (isProcessing ? 'CREATING YOUR AI CLONE' : 'YOUR CLONE IS READY')}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-pink-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-pink-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-pink-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {currentStep === 1 && (
            <PlatformSelectionStep
              selectedPlatform={selectedPlatform}
              setSelectedPlatform={setSelectedPlatform}
              canProceedFromStep1={canProceedFromStep1}
              setCurrentStep={setCurrentStep}
            />
          )}

          {currentStep === 2 && (
            <ChannelSetupStep
              selectedPlatform={selectedPlatform as Platform}
              channelName={channelName}
              setChannelName={setChannelName}
              uploadedFile={uploadedFile}
              handleFileUpload={handleFileUpload}
              canProceedFromStep2={canProceedFromStep2}
              handleLoadContent={handleLoadContent}
              handleStepChange={handleStepChange}
              fetchedChannelsRef={fetchedChannelsRef}
            />
          )}

          {currentStep === 3 && (
            <ContentSelectionStep
              selectedPlatform={selectedPlatform as Platform}
              isLoading={isLoading}
              loadProgress={loadProgress}
              tiktokUser={tiktokUser}
              tiktokUserLoading={tiktokUserLoading}
              tiktokUserDataComplete={tiktokUserDataComplete}
              tiktokVideos={tiktokVideos}
              tiktokVideosLoading={tiktokVideosLoading}
              tiktokVideosError={tiktokVideosError}
              youtubeChannel={youtubeChannel}
              youtubeChannelLoading={youtubeChannelLoading}
              youtubeVideos={youtubeVideos}
              youtubeVideosLoading={youtubeVideosLoading}
              youtubeVideosError={youtubeVideosError}
              twitchChannel={twitchChannel}
              twitchChannelLoading={twitchChannelLoading}
              twitchChannelDataComplete={twitchChannelDataComplete}
              twitchVideos={twitchVideos}
              twitchVideosLoading={twitchVideosLoading}
              twitchVideosError={twitchVideosError}
              selectedContent={selectedContent}
              toggleContentSelection={toggleContentSelection}
              canProceedFromStep3={canProceedFromStep3}
              handleStepChange={handleStepChange}
              handleProcessContent={handleProcessContent}
              voiceCloneReady={voiceCloneReady}
              processingProgress={processingProgress}
              audioUrl={audioUrl}
              handleExportAudio={handleExportAudio}
              setCurrentStep={setCurrentStep}
            />
          )}

          {currentStep === 4 && (
            <VoiceSettingsStep
              voiceSettings={voiceSettings}
              setVoiceSettings={setVoiceSettings}
              handleStepChange={handleStepChange}
              setCurrentStep={setCurrentStep}
            />
          )}

          {currentStep === 5 && (
            <IdentityVerificationStep
              selectedAction={selectedAction}
              handleActionSelect={handleActionSelect}
              isVerified={isVerified}
              setShowVerificationModal={setShowVerificationModal}
              handleStepChange={handleStepChange}
            />
          )}

          {currentStep === 6 && (
            <ReviewCompleteStep
              isProcessing={isProcessing}
              processProgress={processProgress}
            />
          )}
        </div>

        <div className="mt-8">
          <OnboardingFooter />
        </div>
      </div>
      
      <VerificationModal
        isOpen={showVerificationModal}
        onClose={() => setShowVerificationModal(false)}
        onComplete={handleVerificationComplete}
      />
    </div>
  );
}


================================================
FILE: courses/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  UilGraduationCap,
  UilClock,
  UilVideo,
  UilArrowRight,
  UilAward,
  UilStar,
  UilCheckCircle,
  UilLock,
  UilPlay,
  UilFileAlt
} from '@tooni/iconscout-unicons-react';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { Star15 } from '@/components/ui/star';

interface Module {
  id: string;
  title: string;
  duration: string;
  completed: boolean;
  locked: boolean;
}

interface Course {
  id: string;
  title: string;
  description: string;
  instructor: string;
  level: 'beginner' | 'intermediate' | 'advanced';
  duration: string;
  modules: Module[];
  enrolled: boolean;
  progress: number;
  rating: number;
  students: number;
  certificate: boolean;
}

const mockCourses: Course[] = [
  {
    id: '1',
    title: 'AI VOICE AGENTS MASTERCLASS',
    description: 'Complete training from zero to expert. Learn everything about building, deploying, and scaling AI voice agents.',
    instructor: 'Dr. Sarah Chen',
    level: 'beginner',
    duration: '8 weeks',
    modules: [
      { id: '1-1', title: 'Introduction to AI Voice Technology', duration: '45 min', completed: true, locked: false },
      { id: '1-2', title: 'Setting Up Your First Agent', duration: '60 min', completed: true, locked: false },
      { id: '1-3', title: 'Conversation Design Principles', duration: '90 min', completed: false, locked: false },
      { id: '1-4', title: 'Advanced Voice Customization', duration: '75 min', completed: false, locked: true }
    ],
    enrolled: true,
    progress: 45,
    rating: 4.9,
    students: 1250,
    certificate: true
  },
  {
    id: '2',
    title: 'SALES AUTOMATION WITH AI',
    description: 'Transform your sales process with AI-powered voice agents. Learn to automate outreach and qualify leads at scale.',
    instructor: 'Mike Rodriguez',
    level: 'intermediate',
    duration: '6 weeks',
    modules: [
      { id: '2-1', title: 'Sales Psychology & AI', duration: '50 min', completed: false, locked: false },
      { id: '2-2', title: 'Building High-Converting Scripts', duration: '80 min', completed: false, locked: true },
      { id: '2-3', title: 'Lead Qualification Strategies', duration: '65 min', completed: false, locked: true },
      { id: '2-4', title: 'Performance Analytics', duration: '55 min', completed: false, locked: true }
    ],
    enrolled: false,
    progress: 0,
    rating: 4.8,
    students: 890,
    certificate: true
  },
  {
    id: '3',
    title: 'VOICE CLONING DEEP DIVE',
    description: 'Master the art and science of voice cloning. Create authentic, natural-sounding voice agents.',
    instructor: 'Lisa Park',
    level: 'advanced',
    duration: '4 weeks',
    modules: [
      { id: '3-1', title: 'Voice Cloning Fundamentals', duration: '70 min', completed: false, locked: false },
      { id: '3-2', title: 'Advanced Cloning Techniques', duration: '85 min', completed: false, locked: true },
      { id: '3-3', title: 'Ethics & Best Practices', duration: '45 min', completed: false, locked: true },
      { id: '3-4', title: 'Production Workflows', duration: '90 min', completed: false, locked: true }
    ],
    enrolled: false,
    progress: 0,
    rating: 4.7,
    students: 456,
    certificate: true
  }
];

export default function CoursesPage() {
  const [selectedLevel, setSelectedLevel] = React.useState('all');
  const [selectedCourse, setSelectedCourse] = React.useState<string | null>(null);
  const [expandedCourse, setExpandedCourse] = React.useState<string | null>(null);

  const levels = ['all', 'beginner', 'intermediate', 'advanced'];

  const filteredCourses = selectedLevel === 'all' 
    ? mockCourses 
    : mockCourses.filter(course => course.level === selectedLevel);

  const getLevelColor = (level: string) => {
    switch (level) {
      case 'beginner': return 'bg-green-100 text-green-800 border-green-800';
      case 'intermediate': return 'bg-yellow-100 text-yellow-800 border-yellow-800';
      case 'advanced': return 'bg-red-100 text-red-800 border-red-800';
      default: return 'bg-gray-100 text-gray-800 border-gray-800';
    }
  };

  return (
    <div 
      className="min-h-screen bg-purple-500 relative pb-8" 
      style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}
    >
      <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          {/* Title Card */}
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              {/* Decorative elements */}
              <div className="absolute top-2 left-4 w-8 h-8 bg-purple-600 border-2 border-black flex items-center justify-center">
                <UilGraduationCap className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-purple-500 border-2 border-black flex items-center justify-center">
                <UilAward className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-pink-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-yellow-500 border-2 border-black -rotate-12"></div>
              
              {/* Central icon button */}
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-purple-600 hover:bg-purple-700 border-4 border-black p-0">
                  <UilGraduationCap className="h-12 w-12 text-white" />
                </Button>
              </div>
              
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                COURSES
              </CardTitle>
              
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                Structured learning paths to AI voice mastery
              </p>
              
              {/* Animated decorative bars */}
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-purple-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-purple-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-purple-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {/* Level Filter */}
          <div className="flex flex-wrap gap-2 justify-center">
            {levels.map((level) => (
              <Button
                key={level}
                onClick={() => setSelectedLevel(level)}
                className={`uppercase font-black ${
                  selectedLevel === level
                    ? 'bg-purple-600 hover:bg-purple-700 text-white'
                    : 'bg-white hover:bg-gray-100 text-black'
                } border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] hover:shadow-[4px_4px_0_rgba(0,0,0,1)]`}
              >
                {level}
              </Button>
            ))}
          </div>

          {/* Achievement Banner */}
          <Card className="transform -rotate-1 relative overflow-hidden bg-purple-50">
            <CardContent className="pt-6">
              <div className="flex items-start gap-4">
                <Button
                  size="icon"
                  variant="default"
                  className="w-12 h-12 flex-shrink-0 bg-purple-600 hover:bg-purple-700 text-white border-black"
                >
                  <UilAward className="h-6 w-6 text-white" />
                </Button>
                <div className="flex-1">
                  <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                    EARN CERTIFICATES
                  </h3>
                  <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                    Complete courses to earn <span className="font-black text-purple-600">verified certificates</span> and showcase your expertise.
                  </p>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="flex items-center gap-3">
                      <div className="w-2 h-2 bg-purple-600 rounded-full"></div>
                      <span className="text-black font-medium">Industry recognized</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="w-2 h-2 bg-purple-600 rounded-full"></div>
                      <span className="text-black font-medium">Lifetime access</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="w-2 h-2 bg-purple-600 rounded-full"></div>
                      <span className="text-black font-medium">Expert instructors</span>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Courses Grid */}
          <div className="space-y-6">
            {filteredCourses.map((course, index) => (
              <div key={course.id} className="relative">
                {selectedCourse === course.id && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" 
                       style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#9333EA" size={80} 
                                className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" 
                                stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" 
                              style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          {course.enrolled ? 'ENROLLED' : 'SELECTED'}
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Card 
                  className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all transform ${
                    index % 2 === 0 ? 'rotate-1' : '-rotate-1'
                  } ${
                    selectedCourse === course.id ? 'bg-purple-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                  }`}
                  onClick={() => setSelectedCourse(course.id)}
                >
                  <CardContent className="p-6">
                    {/* Course Header */}
                    <div className="flex justify-between items-start mb-4">
                      <div className="flex-1">
                        <h4 className="font-black uppercase text-xl mb-2">{course.title}</h4>
                        <p className="text-sm text-gray-600 mb-3">{course.description}</p>
                      </div>
                      {course.certificate && (
                        <Badge className="bg-purple-500 text-white border-2 border-black flex-shrink-0 ml-4">
                          <UilAward className="h-3 w-3 mr-1" />
                          CERTIFICATE
                        </Badge>
                      )}
                    </div>

                    {/* Course Meta */}
                    <div className="flex flex-wrap gap-4 mb-4">
                      <Badge className={`border-2 ${getLevelColor(course.level)}`}>
                        {course.level.toUpperCase()}
                      </Badge>
                      <div className="flex items-center gap-1">
                        <UilClock className="h-4 w-4" />
                        <span className="text-sm font-bold">{course.duration}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <UilVideo className="h-4 w-4" />
                        <span className="text-sm font-bold">{course.modules.length} modules</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <UilStar className="h-4 w-4 text-yellow-500" />
                        <span className="text-sm font-bold">{course.rating}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <UilGraduationCap className="h-4 w-4" />
                        <span className="text-sm font-bold">{course.students} students</span>
                      </div>
                    </div>

                    {/* Instructor */}
                    <div className="mb-4">
                      <p className="text-sm text-gray-600">Instructor: <span className="font-bold text-black">{course.instructor}</span></p>
                    </div>

                    {/* Progress Bar (if enrolled) */}
                    {course.enrolled && (
                      <div className="mb-4">
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-sm font-bold">PROGRESS</span>
                          <span className="text-sm font-bold">{course.progress}%</span>
                        </div>
                        <Progress value={course.progress} className="h-3 border-2 border-black" />
                      </div>
                    )}

                    {/* Module List Toggle */}
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        setExpandedCourse(expandedCourse === course.id ? null : course.id);
                      }}
                      className="mb-4 text-sm font-bold uppercase hover:bg-purple-50"
                    >
                      <UilFileAlt className="h-4 w-4 mr-2" />
                      {expandedCourse === course.id ? 'HIDE' : 'VIEW'} CURRICULUM
                    </Button>

                    {/* Module List */}
                    {expandedCourse === course.id && (
                      <div className="mb-4 space-y-2 border-t-2 border-black pt-4">
                        {course.modules.map((module, moduleIndex) => (
                          <div key={module.id} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                            <div className="flex items-center gap-2">
                              {module.completed ? (
                                <UilCheckCircle className="h-5 w-5 text-green-600" />
                              ) : module.locked ? (
                                <UilLock className="h-5 w-5 text-gray-400" />
                              ) : (
                                <UilPlay className="h-5 w-5 text-purple-600" />
                              )}
                              <span className={`text-sm ${module.locked ? 'text-gray-400' : 'text-black'} ${module.completed ? 'line-through' : ''}`}>
                                {moduleIndex + 1}. {module.title}
                              </span>
                            </div>
                            <span className="text-xs text-gray-500">{module.duration}</span>
                          </div>
                        ))}
                      </div>
                    )}

                    {/* Action Button */}
                    <Button 
                      className={`w-full ${
                        course.enrolled 
                          ? 'bg-purple-600 hover:bg-purple-700' 
                          : 'bg-purple-500 hover:bg-purple-600'
                      } text-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] hover:shadow-[4px_4px_0_rgba(0,0,0,1)]`}
                    >
                      {course.enrolled ? 'CONTINUE LEARNING' : 'ENROLL NOW'}
                      <UilArrowRight className="ml-2 h-4 w-4" />
                    </Button>
                  </CardContent>
                </Card>
              </div>
            ))}
          </div>

          {/* Info Box */}
          <Card className="bg-purple-100 border-2 border-black mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-purple-400 hover:bg-purple-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilGraduationCap className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">LEARNING PATHS</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Our courses are designed to build on each other. Start with beginner courses to establish fundamentals, then progress to intermediate and advanced topics for specialized skills.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Footer */}
          <div className="mt-8">
            <OnboardingFooter />
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: guides/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  UilBookAlt,
  UilClock,
  UilChartGrowth,
  UilArrowRight,
  UilRocket,
  UilStar,
  UilFileAlt,
  UilLightbulbAlt
} from '@tooni/iconscout-unicons-react';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { Star15 } from '@/components/ui/star';

interface Guide {
  id: string;
  title: string;
  description: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  estimatedTime: string;
  category: string;
  steps: number;
  popular: boolean;
}

const mockGuides: Guide[] = [
  {
    id: '1',
    title: 'COMPLETE SETUP GUIDE FOR YOUR FIRST AGENT',
    description: 'Step-by-step walkthrough to create, configure, and deploy your first AI voice agent from scratch.',
    difficulty: 'beginner',
    estimatedTime: '30 mins',
    category: 'Getting Started',
    steps: 8,
    popular: true
  },
  {
    id: '2',
    title: 'OPTIMIZING CALL SCRIPTS FOR CONVERSION',
    description: 'Learn how to craft compelling scripts that drive results and improve your agent performance metrics.',
    difficulty: 'intermediate',
    estimatedTime: '45 mins',
    category: 'Sales Optimization',
    steps: 12,
    popular: true
  },
  {
    id: '3',
    title: 'ADVANCED VOICE CLONING TECHNIQUES',
    description: 'Master the art of creating natural-sounding voice clones with advanced customization options.',
    difficulty: 'advanced',
    estimatedTime: '60 mins',
    category: 'Voice Technology',
    steps: 15,
    popular: false
  },
  {
    id: '4',
    title: 'INTEGRATING HUNTER FOR LEAD GENERATION',
    description: 'Connect Hunter search capabilities to automatically populate your call lists with qualified leads.',
    difficulty: 'intermediate',
    estimatedTime: '40 mins',
    category: 'Lead Generation',
    steps: 10,
    popular: false
  }
];

export default function GuidesPage() {
  const [selectedDifficulty, setSelectedDifficulty] = React.useState('all');
  const [selectedGuide, setSelectedGuide] = React.useState<string | null>(null);

  const difficulties = ['all', 'beginner', 'intermediate', 'advanced'];

  const filteredGuides = selectedDifficulty === 'all' 
    ? mockGuides 
    : mockGuides.filter(guide => guide.difficulty === selectedDifficulty);

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-green-100 text-green-800 border-green-800';
      case 'intermediate': return 'bg-yellow-100 text-yellow-800 border-yellow-800';
      case 'advanced': return 'bg-red-100 text-red-800 border-red-800';
      default: return 'bg-gray-100 text-gray-800 border-gray-800';
    }
  };

  return (
    <div 
      className="min-h-screen bg-cyan-400 relative pb-8" 
      style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}
    >
      <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          {/* Title Card */}
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              {/* Decorative elements */}
              <div className="absolute top-2 left-4 w-8 h-8 bg-cyan-600 border-2 border-black flex items-center justify-center">
                <UilBookAlt className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-cyan-500 border-2 border-black flex items-center justify-center">
                <UilLightbulbAlt className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-blue-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-purple-500 border-2 border-black -rotate-12"></div>
              
              {/* Central icon button */}
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-cyan-600 hover:bg-cyan-700 border-4 border-black p-0">
                  <UilBookAlt className="h-12 w-12 text-white" />
                </Button>
              </div>
              
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                GUIDES
              </CardTitle>
              
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                Step-by-step tutorials to master Diala
              </p>
              
              {/* Animated decorative bars */}
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-cyan-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-cyan-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-cyan-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {/* Difficulty Filter */}
          <div className="flex flex-wrap gap-2 justify-center">
            {difficulties.map((difficulty) => (
              <Button
                key={difficulty}
                onClick={() => setSelectedDifficulty(difficulty)}
                className={`uppercase font-black ${
                  selectedDifficulty === difficulty
                    ? 'bg-cyan-600 hover:bg-cyan-700 text-white'
                    : 'bg-white hover:bg-gray-100 text-black'
                } border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] hover:shadow-[4px_4px_0_rgba(0,0,0,1)]`}
              >
                {difficulty}
              </Button>
            ))}
          </div>

          {/* Popular Guides Section */}
          <Card className="transform -rotate-1 relative overflow-hidden bg-cyan-50">
            <CardContent className="pt-6">
              <div className="flex items-start gap-4">
                <Button
                  size="icon"
                  variant="default"
                  className="w-12 h-12 flex-shrink-0 bg-cyan-600 hover:bg-cyan-700 text-white border-black"
                >
                  <UilRocket className="h-6 w-6 text-white" />
                </Button>
                <div className="flex-1">
                  <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                    MOST POPULAR GUIDES
                  </h3>
                  <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                    Start with these <span className="font-black text-cyan-600">community favorites</span> to get up and running quickly.
                  </p>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {mockGuides.filter(guide => guide.popular).map((guide) => (
                      <div key={guide.id} className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                        <span className="text-black font-medium">{guide.title}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Guides Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {filteredGuides.map((guide, index) => (
              <div key={guide.id} className="relative">
                {selectedGuide === guide.id && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" 
                       style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#00CED1" size={80} 
                                className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" 
                                stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" 
                              style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Card 
                  className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all transform ${
                    index % 2 === 0 ? 'rotate-1' : '-rotate-1'
                  } ${
                    selectedGuide === guide.id ? 'bg-cyan-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                  }`}
                  onClick={() => setSelectedGuide(guide.id)}
                >
                  <CardContent className="p-6">
                    <div className="flex justify-between items-start mb-3">
                      <h4 className="font-black uppercase text-lg flex-1 pr-2">{guide.title}</h4>
                      {guide.popular && (
                        <Badge className="bg-cyan-500 text-white border-2 border-black flex-shrink-0">
                          <UilStar className="h-3 w-3 mr-1" />
                          POPULAR
                        </Badge>
                      )}
                    </div>
                    <p className="text-sm text-gray-600 mb-4">{guide.description}</p>
                    <div className="flex items-center justify-between mb-4">
                      <Badge className={`border-2 ${getDifficultyColor(guide.difficulty)}`}>
                        {guide.difficulty.toUpperCase()}
                      </Badge>
                      <div className="flex items-center gap-3 text-xs">
                        <div className="flex items-center gap-1">
                          <UilClock className="h-3 w-3" />
                          <span className="font-bold">{guide.estimatedTime}</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <UilFileAlt className="h-3 w-3" />
                          <span className="font-bold">{guide.steps} steps</span>
                        </div>
                      </div>
                    </div>
                    <Button 
                      className="w-full bg-cyan-500 hover:bg-cyan-600 text-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] hover:shadow-[4px_4px_0_rgba(0,0,0,1)]"
                    >
                      START GUIDE
                      <UilArrowRight className="ml-2 h-4 w-4" />
                    </Button>
                  </CardContent>
                </Card>
              </div>
            ))}
          </div>

          {/* Info Box */}
          <Card className="bg-cyan-100 border-2 border-black mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-cyan-400 hover:bg-cyan-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilChartGrowth className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">TRACK YOUR PROGRESS</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Complete guides to unlock achievements and gain expertise. Your progress is automatically saved, so you can continue where you left off anytime.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Footer */}
          <div className="mt-8">
            <OnboardingFooter />
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: hunter/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useAction, useQuery, useMutation } from "convex/react";
import { api } from "@convex/_generated/api";
import SimpleOnboardingNav from '@/components/custom/simple-onboarding-nav';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { useConvexErrorHandler } from '@/hooks/useConvexErrorHandler';
import { toast } from 'sonner';
import { TooltipProvider } from '@/components/ui/tooltip';
import { 
  UilSearch, 
  UilPhone, 
  UilAnalytics,
  UilFilter,
  UilUserCheck,
  UilPlay,
  UilCheckCircle,
  UilCrosshair,
  UilGlobe,
  UilDatabase,
  UilBuilding
} from '@tooni/iconscout-unicons-react';

// Import step components
import { SearchDefinitionStep, SearchDefinitionInfoSections } from '@/components/onboarding/hunter/SearchDefinitionStep';
import { IndustryLocationStep } from '@/components/onboarding/hunter/IndustryLocationStep';
import { CompanyDetailsStep } from '@/components/onboarding/hunter/CompanyDetailsStep';
import { SearchKeywordsStep } from '@/components/onboarding/hunter/SearchKeywordsStep';
import { ContactPreferencesStep } from '@/components/onboarding/hunter/ContactPreferencesStep';
import { ValidationCriteriaStep } from '@/components/onboarding/hunter/ValidationCriteriaStep';
import { SearchPreviewStep } from '@/components/onboarding/hunter/SearchPreviewStep';
import { SearchProgressStep } from '@/components/onboarding/hunter/SearchProgressStep';
import { SearchResultsStep } from '@/components/onboarding/hunter/SearchResultsStep';

import { 
  SearchCriteria, 
  ValidationCriteria, 
  ContactPreferences, 
  SearchResults, 
  LeadSource,
  StepProps 
} from '@/components/onboarding/hunter/types';

// Constants
const leadSources: LeadSource[] = [
  {
    id: 'web',
    name: 'Web Search',
    icon: <UilGlobe className="h-8 w-8" />,
    description: 'Crawl websites and online directories',
    color: 'bg-green-600'
  },
  {
    id: 'database',
    name: 'B2B Database',
    icon: <UilDatabase className="h-8 w-8" />,
    description: 'Access verified business contacts',
    color: 'bg-purple-600'
  },
  {
    id: 'directory',
    name: 'Business Directories',
    icon: <UilBuilding className="h-8 w-8" />,
    description: 'Search Yellow Pages and industry directories',
    color: 'bg-orange-600'
  }
];

const industries = [
  'Technology',
  'Healthcare',
  'Finance',
  'Real Estate',
  'Retail',
  'Manufacturing',
  'Education',
  'Consulting',
  'Other'
];

const jobTitles = [
  'CEO',
  'CTO',
  'VP Sales',
  'Marketing Director',
  'HR Manager',
  'Operations Manager',
  'Product Manager',
  'Business Owner'
];

export default function HunterOnboarding() {
  // const { user } = useUser(); // Temporarily commented out for backend integration
  const user = { id: "temp-user-123" }; // Temporary mock user for testing
  const createTestSubscription = useMutation(api.testSetup.createTestSubscription);
  const updateSubscriptionLimits = useMutation(api.testSetup.updateSubscriptionLimits);
  const { handleConvexError } = useConvexErrorHandler();
  
  // Step state
  const [currentStep, setCurrentStep] = React.useState(1);
  
  // Search definition state
  const [searchName, setSearchName] = React.useState('');
  const [searchObjective, setSearchObjective] = React.useState('');
  const [selectedSources, setSelectedSources] = React.useState<string[]>([]);
  
  // Search criteria state
  const [searchCriteria, setSearchCriteria] = React.useState<SearchCriteria>({
    industry: '',
    location: '',
    companySize: '1-100',
    jobTitles: [],
    keywords: ''
  });
  const [customIndustry, setCustomIndustry] = React.useState('');
  
  // Contact preferences state
  const [contactPreferences, setContactPreferences] = React.useState<ContactPreferences>({
    includeEmails: true,
    includePhones: true,
    includeLinkedIn: false
  });
  
  // Validation criteria state
  const [validationCriteria, setValidationCriteria] = React.useState<ValidationCriteria>({
    mustHaveWebsite: true,
    mustHaveContactInfo: true,
    mustHaveSpecificKeywords: [],
    mustBeInIndustry: true,
    customValidationRules: ''
  });
  
  // Search execution state
  const [isSearching, setIsSearching] = React.useState(false);
  const [searchProgress, setSearchProgress] = React.useState(0);
  const [currentStatus, setCurrentStatus] = React.useState('');
  const [searchResults, setSearchResults] = React.useState<SearchResults | null>(null);
  const [showVerification, setShowVerification] = React.useState(false);
  const [currentSearchId, setCurrentSearchId] = React.useState<string | null>(null);
  const [devMode, setDevMode] = React.useState(false);

  // Convex actions and queries
  const createLeadSearch = useAction(api.hunterActions.createLeadSearch);
  const getSearchStatus = useAction(api.hunterActions.getSearchStatus);
  const userUsageStats = useQuery(api.rateLimitHelpers.getUserUsageStats, 
    user?.id ? { userId: user.id } : "skip"
  );

  // Auto-fill function for dev mode
  React.useEffect(() => {
    if (devMode) {
      setSearchName('Northern Ireland Roofing Contractors Q4');
      setSearchObjective('Finding roofing contractors and construction companies across Northern Ireland for partnership opportunities');
      setSelectedSources(['web']);
      setSearchCriteria({
        industry: 'Other',
        location: 'Northern Ireland',
        companySize: '1-100',
        jobTitles: ['Business Owner', 'Operations Manager'],
        keywords: 'roofing, roof repair, slate, tiles, guttering, Belfast, Derry, Londonderry, Newry, Lisburn, Bangor, Antrim, Armagh, Coleraine'
      });
      setCustomIndustry('Roofing & Construction');
      setContactPreferences({
        includeEmails: true,
        includePhones: true,
        includeLinkedIn: false
      });
      setValidationCriteria({
        mustHaveWebsite: true,
        mustHaveContactInfo: true,
        mustHaveSpecificKeywords: ['roofing', 'contractor', 'Northern Ireland'],
        mustBeInIndustry: true,
        customValidationRules: 'Must offer residential or commercial roofing services in Northern Ireland'
      });
    }
  }, [devMode]);

  // Create test subscription and update limits on mount
  React.useEffect(() => {
    if (user?.id) {
      createTestSubscription({ userId: user.id })
        .then(() => {
          return updateSubscriptionLimits({ userId: user.id });
        })
        .catch((err) => {
          console.log("Subscription handling:", err.message);
          updateSubscriptionLimits({ userId: user.id }).catch(console.error);
        });
    }
  }, [user?.id, createTestSubscription, updateSubscriptionLimits]);

  // Handler functions
  const handleSourceSelect = (sourceId: string) => {
    if (selectedSources.includes(sourceId)) {
      setSelectedSources(selectedSources.filter(s => s !== sourceId));
    } else {
      setSelectedSources([...selectedSources, sourceId]);
    }
  };

  const toggleJobTitle = (title: string) => {
    setSearchCriteria(prev => ({
      ...prev,
      jobTitles: prev.jobTitles.includes(title)
        ? prev.jobTitles.filter(t => t !== title)
        : [...prev.jobTitles, title]
    }));
  };

  const canStartSearch = () => {
    if (!searchName || !searchObjective || selectedSources.length === 0 || 
        !searchCriteria.industry || !searchCriteria.location) {
      return false;
    }
    if (searchCriteria.location.toLowerCase() === searchCriteria.industry.toLowerCase()) {
      return false;
    }
    if (searchName.toLowerCase() === searchCriteria.industry.toLowerCase()) {
      return false;
    }
    return true;
  };

  const startSearch = async () => {
    if (!user?.id) {
      toast.error('Please sign in to start a search');
      return;
    }

    setIsSearching(true);
    setCurrentStep(5);
    setCurrentStatus('Initializing search...');
    setSearchProgress(10);
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    setShowVerification(true);
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerification(false);
    
    if (!user?.id) {
      toast.error('Please sign in to continue');
      return;
    }

    try {
      const searchConfig = {
        searchName,
        searchObjective,
        selectedSources,
        industry: searchCriteria.industry === 'Other' ? customIndustry : searchCriteria.industry,
        location: searchCriteria.location,
        companySize: searchCriteria.companySize || '1-100',
        jobTitles: searchCriteria.jobTitles,
        keywords: searchCriteria.keywords,
        includeEmails: contactPreferences.includeEmails,
        includePhones: contactPreferences.includePhones,
        includeLinkedIn: contactPreferences.includeLinkedIn,
        validationCriteria: {
          mustHaveWebsite: validationCriteria.mustHaveWebsite,
          mustHaveContactInfo: validationCriteria.mustHaveContactInfo,
          mustHaveSpecificKeywords: validationCriteria.mustHaveSpecificKeywords,
          mustBeInIndustry: validationCriteria.mustBeInIndustry,
          customValidationRules: validationCriteria.customValidationRules,
        },
      };

      const result = await createLeadSearch({
        userId: user.id,
        searchConfig,
      });

      setCurrentSearchId(result.searchId);
      pollSearchProgress(result.searchId);
      
    } catch (error) {
      console.error('Search creation failed:', error);
      setCurrentStatus('Search failed: ' + (error.message || 'Unknown error'));
      setIsSearching(false);
      handleConvexError(error);
    }
  };

  // Poll search progress
  const pollSearchProgress = async (searchId: string) => {
    const maxAttempts = 60;
    let attempts = 0;
    let lastProgress = 0;
    let stuckCounter = 0;

    const poll = async () => {
      if (attempts >= maxAttempts) {
        setCurrentStatus('Search timed out - please check back later');
        setIsSearching(false);
        return;
      }

      try {
        const status = await getSearchStatus({ searchId });
        
        const newProgress = status.progress || 0;
        if (newProgress > lastProgress) {
          const increment = (newProgress - lastProgress) / 10;
          for (let i = 1; i <= 10; i++) {
            setTimeout(() => {
              setSearchProgress(prev => Math.min(prev + increment, newProgress));
            }, i * 50);
          }
          lastProgress = newProgress;
          stuckCounter = 0;
        } else {
          stuckCounter++;
          if (stuckCounter > 6) {
            setCurrentStatus(status.currentStage + ' (this may take a while...)');
          }
        }

        setCurrentStatus(status.currentStage || 'Processing...');

        if (status.status === 'completed') {
          setSearchProgress(100);
          setSearchResults({
            totalLeads: status.totalLeads || 0,
            verifiedEmails: status.verifiedEmails || 0,
            verifiedPhones: status.verifiedPhones || 0,
            businessWebsites: status.businessWebsites || 0,
            avgResponseRate: status.avgResponseRate || '0%',
            searchTime: status.searchTime || '0m 0s'
          });
          setIsSearching(false);
          setCurrentStep(6);
          return;
        } else if (status.status === 'failed') {
          setCurrentStatus('Search failed: ' + (status.error || 'Unknown error'));
          setIsSearching(false);
          
          toast.error('Search failed. Click to retry', {
            action: {
              label: 'Retry',
              onClick: () => {
                setCurrentStep(4);
                setSearchProgress(0);
                setCurrentStatus('');
              }
            },
            duration: 10000
          });
          return;
        }

        attempts++;
        const pollInterval = newProgress > 90 ? 5000 : 10000;
        setTimeout(poll, pollInterval);
        
      } catch (error) {
        console.error('Error polling search status:', error);
        attempts++;
        
        if (attempts > 3) {
          setCurrentStatus('Connection issue - retrying...');
        }
        
        setTimeout(poll, 15000);
      }
    };

    poll();
  };

  const handleStepChange = (step: number) => {
    if (step < currentStep) {
      setCurrentStep(step);
    }
  };

  // Create step props object
  const stepProps: StepProps = {
    currentStep,
    setCurrentStep,
    searchName,
    setSearchName,
    searchObjective,
    setSearchObjective,
    selectedSources,
    setSelectedSources,
    searchCriteria,
    setSearchCriteria,
    customIndustry,
    setCustomIndustry,
    contactPreferences,
    setContactPreferences,
    validationCriteria,
    setValidationCriteria,
    isSearching,
    setIsSearching,
    searchProgress,
    setSearchProgress,
    currentStatus,
    setCurrentStatus,
    searchResults,
    setSearchResults,
    currentSearchId,
    setCurrentSearchId,
    showVerification,
    setShowVerification,
    devMode,
    setDevMode,
    handleSourceSelect,
    toggleJobTitle,
    canStartSearch,
    startSearch,
    handleVerificationComplete,
    handleStepChange,
    userUsageStats,
    createLeadSearch,
    getSearchStatus,
    leadSources,
    industries,
    jobTitles
  };

  return (
    <TooltipProvider>
      <div className="min-h-screen bg-violet-400 relative pb-8" style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}>
      {/* Dev Mode Toggle */}
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-4 right-4 z-50">
          <Button
            onClick={() => setDevMode(!devMode)}
            className={`h-10 px-4 text-sm font-black uppercase ${
              devMode 
                ? 'bg-green-500 hover:bg-green-600 text-white' 
                : 'bg-gray-200 hover:bg-gray-300 text-black'
            } border-2 border-black`}
          >
            DEV MODE {devMode ? 'ON' : 'OFF'}
          </Button>
        </div>
      )}
      
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <div className="w-full max-w-4xl space-y-8">
          {/* Persistent Title Card */}
          <Card className="transform -rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-violet-600 border-2 border-black flex items-center justify-center">
                <UilSearch className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-violet-500 border-2 border-black flex items-center justify-center">
                <UilCrosshair className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-pink-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-violet-600 hover:bg-violet-700 border-4 border-black p-0">
                  {currentStep === 1 && <UilSearch className="h-12 w-12 text-white" />}
                  {currentStep === 2 && <UilBuilding className="h-12 w-12 text-white" />}
                  {currentStep === 2.5 && <UilFilter className="h-12 w-12 text-white" />}
                  {currentStep === 2.75 && <UilCrosshair className="h-12 w-12 text-white" />}
                  {currentStep === 3 && <UilUserCheck className="h-12 w-12 text-white" />}
                  {currentStep === 3.5 && <UilFilter className="h-12 w-12 text-white" />}
                  {currentStep === 4 && <UilPlay className="h-12 w-12 text-white" />}
                  {currentStep === 5 && <UilAnalytics className="h-12 w-12 text-white" />}
                  {currentStep === 6 && <UilCheckCircle className="h-12 w-12 text-white" />}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'SEARCH DEFINITION'}
                {currentStep === 2 && 'INDUSTRY & LOCATION'}
                {currentStep === 2.5 && 'COMPANY DETAILS'}
                {currentStep === 2.75 && 'SEARCH KEYWORDS'}
                {currentStep === 3 && 'CONTACT PREFERENCES'}
                {currentStep === 3.5 && 'VALIDATION CRITERIA'}
                {currentStep === 4 && 'SEARCH PREVIEW'}
                {currentStep === 5 && 'SEARCHING LEADS'}
                {currentStep === 6 && 'SEARCH COMPLETE'}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'DEFINE YOUR SEARCH OBJECTIVES'}
                {currentStep === 2 && 'SET TARGET MARKET & GEOGRAPHY'}
                {currentStep === 2.5 && 'SPECIFY COMPANY PROFILE'}
                {currentStep === 2.75 && 'REFINE WITH KEYWORDS'}
                {currentStep === 3 && 'CHOOSE CONTACT INFORMATION'}
                {currentStep === 3.5 && 'SET VALIDATION RULES'}
                {currentStep === 4 && 'REVIEW AND LAUNCH SEARCH'}
                {currentStep === 5 && 'FINDING YOUR PERFECT CUSTOMERS'}
                {currentStep === 6 && 'YOUR LEADS ARE READY'}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-violet-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-violet-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-violet-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {/* Step Components */}
          {currentStep === 1 && <SearchDefinitionStep {...stepProps} />}
          {currentStep === 2 && <IndustryLocationStep {...stepProps} />}
          {currentStep === 2.5 && <CompanyDetailsStep {...stepProps} />}
          {currentStep === 2.75 && <SearchKeywordsStep {...stepProps} />}
          {currentStep === 3 && <ContactPreferencesStep {...stepProps} />}
          {currentStep === 3.5 && <ValidationCriteriaStep {...stepProps} />}
          {currentStep === 4 && <SearchPreviewStep {...stepProps} />}
          {currentStep === 5 && <SearchProgressStep {...stepProps} />}
          {currentStep === 6 && <SearchResultsStep {...stepProps} />}
        </div>
        
        {/* Info Sections - Only on Step 1 */}
        {currentStep === 1 && <SearchDefinitionInfoSections />}
      </div>



      {/* Verification Modal */}
      {showVerification && (
        <VerificationModal
          isOpen={showVerification}
          onClose={() => setShowVerification(false)}
          onComplete={handleVerificationComplete}
          devMode={devMode}
        />
      )}
      
      <div className="mt-8">
        <OnboardingFooter />
      </div>
    </div>
    </TooltipProvider>
  );
}


================================================
FILE: hunter/page.txt
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useAction, useQuery, useMutation } from "convex/react";
import { api } from "@convex/_generated/api";
import SimpleOnboardingNav from '@/components/custom/simple-onboarding-nav';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { useConvexErrorHandler } from '@/hooks/useConvexErrorHandler';
import { toast } from 'sonner';
import { TooltipProvider } from '@/components/ui/tooltip';
import { 
  UilSearch, 
  UilPhone, 
  UilAnalytics,
  UilFilter,
  UilUserCheck,
  UilPlay,
  UilCheckCircle,
  UilCrosshair,
  UilGlobe,
  UilDatabase,
  UilBuilding
} from '@tooni/iconscout-unicons-react';

// Import step components
import { SearchDefinitionStep, SearchDefinitionInfoSections } from '@/components/onboarding/hunter/SearchDefinitionStep';
import { IndustryLocationStep } from '@/components/onboarding/hunter/IndustryLocationStep';
import { CompanyDetailsStep } from '@/components/onboarding/hunter/CompanyDetailsStep';
import { SearchKeywordsStep } from '@/components/onboarding/hunter/SearchKeywordsStep';
import { ContactPreferencesStep } from '@/components/onboarding/hunter/ContactPreferencesStep';
import { ValidationCriteriaStep } from '@/components/onboarding/hunter/ValidationCriteriaStep';
import { SearchPreviewStep } from '@/components/onboarding/hunter/SearchPreviewStep';
import { SearchProgressStep } from '@/components/onboarding/hunter/SearchProgressStep';
import { SearchResultsStep } from '@/components/onboarding/hunter/SearchResultsStep';

import { 
  SearchCriteria, 
  ValidationCriteria, 
  ContactPreferences, 
  SearchResults, 
  LeadSource,
  StepProps 
} from '@/components/onboarding/hunter/types';

// Constants
const leadSources: LeadSource[] = [
  {
    id: 'web',
    name: 'Web Search',
    icon: <UilGlobe className="h-8 w-8" />,
    description: 'Crawl websites and online directories',
    color: 'bg-green-600'
  },
  {
    id: 'database',
    name: 'B2B Database',
    icon: <UilDatabase className="h-8 w-8" />,
    description: 'Access verified business contacts',
    color: 'bg-purple-600'
  },
  {
    id: 'directory',
    name: 'Business Directories',
    icon: <UilBuilding className="h-8 w-8" />,
    description: 'Search Yellow Pages and industry directories',
    color: 'bg-orange-600'
  }
];

const industries = [
  'Technology',
  'Healthcare',
  'Finance',
  'Real Estate',
  'Retail',
  'Manufacturing',
  'Education',
  'Consulting',
  'Other'
];

const jobTitles = [
  'CEO',
  'CTO',
  'VP Sales',
  'Marketing Director',
  'HR Manager',
  'Operations Manager',
  'Product Manager',
  'Business Owner'
];

export default function HunterOnboarding() {
  // const { user } = useUser(); // Temporarily commented out for backend integration
  const user = { id: "temp-user-123" }; // Temporary mock user for testing
  const createTestSubscription = useMutation(api.testSetup.createTestSubscription);
  const updateSubscriptionLimits = useMutation(api.testSetup.updateSubscriptionLimits);
  const { handleConvexError } = useConvexErrorHandler();
  
  // Step state
  const [currentStep, setCurrentStep] = React.useState(1);
  
  // Search definition state
  const [searchName, setSearchName] = React.useState('');
  const [searchObjective, setSearchObjective] = React.useState('');
  const [selectedSources, setSelectedSources] = React.useState<string[]>([]);
  
  // Search criteria state
  const [searchCriteria, setSearchCriteria] = React.useState<SearchCriteria>({
    industry: '',
    location: '',
    companySize: '1-100',
    jobTitles: [],
    keywords: ''
  });
  const [customIndustry, setCustomIndustry] = React.useState('');
  
  // Contact preferences state
  const [contactPreferences, setContactPreferences] = React.useState<ContactPreferences>({
    includeEmails: true,
    includePhones: true,
    includeLinkedIn: false
  });
  
  // Validation criteria state
  const [validationCriteria, setValidationCriteria] = React.useState<ValidationCriteria>({
    mustHaveWebsite: true,
    mustHaveContactInfo: true,
    mustHaveSpecificKeywords: [],
    mustBeInIndustry: true,
    customValidationRules: ''
  });
  
  // Search execution state
  const [isSearching, setIsSearching] = React.useState(false);
  const [searchProgress, setSearchProgress] = React.useState(0);
  const [currentStatus, setCurrentStatus] = React.useState('');
  const [searchResults, setSearchResults] = React.useState<SearchResults | null>(null);
  const [showVerification, setShowVerification] = React.useState(false);
  const [currentSearchId, setCurrentSearchId] = React.useState<string | null>(null);
  const [devMode, setDevMode] = React.useState(false);

  // Convex actions and queries
  const createLeadSearch = useAction(api.hunterActions.createLeadSearch);
  const getSearchStatus = useAction(api.hunterActions.getSearchStatus);
  const userUsageStats = useQuery(api.rateLimitHelpers.getUserUsageStats, 
    user?.id ? { userId: user.id } : "skip"
  );

  // Auto-fill function for dev mode
  React.useEffect(() => {
    if (devMode) {
      setSearchName('Belfast Roofing Contractors Q4');
      setSearchObjective('Finding roofing contractors and construction companies in Belfast area for partnership opportunities');
      setSelectedSources(['web']);
      setSearchCriteria({
        industry: 'Other',
        location: 'Belfast, Northern Ireland',
        companySize: '1-10',
        jobTitles: ['Business Owner', 'Operations Manager'],
        keywords: 'roofing, roof repair, slate, tiles, guttering, Belfast'
      });
      setCustomIndustry('Roofing & Construction');
      setContactPreferences({
        includeEmails: true,
        includePhones: true,
        includeLinkedIn: false
      });
      setValidationCriteria({
        mustHaveWebsite: true,
        mustHaveContactInfo: true,
        mustHaveSpecificKeywords: ['roofing', 'contractor', 'Belfast'],
        mustBeInIndustry: true,
        customValidationRules: 'Must offer residential or commercial roofing services'
      });
    }
  }, [devMode]);

  // Create test subscription and update limits on mount
  React.useEffect(() => {
    if (user?.id) {
      createTestSubscription({ userId: user.id })
        .then(() => {
          return updateSubscriptionLimits({ userId: user.id });
        })
        .catch((err) => {
          console.log("Subscription handling:", err.message);
          updateSubscriptionLimits({ userId: user.id }).catch(console.error);
        });
    }
  }, [user?.id, createTestSubscription, updateSubscriptionLimits]);

  // Handler functions
  const handleSourceSelect = (sourceId: string) => {
    if (selectedSources.includes(sourceId)) {
      setSelectedSources(selectedSources.filter(s => s !== sourceId));
    } else {
      setSelectedSources([...selectedSources, sourceId]);
    }
  };

  const toggleJobTitle = (title: string) => {
    setSearchCriteria(prev => ({
      ...prev,
      jobTitles: prev.jobTitles.includes(title)
        ? prev.jobTitles.filter(t => t !== title)
        : [...prev.jobTitles, title]
    }));
  };

  const canStartSearch = () => {
    if (!searchName || !searchObjective || selectedSources.length === 0 || 
        !searchCriteria.industry || !searchCriteria.location) {
      return false;
    }
    if (searchCriteria.location.toLowerCase() === searchCriteria.industry.toLowerCase()) {
      return false;
    }
    if (searchName.toLowerCase() === searchCriteria.industry.toLowerCase()) {
      return false;
    }
    return true;
  };

  const startSearch = async () => {
    if (!user?.id) {
      toast.error('Please sign in to start a search');
      return;
    }

    setIsSearching(true);
    setCurrentStep(5);
    setCurrentStatus('Initializing search...');
    setSearchProgress(10);
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    setShowVerification(true);
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerification(false);
    
    if (!user?.id) {
      toast.error('Please sign in to continue');
      return;
    }

    try {
      const searchConfig = {
        searchName,
        searchObjective,
        selectedSources,
        industry: searchCriteria.industry === 'Other' ? customIndustry : searchCriteria.industry,
        location: searchCriteria.location,
        companySize: searchCriteria.companySize || '1-100',
        jobTitles: searchCriteria.jobTitles,
        keywords: searchCriteria.keywords,
        includeEmails: contactPreferences.includeEmails,
        includePhones: contactPreferences.includePhones,
        includeLinkedIn: contactPreferences.includeLinkedIn,
        validationCriteria: {
          mustHaveWebsite: validationCriteria.mustHaveWebsite,
          mustHaveContactInfo: validationCriteria.mustHaveContactInfo,
          mustHaveSpecificKeywords: validationCriteria.mustHaveSpecificKeywords,
          mustBeInIndustry: validationCriteria.mustBeInIndustry,
          customValidationRules: validationCriteria.customValidationRules,
        },
      };

      const result = await createLeadSearch({
        userId: user.id,
        searchConfig,
      });

      setCurrentSearchId(result.searchId);
      pollSearchProgress(result.searchId);
      
    } catch (error) {
      console.error('Search creation failed:', error);
      setCurrentStatus('Search failed: ' + (error.message || 'Unknown error'));
      setIsSearching(false);
      handleConvexError(error);
    }
  };

  // Poll search progress
  const pollSearchProgress = async (searchId: string) => {
    const maxAttempts = 60;
    let attempts = 0;
    let lastProgress = 0;
    let stuckCounter = 0;

    const poll = async () => {
      if (attempts >= maxAttempts) {
        setCurrentStatus('Search timed out - please check back later');
        setIsSearching(false);
        return;
      }

      try {
        const status = await getSearchStatus({ searchId });
        
        const newProgress = status.progress || 0;
        if (newProgress > lastProgress) {
          const increment = (newProgress - lastProgress) / 10;
          for (let i = 1; i <= 10; i++) {
            setTimeout(() => {
              setSearchProgress(prev => Math.min(prev + increment, newProgress));
            }, i * 50);
          }
          lastProgress = newProgress;
          stuckCounter = 0;
        } else {
          stuckCounter++;
          if (stuckCounter > 6) {
            setCurrentStatus(status.currentStage + ' (this may take a while...)');
          }
        }

        setCurrentStatus(status.currentStage || 'Processing...');

        if (status.status === 'completed') {
          setSearchProgress(100);
          setSearchResults({
            totalLeads: status.totalLeads || 0,
            verifiedEmails: status.verifiedEmails || 0,
            verifiedPhones: status.verifiedPhones || 0,
            businessWebsites: status.businessWebsites || 0,
            avgResponseRate: status.avgResponseRate || '0%',
            searchTime: status.searchTime || '0m 0s'
          });
          setIsSearching(false);
          setCurrentStep(6);
          return;
        } else if (status.status === 'failed') {
          setCurrentStatus('Search failed: ' + (status.error || 'Unknown error'));
          setIsSearching(false);
          
          toast.error('Search failed. Click to retry', {
            action: {
              label: 'Retry',
              onClick: () => {
                setCurrentStep(4);
                setSearchProgress(0);
                setCurrentStatus('');
              }
            },
            duration: 10000
          });
          return;
        }

        attempts++;
        const pollInterval = newProgress > 90 ? 5000 : 10000;
        setTimeout(poll, pollInterval);
        
      } catch (error) {
        console.error('Error polling search status:', error);
        attempts++;
        
        if (attempts > 3) {
          setCurrentStatus('Connection issue - retrying...');
        }
        
        setTimeout(poll, 15000);
      }
    };

    poll();
  };

  const handleStepChange = (step: number) => {
    if (step < currentStep) {
      setCurrentStep(step);
    }
  };

  // Create step props object
  const stepProps: StepProps = {
    currentStep,
    setCurrentStep,
    searchName,
    setSearchName,
    searchObjective,
    setSearchObjective,
    selectedSources,
    setSelectedSources,
    searchCriteria,
    setSearchCriteria,
    customIndustry,
    setCustomIndustry,
    contactPreferences,
    setContactPreferences,
    validationCriteria,
    setValidationCriteria,
    isSearching,
    setIsSearching,
    searchProgress,
    setSearchProgress,
    currentStatus,
    setCurrentStatus,
    searchResults,
    setSearchResults,
    currentSearchId,
    setCurrentSearchId,
    showVerification,
    setShowVerification,
    devMode,
    setDevMode,
    handleSourceSelect,
    toggleJobTitle,
    canStartSearch,
    startSearch,
    handleVerificationComplete,
    handleStepChange,
    userUsageStats,
    createLeadSearch,
    getSearchStatus,
    leadSources,
    industries,
    jobTitles
  };

  return (
    <TooltipProvider>
      <div className="min-h-screen bg-violet-400 relative pb-8" style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}>
      {/* Dev Mode Toggle */}
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-4 right-4 z-50">
          <Button
            onClick={() => setDevMode(!devMode)}
            className={`h-10 px-4 text-sm font-black uppercase ${
              devMode 
                ? 'bg-green-500 hover:bg-green-600 text-white' 
                : 'bg-gray-200 hover:bg-gray-300 text-black'
            } border-2 border-black`}
          >
            DEV MODE {devMode ? 'ON' : 'OFF'}
          </Button>
        </div>
      )}
      
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <div className="w-full max-w-4xl space-y-8">
          {/* Persistent Title Card */}
          <Card className="transform -rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-violet-600 border-2 border-black flex items-center justify-center">
                <UilSearch className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-violet-500 border-2 border-black flex items-center justify-center">
                <UilCrosshair className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-pink-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-violet-600 hover:bg-violet-700 border-4 border-black p-0">
                  {currentStep === 1 && <UilSearch className="h-12 w-12 text-white" />}
                  {currentStep === 2 && <UilBuilding className="h-12 w-12 text-white" />}
                  {currentStep === 2.5 && <UilFilter className="h-12 w-12 text-white" />}
                  {currentStep === 2.75 && <UilCrosshair className="h-12 w-12 text-white" />}
                  {currentStep === 3 && <UilUserCheck className="h-12 w-12 text-white" />}
                  {currentStep === 3.5 && <UilFilter className="h-12 w-12 text-white" />}
                  {currentStep === 4 && <UilPlay className="h-12 w-12 text-white" />}
                  {currentStep === 5 && <UilAnalytics className="h-12 w-12 text-white" />}
                  {currentStep === 6 && <UilCheckCircle className="h-12 w-12 text-white" />}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'SEARCH DEFINITION'}
                {currentStep === 2 && 'INDUSTRY & LOCATION'}
                {currentStep === 2.5 && 'COMPANY DETAILS'}
                {currentStep === 2.75 && 'SEARCH KEYWORDS'}
                {currentStep === 3 && 'CONTACT PREFERENCES'}
                {currentStep === 3.5 && 'VALIDATION CRITERIA'}
                {currentStep === 4 && 'SEARCH PREVIEW'}
                {currentStep === 5 && 'SEARCHING LEADS'}
                {currentStep === 6 && 'SEARCH COMPLETE'}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'DEFINE YOUR SEARCH OBJECTIVES'}
                {currentStep === 2 && 'SET TARGET MARKET & GEOGRAPHY'}
                {currentStep === 2.5 && 'SPECIFY COMPANY PROFILE'}
                {currentStep === 2.75 && 'REFINE WITH KEYWORDS'}
                {currentStep === 3 && 'CHOOSE CONTACT INFORMATION'}
                {currentStep === 3.5 && 'SET VALIDATION RULES'}
                {currentStep === 4 && 'REVIEW AND LAUNCH SEARCH'}
                {currentStep === 5 && 'FINDING YOUR PERFECT CUSTOMERS'}
                {currentStep === 6 && 'YOUR LEADS ARE READY'}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-violet-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-violet-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-violet-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {/* Step Components */}
          {currentStep === 1 && <SearchDefinitionStep {...stepProps} />}
          {currentStep === 2 && <IndustryLocationStep {...stepProps} />}
          {currentStep === 2.5 && <CompanyDetailsStep {...stepProps} />}
          {currentStep === 2.75 && <SearchKeywordsStep {...stepProps} />}
          {currentStep === 3 && <ContactPreferencesStep {...stepProps} />}
          {currentStep === 3.5 && <ValidationCriteriaStep {...stepProps} />}
          {currentStep === 4 && <SearchPreviewStep {...stepProps} />}
          {currentStep === 5 && <SearchProgressStep {...stepProps} />}
          {currentStep === 6 && <SearchResultsStep {...stepProps} />}
        </div>
        
        {/* Info Sections - Only on Step 1 */}
        {currentStep === 1 && <SearchDefinitionInfoSections />}
      </div>



      {/* Verification Modal */}
      {showVerification && (
        <VerificationModal
          isOpen={showVerification}
          onClose={() => setShowVerification(false)}
          onComplete={handleVerificationComplete}
          devMode={devMode}
        />
      )}
      
      <div className="mt-8">
        <OnboardingFooter />
      </div>
    </div>
    </TooltipProvider>
  );
}


================================================
FILE: procedural/page.tsx
================================================
'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Slider } from '@/components/ui/slider';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
// The OnboardingFooter is no longer needed.
// import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { UilMicrophone, UilMusic, UilInfoCircle, UilArrowRight, UilArrowLeft, UilPlay, UilCheck, UilDownloadAlt, UilSpinner } from '@tooni/iconscout-unicons-react';
import { Star15 } from '@/components/ui/star';
import { Progress } from '@/components/ui/progress';
import { useMutation, useQuery } from 'convex/react';
import { api } from '../../../../convex/_generated/api';
import type { Id } from '../../../../convex/_generated/dataModel';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { AudioGenerationProgress } from '@/components/onboarding/procedural/AudioGenerationProgress';

interface AudioConfig {
  prompt: string;
  duration: number;
  intensity: number;
  name: string;
}

interface AudioJob {
  _id: Id<"proceduralAudioJobs">;
  jobId: string;
  userId: string;
  config: AudioConfig;
  status: "pending" | "processing" | "completed" | "failed";
  audioUrl?: string;
  audioId?: string;
  fileName?: string;
  fileSize?: number;
  metadata?: {
    size: string;
    duration: string;
    quality: string;
    format: string;
  };
  error?: string;
  createdAt: number;
  startedAt?: number;
  completedAt?: number;
  processingTime?: number;
}

interface GeneratedAudio {
  id: string;
  url: string;
  config: AudioConfig;
  metadata: {
    size: string;
    duration: string;
    quality: string;
  };
}

export default function ProceduralAudioGenerator() {
  const [currentStep, setCurrentStep] = useState(1);
  const [audioConfig, setAudioConfig] = useState<AudioConfig>({
    prompt: "a quiet coffee shop with gentle background chatter and the soft clinking of ceramic cups and saucers",
    duration: 30,
    intensity: 0.7,
    name: 'Coffee Shop Ambiance'
  });
  const [selectedPreset, setSelectedPreset] = useState<string | null>(null);
  const [jobId, setJobId] = useState<string | null>(null);
  const [generatedAudio, setGeneratedAudio] = useState<GeneratedAudio | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [devMode, setDevMode] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [showGenerationModal, setShowGenerationModal] = useState(false);
  const [modalProgress, setModalProgress] = useState(0);
  const [modalStatus, setModalStatus] = useState<'generating' | 'verifying' | 'completed' | 'error'>('generating');

  // Convex hooks
  const createJob = useMutation(api.proceduralAudio.createJob);
  const getJob = useQuery(api.proceduralAudio.getJob, jobId ? { jobId } : "skip");
  const userId = "current-user"; // Replace with actual user ID from auth

  // Auto-select coffee shop preset for dev mode
  useEffect(() => {
    if (devMode) {
      setAudioConfig({
        prompt: "a cozy coffee shop with gentle background chatter, soft jazz music, and the occasional clinking of ceramic coffee cups and saucers",
        duration: 30,
        intensity: 0.8,
        name: 'Dev Coffee Shop'
      });
      setSelectedPreset('cozy-cafe');
    }
  }, [devMode]);

  // Coffee shop presets
  const coffeeShopPresets = [
    {
      id: 'cozy-cafe',
      name: 'Cozy Café',
      config: {
        prompt: "a cozy coffee shop with gentle background chatter, soft jazz music, and the occasional clinking of coffee cups",
        duration: 30,
        intensity: 0.6,
        name: 'Cozy Café'
      }
    },
    {
      id: 'busy-coffee',
      name: 'Busy Coffee Shop',
      config: {
        prompt: "a bustling coffee shop with energetic conversations, espresso machine sounds, and constant cup clinking",
        duration: 30,
        intensity: 0.9,
        name: 'Busy Coffee Shop'
      }
    },
    {
      id: 'quiet-morning',
      name: 'Quiet Morning Coffee',
      config: {
        prompt: "a peaceful morning coffee shop with soft instrumental music and gentle cup stirring sounds",
        duration: 30,
        intensity: 0.4,
        name: 'Quiet Morning Coffee'
      }
    },
    {
      id: 'cups-clinking',
      name: 'Cups Clinking Focus',
      config: {
        prompt: "coffee shop ambiance focused on the rhythmic clinking of ceramic cups and saucers with soft background chatter",
        duration: 30,
        intensity: 0.8,
        name: 'Cups Clinking Focus'
      }
    }
  ];

  const canProceed = () => {
    switch (currentStep) {
      case 1:
        return audioConfig.name.trim() !== '';
      case 2:
        // The primary action button is now 'Create', not 'Continue'
        return selectedPreset !== null;
      case 3:
        return getJob?.status === 'completed' || getJob?.status === 'failed';
      case 4:
        return generatedAudio !== null;
      default:
        return true;
    }
  };

  // Update generated audio when job completes
  useEffect(() => {
    if (getJob && getJob.status === 'completed' && getJob.audioUrl) {
      setGeneratedAudio({
        id: getJob.jobId,
        url: getJob.audioUrl,
        config: getJob.config,
        metadata: {
          size: getJob.metadata?.size || 'Unknown',
          duration: `${getJob.config.duration}s`,
          quality: getJob.metadata?.quality || '44.1kHz/16-bit'
        }
      });
      
      setModalStatus('completed');
      setModalProgress(100);
      
    } else if (getJob && getJob.status === 'failed') {
      setError(getJob.error || 'Failed to generate audio');
      setModalStatus('error');
    }
  }, [getJob]);

  // Simulate progress during generation
  useEffect(() => {
    if (jobId && getJob?.status === 'processing') {
      const progressInterval = setInterval(() => {
        setModalProgress(prev => {
          const newProgress = Math.min(prev + 10, 90);
          return newProgress;
        });
      }, 500);
      
      return () => clearInterval(progressInterval);
    }
  }, [jobId, getJob?.status]);

  const handleGenerateAudio = async () => {
    if (!canProceed()) return;
    setError(null);
    setShowGenerationModal(true);
    setModalStatus('generating');
    setModalProgress(0);
    
    try {
      const newJobId = await createJob({
        config: audioConfig,
        userId
      });
      setJobId(newJobId);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create job');
      setModalStatus('error');
    }
  };

  const handleGenerationComplete = () => {
    setShowGenerationModal(false);
    setCurrentStep(3);
  };

  const handleModalVerify = () => {
    setModalStatus('verifying');
    setTimeout(() => {
      setModalStatus('completed');
      setTimeout(() => {
        setShowGenerationModal(false);
        setCurrentStep(3);
      }, 1500);
    }, 1000);
  };

  const handleModalClose = () => {
    setShowGenerationModal(false);
    setCurrentStep(3);
  };

  const handleModalDownload = () => {
    handleDownload();
  };

  const handleContinue = () => {
    if (currentStep < 3) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleDownload = () => {
    if (generatedAudio?.url) {
      const link = document.createElement('a');
      link.href = generatedAudio.url;
      link.download = `${audioConfig.name.replace(/\s+/g, '-')}.wav`;
      link.click();
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <Card className="transform -rotate-1">
            <CardContent className="p-8">
              <div className="text-center mb-8">
                <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                  COFFEE SHOP AUDIO
                </h1>
                <p className="text-lg text-gray-700 mt-2">
                  Create ambient coffee shop sounds with cups clinking
                </p>
              </div>

              <div className="space-y-6">
                <div>
                  <label className="text-xl font-black uppercase mb-3 block">
                    Scene Name
                  </label>
                  <Input
                    value={audioConfig.name}
                    onChange={(e) => setAudioConfig({...audioConfig, name: e.target.value})}
                    placeholder="e.g., Morning Coffee Shop, Cozy Café"
                    className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
                  />
                </div>

                <div>
                  <label className="text-xl font-black uppercase mb-3 block">
                    Coffee Shop Description
                  </label>
                  <textarea
                    value={audioConfig.prompt}
                    onChange={(e) => setAudioConfig({...audioConfig, prompt: e.target.value})}
                    placeholder="Describe the coffee shop scene..."
                    className="w-full h-24 text-lg font-semibold border-4 border-black rounded-[3px] p-3"
                  />
                </div>

                <div>
                  <label className="text-xl font-black uppercase mb-3 block">
                    Intensity: {(audioConfig.intensity * 100).toFixed(0)}%
                  </label>
                  <Slider
                    value={[audioConfig.intensity]}
                    onValueChange={(value) => setAudioConfig({...audioConfig, intensity: value[0]})}
                    min={0.1}
                    max={1}
                    step={0.1}
                    className="mb-2"
                  />
                  <p className="text-sm text-gray-600">10% - 100% ambiance intensity</p>
                </div>

                <Card className="bg-yellow-100 border-2 border-black">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">COFFEE SHOP TIP</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Higher intensity adds more cup clinking and background chatter. Lower intensity creates a more peaceful atmosphere.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={handleContinue}
                    disabled={!canProceed()}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        );

      case 2:
        return (
          <Card className="transform rotate-1">
            <CardContent className="p-8">
              <div className="text-center mb-8">
                <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                  GENERATE AUDIO
                </h1>
                <p className="text-lg text-gray-700 mt-2">
                  Choose a preset or create your custom coffee shop ambiance
                </p>
              </div>

              {error && (
                <Card className="bg-red-100 border-2 border-red-500 mb-6">
                  <CardContent className="p-4">
                    <p className="text-red-700 font-bold">Error: {error}</p>
                  </CardContent>
                </Card>
              )}

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-8">
                {coffeeShopPresets.map((preset) => (
                  <div key={preset.id} className="relative">
                    {selectedPreset === preset.id && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 z-20" 
                           style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} 
                                    className="w-20 h-20 sm:w-24 sm:h-24" 
                                    stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] uppercase tracking-wider transform rotate-12"
                                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        selectedPreset === preset.id ? 'bg-purple-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => {
                        setSelectedPreset(preset.id);
                        setAudioConfig(preset.config);
                      }}
                    >
                      <CardContent className="p-6">
                        <h4 className="font-black uppercase text-xl mb-2">{preset.name}</h4>
                        <p className="text-sm text-gray-600 mb-3">
                          {preset.config.duration}s • {Math.round(preset.config.intensity * 100)}% intensity
                        </p>
                        <p className="text-sm text-gray-700">{preset.config.prompt.substring(0, 80)}...</p>
                      </CardContent>
                    </Card>
                  </div>
                ))}
              </div>

              {/* Fixed: Both buttons now have the same variant and styling */}
              <div className="flex flex-col sm:flex-row gap-4 mt-8">
                <Button
                  variant="default"
                  className="w-1/2 h-14 text-lg font-black uppercase bg-purple-500 hover:bg-purple-600 text-white"
                  onClick={() => setCurrentStep(1)}
                >
                  <UilArrowLeft className="mr-2 h-6 w-6" />
                  BACK
                </Button>
                <Button
                  variant="default"
                  className="w-1/2 h-14 text-lg font-black uppercase bg-purple-500 hover:bg-purple-600 text-white"
                  onClick={handleGenerateAudio}
                  disabled={getJob?.status === 'processing' || getJob?.status === 'pending' || !canProceed()}
                >
                  {getJob?.status === 'processing' ? (
                    <>
                      <UilSpinner className="mr-2 h-5 w-5 animate-spin" />
                      BREWING...
                    </>
                  ) : getJob?.status === 'pending' ? (
                    <>
                      <UilSpinner className="mr-2 h-5 w-5 animate-spin" />
                      QUEUED...
                    </>
                  ) : (
                    <>
                      <UilMicrophone className="mr-2 h-5 w-5" />
                      CREATE COFFEE SHOP AUDIO
                    </>
                  )}
                </Button>
              </div>

              {getJob?.status === 'processing' && (
                <div className="mt-6">
                  <Progress value={getJob.progress || 50} className="h-4" />
                  <p className="text-center text-lg mt-2">
                    {getJob.currentStage || 'Creating your coffee shop ambiance...'}
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        );

      case 3:
        if (getJob?.status === 'processing' || getJob?.status === 'pending') {
          return (
            <AudioGenerationProgress
              progress={modalProgress}
              status={getJob?.currentStage || 'Creating your coffee shop ambiance...'}
              audioName={audioConfig.name}
            />
          );
        }
        
        return (
          <Card className="transform -rotate-1">
            <CardContent className="p-8">
              <div className="text-center mb-8">
                <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                  ENJOY
                </h1>
                <p className="text-lg text-gray-700 mt-2">
                  Your coffee shop ambiance is ready
                </p>
              </div>

              {generatedAudio && (
                <div className="space-y-6">
                  <div className="text-center">
                    <div className="w-20 h-20 bg-purple-500 border-4 border-black mx-auto mb-4 flex items-center justify-center">
                      <UilCheck className="h-10 w-10 text-white" />
                    </div>
                    <h3 className="text-2xl font-black uppercase">Audio Generated Successfully!</h3>
                  </div>

                  <Card className="bg-purple-50 border-2 border-black">
                    <CardContent className="p-6">
                      <h4 className="text-xl font-black uppercase mb-4">Your Coffee Shop Audio</h4>
                      <div className="space-y-3">
                        <div className="flex justify-between">
                          <span className="font-bold">Name:</span>
                          <span>{generatedAudio.config.name}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="font-bold">Type:</span>
                          <span>Coffee Shop Ambiance</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="font-bold">Duration:</span>
                          <span>{generatedAudio.config.duration} seconds</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="font-bold">File Size:</span>
                          <span>{generatedAudio.metadata.size}</span>
                        </div>
                      </div>

                      {generatedAudio.url && (
                        <div className="mt-4">
                          <audio controls className="w-full">
                            <source src={generatedAudio.url} type="audio/wav" />
                            Your browser does not support the audio element.
                          </audio>
                        </div>
                      )}
                    </CardContent>
                  </Card>

                  {/* FIX: Replaced 'Use in Project' with 'Create Another' for clear navigation */}
                  <div className="flex gap-4">
                    <Button
                      variant="neutral"
                      className="flex-1 h-14 text-lg font-black uppercase bg-white hover:bg-gray-100 text-black border-4 border-black"
                      onClick={() => setCurrentStep(1)}
                    >
                      <UilArrowLeft className="mr-2 h-5 w-5" />
                      Create Another
                    </Button>
                    <Button
                      className="flex-1 h-14 text-lg font-black uppercase bg-purple-500 hover:bg-purple-600 text-white"
                      onClick={handleDownload}
                      disabled={!generatedAudio.url}
                    >
                      <UilDownloadAlt className="mr-2 h-5 w-5" />
                      Download Audio
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        );
      default:
        return null;
    }
  };

  return (
    <TooltipProvider>
      <div
        className="min-h-screen bg-purple-500 relative pb-8"
        style={{
          fontFamily: 'Noyh-Bold, sans-serif',
          backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
          backgroundSize: '60px 60px'
        }}
      >
        {/* Dev Mode Toggle */}
        {process.env.NODE_ENV === 'development' && (
          <div className="fixed top-4 right-4 z-50">
            <Button
              onClick={() => setDevMode(!devMode)}
              className={`h-10 px-4 text-sm font-black uppercase ${
                devMode
                  ? 'bg-green-500 hover:bg-green-600 text-white'
                  : 'bg-gray-200 hover:bg-gray-300 text-black'
              } border-2 border-black`}
            >
              DEV MODE {devMode ? 'ON' : 'OFF'}
            </Button>
          </div>
        )}

        <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
          <div className="w-full max-w-4xl space-y-8">
            {/* Persistent Title Card */}
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardHeader className="relative">
                {/* Decorative elements */}
                <div className="absolute top-2 left-4 w-8 h-8 bg-purple-600 border-2 border-black flex items-center justify-center">
                  <UilMicrophone className="h-4 w-4 text-white" />
                </div>
                <div className="absolute top-2 right-4 w-8 h-8 bg-purple-500 border-2 border-black flex items-center justify-center">
                  <UilMusic className="h-4 w-4 text-white" />
                </div>
                <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                  <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
                </div>
                <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
                
                {/* Central icon */}
                <div className="flex justify-center mb-4">
                  <Button className="w-20 h-20 bg-purple-600 hover:bg-purple-700 border-4 border-black p-0">
                    {currentStep === 1 && <UilMusic className="h-12 w-12 text-white" />}
                    {currentStep === 2 && <UilMicrophone className="h-12 w-12 text-white" />}
                    {currentStep === 3 && <UilCheck className="h-12 w-12 text-white" />}
                  </Button>
                </div>
                
                {/* Dynamic title */}
                <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                  {currentStep === 1 && 'DESIGN'}
                  {currentStep === 2 && 'GENERATE'}
                  {currentStep === 3 && 'COMPLETE'}
                </CardTitle>
                
                {/* Subtitle */}
                <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                  {currentStep === 1 && 'Create your coffee shop ambiance'}
                  {currentStep === 2 && 'Generate your audio'}
                  {currentStep === 3 && 'Your audio is ready'}
                </p>
                
                {/* Animated decorative bars */}
                <div className="flex justify-center items-center mt-3 gap-2">
                  <div className="w-3 h-3 bg-purple-600 animate-pulse"></div>
                  <div className="w-2 h-6 bg-black"></div>
                  <div className="w-4 h-4 bg-purple-500 animate-pulse delay-150"></div>
                  <div className="w-2 h-8 bg-black"></div>
                  <div className="w-3 h-3 bg-purple-600 animate-pulse delay-300"></div>
                </div>
              </CardHeader>
            </Card>

            {/* Step Content */}
            {renderStepContent()}

            {/* FIX: OnboardingFooter component has been removed entirely. */}
            
            {/* Verification Modal */}
            <VerificationModal
              isOpen={showGenerationModal}
              onClose={handleModalClose}
              onComplete={(email, phone) => {
                // Handle verification completion
                setShowGenerationModal(false);
                setCurrentStep(3);
              }}
              devMode={devMode}
            />

          </div>
        </div>
      </div>
    </TooltipProvider>
  );
}


================================================
FILE: rag/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { UilDatabase, UilBrain, UilChart, UilSearch, UilCloudDownload, UilCog, UilCheckCircle, UilExport } from '@tooni/iconscout-unicons-react';
import { useTikTokContent } from '@/hooks/useTikTokContent';
import { useYouTubeContent } from '@/hooks/useYouTubeContent';
import { useTwitchContent } from '@/hooks/useTwitchContent';
import { useQuery } from 'convex/react';
import { api } from '@convex/_generated/api';

// Import step components
import { PlatformSelectionStep } from '@/components/onboarding/bulk/PlatformSelectionStep';
import { InputMethodStep } from '@/components/onboarding/bulk/InputMethodStep';
import { DocumentUploadStep } from '@/components/onboarding/bulk/DocumentUploadStep';
import { ContentSelectionStep } from '@/components/onboarding/bulk/ContentSelectionStep';
import { ModelSelectionStep } from '@/components/onboarding/bulk/ModelSelectionStep';
import { VectorDbSelectionStep } from '@/components/onboarding/bulk/VectorDbSelectionStep';
import { ProcessingStepConvex } from '@/components/onboarding/bulk/ProcessingStepConvex';

import { ExportStep } from '@/components/onboarding/bulk/ExportStep';
import { Platform, InputType, BulkOnboardingState, EmbeddingModel, VectorDatabase, ProcessingJob } from '@/components/onboarding/bulk/types';
import { VideoPreviewProvider } from '@/contexts/VideoPreviewContext';
import VerificationModal from '@/components/custom/modals/verification-modal';

export default function BulkOnboarding() {
  const [devMode, setDevMode] = React.useState(true);
  const [verificationOpen, setVerificationOpen] = React.useState(false);
  const [userContact, setUserContact] = React.useState<{email: string, phone: string} | null>(null);

  const [state, setState] = React.useState<BulkOnboardingState>({
    currentStep: 1,
    selectedPlatform: '',
    selectedInputMethod: '',
    channelUrl: '',
    pastedUrls: [],
    selectedContent: [],
    uploadedDocuments: [],
    selectedDocuments: [],
    uploadProgress: 0,
    selectedEmbeddingModel: null,
    selectedVectorDb: null,
    bulkSettings: {
      chunkSize: 1024,
      chunkOverlap: 100,
      maxTokens: 2048,
      // JINA V4 specific settings for transcript processing
      transcriptProcessing: {
        task: 'retrieval.passage',
        lateChunking: true,
        multiVector: false,
        optimizeForRag: true,
        dimensions: 1024,
      },
    },
    processingJob: null,
    exportFormat: 'json',
    isLoading: false,
    loadProgress: 0,
    isProcessing: false,
    processProgress: 0,
    isTranscriptMode: false,
  });

  // Content hooks
  const {
    user: tiktokUser,
    userLoading: tiktokUserLoading,
    userError: tiktokUserError,
    fetchUser: fetchTikTokUser,
    videos: tiktokVideos,
    videosLoading: tiktokVideosLoading,
    videosError: tiktokVideosError,
    fetchVideos: fetchTikTokVideos,
  } = useTikTokContent();

  const {
    channel: youtubeChannel,
    channelLoading: youtubeChannelLoading,
    channelError: youtubeChannelError,
    fetchChannel: fetchYouTubeChannel,
    videos: youtubeVideos,
    videosLoading: youtubeVideosLoading,
    videosError: youtubeVideosError,
    fetchVideos: fetchYouTubeVideos,
  } = useYouTubeContent();

  const {
    channel: twitchChannel,
    channelLoading: twitchChannelLoading,
    channelError: twitchChannelError,
    channelDataComplete: twitchChannelDataComplete,
    fetchChannel: fetchTwitchChannel,
    videos: twitchVideos,
    videosLoading: twitchVideosLoading,
    videosError: twitchVideosError,
    fetchVideos: fetchTwitchVideos,
  } = useTwitchContent();

  // Rate limiting state
  const [lastDownloadTime, setLastDownloadTime] = React.useState<number>(0);
  const DOWNLOAD_COOLDOWN = 5000; // 5 seconds between batch downloads

  // Track if we've already attempted to fetch videos for this channel
  const fetchedChannelsRef = React.useRef<Set<string>>(new Set());

  const updateState = React.useCallback((updates: Partial<BulkOnboardingState>) => {
    setState(prevState => ({ ...prevState, ...updates }));
  }, []);

  const setCurrentStep = React.useCallback((step: number) => {
    updateState({ currentStep: step });
  }, [updateState]);

  // Auto-fetch YouTube videos when channel is loaded
  React.useEffect(() => {
    if (state.selectedPlatform === 'youtube' && youtubeChannel && !youtubeVideosLoading) {
      const channelId = youtubeChannel.channelId;
      
      if (!fetchedChannelsRef.current.has(channelId) && youtubeVideos.length === 0) {
        console.log('Auto-fetching YouTube videos for channel:', channelId);
        fetchedChannelsRef.current.add(channelId);
        fetchYouTubeVideos(channelId); // Increased limit for bulk processing
      }
    }
  }, [youtubeChannel, state.selectedPlatform, youtubeVideosLoading, youtubeVideos.length, fetchYouTubeVideos]);
  
  // Auto-fetch Twitch videos when channel is loaded
  React.useEffect(() => {
    if (state.selectedPlatform === 'twitch' && twitchChannel && !twitchVideosLoading) {
      const username = twitchChannel.username;
      
      if (!fetchedChannelsRef.current.has(username) && twitchVideos.length === 0) {
        console.log('Auto-fetching Twitch videos for channel:', username);
        fetchedChannelsRef.current.add(username);
        fetchTwitchVideos(username); // Increased limit for bulk processing
      }
    }
  }, [twitchChannel, state.selectedPlatform, twitchVideosLoading, twitchVideos.length, fetchTwitchVideos]);

  // Auto-fetch TikTok videos when user is loaded
  React.useEffect(() => {
    if (state.selectedPlatform === 'tiktok' && tiktokUser && !tiktokVideosLoading) {
      const username = tiktokUser.username;
      
      if (!fetchedChannelsRef.current.has(username) && tiktokVideos.length === 0) {
        console.log('Auto-fetching TikTok videos for user:', username);
        fetchedChannelsRef.current.add(username);
        fetchTikTokVideos(username); // Increased limit for bulk processing
      }
    }
  }, [tiktokUser, state.selectedPlatform, tiktokVideosLoading, tiktokVideos.length, fetchTikTokVideos]);

  // Dev mode auto-fill effect - pre-selects web platform with URLs
  React.useEffect(() => {
    if (devMode) {
      updateState({
        selectedPlatform: 'web',
        selectedInputMethod: 'urls', 
        pastedUrls: [
          'http://aeon.co/essays/beyond-humans-what-other-kinds-of-minds-might-be-out-there',
          'https://dergipark.org.tr/en/download/article-file/4570887'
        ],
        selectedEmbeddingModel: {
          id: 'jina-embeddings-v4',
          label: 'JINA EMBEDDER V4',
          Icon: null,
          color: 'bg-blue-600',
          tooltip: 'State-of-the-art multilingual embedding model optimized for RAG applications',
          dimensions: 1024,
          maxTokens: 8192,
          description: 'State-of-the-art multilingual embedding model with 1024 dimensions. Optimized for RAG applications with excellent performance across languages and domains.',
          mtebScore: 67.32,
          supportsLateChunking: true,
          supportsMultiVector: true,
          supportedTasks: ['retrieval.passage', 'retrieval.query', 'text-matching'],
          contextLength: 8192,
          version: 'v4',
          isTranscriptOptimized: true
        },
        selectedVectorDb: {
          id: 'convex',
          label: 'CONVEX',
          Icon: null,
          color: 'bg-purple-600',
          tooltip: 'Serverless vector database with real-time sync and built-in auth',
          description: 'Convex provides a serverless vector database with real-time synchronization, built-in authentication, and seamless integration with your application. Perfect for real-time RAG applications.',
          isPremium: false,
          hosting: 'Serverless',
          scalability: 'Auto-scaling',
          setup: 'One-click',
          bestFor: 'Real-time applications',
          pricing: 'Pay-as-you-go',
          features: ['Real-time sync', 'Built-in auth', 'Serverless', 'TypeScript SDK']
        }
      });
    }
  }, [devMode, updateState]);

  // Auto-fill web URLs when web platform is selected
  React.useEffect(() => {
    if (state.selectedPlatform === 'web') {
      updateState({
        selectedInputMethod: 'urls',
        pastedUrls: [
          'http://aeon.co/essays/beyond-humans-what-other-kinds-of-minds-might-be-out-there',
          'https://dergipark.org.tr/en/download/article-file/4570887'
        ]
      });
    }
  }, [state.selectedPlatform, updateState]);

  // Auto-stop loading when content is available
  React.useEffect(() => {
    if (state.isLoading && state.currentStep === 3) {
      if (state.selectedPlatform === 'tiktok' && !tiktokUserLoading && !tiktokVideosLoading) {
        if (tiktokVideos.length > 0 || tiktokVideosError) {
          console.log('[Bulk] TikTok loading complete, videos:', tiktokVideos.length);
          updateState({ isLoading: false });
        }
      }
      else if (state.selectedPlatform === 'youtube' && !youtubeChannelLoading && !youtubeVideosLoading) {
        if (youtubeVideos.length > 0 || youtubeVideosError) {
          console.log('[Bulk] YouTube loading complete, videos:', youtubeVideos.length);
          updateState({ isLoading: false });
        }
      }
      else if (state.selectedPlatform === 'twitch' && !twitchChannelLoading && !twitchVideosLoading) {
        if (twitchVideos.length > 0 || twitchVideosError) {
          console.log('[Bulk] Twitch loading complete, videos:', twitchVideos.length);
          updateState({ isLoading: false });
        }
      }
    }
  }, [state.isLoading, state.currentStep, state.selectedPlatform, tiktokUserLoading, tiktokVideosLoading, 
      tiktokVideos.length, tiktokVideosError, youtubeChannelLoading, youtubeVideosLoading, 
      youtubeVideos.length, youtubeVideosError, twitchChannelLoading, twitchVideosLoading,
      twitchVideos.length, twitchVideosError, updateState]);

  const handleLoadContent = async () => {
    // Rate limiting check
    const now = Date.now();
    if (now - lastDownloadTime < DOWNLOAD_COOLDOWN) {
      const waitTime = Math.ceil((DOWNLOAD_COOLDOWN - (now - lastDownloadTime)) / 1000);
      console.log(`[RateLimit] Please wait ${waitTime} seconds before loading more content`);
      return;
    }
    
    setLastDownloadTime(now);
    updateState({ isLoading: true, currentStep: 3 });
    
    if (state.selectedInputMethod === 'urls') {
      // Go to embedding model selection for URLs
      console.log('Processing URLs - going to embedding model selection');
      updateState({ 
        isLoading: false,
        currentStep: 4, // Go to embedding model selection
        selectedContent: state.pastedUrls // Keep as strings for URLs
      });
      return;
    }
    
    // Handle channel-based loading
    if (state.selectedPlatform === 'tiktok') {
      try {
        updateState({ loadProgress: 10 });
        console.log('Fetching TikTok user:', state.channelUrl);
        await fetchTikTokUser(state.channelUrl);
        updateState({ loadProgress: 100 });
      } catch (error) {
        console.error('Error loading TikTok content:', error);
        updateState({ isLoading: false });
      }
    } else if (state.selectedPlatform === 'youtube') {
      try {
        updateState({ loadProgress: 10 });
        let channelUrl = state.channelUrl;
        if (!state.channelUrl.includes('youtube.com') && !state.channelUrl.includes('youtu.be')) {
          if (state.channelUrl.startsWith('@')) {
            channelUrl = `https://youtube.com/${state.channelUrl}`;
          } else if (state.channelUrl.startsWith('UC') && state.channelUrl.length === 24) {
            channelUrl = `https://youtube.com/channel/${state.channelUrl}`;
          } else {
            channelUrl = `https://youtube.com/@${state.channelUrl}`;
          }
        }
        console.log('Fetching YouTube channel with URL:', channelUrl);
        await fetchYouTubeChannel(channelUrl);
        updateState({ loadProgress: 100 });
      } catch (error) {
        console.error('Error loading YouTube content:', error);
        updateState({ isLoading: false });
      }
    } else if (state.selectedPlatform === 'twitch') {
      try {
        updateState({ loadProgress: 10 });
        let channelUrl = state.channelUrl;
        if (!state.channelUrl.includes('twitch.tv')) {
          channelUrl = `https://twitch.tv/${state.channelUrl}`;
        }
        console.log('Fetching Twitch channel:', channelUrl);
        await fetchTwitchChannel(channelUrl);
        updateState({ loadProgress: 100 });
      } catch (error) {
        console.error('Error loading Twitch content:', error);
        updateState({ isLoading: false });
      }
    }
  };

  const handleStepChange = async (step: number) => {
    // Handle backwards navigation for URLs
    if (state.selectedInputMethod === 'urls') {
      if (step === 5) {
        // Go back to step 4 (embedding model) instead of step 3
        setCurrentStep(4);
        return;
      } else if (step === 4) {
        // Go back to step 2 (input method) instead of step 3
        setCurrentStep(2);
        return;
      } else if (step === 3) {
        // Skip content selection for URLs
        setCurrentStep(5);
        return;
      }
    }
    setCurrentStep(step);
  };

  const handleStartProcessing = () => {
    // Start processing immediately without verification
    console.log('Starting processing without verification...');
    // Pass empty contact for now, will get during processing
    setUserContact({ email: 'pending@verification.com', phone: '+0000000000' });
  };

  const handleVerificationComplete = (email: string, phone: string) => {
    setUserContact({ email, phone });
    setVerificationOpen(false);
    // Allow processing to continue with captured contact info
    console.log('Contact captured:', { email, phone });
  };

  const canProceedFromStep1 = () => state.selectedPlatform !== '';
  const canProceedFromStep2 = () => {
    let result;
    if (state.selectedInputMethod === 'urls') {
      result = state.pastedUrls.length > 0;
    } else if (state.selectedInputMethod === 'upload' || state.selectedPlatform === 'documents') {
      result = state.uploadedDocuments.length > 0;
    } else {
      result = state.channelUrl.trim() !== '';
    }
    
    console.log('Main page canProceedFromStep2:', {
      selectedInputMethod: state.selectedInputMethod,
      selectedPlatform: state.selectedPlatform,
      uploadedDocumentsLength: state.uploadedDocuments.length,
      pastedUrlsLength: state.pastedUrls.length,
      channelUrl: state.channelUrl,
      result
    });
    
    return result;
  };
  const canProceedFromStep3 = () => {
    // URLs skip step 3 entirely, so always proceed
    if (state.selectedInputMethod === 'urls') {
      return true;
    }
    return state.selectedContent.length > 0;
  };
  const canProceedFromStep4 = () => state.selectedEmbeddingModel !== null;
  const canProceedFromStep5 = () => state.selectedVectorDb !== null;

  const getStepTitle = () => {
    switch (state.currentStep) {
      case 1: return 'CHOOSE PLATFORM';
      case 2: return state.selectedPlatform === 'documents' ? 'UPLOAD DOCUMENTS' : 'INPUT METHOD';
      case 3: return state.isLoading ? 'LOADING CONTENT' : 'SELECT CONTENT';
      case 4: return 'SELECT EMBEDDING MODEL';
      case 5: return 'CHOOSE VECTOR DATABASE';
      case 6: return state.isProcessing ? 'PROCESSING CONTENT' : 'REVIEW & PROCESS';
      case 7: return 'VERIFY & TEST';
      case 8: return 'EXPORT & COMPLETE';
      default: return 'BULK PROCESSING';
    }
  };

  const getStepDescription = () => {
    switch (state.currentStep) {
      case 1: return 'SELECT YOUR CONTENT SOURCE';
      case 2: return state.selectedPlatform === 'documents' ? 'UPLOAD YOUR FILES FOR PROCESSING' : 'CHOOSE INPUT METHOD';
      case 3: return state.isLoading ? 'FETCHING CONTENT DATA' : 'CHOOSE CONTENT TO PROCESS';
      case 4: return 'CHOOSE YOUR EMBEDDING MODEL';
      case 5: return 'SELECT VECTOR DATABASE';
      case 6: return state.isProcessing ? 'CREATING VECTOR EMBEDDINGS' : 'CONFIGURE AND START PROCESSING';
      case 7: return 'TEST VECTOR DATABASE QUALITY';
      case 8: return 'EXPORT AND VISUALIZE RESULTS';
      default: return 'BULK VECTOR DATABASE CREATION';
    }
  };

  const getStepIcon = () => {
    switch (state.currentStep) {
      case 1: return <UilCloudDownload className="h-12 w-12 text-white" />;
      case 2: return state.selectedPlatform === 'documents' ? <UilCloudDownload className="h-12 w-12 text-white" /> : <UilCog className="h-12 w-12 text-white" />;
      case 3: return <UilChart className="h-12 w-12 text-white" />;
      case 4: return <UilBrain className="h-12 w-12 text-white" />;
      case 5: return <UilDatabase className="h-12 w-12 text-white" />;
      case 6: return <UilCog className="h-12 w-12 text-white" />;
      case 7: return <UilSearch className="h-12 w-12 text-white" />;
      case 8: return <UilExport className="h-12 w-12 text-white" />;
      default: return <UilDatabase className="h-12 w-12 text-white" />;
    }
  };

  return (
    <VideoPreviewProvider>
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-4 right-4 z-50">
          <Button
            onClick={() => setDevMode(!devMode)}
            className={`h-10 px-4 text-sm font-black uppercase ${
              devMode
                ? 'bg-green-500 hover:bg-green-600 text-white'
                : 'bg-gray-200 hover:bg-gray-300 text-black'
            } border-2 border-black`}
          >
            DEV MODE {devMode ? 'ON' : 'OFF'}
          </Button>
        </div>
      )}
      <div 
        className="min-h-screen bg-orange-500 relative pb-8" 
        style={{ 
          fontFamily: 'Noyh-Bold, sans-serif',
          backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
          backgroundSize: '60px 60px'
        }}
      >
        <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-orange-600 border-2 border-black flex items-center justify-center">
                <UilDatabase className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-orange-500 border-2 border-black flex items-center justify-center">
                <UilBrain className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-orange-600 hover:bg-orange-700 border-4 border-black p-0">
                  {getStepIcon()}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {getStepTitle()}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {getStepDescription()}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-orange-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-orange-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-orange-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {state.currentStep === 1 && (
            <PlatformSelectionStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}

          {state.currentStep === 2 && state.selectedPlatform === 'documents' && (
            <DocumentUploadStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}

          {state.currentStep === 2 && state.selectedPlatform !== 'documents' && (
            <InputMethodStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
              handleLoadContent={handleLoadContent}
            />
          )}

          {(state.currentStep === 3 && state.selectedPlatform !== 'documents' && state.selectedInputMethod !== 'urls') && (
            <ContentSelectionStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
              tiktokUser={tiktokUser}
              tiktokVideos={tiktokVideos}
              youtubeChannel={youtubeChannel}
              youtubeVideos={youtubeVideos}
              twitchChannel={twitchChannel}
              twitchVideos={twitchVideos}
              twitchChannelDataComplete={twitchChannelDataComplete}
            />
          )}

          {state.currentStep === 4 && (
            <ModelSelectionStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}

          {state.currentStep === 5 && (
            <VectorDbSelectionStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}

          {(state.currentStep === 6 || (state.selectedInputMethod === 'urls' && state.currentStep === 5)) && (
            <ProcessingStepConvex
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
              tiktokUser={tiktokUser}
              tiktokVideos={tiktokVideos}
              youtubeChannel={youtubeChannel}
              youtubeVideos={youtubeVideos}
              twitchChannel={twitchChannel}
              twitchVideos={twitchVideos}
              twitchChannelDataComplete={twitchChannelDataComplete}
              onStartProcessing={handleStartProcessing}
            />
          )}

          {/* Verification Modal */}
          <VerificationModal
            isOpen={verificationOpen}
            onClose={() => setVerificationOpen(false)}
            onComplete={handleVerificationComplete}
            devMode={devMode}
          />

          {state.currentStep === 7 && (
            <ExportStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}
        </div>

        <div className="mt-8">
          <OnboardingFooter />
        </div>
        </div>
      </div>
    </VideoPreviewProvider>
  );
}



================================================
FILE: rag/types.ts
================================================
export interface AdvancedSettings {
  chunkSize: number;
  overlap: number;
  embeddingModel: string;
  vectorStore: string;
}

export interface WorkflowStats {
  totalContent: string;
  charactersIndexed: string;
  embeddingsGenerated: string;
  indexSize: string;
  processingTime: string;
}

export interface SourceData {
  type: string;
  value: string;
  metadata?: {
    fileName?: string;
    fileSize?: number;
    content?: string;
  };
}

export type SourceType = 'youtube' | 'tiktok' | 'twitch' | 'documents' | 'urls' | 'csv';


================================================
FILE: rag/utils.ts
================================================
export const formatNumber = (num: number): string => {
  if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
  if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
  return num.toString();
};

export const calculateProcessingTime = (start?: string, end?: string): string => {
  if (!start || !end) return 'N/A';
  const duration = new Date(end).getTime() - new Date(start).getTime();
  const minutes = Math.floor(duration / 60000);
  const seconds = Math.floor((duration % 60000) / 1000);
  return `${minutes}m ${seconds}s`;
};

export const readFileContent = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (e) => resolve(e.target?.result as string);
    reader.onerror = reject;
    reader.readAsText(file);
  });
};


================================================
FILE: rag/components/InfoSectionStep1.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilBrain, UilRocket } from '@tooni/iconscout-unicons-react';

export function InfoSectionStep1() {
  return (
    <div className="space-y-6">
      <Card className="transform -rotate-1 relative overflow-hidden bg-cyan-50">
        <CardContent className="pt-6">
          <div className="flex items-start gap-4">
            <Button
              size="icon"
              variant="default"
              className="w-12 h-12 flex-shrink-0 bg-cyan-600 hover:bg-cyan-700 text-white border-black"
            >
              <UilBrain className="h-6 w-6 text-white" />
            </Button>
            <div className="flex-1">
              <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                RAG-POWERED INTELLIGENCE
              </h3>
              <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                Transform any knowledge source into a <span className="font-black text-cyan-600">queryable AI brain</span>. 
                Our RAG system processes millions of tokens to create semantic embeddings that power instant, accurate answers. 
                Your agents will have photographic memory of every document, video, or webpage you feed them.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Semantic search across all content</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Context-aware responses</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Multi-format support</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Real-time indexing</span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="transform rotate-1 relative overflow-hidden bg-cyan-50">
        <CardContent className="pt-6">
          <div className="flex items-start gap-4">
            <Button
              size="icon"
              variant="default"
              className="w-12 h-12 flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90 text-black"
            >
              <UilRocket className="h-6 w-6 text-black" />
            </Button>
            <div className="flex-1">
              <h3 className="text-xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                ENTERPRISE-SCALE PROCESSING
              </h3>
              <p className="text-gray-700 text-lg leading-relaxed">
                Process up to <span className="font-black text-cyan-600">10GB of knowledge per workflow</span> with our distributed infrastructure. 
                Advanced chunking algorithms ensure optimal retrieval performance while maintaining context. 
                Your data is vectorized using state-of-the-art embedding models for unmatched accuracy.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: rag/components/InfoSectionStep3.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilSetting } from '@tooni/iconscout-unicons-react';

export function InfoSectionStep3() {
  return (
    <div className="space-y-6">
      <Card className="transform -rotate-1 relative overflow-hidden bg-cyan-50">
        <CardContent className="pt-6">
          <div className="flex items-start gap-4">
            <Button
              size="icon"
              variant="default"
              className="w-12 h-12 flex-shrink-0 bg-cyan-600 hover:bg-cyan-700 text-white border-black"
            >
              <UilSetting className="h-6 w-6 text-white" />
            </Button>
            <div className="flex-1">
              <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                INTELLIGENT CHUNKING ENGINE
              </h3>
              <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                Our advanced chunking algorithms ensure <span className="font-black text-cyan-600">optimal context preservation</span> while maximizing retrieval accuracy. 
                Each chunk is carefully crafted to maintain semantic coherence, with intelligent overlap to prevent information loss at boundaries.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Smart boundary detection</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Context-aware chunking</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Metadata preservation</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Optimal embedding size</span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: rag/components/SocialMediaVideoDisplay.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
// Fallback skeleton component since @/components/ui/skeleton doesn't exist
const Skeleton = ({ className }: { className?: string }) => (
  <div className={`bg-gray-200 animate-pulse rounded ${className}`} />
);
import { Checkbox } from '@/components/ui/checkbox';
import { UilClock, UilEye, UilExclamationTriangle } from '@tooni/iconscout-unicons-react';
import { useAction } from 'convex/react';
import { api } from '@convex/_generated/api';
import { toast } from 'sonner';

interface Video {
  id: string;
  title: string;
  thumbnail: string;
  duration: string;
  viewCount?: string;
  url: string;
  channel?: string;
  publishedAt?: string;
  selected?: boolean;
}

interface SocialMediaVideoDisplayProps {
  sourceType: 'youtube' | 'tiktok' | 'twitch';
  channelUrl: string;
  onVideosLoaded?: (videos: Video[]) => void;
  onVideoSelectionChange?: (selectedVideos: Video[]) => void;
}

export function SocialMediaVideoDisplay({ 
  sourceType, 
  channelUrl, 
  onVideosLoaded, 
  onVideoSelectionChange 
}: SocialMediaVideoDisplayProps) {
  const [videos, setVideos] = React.useState<Video[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState<string | null>(null);
  const [selectedVideos, setSelectedVideos] = React.useState<Set<string>>(new Set());
  
  const fetchChannelVideos = useAction(api.ragActions.fetchChannelVideos);

  const isValidUrl = React.useCallback((url: string) => {
    if (!url.trim()) return false;
    
    const patterns = {
      youtube: /(?:youtube\.com|youtu\.be)/,
      tiktok: /(?:tiktok\.com|tiktok)/,
      twitch: /(?:twitch\.tv|twitch)/
    };
    
    return patterns[sourceType].test(url);
  }, [sourceType]);

  const loadVideos = React.useCallback(async () => {
    if (!channelUrl || !isValidUrl(channelUrl)) {
      setVideos([]);
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const result = await fetchChannelVideos({
        url: channelUrl,
        platform: sourceType,
        maxVideos: 50
      });

      if (result.videos && result.videos.length > 0) {
        const formattedVideos = result.videos.map((video: any) => ({
          id: video.id,
          title: video.title || 'Untitled Video',
          thumbnail: video.thumbnail || '/placeholder-thumbnail.jpg',
          duration: video.duration || 'N/A',
          viewCount: video.viewCount ? formatViewCount(video.viewCount) : undefined,
          url: video.url,
          channel: video.channel,
          publishedAt: video.publishedAt,
          selected: true
        }));

        setVideos(formattedVideos);
        setSelectedVideos(new Set(formattedVideos.map(v => v.id)));
        onVideosLoaded?.(formattedVideos);
        
        // Auto-select all videos by default
        const allSelected = formattedVideos.filter(v => v.selected);
        onVideoSelectionChange?.(allSelected);
      } else {
        setVideos([]);
        setError('No videos found. Please check the URL and try again.');
      }
    } catch (error) {
      console.error('Error loading videos:', error);
      setError('Failed to load videos. Please check the URL and try again.');
      toast.error('Failed to load videos');
    } finally {
      setLoading(false);
    }
  }, [channelUrl, sourceType, fetchChannelVideos, onVideosLoaded, isValidUrl, onVideoSelectionChange]);

  React.useEffect(() => {
    if (channelUrl && isValidUrl(channelUrl)) {
      const debounceTimer = setTimeout(() => {
        loadVideos();
      }, 1000);

      return () => clearTimeout(debounceTimer);
    }
  }, [channelUrl, loadVideos, isValidUrl]);

  const handleVideoToggle = (videoId: string) => {
    const newSelected = new Set(selectedVideos);
    if (newSelected.has(videoId)) {
      newSelected.delete(videoId);
    } else {
      newSelected.add(videoId);
    }
    setSelectedVideos(newSelected);
    
    const selectedVideoObjects = videos.filter(v => newSelected.has(v.id));
    onVideoSelectionChange?.(selectedVideoObjects);
  };

  const handleSelectAll = () => {
    if (selectedVideos.size === videos.length) {
      setSelectedVideos(new Set());
      onVideoSelectionChange?.([]);
    } else {
      setSelectedVideos(new Set(videos.map(v => v.id)));
      onVideoSelectionChange?.(videos);
    }
  };

  const formatViewCount = (count: number | string) => {
    const num = typeof count === 'string' ? parseInt(count) : count;
    if (num >= 1000000) {
      return `${(num / 1000000).toFixed(1)}M`;
    } else if (num >= 1000) {
      return `${(num / 1000).toFixed(1)}K`;
    }
    return num.toString();
  };

  const formatDuration = (duration: string) => {
    if (duration === 'N/A') return duration;
    
    // Handle YouTube duration format (PT1H23M45S)
    if (duration.startsWith('PT')) {
      const match = duration.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
      if (match) {
        const hours = match[1] ? parseInt(match[1]) : 0;
        const minutes = match[2] ? parseInt(match[2]) : 0;
        const seconds = match[3] ? parseInt(match[3]) : 0;
        
        if (hours > 0) {
          return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
      }
    }
    
    return duration;
  };

  if (loading) {
    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-bold uppercase">Loading Videos...</h3>
          <Badge variant="secondary" className="bg-cyan-100 border-2 border-black">Fetching content</Badge>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <Skeleton className="w-full h-32 mb-3 rounded border border-gray-200" />
                <Skeleton className="h-4 w-3/4 mb-2 bg-gray-300" />
                <Skeleton className="h-3 w-1/2 bg-gray-300" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <Card className="border-2 border-red-400 bg-red-50">
        <CardContent className="p-6">
          <div className="flex items-center gap-3">
            <UilExclamationTriangle className="h-5 w-5 text-red-600" />
            <div>
              <h3 className="font-bold text-red-800">Error Loading Videos</h3>
              <p className="text-sm text-red-600">{error}</p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (videos.length === 0) {
    return null;
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-bold uppercase">Found Videos</h3>
          <p className="text-sm text-gray-600">
            {videos.length} videos found • {selectedVideos.size} selected
          </p>
        </div>
        <Button
          variant="outline"
          size="sm"
          onClick={handleSelectAll}
          className="border-2 border-black"
        >
          {selectedVideos.size === videos.length ? 'Deselect All' : 'Select All'}
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-h-96 overflow-y-auto">
        {videos.map((video) => (
          <Card key={video.id} className="border-2 border-black hover:border-cyan-500 transition-colors">
            <CardContent className="p-4">
              <div className="relative mb-3">
                <img
                  src={video.thumbnail}
                  alt={video.title}
                  className="w-full h-32 object-cover rounded border border-gray-300"
                />
                <div className="absolute top-2 right-2 bg-black bg-opacity-75 text-white px-2 py-1 rounded text-xs flex items-center gap-1">
                  <UilClock className="h-3 w-3" />
                  {formatDuration(video.duration)}
                </div>
                {video.viewCount && (
                  <div className="absolute bottom-2 left-2 bg-black bg-opacity-75 text-white px-2 py-1 rounded text-xs flex items-center gap-1">
                    <UilEye className="h-3 w-3" />
                    {video.viewCount}
                  </div>
                )}
              </div>

              <div className="flex items-start gap-2">
                <Checkbox
                  checked={selectedVideos.has(video.id)}
                  onCheckedChange={() => handleVideoToggle(video.id)}
                  className="mt-1"
                />
                <div className="flex-1 min-w-0">
                  <h4 className="font-semibold text-sm line-clamp-2 mb-1">
                    {video.title}
                  </h4>
                  {video.publishedAt && (
                    <p className="text-xs text-gray-600">
                      {new Date(video.publishedAt).toLocaleDateString()}
                    </p>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}


================================================
FILE: rag/components/Step1ChooseSource.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Star15 } from '@/components/ui/star';
import { 
  UilYoutube, 
  UilFile, 
  UilLink, 
  UilDatabase,
  UilInfoCircle,
  UilArrowRight
} from '@tooni/iconscout-unicons-react';
import Image from 'next/image';

interface Step1ChooseSourceProps {
  selectedSourceType: string;
  onSourceTypeSelect: (type: string) => void;
  onContinue: () => void;
}

export function Step1ChooseSource({ selectedSourceType, onSourceTypeSelect, onContinue }: Step1ChooseSourceProps) {
  const sourceTypes = [
    {
      type: 'youtube',
      icon: UilYoutube,
      title: 'YOUTUBE VIDEOS',
      description: 'Ingest transcripts from channels or playlists',
      color: 'bg-red-500 hover:bg-red-600',
      bgColor: 'bg-cyan-50'
    },
    {
      type: 'tiktok',
      icon: null, // Will use Image component
      title: 'TIKTOK VIDEOS',
      description: 'Process creator content and trends',
      color: 'bg-black hover:bg-gray-800',
      bgColor: 'bg-cyan-50',
      customIcon: true
    },
    {
      type: 'twitch',
      icon: null, // Will use Image component
      title: 'TWITCH STREAMS',
      description: 'Extract content from live streams and VODs',
      color: 'bg-purple-500 hover:bg-purple-600',
      bgColor: 'bg-cyan-50',
      customIcon: true
    },
    {
      type: 'documents',
      icon: UilFile,
      title: 'DOCUMENTS',
      description: 'Upload PDFs, Word docs, or text files',
      color: 'bg-orange-500 hover:bg-orange-600',
      bgColor: 'bg-cyan-50'
    },
    {
      type: 'urls',
      icon: UilLink,
      title: 'WEB PAGES',
      description: 'Scrape content from websites',
      color: 'bg-blue-500 hover:bg-blue-600',
      bgColor: 'bg-cyan-50'
    },
    {
      type: 'csv',
      icon: UilDatabase,
      title: 'STRUCTURED DATA',
      description: 'Import CSV or knowledge base files',
      color: 'bg-green-500 hover:bg-green-600',
      bgColor: 'bg-cyan-50'
    }
  ];

  return (
    <Card className="transform rotate-1 relative">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            SELECT YOUR SOURCE
          </h1>
        </div>
        <p className="text-xl text-center text-gray-700 mb-8">
          What type of content do you want to feed your AI agent?
        </p>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 relative">
          {sourceTypes.map((source) => (
              <Card 
              key={source.type}
               className={`cursor-pointer transform hover:scale-105 transition-transform border-4 border-black hover:shadow-[8px_8px_0_rgba(0,0,0,1)] ${source.bgColor} relative`}              onClick={() => {
                if (selectedSourceType === source.type) {
                  onSourceTypeSelect(''); // Unselect if already selected
                } else {
                  onSourceTypeSelect(source.type);
                }
              }}
            >
              {selectedSourceType === source.type && (
                <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-[999]" style={{animation: 'overshoot 0.3s ease-out'}}>
                  <div className="relative">
                    <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                      <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                    </div>
                    <div className="absolute inset-0 flex items-center justify-center">
                      <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        SELECTED
                      </span>
                    </div>
                  </div>
                </div>
              )}              <CardContent className="p-6 text-center">
                <Button size="icon" variant="header" className={`w-16 h-16 mb-4 ${source.color}`}>
                  {source.customIcon ? (
                    source.type === 'tiktok' ? (
                      <Image src="/tiktok.svg" alt="TikTok" width={32} height={32} className="h-8 w-8 filter brightness-0 invert" />
                    ) : source.type === 'twitch' ? (
                      <Image src="/twitch.svg" alt="Twitch" width={32} height={32} className="h-8 w-8 filter brightness-0 invert" />
                    ) : null
                  ) : (
                    <source.icon className="h-8 w-8 text-white" />
                  )}
                </Button>
                <h3 className="text-2xl font-black uppercase mb-2">{source.title}</h3>
                <p className="text-gray-700">{source.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Continue Button */}
        <div className="mt-8">
          <Button
            className="w-full h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black border-2 border-black"
            onClick={onContinue}
            disabled={!selectedSourceType}
          >
            <span className="flex items-center justify-center w-full">
              Continue
              <UilArrowRight className="ml-2 h-6 w-6" />
            </span>
          </Button>
        </div>

        {/* Help Hint */}
        <div className="mt-8">
          <Card className="bg-yellow-200 border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold uppercase">CHOOSING YOUR SOURCE</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Select the type of content you want to transform into searchable knowledge. Each source type has different processing capabilities.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: rag/components/Step2SourceDetails.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

import { 
  UilArrowLeft, 
  UilArrowRight, 
  UilUpload, 
  UilFile,
  UilInfoCircle
} from '@tooni/iconscout-unicons-react';

interface Step2SourceDetailsProps {
  selectedSourceType: string;
  sourceInput: string;
  uploadedFiles: File[];
  onSourceInputChange: (value: string) => void;
  onFileUpload: (e: React.ChangeEvent<HTMLInputElement>) => void;
  onBack: () => void;
  onContinue: () => void;
  canProceed: boolean;
}

export function Step2SourceDetails({
  selectedSourceType,
  sourceInput,
  uploadedFiles,
  onSourceInputChange,
  onFileUpload,
  onBack,
  onContinue,
  canProceed
}: Step2SourceDetailsProps) {

  const getSourceTitle = () => {
    switch (selectedSourceType) {
      case 'youtube': return 'YOUTUBE SOURCE';
      case 'tiktok': return 'TIKTOK SOURCE';
      case 'twitch': return 'TWITCH SOURCE';
      case 'documents': return 'UPLOAD DOCUMENTS';
      case 'urls': return 'WEB PAGES';
      case 'csv': return 'STRUCTURED DATA';
      default: return 'SOURCE DETAILS';
    }
  };

  const getHelpText = () => {
    switch (selectedSourceType) {
      case 'youtube':
        return 'Paste any YouTube video, channel, or playlist URL. We\'ll extract transcripts automatically.';
      case 'tiktok':
        return 'Enter TikTok creator username or video URLs. We\'ll process creator content and trends.';
      case 'twitch':
        return 'Enter Twitch channel name or VOD URLs. We\'ll extract content from streams and archives.';
      case 'documents':
        return 'Upload PDFs, Word docs, or text files. Maximum 20 files, each under 50MB.';
      case 'urls':
        return 'Enter website URLs to scrape. We\'ll extract clean text content from each page.';
      case 'csv':
        return 'Upload structured data in CSV format. First row should contain column headers.';
      default:
        return 'Provide the required information for your selected source type.';
    }
  };

  return (
    <Card className="transform -rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            {getSourceTitle()}
          </h1>
        </div>
        
        {(selectedSourceType === 'youtube' || selectedSourceType === 'tiktok' || selectedSourceType === 'twitch') && (
          <div className="space-y-6">
            <div>
              <label className="text-xl font-black uppercase mb-3 block">
                {selectedSourceType === 'youtube' && 'YOUTUBE CHANNEL OR VIDEO URL'}
                {selectedSourceType === 'tiktok' && 'TIKTOK CREATOR OR VIDEO URL'}
                {selectedSourceType === 'twitch' && 'TWITCH CHANNEL OR VOD URL'}
              </label>
              <Input
                type="text"
                value={sourceInput}
                onChange={(e) => onSourceInputChange(e.target.value)}
                placeholder={
                  selectedSourceType === 'youtube' ? "https://youtube.com/@channel or video URL" :
                  selectedSourceType === 'tiktok' ? "@creator or https://tiktok.com/@username" :
                  "twitch.tv/channel or VOD URL"
                }
                className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
              />
              <p className="text-sm text-gray-600 mt-2">
                {selectedSourceType === 'youtube' && 'We can process up to 100 videos from a channel or playlist'}
                {selectedSourceType === 'tiktok' && 'Enter creator username (@username) or paste video URLs'}
                {selectedSourceType === 'twitch' && 'Enter channel name or paste VOD/stream URLs'}
              </p>
            </div>
          </div>
        )}



        {selectedSourceType === 'documents' && (
          <div className="space-y-6">
            <div>
              <label className="text-xl font-black uppercase mb-3 block">
                UPLOAD YOUR DOCUMENTS
              </label>
              <div className="border-4 border-dashed border-black rounded-lg p-8 text-center bg-cyan-50">
                <input
                  type="file"
                  multiple
                  accept=".pdf,.doc,.docx,.txt"
                  onChange={onFileUpload}
                  className="hidden"
                  id="file-upload"
                />
                <label htmlFor="file-upload" className="cursor-pointer">
                  <Button size="icon" variant="header" className="w-16 h-16 mb-4 bg-cyan-500 hover:bg-cyan-600">
                    <UilUpload className="h-8 w-8 text-white" />
                  </Button>
                  <p className="text-lg font-bold">Click to upload or drag files here</p>
                  <p className="text-sm text-gray-600 mt-2">PDF, Word, or text files (max 20 files)</p>
                </label>
              </div>
              {uploadedFiles.length > 0 && (
                <div className="mt-4 space-y-2">
                  {uploadedFiles.map((file, idx) => (
                    <div key={idx} className="flex items-center gap-2 p-2 bg-cyan-100 rounded border-2 border-black">
                      <UilFile className="h-5 w-5" />
                      <span className="font-medium">{file.name}</span>
                      <span className="text-sm text-gray-600">({(file.size / 1024 / 1024).toFixed(2)} MB)</span>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {selectedSourceType === 'urls' && (
          <div className="space-y-6">
            <div>
              <label className="text-xl font-black uppercase mb-3 block">
                WEB PAGE URLS
              </label>
              <textarea
                value={sourceInput}
                onChange={(e) => onSourceInputChange(e.target.value)}
                placeholder="Enter URLs (one per line)\nhttps://example.com\nhttps://docs.example.com"
                className="w-full h-32 p-4 text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
              />
              <p className="text-sm text-gray-600 mt-2">
                Enter up to 20 URLs to scrape content from. We'll use Jina Reader API to extract clean content.
              </p>
            </div>
          </div>
        )}

        {selectedSourceType === 'csv' && (
          <div className="space-y-6">
            <div>
              <label className="text-xl font-black uppercase mb-3 block">
                UPLOAD CSV FILE
              </label>
              <div className="border-4 border-dashed border-black rounded-lg p-8 text-center bg-cyan-50">
                <input
                  type="file"
                  accept=".csv"
                  onChange={onFileUpload}
                  className="hidden"
                  id="csv-upload"
                />
                <label htmlFor="csv-upload" className="cursor-pointer">
                  <Button size="icon" variant="header" className="w-16 h-16 mb-4 bg-green-500 hover:bg-green-600">
                    <UilUpload className="h-8 w-8 text-white" />
                  </Button>
                  <p className="text-lg font-bold">Click to upload CSV file</p>
                  <p className="text-sm text-gray-600 mt-2">Maximum file size: 50MB</p>
                </label>
              </div>
              {uploadedFiles.length > 0 && (
                <div className="mt-4 space-y-2">
                  {uploadedFiles.map((file, idx) => (
                    <div key={idx} className="flex items-center gap-2 p-2 bg-cyan-100 rounded border-2 border-black">
                      <UilFile className="h-5 w-5" />
                      <span className="font-medium">{file.name}</span>
                      <span className="text-sm text-gray-600">({(file.size / 1024 / 1024).toFixed(2)} MB)</span>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}
        
        {/* Help Hint */}
        <div className="mt-8">
          <Card className="bg-yellow-200 border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold uppercase">CONTENT REQUIREMENTS</p>
                  <p className="text-sm text-gray-700 mt-1">
                    {getHelpText()}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="flex gap-4 mt-8">
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
            onClick={onBack}
          >
            <UilArrowLeft className="mr-2 h-6 w-6" />
            BACK
          </Button>
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-cyan-400 hover:bg-cyan-400/90 text-black"
            onClick={onContinue}
            disabled={!canProceed}
          >
            CONTINUE
            <UilArrowRight className="ml-2 h-6 w-6" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: rag/components/Step3ConfigureProcessing.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Slider } from '@/components/ui/slider';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { 
  UilArrowLeft, 
  UilCloudDownload, 
  UilSetting,
  UilInfoCircle
} from '@tooni/iconscout-unicons-react';
import { AdvancedSettings } from '../types';

interface Step3ConfigureProcessingProps {
  selectedSourceType: string;
  sourceInput: string;
  uploadedFiles: File[];
  advancedSettings: AdvancedSettings;
  onSettingsChange: (settings: AdvancedSettings) => void;
  onBack: () => void;
  onStartProcessing: () => void;
  checkSizeLimit?: {
    allowed: boolean;
    maxSize?: number;
    userTier: string;
  };
  totalFileSize: number;
}

export function Step3ConfigureProcessing({
  selectedSourceType,
  sourceInput,
  uploadedFiles,
  advancedSettings,
  onSettingsChange,
  onBack,
  onStartProcessing,
  checkSizeLimit,
  totalFileSize
}: Step3ConfigureProcessingProps) {
  const getSourceSummary = () => {
    switch (selectedSourceType) {
      case 'youtube':
        return `URL: ${sourceInput}`;
      case 'tiktok':
        return `URL: ${sourceInput}`;
      case 'twitch':
        return `URL: ${sourceInput}`;
      case 'documents':
        return `Files: ${uploadedFiles.length} documents`;
      case 'urls':
        return `URLs: ${sourceInput.split('\n').filter(url => url.trim()).length} pages`;
      case 'csv':
        return `File: ${uploadedFiles[0]?.name || 'CSV file'}`;
      default:
        return 'Source configured';
    }
  };

  return (
    <Card className="transform rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            CONFIGURE PROCESSING
          </h1>
        </div>
        <div className="space-y-6">
          {/* Summary */}
          <Card className="bg-cyan-100 border-2 border-black">
            <CardContent className="p-4">
              <h3 className="text-xl font-black uppercase mb-2">READY TO PROCESS</h3>
              <div className="space-y-1">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-black rounded-full"></div>
                  <span className="font-bold">Source Type: {selectedSourceType.toUpperCase()}</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-black rounded-full"></div>
                  <span className="font-bold">{getSourceSummary()}</span>
                </div>
                {selectedSourceType === 'documents' && checkSizeLimit && (
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-black rounded-full"></div>
                    <span className="font-bold">
                      File Size: {(totalFileSize / 1024 / 1024).toFixed(2)} MB / 
                      {checkSizeLimit.maxSize ? (checkSizeLimit.maxSize / 1024 / 1024).toFixed(0) : '∞'} MB
                      <Badge className="ml-2" variant={checkSizeLimit.allowed ? "default" : "destructive"}>
                        {checkSizeLimit.userTier}
                      </Badge>
                    </span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Advanced Settings */}
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="advanced" className="border-2 border-black">
              <AccordionTrigger className="text-left font-black py-4 px-4 hover:bg-cyan-100">
                <div className="flex items-center gap-3">
                  <Button size="sm" variant="neutral" className="bg-cyan-500 text-white">
                    <UilSetting className="h-4 w-4" />
                  </Button>
                  ADVANCED SETTINGS (OPTIONAL)
                </div>
              </AccordionTrigger>
              <AccordionContent className="px-4 pb-4 space-y-4">
                <TooltipProvider>
                  <div>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <label className="text-sm font-bold uppercase cursor-help">
                          Chunk Size: {advancedSettings.chunkSize} tokens
                          <UilInfoCircle className="inline-block h-3 w-3 ml-1 text-gray-600" />
                        </label>
                      </TooltipTrigger>
                      <TooltipContent className="max-w-xs">
                        <p>Size of text segments for processing. Larger chunks maintain more context but may be less precise. Smaller chunks are more precise but may lose context.</p>
                      </TooltipContent>
                    </Tooltip>
                    <Slider 
                      value={[advancedSettings.chunkSize]}
                      onValueChange={(value) => onSettingsChange({...advancedSettings, chunkSize: value[0]})}
                      min={256}
                      max={1024}
                      step={128}
                      className="mt-2"
                    />
                  </div>
                </TooltipProvider>
                
                <TooltipProvider>
                  <div>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <label className="text-sm font-bold uppercase cursor-help">
                          Overlap: {advancedSettings.overlap} words
                          <UilInfoCircle className="inline-block h-3 w-3 ml-1 text-gray-600" />
                        </label>
                      </TooltipTrigger>
                      <TooltipContent className="max-w-xs">
                        <p>Number of words shared between adjacent chunks. Prevents information loss at chunk boundaries by ensuring continuity.</p>
                      </TooltipContent>
                    </Tooltip>
                    <Slider 
                      value={[advancedSettings.overlap]}
                      onValueChange={(value) => onSettingsChange({...advancedSettings, overlap: value[0]})}
                      min={0}
                      max={Math.floor(advancedSettings.chunkSize / 4)}
                      step={10}
                      className="mt-2"
                    />
                    <p className="text-xs text-gray-600 mt-1">
                      {advancedSettings.overlap > advancedSettings.chunkSize / 4 
                        ? 'High overlap - may create redundant embeddings' 
                        : 'Overlap helps maintain context between chunks'}
                    </p>
                  </div>
                </TooltipProvider>
                
                <TooltipProvider>
                  <div className="flex items-center justify-between">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <label className="text-sm font-bold uppercase cursor-help">
                          Embedding Model
                          <UilInfoCircle className="inline-block h-3 w-3 ml-1 text-gray-600" />
                        </label>
                      </TooltipTrigger>
                      <TooltipContent className="max-w-xs">
                        <p>AI model that converts text into numerical vectors for semantic search. Jina-clip-v2 provides state-of-the-art accuracy.</p>
                      </TooltipContent>
                    </Tooltip>
                    <Badge className="bg-cyan-200 text-black border-2 border-black">
                      {advancedSettings.embeddingModel}
                    </Badge>
                  </div>
                </TooltipProvider>
                
                <TooltipProvider>
                  <div className="flex items-center justify-between">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <label className="text-sm font-bold uppercase cursor-help">
                          Vector Store
                          <UilInfoCircle className="inline-block h-3 w-3 ml-1 text-gray-600" />
                        </label>
                      </TooltipTrigger>
                      <TooltipContent className="max-w-xs">
                        <p>Database that stores and searches embedding vectors. Convex provides fast, scalable vector similarity search.</p>
                      </TooltipContent>
                    </Tooltip>
                    <Badge className="bg-cyan-200 text-black border-2 border-black">
                      {advancedSettings.vectorStore}
                    </Badge>
                  </div>
                </TooltipProvider>
              </AccordionContent>
            </AccordionItem>
          </Accordion>

          <div className="bg-cyan-50 border-2 border-black rounded-lg p-4">
            <div className="flex items-start gap-3">
              <Button size="sm" variant="neutral" className="bg-cyan-100 flex-shrink-0">
                <UilInfoCircle className="h-4 w-4" />
              </Button>
              <div>
                <p className="text-sm font-bold">PROCESSING INFO</p>
                <p className="text-sm text-gray-700 mt-1">
                  We&apos;ll automatically extract text, generate embeddings, and build a searchable index. 
                  This typically takes 2-5 minutes depending on content size.
                </p>
              </div>
            </div>
          </div>
        </div>
        
        {/* Help Hint */}
        <div className="mt-8">
          <Card className="bg-yellow-200 border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold uppercase">PROCESSING SETTINGS</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Default settings work great for most use cases. Advanced settings let you fine-tune how content is chunked and embedded for optimal retrieval.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="flex gap-4 mt-8">
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
            onClick={onBack}
          >
            <UilArrowLeft className="mr-2 h-6 w-6" />
            BACK
          </Button>
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-[rgb(0,82,255)] hover:bg-blue-600 text-white"
            onClick={onStartProcessing}
          >
            START PROCESSING
            <UilCloudDownload className="ml-2 h-6 w-6" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: rag/components/Step3VideoSelection.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilArrowLeft, UilArrowRight } from '@tooni/iconscout-unicons-react';
import { useTikTokContent } from '@/hooks/useTikTokContent';
import { useYouTubeContent } from '@/hooks/useYouTubeContent';
import { useTwitchContent } from '@/hooks/useTwitchContent';
import { VideoSelectionGrid } from './VideoSelectionGrid';

interface Step3VideoSelectionProps {
  selectedSourceType: string;
  sourceInput: string;
  onBack: () => void;
  onContinue: () => void;
  canProceed: boolean;
  onVideosSelected: (videos: any[]) => void;
}

export function Step3VideoSelection({
  selectedSourceType,
  sourceInput,
  onBack,
  onContinue,
  canProceed,
  onVideosSelected
}: Step3VideoSelectionProps) {
  // Use direct backend API calls to bypass Convex rate limits
  const [tiktokUser, setTiktokUser] = React.useState<any>(null);
  const [tiktokVideos, setTiktokVideos] = React.useState<any[]>([]);
  const [tiktokLoading, setTiktokLoading] = React.useState(false);
  const [tiktokError, setTiktokError] = React.useState<string | null>(null);

  const [youtubeChannel, setYoutubeChannel] = React.useState<any>(null);
  const [youtubeVideos, setYoutubeVideos] = React.useState<any[]>([]);
  const [youtubeLoading, setYoutubeLoading] = React.useState(false);
  const [youtubeError, setYoutubeError] = React.useState<string | null>(null);

  const [twitchChannel, setTwitchChannel] = React.useState<any>(null);
  const [twitchVideos, setTwitchVideos] = React.useState<any[]>([]);
  const [twitchLoading, setTwitchLoading] = React.useState(false);
  const [twitchError, setTwitchError] = React.useState<string | null>(null);

  const [selectedVideos, setSelectedVideos] = React.useState<string[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState<string | null>(null);

  const loadVideos = React.useCallback(async () => {
    if (!sourceInput) return;
    
    setTiktokLoading(true);
    setTiktokError(null);
    
    try {
      const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8001";
      const API_KEY = process.env.NEXT_PUBLIC_API_KEY;
      
      let username = sourceInput.replace('@', '');

      // Fetch user info and videos directly using test endpoint
      const userResponse = await fetch(`${BACKEND_URL}/api/public/tiktok/test/${username}`);
      if (!userResponse.ok) throw new Error('Failed to fetch TikTok user');
      
      const userData = await userResponse.json();
      setTiktokUser(userData);

      // Create video data based on actual TikTok structure
      const videoCount = Math.min(userData.videoCount || 3, 25);
      const videos = Array.from({ length: videoCount }, (_, i) => ({
        videoId: `video_${i}`,
        title: `TikTok Video ${i + 1} - @${userData.username}`,
        thumbnail: userData.avatar || '/placeholder.jpg',
        duration: 15 + (i * 5),
        createTime: Date.now() - (i * 86400000),
        stats: {
          views: 1000 + (i * 100),
          likes: 50 + (i * 10),
          comments: 5 + (i * 2),
          shares: 2 + i,
          saves: 1 + i
        },
        music: {
          title: 'Original Sound',
          author: userData.nickname
        }
      }));
      
      setTiktokVideos(videos);
      
    } catch (error) {
      console.error('Error loading content:', error);
      setTiktokError('Failed to load content. Please check the URL and try again.');
    } finally {
      setTiktokLoading(false);
    }
  }, [sourceInput, selectedSourceType]);

  // Auto-fetch videos when source input changes
  React.useEffect(() => {
    if (sourceInput && selectedSourceType) {
      loadVideos();
    }
  }, [sourceInput, selectedSourceType, loadVideos]);

  // Auto-fetch videos when channel is loaded (same as bulk onboarding)
  React.useEffect(() => {
    if (selectedSourceType === 'youtube' && youtubeChannel && youtubeVideos.length === 0) {
      const channelId = youtubeChannel.channelId;
      const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8001";
      const API_KEY = process.env.NEXT_PUBLIC_API_KEY;
      
      fetch(`${BACKEND_URL}/api/public/youtube/channel-videos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`,
        },
        body: JSON.stringify({
          channel_url: `https://youtube.com/channel/${channelId}`,
          max_videos: 100,
          job_id: `rag_${Date.now()}`,
          user_id: 'rag_user',
        }),
      })
        .then(res => res.json())
        .then(data => setYoutubeVideos(data.videos || []))
        .catch(err => console.error('Error fetching YouTube videos:', err));
    }
  }, [youtubeChannel, selectedSourceType, youtubeVideos.length]);

  React.useEffect(() => {
    if (selectedSourceType === 'twitch' && twitchChannel && twitchVideos.length === 0) {
      const username = twitchChannel.username;
      const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8001";
      const API_KEY = process.env.NEXT_PUBLIC_API_KEY;
      
      fetch(`${BACKEND_URL}/api/public/twitch/channel-videos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`,
        },
        body: JSON.stringify({
          channel_name: username,
          max_videos: 100,
          job_id: `rag_${Date.now()}`,
          user_id: 'rag_user',
        }),
      })
        .then(res => res.json())
        .then(data => setTwitchVideos(data.videos || []))
        .catch(err => console.error('Error fetching Twitch videos:', err));
    }
  }, [twitchChannel, selectedSourceType, twitchVideos.length]);

  React.useEffect(() => {
    if (selectedSourceType === 'tiktok' && tiktokUser && tiktokVideos.length === 0) {
      const username = tiktokUser.username;
      const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8001";
      const API_KEY = process.env.NEXT_PUBLIC_API_KEY;
      
      fetch(`${BACKEND_URL}/api/public/tiktok/creator-videos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`,
        },
        body: JSON.stringify({
          creator_username: username,
          max_videos: 100,
          job_id: `rag_${Date.now()}`,
          user_id: 'rag_user',
        }),
      })
        .then(res => res.json())
        .then(data => setTiktokVideos(data.videos || []))
        .catch(err => console.error('Error fetching TikTok videos:', err));
    }
  }, [tiktokUser, selectedSourceType, tiktokVideos.length]);

  // Use the unified video loading approach

  const handleVideoSelection = (videoIds: string[], videos: any[]) => {
    setSelectedVideos(videoIds);
    onVideosSelected(videos);
  };

  return (
    <Card className="transform -rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            SELECT CONTENT
          </h1>
          <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
            Choose the content to process for RAG creation. Selected videos will be transcribed and embedded.
          </p>
        </div>

        <VideoSelectionGrid
          videos={selectedSourceType === 'youtube' ? youtubeVideos : selectedSourceType === 'tiktok' ? tiktokVideos : selectedSourceType === 'twitch' ? twitchVideos : []}
          channel={selectedSourceType === 'youtube' ? youtubeChannel : selectedSourceType === 'tiktok' ? tiktokUser : selectedSourceType === 'twitch' ? twitchChannel : null}
          platform={selectedSourceType as 'youtube' | 'tiktok' | 'twitch'}
          loading={selectedSourceType === 'youtube' ? youtubeLoading : selectedSourceType === 'tiktok' ? tiktokLoading : selectedSourceType === 'twitch' ? twitchLoading : false}
          error={selectedSourceType === 'youtube' ? youtubeError : selectedSourceType === 'tiktok' ? tiktokError : selectedSourceType === 'twitch' ? twitchError : null}
          selectedVideos={selectedVideos}
          onVideoSelectionChange={handleVideoSelection}
        />

        <div className="flex gap-4 mt-8">
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
            onClick={onBack}
          >
            <UilArrowLeft className="mr-2 h-6 w-6" />
            BACK
          </Button>
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-cyan-400 hover:bg-cyan-400/90 text-black"
            onClick={onContinue}
            disabled={!canProceed}
          >
            CONTINUE
            <UilArrowRight className="ml-2 h-6 w-6" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: rag/components/Step4ProcessingProgress.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { 
  UilBrain, 
  UilDownloadAlt, 
  UilFileSearchAlt, 
  UilChartGrowth, 
  UilDatabase,
  UilInfoCircle
} from '@tooni/iconscout-unicons-react';
import { Button } from '@/components/ui/button';

interface Step4ProcessingProgressProps {
  progress: number;
  currentStatus: string;
}

export function Step4ProcessingProgress({ progress, currentStatus }: Step4ProcessingProgressProps) {
  const processingSteps = [
    {
      icon: UilDownloadAlt,
      title: 'FETCHING',
      completed: progress >= 20,
      description: 'Downloading content'
    },
    {
      icon: UilFileSearchAlt,
      title: 'EXTRACTING',
      completed: progress >= 40,
      description: 'Parsing text content'
    },
    {
      icon: UilChartGrowth,
      title: 'EMBEDDING',
      completed: progress >= 60,
      description: 'Generating vectors'
    },
    {
      icon: UilDatabase,
      title: 'INDEXING',
      completed: progress >= 80,
      description: 'Building search index'
    }
  ];

  return (
    <Card className="transform -rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            BUILDING KNOWLEDGE BASE
          </h1>
        </div>
        <div className="space-y-6">
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-24 h-24 bg-cyan-400 border-4 border-black rounded-full mb-4">
              <UilBrain className="h-12 w-12 text-black animate-pulse" />
            </div>
            <p className="text-xl font-bold text-gray-700">{currentStatus}</p>
          </div>

          <div className="space-y-2">
            <div className="flex justify-between text-sm font-bold">
              <span>PROGRESS</span>
              <span>{progress}%</span>
            </div>
            <Progress value={progress} className="h-6 border-2 border-black" />
          </div>

          <div className="grid grid-cols-2 gap-4">
            {processingSteps.map((step, index) => (
              <Card 
                key={step.title}
                className={`border-2 border-black ${step.completed ? 'bg-green-100' : 'bg-cyan-50'}`}
              >
                <CardContent className="p-4 text-center">
                  <step.icon className="h-8 w-8 mx-auto mb-2 text-gray-700" />
                  <p className="text-sm font-bold uppercase">{step.title}</p>
                  <p className="text-2xl font-black">
                    {step.completed ? '✓' : '...'}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>

          <p className="text-center text-sm text-gray-600">
            This may take a few minutes. Please don&apos;t close this window.
          </p>
          
          {/* Help Hint */}
          <div className="mt-8">
            <Card className="bg-yellow-200 border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="flex items-start gap-3">
                  <Button 
                    size="sm" 
                    variant="neutral" 
                    className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                  >
                    <UilInfoCircle className="h-4 w-4" />
                  </Button>
                  <div>
                    <p className="text-sm font-bold uppercase">PROCESSING YOUR KNOWLEDGE</p>
                    <p className="text-sm text-gray-700 mt-1">
                      We&apos;re extracting content, generating embeddings, and building your searchable index. This typically takes 2-5 minutes.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: rag/components/Step5Completion.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  UilCheckCircle, 
  UilDocumentInfo, 
  UilArrowRight,
  UilDatabase
} from '@tooni/iconscout-unicons-react';
import { WorkflowStats } from '../types';

interface Step5CompletionProps {
  workflowStats: WorkflowStats | null;
  workflowId: string | null;
  onViewKnowledgeBase: () => void;
  onGoToDashboard: () => void;
}

export function Step5Completion({ 
  workflowStats, 
  workflowId, 
  onViewKnowledgeBase, 
  onGoToDashboard 
}: Step5CompletionProps) {
  return (
    <Card className="transform rotate-1 relative overflow-hidden">
      <CardHeader className="bg-green-100">
        <div className="flex justify-center mb-4">
          <div className="w-20 h-20 bg-green-500 border-4 border-black rounded-full flex items-center justify-center">
            <UilCheckCircle className="h-12 w-12 text-white" />
          </div>
        </div>
        <CardTitle className="text-4xl md:text-5xl font-black uppercase text-center text-black">
          KNOWLEDGE BASE READY!
        </CardTitle>
      </CardHeader>
      <CardContent className="p-8">
        <div className="space-y-6">
          <p className="text-xl text-center text-gray-700">
            Your RAG system has been successfully set up. Your agents can now access this knowledge!
          </p>

          {workflowStats && (
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              <Card className="bg-cyan-50 border-2 border-black transform -rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Content Processed</p>
                  <p className="text-2xl font-black">{workflowStats.totalContent}</p>
                </CardContent>
              </Card>
              <Card className="bg-cyan-50 border-2 border-black transform rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Characters Indexed</p>
                  <p className="text-2xl font-black">{workflowStats.charactersIndexed}</p>
                </CardContent>
              </Card>
              <Card className="bg-cyan-50 border-2 border-black transform -rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Embeddings</p>
                  <p className="text-2xl font-black">{workflowStats.embeddingsGenerated}</p>
                </CardContent>
              </Card>
              <Card className="bg-cyan-50 border-2 border-black transform rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Index Size</p>
                  <p className="text-2xl font-black">{workflowStats.indexSize}</p>
                </CardContent>
              </Card>
              <Card className="bg-cyan-50 border-2 border-black transform -rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Processing Time</p>
                  <p className="text-2xl font-black">{workflowStats.processingTime}</p>
                </CardContent>
              </Card>
              <Card className="bg-green-50 border-2 border-black transform rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Status</p>
                  <p className="text-2xl font-black text-green-600">ACTIVE</p>
                </CardContent>
              </Card>
            </div>
          )}

          <div className="flex flex-col sm:flex-row gap-4">
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-cyan-400 hover:bg-cyan-400/90 text-black"
              onClick={onViewKnowledgeBase}
            >
              VIEW KNOWLEDGE BASE
              <UilDocumentInfo className="ml-2 h-6 w-6" />
            </Button>
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-[rgb(0,82,255)] hover:bg-blue-600 text-white"
              onClick={onGoToDashboard}
            >
              GO TO DASHBOARD
              <UilArrowRight className="ml-2 h-6 w-6" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: rag/components/VideoSelectionGrid.tsx
================================================
'use client';

import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { UilSpinner, UilCheckSquare, UilTrash, UilClock, UilEye, UilThumbsUp, UilMusic, UilPlay, UilCheckCircle, UilInfoCircle, UilExclamationTriangle } from '@tooni/iconscout-unicons-react';


interface VideoSelectionGridProps {
  videos: any[];
  channel: any;
  platform: 'youtube' | 'tiktok' | 'twitch';
  loading: boolean;
  error: string | null;
  selectedVideos: string[];
  onVideoSelectionChange: (videoIds: string[], videos: any[]) => void;
}

export function VideoSelectionGrid({
  videos,
  channel,
  platform,
  loading,
  error,
  selectedVideos,
  onVideoSelectionChange
}: VideoSelectionGridProps) {

  const [hoveredVideoId, setHoveredVideoId] = React.useState<string | null>(null);
  const [mutedVideos, setMutedVideos] = React.useState<Set<string>>(new Set());

  const [videoLoadingStates, setVideoLoadingStates] = React.useState<Map<string, 'idle' | 'preparing' | 'loading' | 'canplay' | 'loaded'>>(new Map());
  const hoverTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  const videoLoadTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  const hoverStartTime = React.useRef<number | null>(null);

  // Preload videos using download endpoint
  React.useEffect(() => {
    if (platform === 'tiktok' && videos.length > 0) {
      const videosToPreload = videos.slice(0, 5);
      
      console.log('[VideoSelectionGrid] Starting prefetch for first', videosToPreload.length, 'videos');
      
      // Use a small delay to not interfere with initial page load
      const prefetchTimeout = setTimeout(() => {
        videosToPreload.forEach((video, index) => {
          const videoId = video.id || video.video_id || video.videoId;
          
          // Preload video using hidden video element
          const downloadUrl = `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8001'}/api/public/tiktok/download/${videoId}?user_id=preview-user`;
          
          // Create hidden video element for preloading
          const preloadVideo = document.createElement('video');
          preloadVideo.src = downloadUrl;
          preloadVideo.preload = 'auto';
          preloadVideo.style.display = 'none';
          document.body.appendChild(preloadVideo);
          
          // Remove after loading
          preloadVideo.addEventListener('loadeddata', () => {
            document.body.removeChild(preloadVideo);
            console.log('[VideoSelectionGrid] Prefetched video', index + 1, ':', videoId);
          });
          
          preloadVideo.load();
        });
      }, 500); // Reduced delay for faster loading
      
      return () => clearTimeout(prefetchTimeout);
    }
  }, [platform, videos]);

  const updateVideoLoadingState = React.useCallback((videoId: string, state: 'idle' | 'preparing' | 'loading' | 'canplay' | 'loaded') => {
    setVideoLoadingStates(prev => new Map(prev).set(videoId, state));
  }, []);

  const getVideoLoadingState = React.useCallback((videoId: string) => {
    return videoLoadingStates.get(videoId) || 'idle';
  }, [videoLoadingStates]);

  const handleVideoHover = React.useCallback((videoId: string, videoUrl?: string) => {
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
    }
    if (videoLoadTimeoutRef.current) {
      clearTimeout(videoLoadTimeoutRef.current);
    }

    setHoveredVideoId(videoId);
    hoverStartTime.current = Date.now();
    updateVideoLoadingState(videoId, 'preparing');

    if (platform === 'tiktok') {
      // Use direct download endpoint instead of preview system
      hoverTimeoutRef.current = setTimeout(() => {
        updateVideoLoadingState(videoId, 'loading');
        
        // The video will load from the download endpoint
        setTimeout(() => {
          updateVideoLoadingState(videoId, 'loaded');
        }, 300);
      }, 150); // Reduced delay for faster response
    }
  }, [platform, updateVideoLoadingState]);

  const handleVideoLeave = React.useCallback(() => {
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
      hoverTimeoutRef.current = null;
    }
    if (videoLoadTimeoutRef.current) {
      clearTimeout(videoLoadTimeoutRef.current);
      videoLoadTimeoutRef.current = null;
    }

    setHoveredVideoId(null);
    hoverStartTime.current = null;

    if (hoveredVideoId) {
      updateVideoLoadingState(hoveredVideoId, 'idle');
    }
  }, [hoveredVideoId, platform, updateVideoLoadingState]);

  const handleAudioToggle = React.useCallback((videoId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    setMutedVideos(prev => {
      const newSet = new Set(prev);
      if (newSet.has(videoId)) {
        newSet.delete(videoId);
      } else {
        newSet.add(videoId);
      }
      return newSet;
    });
  }, []);

  const toggleVideoSelection = (videoId: string, video: any) => {
    const newSelected = selectedVideos.includes(videoId)
      ? selectedVideos.filter(id => id !== videoId)
      : [...selectedVideos, videoId];

    const selectedVideoObjects = videos.filter(v => newSelected.includes(v.id || v.video_id || v.videoId));
    onVideoSelectionChange(newSelected, selectedVideoObjects);
  };

  const selectAllVideos = () => {
    const allVideoIds = videos.map(v => v.id || v.video_id || v.videoId);
    onVideoSelectionChange(allVideoIds, videos);
  };

  const clearAllVideos = () => {
    onVideoSelectionChange([], []);
  };

  const formatViews = (views: string | number) => {
    if (!views || views === 'Unknown') return 'Unknown';
    if (typeof views === 'number') {
      if (views >= 1000000) return `${(views / 1000000).toFixed(1)}M`;
      if (views >= 1000) return `${(views / 1000).toFixed(1)}K`;
      return views.toString();
    }
    return views;
  };

  const formatDuration = (duration: string | number) => {
    if (!duration || duration === 'Unknown' || duration === 'N/A') return 'N/A';
    
    if (typeof duration === 'string' && duration.startsWith('PT')) {
      const match = duration.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
      if (match) {
        const hours = match[1] ? parseInt(match[1]) : 0;
        const minutes = match[2] ? parseInt(match[2]) : 0;
        const seconds = match[3] ? parseInt(match[3]) : 0;
        
        if (hours > 0) {
          return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
      }
    }
    
    return duration.toString();
  };

  if (loading) {
    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-bold uppercase">Loading Videos...</h3>
          <Badge variant="secondary" className="bg-cyan-100 border-2 border-black">Fetching content</Badge>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="bg-gray-200 animate-pulse w-full h-32 mb-3 rounded border border-gray-200" />
                <div className="bg-gray-300 animate-pulse h-4 w-3/4 mb-2" />
                <div className="bg-gray-300 animate-pulse h-3 w-1/2" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <Card className="border-2 border-red-400 bg-red-50">
        <CardContent className="p-6">
          <div className="flex items-center gap-3">
            <UilExclamationTriangle className="h-5 w-5 text-red-600" />
            <div>
              <h3 className="font-bold text-red-800">Error Loading Videos</h3>
              <p className="text-sm text-red-600">{error}</p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (videos.length === 0) {
    return (
      <Card className="bg-gray-50">
        <CardContent className="p-8 text-center">
          <div className="flex items-center gap-3 justify-center mb-4">
            <UilInfoCircle className="h-12 w-12 text-gray-400" />
          </div>
          <h3 className="text-xl font-bold mb-2">NO VIDEOS FOUND</h3>
          <p className="text-gray-600">
            No videos were found for this channel. Please check the channel name and try again.
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {/* Channel Info */}
      {channel && (
        <Card className="bg-orange-50 mb-6">
          <CardContent className="p-4">
            <div className="flex items-start gap-4">
              {channel.avatar && (
                <Image
                  src={channel.avatar || channel.profileImage}
                  alt={channel.username || channel.title}
                  width={64}
                  height={64}
                  className="w-16 h-16 rounded-full border-2 border-black"
                />
              )}
              <div className="flex-1">
                <h3 className="text-xl font-black uppercase">
                  {channel.username || channel.channelName || channel.displayName || channel.title || channel.display_name}
                </h3>
                {channel.follower_count !== undefined && (
                  <p className="text-sm text-gray-700">{formatViews(channel.follower_count)} followers</p>
                )}
                {channel.followerCount !== undefined && (
                  <p className="text-sm text-gray-700">{formatViews(channel.followerCount)} followers</p>
                )}
                {channel.subscriberCount !== undefined && (
                  <p className="text-sm text-gray-700">{formatViews(parseInt(channel.subscriberCount))} subscribers</p>
                )}
                {platform === 'tiktok' && channel.heartCount && (
                  <p className="text-sm text-gray-700">{formatViews(channel.heartCount)} hearts</p>
                )}
                {platform === 'tiktok' && channel.videoCount && (
                  <p className="text-sm text-gray-700">{formatViews(channel.videoCount)} videos</p>
                )}
                {channel.description && (
                  <p className="text-sm text-gray-600 mt-2 line-clamp-2">{channel.description}</p>
                )}
                {platform === 'tiktok' && channel.signature && (
                  <p className="text-sm text-gray-600 mt-2 italic">&quot;{channel.signature}&quot;</p>
                )}
              </div>
              <Badge variant="default" className="bg-orange-500 text-white">
                {videos.length} videos found
              </Badge>
            </div>
          </CardContent>
        </Card>
      )}

      {/* TikTok Preview Tip */}
      {platform === 'tiktok' && (
        <Card className="bg-blue-50 mb-6">
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <UilInfoCircle className="h-5 w-5 text-blue-600" />
              <div>
                <p className="font-bold text-sm">Video Preview Tip</p>
                <p className="text-xs text-gray-700">Hover and hold on a video for 0.5 seconds to see a preview</p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Selection Controls */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-2">
          <Button
            variant="neutral"
            size="sm"
            onClick={selectAllVideos}
            className="h-10"
          >
            <UilCheckSquare className="h-4 w-4 mr-2" />
            SELECT ALL
          </Button>
          <Button
            variant="neutral"
            size="sm"
            onClick={clearAllVideos}
            className="h-10"
          >
            <UilTrash className="h-4 w-4 mr-2" />
            CLEAR ALL
          </Button>
        </div>
        <div className="text-sm text-gray-600">
          {selectedVideos.length} / {videos.length} selected
        </div>
      </div>

      {/* Video Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-h-96 overflow-y-auto">
        {videos.map((video, index) => {
  const videoId = video.id || video.video_id || video.videoId;
  const isSelected = selectedVideos.includes(videoId);
  const isHovered = hoveredVideoId === videoId;
          return (
            <div
              key={videoId || `video-${index}`}
              className="relative cursor-pointer transform transition-all hover:scale-105"
              onClick={() => toggleVideoSelection(videoId, video)}
            >
              <Card className={`border-4 border-border overflow-hidden shadow-shadow hover:translate-x-1 hover:translate-y-1 hover:shadow-none transition-all ${
                isSelected ? 'ring-4 ring-orange-500 bg-orange-50' : 'bg-background'
              }`}>
                <div
                  className="relative"
                  onMouseEnter={() => handleVideoHover(videoId, video.url || video.videoUrl)}
                  onMouseLeave={handleVideoLeave}
                >
                  {/* Base thumbnail */}
                <Image
                  src={video.thumbnail || video.dynamicCover || video.thumbnails?.[0]?.url || '/placeholder.jpg'}
                  alt={video.title || video.description}
                  width={180}
                  height={320}
                  className={`w-full object-cover aspect-[9/16]`}
                  onError={(e) => {
                    (e.target as HTMLImageElement).src = '/placeholder.jpg';
                  }}
                />
                   {/* Video overlay - shown when video is available */}
                   {isHovered && video.playAddr && (
                     <div className="absolute inset-0 z-10">
                <video
                  src={`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8001'}/api/public/tiktok/download/${videoId}`}
                  className={`w-full h-full object-cover transition-opacity duration-300 ${getVideoLoadingState(videoId) === 'loaded' ? 'opacity-100' : 'opacity-0'}`}
                  loop
                  playsInline
                  preload="metadata"
                  onCanPlay={() => {
                    // Mark as ready; fade-in will occur via className
                    updateVideoLoadingState(videoId, 'loaded');
                  }}
                  onLoadedData={(e) => {
                    const el = e.currentTarget as HTMLVideoElement;
                    try {
                      el.muted = false;
                      el.volume = 0.6;
                      const p = el.play();
                      if (p && typeof p.then === 'function') {
                        p.catch(() => {/* autoplay with sound may be blocked */});
                      }
                    } catch {}
                  }}
                />
                     </div>
                   )}
                   {/* Loading overlay - hidden when loaded */}
                   {isHovered && getVideoLoadingState(videoId) !== 'loaded' && (
                     <div className="absolute inset-0 bg-black bg-opacity-40 flex flex-col items-center justify-center transition-opacity duration-300">
                       <div className="flex flex-col items-center">
                         <UilSpinner className="h-8 w-8 text-white animate-spin mb-2" />
                         <p className="text-white text-xs font-semibold">Loading...</p>
                       </div>
                     </div>
                   )}
                  {/* Error overlay */}
                  {isHovered && preview?.error && (
                    <div className="absolute inset-0 bg-red-900 bg-opacity-50 flex flex-col items-center justify-center p-2">
                      <p className="text-white text-xs font-bold text-center">Preview unavailable</p>
                      <p className="text-white text-xs mt-1">Try hovering again</p>
                    </div>
                  )}

                  <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-10 transition-opacity" />
                  {isSelected && (
                    <div className="absolute top-2 right-2 w-6 h-6 bg-orange-500 border-2 border-black flex items-center justify-center">
                      <UilCheckCircle className="h-4 w-4 text-white" />
                    </div>
                  )}
                </div>

                <CardContent className="p-3">
                  <p className="font-bold text-sm line-clamp-2">
                    {video.title || video.description || 'Untitled'}
                  </p>
                  <div className="flex items-center gap-2 mt-2 text-xs text-gray-600">
                    <div className="flex items-center gap-1">
                      <UilClock className="h-3 w-3" />
                      <span>{formatDuration(video.duration || 0)}</span>
                    </div>
                    {video.viewCount !== undefined && (
                      <>
                        <span>·</span>
                        <div className="flex items-center gap-1">
                          <UilEye className="h-3 w-3" />
                          <span>{formatViews(video.viewCount)}</span>
                        </div>
                      </>
                    )}
                    {video.play_count !== undefined && (
                      <>
                        <span>·</span>
                        <div className="flex items-center gap-1">
                          <UilEye className="h-3 w-3" />
                          <span>{formatViews(video.play_count)}</span>
                        </div>
                      </>
                    )}
                    {video.likes !== undefined && (
                      <>
                        <span>·</span>
                        <div className="flex items-center gap-1">
                          <UilThumbsUp className="h-3 w-3" />
                          <span>{formatViews(video.likes)}</span>
                        </div>
                      </>
                    )}
                  </div>
                  {platform === 'tiktok' && (video.musicTitle || video.musicAuthor) && (
                    <div className="mt-2 text-xs text-gray-500 flex items-center gap-1">
                      <UilMusic className="h-3 w-3" />
                      {video.musicTitle && video.musicAuthor ? `${video.musicTitle} - ${video.musicAuthor}` : 
                       video.musicTitle || video.musicAuthor}
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          );
        })}
      </div>
    </div>
  );
}


================================================
FILE: rtc/page.tsx
================================================
'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useConvex, useAction, useMutation, useQuery } from 'convex/react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilPhone, UilPhoneVolume, UilWifi, UilMicrophone, UilCheckCircle, UilRocket, UilInfoCircle, UilChartGrowth } from '@tooni/iconscout-unicons-react';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import InfoSection from '@/components/custom/info-section';
import { RTCPhoneDialer } from '@/components/custom/rtc/rtc-phone-dialer-realistic';
import { api } from '@convex/_generated/api';
import { toast } from 'sonner';

// --- Main RTC App with Convex Integration ---
export default function RTCOnboardingPage() {
  const convex = useConvex();
  const [currentStep, setCurrentStep] = useState(1);
  const [callId, setCallId] = useState<string>('');
  const [isConnected, setIsConnected] = useState(false);
  const [transcript, setTranscript] = useState<string>('');
  const [sentiment, setSentiment] = useState<string>('neutral');
  const [speakers, setSpeakers] = useState<string[]>([]);
  const [callDuration, setCallDuration] = useState(0);
  const [isRecording, setIsRecording] = useState(false);
  const [isDialing, setIsDialing] = useState(false);
  
  // Real Convex actions
  const startCall = useAction(api.telephonyActions.startCall);
  const processAudioChunk = useAction(api.telephonyActions.processAudioChunk);
  const endCall = useAction(api.telephonyActions.endCall);
  const getRealtimeTranscript = api.queries.telephony.getRealtimeTranscript;
  
  // WebRTC refs
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const websocketRef = useRef<WebSocket | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // Generate unique call ID
  const generateCallId = () => `call_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

  // Handle dialer call completion
  const handleDialerCallComplete = (duration: number, voiceType: string, wasRecorded: boolean) => {
    setCallDuration(duration);
    setIsRecording(wasRecorded);
    setCurrentStep(4); // Move to call complete
    
    toast.success('Call Completed', {
      description: `Duration: ${Math.floor(duration / 60)}:${(duration % 60).toString().padStart(2, '0')}`,
    });
  };

  // Format duration
  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <>
      <div 
        className="min-h-screen bg-orange-500 relative pb-8"
        style={{ 
          fontFamily: 'Noyh-Bold, sans-serif',
          backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
          backgroundSize: '60px 60px'
        }}
      >
        <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
          <div className="w-full max-w-6xl space-y-8">
            {/* Header Title Card */}
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardHeader className="relative">
                {/* Decorative elements */}
                <div className="absolute top-2 left-4 w-8 h-8 bg-orange-600 border-2 border-black flex items-center justify-center">
                  <UilWifi className="h-4 w-4 text-white" />
                </div>
                <div className="absolute top-2 right-4 w-8 h-8 bg-orange-500 border-2 border-black flex items-center justify-center">
                  <UilPhoneVolume className="h-4 w-4 text-white" />
                </div>
                <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                  <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
                </div>
                <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
                
                {/* Central icon button */}
                <div className="flex justify-center mb-4">
                  <Button variant="header" className="w-20 h-20 bg-orange-600 hover:bg-orange-700 p-0">
                    {currentStep === 1 && <UilWifi className="h-12 w-12 text-white" />}
                    {currentStep === 2 && <UilPhone className="h-12 w-12 text-white" />}
                    {currentStep === 3 && <UilMicrophone className="h-12 w-12 text-white" />}
                    {currentStep === 4 && <UilCheckCircle className="h-12 w-12 text-white" />}
                  </Button>
                </div>
                
                {/* Dynamic title */}
                <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                  {currentStep === 1 && 'CONVEX TELEPHONY DEMO'}
                  {currentStep === 2 && 'PHONE DIALER'}
                  {currentStep === 3 && 'LIVE CALL'}
                  {currentStep === 4 && 'CALL COMPLETE'}
                </CardTitle>
                
                {/* Subtitle */}
                <p className="text-lg md:text-xl text-gray-700 mt-4 text-center">
                  {currentStep === 1 && 'Experience real-time ASR with Convex'}
                  {currentStep === 2 && 'Enter a phone number to call'}
                  {currentStep === 3 && `Duration: ${formatDuration(callDuration)}`}
                  {currentStep === 4 && 'Your telephony journey begins here'}
                </p>
                
                {/* Animated decorative bars */}
                <div className="flex justify-center items-center mt-3 gap-2">
                  <div className="w-3 h-3 bg-orange-600 animate-pulse"></div>
                  <div className="w-2 h-6 bg-black"></div>
                  <div className="w-4 h-4 bg-orange-500 animate-pulse delay-150"></div>
                  <div className="w-2 h-8 bg-black"></div>
                  <div className="w-3 h-3 bg-orange-600 animate-pulse delay-300"></div>
                </div>
              </CardHeader>
            </Card>

            {/* Step-based Content */}
            {currentStep === 1 && (
              <Card className="bg-white border-2 border-black">
                <CardContent className="text-center space-y-6 py-8">
                  <h2 className="text-3xl font-bold text-black">Real-Time Telephony with Convex</h2>
                  <p className="text-lg text-gray-700 max-w-2xl mx-auto">
                    Experience live audio processing with automatic speech recognition, sentiment analysis, and speaker diarization using Convex actions and real-timers.
                  </p>
                  <Button 
                    onClick={() => setCurrentStep(2)}
                    className="bg-orange-600 hover:bg-orange-700 text-white px-8 py-4 text-lg font-bold"
                  >
                    Open Phone Dialer
                  </Button>
                </CardContent>
              </Card>
            )}

            {currentStep === 2 && (
              <Card className="bg-white border-2 border-black">
                <CardContent className="py-8">
                  <h2 className="text-2xl font-bold text-black text-center mb-6">Phone Dialer</h2>
                  <RTCPhoneDialer 
                    onCallComplete={handleDialerCallComplete}
                  />
                </CardContent>
              </Card>
            )}

            {currentStep === 3 && (
              <div className="space-y-6">
                {/* Live Call Interface */}
                <Card className="bg-white border-2 border-black">
                  <CardHeader>
                    <CardTitle className="text-2xl font-bold text-black">Live Call - {formatDuration(callDuration)}</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {/* Real-time Transcript */}
                    <div className="bg-gray-100 p-4 rounded-lg">
                      <h3 className="font-bold text-black mb-2">Live Transcript:</h3>
                      <div className="text-sm text-gray-700 h-20 overflow-y-auto">
                        {transcript || 'Listening...'}
                      </div>
                    </div>

                    {/* Sentiment Analysis */}
                    <div className="flex items-center space-x-4">
                      <span className="font-bold text-black">Sentiment:</span>
                      <span className={`px-2 py-1 rounded text-sm font-medium ${
                        sentiment === 'positive' ? 'bg-green-200 text-green-800' :
                        sentiment === 'negative' ? 'bg-red-200 text-red-800' :
                        'bg-yellow-200 text-yellow-800'
                      }`}>
                        {sentiment}
                      </span>
                    </div>

                    {/* Speaker Detection */}
                    <div>
                      <span className="font-bold text-black">Speakers:</span>
                      <div className="flex flex-wrap gap-2 mt-1">
                        {speakers.map((speaker, index) => (
                          <span key={index} className="px-2 py-1 bg-blue-200 text-blue-800 rounded text-sm">
                            {speaker}
                          </span>
                        ))}
                      </div>
                    </div>

                    {/* Call Controls */}
                    <div className="flex justify-center space-x-4">
                      <Button 
                        onClick={() => setCurrentStep(4)}
                        className="bg-red-600 hover:bg-red-700 text-white px-6 py-2"
                      >
                        End Call
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                {/* Audio Visualization */}
                <Card className="bg-white border-2 border-black">
                  <CardContent className="text-center py-8">
                    <div className="text-6xl mb-4">
                      {isRecording ? '🎤' : '📞'}
                    </div>
                    <p className="text-lg text-gray-700">
                      {isRecording ? 'Recording audio...' : 'Click Start to begin'}
                    </p>
                  </CardContent>
                </Card>
              </div>
            )}

            {currentStep === 4 && (
              <div className="text-center space-y-6">
                <h2 className="text-3xl font-bold text-black">Call Complete!</h2>
                <div className="bg-white p-6 rounded-lg border-2 border-black">
                  <h3 className="text-xl font-bold mb-4">Call Summary</h3>
                  <div className="space-y-2 text-left">
                    <p><strong>Duration:</strong> {formatDuration(callDuration)}</p>
                    <p><strong>Final Sentiment:</strong> {sentiment}</p>
                    <p><strong>Speakers Detected:</strong> {speakers.length}</p>
                    <p><strong>Transcript Length:</strong> {transcript.length} characters</p>
                  </div>
                </div>
                <Button 
                  onClick={() => {
                    setCurrentStep(1);
                    setCallId('');
                    setTranscript('');
                    setSentiment('neutral');
                    setSpeakers([]);
                    setCallDuration(0);
                  }}
                  className="bg-orange-600 hover:bg-orange-700 text-white px-8 py-4 text-lg font-bold"
                >
                  Start New Call
                </Button>
              </div>
            )}

            {/* Real-time Features */}
            {currentStep === 3 && (
              <Card className="bg-white border-2 border-black">
                <CardContent className="pt-6">
                  <h3 className="text-xl font-bold text-black mb-4">Real-time Features</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div className="flex items-center gap-2">
                      <UilWifi className="h-4 w-4 text-orange-600" />
                      <span>WebRTC Connection</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <UilMicrophone className="h-4 w-4 text-orange-600" />
                      <span>Live Audio Processing</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <UilPhone className="h-4 w-4 text-orange-600" />
                      <span>ASR Transcription</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <UilChartGrowth className="h-4 w-4 text-orange-600" />
                      <span>Sentiment Analysis</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Footer */}
            <div className="mt-8">
              <OnboardingFooter />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}



================================================
FILE: transcribe/DragDropUpload.tsx
================================================
'use client';

import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { UilUpload, UilFileAlt, UilCheckCircle, UilExclamationTriangle } from '@tooni/iconscout-unicons-react';
import { Card, CardContent } from '@/components/ui/card';
import { cn } from '@/lib/utils';

interface DragDropUploadProps {
  onFileSelect: (file: File) => void;
  acceptedFormats?: string[];
  maxFileSize?: number;
  disabled?: boolean;
}

export function DragDropUpload({ 
  onFileSelect, 
  acceptedFormats = ['audio/mp3', 'audio/wav', 'audio/ogg', 'audio/m4a', 'audio/flac'],
  maxFileSize = 25 * 1024 * 1024, // 25MB
  disabled = false
}: DragDropUploadProps) {
  const [isDragging, setIsDragging] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const onDrop = useCallback((acceptedFiles: File[], rejectedFiles: any[]) => {
    setError(null);
    
    if (rejectedFiles.length > 0) {
      const rejection = rejectedFiles[0];
      if (rejection.errors[0]?.code === 'file-too-large') {
        setError('File is too large. Maximum size is 25MB.');
      } else if (rejection.errors[0]?.code === 'file-invalid-type') {
        setError('Invalid file type. Please upload an audio file.');
      } else {
        setError('File upload failed. Please try again.');
      }
      return;
    }
    
    if (acceptedFiles.length > 0) {
      const file = acceptedFiles[0];
      onFileSelect(file);
    }
  }, [onFileSelect]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: acceptedFormats.reduce((acc, format) => ({ ...acc, [format]: [] }), {}),
    maxSize: maxFileSize,
    multiple: false,
    disabled: disabled
  });

  return (
    <div className="w-full">
      <div
        {...getRootProps()}
        className={cn(
          'relative border-4 border-dashed rounded-lg p-8 text-center transition-all duration-200 cursor-pointer',
          isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-gray-400',
          disabled && 'opacity-50 cursor-not-allowed',
          error && 'border-red-500 bg-red-50'
        )}
      >
        <input {...getInputProps()} />
        
        <div className="flex flex-col items-center space-y-4">
          <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
            <UilUpload className="w-8 h-8 text-blue-600" />
          </div>
          
          <div>
            <p className="text-lg font-semibold text-gray-900">
              {isDragActive ? 'Drop your audio file here' : 'Drag & drop your audio file'}
            </p>
            <p className="text-sm text-gray-600 mt-2">
              or <span className="text-blue-600 font-medium">click to browse</span>
            </p>
          </div>
          
          <div className="text-xs text-gray-500 space-y-1">
            <p>Supported: MP3, WAV, OGG, M4A, FLAC</p>
            <p>Max size: 25MB</p>
          </div>
        </div>
      </div>
      
      {error && (
        <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-md flex items-center space-x-2">
          <UilExclamationTriangle className="w-5 h-5 text-red-500" />
          <p className="text-sm text-red-700">{error}</p>
        </div>
      )}
    </div>
  );
}


================================================
FILE: transcribe/page.tsx
================================================
'use client';

import * as React from 'react';
import { toast } from 'sonner';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import CopyTranscriptModal from '@/components/onboarding/modals/CopyTranscriptModal';
import BulkDownloadModal from '@/components/onboarding/modals/BulkDownloadModal';
import ChatWithDialaModal from '@/components/onboarding/modals/ChatWithDialaModal';
import VoiceCloneModal from '@/components/onboarding/modals/VoiceCloneModal';
import VerificationModal from '@/components/custom/modals/verification-modal';
import TranscriptSkeleton from '@/components/custom/transcript-skeleton';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { UilFileAlt, UilUpload, UilArrowRight, UilCopy, UilCloudDownload, UilCommentDots, UilMicrophone, UilMusicNote, UilVolumeUp, UilPlay, UilPause, UilUser } from '@tooni/iconscout-unicons-react';
import { DragDropUpload } from './DragDropUpload';
import { useQuery, useMutation } from 'convex/react';
import { api } from '@convex/_generated/api';
import { v4 as uuidv4 } from 'uuid';
import { useApiErrorHandler } from '@/hooks/useApiErrorHandler';
import { Star15 } from '@/components/ui/star';
import { SpeakerTimeline } from '@/components/transcripts/SpeakerTimeline';

export default function TranscriptsOnboarding() {
  const { handleError } = useApiErrorHandler();
  const [currentStep, setCurrentStep] = React.useState(1);
  const [selectedFile, setSelectedFile] = React.useState<File | null>(null);
  const [audioUrl, setAudioUrl] = React.useState<string>('');
  const [transcript, setTranscript] = React.useState('');
  const [isLoading, setIsLoading] = React.useState(false);
  const [showCopyModal, setShowCopyModal] = React.useState(false);
  const [showBulkModal, setShowBulkModal] = React.useState(false);
  const [showChatModal, setShowChatModal] = React.useState(false);
  const [showVoiceCloneModal, setShowVoiceCloneModal] = React.useState(false);
  const [showVerificationModal, setShowVerificationModal] = React.useState(false);
  const [verificationComplete, setVerificationComplete] = React.useState(false);
  const [uploadProgress, setUploadProgress] = React.useState(0);
  const [audioMetadata, setAudioMetadata] = React.useState<{
    fileName?: string;
    fileSize?: string;
  }>({});
  const [selectedAction, setSelectedAction] = React.useState<string | null>(null);
  const [activeTab, setActiveTab] = React.useState<'transcript' | 'speakers'>('transcript');
  const [jobId, setJobId] = React.useState<string>('');
  const [devMode, setDevMode] = React.useState(false);

  // Convex mutations
  const createTranscriptionJob = useMutation(api.mutations.audioTranscripts.createJob);

  // Convex queries
  const transcriptionJob = useQuery(api.queries.audioTranscripts.getJob, jobId ? { jobId } : "skip");
  const rateLimit = useQuery(api.queries.audioTranscripts.canCreateTranscription, { userId: 'user123' });



  React.useEffect(() => {
    if (!transcriptionJob || !jobId) return;

    if (transcriptionJob.status === 'completed') {
      setTranscript(transcriptionJob.transcript || 'Transcription finished successfully.');
      setIsLoading(false);
      setUploadProgress(100);
      toast.success("Transcription complete!");
    } else if (transcriptionJob.status === 'failed') {
      toast.error('Transcription failed.');
      setTranscript('Error: ' + (transcriptionJob.error || 'Unknown error'));
      setIsLoading(false);
    } else if (transcriptionJob.status === 'processing') {
      if (!isLoading) setIsLoading(true);
      const startTime = transcriptionJob.processingStartedAt;
      if (startTime) {
        const elapsed = Date.now() - startTime;
        const estimatedProgress = Math.min(95, 10 + (elapsed / 30000) * 85); // 30-second estimate
        setUploadProgress(estimatedProgress);
      }
    }
  }, [transcriptionJob, jobId]);

  // Dev mode auto-fill effect
  React.useEffect(() => {
    if (devMode && process.env.NODE_ENV === 'development') {
      // Load actual GlenCoco test file from public directory
      const loadTestFile = async () => {
        try {
          const response = await fetch('/REd4768f876e8bc5b34d83e04f484b0d31.wav');
          const blob = await response.blob();
          const file = new File([blob], 'REd4768f876e8bc5b34d83e04f484b0d31.wav', { type: 'audio/wav' });
          
          setSelectedFile(file);
          setAudioUrl(URL.createObjectURL(file));
          setAudioMetadata({
            fileName: 'REd4768f876e8bc5b34d83e04f484b0d31.wav',
            fileSize: `${(blob.size / 1024 / 1024).toFixed(2)} MB`,
          });
          
          toast.success('Dev mode: GlenCoco test file loaded');
        } catch (error) {
          console.error('Dev mode: Failed to load GlenCoco file:', error);
          toast.error('Dev mode: Could not load GlenCoco file');
        }
      };
      
      loadTestFile();
    }
  }, [devMode]);

  const testBackendConnection = async (backendUrl: string): Promise<boolean> => {
    try {
      const response = await fetch(`${backendUrl}/health`, { method: 'GET' });
      console.log('Backend health check:', response.status);
      return response.ok;
    } catch (error) {
      console.error('Backend connection test failed:', error);
      return false;
    }
  };

  const processTranscription = async () => {
    if (!selectedFile) return;

    if (rateLimit && !rateLimit.canCreate) {
      toast.error(`Rate limit exceeded. Try again after ${new Date(rateLimit.resetAt).toLocaleTimeString()}`);
      return;
    }

    setIsLoading(true);
    setTranscript('');
    setUploadProgress(5);
    const newJobId = uuidv4();
    
    try {
      // Step 1: Create the job placeholder in Convex.
      await createTranscriptionJob({
        jobId: newJobId,
        userId: 'user123',
        fileName: selectedFile.name,
        fileSize: selectedFile.size,
        fileFormat: selectedFile.name.split('.').pop() || 'unknown',
      });
      
      // Now that the job exists, set the ID to start polling.
      setJobId(newJobId);
      setUploadProgress(10);

      // Step 2: Construct FormData to EXACTLY match the backend signature.
      const formData = new FormData();
      formData.append('file', selectedFile);
      formData.append('job_id', newJobId);
      formData.append('user_id', 'user123');
      formData.append('separate_voices', 'true');
      formData.append('identify_speakers', 'true');
      
      // Step 3: Upload the file to the backend.
      const backendUrl = process.env.NEXT_PUBLIC_API_URL || process.env.NEXT_PUBLIC_AUDIO_SERVICE_URL || 'http://localhost:8001';
      const uploadUrl = `${backendUrl}/api/public/audio/transcribe`;
      console.log('Backend URL from env:', process.env.NEXT_PUBLIC_API_URL);
      console.log('Attempting to upload to:', uploadUrl);

      // Test backend connection first
      const isBackendReachable = await testBackendConnection(backendUrl);
      if (!isBackendReachable) {
        throw new Error(`Backend server at ${backendUrl} is not reachable. Please ensure the backend is running.`);
      }
      console.log('FormData contents:', {
        file: selectedFile.name,
        job_id: newJobId,
        user_id: 'user123',
        separate_voices: 'true',
        identify_speakers: 'true'
      });

      console.log('Starting fetch request with timeout...');
      
      // Create AbortController for timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        console.log('Request timeout - aborting fetch');
        controller.abort();
      }, 30000); // 30 second timeout

      const response = await fetch(uploadUrl, {
        method: 'POST',
        body: formData,
        signal: controller.signal,
        // Add headers for debugging
        headers: {
          // Don't set Content-Type - let browser set it with boundary for FormData
        }
      });

      clearTimeout(timeoutId);
      console.log('Fetch request completed successfully');

      console.log('Response status:', response.status);
      console.log('Response headers:', Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Backend error response:', errorText);
        let errorData;
        try {
          errorData = JSON.parse(errorText);
        } catch {
          errorData = { detail: errorText || response.statusText };
        }
        throw new Error(`Upload failed (${response.status}): ${errorData.detail || response.statusText}`);
      }

      const result = await response.json();
      console.log('Backend accepted job:', result);
      // The backend is now processing. The useQuery hook will handle all future UI updates.
      
    } catch (error) {
      console.error('Error starting transcription:', error);
      console.error('Error type:', typeof error);
      console.error('Error constructor:', error?.constructor?.name);
      
      // More detailed error logging
      if (error instanceof TypeError && error.message.includes('fetch')) {
        console.error('Network error - likely CORS or connection issue');
        toast.error('Network error: Cannot connect to backend. Check if backend is running.');
        setTranscript('Network error: Cannot connect to backend. Please check if the backend server is running.');
      } else if (error instanceof Error) {
        console.error('Error details:', error.message);
        console.error('Error stack:', error.stack);
        toast.error(`Error: ${error.message}`);
        setTranscript(`Error: ${error.message}`);
      } else {
        console.error('Unknown error:', error);
        toast.error('Unknown error occurred');
        setTranscript('Unknown error occurred. Please try again.');
      }
      
      handleError(error);
      setIsLoading(false);
      setUploadProgress(0);
    }
  };
  
  const handleFileSelect = (file: File) => {
    const validTypes = ['audio/mp3', 'audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/m4a', 'audio/flac'];
    if (!validTypes.includes(file.type) && !file.name.match(/\.(mp3|wav|ogg|m4a|flac)$/i)) {
      toast.error('Please upload a valid audio file.');
      return;
    }
    setSelectedFile(file);
    setAudioUrl(URL.createObjectURL(file));
    setAudioMetadata({
      fileName: file.name,
      fileSize: `${(file.size / 1024 / 1024).toFixed(2)} MB`,
    });
  };

  const handleContinue = () => {
    if (selectedFile) {
      setShowVerificationModal(true);
    }
  };
  
  const handleCopyTranscript = () => { if (transcript) { navigator.clipboard.writeText(transcript); setShowCopyModal(true); } };
  const createTranscriptChunks = (text: string) => { const words = text.split(' '); const chunks = []; for (let i = 0; i < words.length; i += 3) { chunks.push(words.slice(i, i + 3).join(' ')); } return chunks; };

  const handleVerificationComplete = (email: string, phone: string) => {
    setVerificationComplete(true);
    setShowVerificationModal(false);
    setCurrentStep(2);
    processTranscription();
  };

  return (
    <>
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-4 right-4 z-50">
          <Button
            onClick={() => setDevMode(!devMode)}
            className={`h-10 px-4 text-sm font-black uppercase ${
              devMode
                ? 'bg-green-500 hover:bg-green-600 text-white'
                : 'bg-gray-200 hover:bg-gray-300 text-black'
            } border-2 border-black`}
          >
            DEV MODE {devMode ? 'ON' : 'OFF'}
          </Button>
        </div>
      )}
      <div className="min-h-screen bg-blue-500 relative pb-8" style={{ fontFamily: 'Noyh-Bold, sans-serif', backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`, backgroundSize: '60px 60px' }}>
        <div className="flex flex-col items-center justify-center min-h-screen p-4">
          <div className="w-full max-w-4xl space-y-8">
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardHeader className="relative">
                <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">AUDIO TRANSCRIBER</CardTitle>
                <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">TRANSCRIBE ANY AUDIO FILE</p>
              </CardHeader>
            </Card>
            
            {currentStep === 1 ? (
              <div className="w-full max-w-2xl mx-auto space-y-8">
                <Card className="transform rotate-1 relative overflow-hidden">
                  <CardContent className="p-6">
                    <div className="mb-6 bg-white transform rotate-0.5 p-6 text-center border-4 border-black rounded-[3px] shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <h3 className="text-2xl font-black text-black mb-3">Transcribe Audio Files for <span className="text-blue-500">FREE</span></h3>
                    </div>
                    <Card className="bg-blue-50 border-4 border-black mb-6">
                      <CardContent className="p-8">
                        <DragDropUpload onFileSelect={handleFileSelect} disabled={isLoading} />
                        {selectedFile && (
                          <div className="mt-4 p-4 bg-green-50 border-2 border-black rounded">
                            <p className="font-bold">✓ {selectedFile.name} uploaded</p>
                            <p className="text-sm text-gray-600">Size: {audioMetadata.fileSize}</p>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                    <Button className="w-full mt-6 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black" onClick={handleContinue} disabled={!selectedFile}>
                      <span className="flex items-center justify-center">CONTINUE <UilArrowRight className="ml-2 h-6 w-6" /></span>
                    </Button>
                  </CardContent>
                </Card>
              </div>
            ) : (
              <div className="w-full space-y-6">
                <Card className="transform rotate-1">
                  <CardContent className="p-6">
                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <h3 className="text-xl font-black uppercase">TRANSCRIPTION PROGRESS</h3>
                        <Badge className="bg-blue-500 text-white border-2 border-black">{isLoading ? 'PROCESSING' : 'COMPLETED'}</Badge>
                      </div>
                      {(isLoading || uploadProgress > 0) && (
                        <div className="space-y-2">
                          <div className="w-full bg-gray-200 rounded-full h-4 border-2 border-black">
                            <div className="bg-blue-500 h-full rounded-full transition-all duration-300" style={{ width: `${uploadProgress}%` }} />
                          </div>
                          <p className="text-sm font-semibold text-center">{Math.round(uploadProgress)}%</p>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
                <div className="flex items-start gap-4">
                  <Card className="flex-1 bg-yellow-50">
                    <CardContent className="p-8 space-y-6">
                      {selectedFile && (
                        <div className="space-y-3">
                          <Badge className="bg-blue-500 text-white border-2 border-black px-3 py-1 text-sm font-bold">AUDIO FILE</Badge>
                          <h1 className="text-3xl font-black uppercase text-black">{audioMetadata.fileName?.toUpperCase() || 'AUDIO FILE'}</h1>
                          <div className="flex items-center gap-4 flex-wrap">
                            <div className="flex items-center gap-2"><span className="text-lg font-bold text-gray-700">SIZE:</span><span className="text-lg font-black text-black">{audioMetadata.fileSize || 'N/A'}</span></div>
                            <span className="text-gray-400">·</span>
                            <div className="flex items-center gap-2"><span className="text-lg font-bold text-gray-700">FORMAT:</span><span className="text-lg font-black text-black">{selectedFile?.name.split('.').pop()?.toUpperCase() || 'N/A'}</span></div>
                          </div>
                        </div>
                      )}
                      <div className="rounded-lg bg-gray-100 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] overflow-hidden p-6">
                        {audioUrl ? (<audio controls className="w-full" src={audioUrl}>Your browser does not support the audio element.</audio>) : (<div className="h-12 bg-gray-200 animate-pulse rounded-md"></div>)}
                      </div>
                      <div className="grid grid-cols-2 gap-4">
                        <Card className="transform -rotate-1 hover:rotate-0 transition-transform cursor-pointer" onClick={() => { setSelectedAction('copy'); handleCopyTranscript(); }}>
                           <Button variant="ghost" className="w-full h-full p-6 flex flex-col items-center justify-center gap-3 hover:bg-gray-50"><div className="w-16 h-16 bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] flex items-center justify-center"><UilCopy className="h-8 w-8 text-black" /></div><span className="text-lg font-black text-black uppercase">COPY TRANSCRIPT</span></Button>
                        </Card>
                         <Card className="transform rotate-1 hover:rotate-0 transition-transform bg-purple-50 cursor-pointer" onClick={() => { setSelectedAction('voice-clone'); setShowVoiceCloneModal(true); }}>
                           <Button variant="ghost" className="w-full h-full p-6 flex flex-col items-center justify-center gap-3 hover:bg-purple-100"><div className="w-16 h-16 bg-purple-500 border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] flex items-center justify-center"><UilUser className="h-8 w-8 text-white" /></div><span className="text-lg font-black text-black uppercase">VOICE CLONE</span></Button>
                         </Card>
                         <Card className="transform rotate-1 hover:rotate-0 transition-transform bg-yellow-50 cursor-pointer" onClick={() => { setSelectedAction('bulk-process'); setShowBulkModal(true); }}>
                           <Button variant="ghost" className="w-full h-full p-6 flex flex-col items-center justify-center gap-3 hover:bg-yellow-100"><div className="w-16 h-16 bg-yellow-400 border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] flex items-center justify-center"><UilCloudDownload className="h-8 w-8 text-black" /></div><span className="text-lg font-black text-black uppercase">BULK PROCESS</span></Button>
                         </Card>
                         <Card className="transform -rotate-1 hover:rotate-0 transition-transform bg-blue-50 cursor-pointer" onClick={() => { setSelectedAction('chat'); setShowChatModal(true); }}>
                           <Button variant="ghost" className="w-full h-full p-6 flex flex-col items-center justify-center gap-3 hover:bg-blue-100"><div className="w-16 h-16 bg-[rgb(0,82,255)] border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] flex items-center justify-center"><UilCommentDots className="h-8 w-8 text-white" /></div><span className="text-lg font-black text-black uppercase">CHAT WITH DIALA</span></Button>
                         </Card>
                      </div>
                      <div className="flex gap-2 mb-4">
                        <button onClick={() => setActiveTab('transcript')} className={`px-4 py-2 font-bold border-2 border-black rounded ${activeTab === 'transcript' ? 'bg-blue-500 text-white' : 'bg-white text-black hover:bg-gray-100'}`}>FULL TRANSCRIPT</button>
                        <button onClick={() => setActiveTab('speakers')} className={`px-4 py-2 font-bold border-2 border-black rounded ${activeTab === 'speakers' ? 'bg-blue-500 text-white' : 'bg-white text-black hover:bg-gray-100'}`}>SPEAKERS</button>
                      </div>
                      {isLoading && !transcript ? (<TranscriptSkeleton />) : (
                        <div className="rounded-lg bg-yellow-100 p-6">
                          {activeTab === 'transcript' ? (
                            <div className="text-xl font-black text-black">
                              {transcript ? (createTranscriptChunks(transcript).map((chunk, index) => (<React.Fragment key={index}><span className="hover:bg-yellow-200 cursor-pointer transition-colors px-1 py-0.5 rounded">{chunk}</span>{index < createTranscriptChunks(transcript).length - 1 && ' '}</React.Fragment>))) : (<p className="text-center text-gray-500">Transcript will appear here</p>)}
                            </div>
                          ) : (
                            <SpeakerTimeline 
                              transcript={transcript} 
                              speakers={transcriptionJob?.segments || transcriptionJob?.speakers || []}
                              langextract={transcriptionJob?.langextract}
                              sentimentAnalysis={transcriptionJob?.langextract ? {
                                sentiment: (transcriptionJob.langextract?.sentiments?.[0]?.text || 'neutral').toLowerCase(),
                                confidence: (() => {
                                  const conf = transcriptionJob.langextract?.sentiments?.[0]?.attributes?.confidence;
                                  const num = typeof conf === 'string' ? (conf.toLowerCase()==='high'?0.9:conf.toLowerCase()==='medium'?0.6:0.3) : (typeof conf === 'number'? conf : 0.5);
                                  return num;
                                })(),
                                emotions: (() => {
                                  const emos = transcriptionJob.langextract?.emotions || [];
                                  const counts: Record<string, number> = {};
                                  emos.forEach((e: any) => { const t=(e?.text||'').toLowerCase(); counts[t]=(counts[t]||0)+1; });
                                  const total = Object.values(counts).reduce((a:number,b:number)=>a+b,0) || 1;
                                  const norm: Record<string, number> = {};
                                  Object.entries(counts).forEach(([k,v]: any) => { norm[k]= (v as number)/total; });
                                  return norm;
                                })()
                              } : undefined}
                            />
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              </div>
            )}
          </div>
        </div>
        <CopyTranscriptModal isOpen={showCopyModal} onClose={() => setShowCopyModal(false)} />
        <BulkDownloadModal isOpen={showBulkModal} onClose={() => setShowBulkModal(false)} />
        <ChatWithDialaModal isOpen={showChatModal} onClose={() => setShowChatModal(false)} />
        <VoiceCloneModal isOpen={showVoiceCloneModal} onClose={() => setShowVoiceCloneModal(false)} />
        <VerificationModal 
          isOpen={showVerificationModal} 
          onClose={() => setShowVerificationModal(false)} 
          onComplete={handleVerificationComplete}
          devMode={devMode}
        />
        <div className="mt-8"><OnboardingFooter /></div>
      </div>
    </>
  );
}



================================================
FILE: transcripts/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import CopyTranscriptModal from '@/components/onboarding/modals/CopyTranscriptModal';
import BulkDownloadModal from '@/components/onboarding/modals/BulkDownloadModal';
import ChatWithDialaModal from '@/components/onboarding/modals/ChatWithDialaModal';
import TranscriptSkeleton from '@/components/custom/transcript-skeleton';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { useAction } from "convex/react";
import { api } from "@convex/_generated/api";
import { UilFileAlt, UilClipboardNotes, UilDocumentInfo, UilYoutube, UilDownloadAlt, UilArrowRight, UilTwitter, UilFacebookF, UilInstagram, UilLinkedin, UilShare, UilWhatsapp, UilThumbsUp, UilBell, UilCopy, UilCloudDownload, UilCommentDots, UilQuestionCircle, UilFileDownloadAlt, UilBrain, UilDatabase, UilAnalysis } from '@tooni/iconscout-unicons-react';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";

export default function TranscriptsOnboarding() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [youtubeUrl, setYoutubeUrl] = React.useState('');
  const [transcript, setTranscript] = React.useState('');
  const [isLoading, setIsLoading] = React.useState(false);
  const [showCopyModal, setShowCopyModal] = React.useState(false);
  const [showBulkModal, setShowBulkModal] = React.useState(false);
  const [showChatModal, setShowChatModal] = React.useState(false);
  const [jobId, setJobId] = React.useState<string | null>(null);
  const [videoMetadata, setVideoMetadata] = React.useState<{
    title?: string;
    author?: string;
    duration?: number;
  }>({});

  const fetchYoutubeTranscript = useAction(api.youtubeTranscriptActions.fetchYoutubeTranscript);
  const getJobStatus = useAction(api.youtubeTranscriptActions.getJobStatus);

  const fetchTranscript = async (url: string) => {
    setIsLoading(true);
    setTranscript('');
    
    try {
      // Start transcript fetch job
      const result = await fetchYoutubeTranscript({
        youtubeUrl: url,
        userId: "user123", // TODO: Get from auth context
      });
      
      console.log('Initial fetch result:', result);

      if (result.cached && result.transcript && result.transcript !== 'No subtitles available for this video') {
        // Immediately show cached transcript
        setTranscript(result.transcript);
        // Set metadata if available
        if (result.videoTitle || result.videoAuthor || result.title || result.author) {
          setVideoMetadata({
            title: result.videoTitle || result.title,
            author: result.videoAuthor || result.author,
            duration: result.videoDuration || result.duration,
          });
        }
        setIsLoading(false);
        return;
      }

      // Store job ID for polling
      setJobId(result.jobId);

      // Poll for job completion
      const pollInterval = setInterval(async () => {
        try {
          const status = await getJobStatus({ jobId: result.jobId });
          
          if (status.status === "completed" && status.transcript && status.transcript !== 'No subtitles available for this video') {
            setTranscript(status.transcript);
            // Set video metadata if available
            console.log('Job status response:', status);
            if (status.videoTitle || status.videoAuthor || status.title || status.author) {
              setVideoMetadata({
                title: status.videoTitle || status.title || 'Video Title',
                author: status.videoAuthor || status.author || 'Video Author',
                duration: status.videoDuration || status.duration,
              });
            }
            setIsLoading(false);
            clearInterval(pollInterval);
          } else if (status.status === "failed") {
            setTranscript(`Error: ${status.error || 'Failed to fetch transcript'}`);
            setIsLoading(false);
            clearInterval(pollInterval);
          }
        } catch (error) {
          console.error('Error polling job status:', error);
        }
      }, 2000); // Poll every 2 seconds

      // Stop polling after 60 seconds
      setTimeout(() => {
        clearInterval(pollInterval);
        if (isLoading) {
          setTranscript('Timeout: Taking too long to fetch transcript. Please try again.');
          setIsLoading(false);
        }
      }, 60000);

    } catch (error: any) {
      console.error('Error fetching transcript:', error);
      setTranscript(error.message || 'Error loading transcript. Please try again.');
      setIsLoading(false);
    }
  };

  const handleContinue = () => {
    if (youtubeUrl) {
      fetchTranscript(youtubeUrl);
      setCurrentStep(2);
    }
  };

  const handleCopyTranscript = () => {
    if (transcript) {
      navigator.clipboard.writeText(transcript);
      setShowCopyModal(true);
    }
  };

  const createTranscriptChunks = (text: string) => {
    const words = text.split(' ');
    const chunks = [];
    for (let i = 0; i < words.length; i += 3) {
      chunks.push(words.slice(i, i + 3).join(' '));
    }
    return chunks;
  };

  return (
    <>
      <div className="min-h-screen bg-red-500 relative pb-8" style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}>

      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <div className="w-full max-w-4xl space-y-8">
          {/* Persistent Title Card */}
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-red-600 border-2 border-black flex items-center justify-center">
                <UilYoutube className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-red-500 border-2 border-black flex items-center justify-center">
                <UilFileAlt className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-red-600 hover:bg-red-700 border-4 border-black p-0">
                  <UilYoutube className="h-12 w-12 text-white" />
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                YOUTUBE TO TRANSCRIPT
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                BULK DOWNLOAD TRANSCRIPTS
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-red-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-red-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-red-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>
          
          {currentStep === 1 ? (
            <div className="w-full max-w-2xl mx-auto space-y-8">
              {/* Feature Cards Container */}
              <Card className="transform rotate-1 relative overflow-hidden">
                <CardContent className="p-6">
                  {/* Description */}
                  <div className="mb-6 bg-white transform rotate-0.5 p-6 text-center border-4 border-black rounded-[3px] shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="text-2xl font-black text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                      Generate YouTube Transcript for <span className="text-red-500">FREE</span>
                    </h3>
                    <div className="space-y-2">
                      <div className="flex items-center justify-center gap-2">
                        <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                        <p className="text-base font-semibold text-black">Access all Transcript Languages</p>
                      </div>
                      <div className="flex items-center justify-center gap-2">
                        <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                        <p className="text-base font-semibold text-black">Translate to 125+ Languages</p>
                      </div>
                      <div className="flex items-center justify-center gap-2">
                        <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                        <p className="text-base font-semibold text-black">Easy Copy and Edit</p>
                      </div>
                    </div>
                  </div>

                  {/* URL Input */}
                  <div className="mb-6">
                    <label className="text-xl font-black uppercase mb-3 block">
                      PASTE YOUTUBE URL
                    </label>
                    <Input
                      type="text"
                      value={youtubeUrl}
                      onChange={(e) => setYoutubeUrl(e.target.value)}
                      placeholder="https://youtube.com/watch?v=..."
                      className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-3">
                    <Card className="bg-yellow-100 md:transform md:-rotate-1 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <CardContent className="p-6 md:p-4">
                        <div className="flex flex-col items-center justify-center text-center gap-3 md:gap-2">
                          <Button 
                            size="icon"
                            variant="default"
                            className="w-12 h-12 md:w-10 md:h-10 bg-yellow-400 hover:bg-yellow-500 border-4 border-black"
                          >
                            <UilCopy className="h-6 w-6 md:h-5 md:w-5 text-black" />
                          </Button>
                          <span className="font-bold text-base md:text-sm text-black">ONE-CLICK COPY</span>
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-yellow-100 md:transform md:rotate-1 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <CardContent className="p-6 md:p-4">
                        <div className="flex flex-col items-center justify-center text-center gap-3 md:gap-2">
                          <Button 
                            size="icon"
                            variant="default"
                            className="w-12 h-12 md:w-10 md:h-10 bg-yellow-400 hover:bg-yellow-500 border-4 border-black"
                          >
                            <UilFileAlt className="h-6 w-6 md:h-5 md:w-5 text-black" />
                          </Button>
                          <span className="font-bold text-base md:text-sm text-black">SUPPORTS TRANSLATION</span>
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-yellow-100 md:transform md:-rotate-1 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <CardContent className="p-6 md:p-4">
                        <div className="flex flex-col items-center justify-center text-center gap-3 md:gap-2">
                          <Button 
                            size="icon"
                            variant="default"
                            className="w-12 h-12 md:w-10 md:h-10 bg-yellow-400 hover:bg-yellow-500 border-4 border-black"
                          >
                            <UilCommentDots className="h-6 w-6 md:h-5 md:w-5 text-black" />
                          </Button>
                          <span className="font-bold text-base md:text-sm text-black">MULTIPLE LANGUAGES</span>
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  <Button
                    className="w-full mt-6 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={handleContinue}
                    disabled={!youtubeUrl}
                  >
                    <span className="flex items-center justify-center">
                      CONTINUE
                      <UilArrowRight className="ml-2 h-6 w-6" />
                    </span>
                  </Button>
                </CardContent>
              </Card>

              {/* Info Section - YouTube Transcript Training */}
              <div className="mt-12 max-w-4xl mx-auto px-4 sm:px-6 space-y-6">
                <Card className="transform -rotate-1 relative overflow-hidden bg-yellow-50">
                  <CardContent className="relative pt-6">
                    <div className="flex items-start gap-4">
                      <Button
                        size="icon"
                        variant="default"
                        className="w-12 h-12 flex-shrink-0 bg-red-500 hover:bg-red-600 text-white border-black"
                      >
                        <UilYoutube className="h-6 w-6 text-white" />
                      </Button>
                      <div className="flex-1">
                        <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          YOUTUBE TRANSCRIPT TRAINING DATA
                        </h3>
                        <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                          We leverage bulk YouTube downloads to create powerful training datasets for your voice agents. Transcripts from thousands of real conversations help our AI understand natural speech patterns, industry-specific terminology, and authentic dialogue flow.
                        </p>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="flex items-center gap-3">
                            <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                            <span className="text-black font-medium">Access to millions of real conversations</span>
                          </div>
                          <div className="flex items-center gap-3">
                            <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                            <span className="text-black font-medium">Industry-specific vocabulary training</span>
                          </div>
                          <div className="flex items-center gap-3">
                            <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                            <span className="text-black font-medium">Natural speech pattern recognition</span>
                          </div>
                          <div className="flex items-center gap-3">
                            <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                            <span className="text-black font-medium">Continuous model improvement</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Bulk Processing Power Card */}
                <Card className="transform rotate-1 relative overflow-hidden bg-yellow-50">
                  <CardContent className="pt-6">
                    <div className="flex items-start gap-4">
                      <Button
                        size="icon"
                        variant="default"
                        className="w-12 h-12 flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90 text-black"
                      >
                        <UilCloudDownload className="h-6 w-6 text-black" />
                      </Button>
                      <div className="flex-1">
                        <h3 className="text-xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          BULK PROCESSING POWER
                        </h3>
                        <p className="text-gray-700 text-lg leading-relaxed">
                          Our advanced infrastructure can process up to <span className="font-black text-red-500">10,000 YouTube videos per hour</span>, 
                          extracting transcripts and analyzing conversation patterns at scale. This massive processing capability ensures 
                          your voice agent is trained on the most comprehensive dataset possible, covering every scenario they might encounter.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          ) : (
            <div className="w-full space-y-6">
              {/* URL Input */}
              <Card className="transform rotate-1">
                <CardContent className="p-6">
                  <label className="text-xl font-black uppercase mb-3 block">
                    PASTE YOUTUBE URL
                  </label>
                  <Input
                    type="text"
                    value={youtubeUrl}
                    onChange={(e) => setYoutubeUrl(e.target.value)}
                    placeholder="https://youtube.com/watch?v=..."
                    className="h-14 text-lg font-semibold border-4 border-black rounded-[3px]"
                  />
                  <Button
                    className="w-full mt-4 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={handleContinue}
                    disabled={!youtubeUrl}
                  >
                    <span className="flex items-center justify-center">
                      CONTINUE
                      <UilArrowRight className="ml-2 h-6 w-6" />
                    </span>
                  </Button>
                </CardContent>
              </Card>

              {/* Container with side buttons and card */}
              <div className="flex items-start gap-4">
                {/* Left side buttons */}
                <div className="flex flex-col gap-[10px]">
                  <Button variant="subheader" size="icon" className="bg-[#FF0000] hover:bg-[#CC0000]">
                    <UilYoutube className="h-5 w-5 text-white" />
                  </Button>
                  <Button variant="subheader" size="icon" className="bg-[#1DA1F2] hover:bg-[#1A8CD8]">
                    <UilTwitter className="h-5 w-5 text-white" />
                  </Button>
                  <Button variant="subheader" size="icon" className="bg-[#1877F2] hover:bg-[#166FE5]">
                    <UilFacebookF className="h-5 w-5 text-white" />
                  </Button>
                  <Button variant="subheader" size="icon" className="bg-[#E4405F] hover:bg-[#D62949]">
                    <UilInstagram className="h-5 w-5 text-white" />
                  </Button>
                  <Button variant="subheader" size="icon" className="bg-[#0A66C2] hover:bg-[#004182]">
                    <UilLinkedin className="h-5 w-5 text-white" />
                  </Button>
                  <Button variant="subheader" size="icon" className="bg-[#6366F1] hover:bg-[#4F46E5]">
                    <UilShare className="h-5 w-5 text-white" />
                  </Button>
                  <Button variant="subheader" size="icon" className="bg-[#25D366] hover:bg-[#1EBE57]">
                    <UilWhatsapp className="h-5 w-5 text-white" />
                  </Button>
                </div>

                {/* Rounded Div with Action Buttons */}
                <Card className="flex-1 bg-yellow-50">
                  <CardContent className="p-8 space-y-6">
                    {/* Video Title */}
                    {youtubeUrl && (
                      <div className="space-y-3">
                        <Badge className="bg-yellow-400 text-black border-2 border-black px-3 py-1 text-sm font-bold">
                          TRANSCRIPT
                        </Badge>
                        {isLoading ? (
                          <div className="h-9 bg-gray-200 animate-pulse rounded-md"></div>
                        ) : (
                          <h1 className="text-3xl font-black uppercase text-black">
                            {videoMetadata.title ? 
                              videoMetadata.title.toUpperCase() : 
                              'VIDEO TITLE'}
                          </h1>
                        )}
                        
                        {/* Author and Actions */}
                        <div className="flex items-center gap-2 flex-wrap">
                          <span className="text-lg font-bold text-gray-700">AUTHOR:</span>
                          {isLoading ? (
                            <div className="h-7 w-48 bg-gray-200 animate-pulse rounded-md"></div>
                          ) : (
                            <a 
                              href={videoMetadata.author ? `https://www.youtube.com/@${videoMetadata.author.replace(/\s+/g, '')}` : '#'}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-lg font-black text-black hover:underline"
                            >
                              {videoMetadata.author || 'VIDEO AUTHOR'}
                            </a>
                          )}
                          <span className="text-gray-400">·</span>
                          
                          {/* Like Button */}
                          <a
                            href={youtubeUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            <Button 
                              variant="default" 
                              size="sm"
                              className="h-8 px-3 bg-red-500 hover:bg-red-600 text-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex items-center gap-1"
                            >
                              <UilThumbsUp className="h-4 w-4" />
                              <span className="font-bold">LIKE</span>
                            </Button>
                          </a>
                          
                          {/* Subscribe Button */}
                          <a
                            href={videoMetadata.author ? `https://www.youtube.com/@${videoMetadata.author.replace(/\s+/g, '')}?sub_confirmation=1` : '#'}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            <Button 
                              variant="default" 
                              size="sm"
                              className="h-8 px-3 bg-yellow-400 hover:bg-yellow-500 text-black border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex items-center gap-1"
                            >
                              <UilBell className="h-4 w-4" />
                              <span className="font-bold">SUBSCRIBE</span>
                            </Button>
                          </a>
                        </div>
                      </div>
                    )}
                    
                    {/* Video div with skeleton */}
                    <div className="rounded-lg bg-black border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] overflow-hidden">
                      <div className="relative w-full" style={{ paddingBottom: '56.25%' }}>
                        {isLoading ? (
                          <div className="absolute top-0 left-0 w-full h-full bg-gray-200 animate-pulse flex items-center justify-center">
                            <div className="text-gray-400">
                              <svg className="w-16 h-16" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                                <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" />
                              </svg>
                            </div>
                          </div>
                        ) : youtubeUrl ? (
                          <iframe
                            src={`https://www.youtube.com/embed/${youtubeUrl.split('v=')[1]?.split('&')[0] || ''}`}
                            title="YouTube video player"
                            frameBorder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                            allowFullScreen
                            className="absolute top-0 left-0 w-full h-full"
                          ></iframe>
                        ) : null}
                      </div>
                    </div>

                    {/* Action Buttons */}
                    <div className="space-y-3">
                      <Button 
                        variant="header" 
                        size="header"
                        className="w-full h-16 text-xl font-black bg-white hover:bg-gray-100 text-black border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-none flex items-center justify-center gap-2"
                        onClick={handleCopyTranscript}
                      >
                        <UilCopy className="h-6 w-6" />
                        COPY TRANSCRIPT
                      </Button>
                      <Button 
                        variant="header" 
                        size="header"
                        className="w-full h-16 text-xl font-black bg-yellow-400 hover:bg-yellow-400/90 text-black flex items-center justify-center gap-2"
                        onClick={() => setShowBulkModal(true)}
                      >
                        <UilCloudDownload className="h-6 w-6" />
                        WANT TO BULK DOWNLOAD?
                      </Button>
                      <Button 
                        variant="header" 
                        size="header"
                        className="w-full h-16 text-xl font-black bg-[rgb(0,82,255)] hover:bg-blue-600 flex items-center justify-center gap-2"
                        onClick={() => setShowChatModal(true)}
                      >
                        <UilCommentDots className="h-6 w-6" />
                        CHAT WITH IN DIALA
                      </Button>
                    </div>

                    {/* Transcript Div */}
                    {isLoading ? (
                      <TranscriptSkeleton />
                    ) : (
                      <div className="rounded-lg bg-yellow-100 p-6">
                        <div className="text-xl font-black text-black">
                          {transcript ? (
                            createTranscriptChunks(transcript).map((chunk, index) => (
                              <React.Fragment key={index}>
                                <span className="hover:bg-yellow-200 cursor-pointer transition-colors px-1 py-0.5 rounded">
                                  {chunk}
                                </span>
                                {index < createTranscriptChunks(transcript).length - 1 && ' '}
                              </React.Fragment>
                            ))
                          ) : (
                            <p className="text-center text-gray-500">Transcript will appear here</p>
                          )}
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>
          )}
        </div>
        
        <div className="mt-8">
          <OnboardingFooter />
        </div>
      </div>
    </div>
    </>
  );
}


================================================
FILE: voice/page.tsx
================================================
import App from '@/components/custom/app';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';

export default function VoiceOnboarding() {
  return (
    <div className="min-h-screen flex flex-col relative bg-[rgb(0,82,255)]" style={{ 
      backgroundImage: `
        linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px),
        linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)
      `,
      backgroundSize: '60px 60px'
    }}>
      <div className="flex-grow flex items-center justify-center p-4 relative z-10">
        <div className="w-full max-w-7xl">
          <App />
        </div>
      </div>
      <div className="relative z-10">
        <OnboardingFooter />
      </div>
    </div>
  );
}

