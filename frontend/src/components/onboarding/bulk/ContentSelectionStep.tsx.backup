'use client';

import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Checkbox } from '@/components/ui/checkbox';
import { UilSpinner, UilArrowRight, UilArrowLeft, UilCheckCircle, UilInfoCircle, UilPlay, UilVideo, UilClock, UilEye, UilThumbsUp, UilCheckSquare, UilTrash, UilFileAlt, UilShare, UilMusic, UilVolume, UilVolumeMute, UilYoutube } from '@tooni/iconscout-unicons-react';
import { BulkOnboardingState, ContentItem, DocumentItem } from './types';


interface ContentSelectionStepProps {
  state: BulkOnboardingState;
  setState: (updates: Partial<BulkOnboardingState>) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
  // Platform specific data
  tiktokUser?: any;
  tiktokVideos?: any[];
  youtubeChannel?: any;
  youtubeVideos?: any[];
  twitchChannel?: any;
  twitchVideos?: any[];
  twitchChannelDataComplete?: boolean;
}

export function ContentSelectionStep({
  state,
  setState,
  setCurrentStep,
  handleStepChange,
  tiktokUser,
  tiktokVideos,
  youtubeChannel,
  youtubeVideos,
  twitchChannel,
  twitchVideos,
  twitchChannelDataComplete,
}: ContentSelectionStepProps) {

  const [hoveredVideoId, setHoveredVideoId] = React.useState<string | null>(null);
  const [mutedVideos, setMutedVideos] = React.useState<Set<string>>(new Set());
  const [debugMode, setDebugMode] = React.useState(false);
  const [failedVideos, setFailedVideos] = React.useState<Set<string>>(new Set());
  const [showVideoPreview, setShowVideoPreview] = React.useState(false);

  const [hoverStartTime, setHoverStartTime] = React.useState<number | null>(null);
  const [videoLoadingStates, setVideoLoadingStates] = React.useState<Map<string, 'idle' | 'preparing' | 'loading' | 'canplay' | 'loaded'>>(new Map());
  const hoverTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  const videoLoadTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  
  const videos = React.useMemo(() => {
    return state.selectedPlatform === 'tiktok' ? (tiktokVideos || []) : 
           state.selectedPlatform === 'youtube' ? (youtubeVideos || []) : 
           state.selectedPlatform === 'twitch' ? (twitchVideos || []) : [];
  }, [state.selectedPlatform, tiktokVideos, youtubeVideos, twitchVideos]);

  const channel = state.selectedPlatform === 'tiktok' ? tiktokUser : 
                  state.selectedPlatform === 'youtube' ? youtubeChannel : 
                  state.selectedPlatform === 'twitch' ? twitchChannel : null;

  // For URL-based input, create content items from pasted URLs
  const urlBasedContent = React.useMemo(() => {
    if (state.selectedInputMethod === 'urls') {
      return state.pastedUrls.map((url, index) => ({
        id: `url-${index}`,
        title: `Video ${index + 1}`,
        url: url,
        duration: 'Unknown',
        views: 'Unknown',
        likes: 'Unknown',
        published: 'Unknown',
        thumbnail: null
      }));
    }
    return [];
  }, [state.selectedInputMethod, state.pastedUrls]);

  // For document-based input, use uploaded documents
  const displayVideos = state.selectedInputMethod === 'urls' ? urlBasedContent : videos;
  const displayDocuments = state.selectedPlatform === 'documents' ? state.uploadedDocuments : [];
  const isDocumentMode = state.selectedPlatform === 'documents';
  const totalContent = isDocumentMode ? displayDocuments.length : displayVideos.length;

  // Cleanup when platform changes or component unmounts
  React.useEffect(() => {
    return () => {
      // Clear any pending hover timeouts
      if (hoverTimeoutRef.current) {
        clearTimeout(hoverTimeoutRef.current);
      }
    };
  }, [state.selectedPlatform]);
  
  // Cleanup videos when component unmounts or step changes
  React.useEffect(() => {
    return () => {
      // Stop all videos when leaving this step
      const videos = document.querySelectorAll('video');
      videos.forEach(video => {
        video.pause();
        video.muted = true;
        video.src = '';
        video.load();
      });
    };
  }, []);

  // Preload videos using hidden video elements
  React.useEffect(() => {
    if (state.selectedPlatform === 'tiktok' && videos.length > 0) {
      const videosToPreload = videos.slice(0, 5); // Increase to 5 videos for better UX
      
      console.log('[BulkContentSelection] Starting prefetch for first', videosToPreload.length, 'videos');
      
      // Use a small delay to not interfere with initial page load
      const prefetchTimeout = setTimeout(() => {
        videosToPreload.forEach((video, index) => {
          const videoId = video.id || video.video_id || video.videoId;
          
          // Preload video using hidden video element
          const downloadUrl = `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/tiktok/download/${videoId}?user_id=preview-user`;
          
          // Create hidden video element for preloading
          const preloadVideo = document.createElement('video');
          preloadVideo.src = downloadUrl;
          preloadVideo.preload = 'auto';
          preloadVideo.style.display = 'none';
          document.body.appendChild(preloadVideo);
          
          // Remove after loading
          preloadVideo.addEventListener('loadeddata', () => {
            document.body.removeChild(preloadVideo);
            console.log('[BulkContentSelection] Prefetched video', index + 1, ':', videoId);
          });
          
          preloadVideo.load();
        });
      }, 500); // Reduced delay for faster loading
      
      return () => clearTimeout(prefetchTimeout);
    }
  }, [state.selectedPlatform, videos]);

  const canProceedFromStep3 = () => state.selectedContent.length > 0;

  const toggleContentSelection = (contentId: string) => {
    if (isDocumentMode) {
      // For documents, limit to 10 selections
      const currentSelections = state.selectedContent.length;
      const isSelected = state.selectedContent.includes(contentId);
      
      if (!isSelected && currentSelections >= 10) {
        alert('Maximum 10 documents can be selected for processing.');
        return;
      }
    }

    const newSelectedContent = state.selectedContent.includes(contentId) 
      ? state.selectedContent.filter(id => id !== contentId)
      : [...state.selectedContent, contentId];
    
    setState({ selectedContent: newSelectedContent });
  };

  const selectAllContent = () => {
    if (isDocumentMode) {
      // For documents, select first 10
      const allIds = displayDocuments.slice(0, 10).map(doc => doc.id);
      setState({ selectedContent: allIds });
    } else {
      const allIds = displayVideos.map(video => video.id);
      setState({ selectedContent: allIds });
    }
  };

  const clearAllContent = () => {
    setState({ selectedContent: [] });
  };

  const formatDuration = (duration: string) => {
    if (!duration || duration === 'Unknown') return 'Unknown';
    // Handle various duration formats
    return duration;
  };

  const formatViews = (views: string | number) => {
    if (!views || views === 'Unknown') return 'Unknown';
    if (typeof views === 'number') {
      if (views >= 1000000) return `${(views / 1000000).toFixed(1)}M`;
      if (views >= 1000) return `${(views / 1000).toFixed(1)}K`;
      return views.toString();
    }
    return views;
  };

  // Helper function to update video loading state
  const updateVideoLoadingState = React.useCallback((videoId: string, state: 'idle' | 'preparing' | 'loading' | 'canplay' | 'loaded') => {
    setVideoLoadingStates(prev => new Map(prev).set(videoId, state));
  }, []);

  // Helper function to get video loading state
  const getVideoLoadingState = React.useCallback((videoId: string) => {
    return videoLoadingStates.get(videoId) || 'idle';
  }, [videoLoadingStates]);

  // Handle video hover - now just shows thumbnail preview
  const handleVideoHover = React.useCallback((videoId: string, videoUrl?: string) => {
    setHoveredVideoId(videoId);
    setHoverStartTime(Date.now());
  }, []);
  
  // Handle mouse leave
  const handleVideoLeave = React.useCallback(() => {
    // Clear any pending preview generation
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
      hoverTimeoutRef.current = null;
    }
    if (videoLoadTimeoutRef.current) {
      clearTimeout(videoLoadTimeoutRef.current);
      videoLoadTimeoutRef.current = null;
    }
    
    setHoveredVideoId(null);
    setHoverStartTime(null);
    
    // Reset loading state when not hovering
    if (hoveredVideoId) {
      updateVideoLoadingState(hoveredVideoId, 'idle');
    }
  }, [hoveredVideoId, state.selectedPlatform, updateVideoLoadingState]);

  // Handle audio mute toggle
  const handleAudioToggle = React.useCallback((videoId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    
    setMutedVideos(prev => {
      const newSet = new Set(prev);
      if (newSet.has(videoId)) {
        newSet.delete(videoId);
      } else {
        newSet.add(videoId);
      }
      return newSet;
    });
  }, []);

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getFileIcon = (type: string) => {
    if (type.includes('pdf')) return <UilFileAlt className="h-4 w-4 text-red-600" />;
    return <UilFileAlt className="h-4 w-4 text-blue-600" />;
  };

  const getPlatformIcon = () => {
    switch (state.selectedPlatform) {
      case 'youtube': return <UilVideo className="h-4 w-4 text-red-600" />;
      case 'tiktok': return <UilPlay className="h-4 w-4 text-black" />;
      case 'twitch': return <UilVideo className="h-4 w-4 text-purple-600" />;
      default: return <UilVideo className="h-4 w-4" />;
    }
  };

  const getPlatformName = () => {
    switch (state.selectedPlatform) {
      case 'youtube': return 'YouTube';
      case 'tiktok': return 'TikTok';
      case 'twitch': return 'Twitch';
      default: return 'Platform';
    }
  };

  if (state.isLoading) {
    return (
      <div className="space-y-8">
        <Card className="transform -rotate-1">
          <CardContent className="p-8">
            <div className="text-center">
              <UilSpinner className="h-12 w-12 mx-auto mb-4 animate-spin text-orange-600" />
              <h2 className="text-2xl font-black uppercase mb-4">LOADING CONTENT</h2>
              <p className="text-gray-600 mb-6">Fetching {getPlatformName()} content...</p>
              <Progress value={state.loadProgress} className="w-full mb-4" />
              <p className="text-sm text-gray-500">{state.loadProgress}% complete</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <Card className="transform -rotate-1">
        <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            SELECT CONTENT
          </h1>
          <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
            Choose the content to process for RAG creation. Selected videos will be transcribed and embedded.
          </p>
          <button 
            onClick={() => setDebugMode(!debugMode)}
            className="mt-2 px-2 py-1 text-xs bg-gray-200 rounded"
          >
            Debug: {debugMode ? 'ON' : 'OFF'}
          </button>
        </div>

          {/* Channel/Source Info */}
          {state.selectedInputMethod === 'channel' && channel && (
            <Card className="bg-orange-50 mb-6">
              <CardContent className="p-4">
                <div className="flex items-start gap-4">
                  {channel.avatar && (
                    <Image 
                      src={channel.avatar || channel.profileImage} 
                      alt={channel.username || channel.title}
                      width={64}
                      height={64}
                      className="w-16 h-16 rounded-full border-2 border-black"
                    />
                  )}
                  <div className="flex-1">
                    <h3 className="text-xl font-black uppercase">
                      {channel.username || channel.channelName || channel.displayName || channel.title || channel.display_name}
                    </h3>
                    {channel.follower_count !== undefined && (
                      <p className="text-sm text-gray-700">
                        {formatViews(channel.follower_count)} followers
                      </p>
                    )}
                    {channel.followerCount !== undefined && (
                      <p className="text-sm text-gray-700">
                        {formatViews(channel.followerCount)} followers
                      </p>
                    )}
                    {channel.subscriberCount !== undefined && (
                      <p className="text-sm text-gray-700">
                        {formatViews(parseInt(channel.subscriberCount))} subscribers
                      </p>
                    )}
                    {state.selectedPlatform === 'tiktok' && channel.heartCount && (
                      <p className="text-sm text-gray-700">
                        {formatViews(channel.heartCount)} hearts
                      </p>
                    )}
                    {state.selectedPlatform === 'tiktok' && channel.videoCount && (
                      <p className="text-sm text-gray-700">
                        {formatViews(channel.videoCount)} videos
                      </p>
                    )}
                    {channel.description && (
                      <p className="text-sm text-gray-600 mt-2 line-clamp-2">
                        {channel.description}
                      </p>
                    )}
                    {/* TikTok bio/signature */}
                    {state.selectedPlatform === 'tiktok' && channel.signature && (
                      <p className="text-sm text-gray-600 mt-2 italic">&quot;{channel.signature}&quot;</p>
                    )}
                  </div>
                  <Badge variant="default" className="bg-orange-500 text-white">
                    {displayVideos.length} videos found
                  </Badge>
                </div>
              </CardContent>
            </Card>
          )}

          {state.selectedInputMethod === 'urls' && !isDocumentMode && (
            <Card className="bg-orange-50 mb-6">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    {getPlatformIcon()}
                    <h3 className="text-xl font-black uppercase">URL-BASED INPUT</h3>
                  </div>
                  <Badge variant="default" className="bg-orange-500 text-white">
                    {state.pastedUrls.length} URLs provided
                  </Badge>
                </div>
              </CardContent>
            </Card>
          )}

          {isDocumentMode && (
            <Card className="bg-orange-50 mb-6">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <UilFileAlt className="h-4 w-4 text-blue-600" />
                    <h3 className="text-xl font-black uppercase">UPLOADED DOCUMENTS</h3>
                  </div>
                  <Badge variant="default" className="bg-orange-500 text-white">
                    {displayDocuments.length} documents uploaded
                  </Badge>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Help text for video previews */}
          {state.selectedPlatform === 'tiktok' && !isDocumentMode && (
            <Card className="bg-blue-50 mb-6">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <UilInfoCircle className="h-5 w-5 text-blue-600" />
                  <div>
                    <p className="font-bold text-sm">Video Preview Tip</p>
                    <p className="text-xs text-gray-700">Hover and hold on a video for 0.5 seconds to see a preview</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Selection Controls */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-2">
              <Button
                variant="neutral"
                size="sm"
                onClick={selectAllContent}
                className="h-10"
              >
                <UilCheckSquare className="h-4 w-4 mr-2" />
                SELECT ALL
              </Button>
              <Button
                variant="neutral"
                size="sm"
                onClick={clearAllContent}
                className="h-10"
              >
                <UilTrash className="h-4 w-4 mr-2" />
                CLEAR ALL
              </Button>
            </div>
            <div className="text-sm text-gray-600">
              {state.selectedContent.length} / {isDocumentMode ? Math.min(displayDocuments.length, 10) : displayVideos.length} selected
              {isDocumentMode && state.selectedContent.length >= 10 && (
                <span className="text-yellow-600 font-bold ml-2">(MAX REACHED)</span>
              )}
            </div>
          </div>

          {/* Content Grid */}
          {(isDocumentMode ? displayDocuments.length > 0 : displayVideos.length > 0) ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
              {isDocumentMode ? (
                displayDocuments.map((doc) => (
                  <Card 
                    key={doc.id}
                    className={`cursor-pointer transition-all hover:shadow-lg ${
                      state.selectedContent.includes(doc.id) ? 'ring-4 ring-orange-500 bg-orange-50' : ''
                    } ${state.selectedContent.length >= 10 && !state.selectedContent.includes(doc.id) ? 'opacity-50' : ''}`}
                    onClick={() => toggleContentSelection(doc.id)}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <Checkbox
                          checked={state.selectedContent.includes(doc.id)}
                          onChange={() => toggleContentSelection(doc.id)}
                          className="mt-1"
                          disabled={state.selectedContent.length >= 10 && !state.selectedContent.includes(doc.id)}
                        />
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-3">
                            {getFileIcon(doc.type)}
                            <div className="w-8 h-8 bg-blue-100 border-2 border-black rounded flex items-center justify-center">
                              <span className="text-xs font-bold">{doc.type.split('/').pop()?.slice(0,3).toUpperCase()}</span>
                            </div>
                          </div>
                          <h4 className="font-bold text-sm leading-tight mb-2 line-clamp-2">
                            {doc.name}
                          </h4>
                          <div className="flex items-center gap-4 text-xs text-gray-600 mb-2">
                            <div className="flex items-center gap-1">
                              <UilFileAlt className="h-3 w-3" />
                              {formatFileSize(doc.size)}
                            </div>
                            <div className="flex items-center gap-1">
                              <UilClock className="h-3 w-3" />
                              {new Date(doc.uploadDate).toLocaleDateString()}
                            </div>
                          </div>
                          {doc.textPreview && (
                            <p className="text-xs text-gray-500 line-clamp-2">
                              {doc.textPreview}
                            </p>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))
              ) : (
                displayVideos.map((video, index) => {
                  const videoId = video.id || video.video_id || video.videoId;
                  const isSelected = state.selectedContent.includes(videoId);
                  const isHovered = hoveredVideoId === videoId;
                  
                  return (
                    <div
                      key={videoId || `video-${index}`}
                      className="relative cursor-pointer transform transition-all hover:scale-105"
                      onClick={() => toggleContentSelection(videoId)}
                    >
                      <Card className={`border-4 border-border overflow-hidden shadow-shadow hover:translate-x-1 hover:translate-y-1 hover:shadow-none transition-all ${
                        isSelected ? 'ring-4 ring-orange-500 bg-orange-50' : 'bg-background'
                      }`}>
                        <div 
                          className="relative"
                          onMouseEnter={() => handleVideoHover(videoId, video.url || video.videoUrl)}
                          onMouseLeave={handleVideoLeave}
                        >
                          {/* Base thumbnail - always visible */}
                          <Image 
                            src={video.thumbnail || video.thumbnails?.[0]?.url || '/placeholder.jpg'} 
                            alt={video.title || video.description}
                            width={state.selectedPlatform === 'tiktok' ? 180 : 320}
                            height={state.selectedPlatform === 'tiktok' ? 320 : 180}
                            className={`w-full object-cover ${
                              state.selectedPlatform === 'tiktok' ? 'aspect-[9/16]' : 'aspect-[16/9]'
                            }`}
                          />
                          
                            <img
                              src={video.thumbnail}
                              className="w-full h-full object-cover"
                              alt={video.title}
                            />
                           {/* Loading overlay - only show during actual loading */}
                           {isHovered && getVideoLoadingState(videoId) === 'loading' && (
                             <div className="absolute inset-0 bg-black bg-opacity-40 flex flex-col items-center justify-center transition-opacity duration-300">
                               <div className="flex flex-col items-center">
                                 <UilSpinner className="h-8 w-8 text-white animate-spin mb-2" />
                                 <p className="text-white text-xs font-semibold">Loading...</p>
                               </div>
                             </div>
                           )}                          
                          <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-10 transition-opacity" />
                          {isSelected && (
                            <div className="absolute top-2 right-2 w-6 h-6 bg-orange-500 border-2 border-black flex items-center justify-center">
                              <UilCheckCircle className="h-4 w-4 text-white" />
                            </div>
                          )}
                        </div>
                        <CardContent className="p-3">
                          <p className="font-bold text-sm line-clamp-2">
                            {video.title || video.description || 'Untitled'}
                          </p>
                          <div className="flex items-center gap-2 mt-2 text-xs text-gray-600">
                            <div className="flex items-center gap-1">
                              <UilClock className="h-3 w-3" />
                              <span>{formatDuration(video.duration || 0)}</span>
                            </div>
                            {video.viewCount !== undefined && (
                              <>
                                <span>·</span>
                                <div className="flex items-center gap-1">
                                  <UilEye className="h-3 w-3" />
                                  <span>{formatViews(video.viewCount)}</span>
                                </div>
                              </>
                            )}
                            {video.play_count !== undefined && (
                              <>
                                <span>·</span>
                                <div className="flex items-center gap-1">
                                  <UilEye className="h-3 w-3" />
                                  <span>{formatViews(video.play_count)}</span>
                                </div>
                              </>
                            )}
                            {video.views !== 'Unknown' && video.viewCount === undefined && video.play_count === undefined && (
                              <>
                                <span>·</span>
                                <div className="flex items-center gap-1">
                                  <UilEye className="h-3 w-3" />
                                  <span>{formatViews(video.views)}</span>
                                </div>
                              </>
                            )}
                            {video.likes !== 'Unknown' && (
                              <>
                                <span>·</span>
                                <div className="flex items-center gap-1">
                                  <UilThumbsUp className="h-3 w-3" />
                                  <span>{formatViews(video.likes)}</span>
                                </div>
                              </>
                            )}
                          </div>
                          {/* TikTok-specific music info */}
                          {state.selectedPlatform === 'tiktok' && (video.musicTitle || video.musicAuthor) && (
                            <div className="mt-2 text-xs text-gray-500 flex items-center gap-1">
                              <UilMusic className="h-3 w-3" />
                              {video.musicTitle && video.musicAuthor ? `${video.musicTitle} - ${video.musicAuthor}` : 
                               video.musicTitle || video.musicAuthor}
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    </div>
                  );
                })
              )}
            </div>
          ) : (
            <Card className="bg-gray-50">
              <CardContent className="p-8 text-center">
                <UilInfoCircle className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                <h3 className="text-xl font-bold mb-2">NO CONTENT FOUND</h3>
                <p className="text-gray-600">
                  {isDocumentMode 
                    ? 'No documents have been uploaded. Please go back and upload some documents to process.'
                    : state.selectedInputMethod === 'urls' 
                      ? 'Please go back and add some URLs to process.'
                      : 'No videos were found for this channel. Please check the channel name and try again.'
                  }
                </p>
              </CardContent>
            </Card>
          )}

          <Card className="bg-yellow-100 mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="default" 
                  className="flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">BULK PROCESSING INFO</p>
                  <p className="text-sm text-gray-700 mt-1">
                    {isDocumentMode 
                      ? 'Selected documents will be processed, chunked into smaller segments, and converted into vector embeddings. Text will be automatically extracted from all supported file formats.'
                      : 'Selected content will be downloaded, transcribed using AI, and processed into vector embeddings. Processing time depends on video length and count. Choose quality content for best results.'
                    }
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-4 mt-8">
            <Button
              variant="neutral"
              size="lg"
              className="flex-1 h-14 text-lg font-black uppercase"
              onClick={() => handleStepChange(2)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              variant="default"
              size="lg"
              className={`flex-1 h-14 text-lg font-black uppercase ${!canProceedFromStep3() ? 'opacity-50 cursor-not-allowed' : ''}`}
              onClick={() => setCurrentStep(4)}
              disabled={!canProceedFromStep3()}
            >
              <span className="flex items-center justify-center">
                CONTINUE
                <UilArrowRight className="ml-2 h-6 w-6" />
              </span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}