Directory structure:
└── frontend/
    ├── README.md
    ├── backendtree.txt
    ├── clear_cached_transcripts.ts
    ├── components.json
    ├── next.config.mjs
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.ts
    ├── test-convex-connection.js
    ├── test-hunter-integration.js
    ├── tsconfig.json
    ├── .env.local.example
    ├── .eslintrc.json
    ├── convex/
    │   ├── audioTranscriptActions.ts
    │   ├── bulkJobs.ts
    │   ├── convex.config.ts
    │   ├── http.ts
    │   ├── hunterActions.ts
    │   ├── hunterHttpEndpoints.ts
    │   ├── hunterMutations.ts
    │   ├── hunterQueries.ts
    │   ├── initializeHunter.ts
    │   ├── jinaIntegration.ts
    │   ├── proceduralAudio.ts
    │   ├── ragActions.ts
    │   ├── ragMutations.ts
    │   ├── ragQueries.ts
    │   ├── ragSocialActions.ts
    │   ├── rateLimitHelpers.ts
    │   ├── scheduledFunctions.ts
    │   ├── schema.ts
    │   ├── telephonyActions.ts
    │   ├── testSetup.ts
    │   ├── voiceCloneJobs.ts
    │   ├── youtubeContentActions.ts
    │   ├── youtubeTranscriptActions.ts
    │   ├── youtubeTranscripts.ts
    │   ├── _generated/
    │   │   ├── api.d.ts
    │   │   ├── api.js
    │   │   ├── dataModel.d.ts
    │   │   ├── server.d.ts
    │   │   └── server.js
    │   ├── actions/
    │   │   ├── instagramContent.ts
    │   │   ├── tiktokContent.ts
    │   │   └── twitchContent.ts
    │   ├── mutations/
    │   │   ├── audioTranscripts.ts
    │   │   ├── callsPage.ts
    │   │   ├── clearCachedTranscripts.ts
    │   │   ├── instagramContent.ts
    │   │   ├── telephony.ts
    │   │   ├── tiktokContent.ts
    │   │   ├── twitchContent.ts
    │   │   ├── youtubeContent.ts
    │   │   └── youtubeTranscripts.ts
    │   └── queries/
    │       ├── audioTranscripts.ts
    │       ├── callsPage.ts
    │       ├── debugYouTube.ts
    │       ├── instagramContent.ts
    │       ├── telephony.ts
    │       ├── tiktokContent.ts
    │       ├── twitchContent.ts
    │       └── youtubeContent.ts
    ├── data/
    │   ├── query_cache.json
    │   ├── search_results.json
    │   └── debug/
    │       ├── jina_request_20250620_081341_Roofing and Construc.json
    │       ├── jina_request_20250620_081343_Roofing and Construc.json
    │       ├── jina_request_20250620_081345_Roofing and Construc.json
    │       ├── jina_request_20250620_081348_Roofing and Construc.json
    │       ├── jina_request_20250620_081350_Roofing and Construc.json
    │       ├── jina_request_20250620_081407_Roofing and Construc.json
    │       ├── jina_request_20250620_081412_Roofing and Construc.json
    │       ├── jina_request_20250620_081414_Roofing and Construc.json
    │       └── jina_request_20250620_081416_Roofing and Construc.json
    ├── public/
    │   ├── 424f35f4c6837cba6f15.webp
    │   ├── gr.png:Zone.Identifier
    │   ├── gr2.png:Zone.Identifier
    │   ├── gr3.png:Zone.Identifier
    │   ├── instagram.svg:Zone.Identifier
    │   ├── tiktok.svg:Zone.Identifier
    │   ├── twitch.svg:Zone.Identifier
    │   └── audio/
    │       ├── CafeAudio.m4a
    │       ├── CoworkingAudio.m4a
    │       ├── CrowdedOfficeAudio.m4a
    │       ├── LibraryAudio.m4a
    │       └── TrainstationAudio.m4a
    ├── src/
    │   ├── app/
    │   │   ├── layout.tsx
    │   │   ├── page.tsx
    │   │   ├── dashboard/
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   ├── agents/
    │   │   │   │   └── page.tsx
    │   │   │   ├── analytics/
    │   │   │   │   └── page.tsx
    │   │   │   ├── auto-rag/
    │   │   │   │   └── page.tsx
    │   │   │   ├── automation/
    │   │   │   │   └── page.tsx
    │   │   │   ├── business-hunter/
    │   │   │   │   └── page.tsx
    │   │   │   ├── calls/
    │   │   │   │   └── page.tsx
    │   │   │   ├── customers/
    │   │   │   │   └── page.tsx
    │   │   │   ├── playground/
    │   │   │   │   └── page.tsx
    │   │   │   ├── settings/
    │   │   │   │   └── page.tsx
    │   │   │   └── swarms/
    │   │   │       ├── page.tsx
    │   │   │       └── [id]/
    │   │   │           └── page.tsx
    │   │   └── onboarding/
    │   │       ├── README.md
    │   │       ├── ONBOARDING_RULES.md
    │   │       ├── blog/
    │   │       │   ├── page.tsx
    │   │       │   └── [blogId]/
    │   │       │       └── page.tsx
    │   │       ├── bulk/
    │   │       │   └── page.tsx
    │   │       ├── calls/
    │   │       │   ├── page.tsx
    │   │       │   └── page.tsx.broken
    │   │       ├── cloning/
    │   │       │   ├── page-refactored.tsx
    │   │       │   ├── page.tsx
    │   │       │   └── page.tsx.backup
    │   │       ├── courses/
    │   │       │   └── page.tsx
    │   │       ├── guides/
    │   │       │   └── page.tsx
    │   │       ├── hunter/
    │   │       │   ├── page-original.tsx
    │   │       │   ├── page-refactored.tsx
    │   │       │   └── page.tsx
    │   │       ├── procedural/
    │   │       │   └── page.tsx
    │   │       ├── rag/
    │   │       │   ├── page.tsx
    │   │       │   ├── types.ts
    │   │       │   ├── utils.ts
    │   │       │   └── components/
    │   │       │       ├── InfoSectionStep1.tsx
    │   │       │       ├── InfoSectionStep3.tsx
    │   │       │       ├── SocialMediaVideoDisplay.tsx
    │   │       │       ├── Step1ChooseSource.tsx
    │   │       │       ├── Step2SourceDetails.tsx
    │   │       │       ├── Step3ConfigureProcessing.tsx
    │   │       │       ├── Step3VideoSelection.tsx
    │   │       │       ├── Step4ProcessingProgress.tsx
    │   │       │       ├── Step5Completion.tsx
    │   │       │       └── VideoSelectionGrid.tsx
    │   │       ├── rtc/
    │   │       │   └── page.tsx
    │   │       ├── transcribe/
    │   │       │   ├── DragDropUpload.tsx
    │   │       │   └── page.tsx
    │   │       ├── transcripts/
    │   │       │   └── page.tsx
    │   │       └── voice/
    │   │           └── page.tsx
    │   ├── components/
    │   │   ├── providers.tsx
    │   │   ├── automation/
    │   │   │   ├── CustomNode.tsx
    │   │   │   ├── ExecutionHistory.tsx
    │   │   │   ├── ExpressionEditor.tsx
    │   │   │   ├── NodePanel.tsx
    │   │   │   ├── NodePropertiesPanel.tsx
    │   │   │   ├── WorkflowEditor.tsx
    │   │   │   ├── WorkflowSettings.tsx
    │   │   │   └── WorkflowTemplates.tsx
    │   │   ├── custom/
    │   │   │   ├── app.tsx
    │   │   │   ├── audio-card.tsx
    │   │   │   ├── call-analytics-card.tsx
    │   │   │   ├── call-control-panel.tsx
    │   │   │   ├── call-reasoning-card.tsx
    │   │   │   ├── call-status-indicator.tsx
    │   │   │   ├── calling-screen.tsx
    │   │   │   ├── document-list-card.tsx
    │   │   │   ├── file-upload-card.tsx
    │   │   │   ├── info-section.tsx
    │   │   │   ├── language-card.tsx
    │   │   │   ├── live-waveform-panel.tsx
    │   │   │   ├── loading-screen.tsx
    │   │   │   ├── onboarding-footer.tsx
    │   │   │   ├── onboarding-nav.tsx
    │   │   │   ├── pitch-card.tsx
    │   │   │   ├── playground-agent-modal.tsx
    │   │   │   ├── playground-chat-interface.tsx
    │   │   │   ├── playground-settings-panel.tsx
    │   │   │   ├── premium-feature-card.tsx
    │   │   │   ├── recent-calls-card.tsx
    │   │   │   ├── simple-onboarding-nav.tsx
    │   │   │   ├── stat-card.tsx
    │   │   │   ├── swarm-overview-card.tsx
    │   │   │   ├── transcript-skeleton.tsx
    │   │   │   ├── voice-agent-card.tsx
    │   │   │   ├── waveform-visualizer.tsx
    │   │   │   ├── web-voice-interface.tsx
    │   │   │   ├── welcome-card.tsx
    │   │   │   ├── analytics/
    │   │   │   │   ├── agent-card.tsx
    │   │   │   │   ├── agent-performance-analytics.tsx
    │   │   │   │   ├── analytics-dashboard-header.tsx
    │   │   │   │   ├── analytics-mock-data.mdx
    │   │   │   │   ├── analytics-summary.tsx
    │   │   │   │   ├── call-objectives-monitor.tsx
    │   │   │   │   ├── call-outcome-analytics.tsx
    │   │   │   │   ├── call-volume-analysis.tsx
    │   │   │   │   ├── conversation-quality-analysis.tsx
    │   │   │   │   ├── daily-performance-leaderboard.tsx
    │   │   │   │   ├── live-agent-activity.tsx
    │   │   │   │   ├── live-call-monitor.tsx
    │   │   │   │   ├── live-transcript-monitor.tsx
    │   │   │   │   ├── platform-insights.tsx
    │   │   │   │   ├── real-time-analytics-monitor.tsx
    │   │   │   │   ├── recent-calls-table.tsx
    │   │   │   │   ├── supervisor-controls-monitor.tsx
    │   │   │   │   └── system-settings-monitor.tsx
    │   │   │   ├── modals/
    │   │   │   │   ├── agent-detail-modal.tsx
    │   │   │   │   ├── AudioGenerationModal.tsx
    │   │   │   │   ├── call-analytics-modal.tsx
    │   │   │   │   ├── create-agent-modal.tsx
    │   │   │   │   ├── create-rag-workflow-modal.tsx
    │   │   │   │   ├── custom-pitch-modal.tsx
    │   │   │   │   ├── delete-confirmation-modal.tsx
    │   │   │   │   ├── hunt-configuration-modal.tsx
    │   │   │   │   ├── live-call-monitor-modal-fixed.tsx
    │   │   │   │   ├── live-call-monitor-modal.tsx
    │   │   │   │   ├── settings-rag-workflow-modal.tsx
    │   │   │   │   ├── settings-workflow-modal.tsx
    │   │   │   │   ├── swarm-overview-modal.tsx
    │   │   │   │   ├── verification-modal.tsx
    │   │   │   │   ├── view-rag-workflow-modal.tsx
    │   │   │   │   └── view-workflow-modal.tsx
    │   │   │   └── rtc/
    │   │   │       ├── rtc-completion.tsx
    │   │   │       ├── rtc-introduction.tsx
    │   │   │       ├── rtc-phone-dialer-fixed.tsx
    │   │   │       ├── rtc-phone-dialer-realistic.tsx
    │   │   │       └── rtc-phone-dialer.tsx
    │   │   ├── onboarding/
    │   │   │   ├── blog/
    │   │   │   │   └── BlogCard.tsx
    │   │   │   ├── bulk/
    │   │   │   │   ├── ContentSelectionStep.tsx
    │   │   │   │   ├── ContentSelectionStep.tsx.backup
    │   │   │   │   ├── DocumentUploadStep.tsx
    │   │   │   │   ├── ExportStep.tsx
    │   │   │   │   ├── InputMethodStep.tsx
    │   │   │   │   ├── ModelSelectionStep.tsx
    │   │   │   │   ├── PlatformSelectionStep.tsx
    │   │   │   │   ├── ProcessingStep.tsx
    │   │   │   │   ├── types.ts
    │   │   │   │   ├── VectorDbSelectionStep.tsx
    │   │   │   │   └── VerificationStep.tsx
    │   │   │   ├── cloning/
    │   │   │   │   ├── ChannelSetupStep.tsx
    │   │   │   │   ├── ContentSelectionStep.tsx
    │   │   │   │   ├── IdentityVerificationStep.tsx
    │   │   │   │   ├── ModelSelectionStep.tsx
    │   │   │   │   ├── PlatformSelectionStep.tsx
    │   │   │   │   ├── ReviewCompleteStep.tsx
    │   │   │   │   ├── TextInputStep.tsx
    │   │   │   │   ├── types.ts
    │   │   │   │   └── VoiceSettingsStep.tsx
    │   │   │   ├── courses/
    │   │   │   │   └── CourseCard.tsx
    │   │   │   ├── guides/
    │   │   │   │   └── GuideCard.tsx
    │   │   │   ├── hunter/
    │   │   │   │   ├── CompanyDetailsStep.tsx
    │   │   │   │   ├── ContactPreferencesStep.tsx
    │   │   │   │   ├── IndustryLocationStep.tsx
    │   │   │   │   ├── SearchDefinitionStep.tsx
    │   │   │   │   ├── SearchKeywordsStep.tsx
    │   │   │   │   ├── SearchPreviewStep.tsx
    │   │   │   │   ├── SearchProgressStep.tsx
    │   │   │   │   ├── SearchResultsStep.tsx
    │   │   │   │   ├── types.ts
    │   │   │   │   └── ValidationCriteriaStep.tsx
    │   │   │   ├── modals/
    │   │   │   │   ├── BulkDownloadModal.tsx
    │   │   │   │   ├── ChatWithDialaModal.tsx
    │   │   │   │   ├── CopyTranscriptModal.tsx
    │   │   │   │   └── VoiceCloneModal.tsx
    │   │   │   └── procedural/
    │   │   │       └── AudioGenerationProgress.tsx
    │   │   ├── providers/
    │   │   │   └── convex-client-provider.tsx
    │   │   ├── transcripts/
    │   │   │   └── SpeakerTimeline.tsx
    │   │   └── ui/
    │   │       ├── accordion.tsx
    │   │       ├── badge.tsx
    │   │       ├── breadcrumb.tsx
    │   │       ├── button.tsx
    │   │       ├── card.tsx
    │   │       ├── carousel.tsx
    │   │       ├── chart.tsx
    │   │       ├── checkbox.tsx
    │   │       ├── drawer.tsx
    │   │       ├── dropdown-menu.tsx
    │   │       ├── image-card.tsx
    │   │       ├── input-otp.tsx
    │   │       ├── input.tsx
    │   │       ├── progress.tsx
    │   │       ├── resizable.tsx
    │   │       ├── select.tsx
    │   │       ├── separator.tsx
    │   │       ├── slider.tsx
    │   │       ├── sonner.tsx
    │   │       ├── sonner.tsx.backup
    │   │       ├── star.tsx
    │   │       ├── switch.tsx
    │   │       ├── tabs.tsx
    │   │       ├── textarea.tsx
    │   │       └── tooltip.tsx
    │   ├── contexts/
    │   │   └── VideoPreviewContext.tsx
    │   ├── hooks/
    │   │   ├── use-api-client.ts
    │   │   ├── useApiErrorHandler.ts
    │   │   ├── useBulkProcessing.ts
    │   │   ├── useConvexErrorHandler.ts
    │   │   ├── useEmbeddingModels.ts
    │   │   ├── useHunterSearch.ts
    │   │   ├── useInstagramContent.ts
    │   │   ├── useRAGWorkflow.ts
    │   │   ├── useTikTokContent.ts
    │   │   ├── useTwitchContent.ts
    │   │   ├── useVideoPreview.ts
    │   │   ├── useVoiceCloning.ts
    │   │   ├── useWaveformData.ts
    │   │   ├── useWorkflowExecution.ts
    │   │   └── useYouTubeContent.ts
    │   ├── lib/
    │   │   ├── api.ts
    │   │   ├── convex-mock.ts
    │   │   ├── rag-validator.ts
    │   │   ├── utils.ts
    │   │   ├── youtube-transcript-fetcher.ts
    │   │   ├── youtube-transcript.ts
    │   │   ├── api/
    │   │   │   └── procedural-audio.ts
    │   │   └── workflow/
    │   │       ├── expression-evaluator.ts
    │   │       ├── index.ts
    │   │       ├── workflow-executor.ts
    │   │       ├── WorkflowEngine.ts
    │   │       ├── core/
    │   │       │   ├── ExpressionError.ts
    │   │       │   ├── ExpressionParser.ts
    │   │       │   ├── Workflow.ts
    │   │       │   ├── WorkflowDataProxy.ts
    │   │       │   └── WorkflowExecute.ts
    │   │       ├── nodes/
    │   │       │   ├── BaseNode.ts
    │   │       │   ├── CodeNode.ts
    │   │       │   ├── DialaMakeCallNode.ts
    │   │       │   ├── HttpRequestNode.ts
    │   │       │   ├── IfNode.ts
    │   │       │   ├── index.ts
    │   │       │   ├── SetNode.ts
    │   │       │   └── WebhookNode.ts
    │   │       └── types/
    │   │           └── index.ts
    │   ├── styles/
    │   │   ├── automation.css
    │   │   └── globals.css
    │   └── types/
    │       ├── calls.ts
    │       ├── index.ts
    │       └── waveform.ts
    └── .claude/
        └── settings.local.json

================================================
FILE: README.md
================================================
# Diala Frontend

## Getting Started

### Prerequisites
- Node.js 18+ installed
- Python 3.8+ installed (for backend)

### Installation

1. Install dependencies:
```bash
npm install
```

2. Start the development servers:

**Option 1: Run everything together**
```bash
npm run dev:all
```

This will start both the Convex dev server and Next.js dev server concurrently.

**Option 2: Run servers separately**

In one terminal:
```bash
npm run convex:dev
```

In another terminal:
```bash
npm run dev
```

3. Open [http://localhost:3000](http://localhost:3000) in your browser

### YouTube Transcript Feature

The YouTube transcript feature requires:
1. Convex dev server running (included in `npm run dev:all`)
2. Python backend running with the transcript API

To test the transcript feature:
1. Navigate to `/onboarding/transcripts`
2. Enter a YouTube URL
3. The system will fetch and display the transcript

### Environment Variables

The `.env.local` file is automatically created by Convex and contains:
- `CONVEX_DEPLOYMENT`: Your Convex deployment identifier
- `NEXT_PUBLIC_CONVEX_URL`: The Convex backend URL

### Troubleshooting

If you see "Module not found: Can't resolve '@convex/_generated/api'":
1. Make sure Convex dev server is running
2. Check that files exist in `convex/_generated/`
3. Restart the Next.js dev server

If you see "Could not find Convex client!":
1. Make sure the ConvexProvider is properly set up in the app
2. Check that NEXT_PUBLIC_CONVEX_URL is set in .env.local
3. Restart both servers


================================================
FILE: backendtree.txt
================================================
Directory structure:
└── frontend/
    ├── README.md
    ├── clear_cached_transcripts.ts
    ├── components.json
    ├── next.config.mjs
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.ts
    ├── test-convex-connection.js
    ├── test-hunter-integration.js
    ├── tsconfig.json
    ├── .env.local.example
    ├── .eslintrc.json
    ├── convex/
    │   ├── audioTranscriptActions.ts
    │   ├── bulkJobs.ts
    │   ├── convex.config.ts
    │   ├── http.ts
    │   ├── hunterActions.ts
    │   ├── hunterHttpEndpoints.ts
    │   ├── hunterMutations.ts
    │   ├── hunterQueries.ts
    │   ├── initializeHunter.ts
    │   ├── jinaIntegration.ts
    │   ├── proceduralAudio.ts
    │   ├── ragActions.ts
    │   ├── ragMutations.ts
    │   ├── ragQueries.ts
    │   ├── ragSocialActions.ts
    │   ├── rateLimitHelpers.ts
    │   ├── scheduledFunctions.ts
    │   ├── schema.ts
    │   ├── telephonyActions.ts
    │   ├── testSetup.ts
    │   ├── voiceCloneJobs.ts
    │   ├── youtubeContentActions.ts
    │   ├── youtubeTranscriptActions.ts
    │   ├── youtubeTranscripts.ts
    │   ├── _generated/
    │   │   ├── api.d.ts
    │   │   ├── api.js
    │   │   ├── dataModel.d.ts
    │   │   ├── server.d.ts
    │   │   └── server.js
    │   ├── actions/
    │   │   ├── instagramContent.ts
    │   │   ├── tiktokContent.ts
    │   │   └── twitchContent.ts
    │   ├── mutations/
    │   │   ├── audioTranscripts.ts
    │   │   ├── callsPage.ts
    │   │   ├── clearCachedTranscripts.ts
    │   │   ├── instagramContent.ts
    │   │   ├── telephony.ts
    │   │   ├── tiktokContent.ts
    │   │   ├── twitchContent.ts
    │   │   ├── youtubeContent.ts
    │   │   └── youtubeTranscripts.ts
    │   └── queries/
    │       ├── audioTranscripts.ts
    │       ├── callsPage.ts
    │       ├── debugYouTube.ts
    │       ├── instagramContent.ts
    │       ├── telephony.ts
    │       ├── tiktokContent.ts
    │       ├── twitchContent.ts
    │       └── youtubeContent.ts
    ├── data/
    │   ├── query_cache.json
    │   ├── search_results.json
    │   └── debug/
    │       ├── jina_request_20250620_081341_Roofing and Construc.json
    │       ├── jina_request_20250620_081343_Roofing and Construc.json
    │       ├── jina_request_20250620_081345_Roofing and Construc.json
    │       ├── jina_request_20250620_081348_Roofing and Construc.json
    │       ├── jina_request_20250620_081350_Roofing and Construc.json
    │       ├── jina_request_20250620_081407_Roofing and Construc.json
    │       ├── jina_request_20250620_081412_Roofing and Construc.json
    │       ├── jina_request_20250620_081414_Roofing and Construc.json
    │       └── jina_request_20250620_081416_Roofing and Construc.json
    ├── docs/
    │   ├── README.md
    │   ├── 08_chatterbox_integration.md
    │   ├── AUDIO_TRANSCRIPTION_API.md
    │   ├── AUTOMATION_INTEGRATION.md
    │   ├── davidteather-tiktok-api.git.txt
    │   ├── davidteather-tiktok-api.git.txt:Zone.Identifier
    │   ├── loo-kuhs-tiktok-video-downloader.txt
    │   ├── loo-kuhs-tiktok-video-downloader.txt:Zone.Identifier
    │   ├── lyst0 - Twitch.html
    │   ├── OUTBOUND_CALLING_SERVICE.md
    │   ├── transcribingplan.md
    │   ├── tyrrrz-youtubeexplode.git (1).txt
    │   ├── tyrrrz-youtubeexplode.git (1).txt:Zone.Identifier
    │   ├── YOUTUBE_TRANSCRIPT_INTEGRATION.md
    │   ├── AutoRAG/
    │   │   ├── 00_overview.md
    │   │   ├── 01_youtube_processing.md
    │   │   ├── 03_convex_cloudflare_architecture.md
    │   │   ├── 04_embedding_data_structure.md
    │   │   └── 05_implementation_roadmap.md
    │   ├── Business-Hunter/
    │   │   ├── README.md
    │   │   ├── configuration-examples.md
    │   │   ├── architecture/
    │   │   │   ├── data-flow.md
    │   │   │   └── system-overview.md
    │   │   └── phases/
    │   │       ├── phase-1-search-GENERAL.md
    │   │       ├── phase-1-search.md
    │   │       ├── phase-2-extract.md
    │   │       ├── phase-3-content.md
    │   │       ├── phase-4-save.md
    │   │       ├── phase-5-validate.md
    │   │       └── phase-6-report.md
    │   ├── convex/
    │   │   ├── agents/
    │   │   │   └── modals/
    │   │   │       └── CreateAgentModal/
    │   │   │           ├── mutations.md
    │   │   │           ├── queries.md
    │   │   │           └── schema.md
    │   │   ├── autorag/
    │   │   │   └── modals/
    │   │   │       ├── README.md
    │   │   │       ├── CreateRAGWorkflowModal/
    │   │   │       │   ├── mutations.md
    │   │   │       │   ├── queries.md
    │   │   │       │   └── schema.md
    │   │   │       ├── DeleteConfirmationModal/
    │   │   │       │   ├── mutations.md
    │   │   │       │   ├── queries.md
    │   │   │       │   └── schema.md
    │   │   │       ├── SettingsRAGWorkflowModal/
    │   │   │       │   ├── mutations.md
    │   │   │       │   ├── queries.md
    │   │   │       │   └── schema.md
    │   │   │       └── ViewRAGWorkflowModal/
    │   │   │           ├── mutations.md
    │   │   │           ├── queries.md
    │   │   │           └── schema.md
    │   │   ├── business-hunter/
    │   │   │   └── modals/
    │   │   │       ├── DeleteConfirmationModal/
    │   │   │       │   ├── mutations.md
    │   │   │       │   ├── queries.md
    │   │   │       │   └── schema.md
    │   │   │       ├── HuntConfigurationModal/
    │   │   │       │   ├── mutations.md
    │   │   │       │   ├── queries.md
    │   │   │       │   └── schema.md
    │   │   │       ├── SettingsWorkflowModal/
    │   │   │       │   ├── mutations.md
    │   │   │       │   ├── queries.md
    │   │   │       │   └── schema.md
    │   │   │       └── ViewWorkflowModal/
    │   │   │           ├── mutations.md
    │   │   │           ├── queries.md
    │   │   │           └── schema.md
    │   │   └── calls/
    │   │       └── modals/
    │   │           ├── CallAnalyticsModal/
    │   │           │   ├── mutations.md
    │   │           │   ├── queries.md
    │   │           │   └── schema.md
    │   │           ├── LiveCallMonitorModal/
    │   │           │   ├── mutations.md
    │   │           │   ├── queries.md
    │   │           │   └── schema.md
    │   │           └── SwarmOverviewModal/
    │   │               ├── mutations.md
    │   │               ├── queries.md
    │   │               └── schema.md
    │   ├── embeddings/
    │   │   └── jina/
    │   │       ├── README.md
    │   │       ├── api-documentation.md
    │   │       ├── examples-and-use-cases.md
    │   │       ├── huggingface-models.md
    │   │       ├── jina-clip-v2-paper.md
    │   │       ├── jina-embeddings-v3-paper.md
    │   │       ├── late-chunking-paper.md
    │   │       ├── model-comparison.md
    │   │       ├── overview.md
    │   │       └── related_urls.json
    │   ├── jina-extracts/
    │   │   ├── 20250622_022136/
    │   │   │   ├── content.md
    │   │   │   ├── summary.txt
    │   │   │   └── urls.json
    │   │   ├── 20250622_022239/
    │   │   │   ├── content.md
    │   │   │   ├── summary.txt
    │   │   │   └── urls.json
    │   │   └── 20250622_022302/
    │   │       ├── content.md
    │   │       ├── summary.txt
    │   │       └── urls.json
    │   ├── lyst0 - Twitch_files/
    │   │   ├── 01446d6a-1841-465f-9664-d92b8704b870-profile_image-70x70.png:Zone.Identifier
    │   │   ├── 1.0
    │   │   ├── 1.0:Zone.Identifier
    │   │   ├── 18243-94b41e349093da21b07e.js.download
    │   │   ├── 18243-94b41e349093da21b07e.js.download:Zone.Identifier
    │   │   ├── 20312-17ca21e784f6fef3ca2d.js.download
    │   │   ├── 20312-17ca21e784f6fef3ca2d.js.download:Zone.Identifier
    │   │   ├── 21002-8beffca02b82848493c6.css
    │   │   ├── 21002-8beffca02b82848493c6.css:Zone.Identifier
    │   │   ├── 2232-b53f06e563cf819eb9b9.js.download
    │   │   ├── 2232-b53f06e563cf819eb9b9.js.download:Zone.Identifier
    │   │   ├── 23321-e73cddf5831137ee3c10.js.download
    │   │   ├── 23321-e73cddf5831137ee3c10.js.download:Zone.Identifier
    │   │   ├── 2441-00723ac43125c30df83c.js.download
    │   │   ├── 2441-00723ac43125c30df83c.js.download:Zone.Identifier
    │   │   ├── 25470-c093f0f6a1d609e320f3.js.download
    │   │   ├── 25470-c093f0f6a1d609e320f3.js.download:Zone.Identifier
    │   │   ├── 26905-7cd162837386c6ec237f.css
    │   │   ├── 26905-7cd162837386c6ec237f.css:Zone.Identifier
    │   │   ├── 27561-6c232c4dc02717265cb9.js.download
    │   │   ├── 27561-6c232c4dc02717265cb9.js.download:Zone.Identifier
    │   │   ├── 28121-e82fd7b05d4f430e233b.js.download
    │   │   ├── 28121-e82fd7b05d4f430e233b.js.download:Zone.Identifier
    │   │   ├── 29751-32508e5e77ab130ade8f.js.download
    │   │   ├── 29751-32508e5e77ab130ade8f.js.download:Zone.Identifier
    │   │   ├── 301d06a0-5387-4b71-9471-38d7ea1ac80e-profile_image-70x70.png:Zone.Identifier
    │   │   ├── 35461-ae77356e54fff102ce0a.js.download
    │   │   ├── 35461-ae77356e54fff102ce0a.js.download:Zone.Identifier
    │   │   ├── 37073-e3bb2526b7148980ffa5.js.download
    │   │   ├── 37073-e3bb2526b7148980ffa5.js.download:Zone.Identifier
    │   │   ├── 38430-3107e301e2afa256b2f2.js.download
    │   │   ├── 38430-3107e301e2afa256b2f2.js.download:Zone.Identifier
    │   │   ├── 43318-f9f6e632be714d8fb7ae.js.download
    │   │   ├── 43318-f9f6e632be714d8fb7ae.js.download:Zone.Identifier
    │   │   ├── 46031-0d312136bfdb2871c40b.js.download
    │   │   ├── 46031-0d312136bfdb2871c40b.js.download:Zone.Identifier
    │   │   ├── 46126-875743d2938434c14cf6.js.download
    │   │   ├── 46126-875743d2938434c14cf6.js.download:Zone.Identifier
    │   │   ├── 465cd136-b191-4b65-942a-4131bd31fe4d-profile_image-70x70.png:Zone.Identifier
    │   │   ├── 46663-7d459249bfbf09363777.js.download
    │   │   ├── 46663-7d459249bfbf09363777.js.download:Zone.Identifier
    │   │   ├── 49168-dd8114dcd3f05eb95436.js.download
    │   │   ├── 49168-dd8114dcd3f05eb95436.js.download:Zone.Identifier
    │   │   ├── 4d2f4f20-4dba-4866-8a41-542378cb7089-profile_image-70x70.png:Zone.Identifier
    │   │   ├── 51a4255c-176f-4d60-bf73-d1231ab1d553-profile_image-70x70.png:Zone.Identifier
    │   │   ├── 54538-ea48530668b31c47ed75.js.download
    │   │   ├── 54538-ea48530668b31c47ed75.js.download:Zone.Identifier
    │   │   ├── 55293-e974a9dc1aa0e7360635.js.download
    │   │   ├── 55293-e974a9dc1aa0e7360635.js.download:Zone.Identifier
    │   │   ├── 60761-e1e8f4edc59b03253c83.js.download
    │   │   ├── 60761-e1e8f4edc59b03253c83.js.download:Zone.Identifier
    │   │   ├── 63062-9994cc2aff9d6e060c0c.js.download
    │   │   ├── 63062-9994cc2aff9d6e060c0c.js.download:Zone.Identifier
    │   │   ├── 6411-9f5e77558af00b1acec0.js.download
    │   │   ├── 6411-9f5e77558af00b1acec0.js.download:Zone.Identifier
    │   │   ├── 65239-5ae21c46142801629a2c.js.download
    │   │   ├── 65239-5ae21c46142801629a2c.js.download:Zone.Identifier
    │   │   ├── 67813-76a88ec384280a5e925c.js.download
    │   │   ├── 67813-76a88ec384280a5e925c.js.download:Zone.Identifier
    │   │   ├── 67954-27b24cc22471c20373d8.js.download
    │   │   ├── 67954-27b24cc22471c20373d8.js.download:Zone.Identifier
    │   │   ├── 69028-1e755e3238e8ec382752.js.download
    │   │   ├── 69028-1e755e3238e8ec382752.js.download:Zone.Identifier
    │   │   ├── 72149-f8da6020354ebb7bf505.css
    │   │   ├── 72149-f8da6020354ebb7bf505.css:Zone.Identifier
    │   │   ├── 72401-307964bd24efb0a3dc62.js.download
    │   │   ├── 72401-307964bd24efb0a3dc62.js.download:Zone.Identifier
    │   │   ├── 75115-20eb0447915526bf5090.js.download
    │   │   ├── 75115-20eb0447915526bf5090.js.download:Zone.Identifier
    │   │   ├── 75331-e2dd1c1a66cba4e40511.js.download
    │   │   ├── 75331-e2dd1c1a66cba4e40511.js.download:Zone.Identifier
    │   │   ├── 75451-eb34b4e976d4577f47ea.js.download
    │   │   ├── 75451-eb34b4e976d4577f47ea.js.download:Zone.Identifier
    │   │   ├── 75539-bcce5c92ccf3f56334c9.js.download
    │   │   ├── 75539-bcce5c92ccf3f56334c9.js.download:Zone.Identifier
    │   │   ├── 75569-fee9d27affcc66f3a555.js.download
    │   │   ├── 75569-fee9d27affcc66f3a555.js.download:Zone.Identifier
    │   │   ├── 77293-4a6a1eea0e05f036a9d8.js.download
    │   │   ├── 77293-4a6a1eea0e05f036a9d8.js.download:Zone.Identifier
    │   │   ├── 79025-2601433df308b0458702.js.download
    │   │   ├── 79025-2601433df308b0458702.js.download:Zone.Identifier
    │   │   ├── 79831-92f53ca7fce9c173540c.js.download
    │   │   ├── 79831-92f53ca7fce9c173540c.js.download:Zone.Identifier
    │   │   ├── 81653-a5b01f5b295197403fec.js.download
    │   │   ├── 81653-a5b01f5b295197403fec.js.download:Zone.Identifier
    │   │   ├── 82110-d6ce1ac29df4f013f512.js.download
    │   │   ├── 82110-d6ce1ac29df4f013f512.js.download:Zone.Identifier
    │   │   ├── 85958-c22ae214e65725521820.js.download
    │   │   ├── 85958-c22ae214e65725521820.js.download:Zone.Identifier
    │   │   ├── 87004-9ee91092428f5fc47571.js.download
    │   │   ├── 87004-9ee91092428f5fc47571.js.download:Zone.Identifier
    │   │   ├── 87656-65555f4e423f20d552f2.js.download
    │   │   ├── 87656-65555f4e423f20d552f2.js.download:Zone.Identifier
    │   │   ├── 87791-bd14971f8b0c0e071963.js.download
    │   │   ├── 87791-bd14971f8b0c0e071963.js.download:Zone.Identifier
    │   │   ├── 88480-501885f732245748fcee.js.download
    │   │   ├── 88480-501885f732245748fcee.js.download:Zone.Identifier
    │   │   ├── 88862-d5e143d99ec540a9ec38.js.download
    │   │   ├── 88862-d5e143d99ec540a9ec38.js.download:Zone.Identifier
    │   │   ├── 89319-30aa2f21c4dcaf821408.js.download
    │   │   ├── 89319-30aa2f21c4dcaf821408.js.download:Zone.Identifier
    │   │   ├── 97320-1629c4a6923502534ec3.js.download
    │   │   ├── 97320-1629c4a6923502534ec3.js.download:Zone.Identifier
    │   │   ├── 9829-66e8dfb7102582c488f0.js.download
    │   │   ├── 9829-66e8dfb7102582c488f0.js.download:Zone.Identifier
    │   │   ├── 98724-de02293ec0a1319810ad.js.download
    │   │   ├── 98724-de02293ec0a1319810ad.js.download:Zone.Identifier
    │   │   ├── beacon.js.download
    │   │   ├── beacon.js.download:Zone.Identifier
    │   │   ├── cast_framework.js.download
    │   │   ├── cast_framework.js.download:Zone.Identifier
    │   │   ├── cast_sender(1).js.download
    │   │   ├── cast_sender(1).js.download:Zone.Identifier
    │   │   ├── cast_sender.js.download
    │   │   ├── cast_sender.js.download:Zone.Identifier
    │   │   ├── ce57700a-def9-11e9-842d-784f43822e80-profile_image-70x70.png:Zone.Identifier
    │   │   ├── cfeb00fa-fcfe-4df4-9fd3-413e5dcacbf7-profile_image-70x70.png:Zone.Identifier
    │   │   ├── config
    │   │   ├── config:Zone.Identifier
    │   │   ├── core-1b1b2fb887a54c92c8ad.js.download
    │   │   ├── core-1b1b2fb887a54c92c8ad.js.download:Zone.Identifier
    │   │   ├── core-adc7f9f615baea941f45.css
    │   │   ├── core-adc7f9f615baea941f45.css:Zone.Identifier
    │   │   ├── dark-649b4a4625649be7bf30.svg:Zone.Identifier
    │   │   ├── df6f775d-8794-4cbe-aa85-dbdc72975696-profile_image-70x70.png:Zone.Identifier
    │   │   ├── e166f259-6e78-4389-b8a3-6aa1b3279f28-profile_image-70x70.png:Zone.Identifier
    │   │   ├── e7707a9f-af06-4db1-82dc-2f058024b145-profile_image-70x70.png:Zone.Identifier
    │   │   ├── e9f84ea0-72b8-486f-9afd-4a5e8c62305f-profile_image-70x70.png:Zone.Identifier
    │   │   ├── ebb84563-db81-4b9c-8940-64ed33ccfc7b-profile_image-70x70.png:Zone.Identifier
    │   │   ├── f68f6640-0b38-4853-9c64-0eb52837f31c-profile_image-70x70.png:Zone.Identifier
    │   │   ├── features.auth.components.account-checkup-manager-98fd8fb2c3ebfc60dc50.css
    │   │   ├── features.auth.components.account-checkup-manager-98fd8fb2c3ebfc60dc50.css:Zone.Identifier
    │   │   ├── features.badges.components.chat-badge-carousel-ee9adf320fb69b7f69c0.css
    │   │   ├── features.badges.components.chat-badge-carousel-ee9adf320fb69b7f69c0.css:Zone.Identifier
    │   │   ├── features.bits-6be75749bacabbd7a1a0.css
    │   │   ├── features.bits-6be75749bacabbd7a1a0.css:Zone.Identifier
    │   │   ├── features.channel-celebrations.components.celebration-display-1a8de823d298a3eb6dd1.css
    │   │   ├── features.channel-celebrations.components.celebration-display-1a8de823d298a3eb6dd1.css:Zone.Identifier
    │   │   ├── features.channel-goals.components.partner-plus-widget-panel-093618fd86af5e509622.css
    │   │   ├── features.channel-goals.components.partner-plus-widget-panel-093618fd86af5e509622.css:Zone.Identifier
    │   │   ├── features.channel-goals.components.persistent-goals-panel-ac33e97cfd66b46715a8.css
    │   │   ├── features.channel-goals.components.persistent-goals-panel-ac33e97cfd66b46715a8.css:Zone.Identifier
    │   │   ├── features.channel-leaderboard-d608d3c05977593ad095.css
    │   │   ├── features.channel-leaderboard-d608d3c05977593ad095.css:Zone.Identifier
    │   │   ├── features.channel-skins.banner-91eb1b62341e474ee2b4.css
    │   │   ├── features.channel-skins.banner-91eb1b62341e474ee2b4.css:Zone.Identifier
    │   │   ├── features.channel-skins.ribbon-8875d7f4016c71825b8d.css
    │   │   ├── features.channel-skins.ribbon-8875d7f4016c71825b8d.css:Zone.Identifier
    │   │   ├── features.channel-skins.video-overlay-287e9c7eac94d7606c41.css
    │   │   ├── features.channel-skins.video-overlay-287e9c7eac94d7606c41.css:Zone.Identifier
    │   │   ├── features.chat-community-highlights.components.community-highlight-stack-manager-c431f3fe118a973a7906.css
    │   │   ├── features.chat-community-highlights.components.community-highlight-stack-manager-c431f3fe118a973a7906.css:Zone.Identifier
    │   │   ├── features.chat-private-callouts.components.chat-private-callout-queue-51ec159811a2a7f4bb7e.css
    │   │   ├── features.chat-private-callouts.components.chat-private-callout-queue-51ec159811a2a7f4bb7e.css:Zone.Identifier
    │   │   ├── features.chat-settings.components.chat-settings.component-afa0b66c4916d2bd8274.css
    │   │   ├── features.chat-settings.components.chat-settings.component-afa0b66c4916d2bd8274.css:Zone.Identifier
    │   │   ├── features.chat.components.chat-command-handlers.component-fe27809cf748fa554c1b.css
    │   │   ├── features.chat.components.chat-command-handlers.component-fe27809cf748fa554c1b.css:Zone.Identifier
    │   │   ├── features.chat.components.chat-input.components.wysiwyg-chat-input.component-a7e61bcee9c4e8b04de0.css
    │   │   ├── features.chat.components.chat-input.components.wysiwyg-chat-input.component-a7e61bcee9c4e8b04de0.css:Zone.Identifier
    │   │   ├── features.chat.components.chat-room.components.acknowledge-unban-request-prompt-1ea40e349ff5cd1dee26.css
    │   │   ├── features.chat.components.chat-room.components.acknowledge-unban-request-prompt-1ea40e349ff5cd1dee26.css:Zone.Identifier
    │   │   ├── features.chat.components.orbis-9f8bf4e7574df9506d51.css
    │   │   ├── features.chat.components.orbis-9f8bf4e7574df9506d51.css:Zone.Identifier
    │   │   ├── features.community-points.components.flame-animation-314a12d02d4204b12196.css
    │   │   ├── features.community-points.components.flame-animation-314a12d02d4204b12196.css:Zone.Identifier
    │   │   ├── features.community-points.components.reward-center-c16464b2df5f8b663d8b.css
    │   │   ├── features.community-points.components.reward-center-c16464b2df5f8b663d8b.css:Zone.Identifier
    │   │   ├── features.community-points.contexts.watch-streak-context.provider-db3dc539fba0ac4531dd.css
    │   │   ├── features.community-points.contexts.watch-streak-context.provider-db3dc539fba0ac4531dd.css:Zone.Identifier
    │   │   ├── features.consent.components.cmp-api-e5c4430847218b51331d.css
    │   │   ├── features.consent.components.cmp-api-e5c4430847218b51331d.css:Zone.Identifier
    │   │   ├── features.dmca-strike-banner-86f518fca63df0689a07.css
    │   │   ├── features.dmca-strike-banner-86f518fca63df0689a07.css:Zone.Identifier
    │   │   ├── features.emote-picker-3e9483f63070680efcb1.css
    │   │   ├── features.emote-picker-3e9483f63070680efcb1.css:Zone.Identifier
    │   │   ├── features.last-x-events-5fe3c9e51e0767c04a69.css
    │   │   ├── features.last-x-events-5fe3c9e51e0767c04a69.css:Zone.Identifier
    │   │   ├── features.one-tap.components.overlays-e773b452992ea716b0ea.css
    │   │   ├── features.one-tap.components.overlays-e773b452992ea716b0ea.css:Zone.Identifier
    │   │   ├── features.onsite-notifications.components.onsite-notifications.container-4079ea4c73a24118efe8.css
    │   │   ├── features.onsite-notifications.components.onsite-notifications.container-4079ea4c73a24118efe8.css:Zone.Identifier
    │   │   ├── features.paid-pinned-chat.components.message-list.component-8051179b682788c59fbd.css
    │   │   ├── features.paid-pinned-chat.components.message-list.component-8051179b682788c59fbd.css:Zone.Identifier
    │   │   ├── features.side-nav.guest-star.components.side-nav-online-channel-guest-star-tooltip-dd3b2a7900776536f16f.css
    │   │   ├── features.side-nav.guest-star.components.side-nav-online-channel-guest-star-tooltip-dd3b2a7900776536f16f.css:Zone.Identifier
    │   │   ├── features.sub-modal.components.sub-modal-8a550618f2daccdc2b54.css
    │   │   ├── features.sub-modal.components.sub-modal-8a550618f2daccdc2b54.css:Zone.Identifier
    │   │   ├── features.subscribe-button.components.subscribe-button-ac33e97cfd66b46715a8.css
    │   │   ├── features.subscribe-button.components.subscribe-button-ac33e97cfd66b46715a8.css:Zone.Identifier
    │   │   ├── features.support-panel.components.support-panel-container-46a3bc5a388859311d35.css
    │   │   ├── features.support-panel.components.support-panel-container-46a3bc5a388859311d35.css:Zone.Identifier
    │   │   ├── features.verify-email-2505975f2755019b06a9.css
    │   │   ├── features.verify-email-2505975f2755019b06a9.css:Zone.Identifier
    │   │   ├── features.video-player-core.components.video-ads.audio-ad-overlay.component-d74158bfd9ea923ff5c4.css
    │   │   ├── features.video-player-core.components.video-ads.audio-ad-overlay.component-d74158bfd9ea923ff5c4.css:Zone.Identifier
    │   │   ├── features.whispers-b3e8a0b3b7a98f545099.css
    │   │   ├── features.whispers-b3e8a0b3b7a98f545099.css:Zone.Identifier
    │   │   ├── flags-3d45758f7bdfd1658d5f.js.download
    │   │   ├── flags-3d45758f7bdfd1658d5f.js.download:Zone.Identifier
    │   │   ├── iu3.html
    │   │   ├── nomodulePolyfills-59cabede3604edd623fd.js.download
    │   │   ├── nomodulePolyfills-59cabede3604edd623fd.js.download:Zone.Identifier
    │   │   ├── p.js.download
    │   │   ├── p.js.download:Zone.Identifier
    │   │   ├── pages.channel.components.channel-panels-0ba2e2a4d0c64b87011d.css
    │   │   ├── pages.channel.components.channel-panels-0ba2e2a4d0c64b87011d.css:Zone.Identifier
    │   │   ├── pages.channel.components.channel-root.components.about-panel-b005e0a7170b9e8dad35.css
    │   │   ├── pages.channel.components.channel-root.components.about-panel-b005e0a7170b9e8dad35.css:Zone.Identifier
    │   │   ├── pages.channel.components.channel-shell.components.chat-shell.components.chat-live-4a03f30a862e422100e2.css
    │   │   ├── pages.channel.components.channel-shell.components.chat-shell.components.chat-live-4a03f30a862e422100e2.css:Zone.Identifier
    │   │   ├── pages.channel.components.channel-shell.components.content-metadata.stream-metadata-278009ae5a3aecc77316.css
    │   │   ├── pages.channel.components.channel-shell.components.content-metadata.stream-metadata-278009ae5a3aecc77316.css:Zone.Identifier
    │   │   ├── pages.directory-game-044293a143c9cc1204c3.css
    │   │   ├── pages.directory-game-044293a143c9cc1204c3.css:Zone.Identifier
    │   │   ├── polyfills-b746ce78392fc20d68fa.js.download
    │   │   ├── polyfills-b746ce78392fc20d68fa.js.download:Zone.Identifier
    │   │   ├── settings.f0a2d5b109f58e5df4f0d2dd43fed1f8.js.download
    │   │   ├── settings.f0a2d5b109f58e5df4f0d2dd43fed1f8.js.download:Zone.Identifier
    │   │   ├── v6s.js.download
    │   │   └── v6s.js.download:Zone.Identifier
    │   ├── onboarding/
    │   │   └── HUNTER_LEADGEN_API.md
    │   ├── rocm/
    │   │   ├── content.txt
    │   │   ├── github.com_amd_rocm-examples.md
    │   │   ├── rocm.docs.amd.com_en_latest_#amd-rocm-documentation.md
    │   │   ├── rocm.docs.amd.com_en_latest_about_license.md
    │   │   ├── rocm.docs.amd.com_en_latest_about_release-notes.md
    │   │   ├── rocm.docs.amd.com_en_latest_compatibility_compatibility-matrix.md
    │   │   ├── rocm.docs.amd.com_en_latest_conceptual_ai-pytorch-inception.md
    │   │   ├── rocm.docs.amd.com_en_latest_conceptual_cmake-packages.md
    │   │   ├── rocm.docs.amd.com_en_latest_conceptual_compiler-topics.md



================================================
FILE: clear_cached_transcripts.ts
================================================
// Script to clear cached transcripts with placeholder text
import { components } from "./convex/_generated/api";

// Run this script to clear cached transcripts
// npx convex run clearCachedTranscripts

export default async function clearCachedTranscripts(ctx: any) {
  // Get all transcripts with placeholder text
  const transcripts = await ctx.db
    .query("youtubeTranscripts")
    .filter((q) => q.eq(q.field("transcript"), "Transcript functionality requires subtitle file parsing implementation"))
    .collect();

  console.log(`Found ${transcripts.length} cached transcripts with placeholder text`);

  // Delete these cached transcripts
  for (const transcript of transcripts) {
    await ctx.db.delete(transcript._id);
    console.log(`Deleted cached transcript for video: ${transcript.videoId}`);
  }

  // Also clear any failed jobs
  const failedJobs = await ctx.db
    .query("transcriptJobs")
    .filter((q) => q.eq(q.field("status"), "failed"))
    .collect();

  for (const job of failedJobs) {
    await ctx.db.delete(job._id);
    console.log(`Deleted failed job: ${job.jobId}`);
  }

  return { 
    message: `Cleared ${transcripts.length} cached transcripts and ${failedJobs.length} failed jobs`,
    clearedTranscripts: transcripts.map(t => t.videoId),
    clearedJobs: failedJobs.map(j => j.jobId)
  };
}


================================================
FILE: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/styles/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}


================================================
FILE: next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  logging: {
    fetches: {
      fullUrl: true,
    },
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'p16-pu-sign-useast8.tiktokcdn-us.com',
      },
      {
        protocol: 'https',
        hostname: '**.tiktokcdn.com',
      },
      {
        protocol: 'https',
        hostname: '**.tiktokcdn-us.com',
      },
      {
        protocol: 'https',
        hostname: '**.tiktokcdn-eu.com',
      },
      {
        protocol: 'https',
        hostname: '**.tiktokcdn-no.com',
      },
      {
        protocol: 'https',
        hostname: 'p16-sign-*.tiktokcdn-us.com',
      },
      {
        protocol: 'https',
        hostname: 'p16-sign-*.tiktokcdn-eu.com',
      },
      {
        protocol: 'https',
        hostname: 'p16-sign-*.tiktokcdn-no.com',
      },
      {
        protocol: 'https',
        hostname: 'p16-pu-sign-*.tiktokcdn-us.com',
      },
      {
        protocol: 'https',
        hostname: 'p16-pu-sign-*.tiktokcdn-eu.com',
      },
      {
        protocol: 'https',
        hostname: 'p16-pu-sign-*.tiktokcdn-no.com',
      },
      {
        protocol: 'https',
        hostname: 'p19-sign-*.tiktokcdn-us.com',
      },
      {
        protocol: 'https',
        hostname: 'p19-sign-*.tiktokcdn-eu.com',
      },
      {
        protocol: 'https',
        hostname: 'p19-sign-*.tiktokcdn-no.com',
      },
      {
        protocol: 'https',
        hostname: 'img.youtube.com',
      },
      {
        protocol: 'https',
        hostname: 'i.ytimg.com',
      },
      {
        protocol: 'https',
        hostname: 'static-cdn.jtvnw.net',
      },
      {
        protocol: 'https',
        hostname: 'clips-media-assets2.twitch.tv',
      },
      {
        protocol: 'https',
        hostname: 'ui-avatars.com',
      },
    ],
  },
}

export default nextConfig


================================================
FILE: package.json
================================================
{
  "name": "voice-agent-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "concurrently \"npm run backend:dev\" \"npm run convex:dev\" \"next dev\"",
    "dev:all": "concurrently \"npm run backend:dev\" \"npm run convex:dev\" \"next dev\"",
    "dev:simple": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "convex:dev": "convex dev",
    "convex:deploy": "convex deploy",
    "backend:dev": "cd ../backend && ./start-backend.sh"
  },
  "dependencies": {
    "@convex-dev/rate-limiter": "^0.2.10",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@tooni/iconscout-unicons-react": "^1.0.1",
    "@types/luxon": "^3.6.2",
    "@xyflow/react": "^12.7.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "convex": "^1.24.8",
    "date-fns": "^2.30.0",
    "embla-carousel-react": "^8.0.0",
    "input-otp": "^1.4.2",
    "jmespath": "^0.16.0",
    "lucide-react": "^0.514.0",
    "luxon": "^3.6.1",
    "next": "14.0.4",
    "next-themes": "^0.4.6",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-dropzone": "^14.3.8",
    "react-resizable-panels": "^3.0.2",
    "recharts": "^2.15.3",
    "sonner": "^2.0.5",
    "tailwind-merge": "^2.2.0",
    "tailwindcss-animate": "^1.0.7",
    "tw-animate-css": "^1.3.4",
    "uuid": "^9.0.1",
    "vaul": "^0.9.9"
  },
  "devDependencies": {
    "@types/node": "^20.10.5",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "@types/uuid": "^9.0.8",
    "autoprefixer": "^10.4.16",
    "concurrently": "^9.1.2",
    "eslint": "^8.56.0",
    "eslint-config-next": "14.0.4",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.3.3"
  }
}



================================================
FILE: postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


================================================
FILE: tailwind.config.ts
================================================
import type { Config } from "tailwindcss"

const config: Config = {
  darkMode: ["class"],
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontWeight: {
        base: "var(--font-weight-base)",
        heading: "var(--font-weight-heading)",
      },
      boxShadow: {
        shadow: "var(--shadow-shadow)",
      },
      borderRadius: {
        base: "var(--radius-base)",
      },
      colors: {
        border: "var(--color-border)",
        ring: "var(--color-ring)",
        background: "var(--color-background)",
        "secondary-background": "var(--color-secondary-background)",
        foreground: "var(--color-foreground)",
        "main-foreground": "var(--color-main-foreground)",
        main: "var(--color-main)",
        overlay: "var(--color-overlay)",
        "chart-1": "var(--color-chart-1)",
        "chart-2": "var(--color-chart-2)",
        "chart-3": "var(--color-chart-3)",
        "chart-4": "var(--color-chart-4)",
        "chart-5": "var(--color-chart-5)",
      },
      spacing: {
        boxShadowX: "var(--spacing-boxShadowX)",
        boxShadowY: "var(--spacing-boxShadowY)",
        reverseBoxShadowX: "var(--spacing-reverseBoxShadowX)",
        reverseBoxShadowY: "var(--spacing-reverseBoxShadowY)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
export default config


================================================
FILE: test-convex-connection.js
================================================
#!/usr/bin/env node

/**
 * Test Convex connection and webhook endpoints
 */

const CONVEX_URL = process.env.NEXT_PUBLIC_CONVEX_URL || 'http://127.0.0.1:3210';

console.log('Testing Convex connection...');
console.log(`Convex URL: ${CONVEX_URL}`);
console.log('');

// Test if Convex is running
fetch(CONVEX_URL)
  .then(response => {
    if (response.ok || response.status === 404) {
      console.log('✅ Convex server is running');
      return testWebhookEndpoint();
    } else {
      throw new Error(`Unexpected status: ${response.status}`);
    }
  })
  .catch(error => {
    console.error('❌ Convex server is NOT running');
    console.error(`Error: ${error.message}`);
    console.log('');
    console.log('To start Convex:');
    console.log('  npx convex dev');
    process.exit(1);
  });

async function testWebhookEndpoint() {
  console.log('');
  console.log('Testing webhook endpoint...');
  
  try {
    const response = await fetch(`${CONVEX_URL}/updateSearchProgress`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        searchId: 'test_' + Date.now(),
        progress: 50,
        currentStage: 'Test webhook from script'
      })
    });
    
    const text = await response.text();
    
    if (response.ok) {
      console.log('✅ Webhook endpoint is working');
      console.log(`Response: ${text}`);
    } else {
      console.log(`⚠️  Webhook returned status ${response.status}`);
      console.log(`Response: ${text}`);
      
      if (response.status === 404) {
        console.log('');
        console.log('The HTTP endpoint is not found. Make sure:');
        console.log('1. Convex is running (npx convex dev)');
        console.log('2. The http.ts file has been deployed');
        console.log('3. Try restarting Convex dev server');
      }
    }
  } catch (error) {
    console.error('❌ Failed to test webhook');
    console.error(`Error: ${error.message}`);
  }
  
  console.log('');
  console.log('=== Test Complete ===');
}


================================================
FILE: test-hunter-integration.js
================================================
#!/usr/bin/env node

/**
 * Test script to verify the hunter search integration is working
 * Run with: node test-hunter-integration.js
 */

const fetch = require('node-fetch');

const BACKEND_URL = 'http://localhost:8000';
const CONVEX_URL = process.env.NEXT_PUBLIC_CONVEX_URL || 'http://127.0.0.1:3210';

async function testWebhookEndpoint() {
  console.log('Testing Convex webhook endpoint...');
  
  try {
    const response = await fetch(`${CONVEX_URL}/updateSearchProgress`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        searchId: 'test_search_123',
        progress: 50,
        currentStage: 'Testing webhook integration'
      })
    });
    
    if (response.ok) {
      console.log('✅ Webhook endpoint is accessible');
      const data = await response.json();
      console.log('Response:', data);
    } else {
      console.log('❌ Webhook endpoint returned error:', response.status);
      const text = await response.text();
      console.log('Error:', text);
    }
  } catch (error) {
    console.log('❌ Failed to connect to Convex:', error.message);
    console.log('Make sure npx convex dev is running');
  }
}

async function testBackendEndpoint() {
  console.log('\nTesting backend hunter endpoint...');
  
  try {
    const response = await fetch(`${BACKEND_URL}/api/public/hunter/health`);
    
    if (response.ok) {
      console.log('✅ Backend hunter service is healthy');
      const data = await response.json();
      console.log('Health:', data);
    } else {
      console.log('❌ Backend service returned error:', response.status);
    }
  } catch (error) {
    console.log('❌ Failed to connect to backend:', error.message);
    console.log('Make sure the backend server is running');
  }
}

async function main() {
  console.log('Hunter Search Integration Test\n');
  console.log(`Backend URL: ${BACKEND_URL}`);
  console.log(`Convex URL: ${CONVEX_URL}\n`);
  
  await testWebhookEndpoint();
  await testBackendEndpoint();
  
  console.log('\n✨ Test complete');
  console.log('\nTo fully test the integration:');
  console.log('1. Make sure both backend and Convex are running');
  console.log('2. Visit http://localhost:3000/dashboard/business-hunter');
  console.log('3. Click "NEW HUNT" to create a search');
  console.log('4. Watch the progress update in real-time');
}

main().catch(console.error);


================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": [
        "./src/*"
      ],
      "@convex/*": [
        "./convex/*"
      ]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "convex/**/*"
  ],
  "exclude": [
    "node_modules"
  ]
}



================================================
FILE: .env.local.example
================================================
# API Configuration
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_API_KEY=your-secret-key-here


================================================
FILE: .eslintrc.json
================================================
{
  "extends": ["next/core-web-vitals"]
}


================================================
FILE: convex/audioTranscriptActions.ts
================================================
import { action } from "./_generated/server";
import { v } from "convex/values";
import { api } from "./_generated/api";

// Process audio transcription
export const processTranscription = action({
  args: {
    jobId: v.string(),
    userId: v.string(),
    fileName: v.string(),
    fileSize: v.number(),
    fileFormat: v.string(),
    language: v.optional(v.string()),
    prompt: v.optional(v.string()),
    audioData: v.string(), // Base64 encoded audio data
  },
  handler: async (ctx, args) => {
    try {
      // Create job in database
      await ctx.runMutation(api.mutations.audioTranscripts.createJob, {
        jobId: args.jobId,
        userId: args.userId,
        fileName: args.fileName,
        fileSize: args.fileSize,
        fileFormat: args.fileFormat,
        language: args.language,
        prompt: args.prompt,
      });
      
      // Update status to processing
      await ctx.runMutation(api.mutations.audioTranscripts.updateJobStatus, {
        jobId: args.jobId,
        status: "processing",
      });
      
      // Call backend API
      const backendUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
      const formData = new FormData();
      
      // Convert base64 to blob
      const base64Data = args.audioData.split(',')[1] || args.audioData;
      const binaryData = atob(base64Data);
      const arrayBuffer = new ArrayBuffer(binaryData.length);
      const uint8Array = new Uint8Array(arrayBuffer);
      for (let i = 0; i < binaryData.length; i++) {
        uint8Array[i] = binaryData.charCodeAt(i);
      }
      const blob = new Blob([uint8Array], { type: `audio/${args.fileFormat}` });
      
      formData.append("file", blob, args.fileName);
      formData.append("job_id", args.jobId);
      formData.append("user_id", args.userId);
      if (args.language) {
        formData.append("language", args.language);
      }
      if (args.prompt) {
        formData.append("prompt", args.prompt);
      }
      
      const response = await fetch(`${backendUrl}/api/public/audio/transcribe`, {
        method: "POST",
        body: formData,
      });
      
      if (!response.ok) {
        throw new Error(`Backend API error: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log("Backend response:", result);
      
      return { success: true, jobId: args.jobId };
      
    } catch (error) {
      console.error("Error processing transcription:", error);
      
      // Update job status to failed
      await ctx.runMutation(api.mutations.audioTranscripts.updateJobStatus, {
        jobId: args.jobId,
        status: "failed",
        error: error instanceof Error ? error.message : "Unknown error",
      });
      
      throw error;
    }
  },
});

// Create transcription job without audio data (for direct file upload)
export const createTranscriptionJob = action({
  args: {
    jobId: v.string(),
    userId: v.string(),
    fileName: v.string(),
    fileSize: v.number(),
    fileFormat: v.string(),
    language: v.optional(v.string()),
    prompt: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    // Check rate limit
    const canCreate = await ctx.runQuery(api.queries.audioTranscripts.canCreateTranscription, {
      userId: args.userId,
    });
    
    if (!canCreate.canCreate) {
      throw new Error(`Rate limit exceeded. You have ${canCreate.remaining} transcriptions remaining. Resets at ${canCreate.resetAt}`);
    }
    
    // Create job in database
    await ctx.runMutation(api.mutations.audioTranscripts.createJob, args);
    
    return { success: true, jobId: args.jobId };
  },
});


================================================
FILE: convex/bulkJobs.ts
================================================
import { v } from "convex/values";
import { mutation, query, action } from "./_generated/server";
import { internal } from "./_generated/api";

// Create a new bulk job (ACTION for complex operations)
export const create = action({
  args: {
    jobId: v.string(),
    jobType: v.string(),
    userId: v.string(),
    status: v.string(),
    priority: v.string(),
    createdAt: v.number(),
    estimatedDurationMinutes: v.optional(v.number()),
    stages: v.any(),
    currentStage: v.optional(v.string()),
    progress: v.object({
      overall: v.number(),
      currentStage: v.number(),
      itemsTotal: v.number(),
      itemsCompleted: v.number(),
      itemsFailed: v.number()
    }),
    jobData: v.object({
      job_id: v.string(),
      total_items: v.number(),
      config: v.object({
        platform: v.optional(v.string()),
        input_method: v.optional(v.string()),
        channel_url: v.optional(v.string()),
        pasted_urls: v.optional(v.array(v.string())),
        selected_content: v.optional(v.array(v.string())),
        uploaded_documents: v.optional(v.array(v.any())),
        embedding_model: v.optional(v.object({
          id: v.string(),
          label: v.string(),
          dimensions: v.number(),
          max_tokens: v.number(),
          // JINA V4 specific fields
          jina_v4_dimensions: v.optional(v.number()),
          jina_v4_late_chunking: v.optional(v.boolean()),
          jina_v4_multi_vector: v.optional(v.boolean()),
          jina_v4_optimize_for_rag: v.optional(v.boolean()),
          jina_v4_task: v.optional(v.string()),
          jina_v4_truncate_at_max: v.optional(v.boolean())
        })),
        vector_db: v.optional(v.object({
          id: v.string(),
          label: v.string()
        })),
        settings: v.optional(v.object({
          chunkSize: v.number(),
          chunkOverlap: v.number(),
          maxTokens: v.number()
        })),
        user_id: v.optional(v.string())
      })
    }),
    exports: v.any(),
    metadata: v.optional(v.object({
      environment: v.optional(v.string()),
      totalStages: v.optional(v.number()),
      stageNames: v.optional(v.array(v.string())),
      // Progress tracking fields
      content_processed: v.optional(v.number()),
      embeddings: v.optional(v.number()),
      progress: v.optional(v.number()),
      stage: v.optional(v.string()),
      status: v.optional(v.string()),
      error: v.optional(v.string())
    })),
    progressPercentage: v.optional(v.number())
  },
  handler: async (ctx, args) => {
    // Call internal mutation to create the job
    const jobId = await ctx.runMutation(internal.bulkJobs.createJobMutation, args);
    return jobId;
  },
});

// Internal mutation for job creation (called by action)
export const createJobMutation = mutation({
  args: {
    jobId: v.string(),
    jobType: v.string(),
    userId: v.string(),
    status: v.string(),
    priority: v.string(),
    createdAt: v.number(),
    estimatedDurationMinutes: v.optional(v.number()),
    stages: v.any(),
    currentStage: v.optional(v.string()),
    progress: v.object({
      overall: v.number(),
      currentStage: v.number(),
      itemsTotal: v.number(),
      itemsCompleted: v.number(),
      itemsFailed: v.number()
    }),
    jobData: v.object({
      job_id: v.string(),
      total_items: v.number(),
      config: v.object({
        platform: v.optional(v.string()),
        input_method: v.optional(v.string()),
        channel_url: v.optional(v.string()),
        pasted_urls: v.optional(v.array(v.string())),
        selected_content: v.optional(v.array(v.string())),
        uploaded_documents: v.optional(v.array(v.any())),
        embedding_model: v.optional(v.object({
          id: v.string(),
          label: v.string(),
          dimensions: v.number(),
          max_tokens: v.number(),
          // JINA V4 specific fields
          jina_v4_dimensions: v.optional(v.number()),
          jina_v4_late_chunking: v.optional(v.boolean()),
          jina_v4_multi_vector: v.optional(v.boolean()),
          jina_v4_optimize_for_rag: v.optional(v.boolean()),
          jina_v4_task: v.optional(v.string()),
          jina_v4_truncate_at_max: v.optional(v.boolean())
        })),
        vector_db: v.optional(v.object({
          id: v.string(),
          label: v.string()
        })),
        settings: v.optional(v.object({
          chunkSize: v.number(),
          chunkOverlap: v.number(),
          maxTokens: v.number()
        })),
        user_id: v.optional(v.string())
      })
    }),
    exports: v.any(),
    metadata: v.optional(v.object({
      environment: v.optional(v.string()),
      totalStages: v.optional(v.number()),
      stageNames: v.optional(v.array(v.string())),
      // Progress tracking fields
      content_processed: v.optional(v.number()),
      embeddings: v.optional(v.number()),
      progress: v.optional(v.number()),
      stage: v.optional(v.string()),
      status: v.optional(v.string()),
      error: v.optional(v.string())
    })),
    progressPercentage: v.optional(v.number())
  },
  handler: async (ctx, args) => {
    const jobId = await ctx.db.insert("bulkJobs", {
      jobId: args.jobId,
      jobType: args.jobType,
      userId: args.userId,
      status: args.status as any,
      priority: args.priority as any,
      createdAt: args.createdAt,
      estimatedDurationMinutes: args.estimatedDurationMinutes,
      stages: args.stages,
      currentStage: args.currentStage,
      progress: args.progress,
      jobData: args.jobData,
      exports: args.exports,
      metadata: args.metadata,
      progressPercentage: args.progressPercentage
    });
    
    return jobId;
  },
});

// Update a bulk job
export const update = mutation({
  args: {
    jobId: v.string(),
    status: v.string(),
    updates: v.optional(v.any())
  },
  handler: async (ctx, args) => {
    // Find the job by jobId
    const job = await ctx.db
      .query("bulkJobs")
      .withIndex("by_jobId", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    // Prepare update data
    const updateData: any = {
      status: args.status,
      updatedAt: Date.now()
    };
    
    // Add any additional updates
    if (args.updates) {
      Object.assign(updateData, args.updates);
    }
    
    // Update the job
    await ctx.db.patch(job._id, updateData);
    
    return { success: true };
  },
});

// Get a specific job by ID
export const getJob = query({
  args: { jobId: v.string() },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("bulkJobs")
      .withIndex("by_jobId", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      return null;
    }
    
    // Convert to the format expected by the backend
    return {
      job_id: job.jobId,
      status: job.status,
      progress: job.progress?.overall || 0,
      stage: job.currentStage || "pending",
      content_processed: job.progress?.itemsCompleted || 0,
      total_content: job.progress?.itemsTotal || 0,
      embeddings: 0, // TODO: Track embeddings separately
      error: job.errorMessage,
      result: job.result
    };
  },
});

// Get recent jobs for a user (for rate limiting)
export const getUserRecentJobs = query({
  args: { 
    userId: v.string(),
    afterTime: v.number()
  },
  handler: async (ctx, args) => {
    const jobs = await ctx.db
      .query("bulkJobs")
      .withIndex("by_user_created", (q) => 
        q.eq("userId", args.userId).gte("createdAt", args.afterTime)
      )
      .collect();
    
    return jobs;
  },
});

// Get jobs for a user with status filter
export const getUserJobs = query({
  args: { 
    userId: v.string(),
    status: v.optional(v.string()),
    limit: v.optional(v.number())
  },
  handler: async (ctx, args) => {
    let query = ctx.db.query("bulkJobs");
    
    if (args.status) {
      query = query.withIndex("by_user_status", (q) => 
        q.eq("userId", args.userId).eq("status", args.status)
      );
    } else {
      query = query.withIndex("by_user", (q) => q.eq("userId", args.userId));
    }
    
    if (args.limit) {
      return await query.take(args.limit);
    }
    
    return await query.collect();
  },
});

// Clean up old completed jobs
export const cleanupOldJobs = mutation({
  args: { 
    olderThanDays: v.number()
  },
  handler: async (ctx, args) => {
    const cutoffTime = Date.now() - (args.olderThanDays * 24 * 60 * 60 * 1000);
    
    const oldJobs = await ctx.db
      .query("bulkJobs")
      .withIndex("by_created", (q) => q.lt("createdAt", cutoffTime))
      .filter((q) => 
        q.or(
          q.eq(q.field("status"), "completed"),
          q.eq(q.field("status"), "failed"),
          q.eq(q.field("status"), "cancelled")
        )
      )
      .collect();
    
    let deletedCount = 0;
    for (const job of oldJobs) {
      await ctx.db.delete(job._id);
      deletedCount++;
    }
    
    return { deletedCount };
  },
});

// Export management functions
export const createExport = mutation({
  args: {
    exportId: v.string(),
    jobId: v.string(),
    userId: v.string(),
    format: v.string(),
    status: v.string(),
    filename: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    filePath: v.optional(v.string()),
    downloadUrl: v.optional(v.string()),
    expiresAt: v.optional(v.number())
  },
  handler: async (ctx, args) => {
    const exportId = await ctx.db.insert("bulkJobExports", {
      exportId: args.exportId,
      jobId: args.jobId,
      userId: args.userId,
      format: args.format as any,
      status: args.status as any,
      filename: args.filename,
      fileSize: args.fileSize,
      filePath: args.filePath,
      downloadUrl: args.downloadUrl,
      createdAt: Date.now(),
      expiresAt: args.expiresAt
    });
    
    return exportId;
  },
});

export const updateExport = mutation({
  args: {
    exportId: v.string(),
    updates: v.any()
  },
  handler: async (ctx, args) => {
    const exportRecord = await ctx.db
      .query("bulkJobExports")
      .withIndex("by_exportId", (q) => q.eq("exportId", args.exportId))
      .first();
    
    if (!exportRecord) {
      throw new Error(`Export ${args.exportId} not found`);
    }
    
    await ctx.db.patch(exportRecord._id, {
      ...args.updates,
      updatedAt: Date.now()
    });
    
    return { success: true };
  },
});

export const getExport = query({
  args: { exportId: v.string() },
  handler: async (ctx, args) => {
    const exportRecord = await ctx.db
      .query("bulkJobExports")
      .withIndex("by_exportId", (q) => q.eq("exportId", args.exportId))
      .first();
    
    return exportRecord;
  },
});

// Clean up expired exports
export const cleanupExpiredExports = mutation({
  args: {},
  handler: async (ctx) => {
    const now = Date.now();
    const expiredExports = await ctx.db
      .query("bulkJobExports")
      .withIndex("by_expires", (q) => q.lt("expiresAt", now))
      .collect();
    
    let deletedCount = 0;
    for (const exportRecord of expiredExports) {
      await ctx.db.delete(exportRecord._id);
      deletedCount++;
    }
    
    return { deletedCount };
  },
});

// Additional job management functions

// Update job status (ACTION for long-running operations)
export const updateStatus = action({
  args: {
    jobId: v.string(),
    status: v.string(),
    currentStage: v.optional(v.string()),
    progress_percentage: v.optional(v.number()),
    error_message: v.optional(v.string()),
    metadata: v.optional(v.any()),
    failedStage: v.optional(v.string()),
    cancelledAt: v.optional(v.number()),
    cancellationReason: v.optional(v.string()),
    updates: v.optional(v.any())
  },
  handler: async (ctx, args) => {
    // Call internal mutation to update the job
    const result = await ctx.runMutation(internal.bulkJobs.updateStatusMutation, args);
    return result;
  },
});

// Internal mutation for status updates (called by action)
export const updateStatusMutation = mutation({
  args: {
    jobId: v.string(),
    status: v.string(),
    currentStage: v.optional(v.string()),
    progress_percentage: v.optional(v.number()),
    error_message: v.optional(v.string()),
    metadata: v.optional(v.any()),
    failedStage: v.optional(v.string()),
    cancelledAt: v.optional(v.number()),
    cancellationReason: v.optional(v.string()),
    updates: v.optional(v.any())
  },
  handler: async (ctx, args) => {
    // Find the job by jobId
    const job = await ctx.db
      .query("bulkJobs")
      .withIndex("by_jobId", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      console.error(`Job ${args.jobId} not found in updateStatus. Available jobs:`, 
        await ctx.db.query("bulkJobs").collect().then(jobs => jobs.map(j => j.jobId)));
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    // Prepare update data
    const updateData: any = {
      status: args.status,
      updatedAt: Date.now()
    };
    
    // Add named fields if provided
    if (args.currentStage !== undefined) {
      updateData.currentStage = args.currentStage;
    }
    if (args.progress_percentage !== undefined) {
      updateData.progressPercentage = args.progress_percentage;
    }
    if (args.error_message !== undefined) {
      updateData.errorMessage = args.error_message;
    }
    if (args.metadata !== undefined) {
      updateData.metadata = args.metadata;
    }
    if (args.failedStage !== undefined) {
      updateData.failedStage = args.failedStage;
    }
    if (args.cancelledAt !== undefined) {
      updateData.cancelledAt = args.cancelledAt;
    }
    if (args.cancellationReason !== undefined) {
      updateData.cancellationReason = args.cancellationReason;
    }
    
    // Add any additional updates (filter out fields that are already handled above)
    if (args.updates) {
      const filteredUpdates = { ...args.updates };
      // Remove fields that are already handled above to prevent conflicts
      delete filteredUpdates.current_stage;
      delete filteredUpdates.currentStage;
      delete filteredUpdates.progress_percentage;
      delete filteredUpdates.progressPercentage;
      delete filteredUpdates.error_message;
      delete filteredUpdates.errorMessage;
      delete filteredUpdates.metadata;
      delete filteredUpdates.failedStage;
      delete filteredUpdates.cancelledAt;
      delete filteredUpdates.cancellationReason;
      
      Object.assign(updateData, filteredUpdates);
    }
    
    // Update the job
    await ctx.db.patch(job._id, updateData);
    
    return { success: true };
  },
});

export const startStage = mutation({
  args: {
    jobId: v.string(),
    stage: v.string(),
    status: v.string(),
    startTime: v.number(),
    progress: v.number(),
    itemsTotal: v.optional(v.number())
  },
  handler: async (ctx, args) => {
    // Find the job by jobId
    const job = await ctx.db
      .query("bulkJobs")
      .withIndex("by_jobId", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      console.error(`Job ${args.jobId} not found in startStage`);
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    // Update the job's current stage and stage info
    const updateData: any = {
      currentStage: args.stage,
      updatedAt: Date.now()
    };
    
    // Update stages object if needed
    if (job.stages && typeof job.stages === 'object') {
      const stages = { ...job.stages };
      stages[args.stage] = {
        stage: args.stage,
        status: args.status,
        start_time: args.startTime,
        progress: args.progress,
        items_total: args.itemsTotal || 0
      };
      updateData.stages = stages;
    }
    
    await ctx.db.patch(job._id, updateData);
    
    return { success: true };
  },
});

export const completeStage = mutation({
  args: {
    jobId: v.string(),
    stage: v.string(),
    status: v.string(),
    endTime: v.number(),
    progress: v.number(),
    itemsCompleted: v.optional(v.number()),
    itemsFailed: v.optional(v.number()),
    metadata: v.optional(v.any())
  },
  handler: async (ctx, args) => {
    // Find the job by jobId
    const job = await ctx.db
      .query("bulkJobs")
      .withIndex("by_jobId", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    // Update stages object
    const updateData: any = {
      updatedAt: Date.now()
    };
    
    if (job.stages && typeof job.stages === 'object') {
      const stages = { ...job.stages };
      stages[args.stage] = {
        ...stages[args.stage],
        status: args.status,
        end_time: args.endTime,
        progress: args.progress,
        items_completed: args.itemsCompleted || 0,
        items_failed: args.itemsFailed || 0,
        metadata: args.metadata
      };
      updateData.stages = stages;
    }
    
    await ctx.db.patch(job._id, updateData);
    
    return { success: true };
  },
});

export const failStage = mutation({
  args: {
    jobId: v.string(),
    stage: v.string(),
    status: v.string(),
    endTime: v.number(),
    errorMessage: v.string(),
    metadata: v.optional(v.any())
  },
  handler: async (ctx, args) => {
    // Find the job by jobId
    const job = await ctx.db
      .query("bulkJobs")
      .withIndex("by_jobId", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    // Update stages object and job status
    const updateData: any = {
      status: "failed",
      errorMessage: args.errorMessage,
      updatedAt: Date.now()
    };
    
    if (job.stages && typeof job.stages === 'object') {
      const stages = { ...job.stages };
      stages[args.stage] = {
        ...stages[args.stage],
        status: args.status,
        end_time: args.endTime,
        error_message: args.errorMessage,
        metadata: args.metadata
      };
      updateData.stages = stages;
    }
    
    await ctx.db.patch(job._id, updateData);
    
    return { success: true };
  },
});

export const updateStageProgress = mutation({
  args: {
    jobId: v.string(),
    stage: v.string(),
    progress: v.number(),
    updatedAt: v.number(),
    itemsCompleted: v.optional(v.number()),
    itemsFailed: v.optional(v.number()),
    metadata: v.optional(v.any())
  },
  handler: async (ctx, args) => {
    // Find the job by jobId
    const job = await ctx.db
      .query("bulkJobs")
      .withIndex("by_jobId", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    // Update stages object and overall progress
    const updateData: any = {
      updatedAt: args.updatedAt
    };
    
    if (job.stages && typeof job.stages === 'object') {
      const stages = { ...job.stages };
      stages[args.stage] = {
        ...stages[args.stage],
        progress: args.progress,
        items_completed: args.itemsCompleted || 0,
        items_failed: args.itemsFailed || 0,
        metadata: args.metadata
      };
      updateData.stages = stages;
    }
    
    // Update overall progress
    if (job.progress && typeof job.progress === 'object') {
      updateData.progress = {
        ...job.progress,
        currentStage: args.progress,
        itemsCompleted: args.itemsCompleted || job.progress.itemsCompleted,
        itemsFailed: args.itemsFailed || job.progress.itemsFailed
      };
    }
    
    await ctx.db.patch(job._id, updateData);
    
    return { success: true };
  },
});

export const addExport = mutation({
  args: {
    jobId: v.string(),
    exportId: v.string(),
    exportInfo: v.any()
  },
  handler: async (ctx, args) => {
    // Find the job by jobId
    const job = await ctx.db
      .query("bulkJobs")
      .withIndex("by_jobId", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    // Update exports object
    const exports = { ...job.exports };
    exports[args.exportId] = args.exportInfo;
    
    await ctx.db.patch(job._id, {
      exports: exports,
      updatedAt: Date.now()
    });
    
    return { success: true };
  },
});

export const removeExport = mutation({
  args: {
    exportId: v.string()
  },
  handler: async (ctx, args) => {
    // Find job with this export
    const jobs = await ctx.db.query("bulkJobs").collect();
    
    for (const job of jobs) {
      if (job.exports && typeof job.exports === 'object' && job.exports[args.exportId]) {
        const exports = { ...job.exports };
        delete exports[args.exportId];
        
        await ctx.db.patch(job._id, {
          exports: exports,
          updatedAt: Date.now()
        });
        break;
      }
    }
    
    return { success: true };
  },
});

export const getExpiredExports = query({
  args: {
    currentTime: v.number()
  },
  handler: async (ctx, args) => {
    const jobs = await ctx.db.query("bulkJobs").collect();
    const expiredExports = [];
    
    for (const job of jobs) {
      if (job.exports && typeof job.exports === 'object') {
        for (const [exportId, exportInfo] of Object.entries(job.exports)) {
          if (typeof exportInfo === 'object' && exportInfo.expires_at && exportInfo.expires_at < args.currentTime) {
            expiredExports.push({ exportId });
          }
        }
      }
    }
    
    return expiredExports;
  },
});


================================================
FILE: convex/convex.config.ts
================================================
import { defineApp } from "convex/server";
import rateLimiter from "@convex-dev/rate-limiter/convex.config";

const app = defineApp();
app.use(rateLimiter);

export default app;


================================================
FILE: convex/http.ts
================================================
import { httpRouter } from "convex/server";
import { updateSearchProgress, updateSearchStatus, updateSearchResults } from "./hunterHttpEndpoints";

// Define HTTP routes for the hunter leadgen endpoints
const http = httpRouter();

// Route for updating search progress
http.route({
  path: "/updateSearchProgress",
  method: "POST",
  handler: updateSearchProgress,
});

// Route for updating search status
http.route({
  path: "/updateSearchStatus",
  method: "POST",
  handler: updateSearchStatus,
});

// Route for updating search results
http.route({
  path: "/updateSearchResults",
  method: "POST",
  handler: updateSearchResults,
});

// Export the HTTP router
export default http;


================================================
FILE: convex/hunterActions.ts
================================================
import { action } from "./_generated/server";
import { v } from "convex/values";
import { api, internal } from "./_generated/api";
import { checkRateLimit, checkSubscriptionLimits, incrementUsage } from "./rateLimitHelpers";

// Lead search configuration interface
interface LeadSearchConfig {
  searchName: string;
  searchObjective: string;
  selectedSources: string[];
  industry: string;
  location: string;
  companySize?: string;
  jobTitles: string[];
  keywords?: string;
  includeEmails: boolean;
  includePhones: boolean;
  includeLinkedIn: boolean;
  validationCriteria?: {
    mustHaveWebsite: boolean;
    mustHaveContactInfo: boolean;
    mustHaveSpecificKeywords: string[];
    mustBeInIndustry: boolean;
    customValidationRules: string;
  };
}

// Create a new lead search
export const createLeadSearch = action({
  args: {
    userId: v.string(),
    searchConfig: v.object({
      searchName: v.string(),
      searchObjective: v.string(),
      selectedSources: v.array(v.string()),
      industry: v.string(),
      location: v.string(),
      companySize: v.optional(v.string()),
      jobTitles: v.array(v.string()),
      keywords: v.optional(v.string()),
      includeEmails: v.boolean(),
      includePhones: v.boolean(),
      includeLinkedIn: v.boolean(),
      validationCriteria: v.optional(v.object({
        mustHaveWebsite: v.boolean(),
        mustHaveContactInfo: v.boolean(),
        mustHaveSpecificKeywords: v.array(v.string()),
        mustBeInIndustry: v.boolean(),
        customValidationRules: v.string(),
      })),
    }),
  },
  handler: async (ctx, { userId, searchConfig }) => {
    // Get user subscription and check limits
    const subscription = await ctx.runQuery(internal.hunterQueries.getUserSubscription, { userId });
    if (!subscription) {
      // Create a default free subscription for testing
      console.log("No subscription found, creating default free subscription for user:", userId);
      const now = new Date().toISOString();
      await ctx.runMutation(internal.hunterMutations.updateUserSubscription, {
        userId,
        tier: "free",
        status: "active"
      });
      
      // Re-fetch the subscription
      const newSubscription = await ctx.runQuery(internal.hunterQueries.getUserSubscription, { userId });
      if (!newSubscription) {
        throw new Error("Failed to create user subscription");
      }
      return ctx.action(api.hunterActions.createLeadSearch, { userId, searchConfig });
    }

    // Check rate limits
    const rateLimitCheck = await checkRateLimit(ctx, userId, "leadSearch", subscription.tier);
    if (!rateLimitCheck.allowed) {
      throw new Error(rateLimitCheck.error);
    }

    // Check subscription limits
    const limitsCheck = await ctx.runQuery(api.rateLimitHelpers.checkSubscriptionLimits, {
      userId,
      feature: "search",
      additionalLeads: subscription.leadsPerSearch,
    });

    if (!limitsCheck.allowed) {
      throw new Error(limitsCheck.error);
    }

    // Check if premium features are being used
    const premiumSources = ["database", "directory"];
    const usingPremiumSources = searchConfig.selectedSources.some(source => 
      premiumSources.includes(source)
    );

    if (usingPremiumSources && subscription.tier === "free") {
      throw new Error("Premium data sources require a paid subscription");
    }

    if (searchConfig.includeLinkedIn && subscription.tier === "free") {
      throw new Error("LinkedIn data requires a premium subscription");
    }

    // Generate unique search ID
    const searchId = `search_${Date.now()}_${Math.random().toString(36).substring(2)}`;

    // Create search record
    await ctx.runMutation(internal.hunterMutations.createLeadSearch, {
      searchId,
      userId,
      searchConfig,
    });

    // Increment usage
    await ctx.runMutation(api.rateLimitHelpers.incrementUsage, {
      userId,
      feature: "search",
    });

    // Start the search process
    try {
      await initiateBackendSearch(ctx, searchId, searchConfig, userId);
    } catch (error) {
      // Update search status to failed
      await ctx.runMutation(internal.hunterMutations.updateSearchStatus, {
        searchId,
        status: "failed",
        error: error.message || "Failed to initiate search",
      });
      throw error;
    }

    return {
      searchId,
      status: "initializing",
      message: "Search initiated successfully",
    };
  },
});

// Initiate backend search using Jina Reader integration
async function initiateBackendSearch(
  ctx: any,
  searchId: string,
  searchConfig: LeadSearchConfig,
  userId: string
) {
  // Update status to initializing
  await ctx.runMutation(internal.hunterMutations.updateSearchProgress, {
    searchId,
    progress: 10,
    currentStage: "Initializing search...",
  });

  // Prepare search payload for backend (matching LeadSearchRequest model)
  const searchPayload = {
    search_id: searchId,
    user_id: userId,
    search_config: {
      searchName: searchConfig.searchName,
      searchObjective: searchConfig.searchObjective,
      selectedSources: searchConfig.selectedSources,
      industry: searchConfig.industry,
      location: searchConfig.location,
      companySize: searchConfig.companySize,
      jobTitles: searchConfig.jobTitles,
      keywords: searchConfig.keywords,
      includeEmails: searchConfig.includeEmails,
      includePhones: searchConfig.includePhones,
      includeLinkedIn: searchConfig.includeLinkedIn,
      validationCriteria: searchConfig.validationCriteria,
    },
  };

  // Call backend LeadGen service
  const backendUrl = process.env.BACKEND_URL || "http://localhost:8000";
  
  let result;
  try {
    const response = await fetch(`${backendUrl}/api/public/hunter/search`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${process.env.API_KEY}`,
      },
      body: JSON.stringify(searchPayload),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Backend search failed: ${errorText}`);
    }

    result = await response.json();
  } catch (error) {
    // Re-throw the error to be handled by the caller
    throw error;
  }
  
  // Update search status
  await ctx.runMutation(internal.hunterMutations.updateSearchProgress, {
    searchId,
    progress: 20,
    currentStage: "Search submitted to processing pipeline",
  });

  return result;
}

// Get search status and progress
export const getSearchStatus = action({
  args: { searchId: v.string() },
  handler: async (ctx, { searchId }) => {
    const search = await ctx.runQuery(internal.hunterQueries.getLeadSearch, { searchId });
    
    if (!search) {
      throw new Error("Search not found");
    }

    // If search is completed, get results summary
    if (search.status === "completed") {
      const resultsCount = await ctx.runQuery(internal.hunterQueries.getSearchResultsCount, { searchId });
      
      return {
        ...search,
        resultsCount,
      };
    }

    return search;
  },
});

// Get search results with pagination
export const getSearchResults = action({
  args: {
    searchId: v.string(),
    limit: v.optional(v.number()),
    offset: v.optional(v.number()),
    filters: v.optional(v.object({
      emailVerified: v.optional(v.boolean()),
      phoneVerified: v.optional(v.boolean()),
      minConfidence: v.optional(v.number()),
      dataSources: v.optional(v.array(v.string())),
    })),
  },
  handler: async (ctx, { searchId, limit = 50, offset = 0, filters }) => {
    // Verify user has access to this search
    const search = await ctx.runQuery(internal.hunterQueries.getLeadSearch, { searchId });
    if (!search) {
      throw new Error("Search not found");
    }

    const results = await ctx.runQuery(internal.hunterQueries.getSearchResults, {
      searchId,
      limit,
      offset,
      filters,
    });

    return {
      results,
      total: search.totalLeads || 0,
      hasMore: offset + limit < (search.totalLeads || 0),
    };
  },
});

// Export search results
export const exportSearchResults = action({
  args: {
    userId: v.string(),
    searchId: v.string(),
    format: v.union(v.literal("csv"), v.literal("json"), v.literal("xlsx")),
    fields: v.array(v.string()),
    filters: v.optional(v.object({
      emailVerified: v.optional(v.boolean()),
      phoneVerified: v.optional(v.boolean()),
      minConfidence: v.optional(v.number()),
      dataSources: v.optional(v.array(v.string())),
    })),
  },
  handler: async (ctx, { userId, searchId, format, fields, filters }) => {
    // Check if user has export permissions
    const subscription = await ctx.runQuery(internal.hunterQueries.getUserSubscription, { userId });
    if (!subscription) {
      throw new Error("User subscription not found");
    }

    if (subscription.tier === "free") {
      throw new Error("Export feature requires a premium subscription");
    }

    // Check rate limits for exports
    const rateLimitCheck = await checkRateLimit(ctx, userId, "leadExport", subscription.tier);
    if (!rateLimitCheck.allowed) {
      throw new Error(rateLimitCheck.error);
    }

    // Verify user owns this search
    const search = await ctx.runQuery(internal.hunterQueries.getLeadSearch, { searchId });
    if (!search || search.userId !== userId) {
      throw new Error("Search not found or access denied");
    }

    // Generate export ID
    const exportId = `export_${Date.now()}_${Math.random().toString(36).substring(2)}`;

    // Create export job
    await ctx.runMutation(internal.hunterMutations.createExportJob, {
      exportId,
      userId,
      searchId,
      format,
      fields,
      filters,
    });

    // Trigger export processing
    await processExportJob(ctx, exportId);

    return {
      exportId,
      status: "processing",
      message: "Export job created successfully",
    };
  },
});

// Process export job
async function processExportJob(ctx: any, exportId: string) {
  // This would typically call a backend service to generate the export file
  // For now, we'll simulate the process
  
  const backendUrl = process.env.BACKEND_URL || "http://localhost:8000";
  
  try {
    const response = await fetch(`${backendUrl}/api/hunter/export`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${process.env.API_KEY}`,
      },
      body: JSON.stringify({ export_id: exportId }),
    });

    if (!response.ok) {
      await ctx.runMutation(internal.hunterMutations.updateExportStatus, {
        exportId,
        status: "failed",
        error: "Export processing failed",
      });
      throw new Error("Export processing failed");
    }

    const result = await response.json();
    return result;
  } catch (error) {
    // Ensure export status is updated even if there's an error
    await ctx.runMutation(internal.hunterMutations.updateExportStatus, {
      exportId,
      status: "failed",
      error: error.message || "Export processing failed",
    });
    throw error;
  }
}

// Get user's search history
export const getSearchHistory = action({
  args: {
    userId: v.string(),
    limit: v.optional(v.number()),
    offset: v.optional(v.number()),
  },
  handler: async (ctx, { userId, limit = 20, offset = 0 }) => {
    const searches = await ctx.runQuery(internal.hunterQueries.getUserSearchHistory, {
      userId,
      limit,
      offset,
    });

    return searches;
  },
});

// Delete a search and its results
export const deleteSearch = action({
  args: {
    userId: v.string(),
    searchId: v.string(),
  },
  handler: async (ctx, { userId, searchId }) => {
    // Verify ownership
    const search = await ctx.runQuery(internal.hunterQueries.getLeadSearch, { searchId });
    if (!search || search.userId !== userId) {
      throw new Error("Search not found or access denied");
    }

    // Delete search and all related data
    await ctx.runMutation(internal.hunterMutations.deleteSearch, { searchId });

    return { success: true, message: "Search deleted successfully" };
  },
});

// Webhook endpoint for backend to update search progress
export const updateSearchProgress = action({
  args: {
    searchId: v.string(),
    progress: v.number(),
    currentStage: v.optional(v.string()),
    status: v.optional(v.union(
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    )),
    results: v.optional(v.object({
      totalLeads: v.number(),
      verifiedEmails: v.number(),
      verifiedPhones: v.number(),
      businessWebsites: v.number(),
      avgResponseRate: v.string(),
      searchTime: v.string(),
    })),
    error: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    // Verify API key (in production, you'd validate the webhook signature)
    const apiKey = process.env.API_KEY;
    if (!apiKey) {
      throw new Error("API key not configured");
    }

    // Update search progress
    await ctx.runMutation(internal.hunterMutations.updateSearchProgress, {
      searchId: args.searchId,
      progress: args.progress,
      currentStage: args.currentStage,
    });

    // If status is provided, update it
    if (args.status) {
      await ctx.runMutation(internal.hunterMutations.updateSearchStatus, {
        searchId: args.searchId,
        status: args.status,
        error: args.error,
      });
    }

    // If results are provided, update them
    if (args.results) {
      await ctx.runMutation(internal.hunterMutations.updateSearchResults, {
        searchId: args.searchId,
        results: args.results,
      });

      // Update user's monthly lead count
      if (args.results.totalLeads > 0) {
        const search = await ctx.runQuery(internal.hunterQueries.getLeadSearch, { 
          searchId: args.searchId 
        });
        
        if (search) {
          await ctx.runMutation(api.rateLimitHelpers.incrementUsage, {
            userId: search.userId,
            feature: "search",
            leadsCount: args.results.totalLeads,
          });
        }
      }
    }

    return { success: true };
  },
});

// Store lead results from backend
export const storeLeadResults = action({
  args: {
    searchId: v.string(),
    leads: v.array(v.object({
      leadId: v.string(),
      name: v.optional(v.string()),
      email: v.optional(v.string()),
      phone: v.optional(v.string()),
      linkedInUrl: v.optional(v.string()),
      websiteUrl: v.optional(v.string()),
      companyName: v.optional(v.string()),
      companySize: v.optional(v.string()),
      industry: v.optional(v.string()),
      location: v.optional(v.string()),
      jobTitle: v.optional(v.string()),
      department: v.optional(v.string()),
      seniority: v.optional(v.string()),
      emailVerified: v.boolean(),
      phoneVerified: v.boolean(),
      confidence: v.number(),
      dataSource: v.string(),
    })),
  },
  handler: async (ctx, { searchId, leads }) => {
    // Store lead results in batches
    const batchSize = 100;
    for (let i = 0; i < leads.length; i += batchSize) {
      const batch = leads.slice(i, i + batchSize);
      await ctx.runMutation(internal.hunterMutations.storeLeadResults, {
        searchId,
        leads: batch,
      });
    }

    return { 
      success: true, 
      message: `Stored ${leads.length} leads for search ${searchId}` 
    };
  },
});


================================================
FILE: convex/hunterHttpEndpoints.ts
================================================
import { httpAction } from "./_generated/server";
import { api, internal } from "./_generated/api";

// HTTP endpoint for updating search progress
export const updateSearchProgress = httpAction(async (ctx, request) => {
  const data = await request.json();
  
  try {
    await ctx.runMutation(internal.hunterMutations.updateSearchProgress, {
      searchId: data.searchId,
      progress: data.progress,
      currentStage: data.currentStage,
    });
    
    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("Error updating search progress:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    });
  }
});

// HTTP endpoint for updating search status
export const updateSearchStatus = httpAction(async (ctx, request) => {
  const data = await request.json();
  
  try {
    await ctx.runMutation(internal.hunterMutations.updateSearchStatus, {
      searchId: data.searchId,
      status: data.status,
      error: data.error,
    });
    
    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("Error updating search status:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    });
  }
});

// HTTP endpoint for updating search results
export const updateSearchResults = httpAction(async (ctx, request) => {
  const data = await request.json();
  
  try {
    await ctx.runMutation(internal.hunterMutations.updateSearchResults, {
      searchId: data.searchId,
      results: data.results,
    });
    
    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("Error updating search results:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    });
  }
});


================================================
FILE: convex/hunterMutations.ts
================================================
import { internalMutation } from "./_generated/server";
import { v } from "convex/values";

// Create a new lead search
export const createLeadSearch = internalMutation({
  args: {
    searchId: v.string(),
    userId: v.string(),
    searchConfig: v.object({
      searchName: v.string(),
      searchObjective: v.string(),
      selectedSources: v.array(v.string()),
      industry: v.string(),
      location: v.string(),
      companySize: v.optional(v.string()),
      jobTitles: v.array(v.string()),
      keywords: v.optional(v.string()),
      includeEmails: v.boolean(),
      includePhones: v.boolean(),
      includeLinkedIn: v.boolean(),
      validationCriteria: v.optional(v.object({
        mustHaveWebsite: v.boolean(),
        mustHaveContactInfo: v.boolean(),
        mustHaveSpecificKeywords: v.array(v.string()),
        mustBeInIndustry: v.boolean(),
        customValidationRules: v.string(),
      })),
    }),
  },
  handler: async (ctx, { searchId, userId, searchConfig }) => {
    const now = new Date().toISOString();
    
    // Get user subscription to determine tier
    const subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();
    
    const userTier = subscription?.tier || "free";
    
    // Calculate expiry date for free tier (7 days)
    let expiresAt = undefined;
    if (userTier === "free") {
      const expiryDate = new Date();
      expiryDate.setDate(expiryDate.getDate() + 7);
      expiresAt = expiryDate.toISOString();
    }
    
    await ctx.db.insert("leadSearches", {
      searchId,
      userId,
      searchName: searchConfig.searchName,
      searchObjective: searchConfig.searchObjective,
      selectedSources: searchConfig.selectedSources,
      industry: searchConfig.industry,
      location: searchConfig.location,
      companySize: searchConfig.companySize,
      jobTitles: searchConfig.jobTitles,
      keywords: searchConfig.keywords,
      includeEmails: searchConfig.includeEmails,
      includePhones: searchConfig.includePhones,
      includeLinkedIn: searchConfig.includeLinkedIn,
      validationCriteria: searchConfig.validationCriteria,
      status: "pending",
      progress: 0,
      createdAt: now,
      updatedAt: now,
      userTier,
      expiresAt,
    });
  },
});

// Update search progress
export const updateSearchProgress = internalMutation({
  args: {
    searchId: v.string(),
    progress: v.number(),
    currentStage: v.optional(v.string()),
  },
  handler: async (ctx, { searchId, progress, currentStage }) => {
    const search = await ctx.db
      .query("leadSearches")
      .withIndex("by_search", (q) => q.eq("searchId", searchId))
      .first();

    if (!search) {
      throw new Error("Search not found");
    }

    const updates: any = {
      progress,
      updatedAt: new Date().toISOString(),
    };

    if (currentStage) {
      updates.currentStage = currentStage;
    }

    // Auto-update status based on progress
    if (progress >= 100) {
      updates.status = "completed";
      updates.completedAt = new Date().toISOString();
    } else if (progress > 0 && search.status === "pending") {
      updates.status = "processing";
    }

    await ctx.db.patch(search._id, updates);
  },
});

// Update search status
export const updateSearchStatus = internalMutation({
  args: {
    searchId: v.string(),
    status: v.union(
      v.literal("pending"),
      v.literal("initializing"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    error: v.optional(v.string()),
  },
  handler: async (ctx, { searchId, status, error }) => {
    const search = await ctx.db
      .query("leadSearches")
      .withIndex("by_search", (q) => q.eq("searchId", searchId))
      .first();

    if (!search) {
      throw new Error("Search not found");
    }

    const updates: any = {
      status,
      updatedAt: new Date().toISOString(),
    };

    if (error) {
      updates.error = error;
    }

    if (status === "completed") {
      updates.completedAt = new Date().toISOString();
      updates.progress = 100;
    } else if (status === "failed") {
      updates.completedAt = new Date().toISOString();
    }

    await ctx.db.patch(search._id, updates);
  },
});

// Update search results summary
export const updateSearchResults = internalMutation({
  args: {
    searchId: v.string(),
    results: v.object({
      totalLeads: v.number(),
      verifiedEmails: v.number(),
      verifiedPhones: v.number(),
      businessWebsites: v.number(),
      avgResponseRate: v.string(),
      searchTime: v.string(),
    }),
  },
  handler: async (ctx, { searchId, results }) => {
    const search = await ctx.db
      .query("leadSearches")
      .withIndex("by_search", (q) => q.eq("searchId", searchId))
      .first();

    if (!search) {
      throw new Error("Search not found");
    }

    await ctx.db.patch(search._id, {
      totalLeads: results.totalLeads,
      verifiedEmails: results.verifiedEmails,
      verifiedPhones: results.verifiedPhones,
      businessWebsites: results.businessWebsites,
      avgResponseRate: results.avgResponseRate,
      searchTime: results.searchTime,
      updatedAt: new Date().toISOString(),
    });
  },
});

// Store lead search results
export const storeLeadResults = internalMutation({
  args: {
    searchId: v.string(),
    leads: v.array(v.object({
      leadId: v.string(),
      name: v.optional(v.string()),
      email: v.optional(v.string()),
      phone: v.optional(v.string()),
      linkedInUrl: v.optional(v.string()),
      websiteUrl: v.optional(v.string()),
      companyName: v.optional(v.string()),
      companySize: v.optional(v.string()),
      industry: v.optional(v.string()),
      location: v.optional(v.string()),
      jobTitle: v.optional(v.string()),
      department: v.optional(v.string()),
      seniority: v.optional(v.string()),
      emailVerified: v.boolean(),
      phoneVerified: v.boolean(),
      confidence: v.number(),
      dataSource: v.string(),
    })),
  },
  handler: async (ctx, { searchId, leads }) => {
    const now = new Date().toISOString();
    
    // Store each lead result
    for (const lead of leads) {
      // Check if lead already exists to avoid duplicates
      const existingLead = await ctx.db
        .query("leadSearchResults")
        .withIndex("by_lead", (q) => q.eq("leadId", lead.leadId))
        .first();

      if (!existingLead) {
        await ctx.db.insert("leadSearchResults", {
          searchId,
          leadId: lead.leadId,
          name: lead.name,
          email: lead.email,
          phone: lead.phone,
          linkedInUrl: lead.linkedInUrl,
          websiteUrl: lead.websiteUrl,
          companyName: lead.companyName,
          companySize: lead.companySize,
          industry: lead.industry,
          location: lead.location,
          jobTitle: lead.jobTitle,
          department: lead.department,
          seniority: lead.seniority,
          emailVerified: lead.emailVerified,
          phoneVerified: lead.phoneVerified,
          confidence: lead.confidence,
          dataSource: lead.dataSource,
          extractedAt: now,
          lastUpdated: now,
        });
      }
    }
  },
});

// Create export job
export const createExportJob = internalMutation({
  args: {
    exportId: v.string(),
    userId: v.string(),
    searchId: v.string(),
    format: v.union(v.literal("csv"), v.literal("json"), v.literal("xlsx")),
    fields: v.array(v.string()),
    filters: v.optional(v.object({
      emailVerified: v.optional(v.boolean()),
      phoneVerified: v.optional(v.boolean()),
      minConfidence: v.optional(v.number()),
      dataSources: v.optional(v.array(v.string())),
    })),
  },
  handler: async (ctx, { exportId, userId, searchId, format, fields, filters }) => {
    const now = new Date().toISOString();
    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(); // 7 days

    await ctx.db.insert("leadExportJobs", {
      exportId,
      userId,
      searchId,
      format,
      fields,
      filters,
      status: "pending",
      progress: 0,
      createdAt: now,
      expiresAt,
    });
  },
});

// Update export job status
export const updateExportStatus = internalMutation({
  args: {
    exportId: v.string(),
    status: v.union(
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    progress: v.optional(v.number()),
    recordCount: v.optional(v.number()),
    fileUrl: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    error: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const exportJob = await ctx.db
      .query("leadExportJobs")
      .withIndex("by_export", (q) => q.eq("exportId", args.exportId))
      .first();

    if (!exportJob) {
      throw new Error("Export job not found");
    }

    const updates: any = {
      status: args.status,
    };

    if (args.progress !== undefined) {
      updates.progress = args.progress;
    }

    if (args.recordCount !== undefined) {
      updates.recordCount = args.recordCount;
    }

    if (args.fileUrl) {
      updates.fileUrl = args.fileUrl;
    }

    if (args.fileSize !== undefined) {
      updates.fileSize = args.fileSize;
    }

    if (args.error) {
      updates.error = args.error;
    }

    if (args.status === "completed") {
      updates.completedAt = new Date().toISOString();
    }

    await ctx.db.patch(exportJob._id, updates);
  },
});

// Delete a search and all its related data
export const deleteSearch = internalMutation({
  args: { searchId: v.string() },
  handler: async (ctx, { searchId }) => {
    // Delete search record
    const search = await ctx.db
      .query("leadSearches")
      .withIndex("by_search", (q) => q.eq("searchId", searchId))
      .first();

    if (search) {
      await ctx.db.delete(search._id);
    }

    // Delete all lead results for this search
    const results = await ctx.db
      .query("leadSearchResults")
      .withIndex("by_search", (q) => q.eq("searchId", searchId))
      .collect();

    for (const result of results) {
      await ctx.db.delete(result._id);
    }

    // Delete any export jobs for this search
    const exportJobs = await ctx.db
      .query("leadExportJobs")
      .withIndex("by_search", (q) => q.eq("searchId", searchId))
      .collect();

    for (const job of exportJobs) {
      await ctx.db.delete(job._id);
    }
  },
});

// Update user subscription
export const updateUserSubscription = internalMutation({
  args: {
    userId: v.string(),
    tier: v.union(v.literal("free"), v.literal("premium"), v.literal("enterprise")),
    subscriptionId: v.optional(v.string()),
    status: v.optional(v.union(
      v.literal("active"),
      v.literal("cancelled"),
      v.literal("expired"),
      v.literal("trial")
    )),
    expiresAt: v.optional(v.string()),
  },
  handler: async (ctx, { userId, tier, subscriptionId, status, expiresAt }) => {
    const subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    const tierLimits = {
      free: { searchesPerDay: 5, leadsPerSearch: 50, totalLeadsPerMonth: 250 },
      premium: { searchesPerDay: 100, leadsPerSearch: 500, totalLeadsPerMonth: 50000 },
      enterprise: { searchesPerDay: -1, leadsPerSearch: -1, totalLeadsPerMonth: -1 },
    };

    const limits = tierLimits[tier];
    const now = new Date().toISOString();

    if (subscription) {
      // Update existing subscription
      const updates: any = {
        tier,
        searchesPerDay: limits.searchesPerDay,
        leadsPerSearch: limits.leadsPerSearch,
        totalLeadsPerMonth: limits.totalLeadsPerMonth,
        updatedAt: now,
      };

      if (subscriptionId) updates.subscriptionId = subscriptionId;
      if (status) updates.status = status;
      if (expiresAt) updates.expiresAt = expiresAt;

      await ctx.db.patch(subscription._id, updates);
    } else {
      // Create new subscription
      await ctx.db.insert("userSubscriptions", {
        userId,
        tier,
        searchesPerDay: limits.searchesPerDay,
        leadsPerSearch: limits.leadsPerSearch,
        totalLeadsPerMonth: limits.totalLeadsPerMonth,
        searchesToday: 0,
        leadsThisMonth: 0,
        lastResetDate: now,
        subscriptionId,
        status: status || "active",
        createdAt: now,
        updatedAt: now,
        expiresAt,
      });
    }
  },
});

// Cleanup expired export jobs
export const cleanupExpiredExports = internalMutation({
  args: {},
  handler: async (ctx) => {
    const now = new Date().toISOString();
    
    const expiredJobs = await ctx.db
      .query("leadExportJobs")
      .filter((q) => q.lt(q.field("expiresAt"), now))
      .collect();

    for (const job of expiredJobs) {
      await ctx.db.delete(job._id);
    }

    return { deletedJobs: expiredJobs.length };
  },
});

// Reset daily usage counters
export const resetDailyUsage = internalMutation({
  args: {},
  handler: async (ctx) => {
    const allSubscriptions = await ctx.db
      .query("userSubscriptions")
      .collect();

    const now = new Date();
    const today = now.toISOString().split('T')[0];

    for (const subscription of allSubscriptions) {
      const lastReset = new Date(subscription.lastResetDate);
      const lastResetDate = lastReset.toISOString().split('T')[0];

      if (today !== lastResetDate) {
        await ctx.db.patch(subscription._id, {
          searchesToday: 0,
          lastResetDate: now.toISOString(),
          updatedAt: now.toISOString(),
        });
      }
    }
  },
});

// Update lead verification status
export const updateLeadVerification = internalMutation({
  args: {
    leadId: v.string(),
    emailVerified: v.optional(v.boolean()),
    phoneVerified: v.optional(v.boolean()),
    confidence: v.optional(v.number()),
  },
  handler: async (ctx, { leadId, emailVerified, phoneVerified, confidence }) => {
    const lead = await ctx.db
      .query("leadSearchResults")
      .withIndex("by_lead", (q) => q.eq("leadId", leadId))
      .first();

    if (!lead) {
      throw new Error("Lead not found");
    }

    const updates: any = {
      lastUpdated: new Date().toISOString(),
    };

    if (emailVerified !== undefined) {
      updates.emailVerified = emailVerified;
    }

    if (phoneVerified !== undefined) {
      updates.phoneVerified = phoneVerified;
    }

    if (confidence !== undefined) {
      updates.confidence = confidence;
    }

    await ctx.db.patch(lead._id, updates);
  },
});


================================================
FILE: convex/hunterQueries.ts
================================================
import { query } from "./_generated/server";
import { v } from "convex/values";

// Get user subscription
export const getUserSubscription = query({
  args: { userId: v.string() },
  handler: async (ctx, { userId }) => {
    return await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();
  },
});

// Get lead search by ID
export const getLeadSearch = query({
  args: { searchId: v.string() },
  handler: async (ctx, { searchId }) => {
    return await ctx.db
      .query("leadSearches")
      .withIndex("by_search", (q) => q.eq("searchId", searchId))
      .first();
  },
});

// Get search results count
export const getSearchResultsCount = query({
  args: { searchId: v.string() },
  handler: async (ctx, { searchId }) => {
    const results = await ctx.db
      .query("leadSearchResults")
      .withIndex("by_search", (q) => q.eq("searchId", searchId))
      .collect();
    
    return results.length;
  },
});

// Get search results with pagination and filters
export const getSearchResults = query({
  args: {
    searchId: v.string(),
    limit: v.optional(v.number()),
    offset: v.optional(v.number()),
    filters: v.optional(v.object({
      emailVerified: v.optional(v.boolean()),
      phoneVerified: v.optional(v.boolean()),
      minConfidence: v.optional(v.number()),
      dataSources: v.optional(v.array(v.string())),
    })),
  },
  handler: async (ctx, { searchId, limit = 50, offset = 0, filters }) => {
    let query = ctx.db
      .query("leadSearchResults")
      .withIndex("by_search", (q) => q.eq("searchId", searchId));

    let results = await query.collect();

    // Apply filters
    if (filters) {
      if (filters.emailVerified !== undefined) {
        results = results.filter(r => r.emailVerified === filters.emailVerified);
      }
      if (filters.phoneVerified !== undefined) {
        results = results.filter(r => r.phoneVerified === filters.phoneVerified);
      }
      if (filters.minConfidence !== undefined) {
        results = results.filter(r => r.confidence >= filters.minConfidence);
      }
      if (filters.dataSources && filters.dataSources.length > 0) {
        results = results.filter(r => filters.dataSources.includes(r.dataSource));
      }
    }

    // Apply pagination
    const paginatedResults = results.slice(offset, offset + limit);

    return {
      results: paginatedResults,
      total: results.length,
      hasMore: offset + limit < results.length,
    };
  },
});

// Get user's search history
export const getUserSearchHistory = query({
  args: {
    userId: v.string(),
    limit: v.optional(v.number()),
    offset: v.optional(v.number()),
  },
  handler: async (ctx, { userId, limit = 20, offset = 0 }) => {
    const searches = await ctx.db
      .query("leadSearches")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .order("desc")
      .take(limit + offset);

    return searches.slice(offset);
  },
});

// Get all user searches for the hunter page
export const getUserSearchesForHunter = query({
  args: { 
    userId: v.string(),
    includeStats: v.optional(v.boolean())
  },
  handler: async (ctx, { userId, includeStats = true }) => {
    const searches = await ctx.db
      .query("leadSearches")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .order("desc")
      .collect();

    // If includeStats is true, fetch result counts for each search
    if (includeStats) {
      const searchesWithStats = await Promise.all(
        searches.map(async (search) => {
          const resultsCount = await ctx.db
            .query("leadSearchResults")
            .withIndex("by_search", (q) => q.eq("searchId", search.searchId))
            .collect()
            .then(results => results.length);

          return {
            ...search,
            resultsCount
          };
        })
      );
      return searchesWithStats;
    }

    return searches;
  },
});

// Get user's recent searches with results summary
export const getUserDashboardData = query({
  args: { userId: v.string() },
  handler: async (ctx, { userId }) => {
    // Get subscription info
    const subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    // Get recent searches
    const recentSearches = await ctx.db
      .query("leadSearches")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .order("desc")
      .take(10);

    // Get active searches
    const activeSearches = await ctx.db
      .query("leadSearches")
      .withIndex("by_user_status", (q) => q.eq("userId", userId).eq("status", "processing"))
      .collect();

    // Calculate total leads found this month
    const thisMonth = new Date();
    thisMonth.setDate(1);
    const monthStart = thisMonth.toISOString();

    const monthlySearches = await ctx.db
      .query("leadSearches")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .filter((q) => q.gte(q.field("createdAt"), monthStart))
      .collect();

    const totalLeadsThisMonth = monthlySearches.reduce((sum, search) => 
      sum + (search.totalLeads || 0), 0
    );

    return {
      subscription,
      recentSearches,
      activeSearches,
      stats: {
        totalSearches: recentSearches.length,
        activeSearches: activeSearches.length,
        totalLeadsThisMonth,
        searchesToday: subscription?.searchesToday || 0,
      },
    };
  },
});

// Get search analytics for a specific search
export const getSearchAnalytics = query({
  args: { searchId: v.string() },
  handler: async (ctx, { searchId }) => {
    const search = await ctx.db
      .query("leadSearches")
      .withIndex("by_search", (q) => q.eq("searchId", searchId))
      .first();

    if (!search) {
      return null;
    }

    const results = await ctx.db
      .query("leadSearchResults")
      .withIndex("by_search", (q) => q.eq("searchId", searchId))
      .collect();

    // Calculate analytics
    const totalResults = results.length;
    const verifiedEmails = results.filter(r => r.emailVerified).length;
    const verifiedPhones = results.filter(r => r.phoneVerified).length;
    const avgConfidence = totalResults > 0 
      ? results.reduce((sum, r) => sum + r.confidence, 0) / totalResults 
      : 0;

    // Source breakdown
    const sourceBreakdown = results.reduce((acc, result) => {
      acc[result.dataSource] = (acc[result.dataSource] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    // Industry breakdown
    const industryBreakdown = results.reduce((acc, result) => {
      const industry = result.industry || "Unknown";
      acc[industry] = (acc[industry] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    // Company size breakdown
    const companySizeBreakdown = results.reduce((acc, result) => {
      const size = result.companySize || "Unknown";
      acc[size] = (acc[size] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return {
      search,
      analytics: {
        totalResults,
        verifiedEmails,
        verifiedPhones,
        emailVerificationRate: totalResults > 0 ? (verifiedEmails / totalResults) * 100 : 0,
        phoneVerificationRate: totalResults > 0 ? (verifiedPhones / totalResults) * 100 : 0,
        avgConfidence: Math.round(avgConfidence * 100) / 100,
        sourceBreakdown,
        industryBreakdown,
        companySizeBreakdown,
      },
    };
  },
});

// Get export job status
export const getExportJob = query({
  args: { exportId: v.string() },
  handler: async (ctx, { exportId }) => {
    return await ctx.db
      .query("leadExportJobs")
      .withIndex("by_export", (q) => q.eq("exportId", exportId))
      .first();
  },
});

// Get user's export history
export const getUserExportHistory = query({
  args: {
    userId: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, { userId, limit = 10 }) => {
    return await ctx.db
      .query("leadExportJobs")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .order("desc")
      .take(limit);
  },
});

// Search for existing leads across all searches
export const searchExistingLeads = query({
  args: {
    userId: v.string(),
    query: v.string(),
    searchField: v.union(
      v.literal("email"),
      v.literal("name"),
      v.literal("company"),
      v.literal("phone")
    ),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, { userId, query: searchQuery, searchField, limit = 50 }) => {
    // Get all user's searches first
    const userSearches = await ctx.db
      .query("leadSearches")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .collect();

    const searchIds = userSearches.map(s => s.searchId);

    // Search across all results from user's searches
    const allResults = await ctx.db
      .query("leadSearchResults")
      .collect();

    // Filter by user's searches and search query
    const filteredResults = allResults
      .filter(result => searchIds.includes(result.searchId))
      .filter(result => {
        const fieldValue = result[searchField]?.toLowerCase() || "";
        return fieldValue.includes(searchQuery.toLowerCase());
      })
      .slice(0, limit);

    return filteredResults;
  },
});

// Get lead details by ID
export const getLeadDetails = query({
  args: { leadId: v.string() },
  handler: async (ctx, { leadId }) => {
    return await ctx.db
      .query("leadSearchResults")
      .withIndex("by_lead", (q) => q.eq("leadId", leadId))
      .first();
  },
});

// Get similar leads (same company or industry)
export const getSimilarLeads = query({
  args: {
    leadId: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, { leadId, limit = 10 }) => {
    const lead = await ctx.db
      .query("leadSearchResults")
      .withIndex("by_lead", (q) => q.eq("leadId", leadId))
      .first();

    if (!lead) {
      return [];
    }

    // Find leads from same company or industry
    const similarLeads = await ctx.db
      .query("leadSearchResults")
      .collect();

    return similarLeads
      .filter(l => 
        l.leadId !== leadId && (
          (l.companyName && l.companyName === lead.companyName) ||
          (l.industry && l.industry === lead.industry)
        )
      )
      .slice(0, limit);
  },
});

// Get search performance metrics
export const getSearchPerformanceMetrics = query({
  args: { userId: v.string() },
  handler: async (ctx, { userId }) => {
    const searches = await ctx.db
      .query("leadSearches")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .collect();

    const completedSearches = searches.filter(s => s.status === "completed");
    const totalLeads = completedSearches.reduce((sum, s) => sum + (s.totalLeads || 0), 0);
    const avgLeadsPerSearch = completedSearches.length > 0 
      ? totalLeads / completedSearches.length 
      : 0;

    // Calculate average search time
    const searchesWithTime = completedSearches.filter(s => s.searchTime);
    const avgSearchTime = searchesWithTime.length > 0
      ? searchesWithTime.reduce((sum, s) => {
          const timeMatch = s.searchTime?.match(/(\d+)m\s*(\d+)s/);
          if (timeMatch) {
            return sum + (parseInt(timeMatch[1]) * 60 + parseInt(timeMatch[2]));
          }
          return sum;
        }, 0) / searchesWithTime.length
      : 0;

    return {
      totalSearches: searches.length,
      completedSearches: completedSearches.length,
      failedSearches: searches.filter(s => s.status === "failed").length,
      activeSearches: searches.filter(s => s.status === "processing").length,
      totalLeads,
      avgLeadsPerSearch: Math.round(avgLeadsPerSearch),
      avgSearchTimeSeconds: Math.round(avgSearchTime),
      successRate: searches.length > 0 
        ? (completedSearches.length / searches.length) * 100 
        : 0,
    };
  },
});


================================================
FILE: convex/initializeHunter.ts
================================================
import { mutation } from "./_generated/server";
import { v } from "convex/values";

// Initialize a user's subscription (called when they first access Hunter)
export const initializeUserSubscription = mutation({
  args: { userId: v.string() },
  handler: async (ctx, { userId }) => {
    // Check if user already has a subscription
    const existingSubscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (existingSubscription) {
      return existingSubscription;
    }

    // Create default free tier subscription
    const now = new Date().toISOString();
    const subscriptionId = await ctx.db.insert("userSubscriptions", {
      userId,
      tier: "free",
      searchesPerDay: 5,
      leadsPerSearch: 50,
      totalLeadsPerMonth: 250,
      searchesToday: 0,
      leadsThisMonth: 0,
      lastResetDate: now,
      status: "active",
      createdAt: now,
      updatedAt: now,
    });

    return await ctx.db.get(subscriptionId);
  },
});

// Upgrade user subscription
export const upgradeUserSubscription = mutation({
  args: {
    userId: v.string(),
    newTier: v.union(v.literal("premium"), v.literal("enterprise")),
    subscriptionId: v.optional(v.string()),
    expiresAt: v.optional(v.string()),
  },
  handler: async (ctx, { userId, newTier, subscriptionId, expiresAt }) => {
    const subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (!subscription) {
      throw new Error("User subscription not found");
    }

    const tierLimits = {
      premium: { searchesPerDay: 100, leadsPerSearch: 500, totalLeadsPerMonth: 50000 },
      enterprise: { searchesPerDay: -1, leadsPerSearch: -1, totalLeadsPerMonth: -1 },
    };

    const limits = tierLimits[newTier];

    await ctx.db.patch(subscription._id, {
      tier: newTier,
      searchesPerDay: limits.searchesPerDay,
      leadsPerSearch: limits.leadsPerSearch,
      totalLeadsPerMonth: limits.totalLeadsPerMonth,
      subscriptionId,
      status: "active",
      updatedAt: new Date().toISOString(),
      expiresAt,
    });

    return await ctx.db.get(subscription._id);
  },
});

// Reset daily usage for all users (to be run daily via cron)
export const resetDailyUsageForAllUsers = mutation({
  args: {},
  handler: async (ctx) => {
    const subscriptions = await ctx.db
      .query("userSubscriptions")
      .collect();

    const now = new Date();
    const today = now.toISOString().split('T')[0];

    for (const subscription of subscriptions) {
      const lastReset = new Date(subscription.lastResetDate);
      const lastResetDate = lastReset.toISOString().split('T')[0];

      // Reset if it's a new day
      if (today !== lastResetDate) {
        await ctx.db.patch(subscription._id, {
          searchesToday: 0,
          lastResetDate: now.toISOString(),
          updatedAt: now.toISOString(),
        });
      }
    }

    return { message: "Daily usage reset completed", processedCount: subscriptions.length };
  },
});

// Get system stats (for admin dashboard)
export const getSystemStats = mutation({
  args: {},
  handler: async (ctx) => {
    const subscriptions = await ctx.db.query("userSubscriptions").collect();
    const searches = await ctx.db.query("leadSearches").collect();
    const results = await ctx.db.query("leadSearchResults").collect();

    const tierCounts = subscriptions.reduce((acc, sub) => {
      acc[sub.tier] = (acc[sub.tier] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const statusCounts = searches.reduce((acc, search) => {
      acc[search.status] = (acc[search.status] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const today = new Date().toISOString().split('T')[0];
    const todaySearches = searches.filter(s => s.createdAt.startsWith(today));

    return {
      users: {
        total: subscriptions.length,
        byTier: tierCounts,
      },
      searches: {
        total: searches.length,
        today: todaySearches.length,
        byStatus: statusCounts,
      },
      leads: {
        total: results.length,
      },
      generatedAt: new Date().toISOString(),
    };
  },
});


================================================
FILE: convex/jinaIntegration.ts
================================================
import { action } from "./_generated/server";
import { v } from "convex/values";
import { internal } from "./_generated/api";

// Configuration for Jina Reader API
const JINA_API_BASE = "https://r.jina.ai";
const JINA_API_KEY = process.env.JINA_API_KEY;

// Backend LeadGen service configuration
const BACKEND_URL = process.env.BACKEND_URL || "http://localhost:8000";
const API_KEY = process.env.API_KEY;

// Interface for search processing pipeline
interface SearchPipelineConfig {
  searchId: string;
  userId: string;
  searchConfig: {
    name: string;
    objective: string;
    sources: string[];
    criteria: {
      industry: string;
      location: string;
      company_size?: string;
      job_titles: string[];
      keywords?: string;
    };
    contact_preferences: {
      include_emails: boolean;
      include_phones: boolean;
      include_linkedin: boolean;
    };
  };
  jinaConfig: {
    use_reader: boolean;
    recursive_search: boolean;
    max_depth: number;
    rate_limit: boolean;
  };
}

// Process search through Jina Reader and LeadGen pipeline
export const processSearchWithJina = action({
  args: {
    searchId: v.string(),
    searchConfig: v.object({
      searchName: v.string(),
      searchObjective: v.string(),
      selectedSources: v.array(v.string()),
      industry: v.string(),
      location: v.string(),
      companySize: v.optional(v.string()),
      jobTitles: v.array(v.string()),
      keywords: v.optional(v.string()),
      includeEmails: v.boolean(),
      includePhones: v.boolean(),
      includeLinkedIn: v.boolean(),
    }),
    userId: v.string(),
  },
  handler: async (ctx, { searchId, searchConfig, userId }) => {
    try {
      // Update search status to initializing
      await ctx.runMutation(internal.hunterMutations.updateSearchProgress, {
        searchId,
        progress: 10,
        currentStage: "Initializing search with Jina Reader...",
      });

      // Prepare search pipeline configuration
      const pipelineConfig: SearchPipelineConfig = {
        searchId,
        userId,
        searchConfig: {
          name: searchConfig.searchName,
          objective: searchConfig.searchObjective,
          sources: searchConfig.selectedSources,
          criteria: {
            industry: searchConfig.industry,
            location: searchConfig.location,
            company_size: searchConfig.companySize,
            job_titles: searchConfig.jobTitles,
            keywords: searchConfig.keywords,
          },
          contact_preferences: {
            include_emails: searchConfig.includeEmails,
            include_phones: searchConfig.includePhones,
            include_linkedin: searchConfig.includeLinkedIn,
          },
        },
        jinaConfig: {
          use_reader: true,
          recursive_search: true,
          max_depth: 3,
          rate_limit: true,
        },
      };

      // Step 1: Generate search URLs based on criteria
      await ctx.runMutation(internal.hunterMutations.updateSearchProgress, {
        searchId,
        progress: 20,
        currentStage: "Generating search URLs...",
      });

      const searchUrls = await generateSearchUrls(pipelineConfig);

      // Step 2: Use Jina Reader to extract content from URLs
      await ctx.runMutation(internal.hunterMutations.updateSearchProgress, {
        searchId,
        progress: 40,
        currentStage: "Extracting content with Jina Reader...",
      });

      const extractedContent = await extractContentWithJina(searchUrls);

      // Step 3: Process content through LeadGen pipeline
      await ctx.runMutation(internal.hunterMutations.updateSearchProgress, {
        searchId,
        progress: 60,
        currentStage: "Processing through LeadGen pipeline...",
      });

      const processedLeads = await processWithLeadGenPipeline(pipelineConfig, extractedContent);

      // Step 4: Store results
      await ctx.runMutation(internal.hunterMutations.updateSearchProgress, {
        searchId,
        progress: 80,
        currentStage: "Storing lead results...",
      });

      if (processedLeads.length > 0) {
        await ctx.runMutation(internal.hunterMutations.storeLeadResults, {
          searchId,
          leads: processedLeads,
        });
      }

      // Step 5: Finalize search
      await ctx.runMutation(internal.hunterMutations.updateSearchProgress, {
        searchId,
        progress: 100,
        currentStage: "Search completed",
      });

      await ctx.runMutation(internal.hunterMutations.updateSearchResults, {
        searchId,
        results: {
          totalLeads: processedLeads.length,
          verifiedEmails: processedLeads.filter(l => l.emailVerified).length,
          verifiedPhones: processedLeads.filter(l => l.phoneVerified).length,
          businessWebsites: processedLeads.filter(l => l.websiteUrl).length,
          avgResponseRate: "24%", // This would be calculated based on historical data
          searchTime: calculateSearchTime(),
        },
      });

      return {
        success: true,
        totalLeads: processedLeads.length,
        searchTime: calculateSearchTime(),
      };

    } catch (error) {
      // Handle errors
      await ctx.runMutation(internal.hunterMutations.updateSearchStatus, {
        searchId,
        status: "failed",
        error: error.message || "Search processing failed",
      });

      throw error;
    }
  },
});

// Generate search URLs based on criteria
async function generateSearchUrls(config: SearchPipelineConfig): Promise<string[]> {
  const { criteria } = config.searchConfig;
  const urls: string[] = [];

  // Generate Google search URLs
  const googleQueries = [
    `"${criteria.industry}" "${criteria.location}" site:linkedin.com/company`,
    `"${criteria.industry}" "${criteria.location}" "contact" "email"`,
    `"${criteria.industry}" "${criteria.location}" "team" "about"`,
  ];

  // Add job title specific searches
  for (const jobTitle of criteria.job_titles) {
    googleQueries.push(
      `"${jobTitle}" "${criteria.industry}" "${criteria.location}" site:linkedin.com/in`,
      `"${jobTitle}" "${criteria.industry}" "${criteria.location}" "email" OR "contact"`
    );
  }

  // Add keywords if provided
  if (criteria.keywords) {
    googleQueries.push(
      `"${criteria.keywords}" "${criteria.industry}" "${criteria.location}"`
    );
  }

  // Convert queries to URLs
  for (const query of googleQueries) {
    urls.push(`https://www.google.com/search?q=${encodeURIComponent(query)}`);
  }

  // Add business directory URLs
  if (config.searchConfig.sources.includes("directory")) {
    urls.push(
      `https://www.yellowpages.com/search?search_terms=${encodeURIComponent(criteria.industry)}&geo_location_terms=${encodeURIComponent(criteria.location)}`,
      `https://www.yelp.com/search?find_desc=${encodeURIComponent(criteria.industry)}&find_loc=${encodeURIComponent(criteria.location)}`
    );
  }

  return urls.slice(0, 20); // Limit to prevent overwhelming the system
}

// Extract content using Jina Reader API
async function extractContentWithJina(urls: string[]): Promise<any[]> {
  if (!JINA_API_KEY) {
    throw new Error("Jina API key not configured");
  }

  const extractedContent: any[] = [];
  
  // Process URLs in batches to respect rate limits
  const batchSize = 3;
  for (let i = 0; i < urls.length; i += batchSize) {
    const batch = urls.slice(i, i + batchSize);
    
    const batchPromises = batch.map(async (url) => {
      try {
        const response = await fetch(`${JINA_API_BASE}/${url}`, {
          method: "GET",
          headers: {
            "Authorization": `Bearer ${JINA_API_KEY}`,
            "X-Return-Format": "markdown",
            "X-With-Generated-Alt": "true",
          },
        });

        if (response.ok) {
          const content = await response.text();
          return {
            url,
            content,
            success: true,
            extractedAt: new Date().toISOString(),
          };
        } else {
          return {
            url,
            error: `HTTP ${response.status}: ${response.statusText}`,
            success: false,
          };
        }
      } catch (error) {
        return {
          url,
          error: error.message,
          success: false,
        };
      }
    });

    const batchResults = await Promise.all(batchPromises);
    extractedContent.push(...batchResults);

    // Add delay between batches to respect rate limits
    if (i + batchSize < urls.length) {
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  return extractedContent;
}

// Process content through LeadGen pipeline
async function processWithLeadGenPipeline(
  config: SearchPipelineConfig,
  extractedContent: any[]
): Promise<any[]> {
  if (!API_KEY) {
    throw new Error("Backend API key not configured");
  }

  const payload = {
    search_id: config.searchId,
    user_id: config.userId,
    search_config: config.searchConfig,
    extracted_content: extractedContent,
    processing_config: {
      use_leadgen_pipeline: true,
      phases: [
        "content_analysis",
        "contact_extraction",
        "data_validation",
        "lead_enrichment",
        "quality_scoring"
      ],
      jina_integration: true,
    },
  };

  const response = await fetch(`${BACKEND_URL}/api/leadgen/process`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${API_KEY}`,
    },
    body: JSON.stringify(payload),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`LeadGen processing failed: ${errorText}`);
  }

  const result = await response.json();
  
  // Transform backend results to our lead format
  return result.leads.map((lead: any) => ({
    leadId: lead.lead_id || `lead_${Date.now()}_${Math.random().toString(36).substring(2)}`,
    name: lead.name,
    email: lead.email,
    phone: lead.phone,
    linkedInUrl: lead.linkedin_url,
    websiteUrl: lead.website_url,
    companyName: lead.company_name,
    companySize: lead.company_size,
    industry: lead.industry,
    location: lead.location,
    jobTitle: lead.job_title,
    department: lead.department,
    seniority: lead.seniority,
    emailVerified: lead.email_verified || false,
    phoneVerified: lead.phone_verified || false,
    confidence: lead.confidence || 0.5,
    dataSource: lead.data_source || "web",
  }));
}

// Calculate search time (mock implementation)
function calculateSearchTime(): string {
  const minutes = Math.floor(Math.random() * 5) + 1;
  const seconds = Math.floor(Math.random() * 60);
  return `${minutes}m ${seconds.toString().padStart(2, '0')}s`;
}

// Test Jina Reader connection
export const testJinaConnection = action({
  args: { testUrl: v.string() },
  handler: async (ctx, { testUrl }) => {
    if (!JINA_API_KEY) {
      throw new Error("Jina API key not configured");
    }

    try {
      const response = await fetch(`${JINA_API_BASE}/${testUrl}`, {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${JINA_API_KEY}`,
          "X-Return-Format": "text",
        },
      });

      return {
        success: response.ok,
        status: response.status,
        statusText: response.statusText,
        content: response.ok ? await response.text() : null,
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
      };
    }
  },
});

// Process single URL with Jina Reader (for testing/debugging)
export const processSingleUrl = action({
  args: { url: v.string() },
  handler: async (ctx, { url }) => {
    if (!JINA_API_KEY) {
      throw new Error("Jina API key not configured");
    }

    try {
      const response = await fetch(`${JINA_API_BASE}/${url}`, {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${JINA_API_KEY}`,
          "X-Return-Format": "markdown",
          "X-With-Generated-Alt": "true",
        },
      });

      if (response.ok) {
        const content = await response.text();
        return {
          success: true,
          url,
          content,
          extractedAt: new Date().toISOString(),
        };
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (error) {
      return {
        success: false,
        url,
        error: error.message,
      };
    }
  },
});

// Health check for backend services
export const checkBackendHealth = action({
  args: {},
  handler: async (ctx) => {
    const services = [
      { name: "Backend API", url: `${BACKEND_URL}/health` },
      { name: "LeadGen Service", url: `${BACKEND_URL}/api/leadgen/health` },
      { name: "Jina Reader", url: `${JINA_API_BASE}/https://example.com` },
    ];

    const healthChecks = await Promise.all(
      services.map(async (service) => {
        try {
          const headers: Record<string, string> = {};
          
          if (service.name === "Jina Reader" && JINA_API_KEY) {
            headers["Authorization"] = `Bearer ${JINA_API_KEY}`;
          } else if (service.name !== "Jina Reader" && API_KEY) {
            headers["Authorization"] = `Bearer ${API_KEY}`;
          }

          const response = await fetch(service.url, {
            method: "GET",
            headers,
            signal: AbortSignal.timeout(5000), // 5 second timeout
          });

          return {
            service: service.name,
            status: response.ok ? "healthy" : "unhealthy",
            statusCode: response.status,
            responseTime: Date.now(),
          };
        } catch (error) {
          return {
            service: service.name,
            status: "error",
            error: error.message,
            responseTime: Date.now(),
          };
        }
      })
    );

    return {
      timestamp: new Date().toISOString(),
      services: healthChecks,
      overall: healthChecks.every(check => check.status === "healthy") ? "healthy" : "degraded",
    };
  },
});


================================================
FILE: convex/proceduralAudio.ts
================================================
import { v } from "convex/values";
import { mutation, query, action } from "./_generated/server";
import { api } from "./_generated/api";

// Create a new procedural audio generation job
export const createJob = mutation({
  args: {
    config: v.object({
      prompt: v.string(),
      duration: v.number(),
      intensity: v.number(), // 0-1 for ambiance intensity
      name: v.string()
    }),
    userId: v.string()
  },
  handler: async (ctx, args) => {
    const jobId = `proc-audio-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    
    await ctx.db.insert("proceduralAudioJobs", {
      jobId,
      userId: args.userId,
      config: args.config,
      status: "pending",
      createdAt: Date.now()
    });
    
    // Trigger background processing
    await ctx.scheduler.runAfter(0, "processAudioJob", { jobId });
    
    return jobId;
  }
});

// Process the audio generation job
export const processAudioJob = action({
  args: { jobId: v.string() },
  handler: async (ctx, args) => {
    const job = await ctx.db.query("proceduralAudioJobs")
      .filter(q => q.eq(q.field("jobId"), args.jobId))
      .first();
    
    if (!job) {
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    // Update status to processing
    await ctx.db.patch(job._id, {
      status: "processing",
      startedAt: Date.now()
    });
    
    try {
      // Call the procedural audio service
      const audioServiceUrl = "http://localhost:8000"; // Can be made configurable
      const response = await fetch(`${audioServiceUrl}/api/public/procedural-audio/generate`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(job.config),
      });
      
      if (!response.ok) {
        throw new Error(`Audio service error: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json();
      
      // Update job with results
      await ctx.db.patch(job._id, {
        status: "completed",
        audioUrl: result.url,
        audioId: result.id,
        fileName: `${job.config.name.replace(/\s+/g, '-').toLowerCase()}.wav`,
        fileSize: result.metadata?.size ? parseInt(result.metadata.size) : undefined,
        metadata: {
          size: result.metadata?.size || "Unknown",
          duration: `${job.config.duration}s`,
          quality: result.metadata?.quality || "44.1kHz/16-bit",
          format: "WAV"
        },
        completedAt: Date.now(),
        processingTime: Math.floor((Date.now() - job.startedAt) / 1000)
      });
      
      return { success: true, jobId: args.jobId };
      
    } catch (error) {
      // Update job with error
      await ctx.db.patch(job._id, {
        status: "failed",
        error: error instanceof Error ? error.message : "Unknown error",
        completedAt: Date.now()
      });
      
      throw error;
    }
  }
});

// Get job status
export const getJob = query({
  args: { jobId: v.string() },
  handler: async (ctx, args) => {
    const job = await ctx.db.query("proceduralAudioJobs")
      .filter(q => q.eq(q.field("jobId"), args.jobId))
      .first();
    
    return job;
  }
});

// Get user's jobs
export const getUserJobs = query({
  args: { userId: v.string(), limit: v.optional(v.number()) },
  handler: async (ctx, args) => {
    const limit = args.limit || 50;
    const jobs = await ctx.db.query("proceduralAudioJobs")
      .filter(q => q.eq(q.field("userId"), args.userId))
      .order("desc")
      .take(limit);
    
    return jobs;
  }
});

// Get active jobs
export const getActiveJobs = query({
  args: { userId: v.string() },
  handler: async (ctx, args) => {
    const jobs = await ctx.db.query("proceduralAudioJobs")
      .filter(q => q.and(
        q.eq(q.field("userId"), args.userId),
        q.or(
          q.eq(q.field("status"), "pending"),
          q.eq(q.field("status"), "processing")
        )
      ))
      .order("desc");
    
    return jobs;
  }
});

// Delete job
export const deleteJob = mutation({
  args: { jobId: v.string(), userId: v.string() },
  handler: async (ctx, args) => {
    const job = await ctx.db.query("proceduralAudioJobs")
      .filter(q => q.and(
        q.eq(q.field("jobId"), args.jobId),
        q.eq(q.field("userId"), args.userId)
      ))
      .first();
    
    if (job) {
      await ctx.db.delete(job._id);
      return { success: true };
    }
    
    return { success: false, error: "Job not found" };
  }
});


================================================
FILE: convex/ragActions.ts
================================================
import { action } from "./_generated/server";
import { v } from "convex/values";
import { internal } from "./_generated/api";

// Jina AI configuration
const JINA_API_KEY = process.env.JINA_API_KEY;
const JINA_EMBEDDING_URL = "https://api.jina.ai/v1/embeddings";

// Process RAG workflow with Jina embeddings
export const processRAGWorkflow = action({
  args: {
    workflowId: v.string(),
    userId: v.string(),
    sources: v.array(v.object({
      type: v.union(v.literal("youtube"), v.literal("tiktok"), v.literal("twitch"), v.literal("document"), v.literal("url")),
      value: v.string(),
      metadata: v.optional(v.any()),
    })),
    config: v.object({
      chunkSize: v.number(),
      overlap: v.number(),
      embeddingModel: v.string(),
    }),
  },
  handler: async (ctx, { workflowId, userId, sources, config }) => {
    try {
      // Update workflow status
      await ctx.runMutation(internal.ragMutations.updateWorkflowStatus, {
        workflowId,
        status: "processing",
        progress: 10,
        currentStage: "Initializing workflow...",
      });

      // Process each source
      let processedSources = 0;
      const totalSources = sources.length;

      for (const source of sources) {
        try {
          // Create source record
          const sourceId = `src_${Date.now()}_${Math.random().toString(36).substring(2)}`;
          await ctx.runMutation(internal.ragMutations.createSource, {
            sourceId,
            workflowId,
            userId,
            sourceType: source.type,
            sourceUrl: source.value,
            metadata: source.metadata || {},
          });

          // Update progress
          const progress = 10 + (processedSources / totalSources) * 30;
          await ctx.runMutation(internal.ragMutations.updateWorkflowStatus, {
            workflowId,
            status: "processing",
            progress,
            currentStage: `Processing source ${processedSources + 1} of ${totalSources}...`,
          });

          // Extract content based on source type
          let content = "";
          let metadata = {};

          if (source.type === "youtube") {
            // Fetch YouTube transcript using yt-dlp
            const transcriptData = await fetchYouTubeTranscriptWithYtdlp(source.value);
            content = transcriptData.transcript;
            metadata = transcriptData.metadata;
          } else if (source.type === "tiktok") {
            // Fetch TikTok content using yt-dlp
            const tiktokData = await fetchTikTokContentWithYtdlp(source.value);
            content = tiktokData.content;
            metadata = tiktokData.metadata;
          } else if (source.type === "twitch") {
            // Fetch Twitch content using yt-dlp
            const twitchData = await fetchTwitchContentWithYtdlp(source.value);
            content = twitchData.content;
            metadata = twitchData.metadata;
          } else if (source.type === "url") {
            // Fetch web content using Jina Reader
            const webData = await fetchWebContent(source.value);
            content = webData.content;
            metadata = webData.metadata;
          } else if (source.type === "document") {
            // Document content should be passed in metadata
            content = source.metadata?.content || "";
            metadata = source.metadata || {};
          }

          // Update source with content
          await ctx.runMutation(internal.ragMutations.updateSourceContent, {
            sourceId,
            content,
            metadata,
          });

          // Chunk the content
          const chunks = chunkText(content, config.chunkSize, config.overlap);
          
          // Update progress
          await ctx.runMutation(internal.ragMutations.updateWorkflowStatus, {
            workflowId,
            status: "embedding",
            progress: 40 + (processedSources / totalSources) * 30,
            currentStage: `Generating embeddings for source ${processedSources + 1}...`,
          });

          // Generate embeddings for chunks
          const embeddings = await generateEmbeddings(chunks, config.embeddingModel);

          // Store embeddings
          for (let i = 0; i < chunks.length; i++) {
            const embeddingId = `emb_${Date.now()}_${Math.random().toString(36).substring(2)}`;
            await ctx.runMutation(internal.ragMutations.storeEmbedding, {
              embeddingId,
              workflowId,
              sourceId,
              userId,
              chunkIndex: i,
              chunkText: chunks[i],
              chunkTokens: chunks[i].split(' ').length, // Approximate token count
              embedding: embeddings[i],
              embeddingModel: config.embeddingModel,
              dimensions: embeddings[i].length,
          });
        }

          processedSources++;
        } catch (error) {
          console.error(`Error processing source: ${error}`);
          await ctx.runMutation(internal.ragMutations.updateSourceStatus, {
            sourceId: source.value,
            status: "failed",
            error: error.message,
          });
        }
      }

      // Calculate final statistics
      const stats = await ctx.runQuery(internal.ragQueries.getWorkflowStats, { workflowId });

      // Update workflow completion
      await ctx.runMutation(internal.ragMutations.updateWorkflowStatus, {
        workflowId,
        status: "completed",
        progress: 100,
        currentStage: "Processing completed!",
        stats: {
          totalSources: stats.totalSources,
          processedSources: stats.processedSources,
          totalChunks: stats.totalChunks,
          totalEmbeddings: stats.totalEmbeddings,
          totalTokens: stats.totalTokens,
          indexSize: formatBytes(stats.indexSizeBytes),
        },
      });

      return {
        success: true,
        workflowId,
        stats,
      };

    } catch (error) {
      // Handle errors
      await ctx.runMutation(internal.ragMutations.updateWorkflowStatus, {
        workflowId,
        status: "failed",
        error: error.message || "Workflow processing failed",
      });

      throw error;
    }
  },
});

// Generate embeddings using Jina AI
async function generateEmbeddings(texts: string[], model: string = "jina-clip-v2"): Promise<number[][]> {
  if (!JINA_API_KEY) {
    throw new Error("Jina API key not configured");
  }

  const input = texts.map(text => ({ text }));

  const response = await fetch(JINA_EMBEDDING_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${JINA_API_KEY}`,
    },
    body: JSON.stringify({
      model,
      input,
      encoding_type: "float",
      dimensions: 1024,
      task: "text-matching",
      normalize: true,
    }),
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Jina API error: ${error}`);
  }

  const result = await response.json();
  return result.data.map((item: any) => item.embedding);
}

// Chunk text with overlap
function chunkText(text: string, chunkSize: number, overlap: number): string[] {
  const words = text.split(/\s+/);
  const chunks: string[] = [];
  
  for (let i = 0; i < words.length; i += chunkSize - overlap) {
    const chunk = words.slice(i, i + chunkSize).join(' ');
    if (chunk.trim()) {
      chunks.push(chunk.trim());
    }
  }
  
  return chunks;
}

// Fetch YouTube transcript
async function fetchYouTubeTranscript(url: string): Promise<{ transcript: string; metadata: any }> {
  // This would integrate with your existing YouTube transcript service
  // For now, returning mock data
  return {
    transcript: "Sample YouTube transcript content...",
    metadata: {
      title: "Sample Video",
      author: "Sample Channel",
      duration: 300,
    },
  };
}

// Fetch web content
async function fetchWebContent(url: string): Promise<{ content: string; metadata: any }> {
  // Use Jina Reader API for web scraping
  const readerUrl = `https://r.jina.ai/${url}`;
  
  const response = await fetch(readerUrl, {
    headers: {
      "Authorization": `Bearer ${JINA_API_KEY}`,
      "X-Return-Format": "text",
    },
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch web content: ${response.statusText}`);
}
// Fetch YouTube transcript using yt-dlp (aligned with bulk/cloning)
async function fetchYouTubeTranscriptWithYtdlp(url: string): Promise<{ transcript: string; metadata: any }> {
  const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
  const API_KEY = process.env.NEXT_PUBLIC_API_KEY;

  const response = await fetch(`${BACKEND_URL}/api/public/youtube/transcript`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${API_KEY}`,
    },
    body: JSON.stringify({
      youtube_url: url,
      job_id: `rag_${Date.now()}`,
      user_id: "rag_user",
    }),
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch YouTube transcript: ${response.statusText}`);
  }

  const result = await response.json();
  return {
    transcript: result.transcript,
    metadata: {
      title: result.metadata?.title,
      author: result.metadata?.author,
      duration: result.metadata?.duration,
      url,
    },
  };
}

// Fetch TikTok content using yt-dlp (aligned with bulk/cloning)
async function fetchTikTokContentWithYtdlp(url: string): Promise<{ content: string; metadata: any }> {
  const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
  const API_KEY = process.env.NEXT_PUBLIC_API_KEY;

  const response = await fetch(`${BACKEND_URL}/api/public/tiktok/content`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${API_KEY}`,
    },
    body: JSON.stringify({
      url,
      job_id: `rag_${Date.now()}`,
      user_id: "rag_user",
    }),
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch TikTok content: ${response.statusText}`);
  }

  const result = await response.json();
  return {
    content: result.content,
    metadata: {
      title: result.metadata?.title,
      author: result.metadata?.author,
      platform: "tiktok",
      url,
    },
  };
}

// Fetch Twitch content using yt-dlp (aligned with bulk/cloning)
async function fetchTwitchContentWithYtdlp(url: string): Promise<{ content: string; metadata: any }> {
  const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
  const API_KEY = process.env.NEXT_PUBLIC_API_KEY;

  const response = await fetch(`${BACKEND_URL}/api/public/twitch/content`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${API_KEY}`,
    },
    body: JSON.stringify({
      url,
      job_id: `rag_${Date.now()}`,
      user_id: "rag_user",
    }),
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch Twitch content: ${response.statusText}`);
  }

  const result = await response.json();
  return {
    content: result.content,
    metadata: {
      title: result.metadata?.title,
      author: result.metadata?.author,
      platform: "twitch",
      url,
    },
  };
}

  const content = await response.text();
  
  return {
    content,
    metadata: {
      url,
      fetchedAt: new Date().toISOString(),
    },
  };
}

// Fetch TikTok content
async function fetchTikTokContent(url: string): Promise<{ content: string; metadata: any }> {
  // Use Jina Reader API for TikTok content extraction
  const readerUrl = `https://r.jina.ai/${url}`;
  
  const response = await fetch(readerUrl, {
    headers: {
      "Authorization": `Bearer ${JINA_API_KEY}`,
      "X-Return-Format": "text",
    },
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch TikTok content: ${response.statusText}`);
  }

  const content = await response.text();
  
  return {
    content,
    metadata: {
      url,
      platform: "tiktok",
      fetchedAt: new Date().toISOString(),
    },
  };
}

// Fetch Twitch content
async function fetchTwitchContent(url: string): Promise<{ content: string; metadata: any }> {
  // Use Jina Reader API for Twitch content extraction
  const readerUrl = `https://r.jina.ai/${url}`;
  
  const response = await fetch(readerUrl, {
    headers: {
      "Authorization": `Bearer ${JINA_API_KEY}`,
      "X-Return-Format": "text",
    },
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch Twitch content: ${response.statusText}`);
  }

  const content = await response.text();
  
  return {
    content,
    metadata: {
      url,
      platform: "twitch",
      fetchedAt: new Date().toISOString(),
    },
  };
}

// Format bytes to human readable
function formatBytes(bytes: number): string {
  if (bytes === 0) return "0 B";
  const k = 1024;
  const sizes = ["B", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
}

// Export embeddings to various formats
export const exportEmbeddings = action({
  args: {
    workflowId: v.string(),
    userId: v.string(),
    format: v.union(
      v.literal("json"),
      v.literal("jsonl"),
      v.literal("csv"),
      v.literal("parquet"),
      v.literal("pinecone"),
      v.literal("weaviate")
    ),
    includeMetadata: v.boolean(),
    includeChunks: v.boolean(),
  },
  handler: async (ctx, { workflowId, userId, format, includeMetadata, includeChunks }) => {
    try {
      // Check user permissions
      const userTier = await ctx.runQuery(internal.ragQueries.getUserTier, { userId });
      
      // Validate export format based on tier
      const allowedFormats = {
        free: ["json"],
        premium: ["json", "jsonl", "csv"],
        enterprise: ["json", "jsonl", "csv", "parquet", "pinecone", "weaviate"],
      };

      if (!allowedFormats[userTier].includes(format)) {
        throw new Error(`Export format "${format}" not available for ${userTier} tier`);
      }

      // Create export job
      const exportId = `exp_${Date.now()}_${Math.random().toString(36).substring(2)}`;
      await ctx.runMutation(internal.ragMutations.createExportJob, {
        exportId,
        workflowId,
        userId,
        format,
        includeMetadata,
        includeChunks,
      });

      // Get embeddings
      const embeddings = await ctx.runQuery(internal.ragQueries.getWorkflowEmbeddings, { 
        workflowId,
        limit: userTier === "free" ? 100 : undefined, // Limit for free tier
      });

      // Format data based on export type
      let exportData: any;
      let fileName: string;
      let mimeType: string;

      switch (format) {
        case "json":
          exportData = formatJsonExport(embeddings, includeMetadata, includeChunks);
          fileName = `embeddings_${workflowId}.json`;
          mimeType = "application/json";
          break;
          
        case "jsonl":
          exportData = formatJsonlExport(embeddings, includeMetadata, includeChunks);
          fileName = `embeddings_${workflowId}.jsonl`;
          mimeType = "application/x-ndjson";
          break;
          
        case "csv":
          exportData = formatCsvExport(embeddings, includeMetadata, includeChunks);
          fileName = `embeddings_${workflowId}.csv`;
          mimeType = "text/csv";
          break;
          
        case "pinecone":
          exportData = formatPineconeExport(embeddings, includeMetadata);
          fileName = `embeddings_${workflowId}_pinecone.json`;
          mimeType = "application/json";
          break;
          
        case "weaviate":
          exportData = formatWeaviateExport(embeddings, includeMetadata);
          fileName = `embeddings_${workflowId}_weaviate.json`;
          mimeType = "application/json";
          break;
          
        default:
          throw new Error(`Unsupported export format: ${format}`);
      }

      // Store export data (in production, this would upload to cloud storage)
      const fileSize = new Blob([exportData]).size;
      
      // Update export job
      await ctx.runMutation(internal.ragMutations.updateExportJob, {
        exportId,
        status: "completed",
        fileUrl: `/exports/${exportId}/${fileName}`,
        fileSize,
        recordCount: embeddings.length,
      });

      return {
        success: true,
        exportId,
        fileName,
        fileSize,
        recordCount: embeddings.length,
        downloadUrl: `/api/rag/download/${exportId}`,
      };

    } catch (error) {
      throw error;
    }
  },
});

// Format exports
function formatJsonExport(embeddings: any[], includeMetadata: boolean, includeChunks: boolean): string {
  const data = embeddings.map(emb => {
    const record: any = {
      id: emb.embeddingId,
      embedding: emb.embedding,
    };
    
    if (includeChunks) {
      record.text = emb.chunkText;
    }
    
    if (includeMetadata) {
      record.metadata = {
        sourceId: emb.sourceId,
        chunkIndex: emb.chunkIndex,
        model: emb.embeddingModel,
        dimensions: emb.dimensions,
      };
    }
    
    return record;
  });
  
  return JSON.stringify(data, null, 2);
}

function formatJsonlExport(embeddings: any[], includeMetadata: boolean, includeChunks: boolean): string {
  return embeddings.map(emb => {
    const record: any = {
      id: emb.embeddingId,
      embedding: emb.embedding,
    };
    
    if (includeChunks) {
      record.text = emb.chunkText;
    }
    
    if (includeMetadata) {
      record.metadata = {
        sourceId: emb.sourceId,
        chunkIndex: emb.chunkIndex,
        model: emb.embeddingModel,
        dimensions: emb.dimensions,
      };
    }
    
    return JSON.stringify(record);
  }).join('\n');
}

function formatCsvExport(embeddings: any[], includeMetadata: boolean, includeChunks: boolean): string {
  const headers = ["id", "embedding"];
  if (includeChunks) headers.push("text");
  if (includeMetadata) headers.push("source_id", "chunk_index", "model", "dimensions");
  
  const rows = [headers.join(",")];
  
  embeddings.forEach(emb => {
    const row = [
      emb.embeddingId,
      `"[${emb.embedding.join(",")}]"`,
    ];
    
    if (includeChunks) {
      row.push(`"${emb.chunkText.replace(/"/g, '""')}"`);
    }
    
    if (includeMetadata) {
      row.push(emb.sourceId, emb.chunkIndex.toString(), emb.embeddingModel, emb.dimensions.toString());
    }
    
    rows.push(row.join(","));
  });
  
  return rows.join("\n");
}

function formatPineconeExport(embeddings: any[], includeMetadata: boolean): string {
  const vectors = embeddings.map(emb => ({
    id: emb.embeddingId,
    values: emb.embedding,
    metadata: includeMetadata ? {
      text: emb.chunkText,
      source_id: emb.sourceId,
      chunk_index: emb.chunkIndex,
    } : undefined,
  }));
  
  return JSON.stringify({ vectors }, null, 2);
}

function formatWeaviateExport(embeddings: any[], includeMetadata: boolean): string {
  const objects = embeddings.map(emb => ({
    class: "Document",
    id: emb.embeddingId,
    vector: emb.embedding,
    properties: {
      text: emb.chunkText,
      sourceId: emb.sourceId,
      chunkIndex: emb.chunkIndex,
    },
  }));
  
  return JSON.stringify({ objects }, null, 2);
}

// Fetch channel videos for social media platforms
export const fetchChannelVideos = action({
  args: {
    url: v.string(),
    platform: v.union(v.literal("youtube"), v.literal("tiktok"), v.literal("twitch")),
    maxVideos: v.optional(v.number()),
  },
  handler: async (ctx, { url, platform, maxVideos = 50 }) => {
    try {
      const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
      const API_KEY = process.env.NEXT_PUBLIC_API_KEY;

      let endpoint = "";
      let requestBody: any = {
        max_videos: maxVideos,
        job_id: `rag_videos_${Date.now()}`,
        user_id: "rag_user",
      };

      switch (platform) {
        case "youtube":
          endpoint = `${BACKEND_URL}/api/public/youtube/channel-videos`;
          if (url.includes("@") || url.includes("/c/") || url.includes("/channel/")) {
            requestBody.channel_url = url;
          } else {
            requestBody.video_url = url;
          }
          break;
        case "tiktok":
          endpoint = `${BACKEND_URL}/api/public/tiktok/creator-videos`;
          if (url.startsWith("@")) {
            requestBody.creator_username = url;
          } else {
            requestBody.url = url;
          }
          break;
        case "twitch":
          endpoint = `${BACKEND_URL}/api/public/twitch/channel-videos`;
          if (url.includes("twitch.tv/")) {
            const channelMatch = url.match(/twitch\.tv\/([^\/\?]+)/);
            if (channelMatch) {
              requestBody.channel_name = channelMatch[1];
            } else {
              requestBody.channel_name = url;
            }
          } else {
            requestBody.channel_name = url;
          }
          break;
      }

      const response = await fetch(endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${API_KEY}`,
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch ${platform} videos: ${response.statusText}`);
      }

      const result = await response.json();
      
      return {
        videos: result.videos || [],
        channelInfo: result.channel_info || {},
        success: true,
      };

    } catch (error) {
      console.error(`Error fetching ${platform} videos:`, error);
      throw error;
    }
  },
});

// Cleanup expired RAG data
export const cleanupExpiredRAGData = action({
  args: {},
  handler: async (ctx) => {
    const now = new Date().toISOString();
    
    // Get expired workflows
    const expiredWorkflows = await ctx.runQuery(internal.ragQueries.getExpiredWorkflows, { 
      currentTime: now,
    });
    
    let deletedWorkflows = 0;
    let deletedEmbeddings = 0;
    
    for (const workflow of expiredWorkflows) {
      // Delete embeddings
      const embeddingCount = await ctx.runMutation(internal.ragMutations.deleteWorkflowEmbeddings, {
        workflowId: workflow.workflowId,
      });
      
      // Delete sources
      await ctx.runMutation(internal.ragMutations.deleteWorkflowSources, {
        workflowId: workflow.workflowId,
      });
      
      // Delete workflow
      await ctx.runMutation(internal.ragMutations.deleteWorkflow, {
        workflowId: workflow.workflowId,
      });
      
      deletedWorkflows++;
      deletedEmbeddings += embeddingCount;
    }
    
    return {
      deletedWorkflows,
      deletedEmbeddings,
    };
  },
});



================================================
FILE: convex/ragMutations.ts
================================================
import { mutation, internalMutation } from "./_generated/server";
import { v } from "convex/values";

// Create a new RAG workflow
export const createWorkflow = mutation({
  args: {
    name: v.string(),
    description: v.optional(v.string()),
    sourceType: v.union(
      v.literal("youtube"),
      v.literal("tiktok"),
      v.literal("twitch"),
      v.literal("documents"),
      v.literal("urls"),
      v.literal("csv"),
      v.literal("mixed")
    ),
    chunkSize: v.number(),
    overlap: v.number(),
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    const workflowId = `wf_${Date.now()}_${Math.random().toString(36).substring(2)}`;
    
    // Get user tier
    const subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .first();
    
    const userTier = subscription?.tier || "free";
    
    // Calculate expiry for free tier
    let expiresAt = undefined;
    if (userTier === "free") {
      const expiryDate = new Date();
      expiryDate.setDate(expiryDate.getDate() + 7); // 7 days retention
      expiresAt = expiryDate.toISOString();
    }
    
    await ctx.db.insert("ragWorkflows", {
      workflowId,
      userId: args.userId,
      name: args.name,
      description: args.description,
      sourceType: args.sourceType,
      embeddingModel: "jina-clip-v2",
      chunkSize: args.chunkSize,
      overlap: args.overlap,
      status: "pending",
      progress: 0,
      totalSources: 0,
      processedSources: 0,
      totalChunks: 0,
      totalEmbeddings: 0,
      totalTokens: 0,
      indexSize: "0 MB",
      userTier,
      totalFileSize: 0,
      createdAt: new Date().toISOString(),
      expiresAt,
      estimatedCost: 0,
    });
    
    return { workflowId };
  },
});

// Update workflow status (internal)
export const updateWorkflowStatus = internalMutation({
  args: {
    workflowId: v.string(),
    status: v.optional(v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("embedding"),
      v.literal("completed"),
      v.literal("failed"),
      v.literal("expired")
    )),
    progress: v.optional(v.number()),
    currentStage: v.optional(v.string()),
    error: v.optional(v.string()),
    stats: v.optional(v.object({
      totalSources: v.number(),
      processedSources: v.number(),
      totalChunks: v.number(),
      totalEmbeddings: v.number(),
      totalTokens: v.number(),
      indexSize: v.string(),
    })),
  },
  handler: async (ctx, args) => {
    const workflow = await ctx.db
      .query("ragWorkflows")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
      .first();
    
    if (!workflow) {
      throw new Error("Workflow not found");
    }
    
    const updates: any = {};
    
    if (args.status !== undefined) {
      updates.status = args.status;
      
      if (args.status === "processing" && !workflow.startedAt) {
        updates.startedAt = new Date().toISOString();
      } else if (args.status === "completed" || args.status === "failed") {
        updates.completedAt = new Date().toISOString();
      }
    }
    
    if (args.progress !== undefined) {
      updates.progress = args.progress;
    }
    
    if (args.currentStage !== undefined) {
      updates.currentStage = args.currentStage;
    }
    
    if (args.error !== undefined) {
      updates.error = args.error;
    }
    
    if (args.stats !== undefined) {
      updates.totalSources = args.stats.totalSources;
      updates.processedSources = args.stats.processedSources;
      updates.totalChunks = args.stats.totalChunks;
      updates.totalEmbeddings = args.stats.totalEmbeddings;
      updates.totalTokens = args.stats.totalTokens;
      updates.indexSize = args.stats.indexSize;
    }
    
    await ctx.db.patch(workflow._id, updates);
  },
});

// Create a source
export const createSource = internalMutation({
  args: {
    sourceId: v.string(),
    workflowId: v.string(),
    userId: v.string(),
    sourceType: v.union(
      v.literal("youtube_video"),
      v.literal("youtube_channel"),
      v.literal("tiktok_video"),
      v.literal("tiktok_channel"),
      v.literal("twitch_video"),
      v.literal("twitch_channel"),
      v.literal("document"),
      v.literal("url")
    ),
    sourceUrl: v.optional(v.string()),
    fileName: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    metadata: v.optional(v.any()),
  },
  handler: async (ctx, args) => {
    await ctx.db.insert("ragSources", {
      sourceId: args.sourceId,
      workflowId: args.workflowId,
      userId: args.userId,
      sourceType: args.sourceType,
      sourceUrl: args.sourceUrl,
      fileName: args.fileName,
      fileSize: args.fileSize,
      status: "pending",
      chunkCount: 0,
      tokenCount: 0,
      createdAt: new Date().toISOString(),
    });
    
    // Update workflow total file size if applicable
    if (args.fileSize) {
      const workflow = await ctx.db
        .query("ragWorkflows")
        .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
        .first();
      
      if (workflow) {
        await ctx.db.patch(workflow._id, {
          totalFileSize: workflow.totalFileSize + args.fileSize,
        });
      }
    }
  },
});

// Update source content
export const updateSourceContent = internalMutation({
  args: {
    sourceId: v.string(),
    content: v.string(),
    metadata: v.any(),
  },
  handler: async (ctx, args) => {
    const source = await ctx.db
      .query("ragSources")
      .withIndex("by_source", (q) => q.eq("sourceId", args.sourceId))
      .first();
    
    if (!source) {
      throw new Error("Source not found");
    }
    
    await ctx.db.patch(source._id, {
      content: args.content,
      metadata: args.metadata,
      status: "extracting",
      processedAt: new Date().toISOString(),
    });
  },
});

// Update source status
export const updateSourceStatus = internalMutation({
  args: {
    sourceId: v.string(),
    status: v.union(
      v.literal("pending"),
      v.literal("downloading"),
      v.literal("extracting"),
      v.literal("chunking"),
      v.literal("completed"),
      v.literal("failed")
    ),
    error: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const source = await ctx.db
      .query("ragSources")
      .withIndex("by_source", (q) => q.eq("sourceId", args.sourceId))
      .first();
    
    if (!source) {
      throw new Error("Source not found");
    }
    
    const updates: any = {
      status: args.status,
    };
    
    if (args.error) {
      updates.error = args.error;
    }
    
    if (args.status === "completed") {
      updates.processedAt = new Date().toISOString();
    }
    
    await ctx.db.patch(source._id, updates);
  },
});

// Store embedding
export const storeEmbedding = internalMutation({
  args: {
    embeddingId: v.string(),
    workflowId: v.string(),
    sourceId: v.string(),
    userId: v.string(),
    chunkIndex: v.number(),
    chunkText: v.string(),
    chunkTokens: v.number(),
    embedding: v.array(v.float64()),
    embeddingModel: v.string(),
    dimensions: v.number(),
  },
  handler: async (ctx, args) => {
    // Get workflow to check expiry
    const workflow = await ctx.db
      .query("ragWorkflows")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
      .first();
    
    if (!workflow) {
      throw new Error("Workflow not found");
    }
    
    await ctx.db.insert("ragEmbeddings", {
      embeddingId: args.embeddingId,
      workflowId: args.workflowId,
      sourceId: args.sourceId,
      userId: args.userId,
      chunkIndex: args.chunkIndex,
      chunkText: args.chunkText,
      chunkTokens: args.chunkTokens,
      embedding: args.embedding,
      embeddingModel: args.embeddingModel,
      dimensions: args.dimensions,
      createdAt: new Date().toISOString(),
      expiresAt: workflow.expiresAt,
    });
  },
});

// Create export job
export const createExportJob = internalMutation({
  args: {
    exportId: v.string(),
    workflowId: v.string(),
    userId: v.string(),
    format: v.union(
      v.literal("json"),
      v.literal("jsonl"),
      v.literal("csv"),
      v.literal("parquet"),
      v.literal("pinecone"),
      v.literal("weaviate")
    ),
    includeMetadata: v.boolean(),
    includeChunks: v.boolean(),
  },
  handler: async (ctx, args) => {
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + 24); // 24 hour expiry for download
    
    await ctx.db.insert("ragExportJobs", {
      exportId: args.exportId,
      workflowId: args.workflowId,
      userId: args.userId,
      format: args.format,
      includeMetadata: args.includeMetadata,
      includeChunks: args.includeChunks,
      status: "processing",
      progress: 0,
      createdAt: new Date().toISOString(),
      expiresAt: expiresAt.toISOString(),
    });
  },
});

// Update export job
export const updateExportJob = internalMutation({
  args: {
    exportId: v.string(),
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    progress: v.optional(v.number()),
    fileUrl: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    recordCount: v.optional(v.number()),
    error: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const exportJob = await ctx.db
      .query("ragExportJobs")
      .withIndex("by_export", (q) => q.eq("exportId", args.exportId))
      .first();
    
    if (!exportJob) {
      throw new Error("Export job not found");
    }
    
    const updates: any = {
      status: args.status,
    };
    
    if (args.progress !== undefined) updates.progress = args.progress;
    if (args.fileUrl !== undefined) updates.fileUrl = args.fileUrl;
    if (args.fileSize !== undefined) updates.fileSize = args.fileSize;
    if (args.recordCount !== undefined) updates.recordCount = args.recordCount;
    if (args.error !== undefined) updates.error = args.error;
    
    if (args.status === "completed" || args.status === "failed") {
      updates.completedAt = new Date().toISOString();
    }
    
    await ctx.db.patch(exportJob._id, updates);
  },
});

// Delete workflow embeddings
export const deleteWorkflowEmbeddings = internalMutation({
  args: {
    workflowId: v.string(),
  },
  handler: async (ctx, args) => {
    const embeddings = await ctx.db
      .query("ragEmbeddings")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
      .collect();
    
    for (const embedding of embeddings) {
      await ctx.db.delete(embedding._id);
    }
    
    return embeddings.length;
  },
});

// Delete workflow sources
export const deleteWorkflowSources = internalMutation({
  args: {
    workflowId: v.string(),
  },
  handler: async (ctx, args) => {
    const sources = await ctx.db
      .query("ragSources")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
      .collect();
    
    for (const source of sources) {
      await ctx.db.delete(source._id);
    }
    
    return sources.length;
  },
});

// Add source to workflow
export const addSourceToWorkflow = mutation({
  args: {
    workflowId: v.string(),
    source: v.object({
      type: v.union(v.literal("youtube"), v.literal("document"), v.literal("url")),
      value: v.string(),
      metadata: v.optional(v.any()),
    }),
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    // Check workflow ownership
    const workflow = await ctx.db
      .query("ragWorkflows")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
      .first();
    
    if (!workflow || workflow.userId !== args.userId) {
      throw new Error("Workflow not found or unauthorized");
    }
    
    // Check if workflow is in a state that allows adding sources
    if (workflow.status !== "pending" && workflow.status !== "failed") {
      throw new Error("Cannot add sources to a workflow in progress");
    }
    
    // Create source
    const sourceId = `src_${Date.now()}_${Math.random().toString(36).substring(2)}`;
    
    let sourceType: "youtube_video" | "youtube_channel" | "tiktok_video" | "tiktok_channel" | "twitch_video" | "twitch_channel" | "document" | "url";
    if (args.source.type === "youtube") {
      sourceType = args.source.value.includes("/channel/") || args.source.value.includes("/@") 
        ? "youtube_channel" 
        : "youtube_video";
    } else if (args.source.type === "tiktok") {
      sourceType = args.source.value.includes("/@") 
        ? "tiktok_channel" 
        : "tiktok_video";
    } else if (args.source.type === "twitch") {
      sourceType = args.source.value.includes("/videos/") 
        ? "twitch_video" 
        : "twitch_channel";
    } else if (args.source.type === "document") {
      sourceType = "document";
    } else {
      sourceType = "url";
    }
    
    await ctx.db.insert("ragSources", {
      sourceId,
      workflowId: args.workflowId,
      userId: args.userId,
      sourceType,
      sourceUrl: args.source.type !== "document" ? args.source.value : undefined,
      fileName: args.source.type === "document" ? args.source.metadata?.fileName : undefined,
      fileSize: args.source.type === "document" ? args.source.metadata?.fileSize : undefined,
      status: "pending",
      chunkCount: 0,
      tokenCount: 0,
      createdAt: new Date().toISOString(),
    });
    
    // Update workflow source count
    await ctx.db.patch(workflow._id, {
      totalSources: workflow.totalSources + 1,
    });
    
    return { sourceId };
  },
});


================================================
FILE: convex/ragQueries.ts
================================================
import { query, internalQuery } from "./_generated/server";
import { v } from "convex/values";

// Get user workflows
export const getUserWorkflows = query({
  args: {
    userId: v.string(),
    status: v.optional(v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("embedding"),
      v.literal("completed"),
      v.literal("failed"),
      v.literal("expired")
    )),
  },
  handler: async (ctx, args) => {
    let query = ctx.db
      .query("ragWorkflows")
      .withIndex("by_user", (q) => q.eq("userId", args.userId));
    
    const workflows = await query.collect();
    
    // Filter by status if provided
    const filteredWorkflows = args.status 
      ? workflows.filter(w => w.status === args.status)
      : workflows;
    
    // Sort by creation date (newest first)
    return filteredWorkflows.sort((a, b) => 
      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    );
  },
});

// Get workflow details
export const getWorkflow = query({
  args: {
    workflowId: v.string(),
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    const workflow = await ctx.db
      .query("ragWorkflows")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
      .first();
    
    if (!workflow || workflow.userId !== args.userId) {
      throw new Error("Workflow not found or unauthorized");
    }
    
    return workflow;
  },
});

// Get workflow sources
export const getWorkflowSources = query({
  args: {
    workflowId: v.string(),
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    // Verify workflow ownership
    const workflow = await ctx.db
      .query("ragWorkflows")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
      .first();
    
    if (!workflow || workflow.userId !== args.userId) {
      throw new Error("Workflow not found or unauthorized");
    }
    
    const sources = await ctx.db
      .query("ragSources")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
      .collect();
    
    return sources;
  },
});

// Get workflow stats (internal)
export const getWorkflowStats = internalQuery({
  args: {
    workflowId: v.string(),
  },
  handler: async (ctx, args) => {
    const sources = await ctx.db
      .query("ragSources")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
      .collect();
    
    const embeddings = await ctx.db
      .query("ragEmbeddings")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
      .collect();
    
    const totalSources = sources.length;
    const processedSources = sources.filter(s => s.status === "completed").length;
    const totalChunks = embeddings.length;
    const totalEmbeddings = embeddings.length;
    const totalTokens = embeddings.reduce((sum, e) => sum + e.chunkTokens, 0);
    
    // Calculate index size (approximate)
    const embeddingSize = embeddings.length > 0 ? embeddings[0].dimensions * 4 : 0; // 4 bytes per float
    const indexSizeBytes = totalEmbeddings * embeddingSize;
    
    return {
      totalSources,
      processedSources,
      totalChunks,
      totalEmbeddings,
      totalTokens,
      indexSizeBytes,
    };
  },
});

// Get workflow embeddings
export const getWorkflowEmbeddings = internalQuery({
  args: {
    workflowId: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    let query = ctx.db
      .query("ragEmbeddings")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId));
    
    const embeddings = await query.collect();
    
    // Apply limit if specified
    if (args.limit && args.limit > 0) {
      return embeddings.slice(0, args.limit);
    }
    
    return embeddings;
  },
});

// Get user tier (internal)
export const getUserTier = internalQuery({
  args: {
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    const subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .first();
    
    return subscription?.tier || "free";
  },
});

// Get expired workflows (internal)
export const getExpiredWorkflows = internalQuery({
  args: {
    currentTime: v.string(),
  },
  handler: async (ctx, args) => {
    const workflows = await ctx.db
      .query("ragWorkflows")
      .withIndex("by_expiry")
      .collect();
    
    // Filter workflows that have expired
    const expiredWorkflows = workflows.filter(w => 
      w.expiresAt && new Date(w.expiresAt) < new Date(args.currentTime)
    );
    
    return expiredWorkflows;
  },
});

// Check workflow file size limit
export const checkWorkflowSizeLimit = query({
  args: {
    userId: v.string(),
    additionalSize: v.number(),
  },
  handler: async (ctx, args) => {
    const subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .first();
    
    const userTier = subscription?.tier || "free";
    
    // Get tier limits
    const limits = {
      free: 10 * 1024 * 1024, // 10MB
      premium: 100 * 1024 * 1024, // 100MB
      enterprise: -1, // unlimited
    };
    
    const maxSize = limits[userTier];
    
    // For enterprise, always allow
    if (maxSize === -1) {
      return { allowed: true, userTier };
    }
    
    // Get current total size across all workflows
    const workflows = await ctx.db
      .query("ragWorkflows")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .collect();
    
    const currentTotalSize = workflows.reduce((sum, w) => sum + w.totalFileSize, 0);
    const newTotalSize = currentTotalSize + args.additionalSize;
    
    if (newTotalSize > maxSize) {
      return {
        allowed: false,
        error: `File size limit exceeded. ${userTier} tier allows ${maxSize / 1024 / 1024}MB total.`,
        currentSize: currentTotalSize,
        maxSize,
        userTier,
      };
    }
    
    return {
      allowed: true,
      currentSize: currentTotalSize,
      maxSize,
      remainingSize: maxSize - currentTotalSize,
      userTier,
    };
  },
});

// Search embeddings (for testing/demo)
export const searchEmbeddings = query({
  args: {
    workflowId: v.string(),
    userId: v.string(),
    query: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    // Verify workflow ownership
    const workflow = await ctx.db
      .query("ragWorkflows")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
      .first();
    
    if (!workflow || workflow.userId !== args.userId) {
      throw new Error("Workflow not found or unauthorized");
    }
    
    // Get embeddings
    const embeddings = await ctx.db
      .query("ragEmbeddings")
      .withIndex("by_workflow", (q) => q.eq("workflowId", args.workflowId))
      .collect();
    
    // In a real implementation, we would:
    // 1. Generate embedding for the query using Jina
    // 2. Calculate cosine similarity with all embeddings
    // 3. Return top k results
    
    // For now, return a simple text match
    const results = embeddings
      .filter(e => e.chunkText.toLowerCase().includes(args.query.toLowerCase()))
      .slice(0, args.limit || 10)
      .map(e => ({
        embeddingId: e.embeddingId,
        chunkText: e.chunkText,
        sourceId: e.sourceId,
        score: 0.9, // Mock similarity score
      }));
    
    return results;
  },
});

// Get export job status
export const getExportJob = query({
  args: {
    exportId: v.string(),
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    const exportJob = await ctx.db
      .query("ragExportJobs")
      .withIndex("by_export", (q) => q.eq("exportId", args.exportId))
      .first();
    
    if (!exportJob || exportJob.userId !== args.userId) {
      throw new Error("Export job not found or unauthorized");
    }
    
    return exportJob;
  },
});

// Get user's recent exports
export const getUserExports = query({
  args: {
    userId: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const exports = await ctx.db
      .query("ragExportJobs")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .collect();
    
    // Sort by creation date (newest first) and apply limit
    return exports
      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
      .slice(0, args.limit || 10);
  },
});

// Get workflow processing statistics
export const getWorkflowProcessingStats = query({
  args: {
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    const workflows = await ctx.db
      .query("ragWorkflows")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .collect();
    
    const stats = {
      total: workflows.length,
      pending: workflows.filter(w => w.status === "pending").length,
      processing: workflows.filter(w => w.status === "processing" || w.status === "embedding").length,
      completed: workflows.filter(w => w.status === "completed").length,
      failed: workflows.filter(w => w.status === "failed").length,
      expired: workflows.filter(w => w.status === "expired").length,
      totalEmbeddings: 0,
      totalStorage: 0,
    };
    
    // Calculate total embeddings and storage
    for (const workflow of workflows) {
      stats.totalEmbeddings += workflow.totalEmbeddings;
      stats.totalStorage += workflow.totalFileSize;
    }
    
    return stats;
  },
});


================================================
FILE: convex/ragSocialActions.ts
================================================
import { action } from "./_generated/server";
import { v } from "convex/values";
import { internal } from "./_generated/api";

// Backend API configuration
const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
const API_KEY = process.env.NEXT_PUBLIC_API_KEY;

// Process social media content using yt-dlp (aligned with bulk/cloning flows)
export const processSocialMediaContent = action({
  args: {
    workflowId: v.string(),
    userId: v.string(),
    sources: v.array(v.object({
      type: v.union(v.literal("youtube"), v.literal("tiktok"), v.literal("twitch")),
      value: v.string(), // URL or username
      metadata: v.optional(v.any()),
    })),
    config: v.object({
      chunkSize: v.number(),
      overlap: v.number(),
      embeddingModel: v.string(),
    }),
  },
  handler: async (ctx, { workflowId, userId, sources, config }) => {
    try {
      // Update workflow status
      await ctx.runMutation(internal.ragMutations.updateWorkflowStatus, {
        workflowId,
        status: "processing",
        progress: 10,
        currentStage: "Initializing social media processing...",
      });

      let processedSources = 0;
      const totalSources = sources.length;

      for (const source of sources) {
        try {
          const sourceId = `src_${Date.now()}_${Math.random().toString(36).substring(2)}`;
          
          // Update progress
          const progress = 10 + (processedSources / totalSources) * 30;
          await ctx.runMutation(internal.ragMutations.updateWorkflowStatus, {
            workflowId,
            status: "processing",
            progress,
            currentStage: `Processing ${source.type} content...`,
          });

          // Extract content based on platform using yt-dlp
          let content = "";
          let metadata = {};

          if (source.type === "youtube") {
            const result = await fetchYouTubeTranscriptWithYtdlp(source.value);
            content = result.transcript;
            metadata = result.metadata;
          } else if (source.type === "tiktok") {
            const result = await fetchTikTokContentWithYtdlp(source.value);
            content = result.content;
            metadata = result.metadata;
          } else if (source.type === "twitch") {
            const result = await fetchTwitchContentWithYtdlp(source.value);
            content = result.content;
            metadata = result.metadata;
          }

          // Create source record
          await ctx.runMutation(internal.ragMutations.createSource, {
            sourceId,
            workflowId,
            userId,
            sourceType: `${source.type}_video`,
            sourceUrl: source.value,
            metadata,
          });

          // Update source with content
          await ctx.runMutation(internal.ragMutations.updateSourceContent, {
            sourceId,
            content,
            metadata,
          });

          // Chunk and process
          const chunks = chunkText(content, config.chunkSize, config.overlap);
          
          // Generate embeddings
          const embeddings = await generateEmbeddings(chunks, config.embeddingModel);

          // Store embeddings
          for (let i = 0; i < chunks.length; i++) {
            const embeddingId = `emb_${Date.now()}_${Math.random().toString(36).substring(2)}`;
            await ctx.runMutation(internal.ragMutations.storeEmbedding, {
              embeddingId,
              workflowId,
              sourceId,
              userId,
              chunkIndex: i,
              chunkText: chunks[i],
              chunkTokens: chunks[i].split(' ').length,
              embedding: embeddings[i],
              embeddingModel: config.embeddingModel,
              dimensions: embeddings[i].length,
            });
          }

          processedSources++;

        } catch (error) {
          console.error(`Error processing ${source.type} source:`, error);
          // Continue with next source
        }
      }

      // Complete workflow
      await ctx.runMutation(internal.ragMutations.updateWorkflowStatus, {
        workflowId,
        status: "completed",
        progress: 100,
        currentStage: "Processing completed!",
      });

      return {
        success: true,
        workflowId,
        processedSources,
        totalSources,
      };

    } catch (error) {
      await ctx.runMutation(internal.ragMutations.updateWorkflowStatus, {
        workflowId,
        status: "failed",
        error: error.message || "Social media processing failed",
      });
      throw error;
    }
  },
});

// Fetch YouTube transcript using yt-dlp (aligned with bulk/cloning)
async function fetchYouTubeTranscriptWithYtdlp(url: string): Promise<{ transcript: string; metadata: any }> {
  const response = await fetch(`${BACKEND_URL}/api/public/youtube/transcript`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${API_KEY}`,
    },
    body: JSON.stringify({
      youtube_url: url,
      job_id: `rag_${Date.now()}`,
      user_id: "rag_user",
    }),
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch YouTube transcript: ${response.statusText}`);
  }

  const result = await response.json();
  return {
    transcript: result.transcript,
    metadata: {
      title: result.metadata?.title,
      author: result.metadata?.author,
      duration: result.metadata?.duration,
      url,
    },
  };
}

// Fetch TikTok content using yt-dlp (aligned with bulk/cloning)
async function fetchTikTokContentWithYtdlp(url: string): Promise<{ content: string; metadata: any }> {
  const response = await fetch(`${BACKEND_URL}/api/public/tiktok/content`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${API_KEY}`,
    },
    body: JSON.stringify({
      url,
      job_id: `rag_${Date.now()}`,
      user_id: "rag_user",
    }),
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch TikTok content: ${response.statusText}`);
  }

  const result = await response.json();
  return {
    content: result.content,
    metadata: {
      title: result.metadata?.title,
      author: result.metadata?.author,
      platform: "tiktok",
      url,
    },
  };
}

// Fetch Twitch content using yt-dlp (aligned with bulk/cloning)
async function fetchTwitchContentWithYtdlp(url: string): Promise<{ content: string; metadata: any }> {
  const response = await fetch(`${BACKEND_URL}/api/public/twitch/content`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${API_KEY}`,
    },
    body: JSON.stringify({
      url,
      job_id: `rag_${Date.now()}`,
      user_id: "rag_user",
    }),
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch Twitch content: ${response.statusText}`);
  }

  const result = await response.json();
  return {
    content: result.content,
    metadata: {
      title: result.metadata?.title,
      author: result.metadata?.author,
      platform: "twitch",
      url,
    },
  };
}

// Chunk text with overlap
function chunkText(text: string, chunkSize: number, overlap: number): string[] {
  const words = text.split(/\s+/);
  const chunks: string[] = [];
  
  for (let i = 0; i < words.length; i += chunkSize - overlap) {
    const chunk = words.slice(i, i + chunkSize).join(' ');
    if (chunk.trim()) {
      chunks.push(chunk.trim());
    }
  }
  
  return chunks;
}

// Generate embeddings using Jina AI
async function generateEmbeddings(texts: string[], model: string = "jina-clip-v2"): Promise<number[][]> {
  const JINA_API_KEY = process.env.JINA_API_KEY;
  const JINA_EMBEDDING_URL = "https://api.jina.ai/v1/embeddings";

  if (!JINA_API_KEY) {
    throw new Error("Jina API key not configured");
  }

  const input = texts.map(text => ({ text }));

  const response = await fetch(JINA_EMBEDDING_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${JINA_API_KEY}`,
    },
    body: JSON.stringify({
      model,
      input,
      encoding_type: "float",
      dimensions: 1024,
      task: "text-matching",
      normalize: true,
    }),
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Jina API error: ${error}`);
  }

  const result = await response.json();
  return result.data.map((item: any) => item.embedding);
}


================================================
FILE: convex/rateLimitHelpers.ts
================================================
import { RateLimiter } from "@convex-dev/rate-limiter";
import { components } from "./_generated/api";
import { mutation, query } from "./_generated/server";
import { v } from "convex/values";

// Time constants (in milliseconds)
const HOUR = 60 * 60 * 1000; // 1 hour
const DAY = 24 * 60 * 60 * 1000; // 24 hours

// Initialize rate limiter
export const rateLimiter = new RateLimiter(components.rateLimiter, {
  // Lead search limits
  leadSearchFree: { kind: "token bucket", rate: 100, period: DAY, capacity: 100 },
  leadSearchPremium: { kind: "token bucket", rate: 500, period: DAY, capacity: 100 },
  leadSearchEnterprise: { kind: "token bucket", rate: 1000, period: DAY, capacity: 200 },
  
  // Lead export limits
  leadExportFree: { kind: "token bucket", rate: 10, period: DAY, capacity: 10 },
  leadExportPremium: { kind: "token bucket", rate: 50, period: DAY, capacity: 20 },
  leadExportEnterprise: { kind: "token bucket", rate: 200, period: DAY, capacity: 50 },
  
  // RAG embedding limits
  ragEmbeddingsFree: { kind: "token bucket", rate: 100, period: DAY, capacity: 100 },
  ragEmbeddingsPremium: { kind: "token bucket", rate: 1000, period: DAY, capacity: 200 },
  ragEmbeddingsEnterprise: { kind: "token bucket", rate: 10000, period: DAY, capacity: 1000 },
  
  // RAG workflow limits
  ragWorkflowsFree: { kind: "token bucket", rate: 3, period: DAY, capacity: 3 },
  ragWorkflowsPremium: { kind: "token bucket", rate: 10, period: DAY, capacity: 5 },
  ragWorkflowsEnterprise: { kind: "token bucket", rate: 100, period: DAY, capacity: 20 },
  
  // API request limits (general)
  apiRequestsFree: { kind: "token bucket", rate: 1000, period: HOUR, capacity: 100 },
  apiRequestsPremium: { kind: "token bucket", rate: 5000, period: HOUR, capacity: 500 },
  apiRequestsEnterprise: { kind: "token bucket", rate: 10000, period: HOUR, capacity: 1000 },
  
  // Audio transcription limits
  audioTranscriptionsFree: { kind: "token bucket", rate: 10, period: HOUR, capacity: 10 },
  audioTranscriptionsPremium: { kind: "token bucket", rate: 50, period: HOUR, capacity: 20 },
  audioTranscriptionsEnterprise: { kind: "token bucket", rate: 200, period: HOUR, capacity: 50 },
});

// Default subscription tiers
export const SUBSCRIPTION_TIERS = {
  free: {
    searchesPerDay: 100,
    leadsPerSearch: 100,
    totalLeadsPerMonth: 10000,
    ragWorkflowsPerDay: 3,
    ragEmbeddingsPerDay: 100,
    ragMaxFileSize: 10 * 1024 * 1024, // 10MB
    ragDataRetention: 7, // days
    audioTranscriptionsPerHour: 10,
    audioMaxFileSize: 25 * 1024 * 1024, // 25MB (OpenAI limit)
    audioDataRetention: 7, // days
    features: ["basic_search", "web_sources", "rag_json_export", "audio_transcription"],
  },
  premium: {
    searchesPerDay: 500,
    leadsPerSearch: 1000,
    totalLeadsPerMonth: 500000,
    ragWorkflowsPerDay: 10,
    ragEmbeddingsPerDay: 1000,
    ragMaxFileSize: 100 * 1024 * 1024, // 100MB
    ragDataRetention: 30, // days
    audioTranscriptionsPerHour: 50,
    audioMaxFileSize: 25 * 1024 * 1024, // 25MB (OpenAI limit)
    audioDataRetention: 30, // days
    features: ["advanced_search", "all_sources", "email_verification", "export", "rag_csv_export", "audio_transcription"],
  },
  enterprise: {
    searchesPerDay: -1, // unlimited
    leadsPerSearch: -1, // unlimited
    totalLeadsPerMonth: -1, // unlimited
    ragWorkflowsPerDay: -1, // unlimited
    ragEmbeddingsPerDay: -1, // unlimited
    ragMaxFileSize: -1, // unlimited
    ragDataRetention: -1, // permanent
    audioTranscriptionsPerHour: -1, // unlimited
    audioMaxFileSize: 25 * 1024 * 1024, // 25MB (OpenAI limit)
    audioDataRetention: -1, // permanent
    features: ["unlimited_search", "all_sources", "priority_support", "api_access", "rag_all_exports", "audio_transcription"],
  },
} as const;

// Get or create user subscription
export const getUserSubscription = mutation({
  args: { userId: v.string() },
  handler: async (ctx, { userId }) => {
    let subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (!subscription) {
      // Create default free subscription
      const now = new Date().toISOString();
      subscription = await ctx.db.insert("userSubscriptions", {
        userId,
        tier: "free",
        searchesPerDay: SUBSCRIPTION_TIERS.free.searchesPerDay,
        leadsPerSearch: SUBSCRIPTION_TIERS.free.leadsPerSearch,
        totalLeadsPerMonth: SUBSCRIPTION_TIERS.free.totalLeadsPerMonth,
        searchesToday: 0,
        leadsThisMonth: 0,
        lastResetDate: now,
        status: "active",
        createdAt: now,
        updatedAt: now,
      });

      return await ctx.db.get(subscription);
    }

    return subscription;
  },
});

// Check rate limits for a feature
export async function checkRateLimit(
  ctx: any,
  userId: string,
  feature: "leadSearch" | "leadExport" | "apiRequests" | "ragEmbeddings" | "ragWorkflows",
  userTier: "free" | "premium" | "enterprise"
) {
  const rateLimitKey = `${feature}${userTier.charAt(0).toUpperCase() + userTier.slice(1)}`;
  
  try {
    await rateLimiter.limit(ctx, rateLimitKey as any, {
      key: userId,
      throws: true,
    });
    return { allowed: true };
  } catch (error) {
    return {
      allowed: false,
      error: `Rate limit exceeded for ${feature}. Please upgrade your plan or try again later.`,
    };
  }
}

// Check if user has reached their subscription limits
export const checkSubscriptionLimits = query({
  args: {
    userId: v.string(),
    feature: v.union(v.literal("search"), v.literal("export")),
    additionalLeads: v.optional(v.number()),
  },
  handler: async (ctx, { userId, feature, additionalLeads = 0 }) => {
    const subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (!subscription) {
      return { allowed: false, error: "No subscription found" };
    }

    const now = new Date();
    const today = now.toISOString().split('T')[0];
    const lastReset = new Date(subscription.lastResetDate);
    const lastResetDate = lastReset.toISOString().split('T')[0];

    // Reset daily counters if it's a new day
    if (today !== lastResetDate) {
      await ctx.db.patch(subscription._id, {
        searchesToday: 0,
        lastResetDate: now.toISOString(),
        updatedAt: now.toISOString(),
      });
      subscription.searchesToday = 0;
    }

    // Reset monthly counters if it's a new month
    const currentMonth = now.getMonth();
    const lastResetMonth = lastReset.getMonth();
    if (currentMonth !== lastResetMonth) {
      await ctx.db.patch(subscription._id, {
        leadsThisMonth: 0,
        updatedAt: now.toISOString(),
      });
      subscription.leadsThisMonth = 0;
    }

    // Check limits based on feature
    if (feature === "search") {
      if (subscription.tier !== "enterprise" && subscription.searchesToday >= subscription.searchesPerDay) {
        return {
          allowed: false,
          error: `Daily search limit reached (${subscription.searchesPerDay}). Upgrade for more searches.`,
          limit: subscription.searchesPerDay,
          used: subscription.searchesToday,
        };
      }
    }

    // Check monthly lead limits
    const potentialLeads = subscription.leadsThisMonth + additionalLeads;
    if (subscription.tier !== "enterprise" && potentialLeads > subscription.totalLeadsPerMonth) {
      return {
        allowed: false,
        error: `Monthly lead limit would be exceeded. Upgrade for more leads.`,
        limit: subscription.totalLeadsPerMonth,
        used: subscription.leadsThisMonth,
        wouldUse: potentialLeads,
      };
    }

    return { 
      allowed: true,
      subscription,
      limits: {
        searchesPerDay: subscription.searchesPerDay,
        searchesToday: subscription.searchesToday,
        leadsPerSearch: subscription.leadsPerSearch,
        totalLeadsPerMonth: subscription.totalLeadsPerMonth,
        leadsThisMonth: subscription.leadsThisMonth,
      }
    };
  },
});

// Increment usage counters
export const incrementUsage = mutation({
  args: {
    userId: v.string(),
    feature: v.union(v.literal("search"), v.literal("export")),
    leadsCount: v.optional(v.number()),
  },
  handler: async (ctx, { userId, feature, leadsCount = 0 }) => {
    const subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (!subscription) {
      throw new Error("No subscription found");
    }

    const updates: any = {
      updatedAt: new Date().toISOString(),
    };

    if (feature === "search") {
      updates.searchesToday = subscription.searchesToday + 1;
    }

    if (leadsCount > 0) {
      updates.leadsThisMonth = subscription.leadsThisMonth + leadsCount;
    }

    await ctx.db.patch(subscription._id, updates);
    return await ctx.db.get(subscription._id);
  },
});

// Get user's current usage stats
export const getUserUsageStats = query({
  args: { userId: v.string() },
  handler: async (ctx, { userId }) => {
    const subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (!subscription) {
      return null;
    }

    // Get recent searches
    const recentSearches = await ctx.db
      .query("leadSearches")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .order("desc")
      .take(10);

    return {
      subscription,
      usage: {
        searchesToday: subscription.searchesToday,
        searchesRemaining: subscription.tier === "enterprise" ? -1 : 
          Math.max(0, subscription.searchesPerDay - subscription.searchesToday),
        leadsThisMonth: subscription.leadsThisMonth,
        leadsRemaining: subscription.tier === "enterprise" ? -1 :
          Math.max(0, subscription.totalLeadsPerMonth - subscription.leadsThisMonth),
      },
      recentSearches: recentSearches.length,
      features: SUBSCRIPTION_TIERS[subscription.tier].features,
    };
  },
});


================================================
FILE: convex/scheduledFunctions.ts
================================================
import { cronJobs } from "convex/server";
import { internalMutation } from "./_generated/server";

// Cleanup expired free tier search data
export const cleanupExpiredSearches = internalMutation({
  args: {},
  handler: async (ctx) => {
    const now = new Date().toISOString();
    
    // Find expired searches
    const expiredSearches = await ctx.db
      .query("leadSearches")
      .withIndex("by_expiry")
      .filter((q) => q.and(
        q.neq(q.field("expiresAt"), undefined),
        q.lt(q.field("expiresAt"), now)
      ))
      .collect();

    let deletedSearches = 0;
    let deletedResults = 0;

    for (const search of expiredSearches) {
      // Delete all lead results for this search
      const results = await ctx.db
        .query("leadSearchResults")
        .withIndex("by_search", (q) => q.eq("searchId", search.searchId))
        .collect();

      for (const result of results) {
        await ctx.db.delete(result._id);
        deletedResults++;
      }

      // Delete the search itself
      await ctx.db.delete(search._id);
      deletedSearches++;
    }

    console.log(`Cleaned up ${deletedSearches} expired searches and ${deletedResults} lead results`);

    return {
      deletedSearches,
      deletedResults,
      timestamp: now,
    };
  },
});

// Reset daily usage counters for all users
export const resetDailyUsage = internalMutation({
  args: {},
  handler: async (ctx) => {
    const allSubscriptions = await ctx.db
      .query("userSubscriptions")
      .collect();

    const now = new Date();
    const today = now.toISOString().split('T')[0];

    let resetCount = 0;

    for (const subscription of allSubscriptions) {
      const lastReset = new Date(subscription.lastResetDate);
      const lastResetDate = lastReset.toISOString().split('T')[0];

      if (today !== lastResetDate) {
        await ctx.db.patch(subscription._id, {
          searchesToday: 0,
          lastResetDate: now.toISOString(),
          updatedAt: now.toISOString(),
        });
        resetCount++;
      }
    }

    console.log(`Reset daily usage for ${resetCount} users`);

    return {
      resetCount,
      timestamp: now.toISOString(),
    };
  },
});

// Reset monthly usage counters on the 1st of each month
export const resetMonthlyUsage = internalMutation({
  args: {},
  handler: async (ctx) => {
    const now = new Date();
    const currentDay = now.getDate();
    
    // Only run on the 1st of the month
    if (currentDay !== 1) {
      return { resetCount: 0, timestamp: now.toISOString() };
    }

    const allSubscriptions = await ctx.db
      .query("userSubscriptions")
      .collect();

    let resetCount = 0;

    for (const subscription of allSubscriptions) {
      await ctx.db.patch(subscription._id, {
        leadsThisMonth: 0,
        updatedAt: now.toISOString(),
      });
      resetCount++;
    }

    console.log(`Reset monthly usage for ${resetCount} users`);

    return {
      resetCount,
      timestamp: now.toISOString(),
    };
  },
});

// Configure cron jobs
const crons = cronJobs();

// Run cleanup every day at 2 AM UTC
crons.daily(
  "cleanup expired searches",
  { hourUTC: 2, minuteUTC: 0 },
  "scheduledFunctions:cleanupExpiredSearches"
);

// Reset daily usage at midnight UTC
crons.daily(
  "reset daily usage",
  { hourUTC: 0, minuteUTC: 0 },
  "scheduledFunctions:resetDailyUsage"
);

// Check for monthly reset every day (will only actually reset on the 1st)
crons.daily(
  "reset monthly usage",
  { hourUTC: 0, minuteUTC: 5 },
  "scheduledFunctions:resetMonthlyUsage"
);

export default crons;


================================================
FILE: convex/schema.ts
================================================
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  // Voice Agents table
  voiceAgents: defineTable({
    // Core identification
    name: v.string(),
    description: v.string(),
    userId: v.string(), // We'll use string for now, can be changed to v.id("users") later
    
    // Purpose configuration
    purpose: v.union(
      v.literal("sales"),
      v.literal("support"),
      v.literal("appointment"),
      v.literal("technical"),
      v.literal("custom")
    ),
    customPurpose: v.optional(v.string()),
    
    // Voice configuration
    voiceProvider: v.union(
      v.literal("elevenlabs"),
      v.literal("chatterbox")
    ),
    voiceId: v.string(),
    voiceStyle: v.union(
      v.literal("professional"),
      v.literal("friendly"),
      v.literal("energetic"),
      v.literal("calm"),
      v.literal("custom")
    ),
    speechRate: v.number(), // 0.5 to 2.0
    pitch: v.number(), // 0.5 to 2.0
    
    // Language & behavior
    language: v.string(), // ISO language code (e.g., "en-US")
    responseDelay: v.number(), // milliseconds
    interruptionSensitivity: v.number(), // 0 to 1
    silenceThreshold: v.number(), // milliseconds
    maxCallDuration: v.number(), // minutes
    
    // Advanced settings
    systemPrompt: v.string(),
    temperature: v.number(), // 0 to 2
    maxTokens: v.number(), // 50 to 2000
    enableTranscription: v.boolean(),
    enableAnalytics: v.boolean(),
    webhookUrl: v.optional(v.string()),
    
    // Status and metadata
    status: v.union(
      v.literal("active"),
      v.literal("idle"),
      v.literal("offline"),
      v.literal("configuring"),
      v.literal("error")
    ),
    
    // Timestamps
    createdAt: v.string(), // ISO date string
    updatedAt: v.string(), // ISO date string
    lastActiveAt: v.optional(v.string()), // ISO date string
    
    // Performance metrics (updated separately)
    totalCalls: v.number(),
    successRate: v.number(), // percentage
    avgCallDuration: v.string(), // format: "MM:SS"
    satisfactionRating: v.number(), // 0 to 5
  })
    .index("by_user", ["userId"])
    .index("by_status", ["status"])
    .index("by_purpose", ["purpose"])
    .index("by_created", ["createdAt"])
    .index("by_user_status", ["userId", "status"]),

  // Call Analytics table
  callAnalytics: defineTable({
    // Call Information
    callId: v.string(),
    agentName: v.string(),
    agentId: v.optional(v.id("voiceAgents")),
    customerName: v.string(),
    customerPhone: v.string(),
    status: v.union(
      v.literal("COMPLETED"),
      v.literal("FAILED"),
      v.literal("TRANSFERRED"),
      v.literal("ABANDONED")
    ),
    
    // Timing Information
    startTime: v.string(), // ISO timestamp
    endTime: v.string(), // ISO timestamp
    duration: v.string(), // Format: "4m 01s"
    queueTime: v.string(), // Format: "12s"
    holdTime: v.string(), // Format: "0s"
    
    // Call Metrics
    resolution: v.union(
      v.literal("RESOLVED"),
      v.literal("UNRESOLVED"),
      v.literal("ESCALATED"),
      v.literal("TRANSFERRED")
    ),
    hasTransfer: v.boolean(),
    sentiment: v.union(
      v.literal("POSITIVE"),
      v.literal("NEGATIVE"),
      v.literal("NEUTRAL"),
      v.literal("MIXED")
    ),
    qualityScore: v.string(), // Format: "8.5/10"
    
    // Campaign Information
    campaignId: v.optional(v.id("campaigns")),
    campaignName: v.string(),
    
    // Metadata
    createdAt: v.number(), // Unix timestamp
    updatedAt: v.number(), // Unix timestamp
  })
    .index("by_callId", ["callId"])
    .index("by_agent", ["agentName"])
    .index("by_agentId", ["agentId"])
    .index("by_customer", ["customerPhone"])
    .index("by_campaign", ["campaignId"])
    .index("by_date", ["startTime"]),

  // Agent Call Logs
  agentCallLogs: defineTable({
    agentId: v.id("voiceAgents"),
    callId: v.string(),
    
    // Call details
    phoneNumber: v.string(),
    direction: v.union(v.literal("inbound"), v.literal("outbound")),
    startTime: v.string(),
    endTime: v.optional(v.string()),
    duration: v.optional(v.number()), // seconds
    
    // Call outcome
    status: v.union(
      v.literal("completed"),
      v.literal("failed"),
      v.literal("no_answer"),
      v.literal("busy"),
      v.literal("cancelled")
    ),
    disposition: v.optional(v.string()),
    
    // Performance metrics
    sentimentScore: v.optional(v.number()),
    satisfactionRating: v.optional(v.number()),
    
    // Transcript and recording
    recordingUrl: v.optional(v.string()),
    
    // Webhook data
    webhookSent: v.boolean(),
    webhookResponse: v.optional(v.string()),
  })
    .index("by_agent", ["agentId"])
    .index("by_call", ["callId"])
    .index("by_agent_time", ["agentId", "startTime"]),

  // Live Calls (for real-time monitoring)
  liveCalls: defineTable({
    callId: v.string(),
    agentId: v.id("voiceAgents"),
    agentName: v.string(),
    customerName: v.string(),
    customerPhone: v.string(),
    startTime: v.string(),
    duration: v.string(), // live updating
    status: v.union(
      v.literal("connecting"),
      v.literal("active"),
      v.literal("hold"),
      v.literal("transferring")
    ),
    sentiment: v.union(
      v.literal("positive"),
      v.literal("negative"),
      v.literal("neutral")
    ),
    lastTranscriptUpdate: v.string(),
    isRecording: v.boolean(),
  })
    .index("by_agent", ["agentId"])
    .index("by_status", ["status"]),

  // Swarm Campaigns
  campaigns: defineTable({
    name: v.string(),
    description: v.string(),
    type: v.union(
      v.literal("outbound"),
      v.literal("inbound"),
      v.literal("hybrid")
    ),
    status: v.union(
      v.literal("active"),
      v.literal("paused"),
      v.literal("completed"),
      v.literal("scheduled")
    ),
    
    // Campaign settings
    maxConcurrentCalls: v.number(),
    callsPerHour: v.number(),
    retryAttempts: v.number(),
    timeBetweenRetries: v.number(), // minutes
    
    // Schedule
    startDate: v.string(),
    endDate: v.optional(v.string()),
    activeHours: v.object({
      start: v.string(), // "09:00"
      end: v.string(), // "17:00"
      timezone: v.string(), // "America/New_York"
    }),
    
    // Metrics
    totalCalls: v.number(),
    completedCalls: v.number(),
    successfulCalls: v.number(),
    avgCallDuration: v.string(),
    
    createdAt: v.string(),
    updatedAt: v.string(),
  })
    .index("by_status", ["status"])
    .index("by_date", ["createdAt"]),

  // Campaign Agents (many-to-many relationship)
  campaignAgents: defineTable({
    campaignId: v.id("campaigns"),
    agentId: v.id("voiceAgents"),
    assignedAt: v.string(),
    callsHandled: v.number(),
    successRate: v.number(),
  })
    .index("by_campaign", ["campaignId"])
    .index("by_agent", ["agentId"]),

  // Phone Numbers
  phoneNumbers: defineTable({
    number: v.string(),
    displayName: v.string(),
    type: v.union(v.literal("sip"), v.literal("pstn"), v.literal("virtual")),
    status: v.union(v.literal("active"), v.literal("inactive"), v.literal("maintenance")),
    provider: v.string(),
    location: v.string(),
    assignedUser: v.optional(v.string()),
    
    // Statistics
    callsToday: v.number(),
    callsThisWeek: v.number(),
    callsThisMonth: v.number(),
    successRate: v.number(),
    avgCallDuration: v.string(),
    lastUsed: v.string(),
    
    // SIP Configuration (optional)
    sipConfig: v.optional(v.object({
      endpoint: v.string(),
      username: v.string(),
      domain: v.string(),
      port: v.number(),
      protocol: v.union(v.literal("UDP"), v.literal("TCP"), v.literal("TLS")),
      codec: v.array(v.string()),
    })),
    
    features: v.array(v.string()),
    
    createdAt: v.string(),
    updatedAt: v.string(),
  })
    .index("by_status", ["status"])
    .index("by_type", ["type"])
    .index("by_provider", ["provider"]),

  // Transcript Entries (for live calls and analytics)
  transcriptEntries: defineTable({
    callId: v.string(),
    callAnalyticsId: v.optional(v.id("callAnalytics")),
    timestamp: v.string(), // Format: "00:43"
    speaker: v.union(v.literal("agent"), v.literal("customer"), v.literal("system")),
    content: v.string(),
    sentiment: v.optional(
      v.union(v.literal("positive"), v.literal("negative"), v.literal("neutral"))
    ),
    order: v.number(),
  })
    .index("by_call", ["callId"])
    .index("by_analytics", ["callAnalyticsId", "order"])
    .index("by_speaker", ["callId", "speaker"]),

  // Dashboard Statistics (cached/computed)
  dashboardStats: defineTable({
    userId: v.string(),
    date: v.string(), // YYYY-MM-DD
    
    // Overall stats
    totalCalls: v.number(),
    activeCalls: v.number(),
    successRate: v.number(),
    avgCallDuration: v.string(),
    
    // Agent stats
    totalAgents: v.number(),
    activeAgents: v.number(),
    idleAgents: v.number(),
    offlineAgents: v.number(),
    
    // Call breakdown
    inboundCalls: v.number(),
    outboundCalls: v.number(),
    completedCalls: v.number(),
    failedCalls: v.number(),
    
    // Performance
    avgSentimentScore: v.number(),
    avgQualityScore: v.number(),
    transferRate: v.number(),
    
    updatedAt: v.string(),
  })
    .index("by_user_date", ["userId", "date"]),

  // YouTube Transcripts
  youtubeTranscripts: defineTable({
    videoId: v.string(),
    youtubeUrl: v.string(),
    transcript: v.string(),
    language: v.string(),
    wordCount: v.number(),
    createdAt: v.string(),
    userId: v.optional(v.string()),
    // Video metadata
    videoTitle: v.optional(v.string()),
    videoAuthor: v.optional(v.string()),
    videoDuration: v.optional(v.number()),
    thumbnailUrl: v.optional(v.string()),
  })
    .index("by_video", ["videoId"])
    .index("by_user", ["userId"]),

  // Transcript Jobs Queue
  transcriptJobs: defineTable({
    jobId: v.string(),
    userId: v.string(),
    youtubeUrl: v.string(),
    videoId: v.string(),
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    error: v.optional(v.string()),
    createdAt: v.string(),
    completedAt: v.optional(v.string()),
    // Video metadata stored at job level too
    videoTitle: v.optional(v.string()),
    videoAuthor: v.optional(v.string()),
  })
    .index("by_job", ["jobId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"]),

  // Hunter Lead Searches
  leadSearches: defineTable({
    searchId: v.string(),
    userId: v.string(),
    
    // Search Configuration
    searchName: v.string(),
    searchObjective: v.string(),
    selectedSources: v.array(v.string()), // ["web", "database", "directory"]
    
    // Search Criteria
    industry: v.string(),
    location: v.string(),
    companySize: v.optional(v.string()),
    jobTitles: v.array(v.string()),
    keywords: v.optional(v.string()),
    
    // Contact Preferences
    includeEmails: v.boolean(),
    includePhones: v.boolean(),
    includeLinkedIn: v.boolean(),
    
    // Validation Criteria
    validationCriteria: v.optional(v.object({
      mustHaveWebsite: v.boolean(),
      mustHaveContactInfo: v.boolean(),
      mustHaveSpecificKeywords: v.array(v.string()),
      mustBeInIndustry: v.boolean(),
      customValidationRules: v.string(),
    })),
    
    // Search Status
    status: v.union(
      v.literal("pending"),
      v.literal("initializing"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    progress: v.number(), // 0-100
    currentStage: v.optional(v.string()),
    error: v.optional(v.string()),
    
    // Results
    totalLeads: v.optional(v.number()),
    verifiedEmails: v.optional(v.number()),
    verifiedPhones: v.optional(v.number()),
    businessWebsites: v.optional(v.number()),
    avgResponseRate: v.optional(v.string()),
    searchTime: v.optional(v.string()),
    
    // Metadata
    createdAt: v.string(),
    completedAt: v.optional(v.string()),
    updatedAt: v.string(),
    
    // Data retention
    expiresAt: v.optional(v.string()), // For free tier data retention
    userTier: v.optional(v.union(
      v.literal("free"),
      v.literal("premium"),
      v.literal("enterprise")
    )),
  })
    .index("by_search", ["searchId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"])
    .index("by_user_status", ["userId", "status"])
    .index("by_created", ["createdAt"])
    .index("by_expiry", ["expiresAt"]),

  // Lead Search Results
  leadSearchResults: defineTable({
    searchId: v.string(),
    leadId: v.string(),
    
    // Contact Information
    name: v.optional(v.string()),
    email: v.optional(v.string()),
    phone: v.optional(v.string()),
    linkedInUrl: v.optional(v.string()),
    websiteUrl: v.optional(v.string()),
    
    // Company Information
    companyName: v.optional(v.string()),
    companySize: v.optional(v.string()),
    industry: v.optional(v.string()),
    location: v.optional(v.string()),
    
    // Job Information
    jobTitle: v.optional(v.string()),
    department: v.optional(v.string()),
    seniority: v.optional(v.string()),
    
    // Data Quality
    emailVerified: v.boolean(),
    phoneVerified: v.boolean(),
    confidence: v.number(), // 0-1
    dataSource: v.string(), // "web", "database", "directory"
    
    // Metadata
    extractedAt: v.string(),
    lastUpdated: v.string(),
  })
    .index("by_search", ["searchId"])
    .index("by_lead", ["leadId"])
    .index("by_email", ["email"])
    .index("by_company", ["companyName"])
    .index("by_source", ["dataSource"]),

  // User Subscriptions
  userSubscriptions: defineTable({
    userId: v.string(),
    tier: v.union(
      v.literal("free"),
      v.literal("premium"),
      v.literal("enterprise")
    ),
    
    // Limits
    searchesPerDay: v.number(),
    leadsPerSearch: v.number(),
    totalLeadsPerMonth: v.number(),
    
    // Usage tracking
    searchesToday: v.number(),
    leadsThisMonth: v.number(),
    lastResetDate: v.string(),
    
    // Subscription details
    subscriptionId: v.optional(v.string()),
    status: v.union(
      v.literal("active"),
      v.literal("cancelled"),
      v.literal("expired"),
      v.literal("trial")
    ),
    
    // Timestamps
    createdAt: v.string(),
    updatedAt: v.string(),
    expiresAt: v.optional(v.string()),
  })
    .index("by_user", ["userId"])
    .index("by_tier", ["tier"])
    .index("by_status", ["status"]),

  // Rate Limit Tracking
  rateLimitTracking: defineTable({
    userId: v.string(),
    feature: v.string(), // "leadSearch", "leadExport", etc.
    windowStart: v.string(), // ISO timestamp
    requestCount: v.number(),
    lastRequest: v.string(),
  })
    .index("by_user_feature", ["userId", "feature"])
    .index("by_window", ["windowStart"]),

  // Lead Export Jobs
  leadExportJobs: defineTable({
    exportId: v.string(),
    userId: v.string(),
    searchId: v.string(),
    
    // Export Configuration
    format: v.union(v.literal("csv"), v.literal("json"), v.literal("xlsx")),
    fields: v.array(v.string()),
    filters: v.optional(v.object({
      emailVerified: v.optional(v.boolean()),
      phoneVerified: v.optional(v.boolean()),
      minConfidence: v.optional(v.number()),
      dataSources: v.optional(v.array(v.string())),
    })),
    
    // Status
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    progress: v.number(),
    
    // Results
    recordCount: v.optional(v.number()),
    fileUrl: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    
    // Metadata
    createdAt: v.string(),
    completedAt: v.optional(v.string()),
    expiresAt: v.string(), // Download link expiry
    error: v.optional(v.string()),
  })
    .index("by_export", ["exportId"])
    .index("by_user", ["userId"])
    .index("by_search", ["searchId"])
    .index("by_status", ["status"]),

  // RAG Workflows
  ragWorkflows: defineTable({
    workflowId: v.string(),
    userId: v.string(),
    name: v.string(),
    description: v.optional(v.string()),
    
    // Workflow Configuration
    sourceType: v.union(
      v.literal("youtube"),
      v.literal("tiktok"),
      v.literal("twitch"),
      v.literal("documents"),
      v.literal("urls"),
      v.literal("csv"),
      v.literal("mixed")
    ),
    embeddingModel: v.string(), // "jina-clip-v2"
    chunkSize: v.number(),
    overlap: v.number(),
    
    // Processing Status
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("embedding"),
      v.literal("completed"),
      v.literal("failed"),
      v.literal("expired")
    ),
    progress: v.number(), // 0-100
    currentStage: v.optional(v.string()),
    
    // Statistics
    totalSources: v.number(),
    processedSources: v.number(),
    totalChunks: v.number(),
    totalEmbeddings: v.number(),
    totalTokens: v.number(),
    indexSize: v.string(), // e.g., "124 MB"
    
    // User Tier & Limits
    userTier: v.union(
      v.literal("free"),
      v.literal("premium"),
      v.literal("enterprise")
    ),
    totalFileSize: v.number(), // in bytes
    
    // Timestamps
    createdAt: v.string(),
    startedAt: v.optional(v.string()),
    completedAt: v.optional(v.string()),
    expiresAt: v.optional(v.string()), // For free tier
    
    // Cost tracking
    estimatedCost: v.number(),
    actualCost: v.optional(v.number()),
  })
    .index("by_workflow", ["workflowId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"])
    .index("by_created", ["createdAt"])
    .index("by_expiry", ["expiresAt"]),

  // RAG Sources
  ragSources: defineTable({
    sourceId: v.string(),
    workflowId: v.string(),
    userId: v.string(),
    
    // Source Information
    sourceType: v.union(
      v.literal("youtube_video"),
      v.literal("youtube_channel"),
      v.literal("tiktok_video"),
      v.literal("tiktok_channel"),
      v.literal("twitch_video"),
      v.literal("twitch_channel"),
      v.literal("document"),
      v.literal("url")
    ),
    sourceUrl: v.optional(v.string()),
    fileName: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    
    // Processing Status
    status: v.union(
      v.literal("pending"),
      v.literal("downloading"),
      v.literal("extracting"),
      v.literal("chunking"),
      v.literal("completed"),
      v.literal("failed")
    ),
    error: v.optional(v.string()),
    
    // Extracted Content
    content: v.optional(v.string()), // Raw text content
    metadata: v.optional(v.object({
      title: v.optional(v.string()),
      author: v.optional(v.string()),
      duration: v.optional(v.number()),
      language: v.optional(v.string()),
      wordCount: v.optional(v.number()),
    })),
    
    // Statistics
    chunkCount: v.number(),
    tokenCount: v.number(),
    
    // Timestamps
    createdAt: v.string(),
    processedAt: v.optional(v.string()),
  })
    .index("by_source", ["sourceId"])
    .index("by_workflow", ["workflowId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"]),

  // RAG Embeddings
  ragEmbeddings: defineTable({
    embeddingId: v.string(),
    workflowId: v.string(),
    sourceId: v.string(),
    userId: v.string(),
    
    // Chunk Information
    chunkIndex: v.number(),
    chunkText: v.string(),
    chunkTokens: v.number(),
    
    // Embedding Data
    embedding: v.array(v.float64()), // 1024-dimensional vector
    embeddingModel: v.string(), // "jina-clip-v2"
    dimensions: v.number(), // 1024
    
    // Metadata
    metadata: v.optional(v.object({
      sourceType: v.string(),
      position: v.object({
        start: v.number(),
        end: v.number(),
      }),
      context: v.optional(v.string()),
    })),
    
    // Quality metrics
    confidence: v.optional(v.number()),
    
    // Timestamps
    createdAt: v.string(),
    expiresAt: v.optional(v.string()), // For free tier
  })
    .index("by_embedding", ["embeddingId"])
    .index("by_workflow", ["workflowId"])
    .index("by_source", ["sourceId"])
    .index("by_user", ["userId"])
    .index("by_expiry", ["expiresAt"]),

  // RAG Export Jobs
  ragExportJobs: defineTable({
    exportId: v.string(),
    workflowId: v.string(),
    userId: v.string(),
    
    // Export Configuration
    format: v.union(
      v.literal("json"),
      v.literal("jsonl"),
      v.literal("csv"),
      v.literal("parquet"),
      v.literal("pinecone"),
      v.literal("weaviate")
    ),
    includeMetadata: v.boolean(),
    includeChunks: v.boolean(),
    
    // Status
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    progress: v.number(),
    
    // Results
    fileUrl: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    recordCount: v.optional(v.number()),
    
    // Metadata
    createdAt: v.string(),
    completedAt: v.optional(v.string()),
    expiresAt: v.string(), // Download link expiry
    error: v.optional(v.string()),
  })
    .index("by_export", ["exportId"])
    .index("by_workflow", ["workflowId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"]),

  // Audio Transcripts
  audioTranscripts: defineTable({
    jobId: v.string(),
    userId: v.string(),
    
    // File Information
    fileName: v.string(),
    fileSize: v.number(), // in bytes
    fileFormat: v.string(), // mp3, wav, etc.
    
    // Transcription Configuration
    language: v.optional(v.string()), // ISO-639-1 code
    prompt: v.optional(v.string()), // Optional transcription prompt
    
    // Enhanced Features
    enableRealtimeSentiment: v.optional(v.boolean()),
    enableEmotion2vec: v.optional(v.boolean()),
    useEnhancedAsr: v.optional(v.boolean()),
    
    // Status
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    
    // Results
    transcript: v.optional(v.string()),
    duration: v.optional(v.number()), // audio duration in seconds
    
    // Enhanced Results
    sentimentAnalysis: v.optional(v.object({
      sentiment: v.string(),
      confidence: v.number(),
      emotions: v.optional(v.object({
        angry: v.number(),
        disgusted: v.number(),
        fearful: v.number(),
        happy: v.number(),
        neutral: v.number(),
        sad: v.number(),
        surprised: v.number()
      }))
    })),
    
    // Speaker Diarization Results
    speakers: v.optional(v.array(v.object({
      speaker: v.string(),
      start: v.number(),
      end: v.number(),
      duration: v.number()
    }))),
    
    // Metadata
    createdAt: v.string(),
    completedAt: v.optional(v.string()),
    error: v.optional(v.string()),
    
    // Data retention
    expiresAt: v.optional(v.string()), // For free tier data retention
  })
    .index("by_job", ["jobId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"])
    .index("by_user_status", ["userId", "status"])
    .index("by_created", ["createdAt"])
    .index("by_expiry", ["expiresAt"]),
  
  // TikTok Users
  tiktokUsers: defineTable({
    username: v.string(),
    userId: v.string(),
    secUid: v.string(),
    avatar: v.optional(v.string()),
    nickname: v.optional(v.string()),
    signature: v.optional(v.string()),
    verified: v.optional(v.boolean()),
    followerCount: v.optional(v.number()),
    followingCount: v.optional(v.number()),
    videoCount: v.optional(v.number()),
    heartCount: v.optional(v.number()),
    privateAccount: v.optional(v.boolean()),
    cachedAt: v.number(),
  })
    .index("by_username", ["username"])
    .index("by_userId", ["userId"])
    .index("by_cached", ["cachedAt"]),
  
  // TikTok Videos
  tiktokVideos: defineTable({
    videoId: v.string(),
    username: v.string(),
    title: v.string(),
    thumbnail: v.optional(v.string()),
    dynamicCover: v.optional(v.string()),
    duration: v.number(),
    createTime: v.number(),
    
    // Stats
    views: v.number(),
    likes: v.number(),
    comments: v.number(),
    shares: v.number(),
    saves: v.number(),
    
    // Download info
    playAddr: v.optional(v.string()),
    downloadAddr: v.optional(v.string()),
    downloadStatus: v.optional(v.union(
      v.literal("pending"),
      v.literal("downloading"),
      v.literal("completed"),
      v.literal("failed")
    )),
    localPath: v.optional(v.string()),
    
    // Music info
    musicId: v.optional(v.string()),
    musicTitle: v.optional(v.string()),
    musicAuthor: v.optional(v.string()),
    musicOriginal: v.optional(v.boolean()),
    
    // Metadata
    hashtags: v.optional(v.array(v.object({
      id: v.string(),
      name: v.string(),
      title: v.optional(v.string()),
    }))),
    
    cachedAt: v.number(),
  })
    .index("by_video", ["videoId"])
    .index("by_username", ["username"])
    .index("by_cached", ["cachedAt"])
    .index("by_download_status", ["downloadStatus"]),
  
  // TikTok Jobs
  tiktokJobs: defineTable({
    jobId: v.string(),
    userId: v.string(),
    username: v.string(),
    action: v.union(
      v.literal("fetch_user"),
      v.literal("fetch_videos"),
      v.literal("download_videos")
    ),
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("downloading"),
      v.literal("completed"),
      v.literal("failed")
    ),
    videoIds: v.optional(v.array(v.string())),
    progress: v.optional(v.number()),
    totalVideos: v.optional(v.number()),
    completedVideos: v.optional(v.number()),
    error: v.optional(v.string()),
    createdAt: v.number(),
    completedAt: v.optional(v.number()),
  })
    .index("by_job", ["jobId"])
    .index("by_user", ["userId"])
    .index("by_username", ["username"])
    .index("by_status", ["status"])
    .index("by_user_status", ["userId", "status"])
    .index("by_created", ["createdAt"]),
  
  // YouTube Channels
  youtubeChannels: defineTable({
    channelId: v.string(),
    channelName: v.string(),
    channelHandle: v.optional(v.string()), // @handle
    channelUrl: v.string(),
    avatar: v.optional(v.string()),
    banner: v.optional(v.string()),
    description: v.optional(v.string()),
    subscriberCount: v.optional(v.number()),
    videoCount: v.optional(v.number()),
    viewCount: v.optional(v.number()),
    joinedDate: v.optional(v.string()),
    country: v.optional(v.string()),
    cachedAt: v.number(),
  })
    .index("by_channel", ["channelId"])
    .index("by_handle", ["channelHandle"])
    .index("by_name", ["channelName"])
    .index("by_cached", ["cachedAt"]),
  
  // YouTube Videos
  youtubeVideos: defineTable({
    videoId: v.string(),
    channelId: v.string(),
    channelName: v.string(),
    title: v.string(),
    description: v.optional(v.string()),
    thumbnail: v.optional(v.string()), // Default quality thumbnail
    thumbnails: v.optional(v.array(v.object({
      quality: v.string(),
      url: v.string(),
      width: v.number(),
      height: v.number(),
    }))),
    duration: v.number(), // in seconds
    uploadDate: v.optional(v.string()), // ISO date
    
    // Stats
    viewCount: v.optional(v.number()),
    likeCount: v.optional(v.number()),
    commentCount: v.optional(v.number()),
    
    // Content info
    tags: v.optional(v.array(v.string())),
    category: v.optional(v.string()),
    language: v.optional(v.string()),
    
    // Download info
    downloadStatus: v.optional(v.union(
      v.literal("pending"),
      v.literal("downloading"),
      v.literal("completed"),
      v.literal("failed")
    )),
    localPath: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    
    // Transcript info (if fetched)
    hasTranscript: v.optional(v.boolean()),
    transcriptLanguages: v.optional(v.array(v.string())),
    
    cachedAt: v.number(),
  })
    .index("by_video", ["videoId"])
    .index("by_channel", ["channelId"])
    .index("by_channel_name", ["channelName"])
    .index("by_upload", ["uploadDate"])
    .index("by_cached", ["cachedAt"])
    .index("by_download_status", ["downloadStatus"]),
  
  // YouTube Jobs
  youtubeJobs: defineTable({
    jobId: v.string(),
    userId: v.string(),
    channelUrl: v.optional(v.string()),
    channelId: v.optional(v.string()),
    action: v.union(
      v.literal("fetch_channel"),
      v.literal("fetch_videos"),
      v.literal("download_videos")
    ),
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("downloading"),
      v.literal("completed"),
      v.literal("failed")
    ),
    
    // For video operations
    videoIds: v.optional(v.array(v.string())),
    sortBy: v.optional(v.string()), // newest, popular, oldest
    count: v.optional(v.number()),
    
    // Progress tracking
    progress: v.optional(v.number()),
    totalVideos: v.optional(v.number()),
    completedVideos: v.optional(v.number()),
    
    // Error handling
    error: v.optional(v.string()),
    
    // Timestamps
    createdAt: v.number(),
    completedAt: v.optional(v.number()),
  })
    .index("by_job", ["jobId"])
    .index("by_user", ["userId"])
    .index("by_channel", ["channelId"])
    .index("by_status", ["status"])
    .index("by_user_status", ["userId", "status"])
    .index("by_created", ["createdAt"]),
  
  // Twitch Channels
  twitchChannels: defineTable({
    username: v.string(),
    displayName: v.string(),
    profileImage: v.optional(v.string()),
    bio: v.optional(v.string()),
    isVerified: v.boolean(),
    isPartner: v.boolean(),
    followerCount: v.number(),
    videoCount: v.number(),
    isLive: v.boolean(),
    channelUrl: v.string(),
    cachedAt: v.number(),
  })
    .index("by_username", ["username"])
    .index("by_cached", ["cachedAt"]),
  
  // Twitch Videos
  twitchVideos: defineTable({
    videoId: v.string(),
    channelUsername: v.string(),
    title: v.string(),
    thumbnail: v.optional(v.string()),
    duration: v.number(), // in seconds
    viewCount: v.number(),
    createdAt: v.number(), // timestamp
    url: v.string(),
    type: v.union(
      v.literal("vod"),
      v.literal("clip"),
      v.literal("highlight")
    ),
    game: v.optional(v.string()),
    language: v.optional(v.string()),
    description: v.optional(v.string()),
    
    // Download info
    downloadStatus: v.optional(v.union(
      v.literal("pending"),
      v.literal("downloading"),
      v.literal("completed"),
      v.literal("failed")
    )),
    localPath: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    
    cachedAt: v.number(),
  })
    .index("by_video", ["videoId"])
    .index("by_channel", ["channelUsername"])
    .index("by_type", ["type"])
    .index("by_cached", ["cachedAt"])
    .index("by_download_status", ["downloadStatus"]),
  
  // Twitch Jobs
  twitchJobs: defineTable({
    jobId: v.string(),
    userId: v.string(),
    channelUrl: v.optional(v.string()),
    channelName: v.optional(v.string()),
    action: v.union(
      v.literal("fetch_channel"),
      v.literal("fetch_videos"),
      v.literal("download_videos")
    ),
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("downloading"),
      v.literal("completed"),
      v.literal("failed")
    ),
    
    // For video operations
    videoIds: v.optional(v.array(v.string())),
    videoType: v.optional(v.string()), // archive, highlight, upload, clips
    count: v.optional(v.number()),
    
    // Progress tracking
    progress: v.optional(v.number()),
    totalVideos: v.optional(v.number()),
    completedVideos: v.optional(v.number()),
    
    // Error handling
    error: v.optional(v.string()),
    
    // Result storage
    result: v.optional(v.any()),
    
    // Timestamps
    createdAt: v.number(),
    completedAt: v.optional(v.number()),
  })
    .index("by_job", ["jobId"])
    .index("by_user", ["userId"])
    .index("by_channel", ["channelName"])
    .index("by_status", ["status"])
    .index("by_user_status", ["userId", "status"])
    .index("by_created", ["createdAt"]),
  
  // Instagram Users
  instagramUsers: defineTable({
    username: v.string(),
    userId: v.string(),
    fullName: v.optional(v.string()),
    biography: v.optional(v.string()),
    profilePicUrl: v.optional(v.string()),
    isVerified: v.optional(v.boolean()),
    isPrivate: v.optional(v.boolean()),
    followerCount: v.optional(v.number()),
    followingCount: v.optional(v.number()),
    postCount: v.optional(v.number()),
    externalUrl: v.optional(v.string()),
    cachedAt: v.number(),
  })
    .index("by_username", ["username"])
    .index("by_userId", ["userId"])
    .index("by_cached", ["cachedAt"]),
  
  // Instagram Posts
  instagramPosts: defineTable({
    postId: v.string(),
    username: v.string(),
    caption: v.optional(v.string()),
    mediaType: v.union(
      v.literal("image"),
      v.literal("video"),
      v.literal("carousel")
    ),
    thumbnail: v.optional(v.string()),
    mediaUrl: v.optional(v.string()),
    likeCount: v.number(),
    commentCount: v.number(),
    timestamp: v.number(),
    location: v.optional(v.string()),
    isVideo: v.boolean(),
    videoDuration: v.optional(v.number()),
    carouselMediaCount: v.optional(v.number()),
    
    // Download info
    downloadStatus: v.optional(v.union(
      v.literal("pending"),
      v.literal("downloading"),
      v.literal("completed"),
      v.literal("failed")
    )),
    localPath: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    
    cachedAt: v.number(),
  })
    .index("by_post", ["postId"])
    .index("by_username", ["username"])
    .index("by_cached", ["cachedAt"])
    .index("by_download_status", ["downloadStatus"]),
  
  // Instagram Jobs
  instagramJobs: defineTable({
    jobId: v.string(),
    userId: v.string(),
    username: v.string(),
    action: v.union(
      v.literal("fetch_user"),
      v.literal("fetch_posts"),
      v.literal("download_posts")
    ),
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("downloading"),
      v.literal("completed"),
      v.literal("failed")
    ),
    postIds: v.optional(v.array(v.string())),
    count: v.optional(v.number()),
    progress: v.optional(v.number()),
    totalPosts: v.optional(v.number()),
    completedPosts: v.optional(v.number()),
    result: v.optional(v.any()),
    error: v.optional(v.string()),
    createdAt: v.number(),
    completedAt: v.optional(v.number()),
  })
    .index("by_job", ["jobId"])
    .index("by_user", ["userId"])
    .index("by_username", ["username"])
    .index("by_status", ["status"])
    .index("by_user_status", ["userId", "status"])
    .index("by_created", ["createdAt"]),
  
  // Voice Clone Jobs
  voiceCloneJobs: defineTable({
    jobId: v.string(),
    userId: v.string(),
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    voiceName: v.string(),
    
    // File information
    audioFileUrl: v.optional(v.string()), // URL to uploaded audio
    audioFileName: v.optional(v.string()),
    audioFileSize: v.optional(v.number()),
    
    // Processing details
    apiJobId: v.optional(v.string()), // Backend API job ID
    sampleText: v.optional(v.string()), // Text used for voice sample
    voiceId: v.optional(v.string()), // Generated voice ID
    resultUrl: v.optional(v.string()), // URL to cloned voice sample
    
    // Worker information
    workerInfo: v.optional(v.object({
      environment: v.string(), // "development" or "production"
      gpuType: v.string(), // "cuda" or "rocm"
      dropletId: v.optional(v.string()),
      ip: v.optional(v.string()),
    })),
    
    // Error tracking
    error: v.optional(v.string()),
    errorDetails: v.optional(v.object({
      code: v.string(),
      message: v.string(),
      stack: v.optional(v.string()),
    })),
    
    // Timestamps
    createdAt: v.number(),
    startedAt: v.optional(v.number()),
    completedAt: v.optional(v.number()),
    processingTime: v.optional(v.number()), // in seconds
    
    // Additional settings
    settings: v.optional(v.object({
      exaggeration: v.optional(v.number()),
      chunkSize: v.optional(v.number()),
      cfgWeight: v.optional(v.number()),
    })),
  })
    .index("by_job", ["jobId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"])
    .index("by_user_status", ["userId", "status"])
    .index("by_created", ["createdAt"]),

  // Bulk Processing Jobs
  bulkJobs: defineTable({
    jobId: v.string(),
    jobType: v.string(), // "bulk_processing", "bulk_tiktok_download", etc.
    userId: v.string(),
    
    // Job status and progress
    status: v.union(
      v.literal("pending"),
      v.literal("initializing"),
      v.literal("processing"),
      v.literal("exporting"),
      v.literal("completed"),
      v.literal("failed"),
      v.literal("cancelled")
    ),
    priority: v.union(
      v.literal("low"),
      v.literal("normal"),
      v.literal("high")
    ),
    
    // Progress tracking
    currentStage: v.optional(v.string()),
    progress: v.object({
      overall: v.number(), // 0.0 to 1.0
      currentStage: v.number(), // 0.0 to 1.0
      itemsTotal: v.number(),
      itemsCompleted: v.number(),
      itemsFailed: v.number()
    }),
    
    // Stage information
    stages: v.any(), // Dynamic stages based on job type - allows any stage structure
    
    // Job configuration and data
    jobData: v.object({
      job_id: v.string(),
      total_items: v.number(),
      config: v.object({
        platform: v.optional(v.string()),
        input_method: v.optional(v.string()),
        channel_url: v.optional(v.string()),
        pasted_urls: v.optional(v.array(v.string())),
        selected_content: v.optional(v.array(v.string())),
        uploaded_documents: v.optional(v.array(v.any())),
        embedding_model: v.optional(v.object({
          id: v.string(),
          label: v.string(),
          dimensions: v.number(),
          max_tokens: v.number(),
          // JINA V4 specific fields
          jina_v4_task: v.optional(v.string()),
          jina_v4_dimensions: v.optional(v.number()),
          jina_v4_late_chunking: v.optional(v.boolean()),
          jina_v4_multi_vector: v.optional(v.boolean()),
          jina_v4_optimize_for_rag: v.optional(v.boolean()),
          jina_v4_truncate_at_max: v.optional(v.boolean())
        })),
        vector_db: v.optional(v.object({
          id: v.string(),
          label: v.string()
        })),
        settings: v.optional(v.object({
          chunkSize: v.number(),
          chunkOverlap: v.number(),
          maxTokens: v.number()
        })),
        user_id: v.optional(v.string())
      })
    }),
    
    // Results and exports
    result: v.optional(v.any()), // Dynamic result data
    exports: v.any(), // Export information
    errorMessage: v.optional(v.string()),
    
    // Timestamps
    createdAt: v.number(),
    updatedAt: v.optional(v.number()),
    startedAt: v.optional(v.number()),
    completedAt: v.optional(v.number()),
    estimatedDurationMinutes: v.optional(v.number()),
    
    // Environment and metadata
    metadata: v.optional(v.object({
      environment: v.optional(v.string()),
      totalStages: v.optional(v.number()),
      stageNames: v.optional(v.array(v.string())),
      // Progress tracking fields
      content_processed: v.optional(v.number()),
      embeddings: v.optional(v.number()),
      progress: v.optional(v.number()),
      stage: v.optional(v.string()),
      status: v.optional(v.string()),
      error: v.optional(v.string())
    })),
    
    // Progress percentage field for backend compatibility
    progressPercentage: v.optional(v.number())
  })
    .index("by_jobId", ["jobId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"])
    .index("by_user_status", ["userId", "status"])
    .index("by_created", ["createdAt"])
    .index("by_user_created", ["userId", "createdAt"]),

  // Bulk Job Exports
  bulkJobExports: defineTable({
    exportId: v.string(),
    jobId: v.string(),
    userId: v.string(),
    
    // Export details
    format: v.union(
      v.literal("json"),
      v.literal("csv"),
      v.literal("parquet"),
      v.literal("vector"),
      v.literal("zip")
    ),
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed"),
      v.literal("expired")
    ),
    
    // File information
    filename: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    filePath: v.optional(v.string()),
    downloadUrl: v.optional(v.string()),
    
    // Timestamps
    createdAt: v.number(),
    completedAt: v.optional(v.number()),
    expiresAt: v.optional(v.number()),
    
    // Error information
    errorMessage: v.optional(v.string())
  })
    .index("by_exportId", ["exportId"])
    .index("by_jobId", ["jobId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"])
    .index("by_created", ["createdAt"])
    .index("by_expires", ["expiresAt"]),

  // Procedural Audio Generation Jobs
  proceduralAudioJobs: defineTable({
    jobId: v.string(),
    userId: v.string(),
    
    // Audio Configuration - Simplified for coffee shop ambiance
    config: v.object({
      prompt: v.string(),
      duration: v.number(),
      intensity: v.number(), // 0-1 for coffee shop ambiance
      name: v.string()
    }),
    
    // Job Status
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    
    // Results
    audioUrl: v.optional(v.string()),
    audioId: v.optional(v.string()),
    fileName: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    
    // Metadata
    metadata: v.optional(v.object({
      size: v.string(),
      duration: v.string(),
      quality: v.string(),
      format: v.string()
    })),
    
    // Error handling
    error: v.optional(v.string()),
    
    // Timestamps
    createdAt: v.number(),
    startedAt: v.optional(v.number()),
    completedAt: v.optional(v.number()),
    processingTime: v.optional(v.number()), // in seconds
    
    // Backend tracking
    backendJobId: v.optional(v.string())
  })
    .index("by_job", ["jobId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"])
    .index("by_user_status", ["userId", "status"])
    .index("by_created", ["createdAt"])
    .index("by_completed", ["completedAt"]),

  // Telephony Calls
  telephonyCalls: defineTable({
    callId: v.string(),
    userId: v.string(),
    
    // Call Configuration
    direction: v.union(v.literal("inbound"), v.literal("outbound")),
    phoneNumber: v.string(),
    sipEndpoint: v.optional(v.string()),
    
    // Call State
    status: v.union(
      v.literal("connecting"),
      v.literal("connected"),
      v.literal("recording"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed"),
      v.literal("cancelled")
    ),
    
    // Audio Processing
    audioStreamUrl: v.optional(v.string()),
    recordingUrl: v.optional(v.string()),
    gstreamerPipeline: v.optional(v.string()),
    
    // Real-time Analysis
    currentTranscript: v.optional(v.string()),
    currentSentiment: v.optional(v.string()),
    speakerLabels: v.optional(v.array(v.string())),
    
    // Results
    fullTranscript: v.optional(v.string()),
    sentimentAnalysis: v.optional(v.any()),
    speakerDiarization: v.optional(v.any()),
    
    // Timing
    startTime: v.string(),
    endTime: v.optional(v.string()),
    duration: v.optional(v.number()),
    
    // Metadata
    createdAt: v.string(),
    updatedAt: v.string(),
  })
    .index("by_call", ["callId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"])
    .index("by_user_status", ["userId", "status"]),

  // Real-time Audio Chunks
  audioChunks: defineTable({
    callId: v.string(),
    chunkId: v.string(),
    sequence: v.number(),
    
    // Audio Data
    audioData: v.string(), // Base64 encoded
    format: v.string(), // "webm", "wav", etc.
    sampleRate: v.number(),
    duration: v.number(),
    
    // Processing State
    processed: v.boolean(),
    transcript: v.optional(v.string()),
    sentiment: v.optional(v.string()),
    speaker: v.optional(v.string()),
    
    // Timing
    timestamp: v.string(),
  })
    .index("by_call", ["callId"])
    .index("by_sequence", ["callId", "sequence"])
    .index("by_processed", ["callId", "processed"]),

  // GStreamer Pipeline Jobs
  gstreamerJobs: defineTable({
    jobId: v.string(),
    callId: v.string(),
    userId: v.string(),
    
    // Pipeline Configuration
    pipeline: v.string(),
    port: v.number(),
    codec: v.string(),
    
    // Job State
    status: v.union(
      v.literal("starting"),
      v.literal("running"),
      v.literal("stopping"),
      v.literal("completed"),
      v.literal("error")
    ),
    
    // Metrics
    bytesProcessed: v.number(),
    packetsReceived: v.number(),
    errors: v.array(v.string()),
    
    // Timing
    createdAt: v.string(),
    startedAt: v.optional(v.string()),
    completedAt: v.optional(v.string()),
  })
    .index("by_job", ["jobId"])
    .index("by_call", ["callId"])
    .index("by_status", ["status"]),

  // Telephony Jobs
  telephonyJobs: defineTable({
    jobId: v.string(),
    userId: v.string(),
    callId: v.string(),
    
    // Job Configuration
    jobType: v.union(
      v.literal("call_start"),
      v.literal("call_process"),
      v.literal("call_end"),
      v.literal("asr_analysis"),
      v.literal("sentiment_analysis")
    ),
    
    // Job State
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    
    // Progress
    progress: v.object({
      overall: v.number(),
      currentStage: v.number(),
      itemsTotal: v.number(),
      itemsCompleted: v.number(),
      itemsFailed: v.number()
    }),
    
    // Results
    result: v.optional(v.any()),
    error: v.optional(v.string()),
    
    // Timestamps
    createdAt: v.string(),
    startedAt: v.optional(v.string()),
    completedAt: v.optional(v.string()),
  })
    .index("by_job", ["jobId"])
    .index("by_call", ["callId"])
    .index("by_user", ["userId"])
    .index("by_status", ["status"])
    .index("by_user_status", ["userId", "status"]),
});


================================================
FILE: convex/telephonyActions.ts
================================================
import { action } from "./_generated/server";
import { v } from "convex/values";
import { api } from "./_generated/api";

// Start a new telephony call
export const startCall = action({
  args: {
    callId: v.string(),
    userId: v.string(),
    phoneNumber: v.string(),
    direction: v.union(v.literal("inbound"), v.literal("outbound")),
  },
  handler: async (ctx, args) => {
    try {
      // Create call record
      await ctx.runMutation(api.mutations.telephony.createCall, {
        callId: args.callId,
        userId: args.userId,
        phoneNumber: args.phoneNumber,
        direction: args.direction,
      });

      // Create telephony job
      const jobId = `tel_${args.callId}`;
      await ctx.runMutation(api.mutations.telephony.createJob, {
        jobId,
        userId: args.userId,
        callId: args.callId,
        jobType: "call_start",
        status: "pending",
        progress: {
          overall: 0,
          currentStage: 0,
          itemsTotal: 1,
          itemsCompleted: 0,
          itemsFailed: 0
        },
      });

      // Start GStreamer pipeline
      const gstreamerJob = await ctx.runAction(api.actions.telephony.startGStreamer, {
        callId: args.callId,
        userId: args.userId,
        port: 5000 + Math.floor(Math.random() * 1000),
      });

      return {
        callId: args.callId,
        jobId,
        gstreamerPort: gstreamerJob.port,
        websocketUrl: `ws://localhost:${gstreamerJob.port}/audio`,
      };
    } catch (error) {
      console.error("Error starting call:", error);
      throw error;
    }
  },
});

// Process audio chunk with ASR/sentiment
export const processAudioChunk = action({
  args: {
    callId: v.string(),
    chunkId: v.string(),
    audioData: v.string(), // Base64
    sequence: v.number(),
  },
  handler: async (ctx, args) => {
    try {
      // Store audio chunk
      await ctx.runMutation(api.mutations.telephony.ingestAudioChunk, {
        callId: args.callId,
        chunkId: args.chunkId,
        sequence: args.sequence,
        audioData: args.audioData,
        format: "webm",
        sampleRate: 16000,
        duration: 1.0,
        processed: false,
        timestamp: new Date().toISOString(),
      });

      // Send to backend ASR service
      const backendUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
      
      const response = await fetch(`${backendUrl}/api/telephony/process-chunk`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          call_id: args.callId,
          chunk_id: args.chunkId,
          audio_data: args.audioData,
          sequence: args.sequence,
        }),
      });

      if (!response.ok) {
        throw new Error(`Backend API error: ${response.statusText}`);
      }

      const result = await response.json();
      
      // Update chunk with results
      await ctx.runMutation(api.mutations.telephony.updateChunk, {
        callId: args.callId,
        chunkId: args.chunkId,
        transcript: result.transcript,
        sentiment: result.sentiment,
        speaker: result.speaker,
        processed: true,
      });

      // Update call with real-time transcript
      await ctx.runMutation(api.mutations.telephony.updateCallTranscript, {
        callId: args.callId,
        transcript: result.transcript,
        sentiment: result.sentiment,
      });

      return result;
    } catch (error) {
      console.error("Error processing audio chunk:", error);
      
      // Mark chunk as failed
      await ctx.runMutation(api.mutations.telephony.updateChunk, {
        callId: args.callId,
        chunkId: args.chunkId,
        processed: true,
      });
      
      throw error;
    }
  },
});

// End call and process final results
export const endCall = action({
  args: {
    callId: v.string(),
  },
  handler: async (ctx, args) => {
    try {
      // Stop GStreamer pipeline
      await ctx.runAction(api.actions.telephony.stopGStreamer, {
        callId: args.callId,
      });

      // Create final processing job
      const jobId = `tel_end_${args.callId}`;
      await ctx.runMutation(api.mutations.telephony.createJob, {
        jobId,
        userId: "anonymous", // Or get from auth
        callId: args.callId,
        jobType: "call_end",
        status: "pending",
        progress: {
          overall: 0,
          currentStage: 0,
          itemsTotal: 1,
          itemsCompleted: 0,
          itemsFailed: 0
        },
      });

      // Process final transcription
      const finalResult = await ctx.runAction(api.actions.telephony.processFinal, {
        callId: args.callId,
      });

      // Update call status
      await ctx.runMutation(api.mutations.telephony.completeCall, {
        callId: args.callId,
        finalTranscript: finalResult.transcript,
        sentimentAnalysis: finalResult.sentiment,
        speakerDiarization: finalResult.speakers,
      });

      return finalResult;
    } catch (error) {
      console.error("Error ending call:", error);
      throw error;
    }
  },
});

// Start GStreamer pipeline
export const startGStreamer = action({
  args: {
    callId: v.string(),
    userId: v.string(),
    port: v.number(),
  },
  handler: async (ctx, args) => {
    try {
      const jobId = `gst_${args.callId}`;
      
      await ctx.db.insert("gstreamerJobs", {
        jobId,
        callId: args.callId,
        userId: args.userId,
        pipeline: "webrtc-to-backend",
        port: args.port,
        codec: "opus",
        status: "starting",
        bytesProcessed: 0,
        packetsReceived: 0,
        errors: [],
        createdAt: new Date().toISOString(),
        startedAt: new Date().toISOString(),
      });

      return { jobId, port: args.port };
    } catch (error) {
      console.error("Error starting GStreamer:", error);
      throw error;
    }
  },
});

// Stop GStreamer pipeline
export const stopGStreamer = action({
  args: {
    callId: v.string(),
  },
  handler: async (ctx, args) => {
    try {
      const jobs = await ctx.db
        .query("gstreamerJobs")
        .withIndex("by_call", (q) => q.eq("callId", args.callId))
        .collect();

      for (const job of jobs) {
        await ctx.db.patch(job._id, {
          status: "completed",
          completedAt: new Date().toISOString(),
        });
      }

      return { success: true };
    } catch (error) {
      console.error("Error stopping GStreamer:", error);
      throw error;
    }
  },
});

// Process final transcription
export const processFinal = action({
  args: {
    callId: v.string(),
  },
  handler: async (ctx, args) => {
    try {
      const backendUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
      
      const response = await fetch(`${backendUrl}/api/telephony/process-final`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          call_id: args.callId,
        }),
      });

      if (!response.ok) {
        throw new Error(`Backend API error: ${response.statusText}`);
      }

      const result = await response.json();
      return result;
    } catch (error) {
      console.error("Error processing final transcription:", error);
      throw error;
    }
  },
});

// Get call status
export const getCallStatus = action({
  args: {
    callId: v.string(),
  },
  handler: async (ctx, args) => {
    const call = await ctx.db
      .query("telephonyCalls")
      .withIndex("by_call", (q) => q.eq("callId", args.callId))
      .first();

    if (!call) {
      throw new Error(`Call ${args.callId} not found`);
    }

    return call;
  },
});

// Get real-time transcript
export const getRealtimeTranscript = action({
  args: {
    callId: v.string(),
  },
  handler: async (ctx, args) => {
    const call = await ctx.db
      .query("telephonyCalls")
      .withIndex("by_call", (q) => q.eq("callId", args.callId))
      .first();

    if (!call) {
      throw new Error(`Call ${args.callId} not found`);
    }

    const chunks = await ctx.db
      .query("audioChunks")
      .withIndex("by_call", (q) => q.eq("callId", args.callId))
      .order("desc")
      .take(10);

    return {
      currentTranscript: call.currentTranscript,
      currentSentiment: call.currentSentiment,
      speakerLabels: call.speakerLabels,
      recentChunks: chunks,
    };
  },
});


================================================
FILE: convex/testSetup.ts
================================================
import { mutation } from "./_generated/server";
import { v } from "convex/values";
import { SUBSCRIPTION_TIERS } from "./rateLimitHelpers";

// Create a test user subscription for development
export const createTestSubscription = mutation({
  args: {
    userId: v.string(),
  },
  handler: async (ctx, { userId }) => {
    // Check if subscription already exists
    const existing = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (existing) {
      console.log("Subscription already exists for user:", userId);
      return existing._id;
    }

    // Create a free tier subscription for testing
    const now = new Date().toISOString();
    const subscriptionId = await ctx.db.insert("userSubscriptions", {
      userId,
      tier: "free",
      searchesPerDay: SUBSCRIPTION_TIERS.free.searchesPerDay,
      leadsPerSearch: SUBSCRIPTION_TIERS.free.leadsPerSearch,
      totalLeadsPerMonth: SUBSCRIPTION_TIERS.free.totalLeadsPerMonth,
      searchesToday: 0,
      leadsThisMonth: 0,
      lastResetDate: now,
      status: "active",
      createdAt: now,
      updatedAt: now,
    });

    console.log("Created test subscription for user:", userId);
    return subscriptionId;
  },
});

// Create a premium test subscription
export const createPremiumTestSubscription = mutation({
  args: {
    userId: v.string(),
  },
  handler: async (ctx, { userId }) => {
    // Check if subscription already exists
    const existing = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (existing) {
      // Update to premium
      await ctx.db.patch(existing._id, {
        tier: "premium",
        searchesPerDay: SUBSCRIPTION_TIERS.premium.searchesPerDay,
        leadsPerSearch: SUBSCRIPTION_TIERS.premium.leadsPerSearch,
        totalLeadsPerMonth: SUBSCRIPTION_TIERS.premium.totalLeadsPerMonth,
        status: "active",
        updatedAt: new Date().toISOString(),
      });
      console.log("Updated subscription to premium for user:", userId);
      return existing._id;
    }

    // Create a premium subscription
    const now = new Date().toISOString();
    const subscriptionId = await ctx.db.insert("userSubscriptions", {
      userId,
      tier: "premium",
      searchesPerDay: SUBSCRIPTION_TIERS.premium.searchesPerDay,
      leadsPerSearch: SUBSCRIPTION_TIERS.premium.leadsPerSearch,
      totalLeadsPerMonth: SUBSCRIPTION_TIERS.premium.totalLeadsPerMonth,
      searchesToday: 0,
      leadsThisMonth: 0,
      lastResetDate: now,
      status: "active",
      createdAt: now,
      updatedAt: now,
    });

    console.log("Created premium subscription for user:", userId);
    return subscriptionId;
  },
});

// Update existing subscription limits to match new SUBSCRIPTION_TIERS
export const updateSubscriptionLimits = mutation({
  args: {
    userId: v.string(),
  },
  handler: async (ctx, { userId }) => {
    const subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (!subscription) {
      console.log("No subscription found for user:", userId);
      return null;
    }

    const tier = subscription.tier as keyof typeof SUBSCRIPTION_TIERS;
    const tierConfig = SUBSCRIPTION_TIERS[tier];

    // Update with new limits from SUBSCRIPTION_TIERS
    await ctx.db.patch(subscription._id, {
      searchesPerDay: tierConfig.searchesPerDay,
      leadsPerSearch: tierConfig.leadsPerSearch,
      totalLeadsPerMonth: tierConfig.totalLeadsPerMonth,
      updatedAt: new Date().toISOString(),
    });

    console.log(`Updated ${tier} subscription limits for user:`, userId);
    console.log(`New limits - Searches/day: ${tierConfig.searchesPerDay}, Leads/search: ${tierConfig.leadsPerSearch}, Leads/month: ${tierConfig.totalLeadsPerMonth}`);
    
    return subscription._id;
  },
});


================================================
FILE: convex/voiceCloneJobs.ts
================================================
import { v } from "convex/values";
import { mutation, query } from "./_generated/server";

// Create a new voice clone job
export const create = mutation({
  args: {
    jobId: v.string(),
    userId: v.string(),
    voiceName: v.string(),
    audioFileUrl: v.optional(v.string()),
    audioFileName: v.optional(v.string()),
    audioFileSize: v.optional(v.number()),
    sampleText: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const job = await ctx.db.insert("voiceCloneJobs", {
      ...args,
      status: "pending",
      createdAt: Date.now(),
    });
    return job;
  },
});

// Update job status
export const updateStatus = mutation({
  args: {
    jobId: v.string(),
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    startedAt: v.optional(v.number()),
    completedAt: v.optional(v.number()),
    processingTime: v.optional(v.number()),
    voiceId: v.optional(v.string()),
    resultUrl: v.optional(v.string()),
    error: v.optional(v.string()),
    errorDetails: v.optional(v.object({
      code: v.string(),
      message: v.string(),
      stack: v.optional(v.string()),
    })),
    workerInfo: v.optional(v.object({
      environment: v.string(),
      gpuType: v.string(),
      dropletId: v.optional(v.string()),
      ip: v.optional(v.string()),
    })),
    // Additional fields for voice cloning details
    apiJobId: v.optional(v.string()),
    sampleText: v.optional(v.string()),
    settings: v.optional(v.object({
      exaggeration: v.number(),
      cfgWeight: v.number(),
      chunkSize: v.number(),
    })),
  },
  handler: async (ctx, args) => {
    const { jobId, ...updates } = args;
    
    // Find the job
    const job = await ctx.db
      .query("voiceCloneJobs")
      .withIndex("by_job", (q) => q.eq("jobId", jobId))
      .first();
    
    if (!job) {
      throw new Error(`Job ${jobId} not found`);
    }
    
    // Update the job
    await ctx.db.patch(job._id, updates);
    
    return { success: true };
  },
});

// Get job by ID
export const getJob = query({
  args: { jobId: v.string() },
  handler: async (ctx, args) => {
    return await ctx.db
      .query("voiceCloneJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
  },
});

// Get jobs by user
export const getUserJobs = query({
  args: { 
    userId: v.string(),
    status: v.optional(v.string()),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    let query = ctx.db.query("voiceCloneJobs");
    
    if (args.status) {
      query = query.withIndex("by_user_status", (q) => 
        q.eq("userId", args.userId).eq("status", args.status as any)
      );
    } else {
      query = query.withIndex("by_user", (q) => q.eq("userId", args.userId));
    }
    
    const jobs = await query
      .order("desc")
      .take(args.limit || 10);
    
    return jobs;
  },
});

// Get pending jobs (for worker polling)
export const getPendingJobs = query({
  args: { 
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const jobs = await ctx.db
      .query("voiceCloneJobs")
      .withIndex("by_status", (q) => q.eq("status", "pending"))
      .order("asc")
      .take(args.limit || 10);
    
    return jobs;
  },
});

// Claim a job for processing
export const claimJob = mutation({
  args: {
    jobId: v.string(),
    workerInfo: v.object({
      environment: v.string(),
      gpuType: v.string(),
      dropletId: v.optional(v.string()),
      ip: v.optional(v.string()),
    }),
  },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("voiceCloneJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    if (job.status !== "pending") {
      throw new Error(`Job ${args.jobId} is not pending (status: ${job.status})`);
    }
    
    // Update job to processing
    await ctx.db.patch(job._id, {
      status: "processing",
      startedAt: Date.now(),
      workerInfo: args.workerInfo,
    });
    
    return { success: true };
  },
});

// Get job statistics
export const getStats = query({
  args: { userId: v.optional(v.string()) },
  handler: async (ctx, args) => {
    let query = ctx.db.query("voiceCloneJobs");
    
    if (args.userId) {
      // Get user-specific stats
      const jobs = await query
        .withIndex("by_user", (q) => q.eq("userId", args.userId))
        .collect();
      
      const stats = {
        total: jobs.length,
        pending: jobs.filter(j => j.status === "pending").length,
        processing: jobs.filter(j => j.status === "processing").length,
        completed: jobs.filter(j => j.status === "completed").length,
        failed: jobs.filter(j => j.status === "failed").length,
        avgProcessingTime: 0,
      };
      
      // Calculate average processing time
      const completedJobs = jobs.filter(j => j.status === "completed" && j.processingTime);
      if (completedJobs.length > 0) {
        const totalTime = completedJobs.reduce((sum, j) => sum + (j.processingTime || 0), 0);
        stats.avgProcessingTime = totalTime / completedJobs.length;
      }
      
      return stats;
    } else {
      // Get global stats
      const allJobs = await query.collect();
      
      return {
        total: allJobs.length,
        pending: allJobs.filter(j => j.status === "pending").length,
        processing: allJobs.filter(j => j.status === "processing").length,
        completed: allJobs.filter(j => j.status === "completed").length,
        failed: allJobs.filter(j => j.status === "failed").length,
      };
    }
  },
});


================================================
FILE: convex/youtubeContentActions.ts
================================================
import { action } from "./_generated/server";
import { v } from "convex/values";
import { api, internal } from "./_generated/api";
import { RateLimiter, HOUR } from "@convex-dev/rate-limiter";
import { components } from "./_generated/api";

// Initialize rate limiter
const rateLimiter = new RateLimiter(components.rateLimiter, {
  // Channel fetch: 20 per hour per user
  channelFetch: { kind: "token bucket", rate: 20, period: HOUR, capacity: 5 },
  // Videos fetch: 10 per hour per user
  videosFetch: { kind: "token bucket", rate: 10, period: HOUR, capacity: 3 },
  // Download: 5 per hour per user
  videosDownload: { kind: "token bucket", rate: 5, period: HOUR, capacity: 2 },
});

// Extract channel ID from various YouTube URL formats
function extractChannelInfo(url: string): { identifier: string; type: string } | null {
  const patterns = [
    { regex: /youtube\.com\/channel\/([a-zA-Z0-9_-]+)/, type: 'channel_id' },
    { regex: /youtube\.com\/@([a-zA-Z0-9_-]+)/, type: 'handle' },
    { regex: /youtube\.com\/user\/([a-zA-Z0-9_-]+)/, type: 'user' },
    { regex: /youtube\.com\/c\/([a-zA-Z0-9_-]+)/, type: 'custom' },
  ];
  
  for (const { regex, type } of patterns) {
    const match = url.match(regex);
    if (match) {
      return { identifier: match[1], type };
    }
  }
  
  // Try as direct input
  if (url.startsWith('@')) {
    return { identifier: url.substring(1), type: 'handle' };
  } else if (url.startsWith('UC') && url.length === 24) {
    return { identifier: url, type: 'channel_id' };
  }
  
  return { identifier: url, type: 'unknown' };
}

export const fetchYouTubeChannel = action({
  args: {
    channelUrl: v.string(),
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    // Check rate limit
    try {
      await rateLimiter.limit(ctx, "channelFetch", { 
        key: args.userId, 
        throws: true 
      });
    } catch (error) {
      throw new Error("Rate limit exceeded. You can fetch up to 20 channels per hour.");
    }
    
    // Extract channel info
    const channelInfo = extractChannelInfo(args.channelUrl);
    if (!channelInfo) {
      throw new Error("Invalid YouTube channel URL");
    }
    
    // Check if channel already exists and is fresh
    let existingChannel;
    if (channelInfo.type === 'channel_id') {
      existingChannel = await ctx.runQuery(
        internal.queries.youtubeContent.getCachedChannel, 
        { channelId: channelInfo.identifier }
      );
    } else if (channelInfo.type === 'handle') {
      existingChannel = await ctx.runQuery(
        internal.queries.youtubeContent.getCachedChannel, 
        { channelHandle: channelInfo.identifier }
      );
    }
    
    if (existingChannel && !existingChannel.isStale) {
      return {
        jobId: `cached-${existingChannel.channel.channelId}`,
        status: "completed",
        channel: existingChannel.channel,
        cached: true,
      };
    }
    
    // Create a new job
    const jobId = Math.random().toString(36).substring(2) + Date.now().toString(36);
    await ctx.runMutation(internal.mutations.youtubeContent.createChannelFetchJob, {
      jobId,
      userId: args.userId,
      channelUrl: args.channelUrl,
    });
    
    // Call Python backend to fetch channel
    try {
      const response = await fetch("http://localhost:8000/api/public/youtube/channel", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          job_id: jobId,
          channel_url: args.channelUrl,
          user_id: args.userId,
        }),
      });
      
      if (!response.ok) {
        throw new Error("Failed to start channel fetch");
      }
      
      return {
        jobId,
        status: "processing",
        cached: false,
      };
    } catch (error) {
      // Update job status to failed
      await ctx.runMutation(internal.mutations.youtubeContent.jobWebhook, {
        jobId,
        status: "failed",
        error: error.message || "Failed to fetch channel",
      });
      
      throw new Error("Failed to fetch channel: " + error.message);
    }
  },
});

export const fetchYouTubeVideos = action({
  args: {
    channelId: v.string(),
    userId: v.string(),
    count: v.optional(v.number()),
    sortBy: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    // Check rate limit
    try {
      await rateLimiter.limit(ctx, "videosFetch", { 
        key: args.userId, 
        throws: true 
      });
    } catch (error) {
      throw new Error("Rate limit exceeded. You can fetch videos up to 10 times per hour.");
    }
    
    // Check if videos already exist and are fresh
    const existingVideos = await ctx.runQuery(
      internal.queries.youtubeContent.getCachedVideos, 
      { 
        channelId: args.channelId,
        limit: args.count,
      }
    );
    
    if (existingVideos && !existingVideos.isStale) {
      return {
        jobId: `cached-${args.channelId}`,
        status: "completed",
        videos: existingVideos.videos,
        cached: true,
      };
    }
    
    // Create a new job
    const jobId = Math.random().toString(36).substring(2) + Date.now().toString(36);
    await ctx.runMutation(internal.mutations.youtubeContent.createVideosFetchJob, {
      jobId,
      userId: args.userId,
      channelId: args.channelId,
      count: args.count,
      sortBy: args.sortBy,
    });
    
    // Call Python backend to fetch videos
    try {
      const response = await fetch("http://localhost:8000/api/public/youtube/videos", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          job_id: jobId,
          channel_id: args.channelId,
          user_id: args.userId,
          count: args.count || 30,
          sort_by: args.sortBy || "newest",
        }),
      });
      
      if (!response.ok) {
        throw new Error("Failed to start videos fetch");
      }
      
      return {
        jobId,
        status: "processing",
        cached: false,
      };
    } catch (error) {
      // Update job status to failed
      await ctx.runMutation(internal.mutations.youtubeContent.jobWebhook, {
        jobId,
        status: "failed",
        error: error.message || "Failed to fetch videos",
      });
      
      throw new Error("Failed to fetch videos: " + error.message);
    }
  },
});

export const downloadYouTubeVideos = action({
  args: {
    videoIds: v.array(v.string()),
    channelId: v.string(),
    channelName: v.string(),
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    // Check rate limit
    try {
      await rateLimiter.limit(ctx, "videosDownload", { 
        key: args.userId, 
        throws: true 
      });
    } catch (error) {
      throw new Error("Rate limit exceeded. You can download videos up to 5 times per hour.");
    }
    
    // Validate video count
    if (args.videoIds.length > 20) {
      throw new Error("Maximum 20 videos can be downloaded at once");
    }
    
    // Create a new job
    const jobId = Math.random().toString(36).substring(2) + Date.now().toString(36);
    await ctx.runMutation(internal.mutations.youtubeContent.createDownloadJob, {
      jobId,
      userId: args.userId,
      channelId: args.channelId,
      channelName: args.channelName,
      videoIds: args.videoIds,
    });
    
    // Call Python backend to download videos
    try {
      const response = await fetch("http://localhost:8000/api/public/youtube/download", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          job_id: jobId,
          video_ids: args.videoIds,
          user_id: args.userId,
          channel_name: args.channelName,
        }),
      });
      
      if (!response.ok) {
        throw new Error("Failed to start video download");
      }
      
      return {
        jobId,
        status: "processing",
      };
    } catch (error) {
      // Update job status to failed
      await ctx.runMutation(internal.mutations.youtubeContent.jobWebhook, {
        jobId,
        status: "failed",
        error: error.message || "Failed to download videos",
      });
      
      throw new Error("Failed to download videos: " + error.message);
    }
  },
});

export const getJobStatus = action({
  args: {
    jobId: v.string(),
  },
  handler: async (ctx, args) => {
    // Handle cached job IDs
    if (args.jobId.startsWith("cached-")) {
      const channelId = args.jobId.replace("cached-", "");
      
      // Try to get channel data
      const channel = await ctx.runQuery(
        internal.queries.youtubeContent.getCachedChannel,
        { channelId }
      );
      
      if (channel) {
        return {
          status: "completed",
          channel: channel.channel,
        };
      }
      
      // Try to get videos data
      const videos = await ctx.runQuery(
        internal.queries.youtubeContent.getCachedVideos,
        { channelId }
      );
      
      if (videos) {
        return {
          status: "completed",
          videos: videos.videos,
        };
      }
    }
    
    // Get job from database
    const job = await ctx.runQuery(internal.queries.youtubeContent.getJob, {
      jobId: args.jobId,
    });
    
    if (!job) {
      throw new Error("Job not found");
    }
    
    if (job.status === "completed") {
      // Get the results based on job action
      if (job.action === "fetch_channel" && job.channelId) {
        const channel = await ctx.runQuery(
          internal.queries.youtubeContent.getCachedChannel,
          { channelId: job.channelId }
        );
        
        return {
          status: job.status,
          channel: channel?.channel,
        };
      } else if (job.action === "fetch_videos" && job.channelId) {
        const videos = await ctx.runQuery(
          internal.queries.youtubeContent.getCachedVideos,
          { channelId: job.channelId }
        );
        
        return {
          status: job.status,
          videos: videos?.videos,
        };
      } else if (job.action === "download_videos") {
        const downloadStatus = await ctx.runQuery(
          internal.queries.youtubeContent.getVideoDownloadStatus,
          { videoIds: job.videoIds || [] }
        );
        
        return {
          status: job.status,
          downloadStatus,
          totalVideos: job.totalVideos,
          completedVideos: job.completedVideos,
        };
      }
    }
    
    return {
      status: job.status,
      error: job.error,
      progress: job.progress,
    };
  },
});


================================================
FILE: convex/youtubeTranscriptActions.ts
================================================
import { action } from "./_generated/server";
import { v } from "convex/values";
import { api, internal } from "./_generated/api";
import { RateLimiter, HOUR } from "@convex-dev/rate-limiter";
import { components } from "./_generated/api";

// Initialize rate limiter
const rateLimiter = new RateLimiter(components.rateLimiter, {
  // Allow 100 transcript requests per hour per user
  transcriptFetch: { kind: "token bucket", rate: 100, period: HOUR, capacity: 10 },
});

// Extract video ID from YouTube URL
function extractVideoId(url: string): string | null {
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\n?#]+)/,
    /youtube\.com\/embed\/([^&\n?#]+)/,
    /youtube\.com\/v\/([^&\n?#]+)/
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) {
      return match[1];
    }
  }
  
  return null;
}

export const fetchYoutubeTranscript = action({
  args: {
    youtubeUrl: v.string(),
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    // Check rate limit
    try {
      await rateLimiter.limit(ctx, "transcriptFetch", { 
        key: args.userId, 
        throws: true 
      });
    } catch (error) {
      throw new Error("Rate limit exceeded. You can fetch up to 100 transcripts per hour.");
    }

    // Extract video ID
    const videoId = extractVideoId(args.youtubeUrl);
    if (!videoId) {
      throw new Error("Invalid YouTube URL");
    }

    // Check if transcript already exists
    const existingTranscript = await ctx.runQuery(
      internal.youtubeTranscripts.getTranscriptByVideoId, 
      { videoId }
    );
    
    if (existingTranscript) {
      return {
        jobId: `cached-${videoId}`,
        status: "completed",
        transcript: existingTranscript.transcript,
        cached: true,
      };
    }

    // Create a new job
    const jobId = Math.random().toString(36).substring(2) + Date.now().toString(36);
    await ctx.runMutation(internal.youtubeTranscripts.createJob, {
      jobId,
      userId: args.userId,
      youtubeUrl: args.youtubeUrl,
      videoId,
    });

    // Call Python backend to fetch transcript
    try {
      const response = await fetch("http://localhost:8000/api/public/youtube/transcript", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          job_id: jobId,
          youtube_url: args.youtubeUrl,
          user_id: args.userId,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to start transcript fetch");
      }

      return {
        jobId,
        status: "processing",
        cached: false,
      };
    } catch (error) {
      // Update job status to failed
      await ctx.runMutation(internal.youtubeTranscripts.updateJobStatus, {
        jobId,
        status: "failed",
        error: error.message || "Failed to fetch transcript",
      });

      throw new Error("Failed to fetch transcript: " + error.message);
    }
  },
});

export const getJobStatus = action({
  args: {
    jobId: v.string(),
  },
  handler: async (ctx, args) => {
    // Handle cached job IDs
    if (args.jobId.startsWith("cached-")) {
      const videoId = args.jobId.replace("cached-", "");
      const transcript = await ctx.runQuery(
        internal.youtubeTranscripts.getTranscriptByVideoId,
        { videoId }
      );
      
      if (transcript) {
        return {
          status: "completed",
          transcript: transcript.transcript,
          wordCount: transcript.wordCount,
        };
      }
    }

    // Get job from database
    const job = await ctx.runQuery(internal.youtubeTranscripts.getJob, {
      jobId: args.jobId,
    });

    if (!job) {
      throw new Error("Job not found");
    }

    if (job.status === "completed") {
      const transcript = await ctx.runQuery(
        internal.youtubeTranscripts.getTranscriptByVideoId,
        { videoId: job.videoId }
      );
      
      return {
        status: job.status,
        transcript: transcript?.transcript,
        wordCount: transcript?.wordCount,
        videoTitle: transcript?.videoTitle || job.videoTitle,
        videoAuthor: transcript?.videoAuthor || job.videoAuthor,
        videoDuration: transcript?.videoDuration,
      };
    }

    return {
      status: job.status,
      error: job.error,
    };
  },
});


================================================
FILE: convex/youtubeTranscripts.ts
================================================
import { internalMutation, internalQuery } from "./_generated/server";
import { v } from "convex/values";

// Internal mutation to create a job
export const createJob = internalMutation({
  args: {
    jobId: v.string(),
    userId: v.string(),
    youtubeUrl: v.string(),
    videoId: v.string(),
  },
  handler: async (ctx, args) => {
    await ctx.db.insert("transcriptJobs", {
      jobId: args.jobId,
      userId: args.userId,
      youtubeUrl: args.youtubeUrl,
      videoId: args.videoId,
      status: "pending",
      createdAt: new Date().toISOString(),
    });
  },
});

// Internal mutation to update job status
export const updateJobStatus = internalMutation({
  args: {
    jobId: v.string(),
    status: v.union(
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    error: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("transcriptJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();

    if (!job) {
      throw new Error("Job not found");
    }

    const updates: any = {
      status: args.status,
    };

    if (args.error) {
      updates.error = args.error;
    }

    if (args.status === "completed") {
      updates.completedAt = new Date().toISOString();
    }

    await ctx.db.patch(job._id, updates);
  },
});

// Internal mutation to store transcript
export const storeTranscript = internalMutation({
  args: {
    jobId: v.string(),
    videoId: v.string(),
    youtubeUrl: v.string(),
    transcript: v.string(),
    language: v.string(),
    userId: v.string(),
    // New metadata fields
    videoTitle: v.optional(v.string()),
    videoAuthor: v.optional(v.string()),
    videoDuration: v.optional(v.number()),
    thumbnailUrl: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    // Calculate word count
    const wordCount = args.transcript.split(/\s+/).filter(word => word.length > 0).length;

    // Get the job to get the URL
    const job = await ctx.db
      .query("transcriptJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();

    // Store transcript with metadata
    await ctx.db.insert("youtubeTranscripts", {
      videoId: args.videoId,
      youtubeUrl: job?.youtubeUrl || args.youtubeUrl,
      transcript: args.transcript,
      language: args.language,
      wordCount,
      createdAt: new Date().toISOString(),
      userId: args.userId,
      videoTitle: args.videoTitle,
      videoAuthor: args.videoAuthor,
      videoDuration: args.videoDuration,
      thumbnailUrl: args.thumbnailUrl,
    });

    // Update job status
    await updateJobStatus(ctx, {
      jobId: args.jobId,
      status: "completed",
    });
  },
});

// Internal query to get transcript by video ID
export const getTranscriptByVideoId = internalQuery({
  args: { videoId: v.string() },
  handler: async (ctx, args) => {
    return await ctx.db
      .query("youtubeTranscripts")
      .withIndex("by_video", (q) => q.eq("videoId", args.videoId))
      .first();
  },
});

// Internal query to get job
export const getJob = internalQuery({
  args: { jobId: v.string() },
  handler: async (ctx, args) => {
    return await ctx.db
      .query("transcriptJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
  },
});


================================================
FILE: convex/_generated/api.d.ts
================================================
/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type * as actions_instagramContent from "../actions/instagramContent.js";
import type * as actions_tiktokContent from "../actions/tiktokContent.js";
import type * as actions_twitchContent from "../actions/twitchContent.js";
import type * as audioTranscriptActions from "../audioTranscriptActions.js";
import type * as bulkJobs from "../bulkJobs.js";
import type * as http from "../http.js";
import type * as hunterActions from "../hunterActions.js";
import type * as hunterHttpEndpoints from "../hunterHttpEndpoints.js";
import type * as hunterMutations from "../hunterMutations.js";
import type * as hunterQueries from "../hunterQueries.js";
import type * as initializeHunter from "../initializeHunter.js";
import type * as jinaIntegration from "../jinaIntegration.js";
import type * as mutations_audioTranscripts from "../mutations/audioTranscripts.js";
import type * as mutations_callsPage from "../mutations/callsPage.js";
import type * as mutations_clearCachedTranscripts from "../mutations/clearCachedTranscripts.js";
import type * as mutations_instagramContent from "../mutations/instagramContent.js";
import type * as mutations_telephony from "../mutations/telephony.js";
import type * as mutations_tiktokContent from "../mutations/tiktokContent.js";
import type * as mutations_twitchContent from "../mutations/twitchContent.js";
import type * as mutations_youtubeContent from "../mutations/youtubeContent.js";
import type * as mutations_youtubeTranscripts from "../mutations/youtubeTranscripts.js";
import type * as proceduralAudio from "../proceduralAudio.js";
import type * as queries_audioTranscripts from "../queries/audioTranscripts.js";
import type * as queries_callsPage from "../queries/callsPage.js";
import type * as queries_debugYouTube from "../queries/debugYouTube.js";
import type * as queries_instagramContent from "../queries/instagramContent.js";
import type * as queries_telephony from "../queries/telephony.js";
import type * as queries_tiktokContent from "../queries/tiktokContent.js";
import type * as queries_twitchContent from "../queries/twitchContent.js";
import type * as queries_youtubeContent from "../queries/youtubeContent.js";
import type * as ragActions from "../ragActions.js";
import type * as ragMutations from "../ragMutations.js";
import type * as ragQueries from "../ragQueries.js";
import type * as ragSocialActions from "../ragSocialActions.js";
import type * as rateLimitHelpers from "../rateLimitHelpers.js";
import type * as scheduledFunctions from "../scheduledFunctions.js";
import type * as telephonyActions from "../telephonyActions.js";
import type * as testSetup from "../testSetup.js";
import type * as voiceCloneJobs from "../voiceCloneJobs.js";
import type * as youtubeContentActions from "../youtubeContentActions.js";
import type * as youtubeTranscriptActions from "../youtubeTranscriptActions.js";
import type * as youtubeTranscripts from "../youtubeTranscripts.js";

import type {
  ApiFromModules,
  FilterApi,
  FunctionReference,
} from "convex/server";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
declare const fullApi: ApiFromModules<{
  "actions/instagramContent": typeof actions_instagramContent;
  "actions/tiktokContent": typeof actions_tiktokContent;
  "actions/twitchContent": typeof actions_twitchContent;
  audioTranscriptActions: typeof audioTranscriptActions;
  bulkJobs: typeof bulkJobs;
  http: typeof http;
  hunterActions: typeof hunterActions;
  hunterHttpEndpoints: typeof hunterHttpEndpoints;
  hunterMutations: typeof hunterMutations;
  hunterQueries: typeof hunterQueries;
  initializeHunter: typeof initializeHunter;
  jinaIntegration: typeof jinaIntegration;
  "mutations/audioTranscripts": typeof mutations_audioTranscripts;
  "mutations/callsPage": typeof mutations_callsPage;
  "mutations/clearCachedTranscripts": typeof mutations_clearCachedTranscripts;
  "mutations/instagramContent": typeof mutations_instagramContent;
  "mutations/telephony": typeof mutations_telephony;
  "mutations/tiktokContent": typeof mutations_tiktokContent;
  "mutations/twitchContent": typeof mutations_twitchContent;
  "mutations/youtubeContent": typeof mutations_youtubeContent;
  "mutations/youtubeTranscripts": typeof mutations_youtubeTranscripts;
  proceduralAudio: typeof proceduralAudio;
  "queries/audioTranscripts": typeof queries_audioTranscripts;
  "queries/callsPage": typeof queries_callsPage;
  "queries/debugYouTube": typeof queries_debugYouTube;
  "queries/instagramContent": typeof queries_instagramContent;
  "queries/telephony": typeof queries_telephony;
  "queries/tiktokContent": typeof queries_tiktokContent;
  "queries/twitchContent": typeof queries_twitchContent;
  "queries/youtubeContent": typeof queries_youtubeContent;
  ragActions: typeof ragActions;
  ragMutations: typeof ragMutations;
  ragQueries: typeof ragQueries;
  ragSocialActions: typeof ragSocialActions;
  rateLimitHelpers: typeof rateLimitHelpers;
  scheduledFunctions: typeof scheduledFunctions;
  telephonyActions: typeof telephonyActions;
  testSetup: typeof testSetup;
  voiceCloneJobs: typeof voiceCloneJobs;
  youtubeContentActions: typeof youtubeContentActions;
  youtubeTranscriptActions: typeof youtubeTranscriptActions;
  youtubeTranscripts: typeof youtubeTranscripts;
}>;
declare const fullApiWithMounts: typeof fullApi;

export declare const api: FilterApi<
  typeof fullApiWithMounts,
  FunctionReference<any, "public">
>;
export declare const internal: FilterApi<
  typeof fullApiWithMounts,
  FunctionReference<any, "internal">
>;

export declare const components: {
  rateLimiter: {
    lib: {
      checkRateLimit: FunctionReference<
        "query",
        "internal",
        {
          config:
            | {
                capacity?: number;
                kind: "token bucket";
                maxReserved?: number;
                period: number;
                rate: number;
                shards?: number;
                start?: null;
              }
            | {
                capacity?: number;
                kind: "fixed window";
                maxReserved?: number;
                period: number;
                rate: number;
                shards?: number;
                start?: number;
              };
          count?: number;
          key?: string;
          name: string;
          reserve?: boolean;
          throws?: boolean;
        },
        { ok: true; retryAfter?: number } | { ok: false; retryAfter: number }
      >;
      clearAll: FunctionReference<
        "mutation",
        "internal",
        { before?: number },
        null
      >;
      getServerTime: FunctionReference<"mutation", "internal", {}, number>;
      getValue: FunctionReference<
        "query",
        "internal",
        {
          config:
            | {
                capacity?: number;
                kind: "token bucket";
                maxReserved?: number;
                period: number;
                rate: number;
                shards?: number;
                start?: null;
              }
            | {
                capacity?: number;
                kind: "fixed window";
                maxReserved?: number;
                period: number;
                rate: number;
                shards?: number;
                start?: number;
              };
          key?: string;
          name: string;
          sampleShards?: number;
        },
        {
          config:
            | {
                capacity?: number;
                kind: "token bucket";
                maxReserved?: number;
                period: number;
                rate: number;
                shards?: number;
                start?: null;
              }
            | {
                capacity?: number;
                kind: "fixed window";
                maxReserved?: number;
                period: number;
                rate: number;
                shards?: number;
                start?: number;
              };
          shard: number;
          ts: number;
          value: number;
        }
      >;
      rateLimit: FunctionReference<
        "mutation",
        "internal",
        {
          config:
            | {
                capacity?: number;
                kind: "token bucket";
                maxReserved?: number;
                period: number;
                rate: number;
                shards?: number;
                start?: null;
              }
            | {
                capacity?: number;
                kind: "fixed window";
                maxReserved?: number;
                period: number;
                rate: number;
                shards?: number;
                start?: number;
              };
          count?: number;
          key?: string;
          name: string;
          reserve?: boolean;
          throws?: boolean;
        },
        { ok: true; retryAfter?: number } | { ok: false; retryAfter: number }
      >;
      resetRateLimit: FunctionReference<
        "mutation",
        "internal",
        { key?: string; name: string },
        null
      >;
    };
    time: {
      getServerTime: FunctionReference<"mutation", "internal", {}, number>;
    };
  };
};



================================================
FILE: convex/_generated/api.js
================================================
/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import { anyApi, componentsGeneric } from "convex/server";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
export const api = anyApi;
export const internal = anyApi;
export const components = componentsGeneric();



================================================
FILE: convex/_generated/dataModel.d.ts
================================================
/* eslint-disable */
/**
 * Generated data model types.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  DataModelFromSchemaDefinition,
  DocumentByName,
  TableNamesInDataModel,
  SystemTableNames,
} from "convex/server";
import type { GenericId } from "convex/values";
import schema from "../schema.js";

/**
 * The names of all of your Convex tables.
 */
export type TableNames = TableNamesInDataModel<DataModel>;

/**
 * The type of a document stored in Convex.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Doc<TableName extends TableNames> = DocumentByName<
  DataModel,
  TableName
>;

/**
 * An identifier for a document in Convex.
 *
 * Convex documents are uniquely identified by their `Id`, which is accessible
 * on the `_id` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).
 *
 * Documents can be loaded using `db.get(id)` in query and mutation functions.
 *
 * IDs are just strings at runtime, but this type can be used to distinguish them from other
 * strings when type checking.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Id<TableName extends TableNames | SystemTableNames> =
  GenericId<TableName>;

/**
 * A type describing your Convex data model.
 *
 * This type includes information about what tables you have, the type of
 * documents stored in those tables, and the indexes defined on them.
 *
 * This type is used to parameterize methods like `queryGeneric` and
 * `mutationGeneric` to make them type-safe.
 */
export type DataModel = DataModelFromSchemaDefinition<typeof schema>;



================================================
FILE: convex/_generated/server.d.ts
================================================
/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  ActionBuilder,
  AnyComponents,
  HttpActionBuilder,
  MutationBuilder,
  QueryBuilder,
  GenericActionCtx,
  GenericMutationCtx,
  GenericQueryCtx,
  GenericDatabaseReader,
  GenericDatabaseWriter,
  FunctionReference,
} from "convex/server";
import type { DataModel } from "./dataModel.js";

type GenericCtx =
  | GenericActionCtx<DataModel>
  | GenericMutationCtx<DataModel>
  | GenericQueryCtx<DataModel>;

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const query: QueryBuilder<DataModel, "public">;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const internalQuery: QueryBuilder<DataModel, "internal">;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const mutation: MutationBuilder<DataModel, "public">;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const internalMutation: MutationBuilder<DataModel, "internal">;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export declare const action: ActionBuilder<DataModel, "public">;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export declare const internalAction: ActionBuilder<DataModel, "internal">;

/**
 * Define an HTTP action.
 *
 * This function will be used to respond to HTTP requests received by a Convex
 * deployment if the requests matches the path and method where this action
 * is routed. Be sure to route your action in `convex/http.js`.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Import this function from `convex/http.js` and route it to hook it up.
 */
export declare const httpAction: HttpActionBuilder;

/**
 * A set of services for use within Convex query functions.
 *
 * The query context is passed as the first argument to any Convex query
 * function run on the server.
 *
 * This differs from the {@link MutationCtx} because all of the services are
 * read-only.
 */
export type QueryCtx = GenericQueryCtx<DataModel>;

/**
 * A set of services for use within Convex mutation functions.
 *
 * The mutation context is passed as the first argument to any Convex mutation
 * function run on the server.
 */
export type MutationCtx = GenericMutationCtx<DataModel>;

/**
 * A set of services for use within Convex action functions.
 *
 * The action context is passed as the first argument to any Convex action
 * function run on the server.
 */
export type ActionCtx = GenericActionCtx<DataModel>;

/**
 * An interface to read from the database within Convex query functions.
 *
 * The two entry points are {@link DatabaseReader.get}, which fetches a single
 * document by its {@link Id}, or {@link DatabaseReader.query}, which starts
 * building a query.
 */
export type DatabaseReader = GenericDatabaseReader<DataModel>;

/**
 * An interface to read from and write to the database within Convex mutation
 * functions.
 *
 * Convex guarantees that all writes within a single mutation are
 * executed atomically, so you never have to worry about partial writes leaving
 * your data in an inconsistent state. See [the Convex Guide](https://docs.convex.dev/understanding/convex-fundamentals/functions#atomicity-and-optimistic-concurrency-control)
 * for the guarantees Convex provides your functions.
 */
export type DatabaseWriter = GenericDatabaseWriter<DataModel>;



================================================
FILE: convex/_generated/server.js
================================================
/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  actionGeneric,
  httpActionGeneric,
  queryGeneric,
  mutationGeneric,
  internalActionGeneric,
  internalMutationGeneric,
  internalQueryGeneric,
  componentsGeneric,
} from "convex/server";

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const query = queryGeneric;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const internalQuery = internalQueryGeneric;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const mutation = mutationGeneric;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const internalMutation = internalMutationGeneric;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export const action = actionGeneric;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export const internalAction = internalActionGeneric;

/**
 * Define a Convex HTTP action.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument, and a `Request` object
 * as its second.
 * @returns The wrapped endpoint function. Route a URL path to this function in `convex/http.js`.
 */
export const httpAction = httpActionGeneric;



================================================
FILE: convex/actions/instagramContent.ts
================================================
"use node";

import { v } from "convex/values";
import { action } from "../_generated/server";
import { api } from "../_generated/api";

// Action to create user fetch job (calls backend API)
export const createUserFetchJob = action({
  args: {
    jobId: v.string(),
    username: v.string(),
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    const { jobId, username, userId } = args;
    
    console.log('[Convex Action] Creating Instagram user fetch job:', jobId, username);
    
    // First create job record in database
    await ctx.runMutation(api.mutations.instagramContent.createJobRecord, {
      jobId,
      userId,
      username,
      action: "fetch_user",
    });
    
    try {
      // Call backend API
      const apiUrl = process.env.BACKEND_API_URL || 'http://localhost:8000';
      const response = await fetch(`${apiUrl}/api/public/instagram/user`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-API-Key': process.env.API_KEY || '',
        },
        body: JSON.stringify({
          job_id: jobId,
          username,
          user_id: userId,
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Backend API error: ${response.status}`);
      }
      
      const result = await response.json();
      console.log('[Convex Action] Instagram user job created:', result);
      
      return { success: true, jobId };
    } catch (error) {
      console.error('[Convex Action] Error creating Instagram user job:', error);
      
      // Update job status to failed
      await ctx.runMutation(api.mutations.instagramContent.updateJobStatus, {
        jobId,
        status: "failed",
        error: error instanceof Error ? error.message : "Unknown error",
      });
      
      throw error;
    }
  },
});

// Action to create posts fetch job (calls backend API)
export const createPostsFetchJob = action({
  args: {
    jobId: v.string(),
    username: v.string(),
    userId: v.string(),
    count: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const { jobId, username, userId, count = 12 } = args;
    
    console.log('[Convex Action] Creating Instagram posts fetch job:', jobId, username, count);
    
    // First create job record in database
    await ctx.runMutation(api.mutations.instagramContent.createJobRecord, {
      jobId,
      userId,
      username,
      action: "fetch_posts",
      count,
    });
    
    try {
      // Call backend API
      const apiUrl = process.env.BACKEND_API_URL || 'http://localhost:8000';
      const response = await fetch(`${apiUrl}/api/public/instagram/posts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-API-Key': process.env.API_KEY || '',
        },
        body: JSON.stringify({
          job_id: jobId,
          username,
          user_id: userId,
          count,
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Backend API error: ${response.status}`);
      }
      
      const result = await response.json();
      console.log('[Convex Action] Instagram posts job created:', result);
      
      return { success: true, jobId };
    } catch (error) {
      console.error('[Convex Action] Error creating Instagram posts job:', error);
      
      // Update job status to failed
      await ctx.runMutation(api.mutations.instagramContent.updateJobStatus, {
        jobId,
        status: "failed",
        error: error instanceof Error ? error.message : "Unknown error",
      });
      
      throw error;
    }
  },
});

// Action to create download job (calls backend API)
export const createDownloadJob = action({
  args: {
    jobId: v.string(),
    postIds: v.array(v.string()),
    userId: v.string(),
    username: v.string(),
  },
  handler: async (ctx, args) => {
    const { jobId, postIds, userId, username } = args;
    
    console.log('[Convex Action] Creating Instagram download job:', jobId, postIds.length, 'posts');
    
    // First create job record in database
    await ctx.runMutation(api.mutations.instagramContent.createJobRecord, {
      jobId,
      userId,
      username,
      action: "download_posts",
      postIds,
    });
    
    try {
      // Call backend API
      const apiUrl = process.env.BACKEND_API_URL || 'http://localhost:8000';
      const response = await fetch(`${apiUrl}/api/public/instagram/download`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-API-Key': process.env.API_KEY || '',
        },
        body: JSON.stringify({
          job_id: jobId,
          post_ids: postIds,
          user_id: userId,
          username,
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Backend API error: ${response.status}`);
      }
      
      const result = await response.json();
      console.log('[Convex Action] Instagram download job created:', result);
      
      return { success: true, jobId };
    } catch (error) {
      console.error('[Convex Action] Error creating Instagram download job:', error);
      
      // Update job status to failed
      await ctx.runMutation(api.mutations.instagramContent.updateJobStatus, {
        jobId,
        status: "failed",
        error: error instanceof Error ? error.message : "Unknown error",
      });
      
      throw error;
    }
  },
});


================================================
FILE: convex/actions/tiktokContent.ts
================================================
"use node";

import { v } from "convex/values";
import { action } from "../_generated/server";

// Action to create user fetch job (calls backend API)
export const createUserFetchJob = action({
  args: {
    jobId: v.string(),
    userId: v.string(),
    username: v.string(),
  },
  handler: async (ctx, args) => {
    // First create job record in database
    await ctx.runMutation("mutations/tiktokContent:createUserFetchJob", {
      jobId: args.jobId,
      userId: args.userId,
      username: args.username,
    });

    // Call backend API to process the job
    const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
    const API_KEY = process.env.NEXT_PUBLIC_API_KEY;

    const response = await fetch(`${BACKEND_URL}/api/public/tiktok/user`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${API_KEY}`,
      },
      body: JSON.stringify({
        job_id: args.jobId,
        username: args.username,
        user_id: args.userId,
      }),
    });

    if (!response.ok) {
      throw new Error(`Backend API error: ${response.statusText}`);
    }

    const result = await response.json();
    return result;
  },
});

// Action to create videos fetch job (calls backend API)
export const createVideosFetchJob = action({
  args: {
    jobId: v.string(),
    userId: v.string(),
    username: v.string(),
    count: v.optional(v.number()),
    cursor: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    // First create job record in database
    await ctx.runMutation("mutations/tiktokContent:createVideosFetchJob", {
      jobId: args.jobId,
      userId: args.userId,
      username: args.username,
    });

    // Call backend API to process the job
    const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
    const API_KEY = process.env.NEXT_PUBLIC_API_KEY;

    const response = await fetch(`${BACKEND_URL}/api/public/tiktok/videos`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${API_KEY}`,
      },
      body: JSON.stringify({
        job_id: args.jobId,
        username: args.username,
        user_id: args.userId,
        count: args.count || 30,
        cursor: args.cursor || 0,
      }),
    });

    if (!response.ok) {
      throw new Error(`Backend API error: ${response.statusText}`);
    }

    const result = await response.json();
    return result;
  },
});

// Action to create download job (calls backend API)
export const createDownloadJob = action({
  args: {
    jobId: v.string(),
    userId: v.string(),
    username: v.string(),
    videoIds: v.array(v.string()),
  },
  handler: async (ctx, args) => {
    // First create job record in database
    await ctx.runMutation("mutations/tiktokContent:createDownloadJob", {
      jobId: args.jobId,
      userId: args.userId,
      username: args.username,
      videoIds: args.videoIds,
    });

    // Call backend API to process the job
    const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
    const API_KEY = process.env.NEXT_PUBLIC_API_KEY;

    const response = await fetch(`${BACKEND_URL}/api/public/tiktok/download`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${API_KEY}`,
      },
      body: JSON.stringify({
        job_id: args.jobId,
        video_ids: args.videoIds,
        user_id: args.userId,
        username: args.username,
      }),
    });

    if (!response.ok) {
      throw new Error(`Backend API error: ${response.statusText}`);
    }

    const result = await response.json();
    return result;
  },
});


================================================
FILE: convex/actions/twitchContent.ts
================================================
"use node";

import { v } from "convex/values";
import { action } from "../_generated/server";
import { api } from "../_generated/api";

// Create channel fetch job action
export const createChannelFetchJob = action({
  args: {
    jobId: v.string(),
    channelUrl: v.string(),
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    const { jobId, channelUrl, userId } = args;
    
    console.log('[Convex Action] Creating Twitch channel fetch job:', jobId);
    
    // First create the job record in the database
    await ctx.runMutation(api.mutations.twitchContent.createJobRecord, {
      jobId,
      userId,
      channelUrl,
      action: "fetch_channel",
    });
    
    // Call backend API
    try {
      const response = await fetch('http://localhost:8000/api/public/twitch/channel', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          job_id: jobId,
          channel_url: channelUrl,
          user_id: userId,
        }),
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }
      
      const result = await response.json();
      console.log('[Convex Action] Twitch channel fetch job created:', result);
      
      // Update job status to processing
      await ctx.runMutation(api.mutations.twitchContent.updateJobStatus, {
        jobId,
        status: "processing",
      });
      
      return { success: true, result };
      
    } catch (error) {
      console.error('[Convex Action] Error creating Twitch channel fetch job:', error);
      
      // Update job status to failed
      await ctx.runMutation(api.mutations.twitchContent.updateJobStatus, {
        jobId,
        status: "failed",
        error: error instanceof Error ? error.message : 'Unknown error',
      });
      
      throw error;
    }
  },
});

// Create videos fetch job action
export const createVideosFetchJob = action({
  args: {
    jobId: v.string(),
    channelName: v.string(),
    userId: v.string(),
    count: v.optional(v.number()),
    videoType: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const { jobId, channelName, userId, count = 6, videoType = "archive" } = args;
    
    console.log('[Convex Action] Creating Twitch videos fetch job:', jobId);
    
    // First create the job record in the database
    await ctx.runMutation(api.mutations.twitchContent.createJobRecord, {
      jobId,
      userId,
      channelName,
      action: "fetch_videos",
      count,
      videoType,
    });
    
    // Call backend API
    try {
      const response = await fetch('http://localhost:8000/api/public/twitch/videos', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          job_id: jobId,
          channel_name: channelName,
          user_id: userId,
          count,
          video_type: videoType,
        }),
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }
      
      const result = await response.json();
      console.log('[Convex Action] Twitch videos fetch job created:', result);
      
      // Update job status to processing
      await ctx.runMutation(api.mutations.twitchContent.updateJobStatus, {
        jobId,
        status: "processing",
      });
      
      return { success: true, result };
      
    } catch (error) {
      console.error('[Convex Action] Error creating Twitch videos fetch job:', error);
      
      // Update job status to failed
      await ctx.runMutation(api.mutations.twitchContent.updateJobStatus, {
        jobId,
        status: "failed",
        error: error instanceof Error ? error.message : 'Unknown error',
      });
      
      throw error;
    }
  },
});

// Create download job action
export const createDownloadJob = action({
  args: {
    jobId: v.string(),
    videoIds: v.array(v.string()),
    userId: v.string(),
    channelName: v.string(),
  },
  handler: async (ctx, args) => {
    const { jobId, videoIds, userId, channelName } = args;
    
    console.log('[Convex Action] Creating Twitch download job:', jobId, 'videos:', videoIds.length);
    
    // First create the job record in the database
    await ctx.runMutation(api.mutations.twitchContent.createJobRecord, {
      jobId,
      userId,
      channelName,
      action: "download_videos",
      videoIds,
    });
    
    // Call backend API
    try {
      const response = await fetch('http://localhost:8000/api/public/twitch/download', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          job_id: jobId,
          video_ids: videoIds,
          user_id: userId,
          channel_name: channelName,
        }),
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }
      
      const result = await response.json();
      console.log('[Convex Action] Twitch download job created:', result);
      
      // Update job status to processing
      await ctx.runMutation(api.mutations.twitchContent.updateJobStatus, {
        jobId,
        status: "processing",
      });
      
      return { success: true, result };
      
    } catch (error) {
      console.error('[Convex Action] Error creating Twitch download job:', error);
      
      // Update job status to failed
      await ctx.runMutation(api.mutations.twitchContent.updateJobStatus, {
        jobId,
        status: "failed",
        error: error instanceof Error ? error.message : 'Unknown error',
      });
      
      throw error;
    }
  },
});


================================================
FILE: convex/mutations/audioTranscripts.ts
================================================
import { mutation } from "../_generated/server";
import { v } from "convex/values";

// Create a new audio transcription job
export const createJob = mutation({
  args: {
    jobId: v.string(),
    userId: v.string(),
    fileName: v.string(),
    fileSize: v.number(),
    fileFormat: v.string(),
    language: v.optional(v.string()),
    prompt: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const now = new Date().toISOString();
    
    // Calculate expiry based on user tier (7 days for free tier by default)
    const expiryDate = new Date();
    expiryDate.setDate(expiryDate.getDate() + 7);
    
    const job = await ctx.db.insert("audioTranscripts", {
      ...args,
      status: "pending",
      createdAt: now,
      expiresAt: expiryDate.toISOString(),
    });
    
    return job;
  },
});

// Update job status
export const updateJobStatus = mutation({
  args: {
    jobId: v.string(),
    status: v.union(
      v.literal("pending"),
      v.literal("processing"),
      v.literal("completed"),
      v.literal("failed")
    ),
    transcript: v.optional(v.string()),
    error: v.optional(v.string()),
    duration: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("audioTranscripts")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    const updates: any = {
      status: args.status,
    };
    
    if (args.transcript !== undefined) {
      updates.transcript = args.transcript;
    }
    
    if (args.error !== undefined) {
      updates.error = args.error;
    }
    
    if (args.duration !== undefined) {
      updates.duration = args.duration;
    }
    
    if (args.status === "completed" || args.status === "failed") {
      updates.completedAt = new Date().toISOString();
    }
    
    await ctx.db.patch(job._id, updates);
    
    return { success: true };
  },
});

// Webhook handler for transcription updates
export const transcriptWebhook = mutation({
  args: {
    jobId: v.string(),
    status: v.string(),
    transcript: v.optional(v.string()),
    fileName: v.optional(v.string()),
    fileSize: v.optional(v.number()),
    fileFormat: v.optional(v.string()),
    language: v.optional(v.string()),
    userId: v.optional(v.string()),
    error: v.optional(v.string()),
    sentimentAnalysis: v.optional(v.object({
      sentiment: v.string(),
      confidence: v.number(),
      emotions: v.optional(v.object({
        angry: v.number(),
        disgusted: v.number(),
        fearful: v.number(),
        happy: v.number(),
        neutral: v.number(),
        sad: v.number(),
        surprised: v.number()
      }))
    })),
    enableRealtimeSentiment: v.optional(v.boolean()),
    enableEmotion2vec: v.optional(v.boolean()),
    useEnhancedAsr: v.optional(v.boolean()),
    speakers: v.optional(v.array(v.object({
      speaker: v.string(),
      start: v.number(),
      end: v.number(),
      duration: v.number()
    }))),
  },
  handler: async (ctx, args) => {
    console.log("Received audio transcript webhook:", args);
    
    // Find the job
    const job = await ctx.db
      .query("audioTranscripts")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      console.error(`Job ${args.jobId} not found`);
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    // Map status
    let mappedStatus: "pending" | "processing" | "completed" | "failed";
    switch (args.status) {
      case "completed":
        mappedStatus = "completed";
        break;
      case "failed":
        mappedStatus = "failed";
        break;
      case "processing":
        mappedStatus = "processing";
        break;
      default:
        mappedStatus = "processing";
    }
    
    // Update the job
    const updates: any = {
      status: mappedStatus,
    };
    
    if (args.transcript) {
      updates.transcript = args.transcript;
    }
    
    if (args.error) {
      updates.error = args.error;
    }
    
    if (args.sentimentAnalysis) {
      updates.sentimentAnalysis = args.sentimentAnalysis;
    }
    
    if (args.speakers) {
      updates.speakers = args.speakers;
    }
    
    if (args.enableRealtimeSentiment !== undefined) {
      updates.enableRealtimeSentiment = args.enableRealtimeSentiment;
    }
    
    if (args.enableEmotion2vec !== undefined) {
      updates.enableEmotion2vec = args.enableEmotion2vec;
    }
    
    if (args.useEnhancedAsr !== undefined) {
      updates.useEnhancedAsr = args.useEnhancedAsr;
    }
    
    if (mappedStatus === "completed" || mappedStatus === "failed") {
      updates.completedAt = new Date().toISOString();
    }
    
    await ctx.db.patch(job._id, updates);
    
    console.log(`Updated job ${args.jobId} to status ${mappedStatus}`);
    
    return { success: true };
  },
});

// Delete expired jobs
export const deleteExpiredJobs = mutation({
  args: {},
  handler: async (ctx) => {
    const now = new Date().toISOString();
    
    // Find expired jobs
    const expiredJobs = await ctx.db
      .query("audioTranscripts")
      .withIndex("by_expiry")
      .filter((q) => 
        q.and(
          q.neq(q.field("expiresAt"), undefined),
          q.lt(q.field("expiresAt"), now)
        )
      )
      .collect();
    
    // Delete expired jobs
    for (const job of expiredJobs) {
      await ctx.db.delete(job._id);
    }
    
    return { deleted: expiredJobs.length };
  },
});


================================================
FILE: convex/mutations/callsPage.ts
================================================
import { mutation } from "../_generated/server";
import { v } from "convex/values";

// Update agent status
export const updateAgentStatus = mutation({
  args: {
    agentId: v.id("voiceAgents"),
    status: v.union(
      v.literal("active"),
      v.literal("idle"),
      v.literal("offline"),
      v.literal("configuring"),
      v.literal("error")
    ),
  },
  handler: async (ctx, args) => {
    const agent = await ctx.db.get(args.agentId);
    if (!agent) {
      throw new Error("Agent not found");
    }

    await ctx.db.patch(args.agentId, {
      status: args.status,
      updatedAt: new Date().toISOString(),
      ...(args.status === "active" ? { lastActiveAt: new Date().toISOString() } : {}),
    });

    return { success: true };
  },
});

// Create a new live call entry
export const createLiveCall = mutation({
  args: {
    callId: v.string(),
    agentId: v.id("voiceAgents"),
    customerName: v.string(),
    customerPhone: v.string(),
  },
  handler: async (ctx, args) => {
    const agent = await ctx.db.get(args.agentId);
    if (!agent) {
      throw new Error("Agent not found");
    }

    const liveCallId = await ctx.db.insert("liveCalls", {
      callId: args.callId,
      agentId: args.agentId,
      agentName: agent.name,
      customerName: args.customerName,
      customerPhone: args.customerPhone,
      startTime: new Date().toISOString(),
      duration: "0s",
      status: "connecting",
      sentiment: "neutral",
      lastTranscriptUpdate: new Date().toISOString(),
      isRecording: true,
    });

    // Update agent status to active
    await ctx.db.patch(args.agentId, {
      status: "active",
      lastActiveAt: new Date().toISOString(),
    });

    return { liveCallId };
  },
});

// Update live call status
export const updateLiveCall = mutation({
  args: {
    callId: v.string(),
    status: v.optional(v.union(
      v.literal("connecting"),
      v.literal("active"),
      v.literal("hold"),
      v.literal("transferring")
    )),
    sentiment: v.optional(v.union(
      v.literal("positive"),
      v.literal("negative"),
      v.literal("neutral")
    )),
    duration: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const liveCall = await ctx.db
      .query("liveCalls")
      .withIndex("by_status")
      .filter(q => q.eq(q.field("callId"), args.callId))
      .first();

    if (!liveCall) {
      throw new Error("Live call not found");
    }

    const updates: any = {
      lastTranscriptUpdate: new Date().toISOString(),
    };

    if (args.status) updates.status = args.status;
    if (args.sentiment) updates.sentiment = args.sentiment;
    if (args.duration) updates.duration = args.duration;

    await ctx.db.patch(liveCall._id, updates);

    return { success: true };
  },
});

// End a live call and create analytics record
export const endLiveCall = mutation({
  args: {
    callId: v.string(),
    status: v.union(
      v.literal("COMPLETED"),
      v.literal("FAILED"),
      v.literal("TRANSFERRED"),
      v.literal("ABANDONED")
    ),
    resolution: v.union(
      v.literal("RESOLVED"),
      v.literal("UNRESOLVED"),
      v.literal("ESCALATED"),
      v.literal("TRANSFERRED")
    ),
    sentiment: v.union(
      v.literal("POSITIVE"),
      v.literal("NEGATIVE"),
      v.literal("NEUTRAL"),
      v.literal("MIXED")
    ),
    qualityScore: v.number(),
  },
  handler: async (ctx, args) => {
    // Find and remove the live call
    const liveCall = await ctx.db
      .query("liveCalls")
      .filter(q => q.eq(q.field("callId"), args.callId))
      .first();

    if (!liveCall) {
      throw new Error("Live call not found");
    }

    // Create call analytics record
    const analyticsId = await ctx.db.insert("callAnalytics", {
      callId: args.callId,
      agentName: liveCall.agentName,
      agentId: liveCall.agentId,
      customerName: liveCall.customerName,
      customerPhone: liveCall.customerPhone,
      status: args.status,
      startTime: liveCall.startTime,
      endTime: new Date().toISOString(),
      duration: liveCall.duration,
      queueTime: "0s", // This would be calculated from actual queue time
      holdTime: "0s", // This would be calculated from hold events
      resolution: args.resolution,
      hasTransfer: args.resolution === "TRANSFERRED",
      sentiment: args.sentiment,
      qualityScore: `${args.qualityScore}/10`,
      campaignName: "General", // This would come from actual campaign assignment
      createdAt: Date.now(),
      updatedAt: Date.now(),
    });

    // Create agent call log
    await ctx.db.insert("agentCallLogs", {
      agentId: liveCall.agentId,
      callId: args.callId,
      phoneNumber: liveCall.customerPhone,
      direction: "inbound", // This would be determined by actual call direction
      startTime: liveCall.startTime,
      endTime: new Date().toISOString(),
      duration: parseDurationToSeconds(liveCall.duration),
      status: args.status === "COMPLETED" ? "completed" : "failed",
      sentimentScore: sentimentToScore(args.sentiment),
      satisfactionRating: args.qualityScore,
      webhookSent: false,
    });

    // Delete the live call record
    await ctx.db.delete(liveCall._id);

    // Update agent metrics
    const agent = await ctx.db.get(liveCall.agentId);
    if (agent) {
      const newTotalCalls = agent.totalCalls + 1;
      const newSuccessRate = args.status === "COMPLETED" 
        ? ((agent.successRate * agent.totalCalls + 100) / newTotalCalls)
        : ((agent.successRate * agent.totalCalls) / newTotalCalls);

      await ctx.db.patch(liveCall.agentId, {
        totalCalls: newTotalCalls,
        successRate: Math.round(newSuccessRate),
        updatedAt: new Date().toISOString(),
      });
    }

    return { analyticsId };
  },
});

// Add transcript entry
export const addTranscriptEntry = mutation({
  args: {
    callId: v.string(),
    speaker: v.union(v.literal("agent"), v.literal("customer"), v.literal("system")),
    content: v.string(),
    timestamp: v.string(),
    sentiment: v.optional(v.union(
      v.literal("positive"),
      v.literal("negative"),
      v.literal("neutral")
    )),
  },
  handler: async (ctx, args) => {
    // Get the current count for ordering
    const existingEntries = await ctx.db
      .query("transcriptEntries")
      .withIndex("by_call", q => q.eq("callId", args.callId))
      .collect();

    const transcriptId = await ctx.db.insert("transcriptEntries", {
      callId: args.callId,
      timestamp: args.timestamp,
      speaker: args.speaker,
      content: args.content,
      sentiment: args.sentiment,
      order: existingEntries.length,
    });

    return { transcriptId };
  },
});

// Update phone number statistics
export const updatePhoneNumberStats = mutation({
  args: {
    phoneNumberId: v.id("phoneNumbers"),
    incrementCalls: v.optional(v.boolean()),
    updateLastUsed: v.optional(v.boolean()),
  },
  handler: async (ctx, args) => {
    const phoneNumber = await ctx.db.get(args.phoneNumberId);
    if (!phoneNumber) {
      throw new Error("Phone number not found");
    }

    const updates: any = {
      updatedAt: new Date().toISOString(),
    };

    if (args.incrementCalls) {
      updates.callsToday = phoneNumber.callsToday + 1;
      updates.callsThisWeek = phoneNumber.callsThisWeek + 1;
      updates.callsThisMonth = phoneNumber.callsThisMonth + 1;
    }

    if (args.updateLastUsed) {
      updates.lastUsed = new Date().toISOString();
    }

    await ctx.db.patch(args.phoneNumberId, updates);

    return { success: true };
  },
});

// Helper functions
function parseDurationToSeconds(duration: string): number {
  const match = duration.match(/(\d+)m\s+(\d+)s/);
  if (match) {
    return parseInt(match[1]) * 60 + parseInt(match[2]);
  }
  
  const secondsMatch = duration.match(/(\d+)s/);
  if (secondsMatch) {
    return parseInt(secondsMatch[1]);
  }
  
  return 0;
}

function sentimentToScore(sentiment: string): number {
  switch (sentiment) {
    case "POSITIVE": return 0.8;
    case "NEGATIVE": return 0.2;
    case "NEUTRAL": return 0.5;
    case "MIXED": return 0.5;
    default: return 0.5;
  }
}


================================================
FILE: convex/mutations/clearCachedTranscripts.ts
================================================
import { mutation } from "../_generated/server";

export const clearCachedTranscripts = mutation({
  handler: async (ctx) => {
    // Get all transcripts with placeholder text
    const transcripts = await ctx.db
      .query("youtubeTranscripts")
      .collect();

    let clearedCount = 0;
    
    // Delete transcripts with placeholder text
    for (const transcript of transcripts) {
      if (transcript.transcript === "Transcript functionality requires subtitle file parsing implementation") {
        await ctx.db.delete(transcript._id);
        clearedCount++;
      }
    }

    return { 
      message: `Cleared ${clearedCount} cached transcripts with placeholder text`,
    };
  },
});


================================================
FILE: convex/mutations/instagramContent.ts
================================================
import { v } from "convex/values";
import { mutation } from "../_generated/server";
import { Doc, Id } from "../_generated/dataModel";

// Create job record (called by action)
export const createJobRecord = mutation({
  args: {
    jobId: v.string(),
    userId: v.string(),
    username: v.string(),
    action: v.string(),
    postIds: v.optional(v.array(v.string())),
    count: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    console.log('[Convex Mutation] Creating Instagram job record:', args.jobId, args.action);
    
    const jobData: any = {
      jobId: args.jobId,
      userId: args.userId,
      username: args.username,
      action: args.action,
      status: "pending",
      createdAt: Date.now(),
    };
    
    if (args.postIds) {
      jobData.postIds = args.postIds;
      jobData.totalPosts = args.postIds.length;
      jobData.progress = 0;
    }
    if (args.count !== undefined) jobData.count = args.count;
    
    const id = await ctx.db.insert("instagramJobs", jobData);
    return id;
  },
});

// Update job status (called by action)
export const updateJobStatus = mutation({
  args: {
    jobId: v.string(),
    status: v.string(),
    error: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("instagramJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    const updates: any = {
      status: args.status,
    };
    
    if (args.error) {
      updates.error = args.error;
      updates.completedAt = Date.now();
    }
    
    await ctx.db.patch(job._id, updates);
  },
});

// Job webhook handler (called by backend)
export const jobWebhook = mutation({
  args: {
    jobId: v.string(),
    status: v.string(),
    userData: v.optional(v.any()),
    postsData: v.optional(v.any()),
    downloadData: v.optional(v.any()),
    progress: v.optional(v.number()),
    totalPosts: v.optional(v.number()),
    completedPosts: v.optional(v.number()),
    error: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const { jobId, status, userData, postsData, downloadData, progress, error } = args;
    
    console.log('[Convex] Instagram job webhook received:', jobId, status);
    
    // Find the job
    const job = await ctx.db
      .query("instagramJobs")
      .withIndex("by_job", (q) => q.eq("jobId", jobId))
      .first();
    
    if (!job) {
      console.error('[Convex] Job not found:', jobId);
      return;
    }
    
    // Update job status
    const updates: Partial<Doc<"instagramJobs">> = {
      status: status as any,
    };
    
    if (progress !== undefined) {
      updates.progress = progress;
    }
    
    if (args.totalPosts !== undefined) {
      updates.totalPosts = args.totalPosts;
    }
    
    if (args.completedPosts !== undefined) {
      updates.completedPosts = args.completedPosts;
    }
    
    if (error) {
      updates.error = error;
    }
    
    if (status === "completed") {
      updates.completedAt = Date.now();
      
      // Store user data
      if (userData) {
        console.log('[Convex] Storing Instagram user data:', userData.username);
        
        // Store result in job
        updates.result = { userData };
        
        // Upsert user record
        const existingUser = await ctx.db
          .query("instagramUsers")
          .withIndex("by_username", (q) => q.eq("username", userData.username))
          .first();
        
        if (existingUser) {
          await ctx.db.patch(existingUser._id, {
            ...userData,
            cachedAt: Date.now(),
          });
        } else {
          await ctx.db.insert("instagramUsers", {
            ...userData,
            cachedAt: Date.now(),
          });
        }
      }
      
      // Store posts data
      if (postsData && postsData.posts) {
        console.log('[Convex] Storing Instagram posts:', postsData.posts.length);
        
        // Store result in job
        updates.result = { postsData };
        
        // Get username from job
        const username = job.username;
        
        if (username) {
          // Delete existing posts for this user to avoid duplicates
          const existingPosts = await ctx.db
            .query("instagramPosts")
            .withIndex("by_username", (q) => q.eq("username", username))
            .collect();
          
          for (const post of existingPosts) {
            await ctx.db.delete(post._id);
          }
          
          // Insert new posts
          for (const post of postsData.posts) {
            await ctx.db.insert("instagramPosts", {
              ...post,
              username,
              cachedAt: Date.now(),
            });
          }
        }
      }
      
      // Store download data
      if (downloadData) {
        console.log('[Convex] Instagram download completed:', downloadData);
        updates.result = { downloadData };
      }
    }
    
    await ctx.db.patch(job._id, updates);
  },
});

// Cleanup Instagram data
export const cleanup = mutation({
  args: {
    userId: v.string(),
    username: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    console.log('[Convex] Cleaning up Instagram data for user:', args.userId);
    
    let deletedCount = {
      jobs: 0,
      users: 0,
      posts: 0,
    };
    
    // Get all usernames from jobs for this user
    const usernames = new Set<string>();
    
    // Delete all jobs for this user and collect usernames
    const jobs = await ctx.db
      .query("instagramJobs")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .collect();
    
    console.log(`[Instagram Cleanup] Found ${jobs.length} jobs for user ${args.userId}`);
    
    for (const job of jobs) {
      // Collect usernames from jobs
      if (job.username) {
        usernames.add(job.username);
      }
      await ctx.db.delete(job._id);
    }
    deletedCount.jobs = jobs.length;
    
    // If username is provided directly, add it to the set
    if (args.username) {
      usernames.add(args.username);
    }
    
    // Delete all users and posts for collected usernames
    for (const username of usernames) {
      console.log(`[Instagram Cleanup] Cleaning up data for username: ${username}`);
      
      // Delete user data
      const users = await ctx.db
        .query("instagramUsers")
        .withIndex("by_username", (q) => q.eq("username", username))
        .collect();
      
      for (const user of users) {
        await ctx.db.delete(user._id);
        deletedCount.users++;
      }
      
      // Delete all posts for this username
      const posts = await ctx.db
        .query("instagramPosts")
        .withIndex("by_username", (q) => q.eq("username", username))
        .collect();
      
      console.log(`[Instagram Cleanup] Found ${posts.length} posts for ${username}`);
      
      for (const post of posts) {
        await ctx.db.delete(post._id);
      }
      deletedCount.posts += posts.length;
    }
    
    console.log(`[Instagram Cleanup] Cleanup complete:`, deletedCount);
    
    return {
      success: true,
      deleted: deletedCount,
      usernames: Array.from(usernames),
    };
  },
});


================================================
FILE: convex/mutations/telephony.ts
================================================
import { mutation } from "../_generated/server";
import { v } from "convex/values";

// Create a new telephony call
export const createCall = mutation({
  args: {
    callId: v.string(),
    userId: v.string(),
    phoneNumber: v.string(),
    direction: v.union(v.literal("inbound"), v.literal("outbound")),
  },
  handler: async (ctx, args) => {
    const callId = await ctx.db.insert("telephonyCalls", {
      callId: args.callId,
      userId: args.userId,
      phoneNumber: args.phoneNumber,
      direction: args.direction,
      status: "connecting",
      startTime: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    });

    return callId;
  },
});

// Update call status
export const updateCallStatus = mutation({
  args: {
    callId: v.string(),
    status: v.string(),
    updates: v.optional(v.any()),
  },
  handler: async (ctx, args) => {
    const call = await ctx.db
      .query("telephonyCalls")
      .withIndex("by_call", (q) => q.eq("callId", args.callId))
      .first();

    if (!call) {
      throw new Error(`Call ${args.callId} not found`);
    }

    const updateData: any = {
      status: args.status,
      updatedAt: new Date().toISOString(),
    };

    if (args.updates) {
      Object.assign(updateData, args.updates);
    }

    await ctx.db.patch(call._id, updateData);
    return { success: true };
  },
});

// Update call with real-time transcript
export const updateCallTranscript = mutation({
  args: {
    callId: v.string(),
    transcript: v.string(),
    sentiment: v.string(),
  },
  handler: async (ctx, args) => {
    const call = await ctx.db
      .query("telephonyCalls")
      .withIndex("by_call", (q) => q.eq("callId", args.callId))
      .first();

    if (!call) {
      throw new Error(`Call ${args.callId} not found`);
    }

    await ctx.db.patch(call._id, {
      currentTranscript: args.transcript,
      currentSentiment: args.sentiment,
      updatedAt: new Date().toISOString(),
    });

    return { success: true };
  },
});

// Complete call with final results
export const completeCall = mutation({
  args: {
    callId: v.string(),
    finalTranscript: v.string(),
    sentimentAnalysis: v.any(),
    speakerDiarization: v.any(),
  },
  handler: async (ctx, args) => {
    const call = await ctx.db
      .query("telephonyCalls")
      .withIndex("by_call", (q) => q.eq("callId", args.callId))
      .first();

    if (!call) {
      throw new Error(`Call ${args.callId} not found`);
    }

    const startTime = new Date(call.startTime);
    const endTime = new Date();
    const duration = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);

    await ctx.db.patch(call._id, {
      status: "completed",
      fullTranscript: args.finalTranscript,
      sentimentAnalysis: args.sentimentAnalysis,
      speakerDiarization: args.speakerDiarization,
      endTime: endTime.toISOString(),
      duration,
      updatedAt: new Date().toISOString(),
    });

    return { success: true };
  },
});

// Create telephony job
export const createJob = mutation({
  args: {
    jobId: v.string(),
    userId: v.string(),
    callId: v.string(),
    jobType: v.union(
      v.literal("call_start"),
      v.literal("call_process"),
      v.literal("call_end"),
      v.literal("asr_analysis"),
      v.literal("sentiment_analysis")
    ),
    status: v.union(v.literal("pending"), v.literal("processing"), v.literal("completed"), v.literal("failed")),
    progress: v.object({
      overall: v.number(),
      currentStage: v.number(),
      itemsTotal: v.number(),
      itemsCompleted: v.number(),
      itemsFailed: v.number()
    }),
  },
  handler: async (ctx, args) => {
    const jobId = await ctx.db.insert("telephonyJobs", {
      jobId: args.jobId,
      userId: args.userId,
      callId: args.callId,
      jobType: args.jobType,
      status: args.status,
      progress: args.progress,
      createdAt: new Date().toISOString(),
    });

    return jobId;
  },
});

// Update telephony job
export const updateJob = mutation({
  args: {
    jobId: v.string(),
    status: v.string(),
    result: v.optional(v.any()),
    error: v.optional(v.string()),
    progress: v.optional(v.object({
      overall: v.number(),
      currentStage: v.number(),
      itemsTotal: v.number(),
      itemsCompleted: v.number(),
      itemsFailed: v.number()
    })),
  },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("telephonyJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();

    if (!job) {
      throw new Error(`Job ${args.jobId} not found`);
    }

    const updateData: any = {
      status: args.status,
    };

    if (args.result !== undefined) {
      updateData.result = args.result;
    }

    if (args.error !== undefined) {
      updateData.error = args.error;
    }

    if (args.progress !== undefined) {
      updateData.progress = args.progress;
    }

    if (args.status === "completed" || args.status === "failed") {
      updateData.completedAt = new Date().toISOString();
    }

    await ctx.db.patch(job._id, updateData);
    return { success: true };
  },
});

// Ingest audio chunk
export const ingestAudioChunk = mutation({
  args: {
    callId: v.string(),
    chunkId: v.string(),
    sequence: v.number(),
    audioData: v.string(),
    format: v.string(),
    sampleRate: v.number(),
    duration: v.number(),
    processed: v.boolean(),
  },
  handler: async (ctx, args) => {
    const chunkId = await ctx.db.insert("audioChunks", {
      callId: args.callId,
      chunkId: args.chunkId,
      sequence: args.sequence,
      audioData: args.audioData,
      format: args.format,
      sampleRate: args.sampleRate,
      duration: args.duration,
      processed: args.processed,
      timestamp: new Date().toISOString(),
    });

    return chunkId;
  },
});

// Update audio chunk
export const updateChunk = mutation({
  args: {
    callId: v.string(),
    chunkId: v.string(),
    transcript: v.optional(v.string()),
    sentiment: v.optional(v.string()),
    speaker: v.optional(v.string()),
    processed: v.boolean(),
  },
  handler: async (ctx, args) => {
    const chunk = await ctx.db
      .query("audioChunks")
      .withIndex("by_call", (q) => q.eq("callId", args.callId))
      .filter((q) => q.eq(q.field("chunkId"), args.chunkId))
      .first();

    if (!chunk) {
      throw new Error(`Chunk ${args.chunkId} not found`);
    }

    const updateData: any = {
      processed: args.processed,
    };

    if (args.transcript !== undefined) {
      updateData.transcript = args.transcript;
    }

    if (args.sentiment !== undefined) {
      updateData.sentiment = args.sentiment;
    }

    if (args.speaker !== undefined) {
      updateData.speaker = args.speaker;
    }

    await ctx.db.patch(chunk._id, updateData);
    return { success: true };
  },
});

// Create GStreamer job
export const createGStreamerJob = mutation({
  args: {
    jobId: v.string(),
    callId: v.string(),
    userId: v.string(),
    pipeline: v.string(),
    port: v.number(),
    codec: v.string(),
  },
  handler: async (ctx, args) => {
    const jobId = await ctx.db.insert("gstreamerJobs", {
      jobId: args.jobId,
      callId: args.callId,
      userId: args.userId,
      pipeline: args.pipeline,
      port: args.port,
      codec: args.codec,
      status: "starting",
      bytesProcessed: 0,
      packetsReceived: 0,
      errors: [],
      createdAt: new Date().toISOString(),
      startedAt: new Date().toISOString(),
    });

    return jobId;
  },
});

// Update GStreamer job
export const updateGStreamerJob = mutation({
  args: {
    jobId: v.string(),
    status: v.string(),
    bytesProcessed: v.optional(v.number()),
    packetsReceived: v.optional(v.number()),
    errors: v.optional(v.array(v.string())),
  },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("gstreamerJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();

    if (!job) {
      throw new Error(`GStreamer job ${args.jobId} not found`);
    }

    const updateData: any = {
      status: args.status,
    };

    if (args.bytesProcessed !== undefined) {
      updateData.bytesProcessed = args.bytesProcessed;
    }

    if (args.packetsReceived !== undefined) {
      updateData.packetsReceived = args.packetsReceived;
    }

    if (args.errors !== undefined) {
      updateData.errors = args.errors;
    }

    if (args.status === "completed" || args.status === "error") {
      updateData.completedAt = new Date().toISOString();
    }

    await ctx.db.patch(job._id, updateData);
    return { success: true };
  },
});


================================================
FILE: convex/mutations/tiktokContent.ts
================================================
import { v } from "convex/values";
import { mutation } from "../_generated/server";

// Create a job to fetch TikTok user information
export const createUserFetchJob = mutation({
  args: {
    jobId: v.string(),
    userId: v.string(),
    username: v.string(),
  },
  handler: async (ctx, args) => {
    // Check rate limit (20 per hour)
    const recentJobs = await ctx.db
      .query("tiktokJobs")
      .withIndex("by_user_status", (q) => 
        q.eq("userId", args.userId)
      )
      .filter((q) => 
        q.and(
          q.eq(q.field("action"), "fetch_user"),
          q.gte(q.field("createdAt"), Date.now() - 60 * 60 * 1000) // Last hour
        )
      )
      .collect();
    
    if (recentJobs.length >= 20) {
      throw new Error("Rate limit exceeded: 20 user fetches per hour");
    }
    
    // Create job
    await ctx.db.insert("tiktokJobs", {
      jobId: args.jobId,
      userId: args.userId,
      username: args.username,
      action: "fetch_user",
      status: "pending",
      createdAt: Date.now(),
    });
    
    return { success: true };
  },
});

// Create a job to fetch TikTok videos
export const createVideosFetchJob = mutation({
  args: {
    jobId: v.string(),
    userId: v.string(),
    username: v.string(),
  },
  handler: async (ctx, args) => {
    // Check rate limit (10 per hour)
    const recentJobs = await ctx.db
      .query("tiktokJobs")
      .withIndex("by_user_status", (q) => 
        q.eq("userId", args.userId)
      )
      .filter((q) => 
        q.and(
          q.eq(q.field("action"), "fetch_videos"),
          q.gte(q.field("createdAt"), Date.now() - 60 * 60 * 1000) // Last hour
        )
      )
      .collect();
    
    if (recentJobs.length >= 10) {
      throw new Error("Rate limit exceeded: 10 video fetches per hour");
    }
    
    // Create job
    await ctx.db.insert("tiktokJobs", {
      jobId: args.jobId,
      userId: args.userId,
      username: args.username,
      action: "fetch_videos",
      status: "pending",
      createdAt: Date.now(),
    });
    
    return { success: true };
  },
});

// Create a job to download TikTok videos
export const createDownloadJob = mutation({
  args: {
    jobId: v.string(),
    userId: v.string(),
    username: v.string(),
    videoIds: v.array(v.string()),
  },
  handler: async (ctx, args) => {
    // Check rate limit (5 per hour)
    const recentJobs = await ctx.db
      .query("tiktokJobs")
      .withIndex("by_user_status", (q) => 
        q.eq("userId", args.userId)
      )
      .filter((q) => 
        q.and(
          q.eq(q.field("action"), "download_videos"),
          q.gte(q.field("createdAt"), Date.now() - 60 * 60 * 1000) // Last hour
        )
      )
      .collect();
    
    if (recentJobs.length >= 5) {
      throw new Error("Rate limit exceeded: 5 download jobs per hour");
    }
    
    // Create job
    await ctx.db.insert("tiktokJobs", {
      jobId: args.jobId,
      userId: args.userId,
      username: args.username,
      action: "download_videos",
      status: "pending",
      videoIds: args.videoIds,
      totalVideos: args.videoIds.length,
      completedVideos: 0,
      progress: 0,
      createdAt: Date.now(),
    });
    
    return { success: true };
  },
});

// Webhook handler for job updates from backend
export const jobWebhook = mutation({
  args: {
    jobId: v.string(),
    status: v.string(),
    userData: v.optional(v.object({
      username: v.string(),
      userId: v.string(),
      secUid: v.string(),
      nickname: v.optional(v.string()),
      avatar: v.optional(v.string()),
      signature: v.optional(v.string()),
      verified: v.optional(v.boolean()),
      followerCount: v.optional(v.number()),
      followingCount: v.optional(v.number()),
      videoCount: v.optional(v.number()),
      heartCount: v.optional(v.number()),
      privateAccount: v.optional(v.boolean()),
    })),
    videosData: v.optional(v.object({
      videos: v.array(v.any()),
      count: v.number(),
      hasMore: v.boolean(),
      cursor: v.number(),
    })),
    downloadData: v.optional(v.object({
      totalVideos: v.number(),
      successfulDownloads: v.number(),
      tempDirectory: v.string(),
      files: v.array(v.object({
        videoId: v.string(),
        filePath: v.string(),
        fileSize: v.number(),
      })),
    })),
    progress: v.optional(v.number()),
    totalVideos: v.optional(v.number()),
    completedVideos: v.optional(v.number()),
    error: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    // Find and update the job
    const job = await ctx.db
      .query("tiktokJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    // Update job status
    const updates: any = {
      status: args.status as any,
    };
    
    if (args.progress !== undefined) {
      updates.progress = args.progress;
    }
    
    if (args.totalVideos !== undefined) {
      updates.totalVideos = args.totalVideos;
    }
    
    if (args.completedVideos !== undefined) {
      updates.completedVideos = args.completedVideos;
    }
    
    if (args.error) {
      updates.error = args.error;
    }
    
    if (args.status === "completed") {
      updates.completedAt = Date.now();
    }
    
    await ctx.db.patch(job._id, updates);
    
    // Handle specific data updates based on job type
    if (args.status === "completed" && job.action === "fetch_user" && args.userData) {
      // Store or update user data
      const existingUser = await ctx.db
        .query("tiktokUsers")
        .withIndex("by_username", (q) => q.eq("username", args.userData!.username))
        .first();
      
      if (existingUser) {
        await ctx.db.patch(existingUser._id, {
          ...args.userData,
          cachedAt: Date.now(),
        });
      } else {
        await ctx.db.insert("tiktokUsers", {
          ...args.userData,
          cachedAt: Date.now(),
        });
      }
    }
    
    if (args.status === "completed" && job.action === "fetch_videos" && args.videosData) {
      // Store videos data
      for (const video of args.videosData.videos) {
        const existingVideo = await ctx.db
          .query("tiktokVideos")
          .withIndex("by_video", (q) => q.eq("videoId", video.videoId))
          .first();
        
        const videoData = {
          videoId: video.videoId,
          username: job.username,
          title: video.title || "",
          thumbnail: video.thumbnail,
          dynamicCover: video.dynamicCover,
          duration: video.duration || 0,
          createTime: video.createTime || 0,
          views: video.stats?.views || 0,
          likes: video.stats?.likes || 0,
          comments: video.stats?.comments || 0,
          shares: video.stats?.shares || 0,
          saves: video.stats?.saves || 0,
          playAddr: video.playAddr,
          downloadAddr: video.downloadAddr,
          musicId: video.music?.id,
          musicTitle: video.music?.title,
          musicAuthor: video.music?.author,
          musicOriginal: video.music?.original,
          hashtags: video.hashtags,
          cachedAt: Date.now(),
        };
        
        if (existingVideo) {
          await ctx.db.patch(existingVideo._id, videoData);
        } else {
          await ctx.db.insert("tiktokVideos", videoData);
        }
      }
    }
    
    if (args.status === "completed" && job.action === "download_videos" && args.downloadData) {
      // Update video download status
      for (const file of args.downloadData.files) {
        const video = await ctx.db
          .query("tiktokVideos")
          .withIndex("by_video", (q) => q.eq("videoId", file.videoId))
          .first();
        
        if (video) {
          await ctx.db.patch(video._id, {
            downloadStatus: "completed",
            localPath: file.filePath,
          });
        }
      }
    }
    
    return { success: true };
  },
});

// Clean up ALL TikTok data (for development/testing)
export const cleanupAllData = mutation({
  args: {
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    let deletedCount = {
      jobs: 0,
      users: 0,
      videos: 0,
    };
    
    // Get all usernames from jobs for this user
    const usernames = new Set<string>();
    
    // Delete all jobs for this user and collect usernames
    const jobs = await ctx.db
      .query("tiktokJobs")
      .withIndex("by_user_status", (q) => q.eq("userId", args.userId))
      .collect();
    
    console.log(`[cleanupAllData] Found ${jobs.length} jobs for user ${args.userId}`);
    
    for (const job of jobs) {
      if (job.username) {
        let username = job.username;
        // Extract username from URL if needed
        if (username.startsWith('http')) {
          const match = username.match(/tiktok\.com\/@?([^/?]+)/);
          if (match) {
            username = match[1];
          }
        }
        usernames.add(username);
      }
      await ctx.db.delete(job._id);
    }
    deletedCount.jobs = jobs.length;
    
    // Delete all users and videos for collected usernames
    for (const username of usernames) {
      console.log(`[cleanupAllData] Cleaning up data for username: ${username}`);
      
      // Delete user data
      const user = await ctx.db
        .query("tiktokUsers")
        .withIndex("by_username", (q) => q.eq("username", username))
        .first();
      
      if (user) {
        await ctx.db.delete(user._id);
        deletedCount.users++;
      }
      
      // Delete all videos for this username
      const videos = await ctx.db
        .query("tiktokVideos")
        .withIndex("by_username", (q) => q.eq("username", username))
        .collect();
      
      for (const video of videos) {
        await ctx.db.delete(video._id);
      }
      deletedCount.videos += videos.length;
    }
    
    console.log(`[cleanupAllData] Cleanup complete:`, deletedCount);
    
    return { 
      success: true,
      deleted: deletedCount,
      usernames: Array.from(usernames),
    };
  },
});

// Clean up all TikTok data for a user
export const cleanupUserData = mutation({
  args: {
    userId: v.string(),
    username: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    let deletedCount = {
      jobs: 0,
      user: 0,
      videos: 0,
    };
    
    // Delete all jobs for this user
    const jobs = await ctx.db
      .query("tiktokJobs")
      .withIndex("by_user_status", (q) => q.eq("userId", args.userId))
      .collect();
    
    console.log(`[cleanupUserData] Found ${jobs.length} jobs for user ${args.userId}`);
    
    for (const job of jobs) {
      await ctx.db.delete(job._id);
    }
    deletedCount.jobs = jobs.length;
    
    // If username provided, delete user and video data
    if (args.username) {
      console.log(`[cleanupUserData] Cleaning up data for username: ${args.username}`);
      
      // Delete user data
      const user = await ctx.db
        .query("tiktokUsers")
        .withIndex("by_username", (q) => q.eq("username", args.username))
        .first();
      
      if (user) {
        console.log(`[cleanupUserData] Deleting user: ${user.username}`);
        await ctx.db.delete(user._id);
        deletedCount.user = 1;
      }
      
      // Delete all videos for this username
      const videos = await ctx.db
        .query("tiktokVideos")
        .withIndex("by_username", (q) => q.eq("username", args.username))
        .collect();
      
      console.log(`[cleanupUserData] Found ${videos.length} videos for ${args.username}`);
      
      for (const video of videos) {
        await ctx.db.delete(video._id);
      }
      deletedCount.videos = videos.length;
    }
    
    console.log(`[cleanupUserData] Cleanup complete:`, deletedCount);
    
    return { 
      success: true,
      deleted: deletedCount
    };
  },
});


================================================
FILE: convex/mutations/twitchContent.ts
================================================
import { v } from "convex/values";
import { mutation } from "../_generated/server";
import { Doc, Id } from "../_generated/dataModel";

// Create job record for channel fetch (called by action)
export const createJobRecord = mutation({
  args: {
    jobId: v.string(),
    userId: v.string(),
    channelUrl: v.optional(v.string()),
    channelName: v.optional(v.string()),
    action: v.string(),
    videoIds: v.optional(v.array(v.string())),
    count: v.optional(v.number()),
    videoType: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    console.log('[Convex Mutation] Creating Twitch job record:', args.jobId, args.action);
    
    const jobData: any = {
      jobId: args.jobId,
      userId: args.userId,
      action: args.action,
      status: "pending",
      createdAt: Date.now(),
    };
    
    if (args.channelUrl) jobData.channelUrl = args.channelUrl;
    if (args.channelName) jobData.channelName = args.channelName;
    if (args.videoIds) {
      jobData.videoIds = args.videoIds;
      jobData.totalVideos = args.videoIds.length;
      jobData.progress = 0;
    }
    if (args.count !== undefined) jobData.count = args.count;
    if (args.videoType) jobData.videoType = args.videoType;
    
    const id = await ctx.db.insert("twitchJobs", jobData);
    return id;
  },
});

// Update job status (called by action)
export const updateJobStatus = mutation({
  args: {
    jobId: v.string(),
    status: v.string(),
    error: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("twitchJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      throw new Error(`Job ${args.jobId} not found`);
    }
    
    const updates: any = {
      status: args.status,
    };
    
    if (args.error) {
      updates.error = args.error;
      updates.completedAt = Date.now();
    }
    
    await ctx.db.patch(job._id, updates);
  },
});



// Job webhook handler (called by backend)
export const jobWebhook = mutation({
  args: {
    jobId: v.string(),
    status: v.string(),
    channelData: v.optional(v.any()),
    videosData: v.optional(v.any()),
    downloadData: v.optional(v.any()),
    progress: v.optional(v.number()),
    totalVideos: v.optional(v.number()),
    completedVideos: v.optional(v.number()),
    error: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const { jobId, status, channelData, videosData, downloadData, progress, error } = args;
    
    console.log('[Convex] Twitch job webhook received:', jobId, status);
    
    // Find the job
    const job = await ctx.db
      .query("twitchJobs")
      .withIndex("by_job", (q) => q.eq("jobId", jobId))
      .first();
    
    if (!job) {
      console.error('[Convex] Job not found:', jobId);
      return;
    }
    
    // Update job status
    const updates: Partial<Doc<"twitchJobs">> = {
      status: status as any,
    };
    
    if (progress !== undefined) {
      updates.progress = progress;
    }
    
    if (args.totalVideos !== undefined) {
      updates.totalVideos = args.totalVideos;
    }
    
    if (args.completedVideos !== undefined) {
      updates.completedVideos = args.completedVideos;
    }
    
    if (error) {
      updates.error = error;
    }
    
    if (status === "completed") {
      updates.completedAt = Date.now();
      
      // Store channel data
      if (channelData) {
        console.log('[Convex] Storing Twitch channel data:', channelData.username);
        
        // Store result in job
        updates.result = { channelData };
        
        // Upsert channel record
        const existingChannel = await ctx.db
          .query("twitchChannels")
          .withIndex("by_username", (q) => q.eq("username", channelData.username))
          .first();
        
        if (existingChannel) {
          await ctx.db.patch(existingChannel._id, {
            ...channelData,
            cachedAt: Date.now(),
          });
        } else {
          await ctx.db.insert("twitchChannels", {
            ...channelData,
            cachedAt: Date.now(),
          });
        }
      }
      
      // Store videos data
      if (videosData && videosData.videos) {
        console.log('[Convex] Storing Twitch videos:', videosData.videos.length);
        
        // Store result in job
        updates.result = { videosData };
        
        // Get channel username from job
        const channelUsername = job.channelName;
        
        if (channelUsername) {
          // Delete existing videos for this channel to avoid duplicates
          const existingVideos = await ctx.db
            .query("twitchVideos")
            .withIndex("by_channel", (q) => q.eq("channelUsername", channelUsername))
            .collect();
          
          for (const video of existingVideos) {
            await ctx.db.delete(video._id);
          }
          
          // Insert new videos
          for (const video of videosData.videos) {
            await ctx.db.insert("twitchVideos", {
              ...video,
              channelUsername,
              cachedAt: Date.now(),
            });
          }
        }
      }
      
      // Store download data
      if (downloadData) {
        console.log('[Convex] Twitch download completed:', downloadData);
        updates.result = { downloadData };
      }
    }
    
    await ctx.db.patch(job._id, updates);
  },
});

// Cleanup Twitch data
export const cleanup = mutation({
  args: {
    userId: v.string(),
    username: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    console.log('[Convex] Cleaning up Twitch data for user:', args.userId);
    
    let deletedCount = {
      jobs: 0,
      channels: 0,
      videos: 0,
    };
    
    // Get all usernames from jobs for this user
    const usernames = new Set<string>();
    
    // Delete all jobs for this user and collect usernames
    const jobs = await ctx.db
      .query("twitchJobs")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .collect();
    
    console.log(`[Twitch Cleanup] Found ${jobs.length} jobs for user ${args.userId}`);
    
    for (const job of jobs) {
      // Collect channel names from jobs
      if (job.channelName) {
        usernames.add(job.channelName);
      }
      // Also check channelUrl and extract username if it's a URL
      if (job.channelUrl) {
        const match = job.channelUrl.match(/twitch\.tv\/([^/?]+)/);
        if (match) {
          usernames.add(match[1]);
        }
      }
      await ctx.db.delete(job._id);
    }
    deletedCount.jobs = jobs.length;
    
    // If username is provided directly, add it to the set
    if (args.username) {
      usernames.add(args.username);
    }
    
    // Delete all channels and videos for collected usernames
    for (const username of usernames) {
      console.log(`[Twitch Cleanup] Cleaning up data for username: ${username}`);
      
      // Delete channel data
      const channels = await ctx.db
        .query("twitchChannels")
        .withIndex("by_username", (q) => q.eq("username", username))
        .collect();
      
      for (const channel of channels) {
        await ctx.db.delete(channel._id);
        deletedCount.channels++;
      }
      
      // Delete all videos for this channel
      const videos = await ctx.db
        .query("twitchVideos")
        .withIndex("by_channel", (q) => q.eq("channelUsername", username))
        .collect();
      
      console.log(`[Twitch Cleanup] Found ${videos.length} videos for ${username}`);
      
      for (const video of videos) {
        await ctx.db.delete(video._id);
      }
      deletedCount.videos += videos.length;
    }
    
    console.log(`[Twitch Cleanup] Cleanup complete:`, deletedCount);
    
    return {
      success: true,
      deleted: deletedCount,
      usernames: Array.from(usernames),
    };
  },
});


================================================
FILE: convex/mutations/youtubeContent.ts
================================================
import { mutation } from "../_generated/server";
import { v } from "convex/values";

// Create a new channel fetch job
export const createChannelFetchJob = mutation({
  args: {
    jobId: v.string(),
    userId: v.string(),
    channelUrl: v.string(),
  },
  handler: async (ctx, args) => {
    // Check if job already exists
    const existingJob = await ctx.db
      .query("youtubeJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (existingJob) {
      return existingJob._id;
    }
    
    // Create new job
    return await ctx.db.insert("youtubeJobs", {
      jobId: args.jobId,
      userId: args.userId,
      channelUrl: args.channelUrl,
      action: "fetch_channel",
      status: "pending",
      createdAt: Date.now(),
    });
  },
});

// Create a new videos fetch job
export const createVideosFetchJob = mutation({
  args: {
    jobId: v.string(),
    userId: v.string(),
    channelId: v.string(),
    count: v.optional(v.number()),
    sortBy: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    // Check if job already exists
    const existingJob = await ctx.db
      .query("youtubeJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (existingJob) {
      return existingJob._id;
    }
    
    // Create new job
    return await ctx.db.insert("youtubeJobs", {
      jobId: args.jobId,
      userId: args.userId,
      channelId: args.channelId,
      action: "fetch_videos",
      status: "pending",
      count: args.count || 30,
      sortBy: args.sortBy || "newest",
      createdAt: Date.now(),
    });
  },
});

// Create a new download job
export const createDownloadJob = mutation({
  args: {
    jobId: v.string(),
    userId: v.string(),
    channelId: v.string(),
    channelName: v.string(),
    videoIds: v.array(v.string()),
  },
  handler: async (ctx, args) => {
    // Check if job already exists
    const existingJob = await ctx.db
      .query("youtubeJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (existingJob) {
      return existingJob._id;
    }
    
    // Create new job
    return await ctx.db.insert("youtubeJobs", {
      jobId: args.jobId,
      userId: args.userId,
      channelId: args.channelId,
      action: "download_videos",
      status: "pending",
      videoIds: args.videoIds,
      totalVideos: args.videoIds.length,
      progress: 0,
      createdAt: Date.now(),
    });
  },
});

// Handle webhook from backend
export const jobWebhook = mutation({
  args: {
    jobId: v.string(),
    status: v.string(),
    channelData: v.optional(v.object({
      channelId: v.string(),
      channelName: v.string(),
      channelHandle: v.optional(v.string()),
      channelUrl: v.string(),
      avatar: v.optional(v.string()),
      banner: v.optional(v.string()),
      description: v.optional(v.string()),
      subscriberCount: v.optional(v.number()),
      videoCount: v.optional(v.number()),
    })),
    videosData: v.optional(v.object({
      videos: v.array(v.object({
        videoId: v.string(),
        channelId: v.string(),
        title: v.string(),
        url: v.optional(v.string()),
        thumbnail: v.optional(v.string()),
        thumbnails: v.optional(v.array(v.object({
          quality: v.string(),
          url: v.string(),
          width: v.number(),
          height: v.number(),
        }))),
        duration: v.number(),
        viewCount: v.optional(v.number()),
        likeCount: v.optional(v.number()),
        uploadDate: v.optional(v.string()),
        description: v.optional(v.string()),
        tags: v.optional(v.array(v.string())),
      })),
      count: v.number(),
      channelId: v.string(),
    })),
    downloadData: v.optional(v.object({
      totalVideos: v.number(),
      successfulDownloads: v.number(),
      tempDirectory: v.string(),
      files: v.array(v.object({
        videoId: v.string(),
        filePath: v.string(),
        fileSize: v.number(),
        title: v.optional(v.string()),
        duration: v.optional(v.number()),
      })),
    })),
    progress: v.optional(v.number()),
    totalVideos: v.optional(v.number()),
    completedVideos: v.optional(v.number()),
    error: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    // Find the job
    const job = await ctx.db
      .query("youtubeJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    if (!job) {
      console.error(`Job ${args.jobId} not found`);
      return;
    }
    
    // Update job status
    const updates: any = {
      status: args.status as any,
      progress: args.progress,
      totalVideos: args.totalVideos,
      completedVideos: args.completedVideos,
      error: args.error,
      completedAt: args.status === "completed" || args.status === "failed" ? Date.now() : undefined,
    };
    
    // If channel data is provided, store the channelId in the job
    if (args.channelData && args.channelData.channelId) {
      updates.channelId = args.channelData.channelId;
    }
    
    await ctx.db.patch(job._id, updates);
    
    // Handle specific webhook data
    if (args.status === "completed") {
      if (args.channelData) {
        // Cache channel data
        await cacheChannelData(ctx, args.channelData);
      }
      
      if (args.videosData) {
        // Cache videos data
        console.log('[jobWebhook] Caching videos data:', {
          videoCount: args.videosData.videos.length,
          channelId: args.videosData.channelId
        });
        await cacheVideosData(ctx, args.videosData);
      }
      
      if (args.downloadData) {
        // Update video download status
        await updateDownloadStatus(ctx, args.downloadData);
      }
    }
  },
});

// Helper function to cache channel data
async function cacheChannelData(ctx: any, channelData: any) {
  const existing = await ctx.db
    .query("youtubeChannels")
    .withIndex("by_channel", (q: any) => q.eq("channelId", channelData.channelId))
    .first();
  
  if (existing) {
    // Update existing channel
    await ctx.db.patch(existing._id, {
      ...channelData,
      cachedAt: Date.now(),
    });
  } else {
    // Insert new channel
    await ctx.db.insert("youtubeChannels", {
      ...channelData,
      cachedAt: Date.now(),
    });
  }
}

// Helper function to cache videos data
async function cacheVideosData(ctx: any, videosData: any) {
  const { videos, channelId } = videosData;
  
  console.log('[cacheVideosData] Starting to cache videos:', {
    videoCount: videos.length,
    channelId
  });
  
  // Get channel name from channel data
  const channel = await ctx.db
    .query("youtubeChannels")
    .withIndex("by_channel", (q: any) => q.eq("channelId", channelId))
    .first();
  
  const channelName = channel?.channelName || "Unknown Channel";
  console.log('[cacheVideosData] Found channel:', channelName);
  
  // Cache each video
  for (const video of videos) {
    const existing = await ctx.db
      .query("youtubeVideos")
      .withIndex("by_video", (q: any) => q.eq("videoId", video.videoId))
      .first();
    
    if (existing) {
      // Update existing video
      console.log('[cacheVideosData] Updating existing video:', video.videoId);
      await ctx.db.patch(existing._id, {
        ...video,
        channelName,
        cachedAt: Date.now(),
      });
    } else {
      // Insert new video
      console.log('[cacheVideosData] Inserting new video:', video.videoId, video.title);
      await ctx.db.insert("youtubeVideos", {
        ...video,
        channelName,
        cachedAt: Date.now(),
      });
    }
  }
  
  console.log('[cacheVideosData] Finished caching videos');
}

// Helper function to update download status
async function updateDownloadStatus(ctx: any, downloadData: any) {
  const { files } = downloadData;
  
  for (const file of files) {
    const video = await ctx.db
      .query("youtubeVideos")
      .withIndex("by_video", (q: any) => q.eq("videoId", file.videoId))
      .first();
    
    if (video) {
      await ctx.db.patch(video._id, {
        downloadStatus: "completed",
        localPath: file.filePath,
        fileSize: file.fileSize,
      });
    }
  }
}

// Clean up all YouTube data for a user
export const cleanupAllData = mutation({
  args: {
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    let deletedCount = {
      jobs: 0,
      channels: 0,
      videos: 0,
    };
    
    // Delete all jobs for this user
    const jobs = await ctx.db
      .query("youtubeJobs")
      .withIndex("by_user_status", (q) => q.eq("userId", args.userId))
      .collect();
    
    console.log(`[cleanupAllData] Found ${jobs.length} jobs for user ${args.userId}`);
    
    // Collect all unique channel IDs from jobs
    const channelIds = new Set<string>();
    for (const job of jobs) {
      await ctx.db.delete(job._id);
      if (job.channelId) {
        channelIds.add(job.channelId);
      }
    }
    deletedCount.jobs = jobs.length;
    
    // Delete all channel data for the collected channel IDs
    for (const channelId of channelIds) {
      const channel = await ctx.db
        .query("youtubeChannels")
        .withIndex("by_channel", (q) => q.eq("channelId", channelId))
        .first();
      
      if (channel) {
        console.log(`[cleanupAllData] Deleting channel: ${channel.channelName}`);
        await ctx.db.delete(channel._id);
        deletedCount.channels++;
      }
      
      // Delete all videos for this channel
      const videos = await ctx.db
        .query("youtubeVideos")
        .withIndex("by_channel", (q) => q.eq("channelId", channelId))
        .collect();
      
      console.log(`[cleanupAllData] Found ${videos.length} videos for channel ${channelId}`);
      
      for (const video of videos) {
        await ctx.db.delete(video._id);
      }
      deletedCount.videos += videos.length;
    }
    
    console.log(`[cleanupAllData] Cleanup complete:`, deletedCount);
    
    return { 
      success: true,
      deleted: deletedCount,
      channelIds: Array.from(channelIds),
    };
  },
});

// Clean up YouTube data for a specific channel
export const cleanupChannelData = mutation({
  args: {
    userId: v.string(),
    channelId: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    let deletedCount = {
      jobs: 0,
      channel: 0,
      videos: 0,
    };
    
    // Delete all jobs for this user
    const jobs = await ctx.db
      .query("youtubeJobs")
      .withIndex("by_user_status", (q) => q.eq("userId", args.userId))
      .collect();
    
    console.log(`[cleanupChannelData] Found ${jobs.length} jobs for user ${args.userId}`);
    
    for (const job of jobs) {
      await ctx.db.delete(job._id);
    }
    deletedCount.jobs = jobs.length;
    
    // If channelId provided, delete channel and video data
    if (args.channelId) {
      console.log(`[cleanupChannelData] Cleaning up data for channel: ${args.channelId}`);
      
      // Delete channel data
      const channel = await ctx.db
        .query("youtubeChannels")
        .withIndex("by_channel", (q) => q.eq("channelId", args.channelId))
        .first();
      
      if (channel) {
        console.log(`[cleanupChannelData] Deleting channel: ${channel.channelName}`);
        await ctx.db.delete(channel._id);
        deletedCount.channel = 1;
      }
      
      // Delete all videos for this channel
      const videos = await ctx.db
        .query("youtubeVideos")
        .withIndex("by_channel", (q) => q.eq("channelId", args.channelId))
        .collect();
      
      console.log(`[cleanupChannelData] Found ${videos.length} videos for ${args.channelId}`);
      
      for (const video of videos) {
        await ctx.db.delete(video._id);
      }
      deletedCount.videos = videos.length;
    }
    
    console.log(`[cleanupChannelData] Cleanup complete:`, deletedCount);
    
    return { 
      success: true,
      deleted: deletedCount
    };
  },
});


================================================
FILE: convex/mutations/youtubeTranscripts.ts
================================================
import { mutation } from "../_generated/server";
import { v } from "convex/values";
import { internal } from "../_generated/api";

// Public mutation that can be called from Python backend
export const transcriptWebhook = mutation({
  args: {
    jobId: v.string(),
    status: v.union(v.literal("completed"), v.literal("failed")),
    transcript: v.optional(v.string()),
    videoId: v.optional(v.string()),
    language: v.optional(v.string()),
    userId: v.optional(v.string()),
    error: v.optional(v.string()),
    // New metadata fields
    videoTitle: v.optional(v.string()),
    videoAuthor: v.optional(v.string()),
    videoDuration: v.optional(v.number()),
    thumbnailUrl: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    if (args.status === "completed" && args.transcript && args.videoId && args.userId) {
      // First, update job with metadata
      const job = await ctx.db
        .query("transcriptJobs")
        .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
        .first();
      
      if (job) {
        // Update job with metadata
        await ctx.db.patch(job._id, {
          videoTitle: args.videoTitle,
          videoAuthor: args.videoAuthor,
        });
      }

      // Store the transcript with metadata
      await ctx.scheduler.runAfter(0, internal.youtubeTranscripts.storeTranscript, {
        jobId: args.jobId,
        videoId: args.videoId,
        youtubeUrl: "", // This will be retrieved from the job
        transcript: args.transcript,
        language: args.language || "en",
        userId: args.userId,
        videoTitle: args.videoTitle,
        videoAuthor: args.videoAuthor,
        videoDuration: args.videoDuration,
        thumbnailUrl: args.thumbnailUrl,
      });
    } else if (args.status === "failed") {
      // Update job status to failed
      await ctx.scheduler.runAfter(0, internal.youtubeTranscripts.updateJobStatus, {
        jobId: args.jobId,
        status: "failed",
        error: args.error || "Unknown error",
      });
    }

    return { success: true };
  },
});


================================================
FILE: convex/queries/audioTranscripts.ts
================================================
import { query } from "../_generated/server";
import { v } from "convex/values";

// Get a transcription job by ID
export const getJob = query({
  args: {
    jobId: v.string(),
  },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("audioTranscripts")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    return job;
  },
});

// Get all jobs for a user
export const getUserJobs = query({
  args: {
    userId: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const limit = args.limit || 50;
    
    const jobs = await ctx.db
      .query("audioTranscripts")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .order("desc")
      .take(limit);
    
    return jobs;
  },
});

// Get user's active jobs
export const getActiveJobs = query({
  args: {
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    const jobs = await ctx.db
      .query("audioTranscripts")
      .withIndex("by_user_status", (q) => 
        q.eq("userId", args.userId)
      )
      .filter((q) =>
        q.or(
          q.eq(q.field("status"), "pending"),
          q.eq(q.field("status"), "processing")
        )
      )
      .order("desc")
      .collect();
    
    return jobs;
  },
});

// Get transcription statistics for a user
export const getUserStats = query({
  args: {
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    const jobs = await ctx.db
      .query("audioTranscripts")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .collect();
    
    const stats = {
      total: jobs.length,
      completed: jobs.filter(j => j.status === "completed").length,
      failed: jobs.filter(j => j.status === "failed").length,
      processing: jobs.filter(j => j.status === "processing" || j.status === "pending").length,
      totalSize: jobs.reduce((sum, j) => sum + (j.fileSize || 0), 0),
    };
    
    return stats;
  },
});

// Check if user can create a new transcription (rate limiting)
export const canCreateTranscription = query({
  args: {
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    // Get jobs created in the last hour
    const oneHourAgo = new Date();
    oneHourAgo.setHours(oneHourAgo.getHours() - 1);
    
    const recentJobs = await ctx.db
      .query("audioTranscripts")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .filter((q) =>
        q.gte(q.field("createdAt"), oneHourAgo.toISOString())
      )
      .collect();
    
    // Free tier limit: 10 transcriptions per hour
    const limit = 10;
    const remaining = Math.max(0, limit - recentJobs.length);
    
    return {
      canCreate: recentJobs.length < limit,
      remaining,
      limit,
      resetAt: new Date(oneHourAgo.getTime() + 60 * 60 * 1000).toISOString(),
    };
  },
});


================================================
FILE: convex/queries/callsPage.ts
================================================
import { query } from "../_generated/server";
import { v } from "convex/values";

// Get all agent call statistics for the main table
export const getAgentCallStats = query({
  args: {
    userId: v.optional(v.string()),
    timeRange: v.optional(v.object({
      start: v.string(),
      end: v.string(),
    }))
  },
  handler: async (ctx, args) => {
    // Get all agents
    const agents = await ctx.db
      .query("voiceAgents")
      .withIndex("by_user", q => q.eq("userId", args.userId || "default"))
      .collect();

    // Get call statistics for each agent
    const agentStats = await Promise.all(
      agents.map(async (agent) => {
        // Get call logs for this agent
        const callLogs = await ctx.db
          .query("agentCallLogs")
          .withIndex("by_agent", q => q.eq("agentId", agent._id))
          .collect();

        // Filter by time range if provided
        const filteredLogs = args.timeRange
          ? callLogs.filter(log => 
              log.startTime >= args.timeRange!.start &&
              log.startTime <= args.timeRange!.end
            )
          : callLogs;

        // Calculate statistics
        const outboundCalls = filteredLogs.filter(log => log.direction === "outbound").length;
        const inboundCalls = filteredLogs.filter(log => log.direction === "inbound").length;
        const completedCalls = filteredLogs.filter(log => log.status === "completed").length;
        const failedCalls = filteredLogs.filter(log => 
          log.status === "failed" || log.status === "no_answer"
        ).length;

        // Check if agent is currently on a call
        const liveCall = await ctx.db
          .query("liveCalls")
          .withIndex("by_agent", q => q.eq("agentId", agent._id))
          .first();

        return {
          id: agent._id,
          agent: agent.name,
          outbound: outboundCalls,
          answeredInbound: inboundCalls,
          pickedUp: completedCalls,
          notPickedUp: failedCalls,
          status: liveCall ? 'online' as const : agent.status === 'active' ? 'available' as const : 'offline' as const,
          onMobile: true, // This could be determined by user agent or device info
          onDesktop: true,
          convexEntryPoint: `agents.${agent._id}`,
        };
      })
    );

    return agentStats;
  },
});

// Get all phone numbers with statistics
export const getPhoneNumbers = query({
  args: {
    status: v.optional(v.union(v.literal("active"), v.literal("inactive"), v.literal("maintenance"))),
  },
  handler: async (ctx, args) => {
    let query = ctx.db.query("phoneNumbers");
    
    if (args.status) {
      query = query.withIndex("by_status", q => q.eq("status", args.status!));
    }

    const phoneNumbers = await query.collect();
    
    return phoneNumbers.map(phone => ({
      id: phone._id,
      number: phone.number,
      displayName: phone.displayName,
      type: phone.type,
      status: phone.status,
      provider: phone.provider,
      location: phone.location,
      assignedUser: phone.assignedUser,
      callsToday: phone.callsToday,
      callsThisWeek: phone.callsThisWeek,
      callsThisMonth: phone.callsThisMonth,
      successRate: phone.successRate,
      avgCallDuration: phone.avgCallDuration,
      lastUsed: phone.lastUsed,
      sipConfig: phone.sipConfig,
      features: phone.features,
    }));
  },
});

// Get live calls for monitoring
export const getLiveCalls = query({
  args: {},
  handler: async (ctx) => {
    const liveCalls = await ctx.db
      .query("liveCalls")
      .collect();

    return liveCalls.map(call => ({
      id: call._id,
      callId: call.callId,
      agent: call.agentName,
      customer: call.customerName,
      phone: call.customerPhone,
      duration: call.duration,
      status: call.status,
      sentiment: call.sentiment,
      recording: call.isRecording,
    }));
  },
});

// Get swarm campaigns overview
export const getSwarmCampaigns = query({
  args: {
    status: v.optional(v.union(
      v.literal("active"),
      v.literal("paused"),
      v.literal("completed"),
      v.literal("scheduled")
    )),
  },
  handler: async (ctx, args) => {
    let query = ctx.db.query("campaigns");
    
    if (args.status) {
      query = query.withIndex("by_status", q => q.eq("status", args.status!));
    }

    const campaigns = await query.collect();

    // Get agent assignments for each campaign
    const campaignsWithAgents = await Promise.all(
      campaigns.map(async (campaign) => {
        const assignments = await ctx.db
          .query("campaignAgents")
          .withIndex("by_campaign", q => q.eq("campaignId", campaign._id))
          .collect();

        const agents = await Promise.all(
          assignments.map(async (assignment) => {
            const agent = await ctx.db.get(assignment.agentId);
            return agent ? {
              id: agent._id,
              name: agent.name,
              status: agent.status,
              callsHandled: assignment.callsHandled,
              successRate: assignment.successRate,
            } : null;
          })
        );

        return {
          id: campaign._id,
          name: campaign.name,
          status: campaign.status,
          progress: campaign.totalCalls > 0 
            ? Math.round((campaign.completedCalls / campaign.totalCalls) * 100)
            : 0,
          totalCalls: campaign.totalCalls,
          completedCalls: campaign.completedCalls,
          agents: agents.filter(Boolean),
        };
      })
    );

    return campaignsWithAgents;
  },
});

// Get call analytics for a specific call
export const getCallAnalytics = query({
  args: { callId: v.string() },
  handler: async (ctx, args) => {
    const analytics = await ctx.db
      .query("callAnalytics")
      .withIndex("by_callId", q => q.eq("callId", args.callId))
      .first();

    if (!analytics) {
      return null;
    }

    // Get transcript entries
    const transcript = await ctx.db
      .query("transcriptEntries")
      .withIndex("by_call", q => q.eq("callId", args.callId))
      .collect();

    return {
      callInfo: {
        callId: analytics.callId,
        agent: analytics.agentName,
        customer: analytics.customerName,
        phone: analytics.customerPhone,
        status: analytics.status,
      },
      timing: {
        startTime: analytics.startTime,
        endTime: analytics.endTime,
        duration: analytics.duration,
        queueTime: analytics.queueTime,
        holdTime: analytics.holdTime,
      },
      metrics: {
        resolution: analytics.resolution,
        transfer: analytics.hasTransfer,
        sentiment: analytics.sentiment,
        qualityScore: analytics.qualityScore,
      },
      transcript: transcript.map(entry => ({
        timestamp: entry.timestamp,
        speaker: entry.speaker,
        content: entry.content,
        sentiment: entry.sentiment,
      })),
    };
  },
});

// Get dashboard statistics
export const getDashboardStats = query({
  args: {
    userId: v.optional(v.string()),
    date: v.optional(v.string()), // YYYY-MM-DD
  },
  handler: async (ctx, args) => {
    const today = args.date || new Date().toISOString().split('T')[0];
    const userId = args.userId || "default";

    // Try to get cached stats first
    const cachedStats = await ctx.db
      .query("dashboardStats")
      .withIndex("by_user_date", q => 
        q.eq("userId", userId).eq("date", today)
      )
      .first();

    if (cachedStats && 
        new Date(cachedStats.updatedAt) > new Date(Date.now() - 5 * 60 * 1000)) {
      // Return cached stats if less than 5 minutes old
      return {
        totalCalls: cachedStats.totalCalls,
        activeCalls: cachedStats.activeCalls,
        successRate: cachedStats.successRate,
        avgCallDuration: cachedStats.avgCallDuration,
        activeAgents: cachedStats.activeAgents,
      };
    }

    // Otherwise, calculate fresh stats
    const agents = await ctx.db
      .query("voiceAgents")
      .withIndex("by_user", q => q.eq("userId", userId))
      .collect();

    const activeCalls = await ctx.db
      .query("liveCalls")
      .collect();

    const todaysCalls = await ctx.db
      .query("callAnalytics")
      .withIndex("by_date")
      .collect();

    // Filter today's calls
    const todaysCallsFiltered = todaysCalls.filter(call => 
      call.startTime.startsWith(today)
    );

    const totalCalls = todaysCallsFiltered.length;
    const completedCalls = todaysCallsFiltered.filter(c => c.status === "COMPLETED").length;
    const successRate = totalCalls > 0 
      ? Math.round((completedCalls / totalCalls) * 100)
      : 0;

    // Calculate average duration
    const durations = todaysCallsFiltered
      .map(call => {
        const match = call.duration.match(/(\d+)m\s+(\d+)s/);
        return match ? parseInt(match[1]) * 60 + parseInt(match[2]) : 0;
      })
      .filter(d => d > 0);

    const avgDurationSeconds = durations.length > 0
      ? Math.round(durations.reduce((a, b) => a + b, 0) / durations.length)
      : 0;

    const avgCallDuration = `${Math.floor(avgDurationSeconds / 60)}m ${avgDurationSeconds % 60}s`;

    const activeAgents = agents.filter(a => a.status === "active").length;

    return {
      totalCalls,
      activeCalls: activeCalls.length,
      successRate,
      avgCallDuration,
      activeAgents,
    };
  },
});


================================================
FILE: convex/queries/debugYouTube.ts
================================================
import { query } from "../_generated/server";
import { v } from "convex/values";

// Debug query to check what's in the database
export const getAllYouTubeVideos = query({
  args: {},
  handler: async (ctx) => {
    const videos = await ctx.db
      .query("youtubeVideos")
      .order("desc")
      .take(20);
    
    const channels = await ctx.db
      .query("youtubeChannels")
      .order("desc")
      .take(5);
    
    const recentJobs = await ctx.db
      .query("youtubeJobs")
      .order("desc")
      .take(10);
    
    return {
      videos: videos.map(v => ({
        videoId: v.videoId,
        channelId: v.channelId,
        title: v.title,
        cachedAt: v.cachedAt
      })),
      channels: channels.map(c => ({
        channelId: c.channelId,
        channelName: c.channelName,
        cachedAt: c.cachedAt
      })),
      recentJobs: recentJobs.map(j => ({
        jobId: j.jobId,
        action: j.action,
        status: j.status,
        channelId: j.channelId,
        createdAt: j.createdAt
      }))
    };
  },
});


================================================
FILE: convex/queries/instagramContent.ts
================================================
import { v } from "convex/values";
import { query } from "../_generated/server";

// Get cached user data
export const getCachedUser = query({
  args: {
    username: v.string(),
  },
  handler: async (ctx, args) => {
    const user = await ctx.db
      .query("instagramUsers")
      .withIndex("by_username", (q) => q.eq("username", args.username))
      .first();
    
    if (!user) {
      return null;
    }
    
    // Check if cache is stale (older than 1 hour)
    const isStale = Date.now() - user.cachedAt > 60 * 60 * 1000;
    
    return {
      user,
      isStale,
    };
  },
});

// Get cached posts
export const getCachedPosts = query({
  args: {
    username: v.string(),
  },
  handler: async (ctx, args) => {
    const posts = await ctx.db
      .query("instagramPosts")
      .withIndex("by_username", (q) => q.eq("username", args.username))
      .collect();
    
    // Sort by timestamp descending (newest first)
    posts.sort((a, b) => b.timestamp - a.timestamp);
    
    // Check if cache is stale (older than 1 hour)
    const isStale = posts.length > 0 && Date.now() - posts[0].cachedAt > 60 * 60 * 1000;
    
    return {
      posts,
      isStale,
    };
  },
});

// Get job status
export const getJob = query({
  args: {
    jobId: v.string(),
  },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("instagramJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    return job;
  },
});

// Check rate limit for specific action
export const checkRateLimit = query({
  args: {
    userId: v.string(),
    action: v.union(
      v.literal("fetch_user"),
      v.literal("fetch_posts"),
      v.literal("download_posts")
    ),
  },
  handler: async (ctx, args) => {
    const { userId, action } = args;
    
    // Get jobs from last hour
    const oneHourAgo = Date.now() - 60 * 60 * 1000;
    
    const recentJobs = await ctx.db
      .query("instagramJobs")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .filter((q) => 
        q.and(
          q.eq(q.field("action"), action),
          q.gte(q.field("createdAt"), oneHourAgo)
        )
      )
      .collect();
    
    // Rate limits (matching backend)
    const limits = {
      fetch_user: 20,
      fetch_posts: 10,
      download_posts: 5,
    };
    
    const limit = limits[action];
    const remaining = Math.max(0, limit - recentJobs.length);
    
    return {
      canCreate: remaining > 0,
      remaining,
      resetAt: oneHourAgo + 60 * 60 * 1000,
    };
  },
});

// Get user's recent jobs
export const getUserJobs = query({
  args: {
    userId: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const jobs = await ctx.db
      .query("instagramJobs")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .order("desc")
      .take(args.limit || 10);
    
    return jobs;
  },
});

// Debug query to get all Instagram posts
export const getAllInstagramPosts = query({
  args: {},
  handler: async (ctx) => {
    const posts = await ctx.db.query("instagramPosts").collect();
    
    return {
      count: posts.length,
      posts: posts.map(p => ({
        postId: p.postId,
        username: p.username,
        mediaType: p.mediaType,
        likeCount: p.likeCount,
        cachedAt: new Date(p.cachedAt).toISOString(),
      })),
    };
  },
});


================================================
FILE: convex/queries/telephony.ts
================================================
import { query } from "../_generated/server";
import { v } from "convex/values";

// Get call by ID
export const getCall = query({
  args: { callId: v.string() },
  handler: async (ctx, args) => {
    const call = await ctx.db
      .query("telephonyCalls")
      .withIndex("by_call", (q) => q.eq("callId", args.callId))
      .first();

    return call;
  },
});

// Get calls for user
export const getUserCalls = query({
  args: { 
    userId: v.string(),
    limit: v.optional(v.number()),
    status: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    let query = ctx.db.query("telephonyCalls");
    
    if (args.status) {
      query = query.withIndex("by_user_status", (q) => 
        q.eq("userId", args.userId).eq("status", args.status)
      );
    } else {
      query = query.withIndex("by_user", (q) => q.eq("userId", args.userId));
    }

    if (args.limit) {
      return await query.take(args.limit);
    }

    return await query.order("desc").collect();
  },
});

// Get active calls
export const getActiveCalls = query({
  args: { limit: v.optional(v.number()) },
  handler: async (ctx, args) => {
    let query = ctx.db
      .query("telephonyCalls")
      .withIndex("by_status", (q) => q.eq("status", "connected"));

    if (args.limit) {
      return await query.take(args.limit);
    }

    return await query.collect();
  },
});

// Get audio chunks for call
export const getAudioChunks = query({
  args: { 
    callId: v.string(),
    limit: v.optional(v.number()),
    processed: v.optional(v.boolean()),
  },
  handler: async (ctx, args) => {
    let query = ctx.db.query("audioChunks");
    
    if (args.processed !== undefined) {
      query = query.withIndex("by_processed", (q) => 
        q.eq("callId", args.callId).eq("processed", args.processed)
      );
    } else {
      query = query.withIndex("by_call", (q) => q.eq("callId", args.callId));
    }

    if (args.limit) {
      return await query.order("desc").take(args.limit);
    }

    return await query.order("desc").collect();
  },
});

// Get real-time transcript
export const getRealtimeTranscript = query({
  args: { callId: v.string() },
  handler: async (ctx, args) => {
    const call = await ctx.db
      .query("telephonyCalls")
      .withIndex("by_call", (q) => q.eq("callId", args.callId))
      .first();

    if (!call) {
      return null;
    }

    const chunks = await ctx.db
      .query("audioChunks")
      .withIndex("by_call", (q) => q.eq("callId", args.callId))
      .order("desc")
      .take(10);

    return {
      call,
      currentTranscript: call.currentTranscript,
      currentSentiment: call.currentSentiment,
      speakerLabels: call.speakerLabels,
      recentChunks: chunks,
    };
  },
});

// Get telephony job
export const getJob = query({
  args: { jobId: v.string() },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("telephonyJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();

    return job;
  },
});

// Get jobs for call
export const getCallJobs = query({
  args: { 
    callId: v.string(),
    status: v.optional(v.string()),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    let query = ctx.db.query("telephonyJobs");
    
    if (args.status) {
      query = query.withIndex("by_call", (q) => 
        q.eq("callId", args.callId)
      );
      // Filter by status in memory since we can't use compound indexes
      const jobs = await query.collect();
      return jobs.filter(job => job.status === args.status);
    } else {
      query = query.withIndex("by_call", (q) => q.eq("callId", args.callId));
    }

    if (args.limit) {
      return await query.order("desc").take(args.limit);
    }

    return await query.order("desc").collect();
  },
});

// Get GStreamer job
export const getGStreamerJob = query({
  args: { callId: v.string() },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("gstreamerJobs")
      .withIndex("by_call", (q) => q.eq("callId", args.callId))
      .first();

    return job;
  },
});

// Get call statistics
export const getCallStats = query({
  args: { userId: v.string() },
  handler: async (ctx, args) => {
    const calls = await ctx.db
      .query("telephonyCalls")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .collect();

    const totalCalls = calls.length;
    const completedCalls = calls.filter(c => c.status === "completed").length;
    const failedCalls = calls.filter(c => c.status === "failed").length;
    const totalDuration = calls.reduce((sum, c) => sum + (c.duration || 0), 0);

    return {
      totalCalls,
      completedCalls,
      failedCalls,
      totalDuration,
      averageDuration: totalCalls > 0 ? totalDuration / totalCalls : 0,
    };
  },
});

// Get recent calls with transcripts
export const getRecentCallsWithTranscripts = query({
  args: { 
    userId: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const limit = args.limit || 10;
    
    const calls = await ctx.db
      .query("telephonyCalls")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .order("desc")
      .take(limit);

    const callsWithTranscripts = [];
    
    for (const call of calls) {
      const chunks = await ctx.db
        .query("audioChunks")
        .withIndex("by_call", (q) => q.eq("callId", call.callId))
        .order("desc")
        .take(5);

      callsWithTranscripts.push({
        ...call,
        recentChunks: chunks,
      });
    }

    return callsWithTranscripts;
  },
});


================================================
FILE: convex/queries/tiktokContent.ts
================================================
import { v } from "convex/values";
import { query } from "../_generated/server";

// Get cached user data
export const getCachedUser = query({
  args: {
    username: v.string(),
  },
  handler: async (ctx, args) => {
    const user = await ctx.db
      .query("tiktokUsers")
      .withIndex("by_username", (q) => q.eq("username", args.username))
      .first();
    
    if (!user) {
      return null;
    }
    
    // Check if cache is stale (24 hours)
    const isStale = Date.now() - user.cachedAt > 24 * 60 * 60 * 1000;
    
    return {
      user,
      isStale,
    };
  },
});

// Get cached videos for a user
export const getCachedVideos = query({
  args: {
    username: v.string(),
    limit: v.optional(v.number()),
    refreshTrigger: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const videos = await ctx.db
      .query("tiktokVideos")
      .withIndex("by_username", (q) => q.eq("username", args.username))
      .order("desc")
      .take(args.limit || 30);
    
    if (videos.length === 0) {
      return null;
    }
    
    // Check if cache is stale (6 hours)
    const oldestVideo = videos[videos.length - 1];
    const isStale = Date.now() - oldestVideo.cachedAt > 6 * 60 * 60 * 1000;
    
    return {
      videos,
      isStale,
    };
  },
});

// Get job status
export const getJob = query({
  args: {
    jobId: v.string(),
  },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("tiktokJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    return job;
  },
});

// Check rate limit for user
export const checkRateLimit = query({
  args: {
    userId: v.string(),
    action: v.union(
      v.literal("fetch_user"),
      v.literal("fetch_videos"),
      v.literal("download_videos")
    ),
  },
  handler: async (ctx, args) => {
    const limits = {
      fetch_user: 20,
      fetch_videos: 10,
      download_videos: 5,
    };
    
    const limit = limits[args.action];
    
    // Count recent jobs
    const recentJobs = await ctx.db
      .query("tiktokJobs")
      .withIndex("by_user_status", (q) => 
        q.eq("userId", args.userId)
      )
      .filter((q) => 
        q.and(
          q.eq(q.field("action"), args.action),
          q.gte(q.field("createdAt"), Date.now() - 60 * 60 * 1000) // Last hour
        )
      )
      .collect();
    
    const used = recentJobs.length;
    const remaining = Math.max(0, limit - used);
    const resetAt = recentJobs.length > 0 
      ? recentJobs[0].createdAt + 60 * 60 * 1000 
      : Date.now() + 60 * 60 * 1000;
    
    return {
      canCreate: remaining > 0,
      limit,
      used,
      remaining,
      resetAt,
    };
  },
});

// Get user's recent jobs
export const getUserJobs = query({
  args: {
    userId: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const jobs = await ctx.db
      .query("tiktokJobs")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .order("desc")
      .take(args.limit || 10);
    
    return jobs;
  },
});

// Get video download status
export const getVideoDownloadStatus = query({
  args: {
    videoIds: v.array(v.string()),
  },
  handler: async (ctx, args) => {
    const videos = await Promise.all(
      args.videoIds.map(async (videoId) => {
        const video = await ctx.db
          .query("tiktokVideos")
          .withIndex("by_video", (q) => q.eq("videoId", videoId))
          .first();
        
        return {
          videoId,
          downloadStatus: video?.downloadStatus || "pending",
          localPath: video?.localPath,
        };
      })
    );
    
    return videos;
  },
});


================================================
FILE: convex/queries/twitchContent.ts
================================================
import { v } from "convex/values";
import { query } from "../_generated/server";

// Get cached channel data
export const getChannel = query({
  args: {
    username: v.string(),
  },
  handler: async (ctx, args) => {
    const channel = await ctx.db
      .query("twitchChannels")
      .withIndex("by_username", (q) => q.eq("username", args.username))
      .first();
    
    return channel;
  },
});

// Get cached videos
export const getVideos = query({
  args: {
    channelUsername: v.string(),
  },
  handler: async (ctx, args) => {
    const videos = await ctx.db
      .query("twitchVideos")
      .withIndex("by_channel", (q) => q.eq("channelUsername", args.channelUsername))
      .collect();
    
    // Sort by createdAt descending (newest first)
    videos.sort((a, b) => b.createdAt - a.createdAt);
    
    return videos;
  },
});

// Get job status
export const getJob = query({
  args: {
    jobId: v.string(),
  },
  handler: async (ctx, args) => {
    const job = await ctx.db
      .query("twitchJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
    
    return job;
  },
});

// Get rate limit info for user
export const getRateLimitInfo = query({
  args: {
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    const { userId } = args;
    
    // Get jobs from last hour
    const oneHourAgo = Date.now() - 60 * 60 * 1000;
    
    const recentJobs = await ctx.db
      .query("twitchJobs")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .filter((q) => q.gte(q.field("createdAt"), oneHourAgo))
      .collect();
    
    // Count by action type
    const fetchChannelCount = recentJobs.filter(j => j.action === "fetch_channel").length;
    const fetchVideosCount = recentJobs.filter(j => j.action === "fetch_videos").length;
    const downloadCount = recentJobs.filter(j => j.action === "download_videos").length;
    
    // Rate limits (matching backend)
    const FETCH_CHANNEL_LIMIT = 20;
    const FETCH_VIDEOS_LIMIT = 10;
    const DOWNLOAD_LIMIT = 5;
    
    return {
      fetch_channel: {
        remaining: Math.max(0, FETCH_CHANNEL_LIMIT - fetchChannelCount),
        resetAt: oneHourAgo + 60 * 60 * 1000,
      },
      fetch_videos: {
        remaining: Math.max(0, FETCH_VIDEOS_LIMIT - fetchVideosCount),
        resetAt: oneHourAgo + 60 * 60 * 1000,
      },
      download_videos: {
        remaining: Math.max(0, DOWNLOAD_LIMIT - downloadCount),
        resetAt: oneHourAgo + 60 * 60 * 1000,
      },
    };
  },
});

// Debug query to get all Twitch videos
export const getAllTwitchVideos = query({
  args: {},
  handler: async (ctx) => {
    const videos = await ctx.db.query("twitchVideos").collect();
    
    return {
      count: videos.length,
      videos: videos.map(v => ({
        videoId: v.videoId,
        title: v.title,
        channelUsername: v.channelUsername,
        type: v.type,
        cachedAt: new Date(v.cachedAt).toISOString(),
      })),
    };
  },
});


================================================
FILE: convex/queries/youtubeContent.ts
================================================
import { query } from "../_generated/server";
import { v } from "convex/values";

// Check if user can create a new job (rate limiting)
export const checkRateLimit = query({
  args: {
    userId: v.string(),
    action: v.string(),
  },
  handler: async (ctx, args) => {
    // Define rate limits
    const rateLimits: Record<string, { limit: number; window: number }> = {
      fetch_channel: { limit: 20, window: 60 * 60 * 1000 }, // 20 per hour
      fetch_videos: { limit: 10, window: 60 * 60 * 1000 }, // 10 per hour
      download_videos: { limit: 5, window: 60 * 60 * 1000 }, // 5 per hour
    };
    
    const rateLimit = rateLimits[args.action];
    if (!rateLimit) {
      return { canCreate: true, remaining: 0, resetAt: 0 };
    }
    
    // Get jobs in the current window
    const windowStart = Date.now() - rateLimit.window;
    const recentJobs = await ctx.db
      .query("youtubeJobs")
      .withIndex("by_user_status", (q) => 
        q.eq("userId", args.userId)
      )
      .filter((q) => 
        q.and(
          q.eq(q.field("action"), args.action),
          q.gte(q.field("createdAt"), windowStart)
        )
      )
      .collect();
    
    const canCreate = recentJobs.length < rateLimit.limit;
    const remaining = Math.max(0, rateLimit.limit - recentJobs.length);
    const resetAt = windowStart + rateLimit.window;
    
    return { canCreate, remaining, resetAt };
  },
});

// Get cached channel data
export const getCachedChannel = query({
  args: {
    channelId: v.optional(v.string()),
    channelHandle: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    if (!args.channelId && !args.channelHandle) {
      return null;
    }
    
    let channel;
    if (args.channelId) {
      channel = await ctx.db
        .query("youtubeChannels")
        .withIndex("by_channel", (q) => q.eq("channelId", args.channelId))
        .first();
    } else if (args.channelHandle) {
      channel = await ctx.db
        .query("youtubeChannels")
        .withIndex("by_handle", (q) => q.eq("channelHandle", args.channelHandle))
        .first();
    }
    
    if (!channel) {
      return null;
    }
    
    // Check if cache is stale (older than 24 hours)
    const isStale = Date.now() - channel.cachedAt > 24 * 60 * 60 * 1000;
    
    return {
      channel,
      isStale,
    };
  },
});

// Get cached videos for a channel
export const getCachedVideos = query({
  args: {
    channelId: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    console.log('[getCachedVideos] Querying for channelId:', args.channelId);
    const limit = args.limit || 30;
    
    // First try with index (can't use order with this index)
    let videos = await ctx.db
      .query("youtubeVideos")
      .withIndex("by_channel", (q) => q.eq("channelId", args.channelId))
      .take(limit);
    
    console.log('[getCachedVideos] Found videos with index:', videos.length);
    
    // Log what we found
    if (videos.length === 0) {
      console.log('[getCachedVideos] No videos found with index query');
    }
    
    // If still no videos, try without index at all
    if (videos.length === 0) {
      console.log('[getCachedVideos] Trying without index...');
      const allVideos = await ctx.db
        .query("youtubeVideos")
        .take(100);
      
      videos = allVideos.filter(v => v.channelId === args.channelId).slice(0, limit);
      console.log('[getCachedVideos] Found videos without index:', videos.length);
      console.log('[getCachedVideos] Sample video channelIds:', allVideos.slice(0, 3).map(v => ({ 
        videoId: v.videoId,
        channelId: v.channelId,
        title: v.title 
      })));
    }
    
    if (videos.length === 0) {
      console.log('[getCachedVideos] No videos found, returning empty array');
      return {
        videos: [],
        isStale: false,
      };
    }
    
    // Check if cache is stale (older than 24 hours)
    const oldestVideo = videos[videos.length - 1];
    const isStale = Date.now() - oldestVideo.cachedAt > 24 * 60 * 60 * 1000;
    
    console.log('[getCachedVideos] Returning videos:', videos.length);
    return {
      videos,
      isStale,
    };
  },
});

// Get user's recent jobs
export const getUserJobs = query({
  args: {
    userId: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const limit = args.limit || 10;
    
    return await ctx.db
      .query("youtubeJobs")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .order("desc")
      .take(limit);
  },
});

// Get specific job by ID
export const getJob = query({
  args: {
    jobId: v.string(),
  },
  handler: async (ctx, args) => {
    return await ctx.db
      .query("youtubeJobs")
      .withIndex("by_job", (q) => q.eq("jobId", args.jobId))
      .first();
  },
});

// Get download status for videos
export const getVideoDownloadStatus = query({
  args: {
    videoIds: v.array(v.string()),
  },
  handler: async (ctx, args) => {
    const statuses: Record<string, string> = {};
    
    for (const videoId of args.videoIds) {
      const video = await ctx.db
        .query("youtubeVideos")
        .withIndex("by_video", (q) => q.eq("videoId", videoId))
        .first();
      
      if (video) {
        statuses[videoId] = video.downloadStatus || "pending";
      } else {
        statuses[videoId] = "not_found";
      }
    }
    
    return statuses;
  },
});

// Search videos by title or tags
export const searchVideos = query({
  args: {
    query: v.string(),
    channelId: v.optional(v.string()),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const limit = args.limit || 20;
    const searchQuery = args.query.toLowerCase();
    
    let videos = await ctx.db
      .query("youtubeVideos")
      .order("desc")
      .take(100); // Get more videos to filter
    
    // Filter by channel if specified
    if (args.channelId) {
      videos = videos.filter(v => v.channelId === args.channelId);
    }
    
    // Search in title and tags
    const results = videos.filter(video => {
      const titleMatch = video.title.toLowerCase().includes(searchQuery);
      const tagsMatch = video.tags?.some(tag => 
        tag.toLowerCase().includes(searchQuery)
      );
      return titleMatch || tagsMatch;
    });
    
    return results.slice(0, limit);
  },
});


================================================
FILE: data/query_cache.json
================================================
{
  "ba5abed6ae74f8c79148c0dff912a211": [
    "roofing contractors for residential and commercial properties in Belfast",
    "best roof repair services in Northern Ireland",
    "commercial roofing specialists Belfast UK",
    "slate and tile roof installation companies near me",
    "starting a small roofing business in Belfast tips"
  ],
  "09de45ec65c00531d16aa321f79440a7": [
    "emergency plumber services in London UK",
    "best drain cleaning companies London",
    "water heater repair specialists near London",
    "24/7 plumbing services London UK",
    "affordable plumbers for drain unclogging London"
  ],
  "1de7a57840e418cb10fc4158d148c83d": [
    "web development companies in San Francisco California",
    "best software engineering practices for API integration",
    "API integration services for web developers San Francisco",
    "San Francisco tech companies hiring web developers with API experience",
    "software engineering meetups for web development in California USA"
  ]
}


================================================
FILE: data/search_results.json
================================================
{
  "results": [
    {
      "position": 1,
      "title": "Home - Delta Roofing Services Belfast NI",
      "link": "https://www.deltaroofing.co.uk/",
      "snippet": "Missing: Construction residential construction",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 2,
      "title": "Advanced Construction & Roofing",
      "link": "https://adv-group.co.uk/",
      "snippet": "We have 25+ years experience. Advanced Construction & Roofing provide Quality and Affordable Construction and Roofing Services for Homes and Businesses.",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 3,
      "title": "Roofers in Belfast | Expert Roofing Services Across Northern Ireland",
      "link": "https://www.mdprocontracts.co.uk/",
      "snippet": "MD Pro Contracts is a leading roofing company based in Belfast, providing high-quality roofing services across Northern Ireland.",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 4,
      "title": "Sealmax Roofing: Roofing Contractors Northern Ireland",
      "link": "http://www.sealmaxroofing.ie/",
      "snippet": "Missing: guttering tile UK business",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 5,
      "title": "TOP 10 BEST Roofer in Belfast, United Kingdom - Updated 2025",
      "link": "https://m.yelp.com/search?find_desc=roofer&find_loc=Belfast",
      "snippet": "From the business: Roofing company in Belfast, northern Ireland , working on all aspects of roofing, slate, tile, and flat roofwork . See all reviews. Free",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 6,
      "title": "Slate / Tile Roofing Belfast - Advanced Construction & Roofing",
      "link": "https://adv-group.co.uk/service/slate-tile-roofing-belfast",
      "snippet": "Advanced Construction & Roofing provide Quality and Affordable Construction and Roofing Services for Homes and Businesses Throughout Belfast & Northern Ireland.",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 7,
      "title": "Onslow Roofing & Building Services Ltd | Roofing services Belfast",
      "link": "https://www.onslowroofing.co.uk/",
      "snippet": "From slate and tile repairs to flat roofs and chimney work, we handle it all. No job is too big or small. Proud Supporters of Our Local Belfast Community. At",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 8,
      "title": "Roofing Services in Belfast County Antrim - A1 Roofing UK",
      "link": "https://a1-roofing.co.uk/branches/belfast",
      "snippet": "A1 Roofing UK, are a 24 Hour Roofing Specialists in UK in United Kingdom, Call Us Today! Rapid Response, Highest Quality Service, Call on 0800 246 5142.",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 9,
      "title": "Roof Repair Solutions NI Building & Roofing Services - Facebook",
      "link": "https://www.facebook.com/PaulTheRooferBelfast",
      "snippet": "Roof Repair Solutions NI Building & Roofing Ltd NI686660 Services: \u2022Flat Slate Tile Roofing \u2022Chimney Repairs Rebuilds Removal \u2022Loft & Dormer Conversions \u2022Home",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 10,
      "title": "Russell Roofing - Belfast",
      "link": "http://www.russellroofingbelfast.co.uk/",
      "snippet": "residential, commercial and industrial clients throughout Northern Ireland from our location in Belfast. Call us today on 07793 747 644 or 02890 962262 to",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 12,
      "title": "Craigstown Roofing: Roofing Company Antrim | Flat Roof Repair",
      "link": "https://www.craigstownroofing.co.uk/",
      "snippet": "Craigstown Roofing offers roof repairs and new installations, specializing in PVC flat roofs, with services in Antrim, Newtownabbey, Belfast, and surrounding",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 13,
      "title": "Roof Repairs Belfast | construction.co.uk",
      "link": "https://www.construction.co.uk/c/720443/roof-repairs-belfast",
      "snippet": "Roof Repairs Belfast offers lead, chimney, tiles, slate, and flat roof repairs, plus chimney rebuilds, and roof cleaning services.",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 14,
      "title": "Roofers in Belfast - MyBuilder",
      "link": "https://www.mybuilder.com/roofing/roofer-tradespeople/belfast",
      "snippet": "We are a roofing company based in Belfast,Northern Ireland. We  G J Roofing contractors specialize in tiles, slates, flat roofs, guttering , led and PVC.",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 15,
      "title": "Onecall Roofing & Guttering: New Roofs & Repairs in Belfast",
      "link": "https://www.onecallroofingandguttering.co.uk/",
      "snippet": "Expert roofers offering their services in Magherafelt, Lisburn and Greater Belfast. Call Onecall Roofing & Guttering on 07447 095 523.",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 16,
      "title": "Roofing Contractors | L' Derry | D Harkin & Co Roofing Ltd",
      "link": "https://www.dharkinroofing.co.uk/",
      "snippet": "Looking for high-quality roofing work by certified roofing contractors? Contact D Harkin & Co in L'Derry today for all your commercial or domestic roofing",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 17,
      "title": "Tile Roof replacement in Northern Ireland and local area",
      "link": "https://www.local-quotes.co.uk/roofing/tile-or-slate-roofing/northern-ireland",
      "snippet": "Our tile and slate roofers in Northern Ireland are able to give you the best quotes to have a whole new roof constructed or repaired. Tile and slate are",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 18,
      "title": "Roofing Installations Belfast | Expert New Roof Services in NI",
      "link": "https://www.mdprocontracts.co.uk/roof-installation",
      "snippet": "Need a new roof in Belfast? MD Pro Contracts offers expert roofing installations, including tiling, slate, and flat roofs, across Northern Ireland.",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 19,
      "title": "Aztec Roofing & Property Maintenance - Facebook",
      "link": "https://www.facebook.com/AztecRoofingAndPropertyMaintenance",
      "snippet": "Missing: Northern Ireland, UK",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 20,
      "title": "JJ Roofing Specialists - Belfast - Construction.co.uk",
      "link": "https://www.construction.co.uk/c/667439/jj-roofing-specialists",
      "snippet": "All Your Roofing Work Taken Care Of Based in Belfast, we provide high-quality roofing services across Northern Ireland. \u00b7 Roof Repairs \u00b7 New Roofs \u00b7 Flat Roofs",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
      "search_iteration": 1
    },
    {
      "position": 2,
      "title": "Roofing Contractors near Saint Charles, MO | Better Business Bureau",
      "link": "https://www.bbb.org/us/mo/saint-charles/category/roofing-contractors",
      "snippet": "Contemporary Roofing. Roofing Contractors, Siding Contractors, Gutters  \u00b7 (636) 757-3563 ; New Life Roofing LLC. Roofing Contractors, Siding Contractors,",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
      "search_iteration": 3
    },
    {
      "position": 3,
      "title": "Donovan Roofing & Construction: St. Charles Roofing",
      "link": "https://donovanrc.com/",
      "snippet": "Roofing, Siding & Gutters in St. Charles & Greater St. Louis Area. Free  donovan roof roofing repair roof financing roofing project roof contractor",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
      "search_iteration": 3
    },
    {
      "position": 4,
      "title": "THE BEST 10 ROOFING near 250 WOODSTOCK RD, BELFAST",
      "link": "https://m.yelp.com/search?cflt=roofing&find_loc=250a+Woodstock+Road%2C+Belfast+BT6+9DL",
      "snippet": "Reliable Roofing. 3.0 (2 reviews). Roofing \u00b7 Gutter Services \u00b7 General Contractors  Roofing, Gutter inspection or adjusting, Gutter repair, Roof cleaning, Roof",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
      "search_iteration": 3
    },
    {
      "position": 5,
      "title": "Roofing Contractors near Maryland Heights, MO - BBB",
      "link": "https://www.bbb.org/us/mo/maryland-heights/category/roofing-contractors",
      "snippet": "John Beal Roofing. Roofing Contractors, General Contractor, Gutters  BBB Rating: A+ Service Area. Serving the following areas: 100 Mile radius of downtown",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
      "search_iteration": 3
    },
    {
      "position": 6,
      "title": "MLK Construction: Your #1 Professional Roofing Contractors",
      "link": "https://stlroofingcompany.com/",
      "snippet": "As professional roofing contractors we service residential, commercial, and industrial customers in St  Gutters. Slate Roofing. Our roofing services. Shingle",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
      "search_iteration": 3
    },
    {
      "position": 7,
      "title": "75 Verified Commercial Roofing Contractors Saint Louis, MO",
      "link": "https://downtobid.com/contractors/roofing/saint-louis",
      "snippet": "commercial roofing, siding, gutter, and tuckpointing services in the St.  gutters, and windows, to residential and commercial customers in St. Louis",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
      "search_iteration": 3
    },
    {
      "position": 15,
      "title": "Tile & Slate Roofing Northern Ireland | Roof Repairs Belfast | Roofinity",
      "link": "https://roofinityltd.uk/roofing-services",
      "snippet": "At Roofinity we're proud to offer a trusted and reliable roofing service backed by years of experience in the roofing industry.",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
      "search_iteration": 3
    },
    {
      "position": 16,
      "title": "Best 15 Roofers and Gutter Specialists in Belfast, Antrim | Houzz UK",
      "link": "https://www.houzz.co.uk/professionals/roofing-and-gutters/c/Belfast--Antrim",
      "snippet": "With over 20 years of specialised experience in the roofing industry, we are a family-run business known for our exceptional standards and quality workmanship.",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
      "search_iteration": 3
    },
    {
      "position": 17,
      "title": "Roofing Contractors in Belfast, Northern Ireland - 4ni",
      "link": "https://www.4ni.co.uk/sub/242x1/belfast-county-antrim/northern-ireland-roofing-contractors",
      "snippet": "Professional Roofline and Gutter Cleaning Service with 20 years of experience. JMJ Roofline has been trading for just over 5 years, whilst many of our staff",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
      "search_iteration": 3
    },
    {
      "position": 18,
      "title": "7 Roofers in Belfast \u2013 Get Free Quotes Now | Checkatrade",
      "link": "https://www.checkatrade.com/Search/Roofer/in/Belfast",
      "snippet": "Look through 7 Roofers and roofing services working in Belfast. Check out relevant tradespeople for the job and book today.",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
      "search_iteration": 3
    },
    {
      "position": 19,
      "title": "Belfast Roofing Services - IndustryOversight.co.uk",
      "link": "https://industryoversight.co.uk/roofing-contractors/belfast-nir",
      "snippet": "Our team of roofers can repair all types of roofs both domestic and commercial. We offer emergency repairs and same day repairs. We also repair and install",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
      "search_iteration": 3
    },
    {
      "position": 20,
      "title": "Emergency Roof Repairs in Northern Ireland - Costs & Quotes",
      "link": "https://northern-ireland.trusted-roofing.com/emergency-roof-repair.php",
      "snippet": "Find rated 24hr emergency roof repair services in Northern Ireland. Quick quotes for roof leak patching and tarp costs from emergency roofers.",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
      "search_iteration": 3
    },
    {
      "position": 7,
      "title": "Reliable Roofing Contractor | Tampa | St. Petersburg | Lakeland",
      "link": "https://cbrc.co/",
      "snippet": "CB Roofing Construction is a family owned and operated roofing company that was founded in 2010. We specialize in both residential and commercial roofing and",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction contact information email phone Belfast, Northern Ireland, UK",
      "search_iteration": 5
    },
    {
      "position": 8,
      "title": "Scam alert : r/Roofing - Reddit",
      "link": "https://www.reddit.com/r/Roofing/comments/14wutwz/scam_alert",
      "snippet": "I had a potential customer send me a text asking for a roof quote. They sent me the property address and said I can go measure it any time.",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction contact information email phone Belfast, Northern Ireland, UK",
      "search_iteration": 5
    },
    {
      "position": 9,
      "title": "Reliable Roofing Belfast: Roofing Repairs in Belfast",
      "link": "https://www.reliableroofingbelfast.co.uk/",
      "snippet": "We provide roofing works & repairs in Belfast and throughout Northern Ireland. We specialise in all roofing related projects from maintenance to completely new",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction contact information email phone Belfast, Northern Ireland, UK",
      "search_iteration": 5
    },
    {
      "position": 10,
      "title": "Pacman Roofing & Property Maintenance: Specialist roofers",
      "link": "https://www.pacman-roofing.co.uk/",
      "snippet": "For specialist roofers in Belfast and Bangor, call Pacman Roofing & Property Maintenance on. 028 9128 7547 or 0770 981 8651. Call us 0770 981 8651 Email us FIND",
      "search_page": 1,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction contact information email phone Belfast, Northern Ireland, UK",
      "search_iteration": 5
    },
    {
      "position": 11,
      "title": "Roof Insurance Work Belfast - Advanced Construction & Roofing",
      "link": "https://adv-group.co.uk/service/roof-insurance-work-belfast",
      "snippet": "For more information on our Roof Insurance Work or to arrange a FREE quotation visit please call us on 02890 726126 (Belfast) | 02891 071279 (Bangor) | 07542",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction contact information email phone Belfast, Northern Ireland, UK",
      "search_iteration": 5
    },
    {
      "position": 13,
      "title": "Haldane Fisher | Local Builders Merchants",
      "link": "https://www.haldane-fisher.com/?srsltid=AfmBOop62zxUIHDXvXKxbsuW2Usf9xPzwGArMzAQMEJcMOKgCujD274E",
      "snippet": "Haldane Fisher is one of the leading independent suppliers to the construction industry in the UK and Ireland, serving both trade customers and the general",
      "search_page": 2,
      "search_query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction contact information email phone Belfast, Northern Ireland, UK",
      "search_iteration": 5
    }
  ]
}


================================================
FILE: data/debug/jina_request_20250620_081341_Roofing and Construc.json
================================================
{
  "timestamp": "2025-06-20T08:13:41.481467",
  "url": "https://s.jina.ai/?q=Roofing%20and%20Construction%20roofing%20contractor%20roof%20repair%20commercial%20roofing%20residential%20roofing%20guttering%20slate%20roof%20tile%20roof%20roofing%20roof%20contractor%20construction%20Belfast%2C%20Northern%20Ireland%2C%20UK%20companies%20business%20contact&page=1",
  "headers": {
    "Accept": "application/json",
    "Authorization": "MASKED",
    "X-Respond-With": "no-content"
  },
  "query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
  "page": 1
}


================================================
FILE: data/debug/jina_request_20250620_081343_Roofing and Construc.json
================================================
{
  "timestamp": "2025-06-20T08:13:43.770402",
  "url": "https://s.jina.ai/?q=Roofing%20and%20Construction%20roofing%20contractor%20roof%20repair%20commercial%20roofing%20residential%20roofing%20guttering%20slate%20roof%20tile%20roof%20roofing%20roof%20contractor%20construction%20Belfast%2C%20Northern%20Ireland%2C%20UK%20companies%20business%20contact&page=2",
  "headers": {
    "Accept": "application/json",
    "Authorization": "MASKED",
    "X-Respond-With": "no-content"
  },
  "query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
  "page": 2
}


================================================
FILE: data/debug/jina_request_20250620_081345_Roofing and Construc.json
================================================
{
  "timestamp": "2025-06-20T08:13:45.995161",
  "url": "https://s.jina.ai/?q=Roofing%20and%20Construction%20roofing%20contractor%20roof%20repair%20commercial%20roofing%20residential%20roofing%20guttering%20slate%20roof%20tile%20roof%20roofing%20roof%20contractor%20construction%20services%20solutions%20providers%20Belfast%2C%20Northern%20Ireland%2C%20UK&page=1",
  "headers": {
    "Accept": "application/json",
    "Authorization": "MASKED",
    "X-Respond-With": "no-content"
  },
  "query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
  "page": 1
}


================================================
FILE: data/debug/jina_request_20250620_081348_Roofing and Construc.json
================================================
{
  "timestamp": "2025-06-20T08:13:48.485190",
  "url": "https://s.jina.ai/?q=Roofing%20and%20Construction%20roofing%20contractor%20roof%20repair%20commercial%20roofing%20residential%20roofing%20guttering%20slate%20roof%20tile%20roof%20roofing%20roof%20contractor%20construction%20services%20solutions%20providers%20Belfast%2C%20Northern%20Ireland%2C%20UK&page=2",
  "headers": {
    "Accept": "application/json",
    "Authorization": "MASKED",
    "X-Respond-With": "no-content"
  },
  "query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
  "page": 2
}


================================================
FILE: data/debug/jina_request_20250620_081350_Roofing and Construc.json
================================================
{
  "timestamp": "2025-06-20T08:13:50.123960",
  "url": "https://s.jina.ai/?q=Roofing%20and%20Construction%20roofing%20contractor%20roof%20repair%20commercial%20roofing%20residential%20roofing%20guttering%20slate%20roof%20tile%20roof%20roofing%20roof%20contractor%20construction%20services%20solutions%20providers%20Belfast%2C%20Northern%20Ireland%2C%20UK&page=1",
  "headers": {
    "Accept": "application/json",
    "Authorization": "MASKED",
    "X-Respond-With": "no-content"
  },
  "query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction services solutions providers Belfast, Northern Ireland, UK",
  "page": 1
}


================================================
FILE: data/debug/jina_request_20250620_081407_Roofing and Construc.json
================================================
{
  "timestamp": "2025-06-20T08:14:07.437685",
  "url": "https://s.jina.ai/?q=Roofing%20and%20Construction%20roofing%20contractor%20roof%20repair%20commercial%20roofing%20residential%20roofing%20guttering%20slate%20roof%20tile%20roof%20roofing%20roof%20contractor%20construction%20Belfast%2C%20Northern%20Ireland%2C%20UK%20companies%20business%20contact&page=1",
  "headers": {
    "Accept": "application/json",
    "Authorization": "MASKED",
    "X-Respond-With": "no-content"
  },
  "query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction Belfast, Northern Ireland, UK companies business contact",
  "page": 1
}


================================================
FILE: data/debug/jina_request_20250620_081412_Roofing and Construc.json
================================================
{
  "timestamp": "2025-06-20T08:14:12.769369",
  "url": "https://s.jina.ai/?q=Roofing%20and%20Construction%20roofing%20contractor%20roof%20repair%20commercial%20roofing%20residential%20roofing%20guttering%20slate%20roof%20tile%20roof%20roofing%20roof%20contractor%20construction%20contact%20information%20email%20phone%20Belfast%2C%20Northern%20Ireland%2C%20UK&page=1",
  "headers": {
    "Accept": "application/json",
    "Authorization": "MASKED",
    "X-Respond-With": "no-content"
  },
  "query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction contact information email phone Belfast, Northern Ireland, UK",
  "page": 1
}


================================================
FILE: data/debug/jina_request_20250620_081414_Roofing and Construc.json
================================================
{
  "timestamp": "2025-06-20T08:14:14.992921",
  "url": "https://s.jina.ai/?q=Roofing%20and%20Construction%20roofing%20contractor%20roof%20repair%20commercial%20roofing%20residential%20roofing%20guttering%20slate%20roof%20tile%20roof%20roofing%20roof%20contractor%20construction%20contact%20information%20email%20phone%20Belfast%2C%20Northern%20Ireland%2C%20UK&page=2",
  "headers": {
    "Accept": "application/json",
    "Authorization": "MASKED",
    "X-Respond-With": "no-content"
  },
  "query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction contact information email phone Belfast, Northern Ireland, UK",
  "page": 2
}


================================================
FILE: data/debug/jina_request_20250620_081416_Roofing and Construc.json
================================================
{
  "timestamp": "2025-06-20T08:14:16.877285",
  "url": "https://s.jina.ai/?q=Roofing%20and%20Construction%20roofing%20contractor%20roof%20repair%20commercial%20roofing%20residential%20roofing%20guttering%20slate%20roof%20tile%20roof%20roofing%20roof%20contractor%20construction%20contact%20information%20email%20phone%20Belfast%2C%20Northern%20Ireland%2C%20UK&page=1",
  "headers": {
    "Accept": "application/json",
    "Authorization": "MASKED",
    "X-Respond-With": "no-content"
  },
  "query": "Roofing and Construction roofing contractor roof repair commercial roofing residential roofing guttering slate roof tile roof roofing roof contractor construction contact information email phone Belfast, Northern Ireland, UK",
  "page": 1
}


================================================
FILE: public/424f35f4c6837cba6f15.webp
================================================
[Non-text file]


================================================
FILE: public/gr.png:Zone.Identifier
================================================



================================================
FILE: public/gr2.png:Zone.Identifier
================================================



================================================
FILE: public/gr3.png:Zone.Identifier
================================================



================================================
FILE: public/instagram.svg:Zone.Identifier
================================================



================================================
FILE: public/tiktok.svg:Zone.Identifier
================================================



================================================
FILE: public/twitch.svg:Zone.Identifier
================================================



================================================
FILE: public/audio/CafeAudio.m4a
================================================
[Non-text file]


================================================
FILE: public/audio/CoworkingAudio.m4a
================================================
[Non-text file]


================================================
FILE: public/audio/CrowdedOfficeAudio.m4a
================================================
[Non-text file]


================================================
FILE: public/audio/LibraryAudio.m4a
================================================
[Non-text file]


================================================
FILE: public/audio/TrainstationAudio.m4a
================================================
[Non-text file]


================================================
FILE: src/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "@/styles/globals.css";
import { ConvexClientProvider } from "@/components/providers/convex-client-provider";
import { Toaster } from "sonner";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Diala - Voice Agent Platform",
  description: "AI-powered voice agents for business",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ConvexClientProvider>
          {children}
          <Toaster
            position="top-right"
            theme="dark"
            richColors
            closeButton
            toastOptions={{
              style: {
                background: '#1e293b',
                color: '#f8fafc',
                border: '1px solid #475569',
              },
              classNames: {
                toast: 'bg-slate-800 text-slate-50 border-slate-600',
                success: 'bg-green-800 text-green-50 border-green-600',
                error: 'bg-red-800 text-red-50 border-red-600',
                warning: 'bg-yellow-800 text-yellow-50 border-yellow-600',
                info: 'bg-blue-800 text-blue-50 border-blue-600',
              },
            }}
          />
        </ConvexClientProvider>
      </body>
    </html>
  );
}



================================================
FILE: src/app/page.tsx
================================================
'use client';

import { useRouter } from 'next/navigation';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilMicrophone, UilDatabase, UilFileAlt, UilSearch, UilCrosshair } from '@tooni/iconscout-unicons-react';

export default function Home() {
  const router = useRouter();

  const onboardingPaths = [
    {
      id: 'voice',
      title: 'VOICE AGENT',
      description: 'Set up AI-powered voice conversations with realistic background sounds',
      icon: UilMicrophone,
      color: 'bg-[rgb(0,82,255)]',
      path: '/onboarding/voice'
    },
    {
      id: 'rag',
      title: 'RAG SYSTEM',
      description: 'Configure Retrieval-Augmented Generation for custom knowledge bases',
      icon: UilDatabase,
      color: 'bg-yellow-400',
      path: '/onboarding/rag'
    },
    {
      id: 'transcripts',
      title: 'TRANSCRIPTS',
      description: 'Manage call recordings and conversation transcripts',
      icon: UilFileAlt,
      color: 'bg-pink-400',
      path: '/onboarding/transcripts'
    },
    {
      id: 'hunter',
      title: 'HUNTER',
      description: 'Intelligent prospect search and automated outreach',
      icon: UilCrosshair,
      color: 'bg-violet-400',
      path: '/onboarding/hunter'
    }
  ];

  return (
    <div className="min-h-screen bg-[rgb(0,82,255)] flex items-center justify-center p-4" style={{ 
      fontFamily: 'Noyh-Bold, sans-serif',
      backgroundImage: `
        linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px),
        linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)
      `,
      backgroundSize: '60px 60px'
    }}>
      <div className="w-full max-w-6xl">
        <Card className="mb-8 transform -rotate-1">
          <CardHeader>
            <CardTitle className="text-6xl md:text-7xl font-black uppercase text-center text-black">
              CHOOSE YOUR PATH
            </CardTitle>
            <p className="text-xl text-center text-gray-700 mt-4">
              Select an onboarding experience to get started with Diala
            </p>
          </CardHeader>
        </Card>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {onboardingPaths.map((path, index) => {
            const Icon = path.icon;
            return (
              <Card 
                key={path.id}
                className={`transform ${index % 2 === 0 ? 'rotate-1' : '-rotate-1'} hover:rotate-0 transition-transform cursor-pointer`}
                onClick={() => router.push(path.path)}
              >
                <CardHeader>
                  <div className={`w-16 h-16 ${path.color} border-4 border-black flex items-center justify-center mb-4`}>
                    <Icon className="h-8 w-8 text-white" />
                  </div>
                  <CardTitle className="text-3xl font-black uppercase text-black mb-2">
                    {path.title}
                  </CardTitle>
                  <p className="text-lg text-gray-700">
                    {path.description}
                  </p>
                </CardHeader>
                <CardContent>
                  <Button 
                    className="w-full text-lg font-bold"
                    onClick={(e) => {
                      e.stopPropagation();
                      router.push(path.path);
                    }}
                  >
                    Get Started
                  </Button>
                </CardContent>
              </Card>
            );
          })}
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/app/dashboard/layout.tsx
================================================
'use client';

import * as React from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { 
  UilDashboard,
  UilPhone,
  UilMicrophone,
  UilAnalytics,
  UilSetting,
  UilRobot,
  UilUsersAlt,
  UilBars,
  UilTimes,
  UilAngleRight,
  UilLayerGroup,
  UilBrain,
  UilDesktop,
  UilSearchAlt,
  UilFlask,
  UilSitemap
} from '@tooni/iconscout-unicons-react';

interface NavItem {
  id: string;
  label: string;
  href: string;
  icon: React.ComponentType<any>;
  badge?: number;
}

const navItems: NavItem[] = [
  { id: 'dashboard', label: 'DASHBOARD', href: '/dashboard', icon: UilDashboard },
  { id: 'agents', label: 'VOICE AGENTS', href: '/dashboard/agents', icon: UilRobot, badge: 6 },
  { id: 'swarms', label: 'AGENT SWARMS', href: '/dashboard/swarms', icon: UilLayerGroup },
  { id: 'auto-rag', label: 'AUTO-RAG', href: '/dashboard/auto-rag', icon: UilBrain },
  { id: 'automation', label: 'AUTOMATION', href: '/dashboard/automation', icon: UilSitemap },
  { id: 'calls', label: 'LIVE CALLS', href: '/dashboard/calls', icon: UilPhone, badge: 3 },
  { id: 'business-hunter', label: 'BUSINESS HUNTER', href: '/dashboard/business-hunter', icon: UilSearchAlt },
  { id: 'playground', label: 'PLAYGROUND', href: '/dashboard/playground', icon: UilFlask },
  { id: 'analytics', label: 'ANALYTICS', href: '/dashboard/analytics', icon: UilAnalytics },
  { id: 'settings', label: 'SETTINGS', href: '/dashboard/settings', icon: UilSetting },
];

export default function DashboardLayout({ children }: { children: React.ReactNode }) {
  const pathname = usePathname();
  const [sidebarOpen, setSidebarOpen] = React.useState(true);
  const [mobileMenuOpen, setMobileMenuOpen] = React.useState(false);

  return (
    <div className="h-screen flex bg-white overflow-hidden" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
      {/* Sidebar */}
      <aside
        className={cn(
          "fixed lg:static inset-y-0 left-0 z-50 flex flex-col bg-[rgb(0,82,255)] text-white transition-all duration-300 border-r-4 border-black",
          sidebarOpen ? "w-64" : "w-20",
          mobileMenuOpen ? "translate-x-0" : "-translate-x-full lg:translate-x-0"
        )}
      >
        {/* Logo Section */}
        <div className="p-6 border-b-4 border-black bg-white">
          <div className="flex items-center justify-between">
            <Link href="/dashboard" className="flex items-center gap-3">
              <div className="w-10 h-10 bg-[rgb(0,82,255)] border-3 border-black flex items-center justify-center font-black text-xl text-white shadow-[4px_4px_0_rgba(0,0,0,1)]">
                D
              </div>
              {sidebarOpen && (
                <span className="font-black text-xl uppercase text-black">DIALA</span>
              )}
            </Link>
            <button
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="hidden lg:block p-2 hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-[rgb(0,82,255)] focus:ring-offset-2"
            >
              {sidebarOpen ? <UilAngleRight className="w-5 h-5 rotate-180 text-black" /> : <UilAngleRight className="w-5 h-5 text-black" />}
            </button>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 p-4">
          <div className="space-y-2">
            {navItems.map((item) => {
              const Icon = item.icon;
              const isActive = pathname === item.href;
              
              return (
                <Link
                  key={item.id}
                  href={item.href}
                  className={cn(
                    "flex items-center gap-3 px-3 py-3 transition-all duration-200 border-2",
                    "hover:bg-white hover:text-[rgb(0,82,255)] hover:border-black hover:shadow-[4px_4px_0_rgba(0,0,0,1)]",
                    isActive ? "bg-white text-[rgb(0,82,255)] border-black shadow-[4px_4px_0_rgba(0,0,0,1)]" : "border-transparent",
                    !sidebarOpen && "justify-center"
                  )}
                >
                  <Icon className="w-6 h-6 flex-shrink-0" />
                  {sidebarOpen && (
                    <>
                      <span className="flex-1 font-bold">{item.label}</span>
                      {item.badge && (
                        <span className={cn(
                          "px-2 py-0.5 text-xs font-black border-2 border-black",
                          isActive ? "bg-[rgb(0,82,255)] text-white" : "bg-yellow-400 text-black"
                        )}>
                          {item.badge}
                        </span>
                      )}
                    </>
                  )}
                </Link>
              );
            })}
          </div>
        </nav>


      </aside>

      {/* Mobile Menu Overlay */}
      {mobileMenuOpen && (
        <div
          className="fixed inset-0 bg-black/50 z-40 lg:hidden"
          onClick={() => setMobileMenuOpen(false)}
        />
      )}

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Top Bar */}
        <header className="bg-white border-b-4 border-black px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                className="lg:hidden p-2 hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-[rgb(0,82,255)] focus:ring-offset-2"
              >
                <UilBars className="w-5 h-5" />
              </button>
              <h1 className="text-2xl font-black uppercase">{navItems.find(item => item.href === pathname)?.label || 'DASHBOARD'}</h1>
            </div>
            
            <div className="flex items-center gap-3">
              <Button 
                className="font-black uppercase"
              >
                <UilMicrophone className="w-4 w-4 mr-2" />
                NEW AGENT
              </Button>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="flex-1 p-6 bg-gray-50 overflow-y-auto">
          {children}
        </main>
      </div>
    </div>
  );
}


================================================
FILE: src/app/dashboard/page.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import StatCard from '@/components/custom/stat-card';
import AgentCard from '@/components/custom/analytics/agent-card';
import DailyPerformanceLeaderboard from '@/components/custom/analytics/daily-performance-leaderboard';
import AnalyticsSummary from '@/components/custom/analytics/analytics-summary';
import { 
  UilPhone,
  UilMicrophone,
  UilClock,
  UilPlay,
  UilRobot,
  UilCheckCircle,
} from '@tooni/iconscout-unicons-react';

// Active Voice Agents
const activeAgents = [
  {
    id: 1,
    name: 'Diala-Tone',
    status: 'active',
    currentCall: {
      contact: 'John Smith',
      duration: '5:23',
      type: 'Discovery Call'
    },
    callsToday: 45,
    successRate: 92
  },
  {
    id: 2,
    name: 'Echo-Diala',
    status: 'active',
    currentCall: {
      contact: 'Sarah Johnson',
      duration: '12:45',
      type: 'Customer Support'
    },
    callsToday: 38,
    successRate: 88
  },
  {
    id: 3,
    name: 'Voice-Diala',
    status: 'idle',
    currentCall: null,
    callsToday: 52,
    successRate: 95
  },
  {
    id: 4,
    name: 'Diala-Belle',
    status: 'offline',
    currentCall: null,
    callsToday: 0,
    successRate: 90
  }
];

// Analytics agents for the new components
const analyticsAgents = [
  {
    id: 'agent_001',
    name: 'Diala-Tone',
    status: 'active' as const,
    calls: 45,
    success: 92,
    currentCall: 'John Smith'
  },
  {
    id: 'agent_002', 
    name: 'Echo-Diala',
    status: 'active' as const,
    calls: 38,
    success: 88,
    currentCall: 'Sarah Johnson'
  },
  {
    id: 'agent_003',
    name: 'Voice-Diala', 
    status: 'paused' as const,
    calls: 52,
    success: 95,
    currentCall: null
  },
  {
    id: 'agent_004',
    name: 'Diala-Belle',
    status: 'active' as const,
    calls: 31,
    success: 85,
    currentCall: 'Michael Chen'
  },
  {
    id: 'agent_005',
    name: 'Neo-Diala',
    status: 'inactive' as const,
    calls: 67,
    success: 98,
    currentCall: null
  }
];

// Mock analytics data
const mockSwarmData = {
  successRate: 89,
  totalCalls: 247,
  activeAgents: 3
};

const mockSwarmDetails = {
  performance: {
    callsToday: 135,
    appointmentsBooked: 12,
    qualityScore: 92
  }
};

type RecentCall = {
  id: number;
  agent: string;
  contact: string;
  duration: string;
  status: 'completed' | 'failed';
  sentiment: 'positive' | 'neutral' | 'negative';
};

// Recent calls
const recentCalls: RecentCall[] = [
  { id: 1, agent: 'Diala-Tone', contact: 'Emma Davis', duration: '8:12', status: 'completed', sentiment: 'positive' },
  { id: 2, agent: 'Echo-Diala', contact: 'Michael Chen', duration: '3:45', status: 'completed', sentiment: 'neutral' },
  { id: 3, agent: 'Voice-Diala', contact: 'Robert Wilson', duration: '15:30', status: 'completed', sentiment: 'positive' },
  { id: 4, agent: 'Diala-Tone', contact: 'Lisa Anderson', duration: '6:20', status: 'failed', sentiment: 'negative' },
];

export default function DashboardPage() {
  const totalCallsToday = activeAgents.reduce((sum, agent) => sum + agent.callsToday, 0);
  const activeCallsCount = activeAgents.filter(a => a.status === 'active' && a.currentCall).length;
  const avgSuccessRate = Math.round(activeAgents.reduce((sum, agent) => sum + agent.successRate, 0) / activeAgents.length);

  return (
    <div className="h-full overflow-y-auto space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <StatCard
          title="TOTAL CALLS TODAY"
          value={totalCallsToday}
          icon={<UilPhone className="h-5 w-5 text-white" />}
          iconBgColor="bg-purple-600"
          bgGradient="from-purple-50 to-purple-100"
          trend={{
            value: "+15%",
            type: "positive",
            label: "vs yesterday"
          }}
        />

        <StatCard
          title="ACTIVE CALLS"
          value={activeCallsCount}
          icon={<UilMicrophone className="h-5 w-5 text-white" />}
          iconBgColor="bg-green-600"
          bgGradient="from-green-50 to-green-100"
          status={{
            label: "Live conversations",
            color: "bg-green-100"
          }}
        />

        <StatCard
          title="SUCCESS RATE"
          value={`${avgSuccessRate}%`}
          icon={<UilCheckCircle className="h-5 w-5 text-white" />}
          iconBgColor="bg-orange-600"
          bgGradient="from-orange-50 to-orange-100"
          progress={avgSuccessRate}
        />

        <StatCard
          title="AVG CALL TIME"
          value="7:45"
          subtitle="MINUTES"
          icon={<UilClock className="h-5 w-5 text-white" />}
          iconBgColor="bg-pink-600"
          bgGradient="from-pink-50 to-pink-100"
          trend={{
            value: "-0:30",
            type: "neutral",
            label: "optimal"
          }}
        />
      </div>


      {/* Active Voice Agents and Daily Performance Leaderboard */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Active Voice Agents */}
        <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
          <CardHeader className="border-b-4 border-black">
            <div className="flex items-center gap-3">
              <Button 
                size="icon"
                variant="default"
                className="w-12 h-12 bg-[rgb(0,82,255)] border-4 border-black"
              >
                <UilRobot className="h-6 w-6 text-white" />
              </Button>
              <CardTitle className="text-xl font-black uppercase">ACTIVE VOICE AGENTS</CardTitle>
            </div>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {analyticsAgents.slice(0, 2).map((agent, index) => (
                <AgentCard 
                  key={agent.id}
                  agent={agent}
                  avatarColor={
                    index === 0 ? "bg-blue-400" : 
                    "bg-purple-400"
                  }
                  showCurrentStatus={true}
                  showMetrics={true}
                />
              ))}
            </div>
            
            {/* View All Button */}
            <div className="mt-6 text-center">
              <Button 
                onClick={() => {
                  const url = new URL('/dashboard/calls', window.location.origin);
                  url.searchParams.set('tab', 'calls');
                  window.location.href = url.toString();
                }}
                className="bg-yellow-400 hover:bg-yellow-500 text-black font-black uppercase border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all px-6 py-3 text-lg"
              >
                VIEW ALL AGENTS
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Daily Performance Leaderboard */}
        <DailyPerformanceLeaderboard 
          agents={analyticsAgents}
          sortBy="success"
          maxItems={5}
        />
      </div>

      {/* Analytics Summary */}
      <AnalyticsSummary swarmData={mockSwarmData} swarmDetails={mockSwarmDetails} />
    </div>
  );
}

function cn(...classes: string[]) {
  return classes.filter(Boolean).join(' ');
}


================================================
FILE: src/app/dashboard/agents/page.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Input } from '@/components/ui/input';
import StatCard from '@/components/custom/stat-card';
import CreateAgentModal from '@/components/custom/modals/create-agent-modal';
import AgentDetailModal from '@/components/custom/modals/agent-detail-modal';
import { cn } from '@/lib/utils';
import { 
  UilRobot,
  UilMicrophone,
  UilPlay,
  UilPause,
  UilEdit,
  UilTrash,
  UilCopy,
  UilSetting,
  UilChart,
  UilClock,
  UilPhone,
  UilCheckCircle,
  UilExclamationTriangle,
  UilPlus,
  UilStop,
  UilRefresh,
  UilLanguage,
  UilHistory,
  UilStar
} from '@tooni/iconscout-unicons-react';

// Augmented voice agents data structure
const voiceAgents = [
  {
    id: 1,
    name: 'Diala-Tone',
    voice: 'Professional',
    language: 'English (US)',
    purpose: 'Sales & Discovery',
    status: 'active',
    performance: {
      totalCalls: 1250,
      successRate: 92,
      avgDuration: '7:45',
      satisfaction: 4.8
    },
    description: 'Professional sales agent focused on discovery calls and lead qualification.',
    lastActive: '2 mins ago',
    systemPrompt: 'You are a professional sales agent. Your goal is to conduct discovery calls, identify pain points, and qualify leads for the sales team. Be polite, concise, and inquisitive.',
    ragSources: [
      { id: 'M1', name: 'Objection Mindset', description: 'Reframes objections as opportunities for clarification and builds resilience.' },
      { id: 'M4', name: 'Price Objections', description: 'Focuses on reframing price to ROI and value-based selling.' }
    ],
    businessHunt: {
      huntId: 'bh-001',
      huntName: 'Silicon Valley SaaS Startups',
      status: 'active',
      config: {
        industry: "Technology",
        businessTypes: ["SaaS", "Software"],
        locations: ["San Francisco, CA", "Palo Alto, CA"],
        companySize: "Startup",
      }
    }
  },
  {
    id: 2,
    name: 'Echo-Diala',
    voice: 'Friendly',
    language: 'English (US)',
    purpose: 'Customer Support',
    status: 'active',
    performance: {
      totalCalls: 980,
      successRate: 88,
      avgDuration: '12:30',
      satisfaction: 4.6
    },
    description: 'Empathetic support agent specialized in resolving customer issues.',
    lastActive: '5 mins ago',
    systemPrompt: 'You are a friendly and empathetic customer support agent. Listen carefully to customer issues, provide clear solutions, and ensure a positive customer experience.',
    ragSources: [
      { id: 'M2', name: 'Objection Discovery', description: 'Techniques for understanding the real objection and finding the root cause.' },
      { id: 'M3', name: 'Frameworks', description: 'Utilizes frameworks like Feel-Felt-Found and LAARC for systematic issue resolution.' }
    ],
    swarmInfo: {
      swarmId: 'swarm-support-alpha',
      swarmName: 'Alpha Support Swarm',
      swarmPurpose: 'Handling high-priority customer support tickets.'
    }
  },
  {
    id: 3,
    name: 'Voice-Diala',
    voice: 'Energetic',
    language: 'Spanish (MX)',
    purpose: 'Appointment Setting',
    status: 'idle',
    performance: {
      totalCalls: 2100,
      successRate: 95,
      avgDuration: '4:20',
      satisfaction: 4.9
    },
    description: 'High-energy agent optimized for quick appointment scheduling.',
    lastActive: '1 hour ago',
    systemPrompt: 'You are an energetic and persuasive agent focused on setting appointments. Be enthusiastic, clear, and efficient in your communication.',
    ragSources: [
      { id: 'M5', name: '"Think About It" Handling', description: 'Strategies for uncovering hidden concerns and creating urgency without pressure.' },
      { id: 'M6', name: '"Not Interested" Response', description: 'Techniques to gently probe and diagnose disinterest.' }
    ],
    businessHunt: {
      huntId: 'bh-002',
      huntName: 'Texas Medical Practices',
      status: 'completed',
      config: {
        industry: "Healthcare",
        businessTypes: ["Medical Practice", "Clinic"],
        locations: ["Houston, TX", "Dallas, TX", "Austin, TX"],
      }
    }
  },
  {
    id: 4,
    name: 'Diala-Belle',
    voice: 'Calm',
    language: 'French (FR)',
    purpose: 'Technical Support',
    status: 'offline',
    performance: {
      totalCalls: 650,
      successRate: 90,
      avgDuration: '15:00',
      satisfaction: 4.7
    },
    description: 'Patient technical support specialist with deep product knowledge.',
    lastActive: '2 days ago',
    systemPrompt: 'You are a calm and patient technical support specialist. Guide users through complex technical issues with clear, step-by-step instructions.',
    ragSources: [
        { id: 'M7', name: 'Competitive Objections', description: 'Focuses on unique value framing without attacking competitors.' },
        { id: 'M8', name: 'Time & Budget Constraints', description: 'Strategies for offering micro-commitments and phased solutions.' }
    ]
  }
];

export default function AgentsPage() {
  const [selectedAgent, setSelectedAgent] = React.useState<any | null>(null);
  const [isCreateModalOpen, setIsCreateModalOpen] = React.useState(false);
  const [isDetailModalOpen, setIsDetailModalOpen] = React.useState(false);

  const handleCreateAgent = async (agentData: any) => {
    // TODO: Implement actual agent creation logic
    console.log('Creating agent:', agentData);
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000));
    setIsCreateModalOpen(false);
  };

  const handleCardClick = (agent: any) => {
    setSelectedAgent(agent);
    setIsDetailModalOpen(true);
  }

  return (
    <div className="h-full overflow-y-auto space-y-6">
      {/* Header Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <StatCard
          title="TOTAL AGENTS"
          value={voiceAgents.length.toString()}
          icon={<UilRobot className="h-5 w-5 text-white" />}
          iconBgColor="bg-purple-600"
          bgGradient="from-purple-50 to-purple-100"
          subtitle="Configured agents"
        />

        <StatCard
          title="ACTIVE NOW"
          value="2"
          icon={<UilMicrophone className="h-5 w-5 text-white" />}
          iconBgColor="bg-green-600"
          bgGradient="from-green-50 to-green-100"
          subtitle="Currently on calls"
          status={{
            label: "Currently on calls",
            color: "bg-green-100"
          }}
        />

        <StatCard
          title="AVG SUCCESS"
          value="91%"
          icon={<UilCheckCircle className="h-5 w-5 text-white" />}
          iconBgColor="bg-orange-600"
          bgGradient="from-orange-50 to-orange-100"
          progress={91}
        />

        <StatCard
          title="TOTAL CALLS"
          value="4,980"
          icon={<UilPhone className="h-5 w-5 text-white" />}
          iconBgColor="bg-pink-600"
          bgGradient="from-pink-50 to-pink-100"
          subtitle="Last 30 days"
        />
      </div>

      {/* Create New Agent Button */}
      <div className="flex justify-end">
        <Button 
          variant="default"
          className="font-black uppercase"
          onClick={() => setIsCreateModalOpen(true)}
        >
          <UilPlus className="h-5 w-5 mr-2" />
          CREATE NEW AGENT
        </Button>
      </div>

      {/* Voice Agents Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {voiceAgents.map((agent) => (
          <Card 
            key={agent.id}
            className="cursor-pointer"
            onClick={() => handleCardClick(agent)}
          >
            <CardHeader className={cn(
              "border-b-4 border-black",
              agent.purpose.includes('Discovery') && "bg-[#C084FC]",
              agent.purpose.includes('Support') && "bg-[#4ADE80]",
              agent.purpose.includes('Appointment') && "bg-[#FB923C]",
              agent.purpose.includes('Technical') && "bg-[#F472B6]"
            )}>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Button 
                    size="icon"
                    variant="default"
                    className="w-12 h-12 bg-white border-4 border-black"
                  >
                    <UilRobot className="h-6 w-6" />
                  </Button>
                  <div>
                    <CardTitle className="text-xl font-black text-white">{agent.name}</CardTitle>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge className={cn(
                        "font-black uppercase border-2 border-black text-white",
                        agent.purpose.includes('Discovery') && "bg-purple-600",
                        agent.purpose.includes('Support') && "bg-green-600",
                        agent.purpose.includes('Appointment') && "bg-orange-600",
                        agent.purpose.includes('Technical') && "bg-pink-600"
                      )}>
                        {agent.purpose}
                      </Badge>
                      <Badge className={cn(
                        "font-black uppercase border-2 border-black text-white",
                        agent.purpose.includes('Discovery') && "bg-purple-800",
                        agent.purpose.includes('Support') && "bg-green-800",
                        agent.purpose.includes('Appointment') && "bg-orange-800",
                        agent.purpose.includes('Technical') && "bg-pink-800"
                      )}>
                        {agent.status.toUpperCase()}
                      </Badge>
                    </div>
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button 
                    size="icon"
                    variant="default" 
                    className="h-8 w-8 bg-white border-2 border-black"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <UilEdit className="h-4 w-4" />
                  </Button>
                  <Button 
                    size="icon"
                    variant="default" 
                    className="h-8 w-8 bg-white border-2 border-black"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <UilCopy className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="p-6">
              {/* Description Section */}
              <div className="mb-6">
                <p className="text-gray-700 leading-relaxed">{agent.description}</p>
              </div>
              
              {/* Agent Configuration */}
              <div className="grid grid-cols-2 gap-4 mb-6">
                <Card className="bg-gray-50 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                  <CardContent className="p-3">
                    <div className="flex items-center gap-2 mb-1">
                      <UilMicrophone className="h-4 w-4 text-gray-600" />
                      <span className="text-xs font-black uppercase text-gray-600">Voice Model</span>
                    </div>
                    <p className="font-black text-black">{agent.voice}</p>
                  </CardContent>
                </Card>
                <Card className="bg-gray-50 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                  <CardContent className="p-3">
                    <div className="flex items-center gap-2 mb-1">
                      <UilLanguage className="h-4 w-4 text-gray-600" />
                      <span className="text-xs font-black uppercase text-gray-600">Language</span>
                    </div>
                    <p className="font-black text-black">{agent.language}</p>
                  </CardContent>
                </Card>
              </div>

              {/* Performance Metrics */}
              <div className="mb-4">
                <h4 className="text-xs font-black uppercase text-black mb-3">PERFORMANCE METRICS</h4>
                <div className="grid grid-cols-2 gap-3">
                  <Card className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                    <CardContent className="p-3">
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-xs font-bold uppercase text-gray-600">Total Calls</span>
                        <UilPhone className="h-4 w-4 text-gray-400" />
                      </div>
                      <p className="text-2xl font-black text-black">{agent.performance.totalCalls}</p>
                      <p className="text-xs text-gray-600">Last 30 days</p>
                    </CardContent>
                  </Card>
                  <Card className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                    <CardContent className="p-3">
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-xs font-bold uppercase text-gray-600">Success Rate</span>
                        <UilCheckCircle className="h-4 w-4 text-green-500" />
                      </div>
                      <p className="text-2xl font-black text-green-600">{agent.performance.successRate}%</p>
                      <div className="w-full bg-gray-200 h-1 mt-1">
                        <div className="bg-green-500 h-1" style={{ width: `${agent.performance.successRate}%` }}></div>
                      </div>
                    </CardContent>
                  </Card>
                  <Card className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                    <CardContent className="p-3">
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-xs font-bold uppercase text-gray-600">Avg Duration</span>
                        <UilHistory className="h-4 w-4 text-blue-500" />
                      </div>
                      <p className="text-2xl font-black text-blue-600">{agent.performance.avgDuration}</p>
                      <p className="text-xs text-gray-600">Per conversation</p>
                    </CardContent>
                  </Card>
                  <Card className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                    <CardContent className="p-3">
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-xs font-bold uppercase text-gray-600">Satisfaction</span>
                        <UilStar className="h-4 w-4 text-yellow-500" />
                      </div>
                      <p className="text-2xl font-black text-yellow-600">{agent.performance.satisfaction}</p>
                      <p className="text-xs text-gray-600">Customer rating</p>
                    </CardContent>
                  </Card>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex items-center justify-between">
                <div className="text-sm text-gray-600">
                  <span className="font-bold">Last active:</span> {agent.lastActive}
                </div>
                <div className="flex gap-2">
                  <Button 
                    size="sm"
                    variant="neutral"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <UilChart className="h-4 w-4" />
                    STATS
                  </Button>
                  <Button 
                    size="sm"
                    variant={agent.status === 'active' ? 'neutral' : 'default'}
                    onClick={(e) => e.stopPropagation()}
                  >
                    {agent.status === 'active' ? <UilPause className="h-4 w-4" /> : <UilPlay className="h-4 w-4" />}
                    {agent.status === 'active' ? 'PAUSE' : 'START'}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Create Agent Modal */}
      <CreateAgentModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onSave={handleCreateAgent}
      />

      {/* Agent Detail Modal */}
      {selectedAgent && (
        <AgentDetailModal
          isOpen={isDetailModalOpen}
          onClose={() => setIsDetailModalOpen(false)}
          agentData={selectedAgent}
        />
      )}
    </div>
  );
}


================================================
FILE: src/app/dashboard/analytics/page.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import StatCard from '@/components/custom/stat-card';
import { cn } from '@/lib/utils';
import { 
  UilChart,
  UilArrowGrowth,
  UilArrowDown,
  UilPhone,
  UilClock,
  UilCheckCircle,
  UilTimesCircle,
  UilCalendarAlt,
  UilExport,
  UilFilter,
  UilSmile
} from '@tooni/iconscout-unicons-react';

// Mock data for charts
const callVolumeData = [
  { day: 'Mon', calls: 145 },
  { day: 'Tue', calls: 182 },
  { day: 'Wed', calls: 168 },
  { day: 'Thu', calls: 195 },
  { day: 'Fri', calls: 210 },
  { day: 'Sat', calls: 98 },
  { day: 'Sun', calls: 65 }
];

const agentPerformance = [
  { agent: 'Diala-Tone', success: 92, calls: 245 },
  { agent: 'Echo-Diala', success: 88, calls: 198 },
  { agent: 'Voice-Diala', success: 95, calls: 312 },
  { agent: 'Diala-Belle', success: 90, calls: 156 }
];

const sentimentData = {
  positive: 68,
  neutral: 24,
  negative: 8
};

export default function AnalyticsPage() {
  const [timeRange, setTimeRange] = React.useState('week');
  const maxCalls = Math.max(...callVolumeData.map(d => d.calls));

  return (
    <div className="h-full overflow-y-auto space-y-6">
      {/* Header with filters */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-black uppercase">Voice Analytics</h1>
          <p className="text-gray-600 font-bold">Performance insights and call metrics</p>
        </div>
        <div className="flex gap-3">
          <select
            value={timeRange}
            onChange={(e) => setTimeRange(e.target.value)}
            className="px-4 py-2 border-2 border-black font-bold focus:outline-none"
          >
            <option value="today">TODAY</option>
            <option value="week">THIS WEEK</option>
            <option value="month">THIS MONTH</option>
            <option value="year">THIS YEAR</option>
          </select>
          <Button 
            variant="neutral" 
            className="font-bold uppercase"
          >
            <UilFilter className="h-4 w-4 mr-2" />
            FILTER
          </Button>
          <Button 
            variant="default"
            className="font-black uppercase"
          >
            <UilExport className="h-4 w-4 mr-2" />
            EXPORT
          </Button>
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <StatCard
          title="TOTAL CALLS"
          value="1,063"
          icon={<UilPhone className="h-5 w-5 text-white" />}
          iconBgColor="bg-purple-600"
          bgGradient="from-purple-50 to-purple-100"
          trend={{
            type: 'positive',
            value: '+23%',
            label: 'vs last week'
          }}
        />

        <StatCard
          title="SUCCESS RATE"
          value="91.2%"
          icon={<UilCheckCircle className="h-5 w-5 text-white" />}
          iconBgColor="bg-green-600"
          bgGradient="from-green-50 to-green-100"
          trend={{
            type: 'positive',
            value: '+2.5%',
            label: 'improvement'
          }}
        />

        <StatCard
          title="AVG DURATION"
          value="6:48"
          icon={<UilClock className="h-5 w-5 text-white" />}
          iconBgColor="bg-orange-600"
          bgGradient="from-orange-50 to-orange-100"
          subtitle="MINUTES"
          trend={{
            type: 'neutral',
            value: '-0:32',
            label: 'optimized'
          }}
        />

        <StatCard
          title="SATISFACTION"
          value="4.7/5"
          icon={<UilSmile className="h-5 w-5 text-white" />}
          iconBgColor="bg-pink-600"
          bgGradient="from-pink-50 to-pink-100"
          subtitle="Customer rating"
        />
      </div>

      {/* Charts Row */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Call Volume Chart */}
        <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] lg:col-span-2">
          <CardHeader className="border-b-4 border-black bg-pink-300">
            <CardTitle className="text-xl font-black uppercase">CALL VOLUME</CardTitle>
          </CardHeader>
          <CardContent className="pt-6">
            <div className="space-y-4">
              {callVolumeData.map((day) => (
                <div key={day.day} className="flex items-center gap-4">
                  <span className="w-12 text-sm font-black uppercase">{day.day}</span>
                  <div className="flex-1 relative">
                    <div className="h-8 bg-gray-200 border-2 border-black">
                      <div 
                        className="h-full bg-[rgb(0,82,255)] border-r-2 border-black"
                        style={{ width: `${(day.calls / maxCalls) * 100}%` }}
                      />
                    </div>
                    <span className="absolute right-2 top-1/2 -translate-y-1/2 text-sm font-bold">
                      {day.calls}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Sentiment Analysis */}
        <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
          <CardHeader className="border-b-4 border-black bg-pink-300">
            <CardTitle className="text-xl font-black uppercase">SENTIMENT</CardTitle>
          </CardHeader>
          <CardContent className="pt-6">
            <div className="space-y-4">
              <div>
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-bold uppercase flex items-center gap-2">
                    <span className="text-2xl">😊</span> POSITIVE
                  </span>
                  <span className="font-black">{sentimentData.positive}%</span>
                </div>
                <Progress 
                  value={sentimentData.positive} 
                  className="h-4 border-2 border-black bg-gray-200"
                  style={{ 
                    '--progress-color': '#22c55e'
                  } as React.CSSProperties}
                />
              </div>
              
              <div>
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-bold uppercase flex items-center gap-2">
                    <span className="text-2xl">😐</span> NEUTRAL
                  </span>
                  <span className="font-black">{sentimentData.neutral}%</span>
                </div>
                <Progress 
                  value={sentimentData.neutral} 
                  className="h-4 border-2 border-black bg-gray-200"
                  style={{ 
                    '--progress-color': '#6b7280'
                  } as React.CSSProperties}
                />
              </div>
              
              <div>
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-bold uppercase flex items-center gap-2">
                    <span className="text-2xl">😞</span> NEGATIVE
                  </span>
                  <span className="font-black">{sentimentData.negative}%</span>
                </div>
                <Progress 
                  value={sentimentData.negative} 
                  className="h-4 border-2 border-black bg-gray-200"
                  style={{ 
                    '--progress-color': '#ef4444'
                  } as React.CSSProperties}
                />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Agent Performance */}
      <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
        <CardHeader className="border-b-4 border-black bg-pink-300">
          <CardTitle className="text-xl font-black uppercase">AGENT PERFORMANCE</CardTitle>
        </CardHeader>
        <CardContent className="pt-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {agentPerformance.map((agent) => (
              <Card 
                key={agent.agent} 
                className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]"
              >
                <CardContent className="pt-4">
                  <h4 className="font-black uppercase mb-3">{agent.agent}</h4>
                  <div className="space-y-2">
                    <div>
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-sm text-gray-600">Success Rate</span>
                        <span className="font-black">{agent.success}%</span>
                      </div>
                      <Progress 
                        value={agent.success} 
                        className="h-2 border-2 border-black"
                      />
                    </div>
                    <div className="flex items-center justify-between pt-2">
                      <span className="text-sm text-gray-600">Total Calls</span>
                      <span className="font-black">{agent.calls}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/app/dashboard/auto-rag/page.tsx
================================================
'use client';

import * as React from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  UilBrain,
  UilUpload,
  UilFile,
  UilLink,
  UilRobot,
  UilCheckCircle,
  UilClock,
  UilExclamationTriangle,
  UilPlay,
  UilPause,
  UilTrash,
  UilDownloadAlt,
  UilChartGrowth,
  UilYoutube,
  UilDatabase,
  UilSync,
  UilEye,
  UilPlus,
  UilFileExport,
  UilStopCircle,
  UilMultiply,
  UilCog
} from '@tooni/iconscout-unicons-react';
import StatCard from '@/components/custom/stat-card';
import CreateRAGWorkflowModal, { RAGWorkflowData } from '@/components/custom/modals/create-rag-workflow-modal';
import ViewRAGWorkflowModal from '@/components/custom/modals/view-rag-workflow-modal';
import SettingsRAGWorkflowModal from '@/components/custom/modals/settings-rag-workflow-modal';
import DeleteConfirmationModal from '@/components/custom/modals/delete-confirmation-modal';

interface RAGWorkflow {
  id: string;
  name: string;
  status: 'queued' | 'scraping' | 'embedding' | 'indexing' | 'validating' | 'completed' | 'failed';
  progress: number;
  type: 'youtube' | 'documents' | 'urls' | 'mixed';
  parameters: {
    sources: string[];
    chunkSize: number;
    overlap: number;
    embeddingModel: string;
    vectorStore: string;
  };
  stats: {
    totalContent: number;
    contentProcessed: number;
    embeddings: number;
    indexSize: string;
    processingTime?: string;
  };
  createdAt: string;
  completedAt?: string;
  estimatedTime?: string;
}

export default function AutoRAGPage() {
  const [showCreateModal, setShowCreateModal] = React.useState(false);
  const [showViewModal, setShowViewModal] = React.useState(false);
  const [showSettingsModal, setShowSettingsModal] = React.useState(false);
  const [showDeleteModal, setShowDeleteModal] = React.useState(false);
  const [selectedWorkflow, setSelectedWorkflow] = React.useState<RAGWorkflow | null>(null);
  const [isDeleting, setIsDeleting] = React.useState(false);
  const [workflows, setWorkflows] = React.useState<RAGWorkflow[]>([
    {
      id: '1',
      name: 'Sales Training Videos',
      status: 'embedding',
      progress: 65,
      type: 'youtube',
      parameters: {
        sources: ['https://youtube.com/@salesmastery/videos'],
        chunkSize: 512,
        overlap: 50,
        embeddingModel: 'text-embedding-ada-002',
        vectorStore: 'pinecone'
      },
      stats: {
        totalContent: 45,
        contentProcessed: 29,
        embeddings: 1247,
        indexSize: '124 MB',
        processingTime: '15 min'
      },
      createdAt: '2024-03-15 10:30',
      estimatedTime: '10 min remaining'
    },
    {
      id: '2',
      name: 'Product Documentation',
      status: 'completed',
      progress: 100,
      type: 'documents',
      parameters: {
        sources: ['product-docs.pdf', 'api-reference.pdf', 'user-guide.docx'],
        chunkSize: 256,
        overlap: 25,
        embeddingModel: 'text-embedding-ada-002',
        vectorStore: 'chroma'
      },
      stats: {
        totalContent: 3,
        contentProcessed: 3,
        embeddings: 542,
        indexSize: '48 MB',
        processingTime: '8 min'
      },
      createdAt: '2024-03-14 14:00',
      completedAt: '2024-03-14 14:08'
    },
    {
      id: '3',
      name: 'Competitor Analysis',
      status: 'scraping',
      progress: 25,
      type: 'urls',
      parameters: {
        sources: ['https://competitor1.com/features', 'https://competitor2.com/pricing'],
        chunkSize: 512,
        overlap: 50,
        embeddingModel: 'text-embedding-ada-002',
        vectorStore: 'weaviate'
      },
      stats: {
        totalContent: 12,
        contentProcessed: 3,
        embeddings: 0,
        indexSize: '0 MB'
      },
      createdAt: '2024-03-15 11:45',
      estimatedTime: '20 min remaining'
    },
    {
      id: '4',
      name: 'Customer Success Stories',
      status: 'completed',
      progress: 100,
      type: 'mixed',
      parameters: {
        sources: ['case-studies.pdf', 'https://blog.company.com/success-stories'],
        chunkSize: 512,
        overlap: 50,
        embeddingModel: 'text-embedding-ada-002',
        vectorStore: 'pinecone'
      },
      stats: {
        totalContent: 18,
        contentProcessed: 18,
        embeddings: 892,
        indexSize: '76 MB',
        processingTime: '12 min'
      },
      createdAt: '2024-03-13 09:00',
      completedAt: '2024-03-13 09:12'
    },
    {
      id: '5',
      name: 'Technical Support KB',
      status: 'indexing',
      progress: 80,
      type: 'documents',
      parameters: {
        sources: ['support-tickets.csv', 'faq.json', 'troubleshooting.pdf'],
        chunkSize: 256,
        overlap: 25,
        embeddingModel: 'text-embedding-ada-002',
        vectorStore: 'qdrant'
      },
      stats: {
        totalContent: 156,
        contentProcessed: 156,
        embeddings: 3421,
        indexSize: '287 MB'
      },
      createdAt: '2024-03-15 08:00',
      estimatedTime: '5 min remaining'
    },
    {
      id: '6',
      name: 'Sales Call Transcripts',
      status: 'queued',
      progress: 0,
      type: 'documents',
      parameters: {
        sources: ['call-recordings-q1.txt', 'call-recordings-q2.txt'],
        chunkSize: 512,
        overlap: 50,
        embeddingModel: 'text-embedding-ada-002',
        vectorStore: 'pinecone'
      },
      stats: {
        totalContent: 89,
        contentProcessed: 0,
        embeddings: 0,
        indexSize: '0 MB'
      },
      createdAt: '2024-03-15 12:00',
      estimatedTime: '30 min'
    }
  ]);

  // Modal handlers
  const handleViewWorkflow = (workflow: RAGWorkflow) => {
    setSelectedWorkflow(workflow);
    setShowViewModal(true);
  };

  const handleSettingsWorkflow = (workflow: RAGWorkflow) => {
    setSelectedWorkflow(workflow);
    setShowSettingsModal(true);
  };

  const handleDeleteWorkflow = (workflow: RAGWorkflow) => {
    setSelectedWorkflow(workflow);
    setShowDeleteModal(true);
  };

  const handleSaveWorkflowSettings = (updatedWorkflow: Partial<RAGWorkflow>) => {
    if (!selectedWorkflow) return;
    
    const updatedWorkflows = workflows.map(w => {
      if (w.id === selectedWorkflow.id) {
        return {
          ...w,
          ...updatedWorkflow,
          // Reset progress if parameters changed and workflow was active
          progress: (w.status !== 'completed' && w.status !== 'failed') ? 0 : w.progress,
          status: (w.status !== 'completed' && w.status !== 'failed') ? ('scraping' as const) : w.status,
          stats: (w.status !== 'completed' && w.status !== 'failed') ? {
            totalContent: w.stats.totalContent,
            contentProcessed: 0,
            embeddings: 0,
            indexSize: '0 MB'
          } : w.stats
        };
      }
      return w;
    });
    setWorkflows(updatedWorkflows);
  };

  const handleConfirmDelete = async () => {
    if (!selectedWorkflow) return;
    
    setIsDeleting(true);
    
    // Simulate deletion delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const updatedWorkflows = workflows.filter(w => w.id !== selectedWorkflow.id);
    setWorkflows(updatedWorkflows);
    
    setIsDeleting(false);
    setShowDeleteModal(false);
    setSelectedWorkflow(null);
  };

  const handleExportWorkflow = (format: 'json' | 'vectors') => {
    if (!selectedWorkflow) return;
    
    // Simulate export functionality
    const exportData = {
      workflow: selectedWorkflow.name,
      format: format,
      embeddings: selectedWorkflow.stats.embeddings,
      timestamp: new Date().toISOString()
    };
    
    console.log('Exporting RAG workflow:', exportData);
    // In real implementation, this would trigger file download
  };

  const handleUseWorkflow = () => {
    if (!selectedWorkflow) return;
    
    console.log('Using RAG workflow in agents:', selectedWorkflow.name);
    // In real implementation, this would navigate to agents page with pre-selected RAG
  };

  const closeAllModals = () => {
    setShowViewModal(false);
    setShowSettingsModal(false);
    setShowDeleteModal(false);
    setSelectedWorkflow(null);
  };

  const handleCreateWorkflow = (workflowData: RAGWorkflowData) => {
    const sources = [
      ...workflowData.sources,
      ...(workflowData.youtubeUrl ? [workflowData.youtubeUrl] : []),
      ...(workflowData.urls ? workflowData.urls.split('\n').filter(u => u.trim()) : [])
    ];
    
    const newWorkflowEntry: RAGWorkflow = {
      id: String(workflows.length + 1),
      name: workflowData.name,
      status: 'queued',
      progress: 0,
      type: sources.some(s => s.includes('youtube')) ? 'youtube' : 
            sources.some(s => s.startsWith('http')) ? 'urls' : 'documents',
      parameters: {
        sources,
        chunkSize: workflowData.chunkSize,
        overlap: workflowData.overlap,
        embeddingModel: workflowData.embeddingModel,
        vectorStore: workflowData.vectorStore
      },
      stats: {
        totalContent: sources.length,
        contentProcessed: 0,
        embeddings: 0,
        indexSize: '0 MB'
      },
      createdAt: new Date().toISOString(),
      estimatedTime: '15-30 min'
    };
    
    setWorkflows([...workflows, newWorkflowEntry]);
  };

  const getWorkflowColor = (type: RAGWorkflow['type'], shade: '400' | '600' | '800') => {
    switch (type) {
      case 'youtube': return `bg-purple-${shade}`;
      case 'documents': return `bg-green-${shade}`;
      case 'urls': return `bg-orange-${shade}`;
      case 'mixed': return `bg-pink-${shade}`;
    }
  };

  const getStatusColor = (status: RAGWorkflow['status']) => {
    switch (status) {
      case 'queued': return 'bg-gray-600 text-white';
      case 'scraping': return 'bg-purple-600 text-white';
      case 'embedding': return 'bg-green-600 text-white';
      case 'indexing': return 'bg-orange-600 text-white';
      case 'validating': return 'bg-pink-600 text-white';
      case 'completed': return 'bg-green-600 text-white';
      case 'failed': return 'bg-red-600 text-white';
    }
  };

  const getStatusIcon = (status: RAGWorkflow['status']) => {
    switch (status) {
      case 'queued': return <UilClock className="w-5 h-5" />;
      case 'scraping': return <UilLink className="w-5 h-5 animate-pulse" />;
      case 'embedding': return <UilBrain className="w-5 h-5 animate-pulse" />;
      case 'indexing': return <UilDatabase className="w-5 h-5 animate-pulse" />;
      case 'validating': return <UilCheckCircle className="w-5 h-5 animate-pulse" />;
      case 'completed': return <UilCheckCircle className="w-5 h-5" />;
      case 'failed': return <UilExclamationTriangle className="w-5 h-5" />;
    }
  };

  const getWorkflowCardColor = (type: RAGWorkflow['type']) => {
    switch (type) {
      case 'youtube': return 'bg-purple-600';
      case 'documents': return 'bg-green-600';
      case 'urls': return 'bg-orange-600';
      case 'mixed': return 'bg-pink-600';
    }
  };

  const getSourceTypeColor = (type: RAGWorkflowSource['type']) => {
    switch (type) {
      case 'youtube': return 'bg-purple-800 text-white';
      case 'document': return 'bg-green-800 text-white';
      case 'url': return 'bg-orange-800 text-white';
      default: return 'bg-pink-800 text-white';
    }
  };

  return (
    <div className="h-full overflow-y-auto" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
      {/* Page Header */}
      <div className="mb-8">
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-4xl font-black uppercase text-black mb-2">AUTO-RAG TRAINING</h1>
            <p className="text-lg text-gray-600">Transform content into intelligent knowledge bases for your agents</p>
          </div>
          <Button
            onClick={() => setShowCreateModal(true)}
            variant="default"
            size="lg"
            className="font-bold"
          >
            <UilPlus className="w-5 h-5 mr-2" />
            NEW WORKFLOW
          </Button>
        </div>
      </div>

      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <StatCard
          title="Active Workflows"
          value={workflows.filter(w => w.status !== 'completed' && w.status !== 'failed').length}
          icon={<UilSync className="w-6 h-6 text-white animate-spin" />}
          iconBgColor="bg-purple-600"
          bgGradient="from-purple-50 to-purple-100"
        />

        <StatCard
          title="Total Embeddings"
          value={workflows.reduce((acc, w) => acc + w.stats.embeddings, 0).toLocaleString()}
          icon={<UilBrain className="w-6 h-6 text-white" />}
          iconBgColor="bg-green-600"
          bgGradient="from-green-50 to-green-100"
        />

        <StatCard
          title="Index Size"
          value="635 MB"
          icon={<UilDatabase className="w-6 h-6 text-white" />}
          iconBgColor="bg-orange-600"
          bgGradient="from-orange-50 to-orange-100"
        />

        <StatCard
          title="Completed"
          value={workflows.filter(w => w.status === 'completed').length}
          icon={<UilCheckCircle className="w-6 h-6 text-white" />}
          iconBgColor="bg-pink-600"
          bgGradient="from-pink-50 to-pink-100"
        />
      </div>

      {/* Workflow Cards Grid 3x3 */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {workflows.map((workflow, index) => (
          <Card 
            key={workflow.id}
            className={`border-4 border-black shadow-[6px_6px_0_rgba(0,0,0,1)] hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all duration-200 bg-yellow-50 transform ${
              index % 3 === 0 ? 'rotate-1' : index % 3 === 1 ? '-rotate-1' : ''
            } min-h-[380px]`}
          >
            <CardHeader className={`border-b-4 border-black ${getWorkflowColor(workflow.type, '400')}`}>
              <div className="flex items-start justify-between">
                <div>
                  <CardTitle className="text-xl font-black uppercase text-white">{workflow.name}</CardTitle>
                  <div className="flex items-center gap-2 mt-2">
                    <Badge className={`border-2 border-black font-bold uppercase text-xs ${getWorkflowColor(workflow.type, '600')} text-white`}>
                      {workflow.type}
                    </Badge>
                    <Badge className={`border-2 border-black font-bold uppercase text-xs ${getWorkflowColor(workflow.type, '800')} text-white`}>
                      {workflow.status}
                    </Badge>
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button
                    size="sm"
                    variant="neutral"
                    className="p-2 bg-white"
                    onClick={() => handleViewWorkflow(workflow)}
                    title="View workflow details"
                  >
                    <UilEye className="w-4 h-4 text-black" />
                  </Button>
                  <Button
                    size="sm"
                    variant="neutral"
                    className="p-2 bg-white"
                    onClick={() => handleSettingsWorkflow(workflow)}
                    title="Edit workflow settings"
                  >
                    <UilCog className="w-4 h-4 text-black" />
                  </Button>
                  <Button
                    size="sm"
                    variant="neutral"
                    className="p-2 bg-white"
                    onClick={() => handleDeleteWorkflow(workflow)}
                    title="Delete workflow"
                  >
                    <UilTrash className="w-4 h-4 text-black" />
                  </Button>
                </div>
              </div>
            </CardHeader>
            
            <CardContent className="p-4">
              {/* Progress Bar */}
              <div className="mb-4">
                <div className="flex justify-between mb-2">
                  <span className="text-xs font-bold">PROGRESS</span>
                  <span className="text-xs font-bold">{workflow.progress}%</span>
                </div>
                <Progress value={workflow.progress} className="h-2 border-2 border-black" />
                {workflow.estimatedTime && (
                  <p className="text-xs text-gray-600 mt-1">
                    <UilClock className="w-3 h-3 inline mr-1" />
                    {workflow.estimatedTime}
                  </p>
                )}
              </div>

              {/* Type and Source Info */}
              <div className="space-y-2 mb-3 text-sm">
                <div className="flex items-center gap-2">
                  {workflow.type === 'youtube' && <UilYoutube className="w-4 h-4 text-red-500" />}
                  {workflow.type === 'documents' && <UilFile className="w-4 h-4 text-blue-500" />}
                  {workflow.type === 'urls' && <UilLink className="w-4 h-4 text-green-500" />}
                  {workflow.type === 'mixed' && <UilDatabase className="w-4 h-4 text-purple-500" />}
                  <span className="font-bold capitalize">{workflow.type}</span>
                </div>
                <div className="text-xs text-gray-600">
                  {workflow.parameters.sources.length} source{workflow.parameters.sources.length !== 1 ? 's' : ''}
                </div>
              </div>

              {/* Stats Grid */}
              <div className="grid grid-cols-2 gap-2 mb-3">
                <div className="p-2 bg-gray-50 border-2 border-black">
                  <p className="text-xs font-bold text-gray-600 uppercase">Content</p>
                  <p className="text-lg font-black text-black">{workflow.stats.contentProcessed}/{workflow.stats.totalContent}</p>
                </div>
                <div className="p-2 bg-gray-50 border-2 border-black">
                  <p className="text-xs font-bold text-gray-600 uppercase">Embeddings</p>
                  <p className="text-lg font-black text-black">{workflow.stats.embeddings.toLocaleString()}</p>
                </div>
              </div>

              {/* Vector Store Info */}
              <div className="flex items-center justify-between text-xs text-gray-600 mb-3">
                <span className="font-bold">Vector Store: {workflow.parameters.vectorStore}</span>
                <span className="font-bold">{workflow.stats.indexSize}</span>
              </div>

              {/* Action Buttons */}
              <div className="flex gap-2">
                {workflow.status === 'completed' && (
                  <>
                    <Button variant="default" className="flex-1 px-2 py-1 text-xs font-bold bg-green-600 text-white border-2 border-black">
                      <UilRobot className="w-3 h-3 mr-1" />
                      USE
                    </Button>
                    <Button variant="default" className="flex-1 px-2 py-1 text-xs font-bold bg-yellow-300 text-black border-2 border-black">
                      <UilFileExport className="w-3 h-3 mr-1" />
                      EXPORT
                    </Button>
                  </>
                )}
                {workflow.status !== 'completed' && workflow.status !== 'failed' && workflow.status !== 'queued' && (
                  <Button variant="default" className="flex-1 px-2 py-1 text-xs font-bold bg-red-600 text-white border-2 border-black">
                    <UilStopCircle className="w-3 h-3 mr-1" />
                    STOP
                  </Button>
                )}
                {workflow.status === 'queued' && (
                  <Button variant="default" className="flex-1 px-2 py-1 text-xs font-bold bg-green-600 text-white border-2 border-black">
                    <UilPlay className="w-3 h-3 mr-1" />
                    START
                  </Button>
                )}
              </div>

              {/* Created Date */}
              <p className="text-xs text-gray-500 mt-3">
                Started: {new Date(workflow.createdAt).toLocaleString()}
              </p>
            </CardContent>
          </Card>
        ))}

        {/* Create New Workflow Card - fills remaining slots */}
        {Array.from({ length: Math.max(0, 9 - workflows.length) }).map((_, index) => (
          <Card 
            key={`empty-${index}`}
            onClick={() => setShowCreateModal(true)}
            className="border-4 border-dashed border-gray-400 shadow-[4px_4px_0_rgba(0,0,0,0.3)] hover:shadow-[6px_6px_0_rgba(0,0,0,0.5)] hover:border-black transition-all duration-200 bg-gray-50 cursor-pointer group min-h-[380px]"
          >
            <CardContent className="h-full flex flex-col items-center justify-center p-8">
              <div className="w-16 h-16 bg-gray-200 border-4 border-gray-400 group-hover:border-black group-hover:bg-gray-300 rounded-full flex items-center justify-center mb-4 transition-all">
                <UilPlus className="w-8 h-8 text-gray-600 group-hover:text-black" />
              </div>
              <p className="text-lg font-black text-gray-600 group-hover:text-black uppercase">New Workflow</p>
              <p className="text-xs text-gray-500 mt-2 text-center">Transform content into embeddings</p>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Create Workflow Modal */}
      <CreateRAGWorkflowModal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        onSave={handleCreateWorkflow}
      />

      {/* View RAG Workflow Modal */}
      <ViewRAGWorkflowModal
        isOpen={showViewModal}
        onClose={closeAllModals}
        workflow={selectedWorkflow}
        onExport={handleExportWorkflow}
        onUse={handleUseWorkflow}
      />

      {/* Settings RAG Workflow Modal */}
      <SettingsRAGWorkflowModal
        isOpen={showSettingsModal}
        onClose={closeAllModals}
        workflow={selectedWorkflow}
        onSave={handleSaveWorkflowSettings}
      />

      {/* Delete Confirmation Modal */}
      <DeleteConfirmationModal
        isOpen={showDeleteModal}
        onClose={closeAllModals}
        onConfirm={handleConfirmDelete}
        itemName={selectedWorkflow?.name || ''}
        itemType="RAG workflow"
        warningMessage="This will permanently delete the workflow and all its embeddings"
        consequences={[
          'All generated embeddings will be lost',
          'Vector index data cannot be recovered',
          'This action cannot be undone',
          selectedWorkflow?.status !== 'completed' && selectedWorkflow?.status !== 'failed' 
            ? 'Active processing will be immediately stopped' 
            : 'Trained knowledge base will be permanently deleted'
        ].filter(Boolean) as string[]}
        requiresNameConfirmation={selectedWorkflow?.stats.embeddings > 1000}
        isLoading={isDeleting}
      />
    </div>
  );
}


================================================
FILE: src/app/dashboard/automation/page.tsx
================================================
"use client"

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { 
  ChevronLeft, PlayCircle, Save, FolderOpen, 
  Settings2, RefreshCw, ExternalLink, Zap, Plus,
  Phone, Code, Globe
} from 'lucide-react'
import Link from 'next/link'
import WorkflowEditor from '@/components/automation/WorkflowEditor'
import '@/styles/automation.css'

export default function AutomationPage() {
  const [showEditor, setShowEditor] = useState(false)
  const [workflows, setWorkflows] = useState<any[]>([])
  const [selectedWorkflow, setSelectedWorkflow] = useState<any>(null)
  const [filterActive, setFilterActive] = useState<'all' | 'active' | 'inactive'>('all')

  useEffect(() => {
    // Fetch workflows from API
    fetchWorkflows()
  }, [])

  const fetchWorkflows = async () => {
    // For development - show demo workflows without backend
    setWorkflows([
      {
        id: '1',
        name: 'Welcome Call Automation',
        description: 'Automatically call new users after signup',
        active: true,
        nodes: [
          { id: '1', type: 'webhook', label: 'User Signup' },
          { id: '2', type: 'dialaMakeCall', label: 'Make Welcome Call' }
        ]
      },
      {
        id: '2',
        name: 'Lead Qualification',
        description: 'Call and qualify incoming leads',
        active: false,
        nodes: [
          { id: '1', type: 'webhook', label: 'New Lead' },
          { id: '2', type: 'code', label: 'Score Lead' },
          { id: '3', type: 'dialaMakeCall', label: 'Qualification Call' }
        ]
      }
    ])
    
    // Uncomment below when backend is ready
    // try {
    //   const response = await fetch('/api/automation/workflows', {
    //     headers: {
    //       'Authorization': `Bearer ${localStorage.getItem('token') || 'dummy-token'}`,
    //     },
    //   })
    //   if (response.ok) {
    //     const data = await response.json()
    //     setWorkflows(data)
    //   }
    // } catch (error) {
    //   console.error('Error fetching workflows:', error)
    // }
  }

  const handleSaveWorkflow = async (workflow: any) => {
    // For development - just log the workflow
    console.log('Saving workflow:', workflow)
    alert('Workflow saved! (Development mode - not persisted)')
    
    // Uncomment below when backend is ready
    // try {
    //   const url = selectedWorkflow 
    //     ? `/api/automation/workflows/${selectedWorkflow.id}`
    //     : '/api/automation/workflows'
    //   
    //   const method = selectedWorkflow ? 'PUT' : 'POST'
    //   
    //   const response = await fetch(url, {
    //     method,
    //     headers: {
    //       'Content-Type': 'application/json',
    //       'Authorization': `Bearer ${localStorage.getItem('token') || 'dummy-token'}`,
    //     },
    //     body: JSON.stringify({
    //       name: selectedWorkflow?.name || 'New Workflow',
    //       ...workflow,
    //     }),
    //   })
    //   
    //   if (response.ok) {
    //     fetchWorkflows()
    //     // Show success message
    //   }
    // } catch (error) {
    //   console.error('Error saving workflow:', error)
    // }
  }

  const handleExecuteWorkflow = async (workflow: any) => {
    // For development - simulate execution
    console.log('Executing workflow:', workflow)
    alert('Workflow executed! (Development mode - simulated)')
    
    // Uncomment below when backend is ready
    // if (!selectedWorkflow?.id) return
    // 
    // try {
    //   const response = await fetch(`/api/automation/workflows/${selectedWorkflow.id}/execute`, {
    //     method: 'POST',
    //     headers: {
    //       'Content-Type': 'application/json',
    //       'Authorization': `Bearer ${localStorage.getItem('token') || 'dummy-token'}`,
    //     },
    //     body: JSON.stringify({ trigger_data: {} }),
    //   })
    //   
    //   if (response.ok) {
    //     const execution = await response.json()
    //     console.log('Workflow executed:', execution)
    //     // Show execution result
    //   }
    // } catch (error) {
    //   console.error('Error executing workflow:', error)
    // }
  }

  return (
    <div className="h-full flex flex-col">
      {/* Page Header */}
      <div className="bg-white border-b-4 border-black p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-4">
            <Link href="/dashboard">
              <Button variant="subheader" size="sm">
                <ChevronLeft className="w-4 h-4 mr-2" />
                Back
              </Button>
            </Link>
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-yellow-400 border-4 border-black flex items-center justify-center shadow-[3px_3px_0_rgba(0,0,0,1)]">
                <Zap className="w-6 h-6" />
              </div>
              <h1 className="text-3xl font-black uppercase">Automation Workflows</h1>
            </div>
          </div>
          <Button 
            variant="default" 
            size="sm"
            onClick={() => {
              setSelectedWorkflow(null)
              setShowEditor(true)
            }}
          >
            <Plus className="w-4 h-4 mr-2" />
            CREATE WORKFLOW
          </Button>
        </div>
        
        {/* Filter Tabs */}
        <div className="flex gap-2">
          {['all', 'active', 'inactive'].map((filter) => (
            <Button
              key={filter}
              variant={filterActive === filter ? 'default' : 'neutral'}
              size="sm"
              onClick={() => setFilterActive(filter as any)}
            >
              {filter.toUpperCase()}
            </Button>
          ))}
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 overflow-hidden p-6">
        {!showEditor ? (
          <div className="h-full overflow-y-auto">
            {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
              <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] bg-gradient-to-br from-blue-50 to-blue-100">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-bold uppercase">Total Workflows</span>
                    <div className="w-8 h-8 bg-blue-400 border-2 border-black flex items-center justify-center shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <Zap className="w-4 h-4" />
                    </div>
                  </div>
                  <div className="text-2xl font-black">{workflows.length}</div>
                </CardContent>
              </Card>
              
              <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] bg-gradient-to-br from-green-50 to-green-100">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-bold uppercase">Active</span>
                    <div className="w-8 h-8 bg-green-400 border-2 border-black flex items-center justify-center shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <PlayCircle className="w-4 h-4" />
                    </div>
                  </div>
                  <div className="text-2xl font-black">{workflows.filter(w => w.active).length}</div>
                </CardContent>
              </Card>
              
              <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] bg-gradient-to-br from-yellow-50 to-yellow-100">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-bold uppercase">Executions Today</span>
                    <div className="w-8 h-8 bg-yellow-400 border-2 border-black flex items-center justify-center shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <RefreshCw className="w-4 h-4" />
                    </div>
                  </div>
                  <div className="text-2xl font-black">42</div>
                </CardContent>
              </Card>
              
              <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] bg-gradient-to-br from-purple-50 to-purple-100">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-bold uppercase">Success Rate</span>
                    <div className="w-8 h-8 bg-purple-400 border-2 border-black flex items-center justify-center shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <Settings2 className="w-4 h-4" />
                    </div>
                  </div>
                  <div className="text-2xl font-black">98%</div>
                </CardContent>
              </Card>
            </div>

            {/* Workflows List */}
            <h2 className="text-xl font-black uppercase mb-4 flex items-center gap-2">
              <div className="w-2 h-6 bg-[rgb(0,82,255)]"></div>
              Your Workflows
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              {workflows
                .filter(w => filterActive === 'all' || (filterActive === 'active' ? w.active : !w.active))
                .map((workflow) => (
                <Card 
                  key={workflow.id}
                  className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[8px_8px_0_rgba(0,0,0,1)] hover:translate-x-[-4px] hover:translate-y-[-4px] transition-all cursor-pointer bg-white relative overflow-hidden group"
                  onClick={() => {
                    setSelectedWorkflow(workflow)
                    setShowEditor(true)
                  }}
                >
                  {/* Decorative Pattern */}
                  <div className="absolute top-0 right-0 w-16 h-16 bg-yellow-400 transform rotate-45 translate-x-8 -translate-y-8 group-hover:rotate-90 transition-transform" />
                  
                  <CardHeader className="pb-2">
                    <div className="flex items-start justify-between">
                      <div className="w-14 h-14 bg-gradient-to-br from-blue-400 to-blue-500 border-3 border-black flex items-center justify-center shadow-[3px_3px_0_rgba(0,0,0,1)]">
                        <Zap className="w-7 h-7" />
                      </div>
                      <div className={`px-3 py-1 text-xs font-black uppercase ${
                        workflow.active ? 'bg-green-400' : 'bg-gray-300'
                      } border-3 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]`}>
                        {workflow.active ? 'ACTIVE' : 'INACTIVE'}
                      </div>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="pt-4">
                    <h3 className="font-black uppercase text-lg mb-2">{workflow.name}</h3>
                    <p className="text-sm mb-4">
                      {workflow.description || 'No description'}
                    </p>
                    
                    <div className="flex items-center justify-between pt-3 border-t-2 border-black">
                      <div className="flex items-center gap-4">
                        <div className="flex items-center gap-1">
                          <div className="w-4 h-4 bg-purple-400 border-2 border-black" />
                          <span className="text-xs font-bold">{workflow.nodes?.length || 0} NODES</span>
                        </div>
                      </div>
                      <Button
                        variant="neutral"
                        size="sm"
                        onClick={(e) => {
                          e.stopPropagation()
                          // Handle settings
                        }}
                      >
                        <Settings2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* Workflow Templates */}
            <h2 className="text-xl font-black uppercase mb-4 flex items-center gap-2">
              <div className="w-2 h-6 bg-yellow-400"></div>
              Quick Start Templates
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {[
                {
                  title: 'CALL AUTOMATION',
                  description: 'Automate outbound calls based on triggers and conditions',
                  color: 'from-blue-50 to-blue-100',
                  iconBg: 'bg-blue-400',
                  icon: Phone
                },
                {
                  title: 'DATA PROCESSING',
                  description: 'Process uploads, generate embeddings, update databases',
                  color: 'from-yellow-50 to-yellow-100',
                  iconBg: 'bg-yellow-400',
                  icon: Code
                },
                {
                  title: 'LEAD ROUTING',
                  description: 'Route leads to agents based on scoring and availability',
                  color: 'from-purple-50 to-purple-100',
                  iconBg: 'bg-purple-400',
                  icon: Globe
                }
              ].map((template, idx) => {
                const Icon = template.icon
                return (
                  <Card 
                    key={idx}
                    className={`border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[8px_8px_0_rgba(0,0,0,1)] hover:translate-x-[-4px] hover:translate-y-[-4px] transition-all cursor-pointer bg-gradient-to-br ${template.color} relative group`}
                    onClick={() => {
                      // Handle template selection
                      setSelectedWorkflow(null)
                      setShowEditor(true)
                    }}
                  >
                    {/* Decorative Elements */}
                    <div className="absolute top-2 right-2 w-8 h-8 border-3 border-black bg-white opacity-50 transform rotate-12" />
                    <div className="absolute bottom-2 left-2 w-6 h-6 rounded-full border-3 border-black bg-white opacity-50" />
                    
                    <CardContent className="p-6 relative">
                      <div className={`w-16 h-16 ${template.iconBg} border-4 border-black flex items-center justify-center mb-4 shadow-[3px_3px_0_rgba(0,0,0,1)] transform group-hover:rotate-3 transition-transform`}>
                        <Icon className="w-8 h-8" />
                      </div>
                      <h3 className="font-black uppercase text-lg mb-2">{template.title}</h3>
                      <p className="text-sm mb-4">
                        {template.description}
                      </p>
                      <Button
                        variant="neutral"
                        size="sm"
                        className="w-full"
                      >
                        USE TEMPLATE
                      </Button>
                    </CardContent>
                  </Card>
                )
              })}
            </div>
          </div>
        ) : (
          <div className="workflow-editor-container">
            <WorkflowEditor
              workflowId={selectedWorkflow?.id}
              workflowName={selectedWorkflow?.name || 'New Workflow'}
              onSave={handleSaveWorkflow}
              onExecute={handleExecuteWorkflow}
              onBack={() => setShowEditor(false)}
            />
          </div>
        )}
      </div>
    </div>
  )
}


================================================
FILE: src/app/dashboard/business-hunter/page.tsx
================================================
'use client';

import * as React from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import HuntConfigurationModal from '@/components/custom/modals/hunt-configuration-modal';
import ViewWorkflowModal from '@/components/custom/modals/view-workflow-modal';
import SettingsWorkflowModal from '@/components/custom/modals/settings-workflow-modal';
import DeleteConfirmationModal from '@/components/custom/modals/delete-confirmation-modal';
import StatCard from '@/components/custom/stat-card';
import { useQuery, useMutation, useAction } from 'convex/react';
import { api } from '@convex/_generated/api';
import { useHunterSearches } from '@/hooks/useHunterSearch';
import { 
  UilSearchAlt,
  UilBuilding,
  UilMapMarker,
  UilPhone,
  UilEnvelope,
  UilGlobe,
  UilUsersAlt,
  UilDollarSign,
  UilFilter,
  UilExport,
  UilBookmark,
  UilCheckCircle,
  UilClock,
  UilExclamationTriangle,
  UilPlay,
  UilPause,
  UilStopCircle,
  UilPlus,
  UilEdit,
  UilTrash,
  UilLink,
  UilLinkedin,
  UilDatabase,
  UilFileExport,
  UilEye,
  UilSync,
  UilCog,
  UilTrashAlt
} from '@tooni/iconscout-unicons-react';

interface SearchWorkflow {
  id: string;
  name: string;
  status: 'idle' | 'searching' | 'scraping' | 'analyzing' | 'validating' | 'completed' | 'failed';
  progress: number;
  parameters: {
    location: string;
    businessType: string;
    keywords: string[];
    includeLinkedIn: boolean;
    searchDepth: number;
  };
  stats: {
    pagesFound: number;
    pagesScraped: number;
    businessesExtracted: number;
    businessesValidated: number;
    matchRate: number;
  };
  createdAt: string;
  completedAt?: string;
  estimatedTime?: string;
  searchId?: string;
  currentStage?: string;
}

// TODO: Replace with actual user ID from auth
const MOCK_USER_ID = 'user_demo_123';

export default function BusinessHunterPage() {
  const [showCreateModal, setShowCreateModal] = React.useState(false);
  const [showViewModal, setShowViewModal] = React.useState(false);
  const [showSettingsModal, setShowSettingsModal] = React.useState(false);
  const [showDeleteModal, setShowDeleteModal] = React.useState(false);
  const [selectedWorkflow, setSelectedWorkflow] = React.useState<SearchWorkflow | null>(null);
  const [isDeleting, setIsDeleting] = React.useState(false);
  const [isCreating, setIsCreating] = React.useState(false);
  
  // Use real data from Convex
  const { searches: workflows, isLoading, stats } = useHunterSearches(MOCK_USER_ID);
  const createLeadSearch = useAction(api.hunterActions.createLeadSearch);
  const deleteSearch = useAction(api.hunterActions.deleteSearch);
  
  // Convert between frontend and backend status
  const getBackendStatus = (workflow: SearchWorkflow): string => {
    const statusMap: Record<SearchWorkflow['status'], string> = {
      'idle': 'pending',
      'searching': 'processing',
      'scraping': 'processing',
      'analyzing': 'processing',
      'validating': 'processing',
      'completed': 'completed',
      'failed': 'failed'
    };
    return statusMap[workflow.status];
  };
  
  // Poll for updates every 3 seconds for active workflows
  React.useEffect(() => {
    const activeWorkflows = workflows.filter(w => 
      w.status !== 'completed' && w.status !== 'failed'
    );
    
    if (activeWorkflows.length === 0) return;
    
    const interval = setInterval(() => {
      // The hook will automatically refetch
    }, 3000);
    
    return () => clearInterval(interval);
  }, [workflows]);
  
  // Show loading state
  if (isLoading) {
    return (
      <div className="h-full flex items-center justify-center">
        <div className="text-center">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-purple-100 rounded-full mb-4">
            <UilSync className="w-8 h-8 text-purple-600 animate-spin" />
          </div>
          <p className="text-lg font-bold text-gray-600">Loading your searches...</p>
        </div>
      </div>
    );
  }


  const getStatusColor = (status: SearchWorkflow['status']) => {
    switch (status) {
      case 'idle': return 'bg-gray-100 text-gray-700';
      case 'searching': return 'bg-blue-100 text-blue-700';
      case 'scraping': return 'bg-yellow-100 text-yellow-700';
      case 'analyzing': return 'bg-purple-100 text-purple-700';
      case 'validating': return 'bg-orange-100 text-orange-700';
      case 'completed': return 'bg-green-100 text-green-700';
      case 'failed': return 'bg-red-100 text-red-700';
    }
  };

  const getStatusIcon = (status: SearchWorkflow['status']) => {
    switch (status) {
      case 'idle': return <UilClock className="w-5 h-5" />;
      case 'searching': return <UilSearchAlt className="w-5 h-5 animate-pulse" />;
      case 'scraping': return <UilLink className="w-5 h-5 animate-pulse" />;
      case 'analyzing': return <UilDatabase className="w-5 h-5 animate-pulse" />;
      case 'validating': return <UilCheckCircle className="w-5 h-5 animate-pulse" />;
      case 'completed': return <UilCheckCircle className="w-5 h-5" />;
      case 'failed': return <UilExclamationTriangle className="w-5 h-5" />;
    }
  };

  const getWorkflowSteps = (workflow: SearchWorkflow) => {
    const steps = [
      { name: 'Search', status: workflow.progress >= 0 },
      { name: 'Scrape', status: workflow.progress >= 25 },
      { name: 'Analyze', status: workflow.progress >= 50 },
      { name: 'Validate', status: workflow.progress >= 75 },
      { name: 'Complete', status: workflow.progress === 100 }
    ];
    return steps;
  };

  // Modal handlers
  const handleViewWorkflow = (workflow: SearchWorkflow) => {
    setSelectedWorkflow(workflow);
    setShowViewModal(true);
  };

  const handleSettingsWorkflow = (workflow: SearchWorkflow) => {
    setSelectedWorkflow(workflow);
    setShowSettingsModal(true);
  };

  const handleDeleteWorkflow = (workflow: SearchWorkflow) => {
    setSelectedWorkflow(workflow);
    setShowDeleteModal(true);
  };

  const handlePauseResumeWorkflow = (workflow: SearchWorkflow) => {
    // TODO: Implement pause/resume functionality
    console.log('Pause/Resume not yet implemented for:', workflow.id);
  };

  const handleSaveWorkflowSettings = (updatedWorkflow: Partial<SearchWorkflow>) => {
    // TODO: Implement settings update
    console.log('Settings update not yet implemented');
  };

  const handleConfirmDelete = async () => {
    if (!selectedWorkflow || !selectedWorkflow.searchId) return;
    
    setIsDeleting(true);
    
    try {
      await deleteSearch({
        userId: MOCK_USER_ID,
        searchId: selectedWorkflow.searchId
      });
      
      setShowDeleteModal(false);
      setSelectedWorkflow(null);
    } catch (error) {
      console.error('Error deleting search:', error);
      alert('Failed to delete search. Please try again.');
    } finally {
      setIsDeleting(false);
    }
  };

  const handleExportWorkflow = (format: 'csv' | 'crm') => {
    if (!selectedWorkflow) return;
    
    // Simulate export functionality
    const exportData = {
      workflow: selectedWorkflow.name,
      format: format,
      businesses: selectedWorkflow.stats.businessesExtracted,
      timestamp: new Date().toISOString()
    };
    
    console.log('Exporting workflow:', exportData);
    // In real implementation, this would trigger file download or CRM integration
  };

  const closeAllModals = () => {
    setShowViewModal(false);
    setShowSettingsModal(false);
    setShowDeleteModal(false);
    setSelectedWorkflow(null);
  };

  return (
    <div className="h-full overflow-y-auto" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
      {/* Page Header */}
      <div className="mb-8">
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-4xl font-black uppercase text-black mb-2">BUSINESS HUNTER</h1>
            <p className="text-lg text-gray-600">Automated business discovery and validation workflows</p>
          </div>
          <Button
            onClick={() => setShowCreateModal(true)}
            variant="default"
            size="lg"
            className="font-bold"
          >
            <UilPlus className="w-5 h-5 mr-2" />
            NEW HUNT
          </Button>
        </div>
      </div>

      {/* Active Workflows Summary */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <StatCard
          title="Active Hunts"
          value={workflows.filter(w => w.status !== 'completed' && w.status !== 'failed').length}
          icon={<UilSync className="w-6 h-6 text-white animate-spin" />}
          iconBgColor="bg-purple-600"
          bgGradient="from-purple-50 to-purple-100"
        />

        <StatCard
          title="Pages Found"
          value={workflows.reduce((acc, w) => acc + w.stats.pagesFound, 0).toLocaleString()}
          icon={<UilGlobe className="w-6 h-6 text-white" />}
          iconBgColor="bg-green-600"
          bgGradient="from-green-50 to-green-100"
        />

        <StatCard
          title="Businesses Found"
          value={workflows.reduce((acc, w) => acc + w.stats.businessesExtracted, 0)}
          icon={<UilBuilding className="w-6 h-6 text-white" />}
          iconBgColor="bg-orange-600"
          bgGradient="from-orange-50 to-orange-100"
        />

        <StatCard
          title="Avg Match Rate"
          value={`${Math.round(workflows.reduce((acc, w) => acc + w.stats.matchRate, 0) / workflows.length)}%`}
          icon={<UilCheckCircle className="w-6 h-6 text-white" />}
          iconBgColor="bg-pink-600"
          bgGradient="from-pink-50 to-pink-100"
        />
      </div>

      {/* Workflow Cards Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {workflows.map((workflow, index) => (
          <Card 
            key={workflow.id}
            className={`border-4 border-black shadow-[6px_6px_0_rgba(0,0,0,1)] hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all duration-200 bg-white transform ${
              index % 3 === 0 ? 'rotate-1' : index % 3 === 1 ? '-rotate-1' : ''
            }`}
          >
            <CardHeader className={`border-b-4 border-black ${
              workflow.status === 'completed' ? 'bg-green-400' :
              workflow.status === 'failed' ? 'bg-red-400' :
              'bg-yellow-400'
            }`}>
              <div className="flex items-start justify-between">
                <div>
                  <CardTitle className="text-2xl font-black uppercase text-black">{workflow.name}</CardTitle>
                  <div className="flex items-center gap-3 mt-2">
                    <Badge className={`border-2 border-black font-bold uppercase ${getStatusColor(workflow.status)}`}>
                      {getStatusIcon(workflow.status)}
                      <span className="ml-2">{workflow.status}</span>
                    </Badge>
                    {workflow.estimatedTime && (
                      <span className="text-sm font-bold text-black/70">
                        <UilClock className="w-4 h-4 inline mr-1" />
                        {workflow.estimatedTime}
                      </span>
                    )}
                  </div>
                </div>
                <div className="flex gap-2">
                  {workflow.status !== 'completed' && workflow.status !== 'failed' && (
                    <Button
                      size="sm"
                      variant="neutral"
                      className="p-2"
                      onClick={() => handlePauseResumeWorkflow(workflow)}
                      title={workflow.status === 'idle' ? 'Resume workflow' : 'Pause workflow'}
                    >
                      <UilPause className="w-4 h-4 text-black" />
                    </Button>
                  )}
                  <Button
                    size="sm"
                    variant="neutral"
                    className="p-2"
                    onClick={() => handleViewWorkflow(workflow)}
                    title="View workflow details"
                  >
                    <UilEye className="w-4 h-4 text-black" />
                  </Button>
                  <Button
                    size="sm"
                    variant="neutral"
                    className="p-2"
                    onClick={() => handleSettingsWorkflow(workflow)}
                    title="Edit workflow settings"
                  >
                    <UilCog className="w-4 h-4 text-black" />
                  </Button>
                  <Button
                    size="sm"
                    variant="neutral"
                    className="p-2"
                    onClick={() => handleDeleteWorkflow(workflow)}
                    title="Delete workflow"
                  >
                    <UilTrashAlt className="w-4 h-4 text-black" />
                  </Button>
                </div>
              </div>
            </CardHeader>
            
            <CardContent className="p-6">
              {/* Progress Steps */}
              <div className="mb-6">
                <div className="flex items-center justify-center mb-4">
                  <div className="flex items-center gap-3">
                    {getWorkflowSteps(workflow).map((step, idx) => {
                      const stepIcons = [
                        UilSearchAlt, // Search
                        UilLink,      // Scrape  
                        UilDatabase,  // Analyze
                        UilCheckCircle, // Validate
                        UilCheckCircle  // Complete
                      ];
                      const StepIcon = stepIcons[idx];
                      
                      return (
                        <React.Fragment key={idx}>
                          <div className={`
                            relative px-4 py-3 border-4 border-black flex items-center gap-2 font-bold text-sm
                            transition-all duration-300 min-w-fit
                            ${step.status 
                              ? 'bg-[rgb(0,82,255)] text-white shadow-[3px_3px_0_rgba(0,0,0,1)]' 
                              : 'bg-gray-300 text-gray-600 shadow-[2px_2px_0_rgba(0,0,0,1)]'
                            }
                          `}>
                            <StepIcon className="w-4 h-4 flex-shrink-0" />
                            <span className="hidden sm:inline text-sm">{step.name}</span>
                            <span className="sm:hidden">{idx + 1}</span>
                          </div>
                          {idx < getWorkflowSteps(workflow).length - 1 && (
                            <div className={`w-6 h-2 border-2 border-black transition-all duration-300 ${
                              getWorkflowSteps(workflow)[idx + 1]?.status 
                                ? 'bg-[rgb(0,82,255)] shadow-[2px_2px_0_rgba(0,0,0,1)]' 
                                : 'bg-gray-400'
                            }`}></div>
                          )}
                        </React.Fragment>
                      );
                    })}
                  </div>
                </div>
                <Progress value={workflow.progress} className="h-3 border-2 border-black" />
              </div>

              {/* Parameters */}
              <div className="space-y-3 mb-4">
                <div className="flex items-center gap-2 text-sm">
                  <UilMapMarker className="w-4 h-4 text-gray-500" />
                  <span className="font-bold">Location:</span>
                  <span>{workflow.parameters.location}</span>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <UilBuilding className="w-4 h-4 text-gray-500" />
                  <span className="font-bold">Type:</span>
                  <span>{workflow.parameters.businessType}</span>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <UilFilter className="w-4 h-4 text-gray-500" />
                  <span className="font-bold">Keywords:</span>
                  <span>{workflow.parameters.keywords.join(', ')}</span>
                </div>
                <div className="flex items-center gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <UilLinkedin className="w-4 h-4 text-gray-500" />
                    <span className="font-bold">LinkedIn:</span>
                    <span>{workflow.parameters.includeLinkedIn ? 'Yes' : 'No'}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <UilSearchAlt className="w-4 h-4 text-gray-500" />
                    <span className="font-bold">Depth:</span>
                    <span>{workflow.parameters.searchDepth} levels</span>
                  </div>
                </div>
              </div>

              {/* Stats Grid */}
              <div className="grid grid-cols-2 gap-3 mb-4">
                <div className="p-3 bg-gray-50 border-2 border-black">
                  <p className="text-xs font-bold text-gray-600 uppercase">Pages Found</p>
                  <p className="text-xl font-black text-black">{workflow.stats.pagesFound.toLocaleString()}</p>
                </div>
                <div className="p-3 bg-gray-50 border-2 border-black">
                  <p className="text-xs font-bold text-gray-600 uppercase">Scraped</p>
                  <p className="text-xl font-black text-black">{workflow.stats.pagesScraped.toLocaleString()}</p>
                </div>
                <div className="p-3 bg-gray-50 border-2 border-black">
                  <p className="text-xs font-bold text-gray-600 uppercase">Businesses</p>
                  <p className="text-xl font-black text-black">{workflow.stats.businessesExtracted}</p>
                </div>
                <div className="p-3 bg-gray-50 border-2 border-black">
                  <p className="text-xs font-bold text-gray-600 uppercase">Match Rate</p>
                  <p className="text-xl font-black text-green-600">{workflow.stats.matchRate}%</p>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex gap-2">
                {workflow.status === 'completed' && (
                  <>
                    <Button variant="default" className="flex-1 px-3 py-2 text-sm font-bold">
                      <UilFileExport className="w-4 h-4 mr-1" />
                      EXPORT CSV
                    </Button>
                    <Button variant="default" className="flex-1 px-3 py-2 text-sm font-bold">
                      <UilDatabase className="w-4 h-4 mr-1" />
                      TO CRM
                    </Button>
                  </>
                )}
                {workflow.status !== 'completed' && workflow.status !== 'failed' && (
                  <Button variant="default" className="flex-1 px-3 py-2 text-sm font-bold">
                    <UilStopCircle className="w-4 h-4 mr-1" />
                    STOP HUNT
                  </Button>
                )}
              </div>

              {/* Created Date */}
              <p className="text-xs text-gray-500 mt-4">
                Started: {new Date(workflow.createdAt).toLocaleString()}
                {workflow.completedAt && ` • Completed: ${new Date(workflow.completedAt).toLocaleString()}`}
              </p>
            </CardContent>
          </Card>
        ))}

        {/* Create New Workflow Card */}
        <Card 
          onClick={() => setShowCreateModal(true)}
          className="border-4 border-dashed border-gray-400 shadow-[4px_4px_0_rgba(0,0,0,0.3)] hover:shadow-[6px_6px_0_rgba(0,0,0,0.5)] hover:border-black transition-all duration-200 bg-gray-50 cursor-pointer group min-h-[400px]"
        >
          <CardContent className="h-full flex flex-col items-center justify-center p-8">
            <div className="w-20 h-20 bg-gray-200 border-4 border-gray-400 group-hover:border-black group-hover:bg-gray-300 rounded-full flex items-center justify-center mb-4 transition-all">
              <UilPlus className="w-10 h-10 text-gray-600 group-hover:text-black" />
            </div>
            <p className="text-xl font-black text-gray-600 group-hover:text-black uppercase">Start New Hunt</p>
            <p className="text-sm text-gray-500 mt-2 text-center">Configure search parameters and deploy automated discovery workflow</p>
          </CardContent>
        </Card>
      </div>

      {/* Hunt Configuration Modal */}
      <HuntConfigurationModal
        isOpen={showCreateModal}
        onClose={() => {
          setShowCreateModal(false);
          setIsCreating(false);
        }}
        onSave={async (huntData) => {
          setIsCreating(true);
          
          try {
            // Convert frontend format to backend format
            const searchConfig = {
              searchName: huntData.name,
              searchObjective: `Find ${huntData.businessType} businesses in ${huntData.location}`,
              selectedSources: ['web'], // Default to web search
              industry: huntData.businessType,
              location: huntData.location,
              companySize: undefined, // Not collected in current modal
              jobTitles: [], // Not collected in current modal
              keywords: huntData.keywords.join(', '),
              includeEmails: true,
              includePhones: true,
              includeLinkedIn: huntData.includeLinkedIn,
              validationCriteria: {
                mustHaveWebsite: true,
                mustHaveContactInfo: true,
                mustHaveSpecificKeywords: huntData.keywords,
                mustBeInIndustry: true,
                customValidationRules: ''
              }
            };
            
            const result = await createLeadSearch({
              userId: MOCK_USER_ID,
              searchConfig
            });
            
            console.log('Search created:', result);
            setShowCreateModal(false);
            
            // The searches will auto-refresh due to the subscription
          } catch (error) {
            console.error('Error creating search:', error);
            alert(`Failed to create search: ${error.message || 'Unknown error'}`);
          } finally {
            setIsCreating(false);
          }
        }}
      />

      {/* View Workflow Modal */}
      <ViewWorkflowModal
        isOpen={showViewModal}
        onClose={closeAllModals}
        workflow={selectedWorkflow}
        onExport={handleExportWorkflow}
      />

      {/* Settings Workflow Modal */}
      <SettingsWorkflowModal
        isOpen={showSettingsModal}
        onClose={closeAllModals}
        workflow={selectedWorkflow}
        onSave={handleSaveWorkflowSettings}
      />

      {/* Delete Confirmation Modal */}
      <DeleteConfirmationModal
        isOpen={showDeleteModal}
        onClose={closeAllModals}
        onConfirm={handleConfirmDelete}
        itemName={selectedWorkflow?.name || ''}
        itemType="workflow"
        warningMessage="This will permanently delete the workflow and all its data"
        consequences={[
          'All collected business data will be lost',
          'Workflow progress cannot be recovered',
          'This action cannot be undone',
          selectedWorkflow?.status !== 'completed' && selectedWorkflow?.status !== 'failed' 
            ? 'Active search process will be immediately stopped' 
            : 'Historical results will be permanently deleted'
        ].filter(Boolean) as string[]}
        requiresNameConfirmation={selectedWorkflow?.stats.businessesExtracted > 50}
        isLoading={isDeleting}
      />
    </div>
  );
}


================================================
FILE: src/app/dashboard/calls/page.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { cn } from '@/lib/utils';
import StatCard from '@/components/custom/stat-card';
import { 
  UilPhone,
  UilUserCircle,
  UilClock,
  UilChart,
  UilUsersAlt,
  UilInfoCircle,
  UilFilter,
  UilExport,
  UilToggleOn,
  UilToggleOff,
  UilAngleDown,
  UilPhoneVolume,
  UilCommentAlt,
  UilListUl,
  UilCircle,
  UilTachometerFast,
  UilRobot,
  UilAnalytics
} from '@tooni/iconscout-unicons-react';
import CallAnalyticsModal from '@/components/custom/modals/call-analytics-modal';
import LiveCallMonitorModal from '@/components/custom/modals/live-call-monitor-modal';
import SwarmOverviewModal from '@/components/custom/modals/swarm-overview-modal';

// Mock agents data for the table
interface AgentCall {
  id: string;
  agent: string;
  avatar?: string;
  outbound: number;
  answeredInbound: number;
  pickedUp: number;
  notPickedUp: number;
  status: 'online' | 'offline' | 'available';
  onMobile?: boolean;
  onDesktop?: boolean;
  convexEntryPoint?: string; // Added for Convex integration
}

// Phone numbers data structure
interface PhoneNumber {
  id: string;
  number: string;
  displayName: string;
  type: 'sip' | 'pstn' | 'virtual';
  status: 'active' | 'inactive' | 'maintenance';
  provider: string;
  location: string;
  assignedUser?: string;
  callsToday: number;
  callsThisWeek: number;
  callsThisMonth: number;
  successRate: number;
  avgCallDuration: string;
  lastUsed: string;
  sipConfig?: {
    endpoint: string;
    username: string;
    domain: string;
    port: number;
    protocol: 'UDP' | 'TCP' | 'TLS';
    codec: string[];
  };
  features: string[];
}

const mockAgents: AgentCall[] = [
  { id: '1', agent: 'AI Sales Agent Alpha', outbound: 156, answeredInbound: 89, pickedUp: 142, notPickedUp: 14, status: 'online', onMobile: true, onDesktop: true, convexEntryPoint: 'agents.salesAlpha' },
  { id: '2', agent: 'AI Support Agent Beta', outbound: 43, answeredInbound: 231, pickedUp: 198, notPickedUp: 33, status: 'offline', onDesktop: true, convexEntryPoint: 'agents.supportBeta' }
];

const mockPhoneNumbers: PhoneNumber[] = [
  {
    id: '1',
    number: '+1 (555) 123-4567',
    displayName: 'Main Sales Line',
    type: 'pstn',
    status: 'active',
    provider: 'Telnyx',
    location: 'New York, NY',
    assignedUser: 'Ruben Test1',
    callsToday: 23,
    callsThisWeek: 156,
    callsThisMonth: 687,
    successRate: 85,
    avgCallDuration: '3m 45s',
    lastUsed: '2 minutes ago',
    features: ['Call Recording', 'Analytics', 'Voicemail']
  },
  {
    id: '2',
    number: '+1 (555) 987-6543',
    displayName: 'Support Hotline',
    type: 'pstn',
    status: 'active',
    provider: 'Telnyx',
    location: 'Los Angeles, CA',
    assignedUser: 'Seb Staging Mingel',
    callsToday: 45,
    callsThisWeek: 312,
    callsThisMonth: 1243,
    successRate: 92,
    avgCallDuration: '5m 12s',
    lastUsed: '5 minutes ago',
    features: ['Call Recording', 'Analytics', 'Auto Attendant']
  },
  {
    id: '3',
    number: 'sip:agent@diala.ai',
    displayName: 'AI Agent Endpoint',
    type: 'sip',
    status: 'active',
    provider: 'Internal',
    location: 'Cloud Infrastructure',
    callsToday: 128,
    callsThisWeek: 892,
    callsThisMonth: 3654,
    successRate: 98,
    avgCallDuration: '2m 34s',
    lastUsed: 'Active now',
    sipConfig: {
      endpoint: 'agent.diala.ai',
      username: 'ai_agent_001',
      domain: 'diala.ai',
      port: 5060,
      protocol: 'UDP',
      codec: ['G.711', 'G.722', 'Opus']
    },
    features: ['Real-time Analytics', 'AI Monitoring', 'Auto Scaling']
  },
  {
    id: '4',
    number: '+44 20 7123 4567',
    displayName: 'UK Sales Office',
    type: 'pstn',
    status: 'active',
    provider: 'Telnyx',
    location: 'London, UK',
    assignedUser: 'Jane Green',
    callsToday: 17,
    callsThisWeek: 89,
    callsThisMonth: 432,
    successRate: 78,
    avgCallDuration: '4m 23s',
    lastUsed: '1 hour ago',
    features: ['International Routing', 'Call Recording']
  },
  {
    id: '5',
    number: 'sip:outbound@diala.ai',
    displayName: 'Outbound Campaign Pool',
    type: 'sip',
    status: 'active',
    provider: 'Internal',
    location: 'Multi-Region',
    callsToday: 234,
    callsThisWeek: 1567,
    callsThisMonth: 6890,
    successRate: 73,
    avgCallDuration: '1m 56s',
    lastUsed: 'Active now',
    sipConfig: {
      endpoint: 'outbound.diala.ai',
      username: 'campaign_pool',
      domain: 'diala.ai',
      port: 5061,
      protocol: 'TLS',
      codec: ['G.711', 'Opus']
    },
    features: ['Load Balancing', 'Campaign Analytics', 'DNC Filtering']
  },
  {
    id: '6',
    number: '+1 (555) 456-7890',
    displayName: 'Enterprise Support',
    type: 'virtual',
    status: 'active',
    provider: 'Telnyx',
    location: 'Virtual',
    assignedUser: 'Alexandra Sarfati',
    callsToday: 8,
    callsThisWeek: 45,
    callsThisMonth: 198,
    successRate: 95,
    avgCallDuration: '8m 15s',
    lastUsed: '30 minutes ago',
    features: ['Priority Routing', 'Escalation Management', 'SLA Tracking']
  },
  {
    id: '7',
    number: '+1 (555) 321-0987',
    displayName: 'Demo Line',
    type: 'pstn',
    status: 'maintenance',
    provider: 'Telnyx',
    location: 'Chicago, IL',
    callsToday: 0,
    callsThisWeek: 12,
    callsThisMonth: 76,
    successRate: 87,
    avgCallDuration: '6m 42s',
    lastUsed: '2 days ago',
    features: ['Screen Recording', 'Demo Analytics']
  },
  {
    id: '8',
    number: 'sip:testing@dev.diala.ai',
    displayName: 'Development Testing',
    type: 'sip',
    status: 'inactive',
    provider: 'Internal',
    location: 'Development Environment',
    callsToday: 5,
    callsThisWeek: 23,
    callsThisMonth: 67,
    successRate: 45,
    avgCallDuration: '1m 12s',
    lastUsed: '4 hours ago',
    sipConfig: {
      endpoint: 'testing.dev.diala.ai',
      username: 'test_user',
      domain: 'dev.diala.ai',
      port: 5062,
      protocol: 'TCP',
      codec: ['G.711']
    },
    features: ['Debug Logging', 'Call Simulation']
  }
];

export default function CallsPage() {
  const [showKPIs, setShowKPIs] = React.useState(true);
  const [activeTab, setActiveTab] = React.useState('agents');
  
  React.useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const tabParam = urlParams.get('tab');
    if (tabParam && ['calls', 'agents', 'numbers', 'swarm'].includes(tabParam)) {
      setActiveTab(tabParam);
    }
  }, []);
  const [timeRange, setTimeRange] = React.useState('today');
  const [selectedFilters, setSelectedFilters] = React.useState({
    numbers: '',
    agents: '',
    teams: ''
  });
  const [selectedLiveCall, setSelectedLiveCall] = React.useState<any>(null);
  const [showLiveCallModal, setShowLiveCallModal] = React.useState(false);
  const [selectedSwarm, setSelectedSwarm] = React.useState<SwarmCampaign | null>(null);
  const [showSwarmModal, setShowSwarmModal] = React.useState(false);
  const [selectedAgentForAnalytics, setSelectedAgentForAnalytics] = React.useState<AgentCall | null>(null);
  const [showCallAnalyticsModal, setShowCallAnalyticsModal] = React.useState(false);

  // KPI values
  const slaPercentage = 98.9;
  const totalCalls = 26;
  const inbound = 100;
  const outbound = 74;
  const answered = 110;
  const unanswered = 110;
  const unansweredPercentage = 50;
  const avgTimeToAnswer = '1min 57s';
  const longestWaiting = '7s';
  const callsWaiting = 50;
  const availableUsers = 6;
  const userStatusTotal = 521;
  
  // Format duration helper
  const formatDuration = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };
  
  const getStatusBadgeColorLive = (status: string) => {
    switch (status) {
      case 'connected': return 'bg-green-400 text-black';
      case 'ringing': return 'bg-blue-400 text-white';
      case 'on-hold': return 'bg-yellow-400 text-black';
      case 'transferring': return 'bg-purple-400 text-white';
      default: return 'bg-gray-400 text-black';
    }
  };

  const getNumberStatusBadgeColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-400 text-black';
      case 'inactive': return 'bg-gray-400 text-white';
      case 'maintenance': return 'bg-yellow-400 text-black';
      default: return 'bg-gray-400 text-black';
    }
  };

  const getNumberTypeIcon = (type: string) => {
    switch (type) {
      case 'sip': return '🌐';
      case 'pstn': return '📞';
      case 'virtual': return '☁️';
      default: return '📱';
    }
  };

  const handleRowClick = (agent: AgentCall) => {
    setSelectedAgentForAnalytics(agent);
    setShowCallAnalyticsModal(true);
  };

  const closeCallAnalyticsModal = () => {
    setShowCallAnalyticsModal(false);
    setSelectedAgentForAnalytics(null);
  };

  const closeLiveCallModal = () => {
    setShowLiveCallModal(false);
    setSelectedLiveCall(null);
  };

  const handleLiveCallClick = (liveCall: any) => {
    setSelectedLiveCall(liveCall);
    setShowLiveCallModal(true);
  };

  const handleSwarmClick = (swarm: SwarmCampaign) => {
    setSelectedSwarm(swarm);
    setShowSwarmModal(true);
  };

  const closeSwarmModal = () => {
    setShowSwarmModal(false);
    setSelectedSwarm(null);
  };

  // Generate mock call analytics data for the selected user
  const getCallAnalyticsData = (agent: AgentCall) => ({
    callInfo: {
      callId: `a6cd4cba-2e2a-4692-990f-f152e6f7-${agent.id}`,
      agent: agent.agent,
      customer: 'Taylor Smith',
      phone: '+1 201-232-1152',
      status: 'COMPLETED'
    },
    timing: {
      startTime: 'Mon, February 24, 2025 10:14:34 AM',
      endTime: 'Mon, February 24, 2025 10:18:35 AM',
      duration: '4m 01s',
      queueTime: '12s',
      holdTime: '0s'
    },
    metrics: {
      resolution: 'RESOLVED',
      transfer: true,
      sentiment: 'MIXED',
      qualityScore: '8.5/10'
    },
    callFlow: [
      { step: 1, title: 'Call Initiated', description: 'Outbound campaign call started', color: 'bg-purple-400' },
      { step: 2, title: 'Contact Connected', description: 'AI agent connected to prospect', color: 'bg-blue-400' },
      { step: 3, title: 'Pitch Delivered', description: 'Product introduction and value proposition', color: 'bg-cyan-400' },
      { step: 4, title: 'Objection Handled', description: 'Addressed pricing concerns professionally', color: 'bg-yellow-400' },
      { step: 5, title: 'Appointment Set', description: 'Demo scheduled for next Tuesday', color: 'bg-green-600' }
    ],
    customerProfile: {
      name: 'Taylor Smith',
      initials: 'TS',
      type: 'Sales Prospect',
      accountType: 'LEAD',
      customerSince: 'New Prospect',
      previousCalls: 2,
      satisfaction: 'Not Rated',
      lastContact: 'First Contact'
    },
    transcript: [
      {
        timestamp: '00:43',
        speaker: 'agent' as const,
        content: 'Hi Taylor! I\'m calling from Diala about our new AI voice solutions that could transform your customer engagement.',
        sentiment: 'positive' as const
      },
      {
        timestamp: '00:46',
        speaker: 'customer' as const,
        content: 'Oh, hi there. I wasn\'t expecting a call today. What kind of solutions are you talking about?',
        sentiment: 'neutral' as const
      },
      {
        timestamp: '00:54',
        speaker: 'agent' as const,
        content: 'Great question! We help businesses like yours automate outbound calling with AI that sounds completely natural and converts 40% better than traditional methods.'
      },
      {
        timestamp: '01:12',
        speaker: 'customer' as const,
        content: 'That does sound interesting. We do a lot of cold calling for our sales team. What makes your solution different?'
      },
      {
        timestamp: '01:28',
        speaker: 'agent' as const,
        content: 'Excellent! Our AI agents can handle objections, book appointments, and even do follow-ups. Would you be interested in a quick 15-minute demo this week?'
      },
      {
        timestamp: '01:45',
        speaker: 'customer' as const,
        content: 'Sure, I\'d like to see how this works. Tuesday afternoon would be good for me.'
      }
    ],
    aiInsights: {
      topics: [
        { name: 'Positive', type: 'positive' as const },
        { name: 'Negative', type: 'negative' as const },
        { name: 'Empathetic', type: 'empathetic' as const },
        { name: 'Unhelpful', type: 'unhelpful' as const }
      ],
      events: [
        { name: 'Greeting', timestamp: '00:22', type: 'green' as const },
        { name: 'Greeting', timestamp: '00:23', type: 'green' as const },
        { name: 'Build Rapport', timestamp: '00:23', type: 'blue' as const },
        { name: 'Website Issue', timestamp: '00:34', type: 'blue' as const },
        { name: 'Website Issue', timestamp: '00:38', type: 'blue' as const },
        { name: 'Dissatisfaction', timestamp: '00:39', type: 'red' as const },
        { name: 'Oh, I\'m sorry. You\'re having a pr...', timestamp: '00:43', type: 'green' as const },
        { name: 'Express Empathy', timestamp: '00:44', type: 'blue' as const }
      ]
    },
    timeline: [
      { timestamp: '10:14:34', event: 'Outbound Call Started', description: 'AI agent initiated call to prospect', type: 'incoming' as const },
      { timestamp: '10:14:46', event: 'Contact Answered', description: 'Prospect picked up the call', type: 'connected' as const, duration: '12s' },
      { timestamp: '10:15:12', event: 'Opening Pitch', description: 'Delivered value proposition and company introduction', type: 'system' as const },
      { timestamp: '10:16:05', event: 'Interest Expressed', description: 'Prospect showed interest in the solution', type: 'system' as const, duration: '53s' },
      { timestamp: '10:17:18', event: 'Demo Requested', description: 'Prospect asked for product demonstration', type: 'transfer' as const },
      { timestamp: '10:18:35', event: 'Appointment Scheduled', description: 'Demo booked for Tuesday 2PM EST', type: 'resolution' as const }
    ],
    qualitySummary: {
      overallScore: 85,
      categories: [
        { name: 'Rapport Building', score: 9, maxScore: 10, color: 'bg-green-400' },
        { name: 'Value Communication', score: 8, maxScore: 10, color: 'bg-blue-400' },
        { name: 'Objection Handling', score: 10, maxScore: 10, color: 'bg-green-400' },
        { name: 'Call Efficiency', score: 7, maxScore: 10, color: 'bg-yellow-400' },
        { name: 'Prospect Interest', score: 9, maxScore: 10, color: 'bg-green-400' },
        { name: 'Closing Technique', score: 8, maxScore: 10, color: 'bg-cyan-400' }
      ],
      improvements: [
        { area: 'Urgency Creation', suggestion: 'Add time-sensitive offers to increase immediate interest', priority: 'high' as const },
        { area: 'Pain Point Discovery', suggestion: 'Ask more probing questions about current challenges', priority: 'medium' as const },
        { area: 'Competitive Positioning', suggestion: 'Highlight unique advantages over competitors earlier', priority: 'medium' as const }
      ],
      strengths: [
        'Strong opening that captured prospect attention immediately',
        'Clear value proposition delivered with confidence',
        'Excellent objection handling and reframing techniques',
        'Natural conversation flow without sounding scripted',
        'Successfully moved prospect to next stage of sales funnel'
      ]
    },
    auditTrail: [
      { timestamp: '2025-02-24 10:14:34', user: 'SYSTEM', action: 'OUTBOUND_INITIATED', details: 'Outbound call started to +1 201-232-1152', system: 'DIALER-01' },
      { timestamp: '2025-02-24 10:14:46', user: 'SYSTEM', action: 'CALL_CONNECTED', details: 'Prospect answered the call', system: 'PBX-01' },
      { timestamp: '2025-02-24 10:14:47', user: 'AI Agent', action: 'GREETING_DELIVERED', details: 'Opening script executed successfully', system: 'AI-ENGINE' },
      { timestamp: '2025-02-24 10:15:12', user: 'AI Agent', action: 'PITCH_DELIVERED', details: 'Value proposition presented to prospect', system: 'AI-ENGINE' },
      { timestamp: '2025-02-24 10:16:05', user: 'SYSTEM', action: 'INTEREST_DETECTED', details: 'Prospect engagement level: HIGH', system: 'AI-ANALYTICS' },
      { timestamp: '2025-02-24 10:17:18', user: 'AI Agent', action: 'DEMO_REQUESTED', details: 'Prospect asked for product demonstration', system: 'AI-ENGINE' },
      { timestamp: '2025-02-24 10:17:25', user: 'AI Agent', action: 'CALENDAR_ACCESSED', details: 'Scheduling system integrated for booking', system: 'CALENDAR-API' },
      { timestamp: '2025-02-24 10:18:30', user: 'AI Agent', action: 'APPOINTMENT_BOOKED', details: 'Demo scheduled for Tuesday 2PM EST', system: 'CRM-DB' },
      { timestamp: '2025-02-24 10:18:35', user: 'SYSTEM', action: 'CALL_COMPLETED', details: 'Successful outcome: Appointment scheduled', system: 'DIALER-01' }
    ],
    customerJourney: {
      touchpoints: [
        { date: '2025-02-24', type: 'OUTBOUND', channel: 'Phone', outcome: 'Demo appointment scheduled', status: 'positive' as const },
        { date: '2025-02-20', type: 'OUTBOUND', channel: 'Phone', outcome: 'Initial contact - showed interest', status: 'positive' as const },
        { date: '2025-02-18', type: 'MARKETING', channel: 'Email', outcome: 'Opened email campaign', status: 'neutral' as const },
        { date: '2025-02-15', type: 'MARKETING', channel: 'LinkedIn', outcome: 'Profile viewed', status: 'neutral' as const },
        { date: '2025-02-10', type: 'LEAD_GEN', channel: 'Website', outcome: 'Downloaded whitepaper', status: 'positive' as const }
      ],
      satisfaction: [
        { date: '2025-02-24', score: 8, feedback: 'Professional and informative call' },
        { date: '2025-02-20', score: 7, feedback: 'Interesting but need more details' }
      ],
      issues: [
        { date: '2025-02-24', issue: 'Requested pricing information', resolution: 'Demo scheduled to discuss pricing options', status: 'pending' as const },
        { date: '2025-02-20', issue: 'Concerns about implementation timeline', resolution: 'Provided case studies and timeline examples', status: 'resolved' as const }
      ]
    }
  });

  return (
    <div className="h-full overflow-y-auto bg-gray-50">
      {/* Header */}
      <div className="bg-gradient-to-r from-orange-400 to-yellow-400 border-b-2 sm:border-b-4 border-black px-3 sm:px-6 py-4 sm:py-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 sm:gap-4">
            <Button 
              size="icon"
              variant="default"
              className="w-12 h-12 bg-orange-600 hover:bg-orange-700 border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)]"
            >
              <UilPhone className="h-6 w-6 text-white" />
            </Button>
            <div>
              <h1 className="text-lg sm:text-3xl font-black uppercase text-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                LIVE CALL MONITORING
              </h1>
              <p className="text-sm sm:text-base text-black font-bold">
                Real-time insights • AI-powered analytics • Performance optimization
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Button 
              size="sm"
              variant="default"
              className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] text-black font-black uppercase"
            >
              <UilInfoCircle className="w-4 h-4 mr-1" />
              HELP
            </Button>
            <div className="w-3 h-3 bg-green-400 border-2 border-black animate-pulse"></div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white border-b-2 sm:border-b-4 border-black px-3 sm:px-6 py-2 sm:py-3">
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3 sm:gap-4">
          <div className="flex flex-wrap items-center gap-2 sm:gap-4 w-full sm:w-auto">
            <select 
              className="px-2 py-1 sm:px-3 sm:py-2 border-2 border-black font-bold uppercase text-xs sm:text-sm focus:outline-none focus:ring-2 focus:ring-[rgb(0,82,255)] shadow-[2px_2px_0_rgba(0,0,0,1)] flex-1 sm:flex-none"
              value={selectedFilters.numbers}
              onChange={(e) => setSelectedFilters({...selectedFilters, numbers: e.target.value})}
            >
              <option value="">NUMBERS</option>
              {mockPhoneNumbers.map((number) => (
                <option key={number.id} value={number.number}>
                  {number.displayName} ({number.number})
                </option>
              ))}
            </select>
            <select 
              className="px-2 py-1 sm:px-3 sm:py-2 border-2 border-black font-bold uppercase text-xs sm:text-sm focus:outline-none focus:ring-2 focus:ring-[rgb(0,82,255)] shadow-[2px_2px_0_rgba(0,0,0,1)] flex-1 sm:flex-none"
              value={selectedFilters.agents}
              onChange={(e) => setSelectedFilters({...selectedFilters, agents: e.target.value})}
            >
              <option value="">AGENTS</option>
            </select>
            <select 
              className="px-2 py-1 sm:px-3 sm:py-2 border-2 border-black font-bold uppercase text-xs sm:text-sm focus:outline-none focus:ring-2 focus:ring-[rgb(0,82,255)] shadow-[2px_2px_0_rgba(0,0,0,1)] flex-1 sm:flex-none"
              value={selectedFilters.teams}
              onChange={(e) => setSelectedFilters({...selectedFilters, teams: e.target.value})}
            >
              <option value="">TEAMS</option>
            </select>
          </div>
          <div className="flex items-center gap-2 sm:gap-4 w-full sm:w-auto justify-between sm:justify-end">
            <button 
              onClick={() => setShowKPIs(!showKPIs)}
              className="flex items-center gap-1 sm:gap-2 font-bold uppercase text-xs sm:text-sm"
            >
              <div className={cn(
                "relative inline-flex h-5 w-9 sm:h-6 sm:w-12 items-center border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] transition-all",
                showKPIs ? "bg-green-400" : "bg-gray-300"
              )}>
                <span className={cn(
                  "inline-block h-3 w-3 sm:h-4 sm:w-4 transform bg-white border-2 border-black transition-transform",
                  showKPIs ? "translate-x-4 sm:translate-x-6" : "translate-x-0.5 sm:translate-x-1"
                )} />
              </div>
              <span className="hidden sm:inline">SHOW KPIS</span>
              <span className="sm:hidden">KPIS</span>
            </button>
            <div className="relative">
              <select
                value={timeRange}
                onChange={(e) => setTimeRange(e.target.value)}
                className="px-2 py-1 sm:px-3 sm:py-2 pr-6 sm:pr-8 border-2 border-black font-bold text-xs sm:text-sm focus:outline-none focus:ring-2 focus:ring-[rgb(0,82,255)] shadow-[2px_2px_0_rgba(0,0,0,1)] appearance-none bg-white"
              >
                <option value="last24h">24h</option>
                <option value="lasthour">1h</option>
                <option value="today">Today</option>
              </select>
              <div className="absolute inset-y-0 right-0 flex items-center pr-1 sm:pr-2 pointer-events-none">
                <UilAngleDown className="h-3 w-3 sm:h-4 sm:w-4 text-black" />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* KPIs Section */}
      {showKPIs && (
        <div className="px-3 sm:px-6 py-3 sm:py-4 bg-orange-50">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4">
            <StatCard
              title="SLA PERFORMANCE"
              value={`${slaPercentage}%`}
              icon={<UilChart className="h-5 w-5 text-white" />}
              iconBgColor="bg-green-600"
              bgGradient="from-green-50 to-green-100"
              progress={slaPercentage}
              trend={{
                value: "+2.3%",
                type: "positive",
                label: "vs yesterday"
              }}
            />

            <StatCard
              title="TOTAL CALLS TODAY"
              value={totalCalls}
              subtitle={`↗️ Inbound: ${inbound} | ↗️ Outbound: ${outbound}`}
              icon={<UilPhone className="h-5 w-5 text-white" />}
              iconBgColor="bg-blue-600"
              bgGradient="from-blue-50 to-blue-100"
              trend={{
                value: "+12%",
                type: "positive",
                label: "vs yesterday"
              }}
            />

            <StatCard
              title="CONNECTION RATE"
              value={`${Math.round((answered / (answered + unanswered)) * 100)}%`}
              subtitle={`✅ ${answered} Connected | ❌ ${unanswered} Missed`}
              icon={<UilPhoneVolume className="h-5 w-5 text-white" />}
              iconBgColor="bg-purple-600"
              bgGradient="from-purple-50 to-purple-100"
              progress={Math.round((answered / (answered + unanswered)) * 100)}
            />

            <StatCard
              title="AVG RESPONSE TIME"
              value={avgTimeToAnswer}
              subtitle={`⚡ Fastest: 3s | 🐌 Longest: ${longestWaiting}`}
              icon={<UilClock className="h-5 w-5 text-white" />}
              iconBgColor="bg-orange-600"
              bgGradient="from-orange-50 to-orange-100"
              trend={{
                value: "-15s",
                type: "positive",
                label: "improvement"
              }}
            />

            <StatCard
              title="ACTIVE QUEUE"
              value={callsWaiting}
              subtitle={`🤖 ${availableUsers} AI Agents Available`}
              icon={<UilUsersAlt className="h-5 w-5 text-white" />}
              iconBgColor="bg-red-600"
              bgGradient="from-red-50 to-red-100"
              status={{
                label: "Optimal",
                color: "bg-green-400"
              }}
            />

          </div>
        </div>
      )}

      {/* Performance Tips Section */}
      <div className="px-3 sm:px-6 py-3 sm:py-4 bg-gradient-to-r from-yellow-50 to-orange-50">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
          <Card className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] transform -rotate-1 bg-yellow-100">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm"
                  variant="default"
                  className="w-8 h-8 bg-yellow-400 hover:bg-yellow-500 border-2 border-black flex-shrink-0"
                >
                  <UilTachometerFast className="h-4 w-4 text-black" />
                </Button>
                <div className="flex-1">
                  <h4 className="font-black uppercase text-sm mb-2">PERFORMANCE TIP</h4>
                  <p className="text-xs text-gray-700">
                    Peak call times are 10-11AM and 2-4PM local time. Schedule campaigns during these windows for 40% better connection rates.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] bg-cyan-100">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm"
                  variant="default"
                  className="w-8 h-8 bg-cyan-400 hover:bg-cyan-500 border-2 border-black flex-shrink-0"
                >
                  <UilRobot className="h-4 w-4 text-black" />
                </Button>
                <div className="flex-1">
                  <h4 className="font-black uppercase text-sm mb-2">AI INSIGHT</h4>
                  <p className="text-xs text-gray-700">
                    Your agents are performing 15% above average today. Consider scaling up successful campaigns to maximize results.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] transform rotate-1 bg-pink-100">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm"
                  variant="default"
                  className="w-8 h-8 bg-pink-400 hover:bg-pink-500 border-2 border-black flex-shrink-0"
                >
                  <UilAnalytics className="h-4 w-4 text-black" />
                </Button>
                <div className="flex-1">
                  <h4 className="font-black uppercase text-sm mb-2">QUICK ACTION</h4>
                  <p className="text-xs text-gray-700">
                    3 high-quality leads are waiting for follow-up calls. Review them in the Agent Analytics tab for immediate action.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Main Content */}
      <div className="px-3 sm:px-6 py-3 sm:py-4">
        <Card className="border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
          {/* Tabs */}
          <div className="border-b-2 sm:border-b-4 border-black bg-gray-100">
            <div className="flex overflow-x-auto">
              <button
                onClick={() => {
                  setActiveTab('calls');
                  const url = new URL(window.location.href);
                  url.searchParams.set('tab', 'calls');
                  window.history.pushState({}, '', url.toString());
                }}
                className={cn(
                  "px-4 py-2 sm:px-6 sm:py-3 border-r-2 border-black font-black uppercase transition-colors text-xs sm:text-sm whitespace-nowrap flex-shrink-0",
                  activeTab === 'calls' 
                    ? "bg-[rgb(0,82,255)] text-white" 
                    : "bg-gray-100 text-black hover:bg-gray-200"
                )}
              >
                <UilPhone className="h-3 w-3 sm:h-4 sm:w-4 inline mr-1 sm:mr-2" />
                CALLS
              </button>
              <button
                onClick={() => {
                  setActiveTab('agents');
                  const url = new URL(window.location.href);
                  url.searchParams.set('tab', 'agents');
                  window.history.pushState({}, '', url.toString());
                }}
                className={cn(
                  "px-4 py-2 sm:px-6 sm:py-3 border-r-2 border-black font-black uppercase transition-colors text-xs sm:text-sm whitespace-nowrap flex-shrink-0",
                  activeTab === 'agents' 
                    ? "bg-[rgb(0,82,255)] text-white" 
                    : "bg-gray-100 text-black hover:bg-gray-200"
                )}
              >
                <UilUserCircle className="h-3 w-3 sm:h-4 sm:w-4 inline mr-1 sm:mr-2" />
                AGENTS
              </button>
              <button
                onClick={() => {
                  setActiveTab('numbers');
                  const url = new URL(window.location.href);
                  url.searchParams.set('tab', 'numbers');
                  window.history.pushState({}, '', url.toString());
                }}
                className={cn(
                  "px-4 py-2 sm:px-6 sm:py-3 border-r-2 border-black font-black uppercase transition-colors text-xs sm:text-sm whitespace-nowrap flex-shrink-0",
                  activeTab === 'numbers' 
                    ? "bg-[rgb(0,82,255)] text-white" 
                    : "bg-gray-100 text-black hover:bg-gray-200"
                )}
              >
                <UilListUl className="h-3 w-3 sm:h-4 sm:w-4 inline mr-1 sm:mr-2" />
                NUMBERS
              </button>
              <button
                onClick={() => {
                  setActiveTab('swarm');
                  const url = new URL(window.location.href);
                  url.searchParams.set('tab', 'swarm');
                  window.history.pushState({}, '', url.toString());
                }}
                className={cn(
                  "px-4 py-2 sm:px-6 sm:py-3 border-r-2 border-black font-black uppercase transition-colors text-xs sm:text-sm whitespace-nowrap flex-shrink-0",
                  activeTab === 'swarm' 
                    ? "bg-[rgb(0,82,255)] text-white" 
                    : "bg-gray-100 text-black hover:bg-gray-200"
                )}
              >
                <UilUsersAlt className="h-3 w-3 sm:h-4 sm:w-4 inline mr-1 sm:mr-2" />
                SWARM
              </button>
            </div>
          </div>

          {/* Filter info */}
          <div className="px-3 sm:px-4 py-2 sm:py-3 bg-yellow-400 border-b-2 sm:border-b-4 border-black flex items-center justify-between">
            <button className="font-bold uppercase flex items-center gap-1 sm:gap-2 text-xs sm:text-sm">
              {activeTab === 'calls' ? 'FILTER LIVE CALLS' : 
               activeTab === 'agents' ? 'FILTER AGENTS' :
               activeTab === 'swarm' ? 'FILTER SWARM CAMPAIGNS' : 'FILTER NUMBERS'} <UilAngleDown className="h-3 w-3 sm:h-4 sm:w-4" />
            </button>
            <Badge className="bg-black text-white font-black uppercase px-2 sm:px-3 py-1 text-xs sm:text-sm">
              {activeTab === 'calls' ? '3 LIVE CALLS' : 
               activeTab === 'agents' ? '2 AGENTS' :
               activeTab === 'swarm' ? '8 ACTIVE SWARMS' : `${mockPhoneNumbers.length} NUMBERS`}
            </Badge>
          </div>

          {/* Table */}
          {activeTab === 'agents' && (
            <div>
              {/* Mobile: Card Layout */}
              <div className="sm:hidden space-y-3 p-3">
                {mockAgents.map((agent, index) => (
                  <div 
                    key={agent.id} 
                    onClick={() => handleRowClick(agent)}
                    className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] cursor-pointer hover:bg-yellow-100 transition-colors"
                  >
                    {/* Header Row */}
                    <div className="flex items-center justify-between p-3 border-b-2 border-black bg-gray-50">
                      <div className="flex items-center gap-3">
                        <div className="relative">
                          <div className="w-10 h-10 bg-pink-400 border-2 border-black flex items-center justify-center font-black text-white">
                            {agent.agent.charAt(0).toUpperCase()}
                          </div>
                          {agent.status === 'online' && (
                            <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-400 border border-black" />
                          )}
                        </div>
                        <div>
                          <div className="font-black text-sm">{agent.agent.split(' ')[0]}</div>
                          <div className="text-xs text-gray-600">{agent.agent.split(' ').slice(1).join(' ')}</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className={cn(
                          "px-2 py-1 border border-black font-bold uppercase text-xs",
                          agent.status === 'online' ? "bg-green-400 text-black" :
                          agent.status === 'available' ? "bg-blue-400 text-white" :
                          "bg-gray-400 text-white"
                        )}>
                          {agent.status}
                        </div>
                      </div>
                    </div>
                    
                    {/* Stats Row */}
                    <div className="p-3">
                      <div className="flex items-center justify-between">
                        <div className="flex gap-4">
                          <div className="text-center">
                            <div className="font-black text-lg text-blue-600">{agent.outbound}</div>
                            <div className="text-xs text-gray-600 font-bold">OUTBOUND</div>
                          </div>
                          <div className="text-center">
                            <div className="font-black text-lg text-green-600">{agent.answeredInbound}</div>
                            <div className="text-xs text-gray-600 font-bold">ANSWERED</div>
                          </div>
                          <div className="text-center">
                            <div className="font-black text-lg text-purple-600">{agent.pickedUp}</div>
                            <div className="text-xs text-gray-600 font-bold">PICKED UP</div>
                          </div>
                          {agent.notPickedUp > 0 && (
                            <div className="text-center">
                              <div className="font-black text-lg text-red-600">{agent.notPickedUp}</div>
                              <div className="text-xs text-gray-600 font-bold">MISSED</div>
                            </div>
                          )}
                        </div>
                        
                        <div className="flex flex-col gap-1">
                          {agent.convexEntryPoint && (
                            <div className="text-xs bg-violet-400 text-white px-2 py-1 border border-black font-bold">
                              {agent.convexEntryPoint}
                            </div>
                          )}
                          <div className="flex gap-1">
                            {agent.onMobile && (
                              <div className="w-5 h-5 bg-cyan-400 border border-black flex items-center justify-center">
                                <span className="text-xs font-bold">M</span>
                              </div>
                            )}
                            {agent.onDesktop && (
                              <div className="w-5 h-5 bg-purple-400 border border-black flex items-center justify-center">
                                <span className="text-xs font-bold text-white">D</span>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              
              {/* Desktop: Table Layout */}
              <div className="hidden sm:block overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b-4 border-black bg-gray-100">
                      <th className="text-left p-4 font-black uppercase text-sm">USER</th>
                      <th className="text-center p-4 font-black uppercase text-sm">OUTBOUND <UilAngleDown className="h-3 w-3 inline" /></th>
                      <th className="text-center p-4 font-black uppercase text-sm">ANSWERED INBOUND</th>
                      <th className="text-center p-4 font-black uppercase text-sm">🎧 PICKED-UP</th>
                      <th className="text-center p-4 font-black uppercase text-sm">❌ NOT PICKED-UP</th>
                      <th className="text-right p-4 font-black uppercase text-sm"></th>
                    </tr>
                  </thead>
                  <tbody>
                    {mockAgents.map((agent, index) => (
                      <tr 
                        key={agent.id} 
                        onClick={() => handleRowClick(agent)}
                        className={cn(
                          "border-b-2 border-black cursor-pointer hover:bg-yellow-100 transition-colors",
                          index % 2 === 0 ? "bg-white" : "bg-gray-50"
                        )}
                      >
                        <td className="p-4">
                          <div className="flex items-center gap-3">
                            <div className="relative">
                              <div className="w-10 h-10 bg-pink-400 border-2 border-black flex items-center justify-center font-black text-white">
                                {agent.agent.charAt(0).toUpperCase()}
                              </div>
                              {agent.status === 'online' && (
                                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 border-2 border-black" />
                              )}
                            </div>
                            <span className="font-bold">{agent.agent}</span>
                          </div>
                        </td>
                        <td className="p-4 text-center font-black text-lg">{agent.outbound}</td>
                        <td className="p-4 text-center font-black text-lg">{agent.answeredInbound}</td>
                        <td className="p-4 text-center font-black text-lg">{agent.pickedUp}</td>
                        <td className="p-4 text-center font-black text-lg">{agent.notPickedUp}</td>
                        <td className="p-4 text-right">
                          <div className="space-y-1">
                            {agent.convexEntryPoint && (
                              <Badge className="bg-violet-400 text-white border-2 border-black font-bold uppercase text-xs">
                                CONVEX: {agent.convexEntryPoint}
                              </Badge>
                            )}
                            {agent.onMobile && (
                              <Badge className="bg-cyan-400 text-black border-2 border-black font-bold uppercase text-xs">
                                ON MOBILE • 16M
                              </Badge>
                            )}
                            {agent.onDesktop && (
                              <Badge className="bg-purple-400 text-white border-2 border-black font-bold uppercase text-xs ml-2">
                                ON DESKTOP • 4:49M
                              </Badge>
                            )}
                            {agent.status === 'available' && (
                              <Badge className="bg-green-400 text-black border-2 border-black font-bold uppercase text-xs">
                                AVAILABLE • 1H 41M
                              </Badge>
                            )}
                            {agent.status === 'offline' && (
                              <Badge className="bg-gray-400 text-white border-2 border-black font-bold uppercase text-xs">
                                OFFLINE • 4:49M
                              </Badge>
                            )}
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {activeTab === 'calls' && (
            <div>
              {/* Mobile: Card Layout */}
              <div className="sm:hidden space-y-3 p-3">
                {mockLiveCalls.map((call, index) => (
                  <div 
                    key={call.callId} 
                    onClick={() => handleLiveCallClick(call)}
                    className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] cursor-pointer hover:bg-yellow-100 transition-colors"
                  >
                    {/* Header Row */}
                    <div className="flex items-center justify-between p-3 border-b-2 border-black bg-gray-50">
                      <div className="flex items-center gap-3">
                        <div className="relative">
                          <div className="w-10 h-10 bg-blue-400 border-2 border-black flex items-center justify-center font-black text-white">
                            {call.agentName.charAt(0).toUpperCase()}
                          </div>
                          {call.status === 'connected' && (
                            <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-400 border border-black" />
                          )}
                        </div>
                        <div>
                          <div className="font-black text-sm">{call.agentName.split(' ')[0]}</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className={cn(
                          "px-2 py-1 border border-black font-bold uppercase text-xs",
                          getStatusBadgeColorLive(call.status)
                        )}>
                          {call.status}
                        </div>
                      </div>
                    </div>
                    {/* Stats Row */}
                    <div className="p-3">
                      <div className="flex items-center justify-between">
                        <div className="flex gap-4">
                          <div className="text-center">
                            <div className="w-8 h-8 bg-pink-400 border-2 border-black flex items-center justify-center font-black text-white text-lg mx-auto mb-1">
                              {call.customerName.charAt(0).toUpperCase()}
                            </div>
                            <div className="text-xs text-gray-600 font-bold">CUSTOMER</div>
                          </div>
                          <div className="text-center">
                            <div className="font-black text-lg text-green-600">{formatDuration(call.duration)}</div>
                            <div className="text-xs text-gray-600 font-bold">DURATION</div>
                          </div>
                          <div className="text-center">
                            <div className="font-black text-lg text-purple-600">{call.currentPhase}</div>
                            <div className="text-xs text-gray-600 font-bold">PHASE</div>
                          </div>
                        </div>
                        <div className="flex gap-1">
                          {call.isRecording && (
                            <div className="w-5 h-5 bg-red-500 border border-black flex items-center justify-center">
                              <UilCircle className="h-3 w-3 text-white" />
                            </div>
                          )}
                          <div className="w-5 h-5 bg-blue-400 border border-black flex items-center justify-center">
                            <UilPhone className="h-3 w-3 text-white" />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              
              {/* Desktop: Table Layout */}
              <div className="hidden sm:block overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b-4 border-black bg-gray-100">
                      <th className="text-left p-4 font-black uppercase text-sm">STATUS</th>
                      <th className="text-left p-4 font-black uppercase text-sm">AI AGENT</th>
                      <th className="text-left p-4 font-black uppercase text-sm">PROSPECT</th>
                      <th className="text-center p-4 font-black uppercase text-sm">
                        <UilClock className="h-4 w-4 inline mr-1" />DURATION
                      </th>
                      <th className="text-center p-4 font-black uppercase text-sm">CALL PHASE</th>
                      <th className="text-center p-4 font-black uppercase text-sm">CAMPAIGN</th>
                      <th className="text-right p-4 font-black uppercase text-sm">LIVE ACTIONS</th>
                    </tr>
                  </thead>
                  <tbody>
                    {mockLiveCalls.map((call, index) => (
                      <tr 
                        key={call.callId} 
                        onClick={() => handleLiveCallClick(call)}
                        className={cn(
                          "border-b-2 border-black cursor-pointer hover:bg-yellow-100 transition-colors",
                          index % 2 === 0 ? "bg-white" : "bg-gray-50"
                        )}
                      >
                        <td className="p-4">
                          <Badge className={cn("border-2 border-black font-bold uppercase text-xs", getStatusBadgeColorLive(call.status))}>
                            {call.status}
                          </Badge>
                        </td>
                        <td className="p-4">
                          <div className="flex items-center gap-2">
                            <div className="w-8 h-8 bg-blue-400 border-2 border-black flex items-center justify-center font-black text-white text-xs">
                              AI
                            </div>
                            <div className="font-bold">{call.agentName}</div>
                          </div>
                        </td>
                        <td className="p-4">
                          <div className="flex items-center gap-2">
                            <div className="w-8 h-8 bg-pink-400 border-2 border-black flex items-center justify-center font-black text-white text-xs">
                              {call.customerName.charAt(0)}
                            </div>
                            <div>
                              <div className="font-bold">{call.customerName}</div>
                              <div className="text-xs text-gray-600">{call.customerPhone}</div>
                            </div>
                          </div>
                        </td>
                        <td className="p-4 text-center">
                          <div className="font-black text-lg text-green-600">{formatDuration(call.duration)}</div>
                          <div className="text-xs text-gray-600">ACTIVE</div>
                        </td>
                        <td className="p-4 text-center">
                          <Badge className="bg-purple-400 text-white border-2 border-black font-bold uppercase text-xs">
                            {call.currentPhase}
                          </Badge>
                        </td>
                        <td className="p-4 text-center">
                          <div className="text-sm font-bold">{call.campaignName}</div>
                          <div className="text-xs text-gray-600">OUTBOUND</div>
                        </td>
                        <td className="p-4 text-right">
                          <div className="flex justify-end gap-1">
                            {call.isRecording && (
                              <Badge className="bg-red-500 text-white border-2 border-black font-bold uppercase text-xs flex items-center gap-1">
                                <UilCircle className="h-3 w-3" />
                                REC
                              </Badge>
                            )}
                            <Badge className="bg-green-500 text-white border-2 border-black font-bold uppercase text-xs flex items-center gap-1 animate-pulse">
                              <UilPhone className="h-3 w-3" />
                              LIVE
                            </Badge>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              
              {mockLiveCalls.length === 0 && (
                <div className="p-12 text-center">
                  <div className="w-20 h-20 bg-gray-300 border-4 border-black mx-auto mb-4 flex items-center justify-center">
                    <UilPhone className="h-10 w-10 text-black" />
                  </div>
                  <p className="font-black uppercase text-xl">NO ACTIVE CALLS</p>
                </div>
              )}
            </div>
          )}

          {activeTab === 'numbers' && (
            <div>
              {/* Mobile: Card Layout */}
              <div className="sm:hidden space-y-3 p-3">
                {mockPhoneNumbers.map((number, index) => (
                  <div 
                    key={number.id} 
                    className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] cursor-pointer hover:bg-yellow-100 transition-colors"
                  >
                    {/* Header Row */}
                    <div className="flex items-center justify-between p-3 border-b-2 border-black bg-gray-50">
                      <div className="flex items-center gap-3">
                        <div className="relative">
                          <div className="w-10 h-10 bg-cyan-400 border-2 border-black flex items-center justify-center font-black text-white text-lg">
                            {getNumberTypeIcon(number.type)}
                          </div>
                          {number.status === 'active' && (
                            <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-400 border border-black" />
                          )}
                        </div>
                        <div>
                          <div className="font-black text-sm">{number.displayName}</div>
                          <div className="text-xs text-gray-600">{number.number}</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className={cn(
                          "px-2 py-1 border border-black font-bold uppercase text-xs",
                          getNumberStatusBadgeColor(number.status)
                        )}>
                          {number.status}
                        </div>
                      </div>
                    </div>
                    
                    {/* Stats Row */}
                    <div className="p-3">
                      <div className="flex items-center justify-between">
                        <div className="flex gap-4">
                          <div className="text-center">
                            <div className="font-black text-lg text-blue-600">{number.callsToday}</div>
                            <div className="text-xs text-gray-600 font-bold">TODAY</div>
                          </div>
                          <div className="text-center">
                            <div className="font-black text-lg text-green-600">{number.successRate}%</div>
                            <div className="text-xs text-gray-600 font-bold">SUCCESS</div>
                          </div>
                          <div className="text-center">
                            <div className="font-black text-lg text-purple-600">{number.avgCallDuration}</div>
                            <div className="text-xs text-gray-600 font-bold">AVG CALL</div>
                          </div>
                        </div>
                        
                        <div className="flex gap-1">
                          <Badge className={cn(
                            "border border-black font-bold uppercase text-xs",
                            number.type === 'sip' ? "bg-purple-400 text-white" :
                            number.type === 'pstn' ? "bg-blue-400 text-white" :
                            "bg-gray-400 text-black"
                          )}>
                            {number.type.toUpperCase()}
                          </Badge>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              
              {/* Desktop: Table Layout */}
              <div className="hidden sm:block overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b-4 border-black bg-gray-100">
                      <th className="text-left p-4 font-black uppercase text-sm">NUMBER</th>
                      <th className="text-center p-4 font-black uppercase text-sm">CALLS TODAY</th>
                      <th className="text-center p-4 font-black uppercase text-sm">SUCCESS RATE</th>
                      <th className="text-center p-4 font-black uppercase text-sm">📞 TOTAL CALLS</th>
                      <th className="text-center p-4 font-black uppercase text-sm">⏱️ AVG DURATION</th>
                      <th className="text-right p-4 font-black uppercase text-sm"></th>
                    </tr>
                  </thead>
                  <tbody>
                    {mockPhoneNumbers.map((number, index) => (
                      <tr 
                        key={number.id} 
                        className={cn(
                          "border-b-2 border-black cursor-pointer hover:bg-yellow-100 transition-colors",
                          index % 2 === 0 ? "bg-white" : "bg-gray-50"
                        )}
                      >
                        <td className="p-4">
                          <div className="flex items-center gap-3">
                            <div className="relative">
                              <div className="w-10 h-10 bg-cyan-400 border-2 border-black flex items-center justify-center font-black text-white">
                                {getNumberTypeIcon(number.type)}
                              </div>
                              {number.status === 'active' && (
                                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 border-2 border-black" />
                              )}
                            </div>
                            <div>
                              <span className="font-bold">{number.displayName}</span>
                              <div className="text-xs text-gray-600">{number.number}</div>
                            </div>
                          </div>
                        </td>
                        <td className="p-4 text-center font-black text-lg">{number.callsToday}</td>
                        <td className="p-4 text-center font-black text-lg">{number.successRate}%</td>
                        <td className="p-4 text-center font-black text-lg">{number.callsThisMonth}</td>
                        <td className="p-4 text-center font-black text-lg">{number.avgCallDuration}</td>
                        <td className="p-4 text-right">
                          <div className="space-y-1">
                            <Badge className={cn(
                              "border-2 border-black font-bold uppercase text-xs",
                              number.type === 'sip' ? "bg-purple-400 text-white" :
                              number.type === 'pstn' ? "bg-blue-400 text-white" :
                              "bg-gray-400 text-black"
                            )}>
                              {number.type.toUpperCase()}
                            </Badge>
                            {number.assignedUser && (
                              <Badge className="bg-pink-400 text-black border-2 border-black font-bold uppercase text-xs ml-2">
                                {number.assignedUser.split(' ')[0]}
                              </Badge>
                            )}
                            <Badge className={cn(
                              "bg-green-400 text-black border-2 border-black font-bold uppercase text-xs",
                              getNumberStatusBadgeColor(number.status)
                            )}>
                              {number.status} • {number.lastUsed}
                            </Badge>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {activeTab === 'swarm' && (
            <div>
              {/* Mobile: Card Layout */}
              <div className="sm:hidden space-y-3 p-3">
                {mockSwarmCampaigns.map((swarm, index) => (
                  <div 
                    key={swarm.id} 
                    onClick={() => handleSwarmClick(swarm)}
                    className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] cursor-pointer hover:bg-yellow-100 transition-colors"
                  >
                    {/* Header Row */}
                    <div className="flex items-center justify-between p-3 border-b-2 border-black bg-gray-50">
                      <div className="flex items-center gap-3">
                        <div className="relative">
                          <div className="w-10 h-10 bg-purple-400 border-2 border-black flex items-center justify-center font-black text-white">
                            <UilUsersAlt className="h-5 w-5" />
                          </div>
                          {swarm.status === 'active' && (
                            <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-400 border border-black" />
                          )}
                        </div>
                        <div>
                          <div className="font-black text-sm">{swarm.name}</div>
                          <div className="text-xs text-gray-600">{swarm.description}</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className={cn(
                          "px-2 py-1 border border-black font-bold uppercase text-xs",
                          swarm.status === 'active' ? "bg-green-400 text-black" :
                          swarm.status === 'paused' ? "bg-yellow-400 text-black" :
                          "bg-gray-400 text-white"
                        )}>
                          {swarm.status}
                        </div>
                      </div>
                    </div>
                    
                    {/* Stats Row */}
                    <div className="p-3">
                      <div className="flex items-center justify-between">
                        <div className="flex gap-4">
                          <div className="text-center">
                            <div className="font-black text-lg text-blue-600">{swarm.activeAgents}</div>
                            <div className="text-xs text-gray-600 font-bold">AGENTS</div>
                          </div>
                          <div className="text-center">
                            <div className="font-black text-lg text-green-600">{swarm.totalCalls}</div>
                            <div className="text-xs text-gray-600 font-bold">CALLS</div>
                          </div>
                          <div className="text-center">
                            <div className="font-black text-lg text-purple-600">{swarm.successRate}%</div>
                            <div className="text-xs text-gray-600 font-bold">SUCCESS</div>
                          </div>
                        </div>
                        
                        <div className="flex gap-1">
                          <Badge className={cn(
                            "border border-black font-bold uppercase text-xs",
                            swarm.purpose === 'Discovery' ? "bg-purple-400 text-white" :
                            swarm.purpose === 'Support' ? "bg-green-400 text-black" :
                            swarm.purpose === 'Appointment' ? "bg-orange-400 text-black" :
                            "bg-cyan-400 text-black"
                          )}>
                            {swarm.purpose}
                          </Badge>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              
              {/* Desktop: Table Layout */}
              <div className="hidden sm:block overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b-4 border-black bg-gray-100">
                      <th className="text-left p-4 font-black uppercase text-sm">SWARM CAMPAIGN</th>
                      <th className="text-center p-4 font-black uppercase text-sm">ACTIVE AGENTS</th>
                      <th className="text-center p-4 font-black uppercase text-sm">TOTAL CALLS</th>
                      <th className="text-center p-4 font-black uppercase text-sm">SUCCESS RATE</th>
                      <th className="text-center p-4 font-black uppercase text-sm">PURPOSE</th>
                      <th className="text-right p-4 font-black uppercase text-sm">STATUS</th>
                    </tr>
                  </thead>
                  <tbody>
                    {mockSwarmCampaigns.map((swarm, index) => (
                      <tr 
                        key={swarm.id} 
                        onClick={() => handleSwarmClick(swarm)}
                        className={cn(
                          "border-b-2 border-black cursor-pointer hover:bg-yellow-100 transition-colors",
                          index % 2 === 0 ? "bg-white" : "bg-gray-50"
                        )}
                      >
                        <td className="p-4">
                          <div className="flex items-center gap-3">
                            <div className="relative">
                              <div className="w-10 h-10 bg-purple-400 border-2 border-black flex items-center justify-center font-black text-white">
                                <UilUsersAlt className="h-5 w-5" />
                              </div>
                              {swarm.status === 'active' && (
                                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 border-2 border-black" />
                              )}
                            </div>
                            <div>
                              <div className="font-bold text-sm">{swarm.name}</div>
                              <div className="text-xs text-gray-600">{swarm.description}</div>
                            </div>
                          </div>
                        </td>
                        <td className="p-4 text-center">
                          <div className="font-black text-lg text-blue-600">{swarm.activeAgents}</div>
                          <div className="text-xs text-gray-600">of {swarm.totalAgents}</div>
                        </td>
                        <td className="p-4 text-center">
                          <div className="font-black text-lg text-green-600">{swarm.totalCalls}</div>
                          <div className="text-xs text-gray-600">total</div>
                        </td>
                        <td className="p-4 text-center">
                          <div className="font-black text-lg text-purple-600">{swarm.successRate}%</div>
                          <div className="text-xs text-gray-600">success</div>
                        </td>
                        <td className="p-4 text-center">
                          <Badge className={cn(
                            "border-2 border-black font-bold uppercase text-xs",
                            swarm.purpose === 'Discovery' ? "bg-purple-400 text-white" :
                            swarm.purpose === 'Support' ? "bg-green-400 text-black" :
                            swarm.purpose === 'Appointment' ? "bg-orange-400 text-black" :
                            "bg-cyan-400 text-black"
                          )}>
                            {swarm.purpose}
                          </Badge>
                        </td>
                        <td className="p-4 text-right">
                          <div className="space-y-1">
                            <Badge className={cn(
                              "border-2 border-black font-bold uppercase text-xs",
                              swarm.status === 'active' ? "bg-green-400 text-black" :
                              swarm.status === 'paused' ? "bg-yellow-400 text-black" :
                              "bg-gray-400 text-white"
                            )}>
                              {swarm.status}
                            </Badge>
                            <div className="text-xs text-gray-600">
                              Created: {new Date(swarm.created).toLocaleDateString()}
                            </div>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
        </Card>

        {/* Feedback button */}
        <div className="fixed bottom-4 right-4 sm:bottom-6 sm:right-6">
          <Button 
            variant="default"
            size="sm"
            className="bg-violet-400 hover:bg-violet-500 text-black font-black uppercase border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[3px_3px_0_rgba(0,0,0,1)] sm:hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all text-xs sm:text-sm px-2 sm:px-4"
          >
            <UilCommentAlt className="h-3 w-3 sm:h-5 sm:w-5 sm:mr-2" />
            <span className="hidden sm:inline">SHARE YOUR FEEDBACK</span>
            <span className="sm:hidden ml-1">FEEDBACK</span>
          </Button>
        </div>
      </div>

      {/* Call Analytics Modal */}
      {selectedAgentForAnalytics && (
        <CallAnalyticsModal
          isOpen={showCallAnalyticsModal}
          onClose={closeCallAnalyticsModal}
          data={getCallAnalyticsData(selectedAgentForAnalytics)}
        />
      )}
      
      {/* Live Call Monitor Modal */}
      {selectedLiveCall && (
        <LiveCallMonitorModal
          isOpen={showLiveCallModal}
          onClose={closeLiveCallModal}
          callData={selectedLiveCall}
        />
      )}
      
      {/* Swarm Overview Modal */}
      {selectedSwarm && (
        <SwarmOverviewModal
          isOpen={showSwarmModal}
          onClose={closeSwarmModal}
          swarmData={selectedSwarm}
        />
      )}
    </div>
  );
}

// MOCK: Live calls data
const mockLiveCalls = [
  {
    callId: 'live_001',
    agentName: 'AI Agent Sarah',
    customerName: 'Michael Chen',
    customerPhone: '+1 415-555-0123',
    status: 'connected' as const,
    duration: 127, // seconds
    campaignName: 'Q1 Sales Outreach',
    startTime: '2:14 PM',
    currentPhase: 'Pitch Delivery',
    isRecording: true,
    agentGain: 65,
    customerGain: 45,
    currentSpeaker: 'agent' as const,
    recentTranscript: [
      { timestamp: '2:15', speaker: 'agent' as const, text: 'Our AI solution can reduce your call center costs by up to 40% while improving customer satisfaction.', sentiment: 'positive' as const },
      { timestamp: '2:16', speaker: 'customer' as const, text: 'That sounds interesting, but how does it handle complex customer issues?', sentiment: 'neutral' as const },
    ],
    callObjectives: [
      'Introduce AI voice solution benefits',
      'Address cost concerns',
      'Schedule product demonstration',
      'Qualify decision-making authority'
    ],
    nextActions: [
      'Provide ROI case studies',
      'Address technical implementation questions',
      'Propose trial period'
    ]
  },
  {
    callId: 'live_002',
    agentName: 'AI Agent David',
    customerName: 'Lisa Rodriguez',
    customerPhone: '+1 312-555-0456',
    status: 'ringing' as const,
    duration: 23,
    campaignName: 'Healthcare Leads',
    startTime: '2:16 PM',
    currentPhase: 'Connection Attempt',
    isRecording: false,
    agentGain: 20,
    customerGain: 15,
    currentSpeaker: null,
    recentTranscript: [],
    callObjectives: [
      'Connect with healthcare administrator',
      'Introduce HIPAA-compliant voice solution',
      'Discuss patient communication automation'
    ],
    nextActions: [
      'Wait for connection',
      'Deliver healthcare-focused opening'
    ]
  },
  {
    callId: 'live_003',
    agentName: 'AI Agent Emma',
    customerName: 'Robert Kim',
    customerPhone: '+1 206-555-0789',
    status: 'on-hold' as const,
    duration: 312,
    campaignName: 'Enterprise Follow-up',
    startTime: '2:11 PM',
    currentPhase: 'Waiting for Decision Maker',
    isRecording: true,
    agentGain: 25,
    customerGain: 20,
    currentSpeaker: null,
    recentTranscript: [
      { timestamp: '2:14', speaker: 'customer' as const, text: 'Let me put you on hold while I get our IT director on the line.', sentiment: 'positive' as const },
      { timestamp: '2:13', speaker: 'agent' as const, text: 'Perfect! I\'d love to discuss the technical integration with your IT team.', sentiment: 'positive' as const },
    ],
    callObjectives: [
      'Connect with IT decision maker',
      'Discuss technical requirements',
      'Present enterprise pricing options'
    ],
    nextActions: [
      'Engage IT director when available',
      'Present technical documentation',
      'Propose pilot program'
    ]
  }
];

// MOCK: Swarm campaigns data
interface SwarmCampaign {
  id: string;
  name: string;
  description: string;
  status: 'active' | 'paused' | 'stopped';
  activeAgents: number;
  totalAgents: number;
  totalCalls: number;
  successRate: number;
  purpose: string;
  created: string;
}

const mockSwarmCampaigns: SwarmCampaign[] = [
  {
    id: '1',
    name: 'SALES BATTALION',
    description: 'Elite cold calling agents focused on B2B outreach',
    status: 'active',
    activeAgents: 2,
    totalAgents: 3,
    totalCalls: 1247,
    successRate: 68,
    purpose: 'Discovery',
    created: '2024-01-15'
  },
  {
    id: '2',
    name: 'SUPPORT SQUAD',
    description: 'Customer support specialists handling inbound queries',
    status: 'active',
    activeAgents: 2,
    totalAgents: 2,
    totalCalls: 892,
    successRate: 94,
    purpose: 'Support',
    created: '2024-01-20'
  },
  {
    id: '3',
    name: 'APPOINTMENT ARMY',
    description: 'Dedicated to scheduling and managing appointments',
    status: 'active',
    activeAgents: 1,
    totalAgents: 1,
    totalCalls: 423,
    successRate: 82,
    purpose: 'Appointment',
    created: '2024-01-01'
  },
  {
    id: '4',
    name: 'ENTERPRISE SALES BLITZ',
    description: 'High-value B2B prospects targeting Fortune 500 companies',
    status: 'active',
    activeAgents: 12,
    totalAgents: 15,
    totalCalls: 284,
    successRate: 85,
    purpose: 'Discovery',
    created: '2024-02-01'
  },
  {
    id: '5',
    name: 'HEALTHCARE OUTREACH',
    description: 'Medical facility decision makers for compliance solutions',
    status: 'active',
    activeAgents: 8,
    totalAgents: 10,
    totalCalls: 156,
    successRate: 92,
    purpose: 'Discovery',
    created: '2024-02-05'
  },
  {
    id: '6',
    name: 'SMB LEAD GENERATION',
    description: 'Small to medium business owners for productivity tools',
    status: 'paused',
    activeAgents: 0,
    totalAgents: 20,
    totalCalls: 432,
    successRate: 75,
    purpose: 'Discovery',
    created: '2024-01-28'
  },
  {
    id: '7',
    name: 'TECH STARTUP WARM LEADS',
    description: 'Pre-qualified startup founders from product demos',
    status: 'active',
    activeAgents: 6,
    totalAgents: 6,
    totalCalls: 89,
    successRate: 96,
    purpose: 'Follow-up',
    created: '2024-02-10'
  },
  {
    id: '8',
    name: 'E-COMMERCE FOLLOW-UP',
    description: 'Online retailers who downloaded our integration guide',
    status: 'stopped',
    activeAgents: 0,
    totalAgents: 8,
    totalCalls: 167,
    successRate: 89,
    purpose: 'Follow-up',
    created: '2024-01-25'
  }
];

// Helper functions
function getStatusBadgeColorLive(status: string) {
  switch (status) {
    case 'connected': return 'bg-green-400 text-black';
    case 'ringing': return 'bg-blue-400 text-white';
    case 'on-hold': return 'bg-yellow-400 text-black';
    case 'transferring': return 'bg-purple-400 text-white';
    default: return 'bg-gray-400 text-black';
  }
}

function formatDuration(seconds: number): string {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins}:${secs.toString().padStart(2, '0')}`;
}


================================================
FILE: src/app/dashboard/customers/page.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  UilSearch,
  UilFilter,
  UilExport,
  UilPlus,
  UilEnvelope,
  UilPhone,
  UilCalendarAlt,
  UilEllipsisV,
  UilCheck
} from '@tooni/iconscout-unicons-react';

// Sample customer data
const customers = [
  { 
    id: 1, 
    name: 'John Smith', 
    email: 'john.smith@example.com', 
    phone: '+1 555-0123',
    status: 'active',
    orders: 45,
    spent: 12500,
    lastOrder: '2024-01-15',
    avatar: 'JS'
  },
  { 
    id: 2, 
    name: 'Sarah Johnson', 
    email: 'sarah.j@example.com', 
    phone: '+1 555-0124',
    status: 'active',
    orders: 23,
    spent: 8750,
    lastOrder: '2024-01-14',
    avatar: 'SJ'
  },
  { 
    id: 3, 
    name: 'Michael Chen', 
    email: 'mchen@example.com', 
    phone: '+1 555-0125',
    status: 'inactive',
    orders: 12,
    spent: 3200,
    lastOrder: '2023-12-20',
    avatar: 'MC'
  },
  { 
    id: 4, 
    name: 'Emma Davis', 
    email: 'emma.davis@example.com', 
    phone: '+1 555-0126',
    status: 'active',
    orders: 67,
    spent: 24300,
    lastOrder: '2024-01-16',
    avatar: 'ED'
  },
  { 
    id: 5, 
    name: 'Robert Wilson', 
    email: 'rwilson@example.com', 
    phone: '+1 555-0127',
    status: 'pending',
    orders: 5,
    spent: 1200,
    lastOrder: '2024-01-10',
    avatar: 'RW'
  },
];

export default function CustomersPage() {
  const [searchQuery, setSearchQuery] = React.useState('');
  const [selectedCustomers, setSelectedCustomers] = React.useState<number[]>([]);
  const [filterStatus, setFilterStatus] = React.useState('all');

  const filteredCustomers = React.useMemo(() => {
    return customers.filter(customer => {
      const matchesSearch = 
        customer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        customer.email.toLowerCase().includes(searchQuery.toLowerCase());
      const matchesFilter = filterStatus === 'all' || customer.status === filterStatus;
      return matchesSearch && matchesFilter;
    });
  }, [searchQuery, filterStatus]);

  const toggleCustomerSelection = (id: number) => {
    setSelectedCustomers(prev => 
      prev.includes(id) 
        ? prev.filter(cId => cId !== id)
        : [...prev, id]
    );
  };

  const selectAll = () => {
    if (selectedCustomers.length === filteredCustomers.length) {
      setSelectedCustomers([]);
    } else {
      setSelectedCustomers(filteredCustomers.map(c => c.id));
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-semibold">Customers</h1>
          <p className="text-gray-600">Manage your customer relationships</p>
        </div>
        <Button variant="default" className="font-bold uppercase">
          <UilPlus className="h-4 w-4 mr-2" />
          Add Customer
        </Button>
      </div>

      {/* Filters and Search */}
      <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
        <CardContent className="p-4">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1 relative">
              <UilSearch className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search customers..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-9 border-2 border-black focus:outline-none focus:ring-4 focus:ring-[rgb(0,82,255)] focus:ring-offset-2"
              />
            </div>
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="px-4 py-2 border-2 border-black font-bold focus:outline-none focus:ring-4 focus:ring-[rgb(0,82,255)] focus:ring-offset-2"
            >
              <option value="all">All Status</option>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
              <option value="pending">Pending</option>
            </select>
            <Button variant="neutral" className="font-bold uppercase">
              <UilFilter className="h-4 w-4 mr-2" />
              More Filters
            </Button>
            <Button variant="neutral" className="font-bold uppercase">
              <UilExport className="h-4 w-4 mr-2" />
              Export
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Customers Table */}
      <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
        <CardContent className="p-0">
          <table className="w-full">
            <thead>
              <tr className="border-b-4 border-black bg-gray-100">
                <th className="p-4 text-left">
                  <input
                    type="checkbox"
                    checked={selectedCustomers.length === filteredCustomers.length}
                    onChange={selectAll}
                    className="w-4 h-4 rounded border-2 border-black accent-[rgb(0,82,255)] focus:ring-4 focus:ring-[rgb(0,82,255)] focus:ring-offset-2"
                  />
                </th>
                <th className="p-4 text-left font-black text-black uppercase">Contact</th>
                <th className="p-4 text-left font-black text-black uppercase">Details</th>
                <th className="p-4 text-left font-black text-black uppercase">Status</th>
                <th className="p-4 text-left font-black text-black uppercase">Calls</th>
                <th className="p-4 text-left font-black text-black uppercase">Total Value</th>
                <th className="p-4 text-left font-black text-black uppercase">Last Call</th>
                <th className="p-4 text-left font-black text-black uppercase"></th>
              </tr>
            </thead>
            <tbody>
              {filteredCustomers.map((customer) => (
                <tr key={customer.id} className="border-b border-gray-50 hover:bg-gray-50">
                  <td className="p-4">
                    <input
                      type="checkbox"
                      checked={selectedCustomers.includes(customer.id)}
                      onChange={() => toggleCustomerSelection(customer.id)}
                      className="w-4 h-4 rounded border-gray-300"
                    />
                  </td>
                  <td className="p-4">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 bg-gray-200 flex items-center justify-center font-semibold text-sm">
                        {customer.avatar}
                      </div>
                      <span className="font-medium">{customer.name}</span>
                    </div>
                  </td>
                  <td className="p-4">
                    <div className="space-y-1">
                      <div className="flex items-center gap-2 text-sm">
                        <UilEnvelope className="h-3 w-3 text-gray-400" />
                        {customer.email}
                      </div>
                      <div className="flex items-center gap-2 text-sm text-gray-600">
                        <UilPhone className="h-3 w-3 text-gray-400" />
                        {customer.phone}
                      </div>
                    </div>
                  </td>
                  <td className="p-4">
                    <Badge 
                      variant={customer.status === 'active' ? 'default' : 'secondary'}
                      className={`rounded-[8px] ${
                        customer.status === 'active' ? 'bg-green-100 text-green-700' :
                        customer.status === 'inactive' ? 'bg-gray-100 text-gray-700' :
                        'bg-yellow-100 text-yellow-700'
                      }`}
                    >
                      {customer.status}
                    </Badge>
                  </td>
                  <td className="p-4">{customer.orders}</td>
                  <td className="p-4 font-medium">${customer.spent.toLocaleString()}</td>
                  <td className="p-4">
                    <div className="flex items-center gap-2 text-sm text-gray-600">
                      <UilCalendarAlt className="h-3 w-3" />
                      {customer.lastOrder}
                    </div>
                  </td>
                  <td className="p-4">
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                      <UilEllipsisV className="h-4 w-4" />
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </CardContent>
      </Card>

      {/* Selection Info */}
      {selectedCustomers.length > 0 && (
        <div className="fixed bottom-6 left-1/2 -translate-x-1/2 bg-black text-white px-6 py-3 shadow-[4px_4px_0_rgba(255,255,255,0.3)] border-2 border-white flex items-center gap-4">
          <span>{selectedCustomers.length} customers selected</span>
          <Button size="sm" variant="secondary" className="font-bold uppercase">
            Send Email
          </Button>
          <Button size="sm" variant="secondary" className="font-bold uppercase">
            Export
          </Button>
          <button
            onClick={() => setSelectedCustomers([])}
            className="ml-4 hover:text-gray-300"
          >
            <UilCheck className="h-4 w-4" />
          </button>
        </div>
      )}
    </div>
  );
}


================================================
FILE: src/app/dashboard/playground/page.tsx
================================================
'use client'

import { useState } from 'react'
import PlaygroundChatInterface from '@/components/custom/playground-chat-interface'
import PlaygroundSettingsPanel from '@/components/custom/playground-settings-panel'

export default function PlaygroundPage() {
  const [configuration, setConfiguration] = useState({
    model: 'Chatterbox (Open Source)',
    voice: 'Nova',
    language: 'English (United States)',
    systemPrompt: '',
    temperature: [0.7],
    maxTokens: [500],
    selectedRagWorkflows: [],
    voiceProvider: 'chatterbox',
    codeExecution: false,
    functionCalling: false,
    automaticFunction: false,
    groundingSearch: false,
    urlContext: false,
    relevanceThreshold: [0.7],
    maxResults: [5]
  })

  const [currentAgent, setCurrentAgent] = useState<any>(null)

  const handleConfigurationChange = (newConfig: any) => {
    setConfiguration(prev => ({ ...prev, ...newConfig }))
  }

  const handleAgentChange = (agent: any) => {
    setCurrentAgent(agent)
  }

  return (
    <div className="h-full overflow-y-auto flex bg-gray-50">
      {/* Main Chat Area */}
      <div className="flex-1">
        <PlaygroundChatInterface 
          currentConfiguration={configuration}
          onConfigurationChange={handleConfigurationChange}
          onAgentChange={handleAgentChange}
        />
      </div>
      
      {/* Settings Panel */}
      <PlaygroundSettingsPanel 
        configuration={configuration}
        onConfigurationChange={handleConfigurationChange}
        currentAgent={currentAgent}
      />
    </div>
  )
}


================================================
FILE: src/app/dashboard/settings/page.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { 
  UilSetting,
  UilKeySkeleton,
  UilBell,
  UilGlobe,
  UilDatabase,
  UilShield,
  UilSave,
  UilSync,
  UilExclamationTriangle
} from '@tooni/iconscout-unicons-react';

export default function SettingsPage() {
  const [apiKeys, setApiKeys] = React.useState({
    openai: '•••••••••••••••••••••',
    deepgram: '•••••••••••••••••••••',
    elevenlabs: '•••••••••••••••••••••',
    telnyx: '•••••••••••••••••••••'
  });

  const [showKey, setShowKey] = React.useState<string | null>(null);

  return (
    <div className="h-full overflow-y-auto space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-black uppercase">Settings</h1>
        <p className="text-gray-600 font-bold">Configure your voice agent platform</p>
      </div>

      {/* API Configuration */}
      <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
        <CardHeader className="border-b-4 border-black">
          <CardTitle className="text-xl font-black uppercase flex items-center gap-2">
            <UilKeySkeleton className="h-6 w-6" />
            API CONFIGURATION
          </CardTitle>
        </CardHeader>
        <CardContent className="pt-6 space-y-4">
          <div className="bg-yellow-100 border-2 border-black p-4 shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <div className="flex items-center gap-2 mb-2">
              <UilExclamationTriangle className="h-5 w-5" />
              <p className="font-black uppercase">Security Notice</p>
            </div>
            <p className="text-sm">API keys are encrypted and stored securely. Never share your keys publicly.</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {Object.entries(apiKeys).map(([service, key]) => (
              <div key={service} className="space-y-2">
                <label className="text-sm font-black uppercase">{service} API KEY</label>
                <div className="flex gap-2">
                  <Input
                    type={showKey === service ? "text" : "password"}
                    value={key}
                    onChange={(e) => setApiKeys(prev => ({ ...prev, [service]: e.target.value }))}
                    className="w-full px-4 py-2 border-2 border-black font-bold focus:outline-none focus:ring-4 focus:ring-[rgb(0,82,255)] focus:ring-offset-2"
                  />
                  <Button
                    variant="neutral"
                    onClick={() => setShowKey(showKey === service ? null : service)}
                    className="font-bold"
                  >
                    {showKey === service ? 'HIDE' : 'SHOW'}
                  </Button>
                </div>
              </div>
            ))}
          </div>

          <div className="flex justify-end pt-4">
            <Button 
              variant="default"
              className="font-black uppercase"
            >
              <UilSave className="h-4 w-4 mr-2" />
              SAVE API KEYS
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Voice Agent Defaults */}
      <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
        <CardHeader className="border-b-4 border-black">
          <CardTitle className="text-xl font-black uppercase flex items-center gap-2">
            <UilGlobe className="h-6 w-6" />
            VOICE AGENT DEFAULTS
          </CardTitle>
        </CardHeader>
        <CardContent className="pt-6 space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <label className="text-sm font-black uppercase">Default Language</label>
              <select 
                className="w-full px-4 py-2 border-2 border-black font-bold focus:outline-none focus:ring-4 focus:ring-[rgb(0,82,255)] focus:ring-offset-2"
              >
                <option>English (US)</option>
                <option>Spanish (MX)</option>
                <option>French (FR)</option>
                <option>German (DE)</option>
              </select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-black uppercase">Default Voice</label>
              <select 
                className="w-full px-4 py-2 border-2 border-black font-bold focus:outline-none focus:ring-4 focus:ring-[rgb(0,82,255)] focus:ring-offset-2"
              >
                <option>Professional</option>
                <option>Friendly</option>
                <option>Energetic</option>
                <option>Calm</option>
              </select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-black uppercase">Call Timeout (seconds)</label>
              <Input
                type="number"
                defaultValue="300"
                className="border-2 border-black font-bold focus:outline-none focus:ring-4 focus:ring-[rgb(0,82,255)] focus:ring-offset-2"
              />
            </div>

            <div className="space-y-2">
              <label className="text-sm font-black uppercase">Max Concurrent Calls</label>
              <Input
                type="number"
                defaultValue="10"
                className="border-2 border-black font-bold focus:outline-none focus:ring-4 focus:ring-[rgb(0,82,255)] focus:ring-offset-2"
              />
            </div>
          </div>

          <div className="flex justify-end pt-4">
            <Button 
              variant="default"
              className="font-black uppercase"
            >
              <UilSync className="h-4 w-4 mr-2" />
              UPDATE DEFAULTS
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Notifications */}
      <Card className="border-4 border-black rounded-[16px] shadow-[4px_4px_0_rgba(0,0,0,1)]">
        <CardHeader className="border-b-4 border-black">
          <CardTitle className="text-xl font-black uppercase flex items-center gap-2">
            <UilBell className="h-6 w-6" />
            NOTIFICATIONS
          </CardTitle>
        </CardHeader>
        <CardContent className="pt-6 space-y-4">
          {[
            { id: 'email', label: 'Email notifications for completed calls', checked: true },
            { id: 'sms', label: 'SMS alerts for failed calls', checked: false },
            { id: 'webhook', label: 'Webhook notifications for all events', checked: true },
            { id: 'daily', label: 'Daily performance summary', checked: true }
          ].map((notification) => (
            <label key={notification.id} className="flex items-center gap-3 cursor-pointer">
              <input
                type="checkbox"
                defaultChecked={notification.checked}
                className="w-5 h-5 rounded border-2 border-black accent-[rgb(0,82,255)] focus:ring-4 focus:ring-[rgb(0,82,255)] focus:ring-offset-2"
              />
              <span className="font-bold">{notification.label}</span>
            </label>
          ))}
        </CardContent>
      </Card>

      {/* Data Management */}
      <Card className="border-4 border-black rounded-[16px] shadow-[4px_4px_0_rgba(0,0,0,1)]">
        <CardHeader className="border-b-4 border-black">
          <CardTitle className="text-xl font-black uppercase flex items-center gap-2">
            <UilDatabase className="h-6 w-6" />
            DATA MANAGEMENT
          </CardTitle>
        </CardHeader>
        <CardContent className="pt-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card className="border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4 text-center">
                <UilDatabase className="h-8 w-8 mx-auto mb-2" />
                <p className="font-black uppercase mb-2">Export Data</p>
                <p className="text-sm text-gray-600 mb-4">Download all call data</p>
                <Button 
                  variant="neutral" 
                  className="w-full font-bold"
                >
                  EXPORT
                </Button>
              </CardContent>
            </Card>

            <Card className="border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4 text-center">
                <UilSync className="h-8 w-8 mx-auto mb-2" />
                <p className="font-black uppercase mb-2">Backup</p>
                <p className="text-sm text-gray-600 mb-4">Create system backup</p>
                <Button 
                  variant="neutral" 
                  className="w-full font-bold"
                >
                  BACKUP
                </Button>
              </CardContent>
            </Card>

            <Card className="border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] bg-red-50">
              <CardContent className="p-4 text-center">
                <UilExclamationTriangle className="h-8 w-8 mx-auto mb-2 text-red-500" />
                <p className="font-black uppercase mb-2">Clear Data</p>
                <p className="text-sm text-gray-600 mb-4">Delete all records</p>
                <Button 
                  variant="default"
                  className="w-full font-bold"
                >
                  CLEAR
                </Button>
              </CardContent>
            </Card>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function cn(...classes: string[]) {
  return classes.filter(Boolean).join(' ');
}


================================================
FILE: src/app/dashboard/swarms/page.tsx
================================================
'use client';

import * as React from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { 
  UilLayerGroup,
  UilPlus,
  UilRobot,
  UilUsersAlt,
  UilEdit,
  UilTrash,
  UilPhone,
  UilChart,
  UilClock,
  UilCheckCircle
} from '@tooni/iconscout-unicons-react';
import StatCard from '@/components/custom/stat-card';

interface Agent {
  id: string;
  name: string;
  type: string;
  status: 'active' | 'inactive' | 'training';
}

interface Swarm {
  id: string;
  name: string;
  description: string;
  agents: Agent[];
  purpose: string;
  totalCalls: number;
  successRate: number;
  created: string;
}

export default function SwarmsPage() {
  const router = useRouter();
  const [showCreateModal, setShowCreateModal] = React.useState(false);
  const [showDeleteModal, setShowDeleteModal] = React.useState(false);
  const [selectedSwarm, setSelectedSwarm] = React.useState<string | null>(null);
  const [swarmName, setSwarmName] = React.useState('');
  const [swarmDescription, setSwarmDescription] = React.useState('');
  const [swarmPurpose, setSwarmPurpose] = React.useState('');

  // Mock data for swarms
  const [swarms] = React.useState<Swarm[]>([
    {
      id: '1',
      name: 'SALES BATTALION',
      description: 'Elite cold calling agents focused on B2B outreach',
      agents: [
        { id: '1', name: 'Diala-Tone', type: 'Discovery Calls', status: 'active' },
        { id: '2', name: 'Echo-Diala', type: 'Discovery Calls', status: 'active' },
        { id: '3', name: 'Voice-Diala', type: 'Follow-ups', status: 'training' },
      ],
      purpose: 'Discovery',
      totalCalls: 1247,
      successRate: 68,
      created: '2024-01-15'
    },
    {
      id: '2',
      name: 'SUPPORT SQUAD',
      description: 'Customer support specialists handling inbound queries',
      agents: [
        { id: '4', name: 'Chat-Diala', type: 'Customer Support', status: 'active' },
        { id: '5', name: 'Diala-Belle', type: 'Technical Support', status: 'active' },
      ],
      purpose: 'Support',
      totalCalls: 892,
      successRate: 94,
      created: '2024-01-20'
    },
    {
      id: '3',
      name: 'APPOINTMENT ARMY',
      description: 'Dedicated to scheduling and managing appointments',
      agents: [
        { id: '6', name: 'Diala-Muse', type: 'Appointment Setter', status: 'active' },
      ],
      purpose: 'Appointment',
      totalCalls: 423,
      successRate: 82,
      created: '2024-01-01'
    }
  ]);

  // Mock available agents for assignment
  const availableAgents: Agent[] = [
    { id: '7', name: 'New-Diala', type: 'Unassigned', status: 'inactive' },
    { id: '8', name: 'Test-Diala', type: 'Unassigned', status: 'inactive' },
  ];

  const getStatusColor = (status: Agent['status']) => {
    switch (status) {
      case 'active': return 'bg-green-600';
      case 'inactive': return 'bg-gray-600';
      case 'training': return 'bg-orange-600';
    }
  };

  const getSwarmColor = (purpose: string, shade: '400' | '600' | '800') => {
    switch (purpose) {
      case 'Discovery': return `bg-purple-${shade}`;
      case 'Support': return `bg-green-${shade}`;
      case 'Appointment': return `bg-orange-${shade}`;
      default: return `bg-gray-${shade}`;
    }
  };

  const getAgentTypeColor = (type: string) => {
    if (type.includes('Discovery')) return 'bg-purple-600';
    if (type.includes('Support')) return 'bg-green-600';
    if (type.includes('Appointment')) return 'bg-orange-600';
    if (type.includes('Technical')) return 'bg-pink-600';
    return 'bg-gray-600';
  };

  return (
    <div className="h-full overflow-y-auto" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
      {/* Page Header */}
      <div className="mb-8">
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-4xl font-black uppercase text-black mb-2">AGENT SWARMS</h1>
            <p className="text-lg text-gray-600">Group your agents into powerful teams for coordinated campaigns</p>
          </div>
          <Button
            onClick={() => setShowCreateModal(true)}
            variant="default"
            size="lg"
            className="font-bold"
          >
            <UilPlus className="w-5 h-5 mr-2" />
            CREATE SWARM
          </Button>
        </div>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <StatCard
          title="Total Swarms"
          value={swarms.length}
          icon={<UilLayerGroup className="w-6 h-6 text-white" />}
          iconBgColor="bg-purple-600"
          bgGradient="from-purple-50 to-purple-100"
        />

        <StatCard
          title="Active Agents"
          value={swarms.reduce((acc, swarm) => acc + swarm.agents.filter(a => a.status === 'active').length, 0)}
          icon={<UilRobot className="w-6 h-6 text-white" />}
          iconBgColor="bg-green-600"
          bgGradient="from-green-50 to-green-100"
        />

        <StatCard
          title="Total Calls"
          value={swarms.reduce((acc, swarm) => acc + swarm.totalCalls, 0).toLocaleString()}
          icon={<UilPhone className="w-6 h-6 text-white" />}
          iconBgColor="bg-orange-600"
          bgGradient="from-orange-50 to-orange-100"
        />

        <StatCard
          title="Avg Success"
          value={`${Math.round(swarms.reduce((acc, swarm) => acc + swarm.successRate, 0) / swarms.length)}%`}
          icon={<UilChart className="w-6 h-6 text-white" />}
          iconBgColor="bg-pink-600"
          bgGradient="from-pink-50 to-pink-100"
        />
      </div>

      {/* Swarms Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
        {swarms.map((swarm, index) => (
          <Card 
            key={swarm.id} 
            className={`border-4 border-black shadow-[6px_6px_0_rgba(0,0,0,1)] hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all duration-200 bg-white transform ${index % 2 === 0 ? 'rotate-1' : '-rotate-1'} cursor-pointer`}
            onClick={() => router.push(`/dashboard/swarms/${swarm.id}`)}
          >
            <CardHeader className={`border-b-4 border-black ${getSwarmColor(swarm.purpose, '400')} relative overflow-hidden`}>
              <div className="absolute top-2 right-2 flex gap-2">
                <Button 
                  size="icon" 
                  variant="default"
                  className="w-8 h-8 bg-white border-2 border-black hover:bg-gray-100"
                  onClick={(e) => {
                    e.stopPropagation();
                    router.push(`/dashboard/swarms/${swarm.id}`);
                  }}
                >
                  <UilEdit className="w-4 h-4 text-black" />
                </Button>
                <Button 
                  size="icon" 
                  variant="default"
                  className="w-8 h-8 bg-white border-2 border-black hover:bg-gray-100"
                  onClick={(e) => {
                    e.stopPropagation();
                    setSelectedSwarm(swarm.id);
                    setShowDeleteModal(true);
                  }}
                >
                  <UilTrash className="w-4 h-4 text-black" />
                </Button>
              </div>
              <CardTitle className="text-2xl font-black uppercase text-white">{swarm.name}</CardTitle>
              <div className="flex items-center gap-2 mt-2">
                <Badge className={`border-2 border-black font-bold uppercase text-xs ${getSwarmColor(swarm.purpose, '600')} text-white`}>
                  {swarm.purpose}
                </Badge>
                <Badge className={`border-2 border-black font-bold uppercase text-xs ${getSwarmColor(swarm.purpose, '800')} text-white`}>
                  {swarm.agents.length} AGENTS
                </Badge>
              </div>
              <p className="text-white/90 text-sm mt-2">{swarm.description}</p>
              
              {/* Swarm Stats */}
              <div className="flex gap-4 mt-4">
                <div className="bg-white/20 backdrop-blur-sm border-2 border-white/50 px-3 py-1">
                  <p className="text-xs font-bold text-white/80">CALLS</p>
                  <p className="text-lg font-black text-white">{swarm.totalCalls}</p>
                </div>
                <div className="bg-white/20 backdrop-blur-sm border-2 border-white/50 px-3 py-1">
                  <p className="text-xs font-bold text-white/80">SUCCESS</p>
                  <p className="text-lg font-black text-white">{swarm.successRate}%</p>
                </div>
              </div>
            </CardHeader>
            
            <CardContent className="p-6 bg-gradient-to-br from-white to-gray-50">
              {/* Agents List */}
              <div className="space-y-3">
                <div className="flex items-center justify-between mb-2">
                  <p className="text-sm font-black uppercase text-gray-600">Agents ({swarm.agents.length})</p>
                  <Button
                    size="sm"
                    variant="neutral"
                    className="h-7 px-3 text-xs font-bold"
                  >
                    <UilPlus className="w-3 h-3 mr-1" />
                    ADD
                  </Button>
                </div>
                
                {swarm.agents.map((agent) => (
                  <div key={agent.id} className="flex items-center justify-between p-3 bg-gray-50 border-2 border-black">
                    <div className="flex items-center gap-3">
                      <div className={`w-2 h-2 ${getStatusColor(agent.status)} rounded-full ${agent.status === 'active' ? 'animate-pulse' : ''}`} />
                      <div>
                        <p className="font-bold text-sm">{agent.name}</p>
                        <p className="text-xs text-gray-600">{agent.type}</p>
                      </div>
                    </div>
                    <Badge 
                      variant="outline" 
                      className={`border-2 border-black font-bold uppercase text-xs ${getAgentTypeColor(agent.type)} text-white`}
                    >
                      {agent.status}
                    </Badge>
                  </div>
                ))}
              </div>

              {/* Created Date */}
              <div className="mt-4 pt-4 border-t-2 border-gray-200">
                <p className="text-xs text-gray-500 flex items-center gap-1">
                  <UilClock className="w-3 h-3" />
                  Created {new Date(swarm.created).toLocaleDateString()}
                </p>
              </div>
            </CardContent>
          </Card>
        ))}

        {/* Add New Swarm Card */}
        <Card 
          onClick={() => setShowCreateModal(true)}
          className="border-4 border-dashed border-gray-400 shadow-[4px_4px_0_rgba(0,0,0,0.3)] hover:shadow-[6px_6px_0_rgba(0,0,0,0.5)] hover:border-black transition-all duration-200 bg-gray-50 cursor-pointer group"
        >
          <CardContent className="h-full flex flex-col items-center justify-center p-8">
            <div className="w-20 h-20 bg-gray-200 border-4 border-gray-400 group-hover:border-black group-hover:bg-gray-300 rounded-full flex items-center justify-center mb-4 transition-all">
              <UilPlus className="w-10 h-10 text-gray-600 group-hover:text-black" />
            </div>
            <p className="text-xl font-black text-gray-600 group-hover:text-black uppercase">Create New Swarm</p>
            <p className="text-sm text-gray-500 mt-2 text-center">Group agents together for coordinated campaigns</p>
          </CardContent>
        </Card>
      </div>

      {/* Create Swarm Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <Card className="w-full max-w-2xl border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-white">
            <CardHeader className="border-b-4 border-black bg-[rgb(0,82,255)]">
              <CardTitle className="text-3xl font-black uppercase text-white">CREATE NEW SWARM</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-6">
                <div>
                  <label className="text-sm font-black uppercase text-gray-700 mb-2 block">Swarm Name</label>
                  <Input
                    value={swarmName}
                    onChange={(e) => setSwarmName(e.target.value)}
                    className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] text-lg font-bold h-12 focus:shadow-[6px_6px_0_rgba(0,0,0,1)] focus:outline-none focus:ring-0 transition-all duration-200"
                    placeholder="E.g., SALES BATTALION"
                  />
                  <p className="text-xs text-gray-500 mt-1">Choose a bold, memorable name for your agent team</p>
                </div>

                <div>
                  <label className="text-sm font-black uppercase text-gray-700 mb-2 block">Purpose Category</label>
                  <select
                    value={swarmPurpose}
                    onChange={(e) => setSwarmPurpose(e.target.value)}
                    className="w-full border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] text-lg font-bold h-12 bg-white px-3 focus:shadow-[6px_6px_0_rgba(0,0,0,1)] focus:outline-none focus:ring-0 transition-all duration-200"
                  >
                    <option value="">Select primary purpose...</option>
                    <option value="Discovery">Discovery - Cold calling & lead generation</option>
                    <option value="Support">Support - Customer service & technical help</option>
                    <option value="Appointment">Appointment - Scheduling & calendar management</option>
                    <option value="Follow-up">Follow-up - Nurturing & relationship building</option>
                    <option value="Qualification">Qualification - Lead scoring & validation</option>
                  </select>
                  <p className="text-xs text-gray-500 mt-1">Define the main objective for this swarm's operations</p>
                </div>
                
                <div>
                  <label className="text-sm font-black uppercase text-gray-700 mb-2 block">Detailed Description</label>
                  <Input
                    value={swarmDescription}
                    onChange={(e) => setSwarmDescription(e.target.value)}
                    className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] text-lg h-12 focus:shadow-[6px_6px_0_rgba(0,0,0,1)] focus:outline-none focus:ring-0 transition-all duration-200"
                    placeholder="E.g., Elite cold calling agents focused on B2B software outreach..."
                  />
                  <p className="text-xs text-gray-500 mt-1">Explain the specific tactics and target audience for this swarm</p>
                </div>

                <div>
                  <label className="text-sm font-black uppercase text-gray-700 mb-2 block">Available Agents</label>
                  <div className="space-y-2 max-h-40 overflow-y-auto">
                    {availableAgents.map((agent) => (
                      <div key={agent.id} className="flex items-center justify-between p-3 bg-gray-50 border-2 border-black hover:bg-gray-100 cursor-pointer">
                        <div className="flex items-center gap-3">
                          <input type="checkbox" className="w-4 h-4 border-2 border-black" />
                          <div>
                            <p className="font-bold text-sm">{agent.name}</p>
                            <p className="text-xs text-gray-600">{agent.type}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <div className="flex gap-4 mt-6">
                <Button
                  onClick={() => setShowCreateModal(false)}
                  variant="neutral"
                  size="lg"
                  className="flex-1 font-bold"
                >
                  CANCEL
                </Button>
                <Button
                  onClick={() => {
                    // Handle create swarm
                    setShowCreateModal(false);
                    setSwarmName('');
                    setSwarmDescription('');
                    setSwarmPurpose('');
                  }}
                  variant="default"
                  size="lg"
                  className="flex-1 font-bold"
                >
                  CREATE SWARM
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && selectedSwarm && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <Card className="w-full max-w-md border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-white">
            <CardHeader className="border-b-4 border-black bg-red-500">
              <CardTitle className="text-2xl font-black uppercase text-white">DELETE SWARM</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <p className="text-lg mb-6">
                Are you sure you want to delete <strong>{swarms.find(s => s.id === selectedSwarm)?.name}</strong>? This action cannot be undone.
              </p>
              <div className="flex gap-4">
                <Button
                  onClick={() => {
                    setShowDeleteModal(false);
                    setSelectedSwarm(null);
                  }}
                  variant="neutral"
                  size="lg"
                  className="flex-1 font-bold"
                >
                  CANCEL
                </Button>
                <Button
                  onClick={() => {
                    // Handle delete logic here
                    console.log('Deleting swarm:', selectedSwarm);
                    setShowDeleteModal(false);
                    setSelectedSwarm(null);
                  }}
                  variant="destructive"
                  size="lg"
                  className="flex-1 font-bold"
                >
                  DELETE SWARM
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}


================================================
FILE: src/app/dashboard/swarms/[id]/page.tsx
================================================
'use client';

import * as React from 'react';
import { useParams, useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { 
  UilArrowLeft,
  UilEdit,
  UilTrash, 
  UilPlus,
  UilRobot,
  UilPhone,
  UilChart,
  UilClock,
  UilCheckCircle,
  UilUsersAlt,
  UilPlay,
  UilPause,
  UilBooks,
  UilBrain,
  UilDatabase,
  UilMessage,
  UilStar,
  UilLock,
  UilAnalytics,
  UilMicrophone,
  UilHeadphones,
  UilBuilding,
  UilUser
} from '@tooni/iconscout-unicons-react';
import StatCard from '@/components/custom/stat-card';

interface Agent {
  id: string;
  name: string;
  type: string;
  status: 'active' | 'inactive' | 'training';
  systemPrompt: string;
  ragSources: string[];
  responseType: 'conversational' | 'direct' | 'empathetic' | 'aggressive';
  currentCalls: number;
  todayCalls: number;
  successRate: number;
  currentContact?: {
    name: string;
    company: string;
    duration: string;
  };
  premiumFeatures: {
    advancedAnalytics: boolean;
    customVoices: boolean;
    realTimeCoaching: boolean;
  };
}

interface Swarm {
  id: string;
  name: string;
  description: string;
  agents: Agent[];
  purpose: string;
  totalCalls: number;
  successRate: number;
  created: string;
}

export default function SwarmDetailPage() {
  const params = useParams();
  const router = useRouter();
  const [isEditing, setIsEditing] = React.useState(false);
  const [showDeleteModal, setShowDeleteModal] = React.useState(false);
  const [editName, setEditName] = React.useState('');
  const [editDescription, setEditDescription] = React.useState('');

  // Mock data - in real app this would come from API
  const [swarm, setSwarm] = React.useState<Swarm>({
    id: '1',
    name: 'SALES BATTALION',
    description: 'Elite cold calling agents focused on B2B outreach',
    agents: [
      { 
        id: '1', 
        name: 'Diala-Tone', 
        type: 'Discovery Calls', 
        status: 'active',
        systemPrompt: 'You are a professional B2B sales representative specializing in software discovery calls. Be consultative, ask qualifying questions, and focus on understanding pain points.',
        ragSources: ['B2B Sales Playbook', 'Product Documentation', 'Competitor Analysis'],
        responseType: 'conversational',
        currentCalls: 2,
        todayCalls: 24,
        successRate: 72,
        currentContact: {
          name: 'Sarah Johnson',
          company: 'TechCorp Inc',
          duration: '8:42'
        },
        premiumFeatures: {
          advancedAnalytics: true,
          customVoices: false,
          realTimeCoaching: false
        }
      },
      { 
        id: '2', 
        name: 'Echo-Diala', 
        type: 'Discovery Calls', 
        status: 'active',
        systemPrompt: 'You are an energetic sales agent focused on quickly qualifying leads and setting appointments. Be direct and goal-oriented.',
        ragSources: ['Sales Scripts', 'Objection Handling Guide', 'Lead Qualification Framework'],
        responseType: 'direct',
        currentCalls: 1,
        todayCalls: 18,
        successRate: 68,
        currentContact: {
          name: 'Mike Chen',
          company: 'StartupXYZ',
          duration: '12:15'
        },
        premiumFeatures: {
          advancedAnalytics: false,
          customVoices: true,
          realTimeCoaching: false
        }
      },
      { 
        id: '3', 
        name: 'Voice-Diala', 
        type: 'Follow-ups', 
        status: 'training',
        systemPrompt: 'You specialize in nurturing warm leads through thoughtful follow-up conversations. Be empathetic and relationship-focused.',
        ragSources: ['Follow-up Templates', 'Relationship Building Guide'],
        responseType: 'empathetic',
        currentCalls: 0,
        todayCalls: 6,
        successRate: 45,
        premiumFeatures: {
          advancedAnalytics: false,
          customVoices: false,
          realTimeCoaching: true
        }
      },
    ],
    purpose: 'Discovery',
    totalCalls: 1247,
    successRate: 68,
    created: '2024-01-15'
  });

  React.useEffect(() => {
    setEditName(swarm.name);
    setEditDescription(swarm.description);
  }, [swarm]);

  const getStatusColor = (status: Agent['status']) => {
    switch (status) {
      case 'active': return 'bg-green-600';
      case 'inactive': return 'bg-gray-600';
      case 'training': return 'bg-orange-600';
    }
  };

  const getStatusIcon = (status: Agent['status']) => {
    switch (status) {
      case 'active': return <UilPlay className="w-3 h-3" />;
      case 'inactive': return <UilPause className="w-3 h-3" />;
      case 'training': return <UilBooks className="w-3 h-3" />;
    }
  };

  const getResponseTypeColor = (type: string) => {
    switch (type) {
      case 'conversational': return 'bg-blue-500';
      case 'direct': return 'bg-orange-500';
      case 'empathetic': return 'bg-green-500';
      case 'aggressive': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  const getResponseTypeIcon = (type: string) => {
    switch (type) {
      case 'conversational': return <UilMessage className="w-3 h-3" />;
      case 'direct': return <UilChart className="w-3 h-3" />;
      case 'empathetic': return <UilHeadphones className="w-3 h-3" />;
      case 'aggressive': return <UilPhone className="w-3 h-3" />;
      default: return <UilMessage className="w-3 h-3" />;
    }
  };

  const getSwarmColor = (purpose: string, shade: '400' | '600' | '800') => {
    switch (purpose) {
      case 'Discovery': return `bg-purple-${shade}`;
      case 'Support': return `bg-green-${shade}`;
      case 'Appointment': return `bg-orange-${shade}`;
      default: return `bg-gray-${shade}`;
    }
  };

  const handleSave = () => {
    setSwarm(prev => ({
      ...prev,
      name: editName,
      description: editDescription
    }));
    setIsEditing(false);
  };

  const handleDelete = () => {
    // Handle delete logic here
    router.push('/dashboard/swarms');
  };

  return (
    <div className="h-full overflow-y-auto" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center gap-4 mb-4">
          <Button
            onClick={() => router.push('/dashboard/swarms')}
            variant="neutral"
            size="lg"
          >
            <UilArrowLeft className="w-5 h-5 mr-2" />
            BACK TO SWARMS
          </Button>
        </div>
        
        <div className="flex justify-between items-start">
          <div>
            {isEditing ? (
              <div className="space-y-4">
                <Input
                  value={editName}
                  onChange={(e) => setEditName(e.target.value)}
                  className="text-3xl font-black h-16 mb-2"
                />
                <Input
                  value={editDescription}
                  onChange={(e) => setEditDescription(e.target.value)}
                  className="text-lg h-12"
                />
              </div>
            ) : (
              <>
                <h1 className="text-4xl font-black uppercase text-black mb-2">{swarm.name}</h1>
                <p className="text-lg text-gray-600">{swarm.description}</p>
              </>
            )}
          </div>
          
          <div className="flex gap-3">
            {isEditing ? (
              <>
                <Button
                  onClick={() => setIsEditing(false)}
                  variant="neutral"
                  size="lg"
                >
                  CANCEL
                </Button>
                <Button
                  onClick={handleSave}
                  variant="default"
                  size="lg"
                >
                  SAVE CHANGES
                </Button>
              </>
            ) : (
              <>
                <Button
                  onClick={() => setIsEditing(true)}
                  variant="default"
                  size="lg"
                >
                  <UilEdit className="w-5 h-5 mr-2" />
                  EDIT SWARM
                </Button>
                <Button
                  onClick={() => setShowDeleteModal(true)}
                  variant="neutral"
                  size="lg"
                  className="bg-red-500"
                >
                  <UilTrash className="w-5 h-5 mr-2" />
                  DELETE
                </Button>
              </>
            )}
          </div>
        </div>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <StatCard
          title="Total Agents"
          value={swarm.agents.length}
          icon={<UilRobot className="w-6 h-6 text-white" />}
          iconBgColor="bg-purple-600"
          bgGradient="from-purple-50 to-purple-100"
        />

        <StatCard
          title="Active Agents"
          value={swarm.agents.filter(a => a.status === 'active').length}
          icon={<UilCheckCircle className="w-6 h-6 text-white" />}
          iconBgColor="bg-green-600"
          bgGradient="from-green-50 to-green-100"
        />

        <StatCard
          title="Total Calls"
          value={swarm.totalCalls.toLocaleString()}
          icon={<UilPhone className="w-6 h-6 text-white" />}
          iconBgColor="bg-orange-600"
          bgGradient="from-orange-50 to-orange-100"
        />

        <StatCard
          title="Success Rate"
          value={`${swarm.successRate}%`}
          icon={<UilChart className="w-6 h-6 text-white" />}
          iconBgColor="bg-pink-600"
          bgGradient="from-pink-50 to-pink-100"
        />
      </div>

      {/* Agents Section */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-black uppercase text-black">AGENT MANAGEMENT</h2>
          <Button variant="default" size="lg">
            <UilPlus className="w-5 h-5 mr-2" />
            ADD AGENT
          </Button>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {swarm.agents.map((agent) => (
            <Card key={agent.id} className="overflow-hidden">
              {/* Agent Header */}
              <CardHeader className={`border-b-4 border-black ${getSwarmColor(swarm.purpose, '400')} relative`}>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className={`w-4 h-4 ${getStatusColor(agent.status)} rounded-full ${agent.status === 'active' ? 'animate-pulse' : ''}`} />
                    <div>
                      <CardTitle className="text-xl font-black uppercase text-white">{agent.name}</CardTitle>
                      <p className="text-white/80 text-sm">{agent.type}</p>
                    </div>
                  </div>
                  <Badge variant="outline" className="flex items-center gap-1 bg-white/20 border-white/50 text-white">
                    {getStatusIcon(agent.status)}
                    {agent.status.toUpperCase()}
                  </Badge>
                </div>
              </CardHeader>

                <CardContent className="p-6 space-y-6">
                  {/* Current Activity */}
                  {agent.currentContact && (
                    <div className="bg-white border-2 border-black p-4">
                      <div className="flex items-center gap-2 mb-3">
                        <div className="bg-yellow-400 border-2 border-black p-1">
                          <UilPhone className="w-4 h-4 text-black" />
                        </div>
                        <p className="text-sm font-black uppercase text-black">ON CALL</p>
                      </div>
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-black text-black">{agent.currentContact.name}</p>
                          <p className="text-sm text-gray-600">{agent.currentContact.company}</p>
                        </div>
                        <Badge className="bg-yellow-400 text-black border-2 border-black font-black">
                          {agent.currentContact.duration}
                        </Badge>
                      </div>
                    </div>
                  )}

                  {/* Stats */}
                  <div className="bg-white border-2 border-black p-4">
                    <p className="text-sm font-black uppercase text-black mb-3">PERFORMANCE</p>
                    <div className="grid grid-cols-3 gap-3">
                      <Button variant="neutral" className="h-auto p-3 flex-col">
                        <p className="text-xl font-black text-black">{agent.todayCalls}</p>
                        <p className="text-xs text-black uppercase font-black">TODAY</p>
                      </Button>
                      <Button variant="neutral" className="h-auto p-3 flex-col bg-yellow-400">
                        <p className="text-xl font-black text-black">{agent.currentCalls}</p>
                        <p className="text-xs text-black uppercase font-black">ACTIVE</p>
                      </Button>
                      <Button variant="neutral" className="h-auto p-3 flex-col">
                        <p className="text-xl font-black text-black">{agent.successRate}%</p>
                        <p className="text-xs text-black uppercase font-black">SUCCESS</p>
                      </Button>
                    </div>
                  </div>

                  {/* Configuration */}
                  <div className="bg-white border-2 border-black p-4">
                    <p className="text-sm font-black uppercase text-black mb-3">CONFIGURATION</p>
                    <div className="grid grid-cols-2 gap-3">
                      {/* Personality Button */}
                      <Button variant="neutral" className="h-auto p-3 flex-col items-start">
                        <div className="flex items-center gap-2 mb-1">
                          {getResponseTypeIcon(agent.responseType)}
                          <p className="text-xs font-black uppercase">PERSONALITY</p>
                        </div>
                        <p className="text-xs text-gray-600">{agent.responseType.toUpperCase()}</p>
                      </Button>
                      
                      {/* Training Data Buttons */}
                      {agent.ragSources.map((source, index) => (
                        <Button key={index} variant="neutral" className="h-auto p-3 flex-col items-start">
                          <div className="flex items-center gap-2 mb-1">
                            <UilBooks className="w-3 h-3" />
                            <p className="text-xs font-black uppercase">TRAINING</p>
                          </div>
                          <p className="text-xs text-gray-600 text-left">{source}</p>
                        </Button>
                      ))}
                    </div>
                  </div>

                  {/* System Instructions */}
                  <div className="bg-white border-2 border-black p-4">
                    <p className="text-sm font-black uppercase text-black mb-3">SYSTEM INSTRUCTIONS</p>
                    <div className="bg-gray-50 border-2 border-black p-3">
                      <p className="text-sm text-gray-700 leading-relaxed">{agent.systemPrompt}</p>
                    </div>
                  </div>

                  {/* Premium Features */}
                  <div>
                    <p className="text-xs font-black uppercase text-gray-600 mb-2">PREMIUM FEATURES</p>
                    <div className="flex flex-wrap gap-1">
                      <Badge className={agent.premiumFeatures.advancedAnalytics ? 'bg-yellow-400 text-black' : 'bg-gray-300 text-gray-600'}>
                        ANALYTICS
                      </Badge>
                      <Badge className={agent.premiumFeatures.customVoices ? 'bg-yellow-400 text-black' : 'bg-gray-300 text-gray-600'}>
                        VOICES
                      </Badge>
                      <Badge className={agent.premiumFeatures.realTimeCoaching ? 'bg-yellow-400 text-black' : 'bg-gray-300 text-gray-600'}>
                        COACHING
                      </Badge>
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex gap-3">
                    <Button size="sm" variant="neutral" className="flex-1 bg-orange-400">
                      <UilEdit className="w-3 h-3 mr-1" />
                      EDIT
                    </Button>
                    <Button size="sm" variant="neutral" className="flex-1 bg-red-500">
                      <UilTrash className="w-3 h-3 mr-1" />
                      REMOVE
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
        </div>
      </div>

      {/* Delete Confirmation Modal */}
      {showDeleteModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <Card className="w-full max-w-md border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-white">
            <CardHeader className="border-b-4 border-black bg-red-500">
              <CardTitle className="text-2xl font-black uppercase text-white">DELETE SWARM</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <p className="text-lg mb-6">
                Are you sure you want to delete <strong>{swarm.name}</strong>? This action cannot be undone.
              </p>
              <div className="flex gap-4">
                <Button
                  onClick={() => setShowDeleteModal(false)}
                  variant="neutral"
                  size="lg"
                  className="flex-1"
                >
                  CANCEL
                </Button>
                <Button
                  onClick={handleDelete}
                  variant="neutral"
                  size="lg"
                  className="flex-1 bg-red-500"
                >
                  DELETE SWARM
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}


================================================
FILE: src/app/onboarding/README.md
================================================
# Diala Onboarding Flow Documentation

This directory contains the complete onboarding flow implementation for the Diala voice agent platform. The onboarding system guides users through setting up various AI-powered features using a distinctive Neobrutalist/Memphis design system.

## Overview

The onboarding flow consists of multiple specialized workflows, each designed to help users configure different aspects of the Diala platform:

- **Voice Agent Creation** - Set up and manage AI voice agents
- **Campaign Management** - Create and launch outbound calling campaigns  
- **Lead Generation** - Hunt for prospects using multiple data sources
- **Knowledge Base Setup** - Build RAG systems from various content sources
- **Multi-Agent Coordination** - Deploy intelligent agent swarms
- **Audio Transcription** - Convert audio files to text with voice cloning
- **YouTube Transcript Processing** - Extract and process YouTube video transcripts
- **Voice Interface** - Access the main voice interaction system

## File Structure

```
onboarding/
├── agents/page.tsx          # AI agent management interface
├── calls/page.tsx           # Campaign creation workflow (6 steps)
├── hunter/page.tsx          # Lead generation workflow (6 steps) - Enhanced with real backend
├── rag/page.tsx            # Knowledge base creation (6 steps)
├── swarms/page.tsx         # Multi-agent coordination (6 steps)
├── transcribe/page.tsx     # Audio file transcription (2 steps) - NEW
├── transcripts/page.tsx    # YouTube transcript extraction (2 steps)
└── voice/page.tsx          # Voice interface wrapper
```

## Individual Page Analysis

### Agents Page (`/onboarding/agents`)

**Purpose**: Comprehensive AI agent management and creation interface

**Key Features**:
- **Agent Overview Dashboard**: Shows total agents, active agents, total calls, and average success rate
- **Agent Creation Form**: Multi-field form for creating new agents with:
  - Agent name and purpose definition
  - Language selection (English, Spanish, French, German)
  - Voice selection (Sarah, Michael, Emma, James)
  - Personality types (Discovery Calls, Customer Support, Appointment Setting, Custom)
  - Advanced settings (voice speed, response time sliders)
- **Agent Management**: View, edit, activate/deactivate, and delete existing agents
- **Mock Data**: Pre-populated with example agents (Sales Champion, Support Star)

**Design Elements**:
- Blue color scheme (rgb(0,82,255) background)
- Neobrutalist card design with heavy borders and shadows
- Interactive elements with hover effects and animations

### Calls Page (`/onboarding/calls`) 

**Purpose**: Complete campaign creation and management workflow

**6-Step Process**:

1. **Campaign Setup**: Define campaign name, type (Sales/Follow-up/Survey), and goals
2. **Agent Selection**: Choose from available AI agents for the campaign
3. **Target Audience**: Configure contact lists via:
   - CSV upload with contact validation
   - Existing leads from Hunter results
   - Manual phone number entry
4. **Call Configuration**: Advanced settings including:
   - Schedule configuration (start/end times, timezone)
   - Capacity limits (max calls per day)
   - Retry logic (attempts and delays)
   - Features (voicemail, call recording)
5. **Preview & Launch**: Review all settings and launch campaign
6. **Campaign Active**: Real-time progress tracking and campaign management

**Key Features**:
- **Progress Tracking**: Visual progress bar and status updates during launch
- **Verification Modal**: Email/phone verification before campaign launch
- **Premium Features**: Smart scheduling and optimization options
- **Real-time Stats**: Campaign performance metrics and analytics

**Design Elements**:
- Orange color scheme (orange-500 background)
- Step-by-step navigation with visual progress indicators
- Premium feature cards with upgrade prompts

### Hunter Page (`/onboarding/hunter`) - Enhanced with Real Backend

**Purpose**: Lead generation and prospecting workflow using multiple data sources with full backend integration

**6-Step Process**:

1. **Search Definition**: Define search objectives and select lead sources:
   - Web Search (available)
   - B2B Database (premium/locked)
   - Business Directories (premium/locked)
   - **Real-time Usage Display**: Shows current subscription tier and daily/monthly limits
2. **Search Criteria**: Configure targeting parameters:
   - Industry selection (Technology, Healthcare, Finance, etc.)
   - Geographic location
   - Company size (1-10, 11-50, 51-200, 201-1000, 1000+ employees)
   - Job titles (CEO, CTO, VP Sales, etc.)
   - Keywords (optional)
3. **Contact Preferences**: Choose data types to include:
   - Email addresses (verified business emails)
   - Phone numbers (direct dial and mobile)
   - LinkedIn integration (premium feature)
4. **Search Preview**: Review search parameters and estimated results with rate limit checks
5. **Search Progress**: Real-time search execution with actual backend processing and status polling
6. **Results Display**: Search completion with live data from Convex backend

**Enhanced Features**:
- **User Authentication**: Full Clerk integration for user management
- **Real Backend Integration**: Convex database operations for actual lead searches
- **Usage Tracking**: Live subscription tier display (Free/Premium/Enterprise)
- **Rate Limiting**: Real-time usage validation with search/lead limits
- **Live Data**: Actual search creation and progress polling from backend
- **Usage Statistics**: Daily searches and monthly lead usage with remaining quotas
- **Smart Validation**: Prevents searches when limits are exceeded

**Backend Integration**:
- **Convex Actions**: `createLeadSearch`, `getSearchStatus` for real operations
- **Convex Queries**: `getUserUsageStats` for live usage tracking
- **Search Polling**: 10-second intervals with 5-minute timeout for real-time updates
- **Error Handling**: Comprehensive error states and user feedback

**Design Elements**:
- Violet color scheme (violet-400 background)
- Source selection cards with locked/unlocked states
- Progress visualization for search stages
- Usage statistics cards with subscription tier badges

### RAG Page (`/onboarding/rag`)

**Purpose**: Knowledge base creation from various content sources for AI agent training

**6-Step Process**:

1. **Welcome**: Name collection using WelcomeCard component
2. **Source Selection**: Choose knowledge source type:
   - YouTube videos (channel/playlist URLs)
   - Documents (PDF, Word, text files)
   - Web pages (URL scraping)
   - Structured data (CSV, knowledge base files)
3. **Source Input**: Provide specific source details:
   - YouTube URLs with processing up to 100 videos
   - File upload with drag-and-drop interface
   - URL list input (up to 20 URLs)
4. **Processing Configuration**: Advanced settings with accordion interface:
   - Chunk size (256-1024 tokens)
   - Overlap settings (0 to chunk_size/4 words)
   - Embedding model selection (openai-ada)
   - Vector store configuration (pinecone)
5. **Processing Progress**: Real-time processing with 4-stage pipeline:
   - Content fetching
   - Text extraction
   - Embedding generation
   - Vector index building
6. **Completion**: Knowledge base ready with comprehensive statistics

**Key Features**:
- **Multi-format Support**: Videos, documents, web content, structured data
- **Advanced Configuration**: Customizable chunking and embedding parameters
- **Processing Pipeline**: Automated content extraction and indexing
- **Statistics Dashboard**: Processing metrics and knowledge base analytics

**Design Elements**:
- Yellow color scheme (yellow-400 background)
- Accordion interface for advanced settings
- Progress visualization with stage indicators

### Swarms Page (`/onboarding/swarms`)

**Purpose**: Multi-agent coordination system for deploying intelligent agent networks

**6-Step Process**:

1. **Swarm Definition**: Define swarm name and objectives for agent collaboration
2. **Workflow Templates**: Choose from pre-built collaboration patterns:
   - Sales Pipeline (Research → Qualify → Schedule → Follow-up)
   - Support Escalation (Triage → Resolve → Escalate → Analyze)
   - Lead Nurturing (Discover → Engage → Educate → Convert)
   - Custom Workflow (build your own)
3. **Agent Selection**: Choose from specialized agents (minimum 2 required):
   - Research Agent (information gathering)
   - Sales Agent (lead engagement)
   - Support Agent (customer service)
   - Scheduling Agent (calendar management)
   - Analytics Agent (performance analysis)
   - Coordinator Agent (workflow management)
4. **Swarm Configuration**: Advanced settings with tooltips:
   - Collaboration mode (Sequential/Parallel/Adaptive)
   - Max concurrent agents (2-10)
   - Communication protocol (Direct/Broadcast/Hierarchical)
   - Auto-scaling and performance optimization
   - Error handling strategies
5. **Review & Deploy**: Comprehensive swarm summary and deployment preparation
6. **Deployment**: Real-time deployment with progress tracking and final statistics

**Key Features**:
- **Template System**: Pre-configured workflows for common use cases
- **Agent Specialization**: Role-specific capabilities and training
- **Advanced Configuration**: Fine-tuned collaboration and communication settings
- **Deployment Infrastructure**: Global deployment with automatic failover
- **Premium Features**: Enterprise swarm capabilities and unlimited scaling

**Design Elements**:
- Cyan color scheme (cyan-500 background)
- Template selection cards with agent badges
- Tooltip system for complex configuration options

### Transcribe Page (`/onboarding/transcribe`) - NEW

**Purpose**: Audio file transcription service with voice cloning capabilities

**2-Step Process**:

1. **File Upload**: Audio file selection and upload:
   - **Drag-and-Drop Interface**: Interactive file drop zone with visual feedback
   - **Multi-format Support**: MP3, WAV, OGG, M4A, FLAC audio files
   - **File Validation**: Real-time format and size validation
   - **Upload Progress**: Visual progress tracking during file processing
   - **File Metadata**: Display of file name, size, and format

2. **Transcription & Actions**: Audio player and transcript processing:
   - **Audio Player**: Built-in HTML5 audio player for file playback
   - **Real-time Transcription**: Progress tracking with percentage completion
   - **Transcript Display**: Interactive text output with chunked formatting
   - **Action Grid**: 2x2 grid layout with specialized actions:
     - **Copy Transcript**: One-click clipboard functionality
     - **Voice Clone**: AI voice cloning from audio sample
     - **Bulk Process**: Batch transcription capabilities
     - **Chat with Diala**: Integration with AI chat system

**Key Features**:
- **Advanced File Handling**: Drag-and-drop with visual drag states and animations
- **Multiple Audio Formats**: Support for all major audio file types
- **Voice Cloning Integration**: Create AI voice models from uploaded audio
- **Professional Interface**: Clean, intuitive design for serious audio work
- **Progress Tracking**: Real-time feedback during transcription process
- **Interactive Transcript**: Chunked text display for easy reading and editing

**Technical Implementation**:
- **File Upload**: HTML5 FileReader API with drag-and-drop event handling
- **Audio Processing**: Web Audio API integration for playback
- **Progress Simulation**: Interval-based progress updates (placeholder for real API)
- **Modals Integration**: Voice cloning, bulk processing, and chat modals
- **Responsive Design**: Mobile-friendly layout with adaptive grid

**Design Elements**:
- **Blue Color Scheme**: Blue-500 background with matching accents
- **Audio-focused Icons**: Microphone, music note, and volume icons
- **Interactive Drop Zone**: Animated drag states with pulsing effects
- **2x2 Action Grid**: Organized button layout with hover transformations
- **Clean Typography**: Professional text hierarchy for audio transcription work

### Transcripts Page (`/onboarding/transcripts`)

**Purpose**: YouTube transcript extraction and processing tool

**2-Step Process**:

1. **URL Input**: YouTube URL entry with feature showcase:
   - Free transcript generation
   - Multi-language support (125+ languages)
   - One-click copy functionality
   - Translation capabilities
2. **Processing & Display**: Video player and transcript interaction:
   - Embedded YouTube player
   - Real-time transcript fetching with job polling
   - Interactive transcript with chunked display
   - Action buttons (Copy, Bulk Download, Chat with Diala)
   - Social sharing integration

**Key Features**:
- **Free Service**: No cost transcript generation
- **Multi-language**: Support for 125+ languages with translation
- **Real-time Processing**: Job-based processing with status polling
- **Interactive Interface**: Chunked transcript display with hover effects
- **Integration Options**: Bulk download and Diala chat integration
- **Social Features**: Like, subscribe, and sharing buttons

**Design Elements**:
- Red color scheme (red-500 background)
- YouTube branding integration
- Social media button stack
- Video player embedding with responsive design

### Voice Page (`/onboarding/voice`)

**Purpose**: Simple wrapper for the main voice interface application

**Implementation**:
- Minimal wrapper component that renders the main `App` component
- Centered layout with responsive design
- Direct integration with the core voice interface system

**Design Elements**:
- Clean, minimal layout
- Full-width responsive container
- Integration point for the main application

## Technical Implementation Details

### Common Design Patterns

**Neobrutalist/Memphis Design System**:
- **Heavy Borders**: 3-4px black borders on all major elements
- **Bold Shadows**: Box-shadow effects with offset positioning
- **Vibrant Colors**: High-contrast color palette (pink, yellow, cyan, violet, orange, red, blue)
- **Geometric Elements**: Rotated cards and decorative shapes
- **Typography**: Noyh-Bold font family with uppercase text styling

**Component Architecture**:
- **Step-based Navigation**: Most flows use multi-step progression
- **Progress Indicators**: Visual step tracking and completion states
- **Modal Integration**: Verification and configuration modals
- **Responsive Design**: Mobile-first approach with breakpoint handling

**State Management**:
- **React Hooks**: useState for local component state
- **Convex Integration**: useAction and useQuery hooks for backend operations
- **Authentication**: Clerk integration for user management and session handling
- **Real-time Updates**: Polling mechanisms for job status tracking
- **Form Validation**: Client-side validation with disabled states
- **File Handling**: HTML5 FileReader API for drag-and-drop functionality

**Backend Integration**:
- **Real Database Operations**: Live data persistence and retrieval via Convex
- **Usage Tracking**: Subscription tier management and rate limiting
- **Job Processing**: Asynchronous task handling with progress updates
- **Error Handling**: Comprehensive error states and user feedback systems

### Common Components Used

- **UI Components**: Card, Button, Input, Badge, Slider, Switch, Select
- **Custom Components**: OnboardingNav, PremiumFeatureCard, VerificationModal
- **Modal Components**: Voice cloning, bulk processing, and chat integration modals
- **Icons**: Iconscout Unicons React library for consistent iconography
- **Navigation**: Step-based progression with back/continue buttons
- **File Upload**: Drag-and-drop zones with visual feedback and validation

### Premium Feature Integration

Most workflows include premium feature cards that showcase:
- Advanced capabilities available with upgrades
- Feature comparison between basic and premium plans
- Upgrade prompts and pricing information
- Feature locking with visual indicators

## User Flow Summary

### Primary Onboarding Paths

1. **Voice Agent Setup** → Agents → Voice → Calls (agent creation to campaign deployment)
2. **Lead Generation** → Hunter → Calls (prospect discovery to outreach with real backend)
3. **Knowledge Enhancement** → RAG → Agents (content ingestion to smarter agents)
4. **Scale Operations** → Swarms → Calls (multi-agent deployment to campaign execution)
5. **Audio Content Processing** → Transcribe → Voice Cloning → Agents (audio transcription to voice modeling)
6. **Video Content Processing** → Transcripts → RAG (YouTube content extraction to knowledge base)

### Cross-workflow Integration

- **Agent Reuse**: Agents created in the Agents flow are available in Calls and Swarms
- **Lead Integration**: Hunter results feed directly into Calls workflows with real backend data
- **Knowledge Sharing**: RAG knowledge bases enhance all agent capabilities
- **Voice Cloning**: Audio transcriptions can generate custom voice models for agents
- **Content Pipeline**: Audio/video content flows through transcription to knowledge bases
- **Swarm Coordination**: Multi-agent setups can be used across all campaign types
- **Usage Tracking**: Real-time subscription and rate limiting across all premium features

### Verification and Launch Patterns

Most workflows include:
1. **Configuration Phase**: Step-by-step setup with validation
2. **Review Phase**: Comprehensive settings summary
3. **Verification Phase**: Email/phone verification modal
4. **Launch Phase**: Real-time progress tracking
5. **Completion Phase**: Success confirmation with next steps

This comprehensive onboarding system provides users with multiple entry points and workflow options while maintaining consistent design patterns and user experience throughout the platform.


================================================
FILE: src/app/onboarding/ONBOARDING_RULES.md
================================================
# Onboarding Pages Implementation Rules

This document defines the specific patterns and rules for creating multi-step onboarding pages based on the established patterns in the calls onboarding page.

## Page Structure

### 1. Background and Container
```tsx
<div 
  className="min-h-screen bg-orange-500 relative pb-8" 
  style={{ 
    fontFamily: 'Noyh-Bold, sans-serif',
    backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
    backgroundSize: '60px 60px'
  }}
>
  <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
    <div className="w-full max-w-4xl space-y-8">
      {/* Content goes here */}
    </div>
  </div>
</div>
```

### 2. Persistent Title Card
The title card remains visible throughout all steps with dynamic content:

```tsx
<Card className="transform rotate-1 relative overflow-hidden">
  <CardHeader className="relative">
    {/* Decorative elements */}
    <div className="absolute top-2 left-4 w-8 h-8 bg-orange-600 border-2 border-black flex items-center justify-center">
      <UilPhone className="h-4 w-4 text-white" />
    </div>
    <div className="absolute top-2 right-4 w-8 h-8 bg-orange-500 border-2 border-black flex items-center justify-center">
      <UilPhoneVolume className="h-4 w-4 text-white" />
    </div>
    <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
      <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
    </div>
    <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
    
    {/* Central icon button */}
    <div className="flex justify-center mb-4">
      <Button className="w-20 h-20 bg-orange-600 hover:bg-orange-700 border-4 border-black p-0">
        {currentStep === 1 && <UilBriefcase className="h-12 w-12 text-white" />}
        {/* Add icons for other steps */}
      </Button>
    </div>
    
    {/* Dynamic title */}
    <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
      {currentStep === 1 && 'STEP ONE TITLE'}
      {/* Add titles for other steps */}
    </CardTitle>
    
    {/* Subtitle */}
    <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
      {currentStep === 1 && 'STEP ONE SUBTITLE'}
    </p>
    
    {/* Animated decorative bars */}
    <div className="flex justify-center items-center mt-3 gap-2">
      <div className="w-3 h-3 bg-orange-600 animate-pulse"></div>
      <div className="w-2 h-6 bg-black"></div>
      <div className="w-4 h-4 bg-orange-500 animate-pulse delay-150"></div>
      <div className="w-2 h-8 bg-black"></div>
      <div className="w-3 h-3 bg-orange-600 animate-pulse delay-300"></div>
    </div>
  </CardHeader>
</Card>
```

## Dev Mode Autofill Button

### Overview
A sticky development mode toggle that automatically populates form fields with realistic test data for faster development and testing.

### Implementation Pattern (from hunter/page.tsx)
```tsx
// State management
const [devMode, setDevMode] = React.useState(false);

// Auto-fill effect
React.useEffect(() => {
  if (devMode) {
    setSearchName('Belfast Roofing Contractors Q4');
    setSearchObjective('Finding roofing contractors and construction companies in Belfast area for partnership opportunities');
    setSelectedSources(['web']);
    setSearchCriteria({
      industry: 'Other',
      location: 'Belfast, Northern Ireland',
      companySize: '1-10',
      jobTitles: ['Business Owner', 'Operations Manager'],
      keywords: 'roofing, roof repair, slate, tiles, guttering, Belfast'
    });
    setCustomIndustry('Roofing & Construction');
    setContactPreferences({
      includeEmails: true,
      includePhones: true,
      includeLinkedIn: false
    });
    setValidationCriteria({
      mustHaveWebsite: true,
      mustHaveContactInfo: true,
      mustHaveSpecificKeywords: ['roofing', 'contractor', 'Belfast'],
      mustBeInIndustry: true,
      customValidationRules: 'Must offer residential or commercial roofing services'
    });
  }
}, [devMode]);
```

### Component Implementation (from hunter/page.tsx)
```tsx
{process.env.NODE_ENV === 'development' && (
  <div className="fixed top-4 right-4 z-50">
    <Button
      onClick={() => setDevMode(!devMode)}
      className={`h-10 px-4 text-sm font-black uppercase ${
        devMode
          ? 'bg-green-500 hover:bg-green-600 text-white'
          : 'bg-gray-200 hover:bg-gray-300 text-black'
      } border-2 border-black`}
    >
      DEV MODE {devMode ? 'ON' : 'OFF'}
    </Button>
  </div>
)}
```

### Styling Rules
- **Position**: `fixed top-4 right-4 z-50`
- **Visual State**: Green when active, gray when inactive
- **Size**: `h-10 px-4 text-sm`
- **Border**: `border-2 border-black`
- **Z-index**: `z-50` to ensure visibility above all content
- **Environment Check**: `process.env.NODE_ENV === 'development'`
- **Toggle Behavior**: Click to enable/disable auto-fill
- **Font**: `font-black uppercase text-sm`

### Data Patterns by Page Type

#### Hunter Onboarding (Lead Generation)
```tsx
// Search Definition
searchName: 'Belfast Roofing Contractors Q4',
searchObjective: 'Finding roofing contractors and construction companies in Belfast area for partnership opportunities',
selectedSources: ['web'],
searchCriteria: {
  industry: 'Other',
  location: 'Belfast, Northern Ireland',
  companySize: '1-10',
  jobTitles: ['Business Owner', 'Operations Manager'],
  keywords: 'roofing, roof repair, slate, tiles, guttering, Belfast'
},
customIndustry: 'Roofing & Construction'
```

#### Voice Agents
```tsx
agentName: 'Sarah - Sales Assistant',
description: 'Professional sales agent for B2B software outreach',
purpose: 'sales',
voiceProvider: 'elevenlabs',
voiceId: 'pNInz6obpgDQGcFmaJgB',
voiceStyle: 'professional',
systemPrompt: 'You are Sarah, a professional sales assistant...'
```

#### RAG Workflows
```tsx
workflowName: 'Tech Startup Documentation',
description: 'Knowledge base for tech startup documentation and FAQs',
sourceType: 'mixed',
embeddingModel: 'jina-clip-v2',
chunkSize: 512,
chunkOverlap: 50
```

### Best Practices
1. **Environment Check**: Only show in development mode
2. **Realistic Data**: Use actual business scenarios
3. **Complete Coverage**: Populate all required fields
4. **Contextual**: Tailor data to the specific onboarding flow
5. **Toggle Behavior**: Click to enable/disable auto-fill
6. **Visual Feedback**: Clear on/off states with color coding

### Integration Steps
1. Add `devMode` state to your component
2. Create the sticky button with environment check
3. Implement the auto-fill effect with realistic data
4. Ensure all form fields are populated correctly
5. Test toggle functionality in development

### Alternative Patterns
- **Floating Action Button**: Bottom-right corner for mobile
- **Keyboard Shortcut**: Add `Ctrl+D` or `Cmd+D` toggle
- **Context Menu**: Right-click to enable dev mode
- **Console Toggle**: `window.toggleDevMode()` for debugging

## Selection Cards with Star15

### Implementation Pattern
```tsx
<div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
  <div className="relative"> {/* IMPORTANT: No overflow-hidden */}
    {selectedItem === 'item-id' && (
      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" 
           style={{animation: 'overshoot 0.3s ease-out'}}>
        <div className="relative">
          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
            <Star15 color="#FFD700" size={80} 
                    className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" 
                    stroke="black" strokeWidth={8} />
          </div>
          <div className="absolute inset-0 flex items-center justify-center">
            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" 
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              SELECTED
            </span>
          </div>
        </div>
      </div>
    )}
    <Card 
      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
        selectedItem === 'item-id' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
      }`}
      onClick={() => setSelectedItem('item-id')}
    >
      <CardContent className="p-4 text-center">
        <UilIcon className="h-8 w-8 mx-auto mb-2" />
        <h4 className="font-black uppercase">ITEM TITLE</h4>
        <p className="text-sm text-gray-600">Item description</p>
      </CardContent>
    </Card>
  </div>
</div>
```

### Key Rules for Star15:
1. **NEVER** add `overflow-hidden` to the parent card wrapper
2. Use responsive positioning for the star (-top-8/-right-8 on mobile, scaling up)
3. Animation duration: 15s for spin, 0.3s delay
4. Overshoot animation on initial appearance
5. "SELECTED" text rotated 12 degrees inside the star

## Info/Tip Boxes

### Standard Info Box Pattern
```tsx
<Card className="bg-yellow-100 border-2 border-black mt-6">
  <CardContent className="p-4">
    <div className="flex items-start gap-3">
      <Button 
        size="sm" 
        variant="neutral" 
        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
      >
        <UilInfoCircle className="h-4 w-4" />
      </Button>
      <div>
        <p className="text-sm font-bold">INFO BOX TITLE</p>
        <p className="text-sm text-gray-700 mt-1">
          Helpful information or tips about the current step go here.
        </p>
      </div>
    </div>
  </CardContent>
</Card>
```

## Form Elements

### Input Fields
```tsx
<div>
  <label className="text-xl font-black uppercase mb-3 block">
    FIELD LABEL
  </label>
  <Input
    type="text"
    value={value}
    onChange={(e) => setValue(e.target.value)}
    placeholder="Placeholder text"
    className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
  />
</div>
```

### Textarea Fields
```tsx
<Textarea
  value={value}
  onChange={(e) => setValue(e.target.value)}
  placeholder="Placeholder text"
  className="min-h-[120px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
/>
```

## File Upload Pattern

### CSV Upload Card Implementation
Used for uploading contact lists, data files, or any bulk import functionality.

```tsx
{targetListType === 'upload' && (
  <Card className="bg-orange-50 border-4 border-black">
    <CardContent className="p-8">
      <div className="border-4 border-dashed border-black rounded-lg p-8 text-center bg-white">
        <input
          type="file"
          accept=".csv"
          onChange={handleFileUpload}
          className="hidden"
          id="csv-upload"
        />
        <label htmlFor="csv-upload" className="cursor-pointer">
          <Button size="icon" variant="header" className="w-16 h-16 mb-4 bg-orange-500 hover:bg-orange-600">
            <UilUpload className="h-8 w-8 text-white" />
          </Button>
          <p className="text-lg font-bold">Click to upload CSV file</p>
          <p className="text-sm text-gray-600 mt-2">Format: Name, Phone Number, Company (optional)</p>
        </label>
      </div>
      {uploadedFile && (
        <div className="mt-4 p-4 bg-green-50 border-2 border-black rounded">
          <p className="font-bold">✓ {uploadedFile.name} uploaded</p>
          <p className="text-sm text-gray-600">Estimated contacts: {estimatedContacts}</p>
        </div>
      )}
    </CardContent>
  </Card>
)}
```

### File Upload Handler
```tsx
const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
  if (e.target.files && e.target.files[0]) {
    setUploadedFile(e.target.files[0]);
    // Process file or update contact count
    setEstimatedContacts(Math.floor(Math.random() * 500) + 100);
  }
};
```

## Navigation Controls

### Standard Navigation Layout
```tsx
<div className="flex gap-4 mt-8">
  <Button
    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
    onClick={() => setCurrentStep(currentStep - 1)}
  >
    <UilArrowLeft className="mr-2 h-6 w-6" />
    BACK
  </Button>
  <Button
    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
    onClick={() => setCurrentStep(currentStep + 1)}
    disabled={!canProceed()}
  >
    CONTINUE
    <UilArrowRight className="ml-2 h-6 w-6" />
  </Button>
</div>
```

## Color Schemes by Page Type

### Calls Page (Orange Theme)
- Background: `bg-orange-500`
- Primary buttons: `bg-orange-600`
- Info cards: `bg-orange-50`
- Selection highlight: `bg-orange-100`

### Other Pages
- Agents: Blue theme (`bg-blue-500`)
- Hunter: Violet theme (`bg-violet-400`)
- RAG: Cyan theme (`bg-cyan-400`)
- Transcribe: Blue theme (`bg-blue-500`)
- Voice: Pink theme (`bg-pink-500`)

## Important Implementation Notes

1. **Font Family**: Always include `style={{ fontFamily: 'Noyh-Bold, sans-serif' }}` on the root container
2. **Grid Pattern**: Use the specified background image with 60px x 60px grid
3. **Uppercase Text**: All headings and button text should be uppercase
4. **Bold Weights**: Use `font-black` for headings, `font-bold` for emphasis
5. **Shadow Pattern**: Consistent shadow usage (e.g., `shadow-[6px_6px_0_rgba(0,0,0,1)]`)
6. **Border Width**: 4px borders for main elements, 2px for secondary
7. **Transform Effects**: Use rotation (-1 or 1 degree) for Neobrutalist style
8. **Responsive Breakpoints**: Use sm/md prefixes for responsive design
9. **Step Content**: Wrap each step in a single Card, avoid nested cards
10. **Selection UI**: Use grid layouts with cards for selections, not dropdowns
11. **Info Boxes**: Keep them simple with yellow background and minimal decoration
12. **Clean Design**: Focus on functionality over excessive decoration
13. **Dev Mode**: Always include the sticky dev mode toggle for development
14. **Realistic Data**: Use actual business scenarios in dev mode auto-fill


================================================
FILE: src/app/onboarding/blog/page.tsx
================================================
'use client';

import * as React from 'react';
import Link from 'next/link';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  UilBook,
  UilClock,
  UilUser,
  UilArrowRight,
  UilFire,
  UilStar,
  UilBookOpen,
  UilApps,
  UilRocket,
  UilChart,
  UilMicrophone,
  UilBrain
} from '@tooni/iconscout-unicons-react';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { Star15 } from '@/components/ui/star';

interface BlogPost {
  id: string;
  title: string;
  excerpt: string;
  author: string;
  readTime: string;
  category: string;
  featured: boolean;
  date: string;
  content: string;
}

const mockBlogPosts: BlogPost[] = [
  {
    id: '1',
    title: 'HOW TO BUILD YOUR FIRST AI VOICE AGENT',
    excerpt: 'Learn the fundamentals of creating conversational AI agents that can handle complex business interactions.',
    author: 'Sarah Chen',
    readTime: '5 min read',
    category: 'Getting Started',
    featured: true,
    date: 'January 15, 2024',
    content: `<p>Hey creator,</p><p><strong>Welcome to the world of AI voice agents!</strong></p><p>Building your first AI voice agent might seem daunting, but with the right approach, you'll have a working conversational AI up and running in no time.</p><h3><strong>What you'll need</strong></h3><ul><li><p><strong>Voice recognition:</strong> Choose between cloud-based (Google Speech-to-Text, AWS Transcribe) or on-premise solutions</p></li><li><p><strong>Natural Language Processing:</strong> OpenAI GPT-4, Claude, or open-source alternatives like Llama</p></li><li><p><strong>Text-to-Speech:</strong> ElevenLabs, Azure Cognitive Services, or our own Chatterbox TTS</p></li><li><p><strong>Integration platform:</strong> Webhook endpoints, real-time communication protocols</p></li></ul><h3><strong>Building blocks</strong></h3><ul><li><p>Set up speech recognition pipeline with proper audio preprocessing</p></li><li><p>Design conversation flows and handle context switching</p></li><li><p>Implement error handling and fallback responses</p></li><li><p>Test with real users and iterate based on feedback</p></li></ul><h3><strong>Pro tips for success</strong></h3><p>Consider these essential aspects:</p><ul><li><p>Keep conversations natural and flowing</p></li><li><p>Handle interruptions gracefully</p></li><li><p>Maintain conversation context across multiple turns</p></li><li><p>Implement proper latency optimization</p></li><li><p>Plan for scalability from day one</p></li></ul><p>The key is starting simple and iterating quickly. Don't try to build the perfect agent on your first attempt!</p><p>Happy building,</p><p>Sarah Chen</p><hr contenteditable="false"><p><strong>Resources:</strong></p><ul><li><p>Diala Platform Documentation</p></li><li><p>Voice Agent Best Practices Guide</p></li></ul>`
  },
  {
    id: '2',
    title: 'MAXIMIZING COLD CALL SUCCESS WITH AI',
    excerpt: 'Discover proven strategies for using AI voice agents to improve your outbound sales performance.',
    author: 'Mike Rodriguez',
    readTime: '8 min read',
    category: 'Sales',
    featured: false,
    date: 'January 12, 2024',
    content: `<p>Sales professional,</p><p><strong>AI is revolutionizing cold calling, and here's how you can leverage it.</strong></p><p>After implementing AI voice agents across 500+ sales teams, we've identified the strategies that consistently deliver 3x better conversion rates.</p><h3><strong>The AI advantage</strong></h3><ul><li><p><strong>24/7 availability:</strong> Your AI agents never sleep, maximizing contact opportunities</p></li><li><p><strong>Consistent messaging:</strong> Every call delivers your perfect pitch</p></li><li><p><strong>Instant qualification:</strong> AI pre-qualifies leads before human handoff</p></li><li><p><strong>Data-driven optimization:</strong> Real-time analysis improves performance continuously</p></li></ul><h3><strong>Implementation strategy</strong></h3><ul><li><p>Start with simple qualification calls</p></li><li><p>Train AI on your top performer's conversations</p></li><li><p>Set clear handoff triggers for human intervention</p></li><li><p>Monitor and optimize conversation flows weekly</p></li></ul><h3><strong>Measuring success</strong></h3><p>Track these key metrics:</p><ul><li><p>Contact rate improvements (typically 40-60% increase)</p></li><li><p>Qualification accuracy (aim for 85%+ precision)</p></li><li><p>Conversion to human agent (optimize for quality handoffs)</p></li><li><p>Overall pipeline velocity improvements</p></li></ul><p>Remember: AI doesn't replace human sales skills – it amplifies them by handling routine tasks and providing better qualified opportunities.</p><p>Keep selling,</p><p>Mike Rodriguez</p>`
  },
  {
    id: '3',
    title: 'VOICE CLONING BEST PRACTICES',
    excerpt: 'Essential tips for creating natural-sounding voice clones that maintain authenticity and engagement.',
    author: 'Lisa Park',
    readTime: '6 min read',
    category: 'Voice Technology',
    featured: false,
    date: 'January 10, 2024',
    content: `<p>Audio engineer,</p><p><strong>Creating authentic voice clones requires both technical precision and artistic sensibility.</strong></p><p>After producing voice clones for hundreds of creators, here are the non-negotiable best practices that separate amateur attempts from professional results.</p><h3><strong>Recording requirements</strong></h3><ul><li><p><strong>Clean audio:</strong> Record in a treated room with minimal background noise</p></li><li><p><strong>Consistent levels:</strong> Maintain steady volume throughout your session</p></li><li><p><strong>Natural delivery:</strong> Speak conversationally, avoid over-articulation</p></li><li><p><strong>Sufficient data:</strong> Provide 15-30 minutes of varied content</p></li></ul><h3><strong>Content strategy</strong></h3><ul><li><p>Include emotional range: happy, serious, questioning tones</p></li><li><p>Cover common business scenarios and vocabulary</p></li><li><p>Record phonetically diverse content</p></li><li><p>Include natural pauses and speech patterns</p></li></ul><h3><strong>Technical optimization</strong></h3><p>For best results:</p><ul><li><p>Use 48kHz/24-bit recording quality minimum</p></li><li><p>Apply gentle noise reduction if needed</p></li><li><p>Normalize audio levels consistently</p></li><li><p>Remove mouth sounds and breathing artifacts</p></li><li><p>Split into 10-30 second segments for training</p></li></ul><p>The goal isn't perfection – it's authenticity. Your voice clone should sound like you on your best day, not like a robot trying to be you.</p><p>Keep it real,</p><p>Lisa Park</p>`
  },
  {
    id: '4',
    title: 'INTEGRATING RAG FOR SMARTER AGENTS',
    excerpt: 'How to leverage Retrieval-Augmented Generation to create more knowledgeable and context-aware agents.',
    author: 'David Kim',
    readTime: '10 min read',
    category: 'Advanced',
    featured: false,
    date: 'January 8, 2024',
    content: `<p>AI developer,</p><p><strong>RAG transforms static AI agents into dynamic, knowledge-powered assistants.</strong></p><p>Implementing Retrieval-Augmented Generation correctly can increase your agent's accuracy by 75% while reducing hallucinations to near-zero levels.</p><h3><strong>RAG fundamentals</strong></h3><ul><li><p><strong>Vector databases:</strong> Store and retrieve relevant context efficiently</p></li><li><p><strong>Embedding models:</strong> Convert text into searchable vector representations</p></li><li><p><strong>Retrieval strategies:</strong> Find the most relevant information for each query</p></li><li><p><strong>Context injection:</strong> Seamlessly integrate retrieved data into responses</p></li></ul><h3><strong>Implementation steps</strong></h3><ul><li><p>Choose your vector database (Pinecone, Weaviate, or Chroma)</p></li><li><p>Process and chunk your knowledge base effectively</p></li><li><p>Select appropriate embedding models for your domain</p></li><li><p>Implement semantic search with proper scoring</p></li><li><p>Design context windows for optimal performance</p></li></ul><h3><strong>Advanced techniques</strong></h3><p>Take your RAG system further:</p><ul><li><p><strong>Hybrid search:</strong> Combine semantic and keyword matching</p></li><li><p><strong>Reranking:</strong> Improve relevance with secondary scoring models</p></li><li><p><strong>Query expansion:</strong> Generate related search terms automatically</p></li><li><p><strong>Context compression:</strong> Fit more relevant information in token limits</p></li><li><p><strong>Multi-hop reasoning:</strong> Chain multiple retrievals for complex queries</p></li></ul><h3><strong>Performance optimization</strong></h3><p>Monitor these key metrics:</p><ul><li><p>Retrieval precision and recall rates</p></li><li><p>Response accuracy improvements</p></li><li><p>Query latency (target under 500ms)</p></li><li><p>User satisfaction scores</p></li></ul><p>RAG isn't just about adding a database to your AI – it's about creating intelligent systems that know when and how to find the right information at the right time.</p><p>Build wisely,</p><p>David Kim</p>`
  }
];

export default function BlogPage() {
  const [selectedCategory, setSelectedCategory] = React.useState('all');
  const [selectedPost, setSelectedPost] = React.useState<string | null>(null);

  const categories = [
    { name: 'all', icon: UilApps },
    { name: 'Getting Started', icon: UilRocket },
    { name: 'Sales', icon: UilChart },
    { name: 'Voice Technology', icon: UilMicrophone },
    { name: 'Advanced', icon: UilBrain }
  ];

  const filteredPosts = selectedCategory === 'all' 
    ? mockBlogPosts 
    : mockBlogPosts.filter(post => post.category === selectedCategory);

  return (
    <div 
      className="min-h-screen bg-white relative" 
      style={{ 
        fontFamily: 'Noyh-Bold, sans-serif'
      }}
    >
      <div className="max-w-6xl mx-auto px-4 py-8">
        {/* Page Header */}
        <div className="text-center mb-12">
          <h1 className="text-6xl md:text-7xl font-black uppercase text-black mb-4">
            DIALA BLOG
          </h1>
          <p className="text-xl text-gray-700 font-bold max-w-2xl mx-auto">
            Learn from experts and level up your AI voice game
          </p>
        </div>


        {/* Featured Post - Most Recent */}
        <div className="mb-12 flex gap-8">
          <div className="w-2/3">
            {mockBlogPosts.slice(0, 1).map((post) => (
              <Link key={post.id} href={`/onboarding/blog/${post.id}`}>
                <Card 
                  className="border-4 border-black shadow-[6px_6px_0_rgba(0,0,0,1)] hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all cursor-pointer"
                >
                <div className="h-full border-b-4 border-black relative overflow-hidden bg-yellow-400">
                  <img 
                    src="/424f35f4c6837cba6f15.webp" 
                    alt="AI Voice Agents for Small Business"
                    className="w-full h-full object-cover"
                  />
                </div>
                <CardContent className="p-8">
                  <h2 className="text-3xl md:text-4xl font-black uppercase text-black mb-4 leading-tight">
                    {post.title}
                  </h2>
                  <span className="font-bold text-lg">{post.author}</span>
                </CardContent>
                </Card>
              </Link>
            ))}
          </div>
          
          {/* Recent Posts Titles */}
          <div className="w-1/3 space-y-4">
            {mockBlogPosts.slice(1, 6).map((post, index) => (
              <Link key={post.id} href={`/onboarding/blog/${post.id}`}>
                <div 
                  className="px-4 pt-4 pb-2 cursor-pointer border-b-2 border-black hover:bg-gray-50 transition-colors"
                >
                <h4 className="font-black uppercase text-2xl leading-tight">{post.title}</h4>
                <div className="flex items-center gap-3 mt-3">
                  <span className="text-base text-gray-600">{post.author}</span>
                </div>
                </div>
              </Link>
            ))}
          </div>
        </div>

        {/* Blog Posts Grid - Remaining Posts */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {mockBlogPosts.slice(1).map((post, index) => {
            const images = ['/gr.png', '/gr2.png', '/gr3.png'];
            const image = images[index % images.length];
            
            return (
              <Link key={post.id} href={`/onboarding/blog/${post.id}`}>
                <Card 
                  className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all cursor-pointer relative"
                >
                <div className="w-full border-b-4 border-black relative overflow-hidden">
                  <img 
                    src={image}
                    alt={post.title}
                    className="w-full h-full object-cover"
                  />
                </div>
                <CardContent className="p-6">
                  <h3 className="font-black uppercase text-lg mb-8 leading-tight">{post.title}</h3>
                </CardContent>
                <div className="absolute bottom-6 left-6">
                  <span className="font-bold text-lg text-black">{post.date}</span>
                </div>
                </Card>
              </Link>
            );
          })}
        </div>
      </div>
        
      {/* Footer */}
      <div className="mt-16 bg-gray-50 border-t-4 border-black">
        <div className="max-w-6xl mx-auto px-4 py-8">
          <OnboardingFooter />
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/app/onboarding/blog/[blogId]/page.tsx
================================================
'use client';

import * as React from 'react';
import Link from 'next/link';
import { notFound } from 'next/navigation';
import { UilArrowLeft } from '@tooni/iconscout-unicons-react';

interface BlogPost {
  id: string;
  title: string;
  excerpt: string;
  author: string;
  readTime: string;
  category: string;
  featured: boolean;
  date: string;
  content: string;
}

const mockBlogPosts: BlogPost[] = [
  {
    id: '1',
    title: 'HOW TO BUILD YOUR FIRST AI VOICE AGENT',
    excerpt: 'Learn the fundamentals of creating conversational AI agents that can handle complex business interactions.',
    author: 'Sarah Chen',
    readTime: '5 min read',
    category: 'Getting Started',
    featured: true,
    date: 'January 15, 2024',
    content: `<p>Hey creator,</p><p><strong>Welcome to the world of AI voice agents!</strong></p><p>Building your first AI voice agent might seem daunting, but with the right approach, you'll have a working conversational AI up and running in no time.</p><h3><strong>What you'll need</strong></h3><ul><li><p><strong>Voice recognition:</strong> Choose between cloud-based (Google Speech-to-Text, AWS Transcribe) or on-premise solutions</p></li><li><p><strong>Natural Language Processing:</strong> OpenAI GPT-4, Claude, or open-source alternatives like Llama</p></li><li><p><strong>Text-to-Speech:</strong> ElevenLabs, Azure Cognitive Services, or our own Chatterbox TTS</p></li><li><p><strong>Integration platform:</strong> Webhook endpoints, real-time communication protocols</p></li></ul><h3><strong>Building blocks</strong></h3><ul><li><p>Set up speech recognition pipeline with proper audio preprocessing</p></li><li><p>Design conversation flows and handle context switching</p></li><li><p>Implement error handling and fallback responses</p></li><li><p>Test with real users and iterate based on feedback</p></li></ul><h3><strong>Pro tips for success</strong></h3><p>Consider these essential aspects:</p><ul><li><p>Keep conversations natural and flowing</p></li><li><p>Handle interruptions gracefully</p></li><li><p>Maintain conversation context across multiple turns</p></li><li><p>Implement proper latency optimization</p></li><li><p>Plan for scalability from day one</p></li></ul><p>The key is starting simple and iterating quickly. Don't try to build the perfect agent on your first attempt!</p><p>Happy building,</p><p>Sarah Chen</p><hr contenteditable="false"><p><strong>Resources:</strong></p><ul><li><p>Diala Platform Documentation</p></li><li><p>Voice Agent Best Practices Guide</p></li></ul>`
  },
  {
    id: '2',
    title: 'MAXIMIZING COLD CALL SUCCESS WITH AI',
    excerpt: 'Discover proven strategies for using AI voice agents to improve your outbound sales performance.',
    author: 'Mike Rodriguez',
    readTime: '8 min read',
    category: 'Sales',
    featured: false,
    date: 'January 12, 2024',
    content: `<p>Sales professional,</p><p><strong>AI is revolutionizing cold calling, and here's how you can leverage it.</strong></p><p>After implementing AI voice agents across 500+ sales teams, we've identified the strategies that consistently deliver 3x better conversion rates.</p><h3><strong>The AI advantage</strong></h3><ul><li><p><strong>24/7 availability:</strong> Your AI agents never sleep, maximizing contact opportunities</p></li><li><p><strong>Consistent messaging:</strong> Every call delivers your perfect pitch</p></li><li><p><strong>Instant qualification:</strong> AI pre-qualifies leads before human handoff</p></li><li><p><strong>Data-driven optimization:</strong> Real-time analysis improves performance continuously</p></li></ul><h3><strong>Implementation strategy</strong></h3><ul><li><p>Start with simple qualification calls</p></li><li><p>Train AI on your top performer's conversations</p></li><li><p>Set clear handoff triggers for human intervention</p></li><li><p>Monitor and optimize conversation flows weekly</p></li></ul><h3><strong>Measuring success</strong></h3><p>Track these key metrics:</p><ul><li><p>Contact rate improvements (typically 40-60% increase)</p></li><li><p>Qualification accuracy (aim for 85%+ precision)</p></li><li><p>Conversion to human agent (optimize for quality handoffs)</p></li><li><p>Overall pipeline velocity improvements</p></li></ul><p>Remember: AI doesn't replace human sales skills – it amplifies them by handling routine tasks and providing better qualified opportunities.</p><p>Keep selling,</p><p>Mike Rodriguez</p>`
  },
  {
    id: '3',
    title: 'VOICE CLONING BEST PRACTICES',
    excerpt: 'Essential tips for creating natural-sounding voice clones that maintain authenticity and engagement.',
    author: 'Lisa Park',
    readTime: '6 min read',
    category: 'Voice Technology',
    featured: false,
    date: 'January 10, 2024',
    content: `<p>Audio engineer,</p><p><strong>Creating authentic voice clones requires both technical precision and artistic sensibility.</strong></p><p>After producing voice clones for hundreds of creators, here are the non-negotiable best practices that separate amateur attempts from professional results.</p><h3><strong>Recording requirements</strong></h3><ul><li><p><strong>Clean audio:</strong> Record in a treated room with minimal background noise</p></li><li><p><strong>Consistent levels:</strong> Maintain steady volume throughout your session</p></li><li><p><strong>Natural delivery:</strong> Speak conversationally, avoid over-articulation</p></li><li><p><strong>Sufficient data:</strong> Provide 15-30 minutes of varied content</p></li></ul><h3><strong>Content strategy</strong></h3><ul><li><p>Include emotional range: happy, serious, questioning tones</p></li><li><p>Cover common business scenarios and vocabulary</p></li><li><p>Record phonetically diverse content</p></li><li><p>Include natural pauses and speech patterns</p></li></ul><h3><strong>Technical optimization</strong></h3><p>For best results:</p><ul><li><p>Use 48kHz/24-bit recording quality minimum</p></li><li><p>Apply gentle noise reduction if needed</p></li><li><p>Normalize audio levels consistently</p></li><li><p>Remove mouth sounds and breathing artifacts</p></li><li><p>Split into 10-30 second segments for training</p></li></ul><p>The goal isn't perfection – it's authenticity. Your voice clone should sound like you on your best day, not like a robot trying to be you.</p><p>Keep it real,</p><p>Lisa Park</p>`
  },
  {
    id: '4',
    title: 'INTEGRATING RAG FOR SMARTER AGENTS',
    excerpt: 'How to leverage Retrieval-Augmented Generation to create more knowledgeable and context-aware agents.',
    author: 'David Kim',
    readTime: '10 min read',
    category: 'Advanced',
    featured: false,
    date: 'January 8, 2024',
    content: `<p>AI developer,</p><p><strong>RAG transforms static AI agents into dynamic, knowledge-powered assistants.</strong></p><p>Implementing Retrieval-Augmented Generation correctly can increase your agent's accuracy by 75% while reducing hallucinations to near-zero levels.</p><h3><strong>RAG fundamentals</strong></h3><ul><li><p><strong>Vector databases:</strong> Store and retrieve relevant context efficiently</p></li><li><p><strong>Embedding models:</strong> Convert text into searchable vector representations</p></li><li><p><strong>Retrieval strategies:</strong> Find the most relevant information for each query</p></li><li><p><strong>Context injection:</strong> Seamlessly integrate retrieved data into responses</p></li></ul><h3><strong>Implementation steps</strong></h3><ul><li><p>Choose your vector database (Pinecone, Weaviate, or Chroma)</p></li><li><p>Process and chunk your knowledge base effectively</p></li><li><p>Select appropriate embedding models for your domain</p></li><li><p>Implement semantic search with proper scoring</p></li><li><p>Design context windows for optimal performance</p></li></ul><h3><strong>Advanced techniques</strong></h3><p>Take your RAG system further:</p><ul><li><p><strong>Hybrid search:</strong> Combine semantic and keyword matching</p></li><li><p><strong>Reranking:</strong> Improve relevance with secondary scoring models</p></li><li><p><strong>Query expansion:</strong> Generate related search terms automatically</p></li><li><p><strong>Context compression:</strong> Fit more relevant information in token limits</p></li><li><p><strong>Multi-hop reasoning:</strong> Chain multiple retrievals for complex queries</p></li></ul><h3><strong>Performance optimization</strong></h3><p>Monitor these key metrics:</p><ul><li><p>Retrieval precision and recall rates</p></li><li><p>Response accuracy improvements</p></li><li><p>Query latency (target under 500ms)</p></li><li><p>User satisfaction scores</p></li></ul><p>RAG isn't just about adding a database to your AI – it's about creating intelligent systems that know when and how to find the right information at the right time.</p><p>Build wisely,</p><p>David Kim</p>`
  }
];

export default function BlogPostPage({ params }: { params: { blogId: string } }) {
  const post = mockBlogPosts.find(p => p.id === params.blogId);

  if (!post) {
    notFound();
  }

  return (
    <div 
      className="min-h-screen bg-white relative" 
      style={{ 
        fontFamily: 'Noyh-Bold, sans-serif'
      }}
    >
      <div className="container mx-auto px-8 py-16 sm:px-6 md:py-24 lg:px-8">
        <div className="mx-auto max-w-3xl">
          {/* Back to Blog Navigation */}
          <div className="mb-6">
            <Link 
              href="/onboarding/blog" 
              className="text-pink-600 hover:text-pink-800 mt-4 flex items-center font-medium transition-colors"
            >
              <UilArrowLeft className="mr-1.5" style={{width: '18px', height: '18px'}} />
              Back to Blog
            </Link>
          </div>

          {/* Header */}
          <header className="mb-12">
            <h1 className="text-4xl md:text-5xl font-black uppercase text-black mb-4 leading-tight">
              {post.title}
            </h1>
            <time className="text-gray-600 text-lg font-bold">
              {post.date}
            </time>
          </header>

          {/* Content */}
          <div className="mx-auto grid max-w-3xl gap-6 border-b-4 border-black py-12 text-xl">
            <div className="rich-text">
              <div 
                className="prose prose-xl max-w-none prose-headings:font-black prose-headings:uppercase prose-h3:text-2xl prose-h3:mb-4 prose-p:mb-4 prose-p:leading-relaxed prose-ul:mb-6 prose-li:mb-2 prose-strong:font-black prose-hr:border-black prose-hr:border-2"
                dangerouslySetInnerHTML={{ __html: post.content }}
                style={{
                  fontFamily: 'inherit',
                  color: '#000'
                }}
              />
            </div>
          </div>

          {/* Bottom Navigation */}
          <div className="mt-8">
            <Link 
              href="/onboarding/blog" 
              className="text-pink-600 hover:text-pink-800 mt-4 flex items-center font-medium transition-colors"
            >
              <UilArrowLeft className="mr-1.5" style={{width: '18px', height: '18px'}} />
              Back to Blog
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/app/onboarding/bulk/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { UilDatabase, UilBrain, UilChart, UilSearch, UilCloudDownload, UilCog, UilCheckCircle, UilExport } from '@tooni/iconscout-unicons-react';
import { useTikTokContent } from '@/hooks/useTikTokContent';
import { useYouTubeContent } from '@/hooks/useYouTubeContent';
import { useTwitchContent } from '@/hooks/useTwitchContent';
import { useQuery } from 'convex/react';
import { api } from '@convex/_generated/api';

// Import step components
import { PlatformSelectionStep } from '@/components/onboarding/bulk/PlatformSelectionStep';
import { InputMethodStep } from '@/components/onboarding/bulk/InputMethodStep';
import { DocumentUploadStep } from '@/components/onboarding/bulk/DocumentUploadStep';
import { ContentSelectionStep } from '@/components/onboarding/bulk/ContentSelectionStep';
import { ModelSelectionStep } from '@/components/onboarding/bulk/ModelSelectionStep';
import { VectorDbSelectionStep } from '@/components/onboarding/bulk/VectorDbSelectionStep';
import { ProcessingStep } from '@/components/onboarding/bulk/ProcessingStep';
import { VerificationStep } from '@/components/onboarding/bulk/VerificationStep';
import { ExportStep } from '@/components/onboarding/bulk/ExportStep';
import { Platform, InputType, BulkOnboardingState, EmbeddingModel, VectorDatabase, ProcessingJob } from '@/components/onboarding/bulk/types';
import { VideoPreviewProvider } from '@/contexts/VideoPreviewContext';

export default function BulkOnboarding() {
  const [state, setState] = React.useState<BulkOnboardingState>({
    currentStep: 1,
    selectedPlatform: '',
    selectedInputMethod: '',
    channelUrl: '',
    pastedUrls: [],
    selectedContent: [],
    uploadedDocuments: [],
    selectedDocuments: [],
    uploadProgress: 0,
    selectedEmbeddingModel: null,
    selectedVectorDb: null,
    bulkSettings: {
      chunkSize: 1024,
      chunkOverlap: 100,
      maxTokens: 2048,
      // JINA V4 specific settings for transcript processing
      transcriptProcessing: {
        task: 'retrieval.passage',
        lateChunking: true,
        multiVector: false,
        optimizeForRag: true,
        dimensions: 1024,
      },
    },
    processingJob: null,
    exportFormat: 'json',
    isLoading: false,
    loadProgress: 0,
    isProcessing: false,
    processProgress: 0,
  });

  // Content hooks
  const {
    user: tiktokUser,
    userLoading: tiktokUserLoading,
    userError: tiktokUserError,
    fetchUser: fetchTikTokUser,
    videos: tiktokVideos,
    videosLoading: tiktokVideosLoading,
    videosError: tiktokVideosError,
    fetchVideos: fetchTikTokVideos,
  } = useTikTokContent();

  const {
    channel: youtubeChannel,
    channelLoading: youtubeChannelLoading,
    channelError: youtubeChannelError,
    fetchChannel: fetchYouTubeChannel,
    videos: youtubeVideos,
    videosLoading: youtubeVideosLoading,
    videosError: youtubeVideosError,
    fetchVideos: fetchYouTubeVideos,
  } = useYouTubeContent();

  const {
    channel: twitchChannel,
    channelLoading: twitchChannelLoading,
    channelError: twitchChannelError,
    channelDataComplete: twitchChannelDataComplete,
    fetchChannel: fetchTwitchChannel,
    videos: twitchVideos,
    videosLoading: twitchVideosLoading,
    videosError: twitchVideosError,
    fetchVideos: fetchTwitchVideos,
  } = useTwitchContent();

  // Rate limiting state
  const [lastDownloadTime, setLastDownloadTime] = React.useState<number>(0);
  const DOWNLOAD_COOLDOWN = 5000; // 5 seconds between batch downloads

  // Track if we've already attempted to fetch videos for this channel
  const fetchedChannelsRef = React.useRef<Set<string>>(new Set());

  const updateState = React.useCallback((updates: Partial<BulkOnboardingState>) => {
    console.log('Main page updateState called with:', updates);
    setState(prev => {
      const newState = { ...prev, ...updates };
      console.log('Main page state update - previous:', prev);
      console.log('Main page state update - new:', newState);
      return newState;
    });
  }, []);

  const setCurrentStep = React.useCallback((step: number) => {
    updateState({ currentStep: step });
  }, [updateState]);

  // Auto-fetch YouTube videos when channel is loaded
  React.useEffect(() => {
    if (state.selectedPlatform === 'youtube' && youtubeChannel && !youtubeVideosLoading) {
      const channelId = youtubeChannel.channelId;
      
      if (!fetchedChannelsRef.current.has(channelId) && youtubeVideos.length === 0) {
        console.log('Auto-fetching YouTube videos for channel:', channelId);
        fetchedChannelsRef.current.add(channelId);
        fetchYouTubeVideos(channelId, 20); // Increased limit for bulk processing
      }
    }
  }, [youtubeChannel, state.selectedPlatform, youtubeVideosLoading, youtubeVideos.length, fetchYouTubeVideos]);
  
  // Auto-fetch Twitch videos when channel is loaded
  React.useEffect(() => {
    if (state.selectedPlatform === 'twitch' && twitchChannel && !twitchVideosLoading) {
      const username = twitchChannel.username;
      
      if (!fetchedChannelsRef.current.has(username) && twitchVideos.length === 0) {
        console.log('Auto-fetching Twitch videos for channel:', username);
        fetchedChannelsRef.current.add(username);
        fetchTwitchVideos(username, 20, 'archive'); // Increased limit for bulk processing
      }
    }
  }, [twitchChannel, state.selectedPlatform, twitchVideosLoading, twitchVideos.length, fetchTwitchVideos]);

  // Auto-fetch TikTok videos when user is loaded
  React.useEffect(() => {
    if (state.selectedPlatform === 'tiktok' && tiktokUser && !tiktokVideosLoading) {
      const username = tiktokUser.username;
      
      if (!fetchedChannelsRef.current.has(username) && tiktokVideos.length === 0) {
        console.log('Auto-fetching TikTok videos for user:', username);
        fetchedChannelsRef.current.add(username);
        fetchTikTokVideos(username, 20); // Increased limit for bulk processing
      }
    }
  }, [tiktokUser, state.selectedPlatform, tiktokVideosLoading, tiktokVideos.length, fetchTikTokVideos]);

  // Auto-stop loading when content is available
  React.useEffect(() => {
    if (state.isLoading && state.currentStep === 3) {
      if (state.selectedPlatform === 'tiktok' && !tiktokUserLoading && !tiktokVideosLoading) {
        if (tiktokVideos.length > 0 || tiktokVideosError) {
          console.log('[Bulk] TikTok loading complete, videos:', tiktokVideos.length);
          updateState({ isLoading: false });
        }
      }
      else if (state.selectedPlatform === 'youtube' && !youtubeChannelLoading && !youtubeVideosLoading) {
        if (youtubeVideos.length > 0 || youtubeVideosError) {
          console.log('[Bulk] YouTube loading complete, videos:', youtubeVideos.length);
          updateState({ isLoading: false });
        }
      }
      else if (state.selectedPlatform === 'twitch' && !twitchChannelLoading && !twitchVideosLoading) {
        if (twitchVideos.length > 0 || twitchVideosError) {
          console.log('[Bulk] Twitch loading complete, videos:', twitchVideos.length);
          updateState({ isLoading: false });
        }
      }
    }
  }, [state.isLoading, state.currentStep, state.selectedPlatform, tiktokUserLoading, tiktokVideosLoading, 
      tiktokVideos.length, tiktokVideosError, youtubeChannelLoading, youtubeVideosLoading, 
      youtubeVideos.length, youtubeVideosError, twitchChannelLoading, twitchVideosLoading,
      twitchVideos.length, twitchVideosError, updateState]);

  const handleLoadContent = async () => {
    // Rate limiting check
    const now = Date.now();
    if (now - lastDownloadTime < DOWNLOAD_COOLDOWN) {
      const waitTime = Math.ceil((DOWNLOAD_COOLDOWN - (now - lastDownloadTime)) / 1000);
      console.log(`[RateLimit] Please wait ${waitTime} seconds before loading more content`);
      return;
    }
    
    setLastDownloadTime(now);
    updateState({ isLoading: true, currentStep: 3 });
    
    if (state.selectedInputMethod === 'urls') {
      // Handle pasted URLs - process them directly
      updateState({ isLoading: false });
      return;
    }
    
    // Handle channel-based loading
    if (state.selectedPlatform === 'tiktok') {
      try {
        updateState({ loadProgress: 10 });
        console.log('Fetching TikTok user:', state.channelUrl);
        await fetchTikTokUser(state.channelUrl);
        updateState({ loadProgress: 100 });
      } catch (error) {
        console.error('Error loading TikTok content:', error);
        updateState({ isLoading: false });
      }
    } else if (state.selectedPlatform === 'youtube') {
      try {
        updateState({ loadProgress: 10 });
        let channelUrl = state.channelUrl;
        if (!state.channelUrl.includes('youtube.com') && !state.channelUrl.includes('youtu.be')) {
          if (state.channelUrl.startsWith('@')) {
            channelUrl = `https://youtube.com/${state.channelUrl}`;
          } else if (state.channelUrl.startsWith('UC') && state.channelUrl.length === 24) {
            channelUrl = `https://youtube.com/channel/${state.channelUrl}`;
          } else {
            channelUrl = `https://youtube.com/@${state.channelUrl}`;
          }
        }
        console.log('Fetching YouTube channel with URL:', channelUrl);
        await fetchYouTubeChannel(channelUrl);
        updateState({ loadProgress: 100 });
      } catch (error) {
        console.error('Error loading YouTube content:', error);
        updateState({ isLoading: false });
      }
    } else if (state.selectedPlatform === 'twitch') {
      try {
        updateState({ loadProgress: 10 });
        let channelUrl = state.channelUrl;
        if (!state.channelUrl.includes('twitch.tv')) {
          channelUrl = `https://twitch.tv/${state.channelUrl}`;
        }
        console.log('Fetching Twitch channel:', channelUrl);
        await fetchTwitchChannel(channelUrl);
        updateState({ loadProgress: 100 });
      } catch (error) {
        console.error('Error loading Twitch content:', error);
        updateState({ isLoading: false });
      }
    }
  };

  const handleStepChange = async (step: number) => {
    setCurrentStep(step);
  };

  const canProceedFromStep1 = () => state.selectedPlatform !== '';
  const canProceedFromStep2 = () => {
    let result;
    if (state.selectedInputMethod === 'urls') {
      result = state.pastedUrls.length > 0;
    } else if (state.selectedInputMethod === 'upload' || state.selectedPlatform === 'documents') {
      result = state.uploadedDocuments.length > 0;
    } else {
      result = state.channelUrl.trim() !== '';
    }
    
    console.log('Main page canProceedFromStep2:', {
      selectedInputMethod: state.selectedInputMethod,
      selectedPlatform: state.selectedPlatform,
      uploadedDocumentsLength: state.uploadedDocuments.length,
      pastedUrlsLength: state.pastedUrls.length,
      channelUrl: state.channelUrl,
      result
    });
    
    return result;
  };
  const canProceedFromStep3 = () => state.selectedContent.length > 0;
  const canProceedFromStep4 = () => state.selectedEmbeddingModel !== null;
  const canProceedFromStep5 = () => state.selectedVectorDb !== null;

  const getStepTitle = () => {
    switch (state.currentStep) {
      case 1: return 'CHOOSE PLATFORM';
      case 2: return state.selectedPlatform === 'documents' ? 'UPLOAD DOCUMENTS' : 'INPUT METHOD';
      case 3: return state.isLoading ? 'LOADING CONTENT' : 'SELECT CONTENT';
      case 4: return 'SELECT EMBEDDING MODEL';
      case 5: return 'CHOOSE VECTOR DATABASE';
      case 6: return state.isProcessing ? 'PROCESSING CONTENT' : 'REVIEW & PROCESS';
      case 7: return 'VERIFY & TEST';
      case 8: return 'EXPORT & COMPLETE';
      default: return 'BULK PROCESSING';
    }
  };

  const getStepDescription = () => {
    switch (state.currentStep) {
      case 1: return 'SELECT YOUR CONTENT SOURCE';
      case 2: return state.selectedPlatform === 'documents' ? 'UPLOAD YOUR FILES FOR PROCESSING' : 'CHOOSE INPUT METHOD';
      case 3: return state.isLoading ? 'FETCHING CONTENT DATA' : 'CHOOSE CONTENT TO PROCESS';
      case 4: return 'CHOOSE YOUR EMBEDDING MODEL';
      case 5: return 'SELECT VECTOR DATABASE';
      case 6: return state.isProcessing ? 'CREATING VECTOR EMBEDDINGS' : 'CONFIGURE AND START PROCESSING';
      case 7: return 'TEST VECTOR DATABASE QUALITY';
      case 8: return 'EXPORT AND VISUALIZE RESULTS';
      default: return 'BULK VECTOR DATABASE CREATION';
    }
  };

  const getStepIcon = () => {
    switch (state.currentStep) {
      case 1: return <UilCloudDownload className="h-12 w-12 text-white" />;
      case 2: return state.selectedPlatform === 'documents' ? <UilCloudDownload className="h-12 w-12 text-white" /> : <UilCog className="h-12 w-12 text-white" />;
      case 3: return <UilChart className="h-12 w-12 text-white" />;
      case 4: return <UilBrain className="h-12 w-12 text-white" />;
      case 5: return <UilDatabase className="h-12 w-12 text-white" />;
      case 6: return <UilCog className="h-12 w-12 text-white" />;
      case 7: return <UilSearch className="h-12 w-12 text-white" />;
      case 8: return <UilExport className="h-12 w-12 text-white" />;
      default: return <UilDatabase className="h-12 w-12 text-white" />;
    }
  };

  return (
    <VideoPreviewProvider>
      <div 
        className="min-h-screen bg-orange-500 relative pb-8" 
        style={{ 
          fontFamily: 'Noyh-Bold, sans-serif',
          backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
          backgroundSize: '60px 60px'
        }}
      >
        <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-orange-600 border-2 border-black flex items-center justify-center">
                <UilDatabase className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-orange-500 border-2 border-black flex items-center justify-center">
                <UilBrain className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-orange-600 hover:bg-orange-700 border-4 border-black p-0">
                  {getStepIcon()}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {getStepTitle()}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {getStepDescription()}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-orange-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-orange-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-orange-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {state.currentStep === 1 && (
            <PlatformSelectionStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}

          {state.currentStep === 2 && state.selectedPlatform === 'documents' && (
            <DocumentUploadStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}

          {state.currentStep === 2 && state.selectedPlatform !== 'documents' && (
            <InputMethodStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
              handleLoadContent={handleLoadContent}
            />
          )}

          {state.currentStep === 3 && state.selectedPlatform !== 'documents' && (
            <ContentSelectionStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
              tiktokUser={tiktokUser}
              tiktokVideos={tiktokVideos}
              youtubeChannel={youtubeChannel}
              youtubeVideos={youtubeVideos}
              twitchChannel={twitchChannel}
              twitchVideos={twitchVideos}
              twitchChannelDataComplete={twitchChannelDataComplete}
            />
          )}

          {state.currentStep === 4 && (
            <ModelSelectionStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}

          {state.currentStep === 5 && (
            <VectorDbSelectionStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}

          {state.currentStep === 6 && (
            <ProcessingStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
              tiktokUser={tiktokUser}
              tiktokVideos={tiktokVideos}
              youtubeChannel={youtubeChannel}
              youtubeVideos={youtubeVideos}
              twitchChannel={twitchChannel}
              twitchVideos={twitchVideos}
              twitchChannelDataComplete={twitchChannelDataComplete}
            />
          )}

          {state.currentStep === 7 && (
            <VerificationStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}

          {state.currentStep === 8 && (
            <ExportStep
              state={state}
              setState={updateState}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}
        </div>

        <div className="mt-8">
          <OnboardingFooter />
        </div>
        </div>
      </div>
    </VideoPreviewProvider>
  );
}


================================================
FILE: src/app/onboarding/calls/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import OnboardingNav from '@/components/custom/onboarding-nav';
import PremiumFeatureCard from '@/components/custom/premium-feature-card';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import InfoSection from '@/components/custom/info-section';
import { useAction } from "convex/react";
import { api } from "@convex/_generated/api";
import { useConvexErrorHandler } from '@/hooks/useConvexErrorHandler';
import { StarBadge, Star15 } from '@/components/ui/star';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { 
  UilPhone,
  UilPhoneVolume,
  UilOutgoingCall,
  UilMissedCall,
  UilCalendarAlt,
  UilClock,
  UilUpload,
  UilUsersAlt,
  UilRobot,
  UilArrowRight,
  UilArrowLeft,
  UilCheckCircle,
  UilPlay,
  UilPause,
  UilInfoCircle,
  UilChartGrowth,
  UilBell,
  UilVoicemail,
  UilClipboardNotes,
  UilListUl,
  UilAnalytics,
  UilTachometerFast,
  UilBriefcase,
  UilQuestionCircle
} from '@tooni/iconscout-unicons-react';

interface Agent {
  id: string;
  name: string;
  language: string;
  pitch: string;
}

interface CallSettings {
  startTime: string;
  endTime: string;
  timezone: string;
  maxCallsPerDay: number;
  retryAttempts: number;
  daysBetweenRetries: number;
  leaveVoicemail: boolean;
  callRecording: boolean;
}

const mockAgents: Agent[] = [
  { id: 'agent-1', name: 'Sales Champion', language: 'English', pitch: 'Discovery Calls' },
  { id: 'agent-2', name: 'Support Hero', language: 'English', pitch: 'Customer Support' },
  { id: 'agent-3', name: 'Booking Pro', language: 'English', pitch: 'Appointment Setter' },
];

interface Voice {
  id: string;
  name: string;
  description: string;
  previewText: string;
  premium?: boolean;
}

const voices: Voice[] = [
  {
    id: 'voice-1',
    name: 'Professional Sarah',
    description: 'Clear, confident business voice',
    previewText: "Hello, this is Sarah calling about your business growth opportunities..."
  },
  {
    id: 'voice-2',
    name: 'Friendly Alex',
    description: 'Warm, approachable conversational tone',
    previewText: "Hi there! I hope you&apos;re having a great day. I&apos;m reaching out to discuss..."
  },
  {
    id: 'voice-3',
    name: 'Executive Maya',
    description: 'Sophisticated, authoritative presence',
    previewText: "Good afternoon. This is Maya with an important business opportunity..."
  },
  {
    id: 'voice-4',
    name: 'Energetic Jake',
    description: 'Enthusiastic, high-energy approach',
    previewText: "Hey! Jake here with some exciting news about your business potential..."
  },
  {
    id: 'custom',
    name: 'Create Your Own',
    description: 'Clone your own voice for personalized calls',
    previewText: "Use your own voice for authentic conversations",
    premium: true
  }
];

const timezones = [
  'America/New_York',
  'America/Chicago',
  'America/Denver',
  'America/Los_Angeles',
  'Europe/London',
  'Europe/Paris',
  'Asia/Tokyo',
  'Australia/Sydney'
];

export default function CallsOnboarding() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [campaignName, setCampaignName] = React.useState('');
  const [campaignGoals, setCampaignGoals] = React.useState('');
  const [campaignType, setCampaignType] = React.useState('');
  const [selectedAgent, setSelectedAgent] = React.useState('');
  const [targetListType, setTargetListType] = React.useState('');
  const [uploadedFile, setUploadedFile] = React.useState<File | null>(null);
  const [manualNumbers, setManualNumbers] = React.useState('');
  const [callSettings, setCallSettings] = React.useState<CallSettings>({
    startTime: '09:00',
    endTime: '17:00',
    timezone: 'America/New_York',
    maxCallsPerDay: 100,
    retryAttempts: 3,
    daysBetweenRetries: 2,
    leaveVoicemail: true,
    callRecording: true
  });

  const [selectedVoice, setSelectedVoice] = React.useState('');
  const [isPlaying, setIsPlaying] = React.useState<string | null>(null);
  const [isLaunching, setIsLaunching] = React.useState(false);
  const [launchProgress, setLaunchProgress] = React.useState(0);
  const [showVerification, setShowVerification] = React.useState(false);
  const [campaignStats, setCampaignStats] = React.useState<any>(null);
  const [estimatedContacts, setEstimatedContacts] = React.useState(0);

  // Auto-adjust max calls based on contact count
  React.useEffect(() => {
    if (estimatedContacts > 0) {
      const maxCalls = Math.min(Math.max(10, estimatedContacts * 2), 200);
      setCallSettings(prev => ({ ...prev, maxCallsPerDay: maxCalls }));
    }
  }, [estimatedContacts]);
  const [devMode, setDevMode] = React.useState(false);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setUploadedFile(e.target.files[0]);
      // Simulate contact count
      setEstimatedContacts(Math.floor(Math.random() * 500) + 100);
    }
  };

  const canProceedFromStep1 = () => {
    return campaignName.trim() !== '' && campaignGoals.trim() !== '' && campaignType !== '';
  };

  const canProceedFromStep4 = () => {
    if (targetListType === 'upload' && uploadedFile) return true;
    if (targetListType === 'manual' && manualNumbers.trim()) return true;
    if (targetListType === 'existing') return true;
    return false;
  };

  const handleLaunchCampaign = async () => {
    setIsLaunching(true);
    setCurrentStep(6);
    
    // Simulate launch progress
    for (let i = 0; i <= 100; i += 20) {
      setLaunchProgress(i);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // Show verification modal after progress reaches 100%
    setShowVerification(true);
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerification(false);
    
    // Calculate realistic duration based on settings
    const contactsCount = estimatedContacts || 250;
    const dailyCalls = callSettings.maxCallsPerDay;
    const daysNeeded = Math.ceil(contactsCount / dailyCalls);
    const estimatedDuration = daysNeeded === 1 ? '1 day' : 
                             daysNeeded <= 3 ? `${daysNeeded} days` :
                             daysNeeded <= 7 ? '1 week' : 
                             `${Math.ceil(daysNeeded / 7)} weeks`;
    
    // Set campaign stats
    setCampaignStats({
      totalContacts: contactsCount,
      callsScheduled: contactsCount,
      estimatedDuration: estimatedDuration,
      startTime: new Date().toLocaleString(),
      status: 'Active'
    });
    
    setIsLaunching(false);
  };

  // Only allow explicit navigation via button clicks
  const handleStepChange = (step: number) => {
    setCurrentStep(step);
  };

  // Dev mode auto-fill effect
  React.useEffect(() => {
    if (devMode) {
      setCampaignName('Q4 Sales Outreach Campaign');
      setCampaignGoals('Generate 50 qualified leads for our SaaS platform through targeted outreach to mid-market companies');
      setCampaignType('sales');
      setSelectedAgent('agent-1');
      setSelectedVoice('voice-1');
      setTargetListType('manual');
      setManualNumbers('+1 555-0123\n+1 555-0124\n+1 555-0125\n+1 555-0126\n+1 555-0127');
      setEstimatedContacts(6);
      setCallSettings({
        startTime: '09:00',
        endTime: '17:00',
        timezone: 'America/New_York',
        maxCallsPerDay: 12, // Auto-adjusted: 6 contacts × 2 = 12 max calls
        retryAttempts: 3,
        daysBetweenRetries: 2,
        leaveVoicemail: true,
        callRecording: true
      });
    }
  }, [devMode]);

  const handlePlayVoice = (voiceId: string, previewText: string) => {
    setIsPlaying(voiceId);
    // Simulate audio playback
    setTimeout(() => {
      setIsPlaying(null);
    }, 2000);
  };

  return (
    <TooltipProvider>
      <div 
        className="min-h-screen bg-orange-500 relative pb-8" 
        style={{ 
          fontFamily: 'Noyh-Bold, sans-serif',
          backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
          backgroundSize: '60px 60px'
        }}
      >
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-4 right-4 z-50">
          <Button
            onClick={() => setDevMode(!devMode)}
            className={`h-10 px-4 text-sm font-black uppercase ${
              devMode
                ? 'bg-green-500 hover:bg-green-600 text-white'
                : 'bg-gray-200 hover:bg-gray-300 text-black'
            } border-2 border-black`}
          >
            DEV MODE {devMode ? 'ON' : 'OFF'}
          </Button>
        </div>
      )}
      <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          {/* Persistent Title Card */}
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-orange-600 border-2 border-black flex items-center justify-center">
                <UilPhone className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-orange-500 border-2 border-black flex items-center justify-center">
                <UilPhoneVolume className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-orange-600 hover:bg-orange-700 border-4 border-black p-0">
                {currentStep === 1 && <UilBriefcase className="h-12 w-12 text-white" />}
                {currentStep === 2 && <UilRobot className="h-12 w-12 text-white" />}
                {currentStep === 3 && <UilPhone className="h-12 w-12 text-white" />}
                {currentStep === 4 && <UilUsersAlt className="h-12 w-12 text-white" />}
                {currentStep === 5 && <UilClock className="h-12 w-12 text-white" />}
                {currentStep === 6 && <UilPlay className="h-12 w-12 text-white" />}
                {currentStep === 7 && <UilCheckCircle className="h-12 w-12 text-white" />}
              </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'CAMPAIGN CREATION'}
                {currentStep === 2 && 'AGENT SELECTION'}
                {currentStep === 3 && 'VOICE SELECTION'}
                {currentStep === 4 && 'TARGET AUDIENCE'}
                {currentStep === 5 && 'CALL CONFIGURATION'}
                {currentStep === 6 && 'LAUNCH READY'}
                {currentStep === 7 && (isLaunching ? 'LAUNCHING CAMPAIGN' : 'CAMPAIGN LAUNCHED')}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'BUILD YOUR OUTREACH STRATEGY'}
                {currentStep === 2 && 'CHOOSE YOUR AI REPRESENTATIVE'}
                {currentStep === 3 && 'SELECT THE PERFECT VOICE'}
                {currentStep === 4 && 'DEFINE WHO TO REACH'}
                {currentStep === 5 && 'OPTIMIZE YOUR CAMPAIGN'}
                {currentStep === 6 && 'REVIEW AND DEPLOY'}
                {currentStep === 7 && (isLaunching ? 'SETTING UP YOUR CAMPAIGN' : 'YOUR CAMPAIGN IS LIVE')}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-orange-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-orange-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-orange-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>
          {/* Step 1: Campaign Setup */}
          {currentStep === 1 && (
            <div className="space-y-8">
              {/* Campaign Details Card */}
              <Card className="transform -rotate-1">
                <CardContent className="p-8">
                  <div className="text-center mb-8">
                    <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                      CAMPAIGN SETUP
                    </h1>
                  </div>
                  
                  <div className="space-y-6">
                    <div>
                      <label className="text-xl font-black uppercase mb-3 block">
                        CAMPAIGN NAME
                      </label>
                      <Input
                        type="text"
                        value={campaignName}
                        onChange={(e) => setCampaignName(e.target.value)}
                        placeholder="e.g., Q4 Sales Blitz, Customer Feedback"
                        className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
                      />
                    </div>

                    <div>
                      <label className="text-xl font-black uppercase mb-3 block">
                        CAMPAIGN TYPE
                      </label>
                      <TooltipProvider>
                      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                        <div className="relative">
                          {campaignType === 'sales' && (
                            <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                </div>
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                    SELECTED
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Card 
                                className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                                  campaignType === 'sales' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                                }`}
                                onClick={() => setCampaignType('sales')}
                              >
                                <CardContent className="p-4 text-center">
                                  <UilTachometerFast className="h-8 w-8 mx-auto mb-2" />
                                  <h4 className="font-black uppercase">SALES</h4>
                                  <p className="text-sm text-gray-600">Outbound prospecting</p>
                                </CardContent>
                              </Card>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Focused on qualifying leads and booking meetings. Agents use persistent follow-up and objection handling techniques.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="relative">
                          {campaignType === 'followup' && (
                            <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                </div>
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                    SELECTED
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Card 
                                className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                                  campaignType === 'followup' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                                }`}
                                onClick={() => setCampaignType('followup')}
                              >
                                <CardContent className="p-4 text-center">
                                  <UilBell className="h-8 w-8 mx-auto mb-2" />
                                  <h4 className="font-black uppercase">FOLLOW-UP</h4>
                                  <p className="text-sm text-gray-600">Re-engage leads</p>
                                </CardContent>
                              </Card>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Re-engage existing leads or customers. Agents focus on relationship building and identifying new opportunities.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="relative">
                          {campaignType === 'survey' && (
                            <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                </div>
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                    SELECTED
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Card 
                                className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                                  campaignType === 'survey' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                                }`}
                                onClick={() => setCampaignType('survey')}
                              >
                                <CardContent className="p-4 text-center">
                                  <UilClipboardNotes className="h-8 w-8 mx-auto mb-2" />
                                  <h4 className="font-black uppercase">SURVEY</h4>
                                  <p className="text-sm text-gray-600">Gather feedback</p>
                                </CardContent>
                              </Card>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Collect customer feedback and insights. Agents conduct structured interviews and ensure high completion rates.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                      </div>
                      </TooltipProvider>
                    </div>

                    <div>
                      <label className="text-xl font-black uppercase mb-3 block">
                        CAMPAIGN GOALS
                      </label>
                      <Textarea
                        value={campaignGoals}
                        onChange={(e) => setCampaignGoals(e.target.value)}
                        placeholder="What do you want to achieve? e.g., Book 50 demos, collect customer feedback, qualify 100 leads..."
                        className="min-h-[120px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
                      />
                    </div>
                  </div>

                  {/* Info Box */}
                  <Card className="bg-yellow-100 border-2 border-black mt-6">
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <Button 
                          size="sm" 
                          variant="neutral" 
                          className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                        >
                          <UilInfoCircle className="h-4 w-4" />
                        </Button>
                        <div>
                          <p className="text-sm font-bold">CAMPAIGN TIPS</p>
                          <p className="text-sm text-gray-700 mt-1">
                            Give your campaign a clear name and specific goals. This helps our AI agents understand 
                            your objectives and adapt their conversations accordingly.
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Button
                    className="w-full mt-8 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(2)}
                    disabled={!canProceedFromStep1()}
                  >
                    <span className="flex items-center justify-center">
                      CONTINUE
                      <UilArrowRight className="ml-2 h-6 w-6" />
                    </span>
                  </Button>
                </CardContent>
              </Card>

              
              {/* Custom Info Cards */}
              <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilChartGrowth className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        CAMPAIGN PERFORMANCE AT SCALE
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our campaigns achieve <span className="font-black text-orange-600">3x higher connection rates</span> than traditional dialers. 
                        AI-powered scheduling ensures calls happen at optimal times, while intelligent retry logic maximizes reach without annoying prospects.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Real-time campaign analytics</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">AI-optimized call timing</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Smart retry logic</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Voicemail detection</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    >
                      <UilAnalytics className="h-6 w-6 text-black" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        CONVERSION OPTIMIZATION
                      </h3>
                      <p className="text-gray-700 text-lg leading-relaxed">
                        Track every interaction and optimize for conversions. Our AI learns from each call, improving scripts and timing to 
                        <span className="font-black text-orange-600"> boost your conversion rates by up to 40%</span>. Get detailed insights on what works 
                        and what doesn&apos;t, with actionable recommendations for improvement.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 1 */}
          {currentStep === 1 && (
            <InfoSection customContent={{
              icon: <UilBriefcase className="h-6 w-6 text-white" />,
              title: "Build Powerful Outreach Campaigns",
              description: "Create targeted campaigns that convert. Our AI-powered approach combines smart goal setting, intelligent campaign types, and strategic planning to maximize your outreach success and drive meaningful business results.",
              benefits: [
                "3x higher conversion rates than traditional dialers",
                "AI-optimized campaign strategies and timing",
                "Real-time performance tracking and analytics",
                "Intelligent lead qualification and scoring"
              ],
              faqs: [
                {
                  icon: <UilBriefcase className="h-5 w-5" />,
                  question: "What makes campaign types important?",
                  answer: "Different campaign types are optimized for specific outcomes. Sales campaigns focus on conversion and qualification, Follow-up campaigns nurture existing relationships, and Survey campaigns gather valuable feedback - each with tailored AI strategies."
                },
                {
                  icon: <UilChartGrowth className="h-5 w-5" />,
                  question: "How do clear goals improve performance?",
                  answer: "Specific goals help our AI adapt conversation strategies in real-time. Whether booking demos or qualifying leads, clear objectives enable the system to optimize scripts, timing, and follow-up sequences for maximum success."
                },
                {
                  icon: <UilTachometerFast className="h-5 w-5" />,
                  question: "Can I modify my campaign after launching?",
                  answer: "Absolutely! You can pause, modify goals, adjust targeting, or change campaign types anytime. Our system adapts immediately to new parameters while maintaining conversation quality and tracking performance changes."
                }
              ]
            }} />
          )}

          {/* Step 2: Agent Selection */}
          {currentStep === 2 && (
            <Card className="transform -rotate-1">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    SELECT YOUR AGENT
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Choose which AI agent will handle your campaign calls
                </p>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                  {mockAgents.map((agent) => (
                    <div key={agent.id} className="relative">
                      {selectedAgent === agent.id && (
                        <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                          <div className="relative">
                            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                              <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                            </div>
                            <div className="absolute inset-0 flex items-center justify-center">
                              <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                SELECTED
                              </span>
                            </div>
                          </div>
                        </div>
                      )}
                      <Card 
                        className={`cursor-pointer border-4 border-black hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all ${
                          selectedAgent === agent.id ? 'bg-orange-100 shadow-[8px_8px_0_rgba(0,0,0,1)]' : 'bg-white'
                        }`}
                        onClick={() => setSelectedAgent(agent.id)}
                      >
                        <CardContent className="p-6">
                        <div className="flex items-start gap-4">
                          <Button size="icon" variant="header" className="w-16 h-16 bg-orange-500 hover:bg-orange-600 flex-shrink-0">
                            <UilRobot className="h-8 w-8 text-white" />
                          </Button>
                          <div className="flex-1">
                            <h3 className="text-xl font-black uppercase mb-2">{agent.name}</h3>
                            <div className="flex flex-wrap gap-2">
                              <Badge className="bg-orange-200 text-black border-2 border-black">
                                {agent.language}
                              </Badge>
                              <Badge className="bg-yellow-200 text-black border-2 border-black">
                                {agent.pitch}
                              </Badge>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                    </div>
                  ))}
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">AGENT SELECTION</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Choose an agent that matches your campaign type. Sales agents are persistent, 
                          support agents are empathetic, and booking agents focus on scheduling.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(1)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(3)}
                    disabled={!selectedAgent}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 2 */}
          {currentStep === 2 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilRobot className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        AI-POWERED AGENT EXCELLENCE
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our AI agents achieve <span className="font-black text-orange-600">85% conversation success rates</span> by adapting their approach in real-time. 
                        Each agent specializes in different conversation styles, from assertive sales pitches to empathetic support interactions.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Natural conversation flow</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Objection handling</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Sentiment analysis</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Multi-language support</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 2 */}
          {currentStep === 2 && (
            <InfoSection customContent={{
              icon: <UilRobot className="h-6 w-6 text-white" />,
              title: "Choose Your Perfect AI Representative",
              description: "Select the AI agent that best matches your campaign goals. Each agent is trained with specialized conversation skills, industry knowledge, and personality traits optimized for different business scenarios and customer interactions.",
              benefits: [
                "85% conversation success rates across all agent types",
                "Real-time conversation adaptation and objection handling",
                "Specialized training for sales, support, and appointments",
                "Natural personality matching for authentic interactions"
              ],
              faqs: [
                {
                  icon: <UilRobot className="h-5 w-5" />,
                  question: "What makes each agent different?",
                  answer: "Sales Champion excels at discovery calls and lead qualification with assertive techniques. Support Hero handles customer service with empathy and problem-solving skills. Booking Pro specializes in appointment scheduling with persistence and calendar management."
                },
                {
                  icon: <UilUsersAlt className="h-5 w-5" />,
                  question: "How do agents handle different personality types?",
                  answer: "Our AI agents use real-time sentiment analysis to adapt their approach. They can shift from formal to casual, adjust pace and enthusiasm, and modify their questioning style based on prospect responses and engagement levels."
                },
                {
                  icon: <UilInfoCircle className="h-5 w-5" />,
                  question: "Can agents speak multiple languages fluently?",
                  answer: "Yes! Each agent supports multiple languages with native-level pronunciation and cultural awareness. They understand regional business customs, appropriate formality levels, and industry-specific terminology for natural conversations."
                }
              ]
            }} />
          )}

          {/* Step 3: Voice Selection */}
          {currentStep === 3 && (
            <Card className="transform -rotate-1">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    SELECT YOUR VOICE
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Choose the perfect voice for your AI agent
                </p>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                  {voices.filter(voice => !voice.premium).map((voice) => (
                    <div key={voice.id} className="relative">
                      {selectedVoice === voice.id && (
                        <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                          <div className="relative">
                            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                              <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                            </div>
                            <div className="absolute inset-0 flex items-center justify-center">
                              <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                SELECTED
                              </span>
                            </div>
                          </div>
                        </div>
                      )}
                      <Card 
                        className={`cursor-pointer border-4 border-black hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all ${
                          selectedVoice === voice.id ? 'bg-orange-100 shadow-[8px_8px_0_rgba(0,0,0,1)]' : 'bg-white'
                        }`}
                        onClick={() => setSelectedVoice(voice.id)}
                      >
                        <CardContent className="p-6">
                          <div className="flex items-start gap-4">
                            <Button size="icon" variant="header" className="w-16 h-16 bg-orange-500 hover:bg-orange-600 flex-shrink-0">
                              <UilPhone className="h-8 w-8 text-white" />
                            </Button>
                            <div className="flex-1">
                              <h3 className="text-xl font-black uppercase mb-2">{voice.name}</h3>
                              <p className="text-gray-700 mb-3">{voice.description}</p>
                              <Button
                                size="sm"
                                variant="outline"
                                className="border-2 border-black hover:bg-orange-100"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handlePlayVoice(voice.id, voice.previewText);
                                }}
                              >
                                {isPlaying === voice.id ? (
                                  <>
                                    <UilPause className="h-4 w-4 mr-1" />
                                    PLAYING
                                  </>
                                ) : (
                                  <>
                                    <UilPlay className="h-4 w-4 mr-1" />
                                    PREVIEW
                                  </>
                                )}
                              </Button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  ))}
                  
                  <div className="md:col-span-2">
                    <PremiumFeatureCard 
                      title="CREATE YOUR OWN VOICE"
                      description="Clone your own voice for personalized calls. Use advanced AI to create a perfect replica of your voice for authentic conversations with prospects."
                      price="$99/month"
                    />
                  </div>
                </div>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(2)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(6)}
                    disabled={!selectedVoice}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">VOICE SELECTION</p>
                          <p className="text-sm text-gray-700 mt-1">
                            Choose a voice that matches your brand personality. Preview each option to hear how they&apos;ll sound to your prospects.
                          </p>                      </div>
                    </div>
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          )}

          {/* Step 4: Target List */}
          {currentStep === 4 && (
            <Card className="transform rotate-1">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    TARGET LIST
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Who should we call?
                </p>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                  <div className="relative">
                    {targetListType === 'upload' && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        targetListType === 'upload' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => setTargetListType('upload')}
                    >
                      <CardContent className="p-6 text-center">
                        <UilUpload className="h-8 w-8 mx-auto mb-2" />
                        <h4 className="font-black uppercase mb-1">UPLOAD CSV</h4>
                        <p className="text-sm text-gray-600">Import your contact list</p>
                      </CardContent>
                    </Card>
                  </div>
                  <div className="relative">
                    {targetListType === 'existing' && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        targetListType === 'existing' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => setTargetListType('existing')}
                    >
                      <CardContent className="p-6 text-center">
                        <UilUsersAlt className="h-8 w-8 mx-auto mb-2" />
                        <h4 className="font-black uppercase mb-1">EXISTING LEADS</h4>
                        <p className="text-sm text-gray-600">Use Hunter results</p>
                      </CardContent>
                    </Card>
                  </div>
                  <div className="relative">
                    {targetListType === 'manual' && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        targetListType === 'manual' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => setTargetListType('manual')}
                    >
                      <CardContent className="p-6 text-center">
                        <UilListUl className="h-8 w-8 mx-auto mb-2" />
                        <h4 className="font-black uppercase mb-1">MANUAL ENTRY</h4>
                        <p className="text-sm text-gray-600">Add numbers directly</p>
                      </CardContent>
                    </Card>
                  </div>
                </div>

                {targetListType === 'upload' && (
                  <Card className="bg-orange-50 border-4 border-black">
                    <CardContent className="p-8">
                      <div className="border-4 border-dashed border-black rounded-lg p-8 text-center bg-white">
                        <input
                          type="file"
                          accept=".csv"
                          onChange={handleFileUpload}
                          className="hidden"
                          id="csv-upload"
                        />
                        <label htmlFor="csv-upload" className="cursor-pointer">
                          <Button size="icon" variant="header" className="w-16 h-16 mb-4 bg-orange-500 hover:bg-orange-600">
                            <UilUpload className="h-8 w-8 text-white" />
                          </Button>
                          <p className="text-lg font-bold">Click to upload CSV file</p>
                          <p className="text-sm text-gray-600 mt-2">Format: Name, Phone Number, Company (optional)</p>
                        </label>
                      </div>
                      {uploadedFile && (
                        <div className="mt-4 p-4 bg-green-50 border-2 border-black rounded">
                          <p className="font-bold">✓ {uploadedFile.name} uploaded</p>
                          <p className="text-sm text-gray-600">Estimated contacts: {estimatedContacts}</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}

                {targetListType === 'existing' && (
                  <Card className="bg-orange-50 border-4 border-black">
                    <CardContent className="p-8 text-center">
                      <UilUsersAlt className="h-16 w-16 mx-auto mb-4 text-orange-600" />
                      <h3 className="text-xl font-black uppercase mb-2">250 LEADS AVAILABLE</h3>
                      <p className="text-gray-700 mb-4">From your recent Hunter search</p>
                      <Button className="bg-orange-500 hover:bg-orange-600 text-white">
                        USE ALL LEADS
                      </Button>
                    </CardContent>
                  </Card>
                )}

                {targetListType === 'manual' && (
                  <Card className="bg-orange-50 border-4 border-black">
                    <CardContent className="p-8">
                      <label className="text-lg font-black uppercase mb-3 block">
                        PHONE NUMBERS (ONE PER LINE)
                      </label>
                      <Textarea
                        value={manualNumbers}
                        onChange={(e) => setManualNumbers(e.target.value)}
                        placeholder="+1 555-0123&#10;+1 555-0124&#10;+1 555-0125"
                        className="min-h-[200px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none font-mono"
                      />
                      <p className="text-sm text-gray-600 mt-2">
                        Enter phone numbers with country code
                      </p>
                    </CardContent>
                  </Card>
                )}

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(3)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(6)}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">TARGET LIST TIPS</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Upload a CSV for bulk imports, use existing leads from Hunter searches, 
                          or manually enter numbers for smaller campaigns. We&apos;ll validate all numbers before calling.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 3 */}
          {currentStep === 4 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilUsersAlt className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        INTELLIGENT LEAD MANAGEMENT
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our system validates and enriches every contact before calling. <span className="font-black text-orange-600">Invalid numbers are automatically filtered</span>, 
                        while valid contacts are enhanced with timezone detection and optimal call time predictions.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Phone number validation</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Timezone detection</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">DNC list checking</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Duplicate removal</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 3 */}
          {currentStep === 4 && (
            <InfoSection customContent={{
              icon: <UilUsersAlt className="h-6 w-6 text-white" />,
              title: "Smart Target Audience Management",
              description: "Upload, import, or select your ideal prospects with intelligent data validation and enrichment. Our system automatically optimizes contact lists for maximum reachability while ensuring compliance with calling regulations.",
              benefits: [
                "Automatic phone number validation and formatting",
                "Real-time timezone detection for optimal call timing",
                "DNC list checking and compliance management",
                "Duplicate detection and contact data enrichment"
              ],
              faqs: [
                {
                  icon: <UilUpload className="h-5 w-5" />,
                  question: "What format should my CSV file be in?",
                  answer: "Upload CSV files with columns for Name, Phone Number, and optionally Company. Our system accepts various formats and automatically standardizes the data for optimal calling. Include country codes for international numbers."
                },
                {
                  icon: <UilUsersAlt className="h-5 w-5" />,
                  question: "How does the system validate phone numbers?",
                  answer: "We verify number format, check for valid area codes, detect mobile vs landline, and cross-reference against Do Not Call lists. Invalid numbers are automatically flagged and excluded from your campaign to maintain compliance."
                },
                {
                  icon: <UilClipboardNotes className="h-5 w-5" />,
                  question: "Can I use leads from Hunter or other sources?",
                  answer: "Absolutely! Import existing leads from Hunter searches, CRM exports, or any lead generation tool. Our system will validate and enhance the data with additional information like timezone and optimal calling times."
                }
              ]
            }} />
          )}

          {/* Step 4: Call Settings */}
          {currentStep === 5 && (
            <Card className="transform -rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    CALL SETTINGS
                  </h1>
                </div>
                <div className="space-y-6">
                  {/* Schedule Settings */}
                  <Card className="bg-orange-50 border-2 border-black">
                    <CardContent className="p-6">
                      <h3 className="text-lg font-black uppercase mb-4 flex items-center gap-2">
                        <UilClock className="h-5 w-5" />
                        SCHEDULE
                      </h3>
                      <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                          <label className="text-sm font-bold uppercase">Start Time</label>
                          <Input
                            type="time"
                            value={callSettings.startTime}
                            onChange={(e) => setCallSettings({...callSettings, startTime: e.target.value})}
                            className="h-12 font-semibold border-2 border-black"
                          />
                        </div>
                        <div>
                          <label className="text-sm font-bold uppercase">End Time</label>
                          <Input
                            type="time"
                            value={callSettings.endTime}
                            onChange={(e) => setCallSettings({...callSettings, endTime: e.target.value})}
                            className="h-12 font-semibold border-2 border-black"
                          />
                        </div>
                      </div>
                      <div>
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <label className="text-sm font-bold uppercase cursor-help">
                                Timezone
                                <UilInfoCircle className="inline-block h-3 w-3 ml-1 text-gray-600" />
                              </label>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>All call times will be scheduled according to this timezone. Calls automatically adjust for each contact&apos;s local time.</p>
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                        <Select
                          value={callSettings.timezone}
                          onValueChange={(value) => setCallSettings({...callSettings, timezone: value})}
                        >
                          <SelectTrigger className="w-full h-12 px-4 text-lg font-semibold border-4 border-black bg-white hover:bg-gray-50">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] bg-white">
                            {timezones.map(tz => (
                              <SelectItem key={tz} value={tz}>{tz}</SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Capacity Settings */}
                  <div>
                    <div className="flex items-center gap-2 mb-3">
                      <label className="text-lg font-black uppercase block">
                        MAX CALLS PER DAY: {callSettings.maxCallsPerDay}
                      </label>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button className="p-0 bg-transparent border-none outline-none">
                            <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent side="top">
                          <p>Maximum number of calls your agents will make in a 24-hour period. Helps manage campaign pacing.</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <Slider 
                      value={[callSettings.maxCallsPerDay]}
                      onValueChange={(value) => setCallSettings({...callSettings, maxCallsPerDay: value[0]})}
                      min={1}
                      max={Math.max(20, Math.min(200, estimatedContacts * 5))}
                      step={1}
                      className="mb-2"
                    />
                    <div className="text-sm text-gray-600 space-y-1">
                      {estimatedContacts > 0 && (
                        <>
                          <div>• {estimatedContacts} contacts</div>
                          <div>• {callSettings.maxCallsPerDay} calls/day</div>
                          <div>• 
                            {callSettings.maxCallsPerDay < estimatedContacts ? 'Conservative pace' :
                             callSettings.maxCallsPerDay <= estimatedContacts * 2 ? 'Balanced pace' :
                             'Aggressive pace'}
                          </div>
                        </>
                      )}
                    </div>
                  </div>

                  {/* Retry Settings */}
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <div className="flex items-center gap-2 mb-2">
                        <label className="text-sm font-black uppercase block">
                          RETRY ATTEMPTS: {callSettings.retryAttempts}
                        </label>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button className="p-0 bg-transparent border-none outline-none">
                              <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent side="top">
                            <p>Number of times to retry unanswered calls. Set to 0 to disable retries.</p>
                          </TooltipContent>
                        </Tooltip>
                      </div>
                      <Slider 
                        value={[callSettings.retryAttempts]}
                        onValueChange={(value) => setCallSettings({...callSettings, retryAttempts: value[0]})}
                        min={0}
                        max={5}
                        step={1}
                      />
                      <p className="text-xs text-gray-600 mt-1">
                        {callSettings.retryAttempts === 0 ? 'No retries - single attempt only' :
                         callSettings.retryAttempts === 1 ? 'One retry attempt' :
                         `${callSettings.retryAttempts} retry attempts`}
                      </p>
                    </div>
                    <div>
                      <div className="flex items-center gap-2 mb-2">
                        <label className="text-sm font-black uppercase block">
                          DAYS BETWEEN: {callSettings.daysBetweenRetries}
                        </label>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button className="p-0 bg-transparent border-none outline-none">
                              <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent side="top">
                            <p>Wait time between retry attempts to avoid being too persistent.</p>
                          </TooltipContent>
                        </Tooltip>
                      </div>
                      <Slider 
                        value={[callSettings.daysBetweenRetries]}
                        onValueChange={(value) => setCallSettings({...callSettings, daysBetweenRetries: value[0]})}
                        min={1}
                        max={7}
                        step={1}
                        disabled={callSettings.retryAttempts === 0}
                      />
                      {callSettings.retryAttempts === 0 ? (
                        <p className="text-xs text-gray-500 mt-1">Enable retry attempts to configure retry delay</p>
                      ) : (
                        <p className="text-xs text-gray-600 mt-1">
                          {callSettings.daysBetweenRetries === 1 ? 'Next day retry' :
                           callSettings.daysBetweenRetries === 7 ? 'Weekly retry cycle' :
                           `Wait ${callSettings.daysBetweenRetries} days between attempts`}
                        </p>
                      )}
                    </div>
                  </div>

                  {/* Features */}
                  <div className="grid grid-cols-2 gap-4">
                    <Card className="bg-orange-50 border-2 border-black">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <UilVoicemail className="h-5 w-5" />
                            <span className="font-black uppercase">Voicemail</span>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <button className="p-0 bg-transparent border-none outline-none">
                                  <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                </button>
                              </TooltipTrigger>
                              <TooltipContent side="top">
                                <p>AI agent will leave a voicemail if the call goes to voicemail. Increases message delivery rate.</p>
                              </TooltipContent>
                            </Tooltip>
                          </div>
                          <Switch 
                            checked={callSettings.leaveVoicemail}
                            onCheckedChange={(checked) => setCallSettings({...callSettings, leaveVoicemail: checked})}
                          />
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-orange-50 border-2 border-black">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <UilPhone className="h-5 w-5" />
                            <span className="font-black uppercase">Recording</span>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <button className="p-0 bg-transparent border-none outline-none">
                                  <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                </button>
                              </TooltipTrigger>
                              <TooltipContent side="top">
                                <p>Record all calls for quality assurance and training. Stored securely with compliance standards.</p>
                              </TooltipContent>
                            </Tooltip>
                          </div>
                          <Switch 
                            checked={callSettings.callRecording}
                            onCheckedChange={(checked) => setCallSettings({...callSettings, callRecording: checked})}
                          />
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  <PremiumFeatureCard 
                    title="SMART SCHEDULING"
                    description="AI optimizes call times based on answer rates. Automatically adjusts schedule for each timezone."
                    price="$49/month"
                  />
                </div>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(3)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(6)}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">CALL SETTINGS</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Configure when your agents should call. We respect timezone settings and 
                          automatically skip weekends and holidays. Enable recording for quality assurance.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 4 */}
          {currentStep === 5 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilClock className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        SMART SCHEDULING TECHNOLOGY
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our AI analyzes <span className="font-black text-orange-600">millions of call patterns</span> to determine optimal contact times. 
                        Automatic timezone adjustments and holiday detection ensure your calls always happen at the right moment, maximizing connection rates while respecting boundaries.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Answer rate optimization</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Automatic timezone handling</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Holiday detection</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Business hours compliance</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 4 */}
          {currentStep === 5 && (
            <InfoSection customContent={{
              icon: <UilClock className="h-6 w-6 text-white" />,
              title: "Optimize Call Timing & Performance",
              description: "Configure intelligent call scheduling and performance settings that maximize connection rates while respecting boundaries. Our AI-powered timing optimization ensures calls happen when prospects are most likely to answer and engage.",
              benefits: [
                "AI-optimized call timing for 40% higher answer rates",
                "Automatic timezone handling across global contacts",
                "Smart retry logic that respects prospect preferences",
                "Compliance with business hours and holiday detection"
              ],
              faqs: [
                {
                  icon: <UilClock className="h-5 w-5" />,
                  question: "How does AI optimize call timing?",
                  answer: "Our system analyzes millions of successful calls to identify patterns. It considers factors like industry, time zone, historical answer rates, and even weather patterns to determine the optimal time to reach each specific contact."
                },
                {
                  icon: <UilVoicemail className="h-5 w-5" />,
                  question: "Should I enable voicemail messages?",
                  answer: "Yes! Voicemail messages increase callback rates by 23%. Our AI agents leave personalized, professional messages that reference your campaign goals and provide clear next steps for interested prospects to engage."
                },
                {
                  icon: <UilPhone className="h-5 w-5" />,
                  question: "How many retry attempts work best?",
                  answer: "We recommend 2-3 retry attempts with 2-3 days between calls. This balances persistence with respect for prospects' time. Our smart retry system adjusts timing based on previous call outcomes and prospect engagement signals."
                }
              ]
            }} />
          )}

          {/* Step 5: Preview & Launch */}
          {currentStep === 6 && (
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    PREVIEW & LAUNCH
                  </h1>
                </div>
                <div className="space-y-6">
                  {/* Campaign Summary */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Card className="bg-white border-2 border-black transform -rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Campaign</h4>
                        <p className="text-lg font-bold">{campaignName}</p>
                        <Badge className="bg-orange-200 text-black border-2 border-black mt-2">
                          {campaignType.toUpperCase()}
                        </Badge>
                      </CardContent>
                    </Card>
                    <Card className="bg-white border-2 border-black transform rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Agent</h4>
                        <p className="text-lg font-bold">
                          {mockAgents.find(a => a.id === selectedAgent)?.name || 'Selected Agent'}
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-white border-2 border-black transform -rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Contacts</h4>
                        <p className="text-2xl font-black text-orange-600">
                          {estimatedContacts || 250}
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-white border-2 border-black transform rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Schedule</h4>
                        <p className="text-sm font-bold">
                          {callSettings.startTime} - {callSettings.endTime}
                        </p>
                        <p className="text-xs text-gray-600">{callSettings.timezone}</p>
                      </CardContent>
                    </Card>
                  </div>

                  {/* Goals Recap */}
                  <Card className="bg-orange-50 border-2 border-black">
                    <CardContent className="p-4">
                      <h4 className="font-black uppercase mb-2">Goals</h4>
                      <p className="text-gray-700">{campaignGoals}</p>
                    </CardContent>
                  </Card>

                  {/* Launch Button */}
                  <div className="text-center">
                  <Button
                    className="px-12 py-4 h-16 text-xl font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={handleLaunchCampaign}
                  >
                    <UilPlay className="mr-2 h-6 w-6" />
                    LAUNCH CAMPAIGN
                  </Button>                    <p className="text-sm text-gray-600 mt-4">
                      You can pause or modify the campaign anytime from the dashboard
                    </p>
                  </div>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">LAUNCH READINESS</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Review all settings before launching. Your campaign will start immediately and 
                          begin calling contacts based on your schedule. You can pause or modify settings anytime.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Button
                  className="w-full mt-8 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                  onClick={() => setCurrentStep(6)}
                >
                  <UilArrowLeft className="mr-2 h-6 w-6" />
                  BACK TO SETTINGS
                </Button>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 5 */}
          {currentStep === 6 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilPlay className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        LAUNCH WITH CONFIDENCE
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Your campaign is ready to achieve <span className="font-black text-orange-600">exceptional results</span>. 
                        Our platform handles thousands of concurrent calls while maintaining conversation quality. Real-time monitoring and adjustment capabilities ensure optimal performance from day one.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Real-time performance tracking</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Instant campaign adjustments</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Comprehensive call analytics</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">24/7 monitoring</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 5 */}
          {currentStep === 6 && (
            <InfoSection customContent={{
              icon: <UilPlay className="h-6 w-6 text-white" />,
              title: "Ready to Launch Your Campaign",
              description: "Your AI-powered calling campaign is fully configured and ready to deliver outstanding results. With intelligent agents, optimized targeting, and smart scheduling, you're set to achieve exceptional conversion rates and meaningful business growth.",
              benefits: [
                "Instant deployment with professional-quality setup",
                "Real-time campaign monitoring and live adjustments",
                "Comprehensive analytics and performance insights",
                "24/7 system monitoring with automatic optimization"
              ],
              faqs: [
                {
                  icon: <UilPlay className="h-5 w-5" />,
                  question: "What happens immediately after I launch?",
                  answer: "Your AI agents begin calling according to your schedule within minutes. You'll see real-time updates in the dashboard showing call progress, connection rates, and conversation outcomes. The system automatically adapts for optimal performance."
                },
                {
                  icon: <UilAnalytics className="h-5 w-5" />,
                  question: "How can I track campaign performance?",
                  answer: "Access comprehensive dashboards with live call monitoring, conversion metrics, call recordings, transcripts, and detailed analytics. Get insights on best-performing scripts, optimal call times, and prospect engagement patterns."
                },
                {
                  icon: <UilClock className="h-5 w-5" />,
                  question: "Can I pause or modify the campaign after launching?",
                  answer: "Yes! You have full control to pause, adjust targeting, modify scripts, change scheduling, or stop the campaign at any time. All changes take effect immediately without losing your progress or data."
                }
              ]
            }} />
          )}

          {/* Step 6: Launch Progress */}
          {currentStep === 6 && (
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    {isLaunching ? 'LAUNCHING CAMPAIGN' : 'CAMPAIGN LAUNCHED'}
                  </h1>
                </div>
                <div className="space-y-6">
                  {isLaunching ? (
                    <>
                      <Progress value={launchProgress} className="h-4" />
                      <p className="text-center text-lg">
                        Setting up your campaign...
                      </p>
                    </>
                  ) : (
                    <>
                      {/* Campaign Stats */}
                      <div className="grid grid-cols-2 gap-4">
                        <Card className="bg-white border-2 border-black">
                          <CardContent className="p-4 text-center">
                            <UilPhone className="h-8 w-8 mx-auto mb-2 text-orange-600" />
                            <p className="text-sm font-bold uppercase text-gray-600">Total Contacts</p>
                            <p className="text-2xl font-black">{campaignStats?.totalContacts}</p>
                          </CardContent>
                        </Card>
                        <Card className="bg-white border-2 border-black">
                          <CardContent className="p-4 text-center">
                            <UilCalendarAlt className="h-8 w-8 mx-auto mb-2 text-blue-600" />
                            <p className="text-sm font-bold uppercase text-gray-600">Est. Duration</p>
                            <p className="text-2xl font-black">{campaignStats?.estimatedDuration}</p>
                          </CardContent>
                        </Card>
                      </div>

                      <Card className="bg-orange-50 border-2 border-black">
                        <CardContent className="p-4">
                          <h4 className="font-black uppercase mb-2">Campaign Details</h4>
                          <p className="text-gray-700">
                            <strong>Name:</strong> {campaignName}<br/>
                            <strong>Type:</strong> {campaignType}<br/>
                            <strong>Agent:</strong> {mockAgents.find(a => a.id === selectedAgent)?.name}<br/>
                            <strong>Status:</strong> <span className="text-green-600 font-bold">Active</span>
                          </p>
                        </CardContent>
                      </Card>

                      <p className="text-xl text-center text-gray-700">
                        Your campaign is now live! Calls will begin according to your schedule.
                      </p>

                      <div className="flex flex-col sm:flex-row gap-4">
                        <Button
                          className="flex-1 h-14 text-lg font-black uppercase bg-orange-600 hover:bg-orange-700 text-white"
                          onClick={() => window.location.href = '/dashboard/calls'}
                        >
                          VIEW CAMPAIGN
                          <UilAnalytics className="ml-2 h-6 w-6" />
                        </Button>
                        <Button
                          className="flex-1 h-14 text-lg font-black uppercase bg-[rgb(0,82,255)] hover:bg-blue-600 text-white"
                          onClick={() => window.location.href = '/dashboard'}
                        >
                          GO TO DASHBOARD
                          <UilArrowRight className="ml-2 h-6 w-6" />
                        </Button>
                      </div>
                    </>
                  )}
                </div>

                {/* Info Box */}
                {!isLaunching && (
                  <Card className="bg-yellow-100 border-2 border-black mt-6">
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <Button 
                          size="sm" 
                          variant="neutral" 
                          className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                        >
                          <UilInfoCircle className="h-4 w-4" />
                        </Button>
                        <div>
                          <p className="text-sm font-bold">CAMPAIGN ACTIVE</p>
                          <p className="text-sm text-gray-700 mt-1">
                            Your AI agents are now making calls. Track progress in real-time from the dashboard. 
                            You&apos;ll receive notifications for important events and completed conversations.
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )}
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 6 */}
          {currentStep === 6 && !isLaunching && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-green-600 hover:bg-green-700 text-white border-black"
                    >
                      <UilCheckCircle className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        CAMPAIGN LIVE & SCALING
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Your AI agents are now <span className="font-black text-orange-600">actively making calls</span> and engaging with prospects. 
                        Our system automatically scales to handle response volumes while maintaining quality. Every conversation improves future performance through machine learning.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Live call monitoring</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Automatic scaling</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Real-time optimization</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Performance learning</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 6 */}
          {currentStep === 6 && !isLaunching && (
            <InfoSection customContent={{
              icon: <UilCheckCircle className="h-6 w-6 text-white" />,
              title: "Your Campaign is Now Live",
              description: "Congratulations! Your AI-powered calling campaign is now active and delivering results. Monitor real-time performance, track conversion rates, and watch as your AI agents engage prospects with professional, personalized conversations that drive business growth.",
              benefits: [
                "Live call monitoring with real-time conversation insights",
                "Automatic performance optimization through machine learning",
                "Instant notification of qualified leads and appointments",
                "Continuous improvement with every successful interaction"
              ],
              faqs: [
                {
                  icon: <UilAnalytics className="h-5 w-5" />,
                  question: "Where can I view live campaign performance?",
                  answer: "Access your comprehensive dashboard to see real-time call metrics, live call monitoring, conversation transcripts, lead qualification status, and detailed performance analytics. Get instant notifications for important events and successful conversions."
                },
                {
                  icon: <UilCheckCircle className="h-5 w-5" />,
                  question: "How will I know when prospects are interested?",
                  answer: "The system sends instant notifications for qualified leads, scheduled appointments, and positive responses. You'll receive detailed summaries with prospect information, conversation highlights, and recommended next steps for follow-up."
                },
                {
                  icon: <UilClock className="h-5 w-5" />,
                  question: "What should I expect in the first few hours?",
                  answer: "Initial calls begin immediately based on your schedule. You'll see connection rates, conversation quality metrics, and early performance indicators within the first hour. The AI learns quickly and optimizes approach for better results throughout the day."
                }
              ]
            }} />
          )}
        </div>
      </div>

      {/* Navigation */}
      {currentStep > 1 && currentStep < 6 && (
        <div className="fixed bottom-8 left-1/2 transform -translate-x-1/2">
          <OnboardingNav 
            currentStep={currentStep - 1} 
            totalSteps={6}
            onStepChange={(step) => handleStepChange(step + 1)}
          />
        </div>
      )}

      {/* Verification Modal */}
      {showVerification && (
        <VerificationModal
          isOpen={showVerification}
          onClose={() => setShowVerification(false)}
          onComplete={handleVerificationComplete}
          devMode={devMode}
        />
      )}
      
      <div className="mt-8">
        <OnboardingFooter />
      </div>
    </div>
    </TooltipProvider>
  );
}


================================================
FILE: src/app/onboarding/calls/page.tsx.broken
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import OnboardingNav from '@/components/custom/onboarding-nav';
import PremiumFeatureCard from '@/components/custom/premium-feature-card';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import InfoSection from '@/components/custom/info-section';
import { useAction } from "convex/react";
import { api } from "@convex/_generated/api";
import { useConvexErrorHandler } from '@/hooks/useConvexErrorHandler';
import { StarBadge, Star15 } from '@/components/ui/star';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { 
  UilPhone,
  UilPhoneVolume,
  UilOutgoingCall,
  UilMissedCall,
  UilCalendarAlt,
  UilClock,
  UilUpload,
  UilUsersAlt,
  UilRobot,
  UilArrowRight,
  UilArrowLeft,
  UilCheckCircle,
  UilPlay,
  UilPause,
  UilInfoCircle,
  UilChartGrowth,
  UilBell,
  UilVoicemail,
  UilClipboardNotes,
  UilListUl,
  UilAnalytics,
  UilTachometerFast,
  UilBriefcase,
  UilQuestionCircle
} from '@tooni/iconscout-unicons-react';

interface Agent {
  id: string;
  name: string;
  language: string;
  pitch: string;
}

interface CallSettings {
  startTime: string;
  endTime: string;
  timezone: string;
  maxCallsPerDay: number;
  retryAttempts: number;
  daysBetweenRetries: number;
  leaveVoicemail: boolean;
  callRecording: boolean;
}

const mockAgents: Agent[] = [
  { id: 'agent-1', name: 'Sales Champion', language: 'English', pitch: 'Discovery Calls' },
  { id: 'agent-2', name: 'Support Hero', language: 'English', pitch: 'Customer Support' },
  { id: 'agent-3', name: 'Booking Pro', language: 'English', pitch: 'Appointment Setter' },
];

interface Voice {
  id: string;
  name: string;
  description: string;
  previewText: string;
  premium?: boolean;
}

const voices: Voice[] = [
  {
    id: 'voice-1',
    name: 'Professional Sarah',
    description: 'Clear, confident business voice',
    previewText: "Hello, this is Sarah calling about your business growth opportunities..."
  },
  {
    id: 'voice-2',
    name: 'Friendly Alex',
    description: 'Warm, approachable conversational tone',
    previewText: "Hi there! I hope you&apos;re having a great day. I&apos;m reaching out to discuss..."
  },
  {
    id: 'voice-3',
    name: 'Executive Maya',
    description: 'Sophisticated, authoritative presence',
    previewText: "Good afternoon. This is Maya with an important business opportunity..."
  },
  {
    id: 'voice-4',
    name: 'Energetic Jake',
    description: 'Enthusiastic, high-energy approach',
    previewText: "Hey! Jake here with some exciting news about your business potential..."
  },
  {
    id: 'custom',
    name: 'Create Your Own',
    description: 'Clone your own voice for personalized calls',
    previewText: "Use your own voice for authentic conversations",
    premium: true
  }
];

const timezones = [
  'America/New_York',
  'America/Chicago',
  'America/Denver',
  'America/Los_Angeles',
  'Europe/London',
  'Europe/Paris',
  'Asia/Tokyo',
  'Australia/Sydney'
];

export default function CallsOnboarding() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [campaignName, setCampaignName] = React.useState('');
  const [campaignGoals, setCampaignGoals] = React.useState('');
  const [campaignType, setCampaignType] = React.useState('');
  const [selectedAgent, setSelectedAgent] = React.useState('');
  const [targetListType, setTargetListType] = React.useState('');
  const [uploadedFile, setUploadedFile] = React.useState<File | null>(null);
  const [manualNumbers, setManualNumbers] = React.useState('');
  const [callSettings, setCallSettings] = React.useState<CallSettings>({
    startTime: '09:00',
    endTime: '17:00',
    timezone: 'America/New_York',
    maxCallsPerDay: 100,
    retryAttempts: 3,
    daysBetweenRetries: 2,
    leaveVoicemail: true,
    callRecording: true
  });

  const [selectedVoice, setSelectedVoice] = React.useState('');
  const [isPlaying, setIsPlaying] = React.useState<string | null>(null);
  const [isLaunching, setIsLaunching] = React.useState(false);
  const [launchProgress, setLaunchProgress] = React.useState(0);
  const [showVerification, setShowVerification] = React.useState(false);
  const [campaignStats, setCampaignStats] = React.useState<any>(null);
  const [estimatedContacts, setEstimatedContacts] = React.useState(0);

  // Auto-adjust max calls based on contact count
  React.useEffect(() => {
    if (estimatedContacts > 0) {
      const maxCalls = Math.min(Math.max(10, estimatedContacts * 2), 200);
      setCallSettings(prev => ({ ...prev, maxCallsPerDay: maxCalls }));
    }
  }, [estimatedContacts]);
  const [devMode, setDevMode] = React.useState(false);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setUploadedFile(e.target.files[0]);
      // Simulate contact count
      setEstimatedContacts(Math.floor(Math.random() * 500) + 100);
    }
  };

  const canProceedFromStep1 = () => {
    return campaignName.trim() !== '' && campaignGoals.trim() !== '' && campaignType !== '';
  };

  const canProceedFromStep4 = () => {
    if (targetListType === 'upload' && uploadedFile) return true;
    if (targetListType === 'manual' && manualNumbers.trim()) return true;
    if (targetListType === 'existing') return true;
    return false;
  };

  const handleLaunchCampaign = async () => {
    setIsLaunching(true);
    setCurrentStep(6);
    
    // Show verification modal immediately
    setShowVerification(true);
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerification(false);
    
    // Calculate realistic duration based on settings
    const contactsCount = estimatedContacts || 250;
    const dailyCalls = callSettings.maxCallsPerDay;
    const daysNeeded = Math.ceil(contactsCount / dailyCalls);
    const estimatedDuration = daysNeeded === 1 ? '1 day' : 
                             daysNeeded <= 3 ? `${daysNeeded} days` :
                             daysNeeded <= 7 ? '1 week' : 
                             `${Math.ceil(daysNeeded / 7)} weeks`;
    
    // Set campaign stats
    setCampaignStats({
      totalContacts: contactsCount,
      callsScheduled: contactsCount,
      estimatedDuration: estimatedDuration,
      startTime: new Date().toLocaleString(),
      status: 'Active'
    });

    // Collect all data for final display
    const finalData = {
      campaignName,
      campaignGoals,
      campaignType,
      selectedAgent,
      selectedVoice,
      targetListType,
      manualNumbers: targetListType === 'manual' ? manualNumbers : null,
      csvFile: targetListType === 'csv' ? csvFile?.name : null,
      estimatedContacts,
      callSettings,
      email,
      phone,
      campaignStats: {
        totalContacts: contactsCount,
        callsScheduled: contactsCount,
        estimatedDuration,
        startTime: new Date().toLocaleString(),
        status: 'Active'
      }
    };

    console.log('=== FINAL CAMPAIGN DATA ===');
    console.log(JSON.stringify(finalData, null, 2));
    console.log('==========================');
    
    setIsLaunching(false);
    setCurrentStep(7);
  };

  const handleStepChange = (step: number) => {
    if (step < currentStep || step === 1) {
      setCurrentStep(step);
    }
  };

  // Dev mode auto-fill effect
  React.useEffect(() => {
    if (devMode) {
      setCampaignName('Q4 Sales Outreach Campaign');
      setCampaignGoals('Generate 50 qualified leads for our SaaS platform through targeted outreach to mid-market companies');
      setCampaignType('sales');
      setSelectedAgent('agent-1');
      setSelectedVoice('voice-1');
      setTargetListType('manual');
      setManualNumbers('+1 555-0123\n+1 555-0124\n+1 555-0125\n+1 555-0126\n+1 555-0127');
      setEstimatedContacts(6);
      setCallSettings({
        startTime: '09:00',
        endTime: '17:00',
        timezone: 'America/New_York',
        maxCallsPerDay: 12, // Auto-adjusted: 6 contacts × 2 = 12 max calls
        retryAttempts: 3,
        daysBetweenRetries: 2,
        leaveVoicemail: true,
        callRecording: true
      });
      
      console.log('=== DEV MODE AUTO-FILL ACTIVATED ===');
      console.log('Campaign Name:', 'Q4 Sales Outreach Campaign');
      console.log('Campaign Goals:', 'Generate 50 qualified leads...');
      console.log('Campaign Type:', 'sales');
      console.log('Selected Agent:', 'agent-1');
      console.log('Selected Voice:', 'voice-1');
      console.log('Target List Type:', 'manual');
      console.log('Estimated Contacts:', 6);
      console.log('Call Settings:', {
        startTime: '09:00',
        endTime: '17:00',
        timezone: 'America/New_York',
        maxCallsPerDay: 12,
        retryAttempts: 3,
        daysBetweenRetries: 2,
        leaveVoicemail: true,
        callRecording: true
      });
    }
  }, [devMode]);

  const handlePlayVoice = (voiceId: string, previewText: string) => {
    setIsPlaying(voiceId);
    // Simulate audio playback
    setTimeout(() => {
      setIsPlaying(null);
    }, 2000);
  };

  return (
    <TooltipProvider>
      <div 
        className="min-h-screen bg-orange-500 relative pb-8" 
        style={{ 
          fontFamily: 'Noyh-Bold, sans-serif',
          backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
          backgroundSize: '60px 60px'
        }}
      >
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-4 right-4 z-50">
          <Button
            onClick={() => setDevMode(!devMode)}
            className={`h-10 px-4 text-sm font-black uppercase ${
              devMode
                ? 'bg-green-500 hover:bg-green-600 text-white'
                : 'bg-gray-200 hover:bg-gray-300 text-black'
            } border-2 border-black`}
          >
            DEV MODE {devMode ? 'ON' : 'OFF'}
          </Button>
        </div>
      )}
      <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          {/* Persistent Title Card */}
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-orange-600 border-2 border-black flex items-center justify-center">
                <UilPhone className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-orange-500 border-2 border-black flex items-center justify-center">
                <UilPhoneVolume className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-orange-600 hover:bg-orange-700 border-4 border-black p-0">
                {currentStep === 1 && <UilBriefcase className="h-12 w-12 text-white" />}
                {currentStep === 2 && <UilRobot className="h-12 w-12 text-white" />}
                {currentStep === 3 && <UilPhone className="h-12 w-12 text-white" />}
                {currentStep === 4 && <UilUsersAlt className="h-12 w-12 text-white" />}
                {currentStep === 5 && <UilClock className="h-12 w-12 text-white" />}
                {currentStep === 6 && <UilPlay className="h-12 w-12 text-white" />}
                {currentStep === 7 && <UilCheckCircle className="h-12 w-12 text-white" />}
              </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'CAMPAIGN CREATION'}
                {currentStep === 2 && 'AGENT SELECTION'}
                {currentStep === 3 && 'VOICE SELECTION'}
                {currentStep === 4 && 'TARGET AUDIENCE'}
                {currentStep === 5 && 'CALL CONFIGURATION'}
                {currentStep === 6 && 'LAUNCH READY'}
                 {currentStep === 7 && 'CAMPAIGN LAUNCHED'}              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'BUILD YOUR OUTREACH STRATEGY'}
                {currentStep === 2 && 'CHOOSE YOUR AI REPRESENTATIVE'}
                {currentStep === 3 && 'SELECT THE PERFECT VOICE'}
                {currentStep === 4 && 'DEFINE WHO TO REACH'}
                {currentStep === 5 && 'OPTIMIZE YOUR CAMPAIGN'}
                {currentStep === 6 && 'REVIEW AND DEPLOY'}
                 {currentStep === 7 && 'YOUR CAMPAIGN IS LIVE'}              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-orange-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-orange-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-orange-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>
          {/* Step 1: Campaign Setup */}
          {currentStep === 1 && (
            <div className="space-y-8">
              {/* Campaign Details Card */}
              <Card className="transform -rotate-1">
                <CardContent className="p-8">
                  <div className="text-center mb-8">
                    <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                      CAMPAIGN SETUP
                    </h1>
                  </div>
                  
                  <div className="space-y-6">
                    <div>
                      <label className="text-xl font-black uppercase mb-3 block">
                        CAMPAIGN NAME
                      </label>
                      <Input
                        type="text"
                        value={campaignName}
                        onChange={(e) => setCampaignName(e.target.value)}
                        placeholder="e.g., Q4 Sales Blitz, Customer Feedback"
                        className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
                      />
                    </div>

                    <div>
                      <label className="text-xl font-black uppercase mb-3 block">
                        CAMPAIGN TYPE
                      </label>
                      <TooltipProvider>
                      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                        <div className="relative">
                          {campaignType === 'sales' && (
                            <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                </div>
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                    SELECTED
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Card 
                                className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                                  campaignType === 'sales' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                                }`}
                                onClick={() => setCampaignType('sales')}
                              >
                                <CardContent className="p-4 text-center">
                                  <UilTachometerFast className="h-8 w-8 mx-auto mb-2" />
                                  <h4 className="font-black uppercase">SALES</h4>
                                  <p className="text-sm text-gray-600">Outbound prospecting</p>
                                </CardContent>
                              </Card>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Focused on qualifying leads and booking meetings. Agents use persistent follow-up and objection handling techniques.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="relative">
                          {campaignType === 'followup' && (
                            <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                </div>
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                    SELECTED
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Card 
                                className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                                  campaignType === 'followup' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                                }`}
                                onClick={() => setCampaignType('followup')}
                              >
                                <CardContent className="p-4 text-center">
                                  <UilBell className="h-8 w-8 mx-auto mb-2" />
                                  <h4 className="font-black uppercase">FOLLOW-UP</h4>
                                  <p className="text-sm text-gray-600">Re-engage leads</p>
                                </CardContent>
                              </Card>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Re-engage existing leads or customers. Agents focus on relationship building and identifying new opportunities.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="relative">
                          {campaignType === 'survey' && (
                            <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                </div>
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                    SELECTED
                                  </span>
                                </div>
                              </div>
                            </div>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Card 
                                className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                                  campaignType === 'survey' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                                }`}
                                onClick={() => setCampaignType('survey')}
                              >
                                <CardContent className="p-4 text-center">
                                  <UilClipboardNotes className="h-8 w-8 mx-auto mb-2" />
                                  <h4 className="font-black uppercase">SURVEY</h4>
                                  <p className="text-sm text-gray-600">Gather feedback</p>
                                </CardContent>
                              </Card>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Collect customer feedback and insights. Agents conduct structured interviews and ensure high completion rates.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                      </div>
                      </TooltipProvider>
                    </div>

                    <div>
                      <label className="text-xl font-black uppercase mb-3 block">
                        CAMPAIGN GOALS
                      </label>
                      <Textarea
                        value={campaignGoals}
                        onChange={(e) => setCampaignGoals(e.target.value)}
                        placeholder="What do you want to achieve? e.g., Book 50 demos, collect customer feedback, qualify 100 leads..."
                        className="min-h-[120px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
                      />
                    </div>
                  </div>

                  {/* Info Box */}
                  <Card className="bg-yellow-100 border-2 border-black mt-6">
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <Button 
                          size="sm" 
                          variant="neutral" 
                          className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                        >
                          <UilInfoCircle className="h-4 w-4" />
                        </Button>
                        <div>
                          <p className="text-sm font-bold">CAMPAIGN TIPS</p>
                          <p className="text-sm text-gray-700 mt-1">
                            Give your campaign a clear name and specific goals. This helps our AI agents understand 
                            your objectives and adapt their conversations accordingly.
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Button
                    className="w-full mt-8 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(2)}
                    disabled={!canProceedFromStep1()}
                  >
                    <span className="flex items-center justify-center">
                      CONTINUE
                      <UilArrowRight className="ml-2 h-6 w-6" />
                    </span>
                  </Button>
                </CardContent>
              </Card>

              
              {/* Custom Info Cards */}
              <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilChartGrowth className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        CAMPAIGN PERFORMANCE AT SCALE
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our campaigns achieve <span className="font-black text-orange-600">3x higher connection rates</span> than traditional dialers. 
                        AI-powered scheduling ensures calls happen at optimal times, while intelligent retry logic maximizes reach without annoying prospects.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Real-time campaign analytics</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">AI-optimized call timing</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Smart retry logic</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Voicemail detection</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    >
                      <UilAnalytics className="h-6 w-6 text-black" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        CONVERSION OPTIMIZATION
                      </h3>
                      <p className="text-gray-700 text-lg leading-relaxed">
                        Track every interaction and optimize for conversions. Our AI learns from each call, improving scripts and timing to 
                        <span className="font-black text-orange-600"> boost your conversion rates by up to 40%</span>. Get detailed insights on what works 
                        and what doesn&apos;t, with actionable recommendations for improvement.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 1 */}
          {currentStep === 1 && (
            <InfoSection customContent={{
              icon: <UilBriefcase className="h-6 w-6 text-white" />,
              title: "Build Powerful Outreach Campaigns",
              description: "Create targeted campaigns that convert. Our AI-powered approach combines smart goal setting, intelligent campaign types, and strategic planning to maximize your outreach success and drive meaningful business results.",
              benefits: [
                "3x higher conversion rates than traditional dialers",
                "AI-optimized campaign strategies and timing",
                "Real-time performance tracking and analytics",
                "Intelligent lead qualification and scoring"
              ],
              faqs: [
                {
                  icon: <UilBriefcase className="h-5 w-5" />,
                  question: "What makes campaign types important?",
                  answer: "Different campaign types are optimized for specific outcomes. Sales campaigns focus on conversion and qualification, Follow-up campaigns nurture existing relationships, and Survey campaigns gather valuable feedback - each with tailored AI strategies."
                },
                {
                  icon: <UilChartGrowth className="h-5 w-5" />,
                  question: "How do clear goals improve performance?",
                  answer: "Specific goals help our AI adapt conversation strategies in real-time. Whether booking demos or qualifying leads, clear objectives enable the system to optimize scripts, timing, and follow-up sequences for maximum success."
                },
                {
                  icon: <UilTachometerFast className="h-5 w-5" />,
                  question: "Can I modify my campaign after launching?",
                  answer: "Absolutely! You can pause, modify goals, adjust targeting, or change campaign types anytime. Our system adapts immediately to new parameters while maintaining conversation quality and tracking performance changes."
                }
              ]
            }} />
          )}

          {/* Step 2: Agent Selection */}
          {currentStep === 2 && (
            <Card className="transform -rotate-1">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    SELECT YOUR AGENT
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Choose which AI agent will handle your campaign calls
                </p>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                  {mockAgents.map((agent) => (
                    <div key={agent.id} className="relative">
                      {selectedAgent === agent.id && (
                        <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                          <div className="relative">
                            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                              <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                            </div>
                            <div className="absolute inset-0 flex items-center justify-center">
                              <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                SELECTED
                              </span>
                            </div>
                          </div>
                        </div>
                      )}
                      <Card 
                        className={`cursor-pointer border-4 border-black hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all ${
                          selectedAgent === agent.id ? 'bg-orange-100 shadow-[8px_8px_0_rgba(0,0,0,1)]' : 'bg-white'
                        }`}
                        onClick={() => setSelectedAgent(agent.id)}
                      >
                        <CardContent className="p-6">
                        <div className="flex items-start gap-4">
                          <Button size="icon" variant="header" className="w-16 h-16 bg-orange-500 hover:bg-orange-600 flex-shrink-0">
                            <UilRobot className="h-8 w-8 text-white" />
                          </Button>
                          <div className="flex-1">
                            <h3 className="text-xl font-black uppercase mb-2">{agent.name}</h3>
                            <div className="flex flex-wrap gap-2">
                              <Badge className="bg-orange-200 text-black border-2 border-black">
                                {agent.language}
                              </Badge>
                              <Badge className="bg-yellow-200 text-black border-2 border-black">
                                {agent.pitch}
                              </Badge>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                    </div>
                  ))}
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">AGENT SELECTION</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Choose an agent that matches your campaign type. Sales agents are persistent, 
                          support agents are empathetic, and booking agents focus on scheduling.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(1)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(3)}
                    disabled={!selectedAgent}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 2 */}
          {currentStep === 2 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilRobot className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        AI-POWERED AGENT EXCELLENCE
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our AI agents achieve <span className="font-black text-orange-600">85% conversation success rates</span> by adapting their approach in real-time. 
                        Each agent specializes in different conversation styles, from assertive sales pitches to empathetic support interactions.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Natural conversation flow</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Objection handling</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Sentiment analysis</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Multi-language support</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 2 */}
          {currentStep === 2 && (
            <InfoSection customContent={{
              icon: <UilRobot className="h-6 w-6 text-white" />,
              title: "Choose Your Perfect AI Representative",
              description: "Select the AI agent that best matches your campaign goals. Each agent is trained with specialized conversation skills, industry knowledge, and personality traits optimized for different business scenarios and customer interactions.",
              benefits: [
                "85% conversation success rates across all agent types",
                "Real-time conversation adaptation and objection handling",
                "Specialized training for sales, support, and appointments",
                "Natural personality matching for authentic interactions"
              ],
              faqs: [
                {
                  icon: <UilRobot className="h-5 w-5" />,
                  question: "What makes each agent different?",
                  answer: "Sales Champion excels at discovery calls and lead qualification with assertive techniques. Support Hero handles customer service with empathy and problem-solving skills. Booking Pro specializes in appointment scheduling with persistence and calendar management."
                },
                {
                  icon: <UilUsersAlt className="h-5 w-5" />,
                  question: "How do agents handle different personality types?",
                  answer: "Our AI agents use real-time sentiment analysis to adapt their approach. They can shift from formal to casual, adjust pace and enthusiasm, and modify their questioning style based on prospect responses and engagement levels."
                },
                {
                  icon: <UilInfoCircle className="h-5 w-5" />,
                  question: "Can agents speak multiple languages fluently?",
                  answer: "Yes! Each agent supports multiple languages with native-level pronunciation and cultural awareness. They understand regional business customs, appropriate formality levels, and industry-specific terminology for natural conversations."
                }
              ]
            }} />
          )}

          {/* Step 3: Voice Selection */}
          {currentStep === 3 && (
            <Card className="transform -rotate-1">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    SELECT YOUR VOICE
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Choose the perfect voice for your AI agent
                </p>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                  {voices.filter(voice => !voice.premium).map((voice) => (
                    <div key={voice.id} className="relative">
                      {selectedVoice === voice.id && (
                        <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                          <div className="relative">
                            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                              <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                            </div>
                            <div className="absolute inset-0 flex items-center justify-center">
                              <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                SELECTED
                              </span>
                            </div>
                          </div>
                        </div>
                      )}
                      <Card 
                        className={`cursor-pointer border-4 border-black hover:shadow-[8px_8px_0_rgba(0,0,0,1)] transition-all ${
                          selectedVoice === voice.id ? 'bg-orange-100 shadow-[8px_8px_0_rgba(0,0,0,1)]' : 'bg-white'
                        }`}
                        onClick={() => setSelectedVoice(voice.id)}
                      >
                        <CardContent className="p-6">
                          <div className="flex items-start gap-4">
                            <Button size="icon" variant="header" className="w-16 h-16 bg-orange-500 hover:bg-orange-600 flex-shrink-0">
                              <UilPhone className="h-8 w-8 text-white" />
                            </Button>
                            <div className="flex-1">
                              <h3 className="text-xl font-black uppercase mb-2">{voice.name}</h3>
                              <p className="text-gray-700 mb-3">{voice.description}</p>
                              <Button
                                size="sm"
                                variant="outline"
                                className="border-2 border-black hover:bg-orange-100"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handlePlayVoice(voice.id, voice.previewText);
                                }}
                              >
                                {isPlaying === voice.id ? (
                                  <>
                                    <UilPause className="h-4 w-4 mr-1" />
                                    PLAYING
                                  </>
                                ) : (
                                  <>
                                    <UilPlay className="h-4 w-4 mr-1" />
                                    PREVIEW
                                  </>
                                )}
                              </Button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  ))}
                  
                  <div className="md:col-span-2">
                    <PremiumFeatureCard 
                      title="CREATE YOUR OWN VOICE"
                      description="Clone your own voice for personalized calls. Use advanced AI to create a perfect replica of your voice for authentic conversations with prospects."
                      price="$99/month"
                    />
                  </div>
                </div>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(2)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(6)}
                    disabled={!selectedVoice}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">VOICE SELECTION</p>
                          <p className="text-sm text-gray-700 mt-1">
                            Choose a voice that matches your brand personality. Preview each option to hear how they&apos;ll sound to your prospects.
                          </p>                      </div>
                    </div>
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          )}

          {/* Step 4: Target List */}
          {currentStep === 4 && (
            <Card className="transform rotate-1">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    TARGET LIST
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Who should we call?
                </p>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                  <div className="relative">
                    {targetListType === 'upload' && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        targetListType === 'upload' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => setTargetListType('upload')}
                    >
                      <CardContent className="p-6 text-center">
                        <UilUpload className="h-8 w-8 mx-auto mb-2" />
                        <h4 className="font-black uppercase mb-1">UPLOAD CSV</h4>
                        <p className="text-sm text-gray-600">Import your contact list</p>
                      </CardContent>
                    </Card>
                  </div>
                  <div className="relative">
                    {targetListType === 'existing' && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        targetListType === 'existing' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => setTargetListType('existing')}
                    >
                      <CardContent className="p-6 text-center">
                        <UilUsersAlt className="h-8 w-8 mx-auto mb-2" />
                        <h4 className="font-black uppercase mb-1">EXISTING LEADS</h4>
                        <p className="text-sm text-gray-600">Use Hunter results</p>
                      </CardContent>
                    </Card>
                  </div>
                  <div className="relative">
                    {targetListType === 'manual' && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        targetListType === 'manual' ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => setTargetListType('manual')}
                    >
                      <CardContent className="p-6 text-center">
                        <UilListUl className="h-8 w-8 mx-auto mb-2" />
                        <h4 className="font-black uppercase mb-1">MANUAL ENTRY</h4>
                        <p className="text-sm text-gray-600">Add numbers directly</p>
                      </CardContent>
                    </Card>
                  </div>
                </div>

                {targetListType === 'upload' && (
                  <Card className="bg-orange-50 border-4 border-black">
                    <CardContent className="p-8">
                      <div className="border-4 border-dashed border-black rounded-lg p-8 text-center bg-white">
                        <input
                          type="file"
                          accept=".csv"
                          onChange={handleFileUpload}
                          className="hidden"
                          id="csv-upload"
                        />
                        <label htmlFor="csv-upload" className="cursor-pointer">
                          <Button size="icon" variant="header" className="w-16 h-16 mb-4 bg-orange-500 hover:bg-orange-600">
                            <UilUpload className="h-8 w-8 text-white" />
                          </Button>
                          <p className="text-lg font-bold">Click to upload CSV file</p>
                          <p className="text-sm text-gray-600 mt-2">Format: Name, Phone Number, Company (optional)</p>
                        </label>
                      </div>
                      {uploadedFile && (
                        <div className="mt-4 p-4 bg-green-50 border-2 border-black rounded">
                          <p className="font-bold">✓ {uploadedFile.name} uploaded</p>
                          <p className="text-sm text-gray-600">Estimated contacts: {estimatedContacts}</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}

                {targetListType === 'existing' && (
                  <Card className="bg-orange-50 border-4 border-black">
                    <CardContent className="p-8 text-center">
                      <UilUsersAlt className="h-16 w-16 mx-auto mb-4 text-orange-600" />
                      <h3 className="text-xl font-black uppercase mb-2">250 LEADS AVAILABLE</h3>
                      <p className="text-gray-700 mb-4">From your recent Hunter search</p>
                      <Button className="bg-orange-500 hover:bg-orange-600 text-white">
                        USE ALL LEADS
                      </Button>
                    </CardContent>
                  </Card>
                )}

                {targetListType === 'manual' && (
                  <Card className="bg-orange-50 border-4 border-black">
                    <CardContent className="p-8">
                      <label className="text-lg font-black uppercase mb-3 block">
                        PHONE NUMBERS (ONE PER LINE)
                      </label>
                      <Textarea
                        value={manualNumbers}
                        onChange={(e) => setManualNumbers(e.target.value)}
                        placeholder="+1 555-0123&#10;+1 555-0124&#10;+1 555-0125"
                        className="min-h-[200px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none font-mono"
                      />
                      <p className="text-sm text-gray-600 mt-2">
                        Enter phone numbers with country code
                      </p>
                    </CardContent>
                  </Card>
                )}

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(3)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(6)}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">TARGET LIST TIPS</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Upload a CSV for bulk imports, use existing leads from Hunter searches, 
                          or manually enter numbers for smaller campaigns. We&apos;ll validate all numbers before calling.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 3 */}
          {currentStep === 4 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilUsersAlt className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        INTELLIGENT LEAD MANAGEMENT
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our system validates and enriches every contact before calling. <span className="font-black text-orange-600">Invalid numbers are automatically filtered</span>, 
                        while valid contacts are enhanced with timezone detection and optimal call time predictions.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Phone number validation</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Timezone detection</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">DNC list checking</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Duplicate removal</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 3 */}
          {currentStep === 4 && (
            <InfoSection customContent={{
              icon: <UilUsersAlt className="h-6 w-6 text-white" />,
              title: "Smart Target Audience Management",
              description: "Upload, import, or select your ideal prospects with intelligent data validation and enrichment. Our system automatically optimizes contact lists for maximum reachability while ensuring compliance with calling regulations.",
              benefits: [
                "Automatic phone number validation and formatting",
                "Real-time timezone detection for optimal call timing",
                "DNC list checking and compliance management",
                "Duplicate detection and contact data enrichment"
              ],
              faqs: [
                {
                  icon: <UilUpload className="h-5 w-5" />,
                  question: "What format should my CSV file be in?",
                  answer: "Upload CSV files with columns for Name, Phone Number, and optionally Company. Our system accepts various formats and automatically standardizes the data for optimal calling. Include country codes for international numbers."
                },
                {
                  icon: <UilUsersAlt className="h-5 w-5" />,
                  question: "How does the system validate phone numbers?",
                  answer: "We verify number format, check for valid area codes, detect mobile vs landline, and cross-reference against Do Not Call lists. Invalid numbers are automatically flagged and excluded from your campaign to maintain compliance."
                },
                {
                  icon: <UilClipboardNotes className="h-5 w-5" />,
                  question: "Can I use leads from Hunter or other sources?",
                  answer: "Absolutely! Import existing leads from Hunter searches, CRM exports, or any lead generation tool. Our system will validate and enhance the data with additional information like timezone and optimal calling times."
                }
              ]
            }} />
          )}

          {/* Step 4: Call Settings */}
          {currentStep === 5 && (
            <Card className="transform -rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    CALL SETTINGS
                  </h1>
                </div>
                <div className="space-y-6">
                  {/* Schedule Settings */}
                  <Card className="bg-orange-50 border-2 border-black">
                    <CardContent className="p-6">
                      <h3 className="text-lg font-black uppercase mb-4 flex items-center gap-2">
                        <UilClock className="h-5 w-5" />
                        SCHEDULE
                      </h3>
                      <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                          <label className="text-sm font-bold uppercase">Start Time</label>
                          <Input
                            type="time"
                            value={callSettings.startTime}
                            onChange={(e) => setCallSettings({...callSettings, startTime: e.target.value})}
                            className="h-12 font-semibold border-2 border-black"
                          />
                        </div>
                        <div>
                          <label className="text-sm font-bold uppercase">End Time</label>
                          <Input
                            type="time"
                            value={callSettings.endTime}
                            onChange={(e) => setCallSettings({...callSettings, endTime: e.target.value})}
                            className="h-12 font-semibold border-2 border-black"
                          />
                        </div>
                      </div>
                      <div>
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <label className="text-sm font-bold uppercase cursor-help">
                                Timezone
                                <UilInfoCircle className="inline-block h-3 w-3 ml-1 text-gray-600" />
                              </label>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>All call times will be scheduled according to this timezone. Calls automatically adjust for each contact&apos;s local time.</p>
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                        <Select
                          value={callSettings.timezone}
                          onValueChange={(value) => setCallSettings({...callSettings, timezone: value})}
                        >
                          <SelectTrigger className="w-full h-12 px-4 text-lg font-semibold border-4 border-black bg-white hover:bg-gray-50">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] bg-white">
                            {timezones.map(tz => (
                              <SelectItem key={tz} value={tz}>{tz}</SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Capacity Settings */}
                  <div>
                    <div className="flex items-center gap-2 mb-3">
                      <label className="text-lg font-black uppercase block">
                        MAX CALLS PER DAY: {callSettings.maxCallsPerDay}
                      </label>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button className="p-0 bg-transparent border-none outline-none">
                            <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent side="top">
                          <p>Maximum number of calls your agents will make in a 24-hour period. Helps manage campaign pacing.</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <Slider 
                      value={[callSettings.maxCallsPerDay]}
                      onValueChange={(value) => setCallSettings({...callSettings, maxCallsPerDay: value[0]})}
                      min={1}
                      max={Math.max(20, Math.min(200, estimatedContacts * 5))}
                      step={1}
                      className="mb-2"
                    />
                    <div className="text-sm text-gray-600 space-y-1">
                      {estimatedContacts > 0 && (
                        <>
                          <div>• {estimatedContacts} contacts</div>
                          <div>• {callSettings.maxCallsPerDay} calls/day</div>
                          <div>• 
                            {callSettings.maxCallsPerDay < estimatedContacts ? 'Conservative pace' :
                             callSettings.maxCallsPerDay <= estimatedContacts * 2 ? 'Balanced pace' :
                             'Aggressive pace'}
                          </div>
                        </>
                      )}
                    </div>
                  </div>

                  {/* Retry Settings */}
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <div className="flex items-center gap-2 mb-2">
                        <label className="text-sm font-black uppercase block">
                          RETRY ATTEMPTS: {callSettings.retryAttempts}
                        </label>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button className="p-0 bg-transparent border-none outline-none">
                              <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent side="top">
                            <p>Number of times to retry unanswered calls. Set to 0 to disable retries.</p>
                          </TooltipContent>
                        </Tooltip>
                      </div>
                      <Slider 
                        value={[callSettings.retryAttempts]}
                        onValueChange={(value) => setCallSettings({...callSettings, retryAttempts: value[0]})}
                        min={0}
                        max={5}
                        step={1}
                      />
                      <p className="text-xs text-gray-600 mt-1">
                        {callSettings.retryAttempts === 0 ? 'No retries - single attempt only' :
                         callSettings.retryAttempts === 1 ? 'One retry attempt' :
                         `${callSettings.retryAttempts} retry attempts`}
                      </p>
                    </div>
                    <div>
                      <div className="flex items-center gap-2 mb-2">
                        <label className="text-sm font-black uppercase block">
                          DAYS BETWEEN: {callSettings.daysBetweenRetries}
                        </label>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button className="p-0 bg-transparent border-none outline-none">
                              <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent side="top">
                            <p>Wait time between retry attempts to avoid being too persistent.</p>
                          </TooltipContent>
                        </Tooltip>
                      </div>
                      <Slider 
                        value={[callSettings.daysBetweenRetries]}
                        onValueChange={(value) => setCallSettings({...callSettings, daysBetweenRetries: value[0]})}
                        min={1}
                        max={7}
                        step={1}
                        disabled={callSettings.retryAttempts === 0}
                      />
                      {callSettings.retryAttempts === 0 ? (
                        <p className="text-xs text-gray-500 mt-1">Enable retry attempts to configure retry delay</p>
                      ) : (
                        <p className="text-xs text-gray-600 mt-1">
                          {callSettings.daysBetweenRetries === 1 ? 'Next day retry' :
                           callSettings.daysBetweenRetries === 7 ? 'Weekly retry cycle' :
                           `Wait ${callSettings.daysBetweenRetries} days between attempts`}
                        </p>
                      )}
                    </div>
                  </div>

                  {/* Features */}
                  <div className="grid grid-cols-2 gap-4">
                    <Card className="bg-orange-50 border-2 border-black">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <UilVoicemail className="h-5 w-5" />
                            <span className="font-black uppercase">Voicemail</span>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <button className="p-0 bg-transparent border-none outline-none">
                                  <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                </button>
                              </TooltipTrigger>
                              <TooltipContent side="top">
                                <p>AI agent will leave a voicemail if the call goes to voicemail. Increases message delivery rate.</p>
                              </TooltipContent>
                            </Tooltip>
                          </div>
                          <Switch 
                            checked={callSettings.leaveVoicemail}
                            onCheckedChange={(checked) => setCallSettings({...callSettings, leaveVoicemail: checked})}
                          />
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-orange-50 border-2 border-black">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <UilPhone className="h-5 w-5" />
                            <span className="font-black uppercase">Recording</span>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <button className="p-0 bg-transparent border-none outline-none">
                                  <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                </button>
                              </TooltipTrigger>
                              <TooltipContent side="top">
                                <p>Record all calls for quality assurance and training. Stored securely with compliance standards.</p>
                              </TooltipContent>
                            </Tooltip>
                          </div>
                          <Switch 
                            checked={callSettings.callRecording}
                            onCheckedChange={(checked) => setCallSettings({...callSettings, callRecording: checked})}
                          />
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  <PremiumFeatureCard 
                    title="SMART SCHEDULING"
                    description="AI optimizes call times based on answer rates. Automatically adjusts schedule for each timezone."
                    price="$49/month"
                  />
                </div>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                    onClick={() => setCurrentStep(3)}
                  >
                    <UilArrowLeft className="mr-2 h-6 w-6" />
                    BACK
                  </Button>
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={() => setCurrentStep(6)}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">CALL SETTINGS</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Configure when your agents should call. We respect timezone settings and 
                          automatically skip weekends and holidays. Enable recording for quality assurance.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 4 */}
          {currentStep === 5 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilClock className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        SMART SCHEDULING TECHNOLOGY
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Our AI analyzes <span className="font-black text-orange-600">millions of call patterns</span> to determine optimal contact times. 
                        Automatic timezone adjustments and holiday detection ensure your calls always happen at the right moment, maximizing connection rates while respecting boundaries.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Answer rate optimization</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Automatic timezone handling</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Holiday detection</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Business hours compliance</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 4 */}
          {currentStep === 5 && (
            <InfoSection customContent={{
              icon: <UilClock className="h-6 w-6 text-white" />,
              title: "Optimize Call Timing & Performance",
              description: "Configure intelligent call scheduling and performance settings that maximize connection rates while respecting boundaries. Our AI-powered timing optimization ensures calls happen when prospects are most likely to answer and engage.",
              benefits: [
                "AI-optimized call timing for 40% higher answer rates",
                "Automatic timezone handling across global contacts",
                "Smart retry logic that respects prospect preferences",
                "Compliance with business hours and holiday detection"
              ],
              faqs: [
                {
                  icon: <UilClock className="h-5 w-5" />,
                  question: "How does AI optimize call timing?",
                  answer: "Our system analyzes millions of successful calls to identify patterns. It considers factors like industry, time zone, historical answer rates, and even weather patterns to determine the optimal time to reach each specific contact."
                },
                {
                  icon: <UilVoicemail className="h-5 w-5" />,
                  question: "Should I enable voicemail messages?",
                  answer: "Yes! Voicemail messages increase callback rates by 23%. Our AI agents leave personalized, professional messages that reference your campaign goals and provide clear next steps for interested prospects to engage."
                },
                {
                  icon: <UilPhone className="h-5 w-5" />,
                  question: "How many retry attempts work best?",
                  answer: "We recommend 2-3 retry attempts with 2-3 days between calls. This balances persistence with respect for prospects' time. Our smart retry system adjusts timing based on previous call outcomes and prospect engagement signals."
                }
              ]
            }} />
          )}

          {/* Step 5: Preview & Launch */}
          {currentStep === 6 && (
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    PREVIEW & LAUNCH
                  </h1>
                </div>
                <div className="space-y-6">
                  {/* Campaign Summary */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Card className="bg-white border-2 border-black transform -rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Campaign</h4>
                        <p className="text-lg font-bold">{campaignName}</p>
                        <Badge className="bg-orange-200 text-black border-2 border-black mt-2">
                          {campaignType.toUpperCase()}
                        </Badge>
                      </CardContent>
                    </Card>
                    <Card className="bg-white border-2 border-black transform rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Agent</h4>
                        <p className="text-lg font-bold">
                          {mockAgents.find(a => a.id === selectedAgent)?.name || 'Selected Agent'}
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-white border-2 border-black transform -rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Contacts</h4>
                        <p className="text-2xl font-black text-orange-600">
                          {estimatedContacts || 250}
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-white border-2 border-black transform rotate-1">
                      <CardContent className="p-4">
                        <h4 className="font-black uppercase mb-2">Schedule</h4>
                        <p className="text-sm font-bold">
                          {callSettings.startTime} - {callSettings.endTime}
                        </p>
                        <p className="text-xs text-gray-600">{callSettings.timezone}</p>
                      </CardContent>
                    </Card>
                  </div>

                  {/* Goals Recap */}
                  <Card className="bg-orange-50 border-2 border-black">
                    <CardContent className="p-4">
                      <h4 className="font-black uppercase mb-2">Goals</h4>
                      <p className="text-gray-700">{campaignGoals}</p>
                    </CardContent>
                  </Card>

                  {/* Launch Button */}
                  <div className="text-center">
                  <Button
                    className="px-12 py-4 h-16 text-xl font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={handleLaunchCampaign}
                  >
                    <UilPlay className="mr-2 h-6 w-6" />
                    LAUNCH CAMPAIGN
                  </Button>                    <p className="text-sm text-gray-600 mt-4">
                      You can pause or modify the campaign anytime from the dashboard
                    </p>
                  </div>
                </div>

                {/* Info Box */}
                <Card className="bg-yellow-100 border-2 border-black mt-6">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">LAUNCH READINESS</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Review all settings before launching. Your campaign will start immediately and 
                          begin calling contacts based on your schedule. You can pause or modify settings anytime.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Button
                  className="w-full mt-8 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                  onClick={() => setCurrentStep(6)}
                >
                  <UilArrowLeft className="mr-2 h-6 w-6" />
                  BACK TO SETTINGS
                </Button>
              </CardContent>
            </Card>
          )}

          {/* Info Section for Step 5 */}
          {currentStep === 6 && (
            <div className="space-y-6">
              
              {/* Custom Info Cards */}
              <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-orange-600 hover:bg-orange-700 text-white border-black"
                    >
                      <UilPlay className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        LAUNCH WITH CONFIDENCE
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Your campaign is ready to achieve <span className="font-black text-orange-600">exceptional results</span>. 
                        Our platform handles thousands of concurrent calls while maintaining conversation quality. Real-time monitoring and adjustment capabilities ensure optimal performance from day one.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Real-time performance tracking</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Instant campaign adjustments</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">Comprehensive call analytics</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                          <span className="text-black font-medium">24/7 monitoring</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 5 */}
          {currentStep === 6 && (
            <InfoSection customContent={{
              icon: <UilPlay className="h-6 w-6 text-white" />,
              title: "Ready to Launch Your Campaign",
              description: "Your AI-powered calling campaign is fully configured and ready to deliver outstanding results. With intelligent agents, optimized targeting, and smart scheduling, you're set to achieve exceptional conversion rates and meaningful business growth.",
              benefits: [
                "Instant deployment with professional-quality setup",
                "Real-time campaign monitoring and live adjustments",
                "Comprehensive analytics and performance insights",
                "24/7 system monitoring with automatic optimization"
              ],
              faqs: [
                {
                  icon: <UilPlay className="h-5 w-5" />,
                  question: "What happens immediately after I launch?",
                  answer: "Your AI agents begin calling according to your schedule within minutes. You'll see real-time updates in the dashboard showing call progress, connection rates, and conversation outcomes. The system automatically adapts for optimal performance."
                },
                {
                  icon: <UilAnalytics className="h-5 w-5" />,
                  question: "How can I track campaign performance?",
                  answer: "Access comprehensive dashboards with live call monitoring, conversion metrics, call recordings, transcripts, and detailed analytics. Get insights on best-performing scripts, optimal call times, and prospect engagement patterns."
                },
                {
                  icon: <UilClock className="h-5 w-5" />,
                  question: "Can I pause or modify the campaign after launching?",
                  answer: "Yes! You have full control to pause, adjust targeting, modify scripts, change scheduling, or stop the campaign at any time. All changes take effect immediately without losing your progress or data."
                }
              ]
            }} />
          )}

           {/* Step 6: Campaign Launched */}
           {currentStep === 7 && (
             <Card className="transform rotate-1 relative overflow-hidden">
               <CardContent className="p-8">
                 <div className="text-center mb-8">
                   <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                     CAMPAIGN LAUNCHED
                   </h1>
                <CardContent className="pt-6">
                  <div className="flex items-start gap-4">
                    <Button
                      size="icon"
                      variant="default"
                      className="w-12 h-12 flex-shrink-0 bg-green-600 hover:bg-green-700 text-white border-black"
                    >
                      <UilCheckCircle className="h-6 w-6 text-white" />
                    </Button>
                    <div className="flex-1">
                      <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        CAMPAIGN LIVE & SCALING
                      </h3>
                      <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                        Your AI agents are now <span className="font-black text-orange-600">actively making calls</span> and engaging with prospects. 
                        Our system automatically scales to handle response volumes while maintaining quality. Every conversation improves future performance through machine learning.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Live call monitoring</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Automatic scaling</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Real-time optimization</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-600 rounded-full"></div>
                          <span className="text-black font-medium">Performance learning</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Info Section for Step 6 */}
          {currentStep === 6 && !isLaunching && (
            <InfoSection customContent={{
              icon: <UilCheckCircle className="h-6 w-6 text-white" />,
              title: "Your Campaign is Now Live",
              description: "Congratulations! Your AI-powered calling campaign is now active and delivering results. Monitor real-time performance, track conversion rates, and watch as your AI agents engage prospects with professional, personalized conversations that drive business growth.",
              benefits: [
                "Live call monitoring with real-time conversation insights",
                "Automatic performance optimization through machine learning",
                "Instant notification of qualified leads and appointments",
                "Continuous improvement with every successful interaction"
              ],
              faqs: [
                {
                  icon: <UilAnalytics className="h-5 w-5" />,
                  question: "Where can I view live campaign performance?",
                  answer: "Access your comprehensive dashboard to see real-time call metrics, live call monitoring, conversation transcripts, lead qualification status, and detailed performance analytics. Get instant notifications for important events and successful conversions."
                },
                {
                  icon: <UilCheckCircle className="h-5 w-5" />,
                  question: "How will I know when prospects are interested?",
                  answer: "The system sends instant notifications for qualified leads, scheduled appointments, and positive responses. You'll receive detailed summaries with prospect information, conversation highlights, and recommended next steps for follow-up."
                },
                {
                  icon: <UilClock className="h-5 w-5" />,
                  question: "What should I expect in the first few hours?",
                  answer: "Initial calls begin immediately based on your schedule. You'll see connection rates, conversation quality metrics, and early performance indicators within the first hour. The AI learns quickly and optimizes approach for better results throughout the day."
                }
              ]
            }} />
          )}
        </div>
      </div>

      {/* Navigation */}
      {currentStep > 1 && currentStep < 6 && (
        <div className="fixed bottom-8 left-1/2 transform -translate-x-1/2">
          <OnboardingNav 
            currentStep={currentStep - 1} 
            totalSteps={6}
            onStepChange={(step) => handleStepChange(step + 1)}
          />
        </div>
      )}

      {/* Verification Modal */}
      {showVerification && (
        <VerificationModal
          isOpen={showVerification}
          onClose={() => setShowVerification(false)}
          onComplete={handleVerificationComplete}
          devMode={devMode}
        />
      )}
      
      <div className="mt-8">
        <OnboardingFooter />
      </div>
    </div>
    </TooltipProvider>
  );
}


================================================
FILE: src/app/onboarding/cloning/page-refactored.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { UilYoutube, UilChannel, UilCheckCircle, UilVideo, UilCog, UilQuestionCircle, UilCopy } from '@tooni/iconscout-unicons-react';
import { useTikTokContent } from '@/hooks/useTikTokContent';
import { useYouTubeContent } from '@/hooks/useYouTubeContent';
import { useTwitchContent } from '@/hooks/useTwitchContent';
import { useQuery } from 'convex/react';
import { api } from '@convex/_generated/api';

// Import all step components
import { PlatformSelectionStep } from '@/components/onboarding/cloning/PlatformSelectionStep';
import { ChannelSetupStep } from '@/components/onboarding/cloning/ChannelSetupStep';
import { ContentSelectionStep } from '@/components/onboarding/cloning/ContentSelectionStep';
import { VoiceSettingsStep } from '@/components/onboarding/cloning/VoiceSettingsStep';
import { IdentityVerificationStep } from '@/components/onboarding/cloning/IdentityVerificationStep';
import { ReviewCompleteStep } from '@/components/onboarding/cloning/ReviewCompleteStep';

interface ContentItem {
  id: string; 
  title: string;
  duration: string;
  views: string;
  likes: string;
  published: string;
  thumbnail?: string;
}

export default function CloningOnboarding() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [selectedPlatform, setSelectedPlatform] = React.useState('');
  const [channelName, setChannelName] = React.useState('');
  const [selectedContent, setSelectedContent] = React.useState<string[]>([]);
  const [isLoading, setIsLoading] = React.useState(false);
  const [loadProgress, setLoadProgress] = React.useState(0);
  const [isProcessing, setIsProcessing] = React.useState(false);
  const [processProgress, setProcessProgress] = React.useState(0);
  const [uploadedFile, setUploadedFile] = React.useState<File | null>(null);
  const [audioUrl, setAudioUrl] = React.useState<string>('');
  const [processingProgress, setProcessingProgress] = React.useState(0);
  const [voiceCloneReady, setVoiceCloneReady] = React.useState(false);
  const [selectedAction, setSelectedAction] = React.useState<string | null>(null);
  const [isVerified, setIsVerified] = React.useState(false);
  const [showVerificationModal, setShowVerificationModal] = React.useState(false);
  const [voiceSettings, setVoiceSettings] = React.useState({
    exaggeration: 0.5,    // Controls expressiveness (0.25-2.0)
    cfgWeight: 0.5,       // CFG/Pace control (0.2-1.0)
    temperature: 0.8,     // Controls randomness (0.05-5.0)
    seed: 0,              // Random seed (0 for random)
    refWav: null as File | null  // Optional reference audio
  });

  // TikTok content hook
  const {
    user: tiktokUser,
    userLoading: tiktokUserLoading,
    userError: tiktokUserError,
    fetchUser: fetchTikTokUser,
    videos: tiktokVideos,
    videosLoading: tiktokVideosLoading,
    videosError: tiktokVideosError,
    fetchVideos: fetchTikTokVideos,
    downloadVideos: downloadTikTokVideos,
    downloadProgress: tiktokDownloadProgress,
    downloadStatus: tiktokDownloadStatus,
  } = useTikTokContent();

  // YouTube content hook
  const {
    channel: youtubeChannel,
    channelLoading: youtubeChannelLoading,
    channelError: youtubeChannelError,
    fetchChannel: fetchYouTubeChannel,
    videos: youtubeVideos,
    videosLoading: youtubeVideosLoading,
    videosError: youtubeVideosError,
    fetchVideos: fetchYouTubeVideos,
    downloadVideos: downloadYouTubeVideos,
    downloadProgress: youtubeDownloadProgress,
    downloadStatus: youtubeDownloadStatus,
  } = useYouTubeContent();

  // Twitch content hook
  const {
    channel: twitchChannel,
    channelLoading: twitchChannelLoading,
    channelError: twitchChannelError,
    channelDataComplete: twitchChannelDataComplete,
    fetchChannel: fetchTwitchChannel,
    videos: twitchVideos,
    videosLoading: twitchVideosLoading,
    videosError: twitchVideosError,
    fetchVideos: fetchTwitchVideos,
    downloadVideos: downloadTwitchVideos,
    downloadProgress: twitchDownloadProgress,
    downloadStatus: twitchDownloadStatus,
  } = useTwitchContent();

  const cleanupTikTokData = React.useCallback(async () => {
    console.log('[Cleanup] TikTok data cleanup called');
  }, []);
  const cleanupYouTubeData = React.useCallback(async () => {
    console.log('[Cleanup] YouTube data cleanup called');
  }, []);
  const cleanupTwitchData = React.useCallback(async () => {
    console.log('[Cleanup] Twitch data cleanup called');
  }, []);

  // TikTok user data complete fallback
  const tiktokUserDataComplete = !!tiktokUser;

  // Track if we've already attempted to fetch videos for this channel
  const fetchedChannelsRef = React.useRef<Set<string>>(new Set());

  // Auto-fetch YouTube videos when channel is loaded
  React.useEffect(() => {
    if (selectedPlatform === 'youtube' && youtubeChannel && !youtubeVideosLoading) {
      const channelId = youtubeChannel.channelId;
      
      // Only fetch if we haven't already fetched for this channel
      if (!fetchedChannelsRef.current.has(channelId) && youtubeVideos.length === 0) {
        console.log('Auto-fetching YouTube videos for channel:', channelId);
        fetchedChannelsRef.current.add(channelId);
        fetchYouTubeVideos(channelId, 6);
      }
    }
  }, [youtubeChannel, selectedPlatform, youtubeVideosLoading, youtubeVideos.length, fetchYouTubeVideos]);
  
  // Auto-fetch Twitch videos when channel is loaded
  React.useEffect(() => {
    if (selectedPlatform === 'twitch' && twitchChannel && !twitchVideosLoading) {
      const username = twitchChannel.username;
      
      // Only fetch if we haven't already fetched for this channel
      if (!fetchedChannelsRef.current.has(username) && twitchVideos.length === 0) {
        console.log('Auto-fetching Twitch videos for channel:', username);
        fetchedChannelsRef.current.add(username);
        fetchTwitchVideos(username, 6, 'archive');
      }
    }
  }, [twitchChannel, selectedPlatform, twitchVideosLoading, twitchVideos.length, fetchTwitchVideos]);
  
  // Debug YouTube videos
  React.useEffect(() => {
    console.log('[YouTube Debug] Videos state:', {
      videosLength: youtubeVideos.length,
      videos: youtubeVideos,
      loading: youtubeVideosLoading,
      error: youtubeVideosError
    });
  }, [youtubeVideos, youtubeVideosLoading, youtubeVideosError]);

  // Debug query to check database state
  const debugYouTubeData = useQuery(api.queries.debugYouTube.getAllYouTubeVideos);
  // const debugTwitchData = useQuery(api.queries.twitchContent.getAllTwitchVideos); // TODO: Add twitchContent queries
  React.useEffect(() => {
    if (debugYouTubeData) {
      console.log('[Debug] YouTube Database state:', debugYouTubeData);
    }
    // if (debugTwitchData) {
    //   console.log('[Debug] Twitch Database state:', debugTwitchData);
    // }
  }, [debugYouTubeData]);
  
  // Debug TikTok videos
  React.useEffect(() => {
    console.log('[TikTok Debug] Videos state:', {
      videosLength: tiktokVideos.length,
      videos: tiktokVideos,
      loading: tiktokVideosLoading,
      error: tiktokVideosError,
      user: tiktokUser
    });
  }, [tiktokVideos, tiktokVideosLoading, tiktokVideosError, tiktokUser]);
  
  // Debug TikTok user loading state
  React.useEffect(() => {
    console.log('[TikTok Debug] User profile state:', {
      hasUser: !!tiktokUser,
      userLoading: tiktokUserLoading,
      userDataComplete: tiktokUserDataComplete,
      shouldShowSkeleton: tiktokUserLoading || (!tiktokUser || !tiktokUserDataComplete),
      avatar: tiktokUser?.avatar,
      followerCount: tiktokUser?.followerCount
    });
  }, [tiktokUser, tiktokUserLoading, tiktokUserDataComplete]);
  
  // Debug Twitch videos
  React.useEffect(() => {
    console.log('[Twitch Debug] Videos state:', {
      videosLength: twitchVideos.length,
      videos: twitchVideos,
      loading: twitchVideosLoading,
      error: twitchVideosError,
      channel: twitchChannel
    });
  }, [twitchVideos, twitchVideosLoading, twitchVideosError, twitchChannel]);
  
  // Debug Twitch channel loading state
  React.useEffect(() => {
    console.log('[Twitch Debug] Channel state:', {
      hasChannel: !!twitchChannel,
      channelLoading: twitchChannelLoading,
      channelDataComplete: twitchChannelDataComplete,
      shouldShowSkeleton: twitchChannelLoading || (!twitchChannel || !twitchChannelDataComplete),
      profileImage: twitchChannel?.profileImage,
      followerCount: twitchChannel?.followerCount,
      isLive: twitchChannel?.isLive
    });
  }, [twitchChannel, twitchChannelLoading, twitchChannelDataComplete]);
  
  // Cleanup when platform changes
  React.useEffect(() => {
    const cleanup = async () => {
      if (selectedPlatform !== 'tiktok' && tiktokUser) {
        console.log('[Cloning] Platform changed from TikTok, cleaning up data');
        try {
          await cleanupTikTokData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up TikTok data:', error);
        }
      }
      if (selectedPlatform !== 'youtube' && youtubeChannel) {
        console.log('[Cloning] Platform changed from YouTube, cleaning up data');
        try {
          await cleanupYouTubeData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up YouTube data:', error);
        }
      }
      if (selectedPlatform !== 'twitch' && twitchChannel) {
        console.log('[Cloning] Platform changed from Twitch, cleaning up data');
        try {
          await cleanupTwitchData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up Twitch data:', error);
        }
      }
    };
    
    cleanup();
  }, [selectedPlatform, tiktokUser, youtubeChannel, twitchChannel, cleanupTikTokData, cleanupYouTubeData, cleanupTwitchData]);
  
  // Cleanup when channel name is cleared
  React.useEffect(() => {
    if (channelName === '' && (tiktokUser || tiktokVideos.length > 0) && selectedPlatform === 'tiktok') {
      console.log('[Cloning] Channel name cleared, cleaning up TikTok data');
      cleanupTikTokData();
    }
    if (channelName === '' && (youtubeChannel || youtubeVideos.length > 0) && selectedPlatform === 'youtube') {
      console.log('[Cloning] Channel name cleared, cleaning up YouTube data');
      cleanupYouTubeData();
    }
    if (channelName === '' && (twitchChannel || twitchVideos.length > 0) && selectedPlatform === 'twitch') {
      console.log('[Cloning] Channel name cleared, cleaning up Twitch data');
      cleanupTwitchData();
    }
  }, [channelName, tiktokUser, tiktokVideos.length, youtubeChannel, youtubeVideos.length, twitchChannel, twitchVideos.length, selectedPlatform, cleanupTikTokData, cleanupYouTubeData, cleanupTwitchData]);
  
  React.useEffect(() => {
    if (isLoading && currentStep === 3) {
      if (selectedPlatform === 'tiktok' && !tiktokUserLoading && !tiktokVideosLoading) {
        if (tiktokVideos.length > 0 || tiktokVideosError) {
          console.log('[Cloning] TikTok loading complete, videos:', tiktokVideos.length);
          setIsLoading(false);
        }
      }
      else if (selectedPlatform === 'youtube' && !youtubeChannelLoading && !youtubeVideosLoading) {
        if (youtubeVideos.length > 0 || youtubeVideosError) {
          console.log('[Cloning] YouTube loading complete, videos:', youtubeVideos.length);
          setIsLoading(false);
        }
      }
      else if (selectedPlatform === 'twitch' && !twitchChannelLoading && !twitchVideosLoading) {
        if (twitchVideos.length > 0 || twitchVideosError) {
          console.log('[Cloning] Twitch loading complete, videos:', twitchVideos.length);
          setIsLoading(false);
        }
      }
    }
  }, [isLoading, currentStep, selectedPlatform, tiktokUserLoading, tiktokVideosLoading, 
      tiktokVideos.length, tiktokVideosError, youtubeChannelLoading, youtubeVideosLoading, 
      youtubeVideos.length, youtubeVideosError, twitchChannelLoading, twitchVideosLoading,
      twitchVideos.length, twitchVideosError, ]);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setUploadedFile(file);
      setAudioUrl(URL.createObjectURL(file));
    }
  };

  const handleLoadContent = async () => {
    setIsLoading(true);
    setCurrentStep(3);
    
    if (selectedPlatform === 'upload') {
      setProcessingProgress(0);
      for (let i = 0; i <= 100; i += 10) {
        setProcessingProgress(i);
        await new Promise(resolve => setTimeout(resolve, 200));
      }
      setVoiceCloneReady(true);
      setIsLoading(false);
    } else if (selectedPlatform === 'tiktok') {
      try {
        if (tiktokUser || tiktokVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing TikTok data before new search');
          await cleanupTikTokData();
        }
        
        setLoadProgress(10);
        console.log('Fetching TikTok user:', channelName);
        await fetchTikTokUser(channelName);
        setLoadProgress(50);
        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading TikTok content:', error);
        setIsLoading(false);
      }
    } else if (selectedPlatform === 'youtube') {
      try {
        if (youtubeChannel || youtubeVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing YouTube data before new search');
          await cleanupYouTubeData();
        }
        
        setLoadProgress(10);
        let channelUrl = channelName;
        if (!channelName.includes('youtube.com') && !channelName.includes('youtu.be')) {
          if (channelName.startsWith('@')) {
            channelUrl = `https://youtube.com/${channelName}`;
          } else if (channelName.startsWith('UC') && channelName.length === 24) {
            channelUrl = `https://youtube.com/channel/${channelName}`;
          } else {
            channelUrl = `https://youtube.com/@${channelName}`;
          }
        }
        
        console.log('Fetching YouTube channel:', channelUrl);
        await fetchYouTubeChannel(channelUrl);
        setLoadProgress(50);
        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading YouTube content:', error);
        setIsLoading(false);
      }
    } else if (selectedPlatform === 'twitch') {
      try {
        if (twitchChannel || twitchVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing Twitch data before new search');
          await cleanupTwitchData();
        }
        
        setLoadProgress(10);
        console.log('Fetching Twitch channel:', channelName);
        await fetchTwitchChannel(channelName);
        setLoadProgress(50);
        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading Twitch content:', error);
        setIsLoading(false);
      }
    }
  };

  const handleProcessClone = async () => {
    setIsProcessing(true);
    setProcessProgress(0);
    
    // Download content based on platform
    if (selectedPlatform === 'tiktok' && selectedContent.length > 0) {
      await downloadTikTokVideos(selectedContent);
    } else if (selectedPlatform === 'youtube' && selectedContent.length > 0) {
      await downloadYouTubeVideos(selectedContent);
    } else if (selectedPlatform === 'twitch' && selectedContent.length > 0) {
      await downloadTwitchVideos(selectedContent);
    }
    
    // Simulate clone processing
    for (let i = 0; i <= 100; i += 10) {
      setProcessProgress(i);
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    setIsProcessing(false);
    setCurrentStep(6);
  };

  const handleContinue = () => {
    if (currentStep === 5) {
      handleProcessClone();
    } else {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
      if (currentStep === 3 && selectedPlatform !== 'upload') {
        setChannelName('');
        setSelectedContent([]);
      }
    }
  };

  const handleSkip = () => {
    if (currentStep === 4) {
      setCurrentStep(5);
    }
  };

  const handleIdentityVerificationComplete = () => {
    setIsVerified(true);
    setShowVerificationModal(false);
  };

  const handleVerificationComplete = () => {
    setIsVerified(true);
    setShowVerificationModal(false);
    handleContinue();
  };

  const isNextEnabled = () => {
    switch (currentStep) {
      case 1:
        return selectedPlatform !== '';
      case 2:
        return selectedPlatform === 'upload' ? uploadedFile !== null : channelName !== '';
      case 3:
        return selectedPlatform === 'upload' ? voiceCloneReady : selectedContent.length > 0;
      case 4:
        return true;
      case 5:
        return selectedAction !== null && isVerified;
      default:
        return false;
    }
  };

  const getProgressPercentage = () => {
    const totalSteps = 6;
    return (currentStep / totalSteps) * 100;
  };

  // Get current platform-specific data
  const getCurrentPlatformData = () => {
    switch (selectedPlatform) {
      case 'tiktok':
        return {
          channel: tiktokUser,
          videos: tiktokVideos,
          loading: tiktokUserLoading || tiktokVideosLoading,
          error: tiktokUserError || tiktokVideosError,
          downloadProgress: tiktokDownloadProgress,
          downloadStatus: tiktokDownloadStatus
        };
      case 'youtube':
        return {
          channel: youtubeChannel,
          videos: youtubeVideos,
          loading: youtubeChannelLoading || youtubeVideosLoading,
          error: youtubeChannelError || youtubeVideosError,
          downloadProgress: youtubeDownloadProgress,
          downloadStatus: youtubeDownloadStatus
        };
      case 'twitch':
        return {
          channel: twitchChannel,
          videos: twitchVideos,
          loading: twitchChannelLoading || twitchVideosLoading,
          error: twitchChannelError || twitchVideosError,
          downloadProgress: twitchDownloadProgress,
          downloadStatus: twitchDownloadStatus
        };
      default:
        return {
          channel: null,
          videos: [],
          loading: false,
          error: null,
          downloadProgress: {},
          downloadStatus: ''
        };
    }
  };

  return (
    <div 
      className="min-h-screen bg-pink-500 relative pb-8" 
      style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}
    >
      <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-pink-600 border-2 border-black flex items-center justify-center">
                <UilCopy className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-pink-500 border-2 border-black flex items-center justify-center">
                <UilVideo className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-pink-600 hover:bg-pink-700 border-4 border-black p-0">
                  {currentStep === 1 && <UilChannel className="h-12 w-12 text-white" />}
                  {currentStep === 2 && <UilYoutube className="h-12 w-12 text-white" />}
                  {currentStep === 3 && <UilVideo className="h-12 w-12 text-white" />}
                  {currentStep === 4 && <UilCog className="h-12 w-12 text-white" />}
                  {currentStep === 5 && <UilQuestionCircle className="h-12 w-12 text-white" />}
                  {currentStep === 6 && <UilCheckCircle className="h-12 w-12 text-white" />}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'CHOOSE PLATFORM'}
                {currentStep === 2 && 'CHANNEL SETUP'}
                {currentStep === 3 && (isLoading ? 'LOADING CONTENT' : selectedPlatform === 'upload' ? 'VOICE STUDIO' : 'SELECT CONTENT')}
                {currentStep === 4 && 'VOICE SETTINGS'}
                {currentStep === 5 && 'VERIFY IDENTITY'}
                {currentStep === 6 && 'REVIEW & COMPLETE'}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'SELECT YOUR CONTENT SOURCE'}
                {currentStep === 2 && 'ENTER CHANNEL INFORMATION'}
                {currentStep === 3 && (isLoading ? 'FETCHING CHANNEL DATA' : selectedPlatform === 'upload' ? 'PROCESS YOUR MEDIA' : 'CHOOSE VIDEOS TO CLONE')}
                {currentStep === 4 && 'CUSTOMIZE VOICE PARAMETERS'}
                {currentStep === 5 && 'CONFIRM YOUR IDENTITY'}
                {currentStep === 6 && (isProcessing ? 'CREATING YOUR AI CLONE' : 'YOUR CLONE IS READY')}
              </p>
              <div className="mt-6">
                <Progress value={getProgressPercentage()} className="h-4 border-2 border-black" />
                <p className="text-center mt-2 font-bold text-black">
                  STEP {currentStep} OF 6
                </p>
              </div>
            </CardHeader>
          </Card>

          {currentStep === 1 && (
            <PlatformSelectionStep
              selectedPlatform={selectedPlatform}
              onSelectPlatform={setSelectedPlatform}
              onNext={() => setCurrentStep(2)}
              onBack={handleBack}
            />
          )}

          {currentStep === 2 && (
            <ChannelSetupStep
              selectedPlatform={selectedPlatform}
              channelName={channelName}
              onChannelNameChange={setChannelName}
              uploadedFile={uploadedFile}
              onFileUpload={handleFileUpload}
              onNext={handleLoadContent}
              onBack={handleBack}
            />
          )}

          {currentStep === 3 && (
            <ContentSelectionStep
              selectedPlatform={selectedPlatform}
              isLoading={isLoading}
              loadProgress={loadProgress}
              selectedContent={selectedContent}
              onContentSelect={setSelectedContent}
              platformData={getCurrentPlatformData()}
              processingProgress={processingProgress}
              voiceCloneReady={voiceCloneReady}
              audioUrl={audioUrl}
              onNext={handleContinue}
              onBack={handleBack}
            />
          )}

          {currentStep === 4 && (
            <VoiceSettingsStep
              voiceSettings={voiceSettings}
              onSettingsChange={setVoiceSettings}
              onNext={handleContinue}
              onBack={handleBack}
              onSkip={handleSkip}
            />
          )}

          {currentStep === 5 && (
            <IdentityVerificationStep
              selectedAction={selectedAction}
              onActionSelect={setSelectedAction}
              isVerified={isVerified}
              onShowVerificationModal={() => setShowVerificationModal(true)}
              onNext={handleContinue}
              onBack={handleBack}
            />
          )}

          {currentStep === 6 && (
            <ReviewCompleteStep
              isProcessing={isProcessing}
              processProgress={processProgress}
              selectedPlatform={selectedPlatform}
              channelData={getCurrentPlatformData().channel}
              selectedContent={selectedContent}
              contentItems={getCurrentPlatformData().videos}
            />
          )}
        </div>

        <div className="mt-8">
          <OnboardingFooter />
        </div>
      </div>
      
      <VerificationModal
        isOpen={showVerificationModal}
        onClose={() => setShowVerificationModal(false)}
        onComplete={handleVerificationComplete}
      />
    </div>
  );
}


================================================
FILE: src/app/onboarding/cloning/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import VerificationModal from '@/components/custom/modals/verification-modal';
import SimpleOnboardingNav from '@/components/custom/simple-onboarding-nav';
import { Star15 } from '@/components/ui/star' ;
import { UilYoutube, UilPlay, UilChannel, UilArrowRight, UilArrowLeft, UilCheckCircle, UilInfoCircle, UilVideo, UilClock, UilEye, UilThumbsUp, UilCopy, UilSpinner, UilUpload, UilCloudDownload, UilCog, UilQuestionCircle, UilUser } from '@tooni/iconscout-unicons-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { useTikTokContent } from '@/hooks/useTikTokContent';
import { useYouTubeContent } from '@/hooks/useYouTubeContent';
import { useTwitchContent } from '@/hooks/useTwitchContent';
import { useQuery } from 'convex/react';
import { api } from '@convex/_generated/api';
import { VideoPreviewProvider } from '@/contexts/VideoPreviewContext';
import { useVoiceCloning } from '@/hooks/useVoiceCloning';

// Import step components
import { PlatformSelectionStep } from '@/components/onboarding/cloning/PlatformSelectionStep';
import { ChannelSetupStep } from '@/components/onboarding/cloning/ChannelSetupStep';
import { ContentSelectionStep } from '@/components/onboarding/cloning/ContentSelectionStep';
import { VoiceSettingsStep } from '@/components/onboarding/cloning/VoiceSettingsStep';
import { TextInputStep } from '@/components/onboarding/cloning/TextInputStep';
import { IdentityVerificationStep } from '@/components/onboarding/cloning/IdentityVerificationStep';
import { ReviewCompleteStep } from '@/components/onboarding/cloning/ReviewCompleteStep';
import ModelSelectionStep from '@/components/onboarding/cloning/ModelSelectionStep';
import { Platform, ModelData } from '@/components/onboarding/cloning/types';

interface ContentItem {
  id: string; 
  title: string;
  duration: string;
  views: string;
  likes: string;
  published: string;
  thumbnail?: string;
}

export default function CloningOnboarding() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [selectedPlatform, setSelectedPlatform] = React.useState<Platform>('');
  const [channelName, setChannelName] = React.useState('');
  const [selectedContent, setSelectedContent] = React.useState<string[]>([]);
  const [isLoading, setIsLoading] = React.useState(false);
  const [loadProgress, setLoadProgress] = React.useState(0);
  const [isProcessing, setIsProcessing] = React.useState(false);
  const [processProgress, setProcessProgress] = React.useState(0);
  const [uploadedFile, setUploadedFile] = React.useState<File | null>(null);
  const [audioUrl, setAudioUrl] = React.useState<string>('');
  const [processingProgress, setProcessingProgress] = React.useState(0);
  const [voiceCloneReady, setVoiceCloneReady] = React.useState(false);
  const [selectedAction, setSelectedAction] = React.useState<string | null>(null);
  const [isVerified, setIsVerified] = React.useState(false);
  const [showVerificationModal, setShowVerificationModal] = React.useState(false);
  const [voiceSettings, setVoiceSettings] = React.useState({
    exaggeration: 1.0,    // Controls expressiveness (0.25-2.0)
    cfgWeight: 1.7,       // CFG/Pace control (0.5-3.0)
    chunkSize: 2048,      // Audio generation chunk size (512-4096)
  });
  const [selectedModel, setSelectedModel] = React.useState<ModelData | null>(null);
  const [testText, setTestText] = React.useState<string>('');
  
  // Rate limiting state
  const [lastDownloadTime, setLastDownloadTime] = React.useState<number>(0);
  const DOWNLOAD_COOLDOWN = 5000; // 5 seconds between batch downloads

  // TikTok content hook
  const {
    user: tiktokUser,
    userLoading: tiktokUserLoading,
    userError: tiktokUserError,
    fetchUser: fetchTikTokUser,
    videos: tiktokVideos,
    videosLoading: tiktokVideosLoading,
    videosError: tiktokVideosError,
    fetchVideos: fetchTikTokVideos,
    downloadVideos: downloadTikTokVideos,
    downloadProgress: tiktokDownloadProgress,
    downloadStatus: tiktokDownloadStatus,
  } = useTikTokContent();

  // YouTube content hook
  const {
    channel: youtubeChannel,
    channelLoading: youtubeChannelLoading,
    channelError: youtubeChannelError,
    fetchChannel: fetchYouTubeChannel,
    videos: youtubeVideos,
    videosLoading: youtubeVideosLoading,
    videosError: youtubeVideosError,
    fetchVideos: fetchYouTubeVideos,
    downloadVideos: downloadYouTubeVideos,
    downloadProgress: youtubeDownloadProgress,
    downloadStatus: youtubeDownloadStatus,
  } = useYouTubeContent();

  // Twitch content hook
  const {
    channel: twitchChannel,
    channelLoading: twitchChannelLoading,
    channelError: twitchChannelError,
    channelDataComplete: twitchChannelDataComplete,
    fetchChannel: fetchTwitchChannel,
    videos: twitchVideos,
    videosLoading: twitchVideosLoading,
    videosError: twitchVideosError,
    fetchVideos: fetchTwitchVideos,
    downloadVideos: downloadTwitchVideos,
    downloadProgress: twitchDownloadProgress,
    downloadStatus: twitchDownloadStatus,
  } = useTwitchContent();

  const cleanupTikTokData = React.useCallback(async () => {
    console.log('[Cleanup] TikTok data cleanup called');
    // TODO: Implement actual cleanup
  }, []);
  const cleanupYouTubeData = React.useCallback(async () => {
    console.log('[Cleanup] YouTube data cleanup called');
    // TODO: Implement actual cleanup
  }, []);
  const cleanupTwitchData = React.useCallback(async () => {
    console.log('[Cleanup] Twitch data cleanup called');
    // TODO: Implement actual cleanup
  }, []);

  // Selective cleanup - only remove unselected content
  const cleanupUnselectedContent = async () => {
    console.log('[Cleanup] Cleaning up unselected content, keeping:', selectedContent);
    const selectedIds = new Set(selectedContent);
    
    if (selectedPlatform === 'tiktok' && tiktokVideos.length > 0) {
      // TODO: Implement selective cleanup for TikTok
      const unselectedVideos = tiktokVideos.filter(v => !selectedIds.has(v.id));
      console.log('[Cleanup] Would remove TikTok videos:', unselectedVideos.map(v => v.id));
    } else if (selectedPlatform === 'youtube' && youtubeVideos.length > 0) {
      // TODO: Implement selective cleanup for YouTube
      const unselectedVideos = youtubeVideos.filter(v => !selectedIds.has(v.id));
      console.log('[Cleanup] Would remove YouTube videos:', unselectedVideos.map(v => v.id));
    } else if (selectedPlatform === 'twitch' && twitchVideos.length > 0) {
      // TODO: Implement selective cleanup for Twitch
      const unselectedVideos = twitchVideos.filter(v => !selectedIds.has(v.id));
      console.log('[Cleanup] Would remove Twitch videos:', unselectedVideos.map(v => v.id));
    }
  };

  // Complete cleanup - remove all content
  const cleanupAllContent = async () => {
    console.log('[Cleanup] Complete cleanup of all content');
    if (selectedPlatform === 'tiktok') {
      await cleanupTikTokData();
    } else if (selectedPlatform === 'youtube') {
      await cleanupYouTubeData();
    } else if (selectedPlatform === 'twitch') {
      await cleanupTwitchData();
    }
    setSelectedContent([]);
  };

  // TikTok user data complete fallback
  const tiktokUserDataComplete = !!tiktokUser;

  // Voice cloning hook
  const {
    createClone,
    jobId,
    jobStatus,
    voiceId,
    sampleAudioUrl,
    isProcessing: voiceCloneProcessing,
    error: voiceCloneError,
    testVoice,
    reset: resetVoiceClone,
  } = useVoiceCloning();

  // Track if we've already attempted to fetch videos for this channel
  const fetchedChannelsRef = React.useRef<Set<string>>(new Set());

  // Update process progress based on voice cloning job status
  React.useEffect(() => {
    if (jobStatus) {
      switch (jobStatus.status) {
        case 'pending':
          setProcessProgress(10);
          break;
        case 'processing':
          setProcessProgress(50);
          break;
        case 'completed':
          setProcessProgress(100);
          setIsProcessing(false);
          if (jobStatus.result_url) {
            setAudioUrl(jobStatus.result_url);
          }
          break;
        case 'failed':
          setProcessProgress(0);
          setIsProcessing(false);
          console.error('[Cloning] Voice clone failed:', jobStatus.error);
          break;
      }
    }
  }, [jobStatus]);

  // Auto-fetch YouTube videos when channel is loaded
  React.useEffect(() => {
    if (selectedPlatform === 'youtube' && youtubeChannel && !youtubeVideosLoading) {
      const channelId = youtubeChannel.channelId;
      
      // Only fetch if we haven't already fetched for this channel
      if (!fetchedChannelsRef.current.has(channelId) && youtubeVideos.length === 0) {
        console.log('Auto-fetching YouTube videos for channel:', channelId);
        fetchedChannelsRef.current.add(channelId);
        fetchYouTubeVideos(channelId, 6);
      }
    }
  }, [youtubeChannel, selectedPlatform, youtubeVideosLoading, youtubeVideos.length, fetchYouTubeVideos]);
  
  // Auto-fetch Twitch videos when channel is loaded
  React.useEffect(() => {
    if (selectedPlatform === 'twitch' && twitchChannel && !twitchVideosLoading) {
      const username = twitchChannel.username;
      
      // Only fetch if we haven't already fetched for this channel
      if (!fetchedChannelsRef.current.has(username) && twitchVideos.length === 0) {
        console.log('Auto-fetching Twitch videos for channel:', username);
        fetchedChannelsRef.current.add(username);
        fetchTwitchVideos(username, 6, 'archive');
      }
    }
  }, [twitchChannel, selectedPlatform, twitchVideosLoading, twitchVideos.length, fetchTwitchVideos]);
  
  // Debug YouTube videos
  React.useEffect(() => {
    console.log('[YouTube Debug] Videos state:', {
      videosLength: youtubeVideos.length,
      videos: youtubeVideos,
      loading: youtubeVideosLoading,
      error: youtubeVideosError
    });
  }, [youtubeVideos, youtubeVideosLoading, youtubeVideosError]);

  // Debug query to check database state
  const debugYouTubeData = useQuery(api.queries.debugYouTube.getAllYouTubeVideos);
  // const debugTwitchData = useQuery(api.queries.twitchContent.getAllTwitchVideos); // TODO: Add twitchContent queries
  React.useEffect(() => {
    if (debugYouTubeData) {
      console.log('[Debug] YouTube Database state:', debugYouTubeData);
    }
    // if (debugTwitchData) {
    //   console.log('[Debug] Twitch Database state:', debugTwitchData);
    // }
  }, [debugYouTubeData]);
  
  // Debug TikTok videos
  React.useEffect(() => {
    console.log('[TikTok Debug] Videos state:', {
      videosLength: tiktokVideos.length,
      videos: tiktokVideos,
      loading: tiktokVideosLoading,
      error: tiktokVideosError,
      user: tiktokUser
    });
  }, [tiktokVideos, tiktokVideosLoading, tiktokVideosError, tiktokUser]);
  
  // Debug TikTok user loading state
  React.useEffect(() => {
    console.log('[TikTok Debug] User profile state:', {
      hasUser: !!tiktokUser,
      userLoading: tiktokUserLoading,
      userDataComplete: tiktokUserDataComplete,
      shouldShowSkeleton: tiktokUserLoading || (!tiktokUser || !tiktokUserDataComplete),
      avatar: tiktokUser?.avatar,
      followerCount: tiktokUser?.followerCount
    });
  }, [tiktokUser, tiktokUserLoading, tiktokUserDataComplete]);
  
  // Debug Twitch videos
  React.useEffect(() => {
    console.log('[Twitch Debug] Videos state:', {
      videosLength: twitchVideos.length,
      videos: twitchVideos,
      loading: twitchVideosLoading,
      error: twitchVideosError,
      channel: twitchChannel
    });
  }, [twitchVideos, twitchVideosLoading, twitchVideosError, twitchChannel]);
  
  // Debug Twitch channel loading state
  React.useEffect(() => {
    console.log('[Twitch Debug] Channel state:', {
      hasChannel: !!twitchChannel,
      channelLoading: twitchChannelLoading,
      channelDataComplete: twitchChannelDataComplete,
      shouldShowSkeleton: twitchChannelLoading || (!twitchChannel || !twitchChannelDataComplete),
      profileImage: twitchChannel?.profileImage,
      followerCount: twitchChannel?.followerCount,
      isLive: twitchChannel?.isLive
    });
  }, [twitchChannel, twitchChannelLoading, twitchChannelDataComplete]);
  
  // Cleanup when platform changes
  React.useEffect(() => {
    const cleanup = async () => {
      if (selectedPlatform !== 'tiktok' && tiktokUser) {
        console.log('[Cloning] Platform changed from TikTok, cleaning up data');
        try {
          await cleanupTikTokData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up TikTok data:', error);
        }
      }
      if (selectedPlatform !== 'youtube' && youtubeChannel) {
        console.log('[Cloning] Platform changed from YouTube, cleaning up data');
        try {
          await cleanupYouTubeData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up YouTube data:', error);
        }
      }
      if (selectedPlatform !== 'twitch' && twitchChannel) {
        console.log('[Cloning] Platform changed from Twitch, cleaning up data');
        try {
          await cleanupTwitchData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up Twitch data:', error);
        }
      }
    };
    
    cleanup();
  }, [selectedPlatform, tiktokUser, youtubeChannel, twitchChannel, cleanupTikTokData, cleanupYouTubeData, cleanupTwitchData]);
  
  // Cleanup when channel name is cleared
  React.useEffect(() => {
    if (channelName === '' && (tiktokUser || tiktokVideos.length > 0) && selectedPlatform === 'tiktok') {
      console.log('[Cloning] Channel name cleared, cleaning up TikTok data');
      cleanupTikTokData();
    }
    if (channelName === '' && (youtubeChannel || youtubeVideos.length > 0) && selectedPlatform === 'youtube') {
      console.log('[Cloning] Channel name cleared, cleaning up YouTube data');
      cleanupYouTubeData();
    }
    if (channelName === '' && (twitchChannel || twitchVideos.length > 0) && selectedPlatform === 'twitch') {
      console.log('[Cloning] Channel name cleared, cleaning up Twitch data');
      cleanupTwitchData();
    }
  }, [channelName, tiktokUser, tiktokVideos.length, youtubeChannel, youtubeVideos.length, twitchChannel, twitchVideos.length, selectedPlatform, cleanupTikTokData, cleanupYouTubeData, cleanupTwitchData]);
  
  React.useEffect(() => {
    if (isLoading && currentStep === 3) {
      if (selectedPlatform === 'tiktok' && !tiktokUserLoading && !tiktokVideosLoading) {
        if (tiktokVideos.length > 0 || tiktokVideosError) {
          console.log('[Cloning] TikTok loading complete, videos:', tiktokVideos.length);
          setIsLoading(false);
        }
      }
      else if (selectedPlatform === 'youtube' && !youtubeChannelLoading && !youtubeVideosLoading) {
        if (youtubeVideos.length > 0 || youtubeVideosError) {
          console.log('[Cloning] YouTube loading complete, videos:', youtubeVideos.length);
          setIsLoading(false);
        }
      }
      else if (selectedPlatform === 'twitch' && !twitchChannelLoading && !twitchVideosLoading) {
        if (twitchVideos.length > 0 || twitchVideosError) {
          console.log('[Cloning] Twitch loading complete, videos:', twitchVideos.length);
          setIsLoading(false);
        }
      }
    }
  }, [isLoading, currentStep, selectedPlatform, tiktokUserLoading, tiktokVideosLoading, 
      tiktokVideos.length, tiktokVideosError, youtubeChannelLoading, youtubeVideosLoading, 
      youtubeVideos.length, youtubeVideosError, twitchChannelLoading, twitchVideosLoading,
      twitchVideos.length, twitchVideosError, ]);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setUploadedFile(file);
      setAudioUrl(URL.createObjectURL(file));
    }
  };

  const handleLoadContent = async () => {
    // Rate limiting check
    const now = Date.now();
    if (now - lastDownloadTime < DOWNLOAD_COOLDOWN) {
      const waitTime = Math.ceil((DOWNLOAD_COOLDOWN - (now - lastDownloadTime)) / 1000);
      console.log(`[RateLimit] Please wait ${waitTime} seconds before loading more content`);
      // Could show a toast/notification here
      return;
    }
    
    setLastDownloadTime(now);
    setIsLoading(true);
    setCurrentStep(3);
    
    if (selectedPlatform === 'upload') {

      setProcessingProgress(0);
      for (let i = 0; i <= 100; i += 10) {
        setProcessingProgress(i);
        await new Promise(resolve => setTimeout(resolve, 200));
      }
      setVoiceCloneReady(true);
      setIsLoading(false);
    } else if (selectedPlatform === 'tiktok') {

      try {

        if (tiktokUser || tiktokVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing TikTok data before new search');
          await cleanupTikTokData();
        }
        
        setLoadProgress(10);

        console.log('Fetching TikTok user:', channelName);
        await fetchTikTokUser(channelName);
        setLoadProgress(50);

        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading TikTok content:', error);
        setIsLoading(false);
      }
    } else if (selectedPlatform === 'youtube') {

      try {

        if (youtubeChannel || youtubeVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing YouTube data before new search');
          await cleanupYouTubeData();
        }
        
        setLoadProgress(10);

        let channelUrl = channelName;
        if (!channelName.includes('youtube.com') && !channelName.includes('youtu.be')) {
          if (channelName.startsWith('@')) {
            channelUrl = `https://youtube.com/${channelName}`;
          } else if (channelName.startsWith('UC') && channelName.length === 24) {
            channelUrl = `https://youtube.com/channel/${channelName}`;
          } else {
            channelUrl = `https://youtube.com/@${channelName}`;
          }
        }
        console.log('Fetching YouTube channel with URL:', channelUrl);
        await fetchYouTubeChannel(channelUrl);
        setLoadProgress(50);

        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading YouTube content:', error);
        setIsLoading(false);
      }
    } else if (selectedPlatform === 'twitch') {

      try {

        if (twitchChannel || twitchVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing Twitch data before new search');
          await cleanupTwitchData();
        }
        
        setLoadProgress(10);

        let channelUrl = channelName;
        if (!channelName.includes('twitch.tv')) {
          channelUrl = `https://twitch.tv/${channelName}`;
        }
        console.log('Fetching Twitch channel:', channelUrl);
        await fetchTwitchChannel(channelUrl);
        setLoadProgress(50);
        // Videos are auto-fetched by the hook after channel is loaded
        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading Twitch content:', error);
        setIsLoading(false);
      }
      for (let i = 0; i <= 100; i += 20) {
        setLoadProgress(i);
        await new Promise(resolve => setTimeout(resolve, 300));
      }
      setIsLoading(false);
    }
  };


  const canProceedFromStep1 = () => selectedPlatform !== '';
  const canProceedFromStep2 = () => {
    if (selectedPlatform === 'upload') {
      return uploadedFile !== null;
    }
    return channelName.trim() !== '';
  };
  const canProceedFromStep3 = () => {
    if (selectedPlatform === 'upload') {
      return voiceCloneReady;
    }
    return selectedContent.length > 0;
  };

  const toggleContentSelection = (contentId: string) => {
    setSelectedContent(prev => 
      prev.includes(contentId) 
        ? prev.filter(id => id !== contentId)
        : [...prev, contentId]
    );
  };

  const handleExportAudio = () => {
    if (!audioUrl && !sampleAudioUrl) {
      console.error('[Cloning] No audio URL available for export');
      return;
    }
    
    const exportUrl = sampleAudioUrl || audioUrl;
    const link = document.createElement('a');
    link.href = exportUrl;
    link.download = `voice-clone-${voiceId || Date.now()}.mp3`;
    link.click();
  };


  const handleStepChange = async (step: number) => {
    // Going forward
    if (step > currentStep) {
      // Leaving content selection (step 3) to voice settings (step 4)
      if (currentStep === 3 && step === 4) {
        console.log('[Navigation] Moving forward from content selection, cleaning up unselected');
        await cleanupUnselectedContent();
      }
    } 
    // Going backward
    else if (step < currentStep) {
      // Going back to content selection from later steps
      if (step === 3 && currentStep > 3) {
        console.log('[Navigation] Going back to content selection');
        // Videos should still be available if they were selected
        // If not available, they'll be re-downloaded when needed
      }
      // Going back before content selection (clearing everything)
      else if (step <= 2 && currentStep >= 3) {
        console.log('[Navigation] Going back before content selection, full cleanup');
        await cleanupAllContent();
        setChannelName('');
      }
    }
    
    setCurrentStep(step);
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerificationModal(false);
    setIsVerified(true);
    setIsProcessing(true);
    setCurrentStep(8);
    
    try {
      // Prepare audio file based on platform
      let audioFile: File | null = null;
      let voiceName = '';

      if (selectedPlatform === 'upload' && uploadedFile) {
        // Direct upload - use the uploaded file
        audioFile = uploadedFile;
        voiceName = uploadedFile.name.replace(/\.[^/.]+$/, '') + ' AI';
      } else if (selectedPlatform && selectedContent.length > 0) {
        // Platform content - download audio from first selected video
        const firstVideoId = selectedContent[0];
        
        try {
          let audioBlob: Blob | null = null;
          
          if (selectedPlatform === 'tiktok') {
            // Use TikTok audio extraction endpoint
            const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/public/tiktok/audio/${firstVideoId}?format=mp3`, {
              headers: {
                'X-API-Key': process.env.NEXT_PUBLIC_API_KEY || 'your-secret-key-here',
              },
            });
            
            if (response.ok) {
              audioBlob = await response.blob();
            }
          } else if (selectedPlatform === 'youtube') {
            // For YouTube, we'll need to use the video file directly
            // The voice cloning API will extract audio from the video
            const videoUrl = youtubeVideos.find(v => v.id === firstVideoId)?.url;
            if (videoUrl) {
              // Download video and submit it directly
              const response = await fetch(videoUrl);
              if (response.ok) {
                audioBlob = await response.blob();
              }
            }
          } else if (selectedPlatform === 'twitch') {
            // Similar to YouTube, use video directly
            const videoUrl = twitchVideos.find(v => v.id === firstVideoId)?.url;
            if (videoUrl) {
              const response = await fetch(videoUrl);
              if (response.ok) {
                audioBlob = await response.blob();
              }
            }
          }

          if (audioBlob) {
            audioFile = new File([audioBlob], `${channelName}-voice.mp3`, { 
              type: selectedPlatform === 'tiktok' ? 'audio/mp3' : 'video/mp4' 
            });
            voiceName = `${channelName} AI`;
          } else {
            throw new Error('Failed to download audio from platform content');
          }
        } catch (error) {
          console.error('[Cloning] Error downloading audio:', error);
          throw error;
        }
      }

      if (audioFile && testText) {
        // Create voice clone
        await createClone(
          audioFile,
          voiceName,
          testText,
          voiceSettings
        );
        
        // If we get here without error, voice clone was created successfully
        // Safe to cleanup all content now
        console.log('[Verification] Voice clone created successfully, cleaning up all content');
        await cleanupAllContent();
      } else {
        throw new Error('Missing audio file or test text');
      }
    } catch (error) {
      console.error('[Cloning] Error creating voice clone:', error);
      setIsProcessing(false);
      // Error will be shown in ReviewCompleteStep via voiceCloneError prop
    }
  };

  const handleProcessContent = async () => {
    setIsProcessing(true);
    setCurrentStep(5);
    
    if (selectedPlatform === 'tiktok' && tiktokUser) {
      await downloadTikTokVideos(tiktokUser.username, selectedContent);
    } else if (selectedPlatform === 'youtube' && youtubeChannel) {
      await downloadYouTubeVideos(youtubeChannel.id, selectedContent);
    } else if (selectedPlatform === 'twitch' && twitchChannel) {
      await downloadTwitchVideos(twitchChannel.login, selectedContent);
    }
    
    setIsProcessing(false);
  };

  const handleActionSelect = (action: string) => {
    setSelectedAction(action);
  };

  return (
    <VideoPreviewProvider>
      <div 
        className="min-h-screen bg-pink-500 relative pb-8" 
        style={{ 
          fontFamily: 'Noyh-Bold, sans-serif',
          backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
          backgroundSize: '60px 60px'
        }}
      >


        <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
          <div className="w-full max-w-4xl space-y-8">
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-pink-600 border-2 border-black flex items-center justify-center">
                <UilCopy className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-pink-500 border-2 border-black flex items-center justify-center">
                <UilVideo className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-pink-600 hover:bg-pink-700 border-4 border-black p-0">
                  {currentStep === 1 && <UilChannel className="h-12 w-12 text-white" />}
                  {currentStep === 2 && <UilYoutube className="h-12 w-12 text-white" />}
                  {currentStep === 3 && <UilVideo className="h-12 w-12 text-white" />}
                  {currentStep === 4 && <UilCog className="h-12 w-12 text-white" />}
                  {currentStep === 5 && <UilQuestionCircle className="h-12 w-12 text-white" />}
                  {currentStep === 6 && <UilCheckCircle className="h-12 w-12 text-white" />}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'CHOOSE PLATFORM'}
                {currentStep === 2 && 'CHANNEL SETUP'}
                {currentStep === 3 && (isLoading ? 'LOADING CONTENT' : selectedPlatform === 'upload' ? 'VOICE STUDIO' : 'SELECT CONTENT')}
                {currentStep === 4 && 'SELECT MODEL'}
                {currentStep === 5 && 'VOICE SETTINGS'}
                {currentStep === 6 && 'TEST VOICE'}
                {currentStep === 7 && 'VERIFY IDENTITY'}
                {currentStep === 8 && 'REVIEW & COMPLETE'}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'SELECT YOUR CONTENT SOURCE'}
                {currentStep === 2 && 'ENTER CHANNEL INFORMATION'}
                {currentStep === 3 && (isLoading ? 'FETCHING CHANNEL DATA' : selectedPlatform === 'upload' ? 'PROCESS YOUR MEDIA' : 'CHOOSE VIDEOS TO CLONE')}
                {currentStep === 4 && 'CHOOSE YOUR AI VOICE MODEL'}
                {currentStep === 5 && 'CUSTOMIZE VOICE PARAMETERS'}
                {currentStep === 6 && 'TEST YOUR VOICE CLONE'}
                {currentStep === 7 && 'CONFIRM YOUR IDENTITY'}
                {currentStep === 8 && (isProcessing ? 'CREATING YOUR AI CLONE' : 'YOUR CLONE IS READY')}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-pink-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-pink-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-pink-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {currentStep === 1 && (
            <PlatformSelectionStep
              selectedPlatform={selectedPlatform}
              setSelectedPlatform={setSelectedPlatform}
              setCurrentStep={setCurrentStep}
            />
          )}

          {currentStep === 2 && (
            <ChannelSetupStep
              selectedPlatform={selectedPlatform}
              channelName={channelName}
              setChannelName={setChannelName}
              uploadedFile={uploadedFile}
              setUploadedFile={setUploadedFile}
              setAudioUrl={setAudioUrl}
              setCurrentStep={setCurrentStep}
              handleLoadContent={handleLoadContent}
              handleStepChange={handleStepChange}
              fetchedChannelsRef={fetchedChannelsRef}
            />
          )}

          {currentStep === 3 && (
            <ContentSelectionStep
              selectedPlatform={selectedPlatform}
              channelName={channelName}
              uploadedFile={uploadedFile}
              audioUrl={audioUrl}
              isLoading={isLoading}
              loadProgress={loadProgress}
              processingProgress={processingProgress}
              voiceCloneReady={voiceCloneReady}
              selectedContent={selectedContent}
              toggleContentSelection={toggleContentSelection}
              setSelectedContent={setSelectedContent}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
              tiktokUser={tiktokUser}
              tiktokVideos={tiktokVideos}
              youtubeChannel={youtubeChannel}
              youtubeVideos={youtubeVideos}
              twitchChannel={twitchChannel}
              twitchVideos={twitchVideos}
              twitchChannelDataComplete={twitchChannelDataComplete}
            />
          )}

          {currentStep === 4 && (
            <ModelSelectionStep
              selectedModel={selectedModel}
              setSelectedModel={setSelectedModel}
              currentStep={currentStep}
              setCurrentStep={setCurrentStep}
            />
          )}

          {currentStep === 5 && (
            <VoiceSettingsStep
              voiceSettings={voiceSettings}
              setVoiceSettings={setVoiceSettings}
              handleStepChange={handleStepChange}
              setCurrentStep={setCurrentStep}
              selectedContent={selectedContent}
              selectedPlatform={selectedPlatform}
              selectedModel={selectedModel}
              tiktokVideos={tiktokVideos}
              youtubeVideos={youtubeVideos}
              twitchVideos={twitchVideos}
            />
          )}

          {currentStep === 6 && (
            <TextInputStep
              testText={testText}
              setTestText={setTestText}
              setCurrentStep={setCurrentStep}
              handleStepChange={handleStepChange}
            />
          )}

          {currentStep === 7 && (
            <IdentityVerificationStep
              setShowVerificationModal={setShowVerificationModal}
              handleStepChange={handleStepChange}
            />
          )}

          {currentStep === 8 && (
            <ReviewCompleteStep
              isProcessing={isProcessing}
              processProgress={processProgress}
              selectedPlatform={selectedPlatform}
              uploadedFile={uploadedFile}
              channelName={channelName}
              selectedContent={selectedContent}
              voiceSettings={voiceSettings}
              audioUrl={audioUrl}
              handleExportAudio={handleExportAudio}
              handleStepChange={handleStepChange}
              setSelectedPlatform={setSelectedPlatform}
              setChannelName={setChannelName}
              setSelectedContent={setSelectedContent}
              setUploadedFile={setUploadedFile}
              setAudioUrl={setAudioUrl}
              setVoiceCloneReady={setVoiceCloneReady}
              setIsVerified={setIsVerified}
              cleanupTikTokData={cleanupTikTokData}
              cleanupYouTubeData={cleanupYouTubeData}
              cleanupTwitchData={cleanupTwitchData}
              voiceId={voiceId}
              voiceCloneError={voiceCloneError}
              testText={testText}
              testVoice={testVoice}
              resetVoiceClone={resetVoiceClone}
            />
          )}
        </div>

        <div className="mt-8">
          <OnboardingFooter />
        </div>
      </div>
      
      <VerificationModal
        isOpen={showVerificationModal}
        onClose={() => setShowVerificationModal(false)}
        onComplete={handleVerificationComplete}
      />
    </div>
    </VideoPreviewProvider>
  );
}


================================================
FILE: src/app/onboarding/cloning/page.tsx.backup
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { Star15 } from '@/components/ui/star';
import { UilYoutube, UilPlay, UilChannel, UilArrowRight, UilArrowLeft, UilCheckCircle, UilInfoCircle, UilVideo, UilClock, UilEye, UilThumbsUp, UilCopy, UilSpinner, UilUpload, UilCloudDownload, UilCog, UilQuestionCircle, UilUser } from '@tooni/iconscout-unicons-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { useTikTokContent } from '@/hooks/useTikTokContent';
import { useYouTubeContent } from '@/hooks/useYouTubeContent';
import { useTwitchContent } from '@/hooks/useTwitchContent';
import { useQuery } from 'convex/react';
import { api } from '@convex/_generated/api';

// Import step components
import { PlatformSelectionStep } from '@/components/onboarding/cloning/PlatformSelectionStep';
import { ChannelSetupStep } from '@/components/onboarding/cloning/ChannelSetupStep';
import { ContentSelectionStep } from '@/components/onboarding/cloning/ContentSelectionStep';
import { VoiceSettingsStep } from '@/components/onboarding/cloning/VoiceSettingsStep';
import { IdentityVerificationStep } from '@/components/onboarding/cloning/IdentityVerificationStep';
import { ReviewCompleteStep } from '@/components/onboarding/cloning/ReviewCompleteStep';
import { Platform } from '@/components/onboarding/cloning/types';

interface ContentItem {
  id: string; 
  title: string;
  duration: string;
  views: string;
  likes: string;
  published: string;
  thumbnail?: string;
}

export default function CloningOnboarding() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [selectedPlatform, setSelectedPlatform] = React.useState('');
  const [channelName, setChannelName] = React.useState('');
  const [selectedContent, setSelectedContent] = React.useState<string[]>([]);
  const [isLoading, setIsLoading] = React.useState(false);
  const [loadProgress, setLoadProgress] = React.useState(0);
  const [isProcessing, setIsProcessing] = React.useState(false);
  const [processProgress, setProcessProgress] = React.useState(0);
  const [uploadedFile, setUploadedFile] = React.useState<File | null>(null);
  const [audioUrl, setAudioUrl] = React.useState<string>('');
  const [processingProgress, setProcessingProgress] = React.useState(0);
  const [voiceCloneReady, setVoiceCloneReady] = React.useState(false);
  const [selectedAction, setSelectedAction] = React.useState<string | null>(null);
  const [isVerified, setIsVerified] = React.useState(false);
  const [showVerificationModal, setShowVerificationModal] = React.useState(false);
  const [voiceSettings, setVoiceSettings] = React.useState({
    exaggeration: 0.5,    // Controls expressiveness (0.25-2.0)
    cfgWeight: 0.5,       // CFG/Pace control (0.2-1.0)
    temperature: 0.8,     // Controls randomness (0.05-5.0)
    seed: 0,              // Random seed (0 for random)
    refWav: null as File | null  // Optional reference audio
  });

  // TikTok content hook
  const {
    user: tiktokUser,
    userLoading: tiktokUserLoading,
    userError: tiktokUserError,
    fetchUser: fetchTikTokUser,
    videos: tiktokVideos,
    videosLoading: tiktokVideosLoading,
    videosError: tiktokVideosError,
    fetchVideos: fetchTikTokVideos,
    downloadVideos: downloadTikTokVideos,
    downloadProgress: tiktokDownloadProgress,
    downloadStatus: tiktokDownloadStatus,
  } = useTikTokContent();

  // YouTube content hook
  const {
    channel: youtubeChannel,
    channelLoading: youtubeChannelLoading,
    channelError: youtubeChannelError,
    fetchChannel: fetchYouTubeChannel,
    videos: youtubeVideos,
    videosLoading: youtubeVideosLoading,
    videosError: youtubeVideosError,
    fetchVideos: fetchYouTubeVideos,
    downloadVideos: downloadYouTubeVideos,
    downloadProgress: youtubeDownloadProgress,
    downloadStatus: youtubeDownloadStatus,
  } = useYouTubeContent();

  // Twitch content hook
  const {
    channel: twitchChannel,
    channelLoading: twitchChannelLoading,
    channelError: twitchChannelError,
    channelDataComplete: twitchChannelDataComplete,
    fetchChannel: fetchTwitchChannel,
    videos: twitchVideos,
    videosLoading: twitchVideosLoading,
    videosError: twitchVideosError,
    fetchVideos: fetchTwitchVideos,
    downloadVideos: downloadTwitchVideos,
    downloadProgress: twitchDownloadProgress,
    downloadStatus: twitchDownloadStatus,
  } = useTwitchContent();

  const cleanupTikTokData = async () => {
    console.log('[Cleanup] TikTok data cleanup called');
  };
  const cleanupYouTubeData = async () => {
    console.log('[Cleanup] YouTube data cleanup called');
  };
  const cleanupTwitchData = async () => {
    console.log('[Cleanup] Twitch data cleanup called');
  };

  // TikTok user data complete fallback
  const tiktokUserDataComplete = !!tiktokUser;

  // Track if we've already attempted to fetch videos for this channel
  const fetchedChannelsRef = React.useRef<Set<string>>(new Set());

  // Auto-fetch YouTube videos when channel is loaded
  React.useEffect(() => {
    if (selectedPlatform === 'youtube' && youtubeChannel && !youtubeVideosLoading) {
      const channelId = youtubeChannel.channelId;
      
      // Only fetch if we haven't already fetched for this channel
      if (!fetchedChannelsRef.current.has(channelId) && youtubeVideos.length === 0) {
        console.log('Auto-fetching YouTube videos for channel:', channelId);
        fetchedChannelsRef.current.add(channelId);
        fetchYouTubeVideos(channelId, 6);
      }
    }
  }, [youtubeChannel, selectedPlatform, youtubeVideosLoading, youtubeVideos.length, fetchYouTubeVideos]);
  
  // Auto-fetch Twitch videos when channel is loaded
  React.useEffect(() => {
    if (selectedPlatform === 'twitch' && twitchChannel && !twitchVideosLoading) {
      const username = twitchChannel.username;
      
      // Only fetch if we haven't already fetched for this channel
      if (!fetchedChannelsRef.current.has(username) && twitchVideos.length === 0) {
        console.log('Auto-fetching Twitch videos for channel:', username);
        fetchedChannelsRef.current.add(username);
        fetchTwitchVideos(username, 6, 'archive');
      }
    }
  }, [twitchChannel, selectedPlatform, twitchVideosLoading, twitchVideos.length, fetchTwitchVideos]);
  
  // Debug YouTube videos
  React.useEffect(() => {
    console.log('[YouTube Debug] Videos state:', {
      videosLength: youtubeVideos.length,
      videos: youtubeVideos,
      loading: youtubeVideosLoading,
      error: youtubeVideosError
    });
  }, [youtubeVideos, youtubeVideosLoading, youtubeVideosError]);

  // Debug query to check database state
  const debugYouTubeData = useQuery(api.queries.debugYouTube.getAllYouTubeVideos);
  // const debugTwitchData = useQuery(api.queries.twitchContent.getAllTwitchVideos); // TODO: Add twitchContent queries
  React.useEffect(() => {
    if (debugYouTubeData) {
      console.log('[Debug] YouTube Database state:', debugYouTubeData);
    }
    // if (debugTwitchData) {
    //   console.log('[Debug] Twitch Database state:', debugTwitchData);
    // }
  }, [debugYouTubeData]);
  
  // Debug TikTok videos
  React.useEffect(() => {
    console.log('[TikTok Debug] Videos state:', {
      videosLength: tiktokVideos.length,
      videos: tiktokVideos,
      loading: tiktokVideosLoading,
      error: tiktokVideosError,
      user: tiktokUser
    });
  }, [tiktokVideos, tiktokVideosLoading, tiktokVideosError, tiktokUser]);
  
  // Debug TikTok user loading state
  React.useEffect(() => {
    console.log('[TikTok Debug] User profile state:', {
      hasUser: !!tiktokUser,
      userLoading: tiktokUserLoading,
      userDataComplete: tiktokUserDataComplete,
      shouldShowSkeleton: tiktokUserLoading || (!tiktokUser || !tiktokUserDataComplete),
      avatar: tiktokUser?.avatar,
      followerCount: tiktokUser?.followerCount
    });
  }, [tiktokUser, tiktokUserLoading, tiktokUserDataComplete]);
  
  // Debug Twitch videos
  React.useEffect(() => {
    console.log('[Twitch Debug] Videos state:', {
      videosLength: twitchVideos.length,
      videos: twitchVideos,
      loading: twitchVideosLoading,
      error: twitchVideosError,
      channel: twitchChannel
    });
  }, [twitchVideos, twitchVideosLoading, twitchVideosError, twitchChannel]);
  
  // Debug Twitch channel loading state
  React.useEffect(() => {
    console.log('[Twitch Debug] Channel state:', {
      hasChannel: !!twitchChannel,
      channelLoading: twitchChannelLoading,
      channelDataComplete: twitchChannelDataComplete,
      shouldShowSkeleton: twitchChannelLoading || (!twitchChannel || !twitchChannelDataComplete),
      profileImage: twitchChannel?.profileImage,
      followerCount: twitchChannel?.followerCount,
      isLive: twitchChannel?.isLive
    });
  }, [twitchChannel, twitchChannelLoading, twitchChannelDataComplete]);
  
  // Cleanup when platform changes
  React.useEffect(() => {
    const cleanup = async () => {
      if (selectedPlatform !== 'tiktok' && tiktokUser) {
        console.log('[Cloning] Platform changed from TikTok, cleaning up data');
        try {
          await cleanupTikTokData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up TikTok data:', error);
        }
      }
      if (selectedPlatform !== 'youtube' && youtubeChannel) {
        console.log('[Cloning] Platform changed from YouTube, cleaning up data');
        try {
          await cleanupYouTubeData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up YouTube data:', error);
        }
      }
      if (selectedPlatform !== 'twitch' && twitchChannel) {
        console.log('[Cloning] Platform changed from Twitch, cleaning up data');
        try {
          await cleanupTwitchData();
        } catch (error) {
          console.error('[Cloning] Error cleaning up Twitch data:', error);
        }
      }
    };
    
    cleanup();
  }, [selectedPlatform, tiktokUser, youtubeChannel, twitchChannel, cleanupTikTokData, cleanupYouTubeData, cleanupTwitchData]);
  
  // Cleanup when channel name is cleared
  React.useEffect(() => {
    if (channelName === '' && (tiktokUser || tiktokVideos.length > 0) && selectedPlatform === 'tiktok') {
      console.log('[Cloning] Channel name cleared, cleaning up TikTok data');
      cleanupTikTokData();
    }
    if (channelName === '' && (youtubeChannel || youtubeVideos.length > 0) && selectedPlatform === 'youtube') {
      console.log('[Cloning] Channel name cleared, cleaning up YouTube data');
      cleanupYouTubeData();
    }
    if (channelName === '' && (twitchChannel || twitchVideos.length > 0) && selectedPlatform === 'twitch') {
      console.log('[Cloning] Channel name cleared, cleaning up Twitch data');
      cleanupTwitchData();
    }
  }, [channelName, tiktokUser, tiktokVideos.length, youtubeChannel, youtubeVideos.length, twitchChannel, twitchVideos.length, selectedPlatform, cleanupTikTokData, cleanupYouTubeData, cleanupTwitchData]);
  
  React.useEffect(() => {
    if (isLoading && currentStep === 3) {
      if (selectedPlatform === 'tiktok' && !tiktokUserLoading && !tiktokVideosLoading) {
        if (tiktokVideos.length > 0 || tiktokVideosError) {
          console.log('[Cloning] TikTok loading complete, videos:', tiktokVideos.length);
          setIsLoading(false);
        }
      }
      else if (selectedPlatform === 'youtube' && !youtubeChannelLoading && !youtubeVideosLoading) {
        if (youtubeVideos.length > 0 || youtubeVideosError) {
          console.log('[Cloning] YouTube loading complete, videos:', youtubeVideos.length);
          setIsLoading(false);
        }
      }
      else if (selectedPlatform === 'twitch' && !twitchChannelLoading && !twitchVideosLoading) {
        if (twitchVideos.length > 0 || twitchVideosError) {
          console.log('[Cloning] Twitch loading complete, videos:', twitchVideos.length);
          setIsLoading(false);
        }
      }
    }
  }, [isLoading, currentStep, selectedPlatform, tiktokUserLoading, tiktokVideosLoading, 
      tiktokVideos.length, tiktokVideosError, youtubeChannelLoading, youtubeVideosLoading, 
      youtubeVideos.length, youtubeVideosError, twitchChannelLoading, twitchVideosLoading,
      twitchVideos.length, twitchVideosError, ]);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setUploadedFile(file);
      setAudioUrl(URL.createObjectURL(file));
    }
  };

  const handleLoadContent = async () => {
    setIsLoading(true);
    setCurrentStep(3);
    
    if (selectedPlatform === 'upload') {

      setProcessingProgress(0);
      for (let i = 0; i <= 100; i += 10) {
        setProcessingProgress(i);
        await new Promise(resolve => setTimeout(resolve, 200));
      }
      setVoiceCloneReady(true);
      setIsLoading(false);
    } else if (selectedPlatform === 'tiktok') {

      try {

        if (tiktokUser || tiktokVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing TikTok data before new search');
          await cleanupTikTokData();
        }
        
        setLoadProgress(10);

        console.log('Fetching TikTok user:', channelName);
        await fetchTikTokUser(channelName);
        setLoadProgress(50);

        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading TikTok content:', error);
        setIsLoading(false);
      }
    } else if (selectedPlatform === 'youtube') {

      try {

        if (youtubeChannel || youtubeVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing YouTube data before new search');
          await cleanupYouTubeData();
        }
        
        setLoadProgress(10);

        let channelUrl = channelName;
        if (!channelName.includes('youtube.com') && !channelName.includes('youtu.be')) {
          if (channelName.startsWith('@')) {
            channelUrl = `https://youtube.com/${channelName}`;
          } else if (channelName.startsWith('UC') && channelName.length === 24) {
            channelUrl = `https://youtube.com/channel/${channelName}`;
          } else {
            channelUrl = `https://youtube.com/@${channelName}`;
          }
        }
        console.log('Fetching YouTube channel with URL:', channelUrl);
        await fetchYouTubeChannel(channelUrl);
        setLoadProgress(50);

        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading YouTube content:', error);
        setIsLoading(false);
      }
    } else if (selectedPlatform === 'twitch') {

      try {

        if (twitchChannel || twitchVideos.length > 0) {
          console.log('[Cloning] Cleaning up existing Twitch data before new search');
          await cleanupTwitchData();
        }
        
        setLoadProgress(10);

        let channelUrl = channelName;
        if (!channelName.includes('twitch.tv')) {
          channelUrl = `https://twitch.tv/${channelName}`;
        }
        console.log('Fetching Twitch channel:', channelUrl);
        await fetchTwitchChannel(channelUrl);
        setLoadProgress(50);
        // Videos are auto-fetched by the hook after channel is loaded
        setLoadProgress(100);
      } catch (error) {
        console.error('Error loading Twitch content:', error);
        setIsLoading(false);
      }
      for (let i = 0; i <= 100; i += 20) {
        setLoadProgress(i);
        await new Promise(resolve => setTimeout(resolve, 300));
      }
      setIsLoading(false);
    }
  };


  const canProceedFromStep1 = () => selectedPlatform !== '';
  const canProceedFromStep2 = () => {
    if (selectedPlatform === 'upload') {
      return uploadedFile !== null;
    }
    return channelName.trim() !== '';
  };
  const canProceedFromStep3 = () => {
    if (selectedPlatform === 'upload') {
      return voiceCloneReady;
    }
    return selectedContent.length > 0;
  };

  const toggleContentSelection = (contentId: string) => {
    setSelectedContent(prev => 
      prev.includes(contentId) 
        ? prev.filter(id => id !== contentId)
        : [...prev, contentId]
    );
  };

  const handleExportAudio = () => {
    const link = document.createElement('a');
    link.href = audioUrl;
    link.download = `voice-clone-${Date.now()}.wav`;
    link.click();
  };


  const handleStepChange = async (step: number) => {
    if (step < currentStep || step === 1) {
      if (step <= 2 && currentStep >= 3) {
        if (selectedPlatform === 'tiktok') {
          console.log('[Cloning] Cleaning up TikTok data on navigation back');
          try {
            await cleanupTikTokData();
            setChannelName('');
            setSelectedContent([]);
          } catch (error) {
            console.error('[Cloning] Error cleaning up TikTok data:', error);
          }
        } else if (selectedPlatform === 'youtube') {
          console.log('[Cloning] Cleaning up YouTube data on navigation back');
          try {
            await cleanupYouTubeData();
            setChannelName('');
            setSelectedContent([]);
          } catch (error) {
            console.error('[Cloning] Error cleaning up YouTube data:', error);
          }
        } else if (selectedPlatform === 'twitch') {
          console.log('[Cloning] Cleaning up Twitch data on navigation back');
          try {
            await cleanupTwitchData();
            setChannelName('');
            setSelectedContent([]);
          } catch (error) {
            console.error('[Cloning] Error cleaning up Twitch data:', error);
          }
      }
      setCurrentStep(step);
    }
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerificationModal(false);
    setIsVerified(true);
    setIsProcessing(true);
    setCurrentStep(6);
    
    for (let i = 0; i <= 100; i += 10) {
      setProcessProgress(i);
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    setIsProcessing(false);
  };

  const handleProcessContent = async () => {
    setIsProcessing(true);
    setCurrentStep(4);
    
    if (selectedPlatform === 'tiktok') {
      await downloadTikTokVideos(selectedContent);
    } else if (selectedPlatform === 'youtube') {
      await downloadYouTubeVideos(selectedContent);
    } else if (selectedPlatform === 'twitch') {
      await downloadTwitchVideos(selectedContent);
    }
    
    setIsProcessing(false);
  };

  const handleActionSelect = (action: string) => {
    setSelectedAction(action);
  };

  return (
    <div 
      className="min-h-screen bg-pink-500 relative pb-8" 
      style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}
    >
      <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-pink-600 border-2 border-black flex items-center justify-center">
                <UilCopy className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-pink-500 border-2 border-black flex items-center justify-center">
                <UilVideo className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-pink-600 hover:bg-pink-700 border-4 border-black p-0">
                  {currentStep === 1 && <UilChannel className="h-12 w-12 text-white" />}
                  {currentStep === 2 && <UilYoutube className="h-12 w-12 text-white" />}
                  {currentStep === 3 && <UilVideo className="h-12 w-12 text-white" />}
                  {currentStep === 4 && <UilCog className="h-12 w-12 text-white" />}
                  {currentStep === 5 && <UilQuestionCircle className="h-12 w-12 text-white" />}
                  {currentStep === 6 && <UilCheckCircle className="h-12 w-12 text-white" />}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'CHOOSE PLATFORM'}
                {currentStep === 2 && 'CHANNEL SETUP'}
                {currentStep === 3 && (isLoading ? 'LOADING CONTENT' : selectedPlatform === 'upload' ? 'VOICE STUDIO' : 'SELECT CONTENT')}
                {currentStep === 4 && 'VOICE SETTINGS'}
                {currentStep === 5 && 'VERIFY IDENTITY'}
                {currentStep === 6 && 'REVIEW & COMPLETE'}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'SELECT YOUR CONTENT SOURCE'}
                {currentStep === 2 && 'ENTER CHANNEL INFORMATION'}
                {currentStep === 3 && (isLoading ? 'FETCHING CHANNEL DATA' : selectedPlatform === 'upload' ? 'PROCESS YOUR MEDIA' : 'CHOOSE VIDEOS TO CLONE')}
                {currentStep === 4 && 'CUSTOMIZE VOICE PARAMETERS'}
                {currentStep === 5 && 'CONFIRM YOUR IDENTITY'}
                {currentStep === 6 && (isProcessing ? 'CREATING YOUR AI CLONE' : 'YOUR CLONE IS READY')}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-pink-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-pink-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-pink-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {currentStep === 1 && (
            <PlatformSelectionStep
              selectedPlatform={selectedPlatform}
              setSelectedPlatform={setSelectedPlatform}
              canProceedFromStep1={canProceedFromStep1}
              setCurrentStep={setCurrentStep}
            />
          )}

          {currentStep === 2 && (
            <ChannelSetupStep
              selectedPlatform={selectedPlatform as Platform}
              channelName={channelName}
              setChannelName={setChannelName}
              uploadedFile={uploadedFile}
              handleFileUpload={handleFileUpload}
              canProceedFromStep2={canProceedFromStep2}
              handleLoadContent={handleLoadContent}
              handleStepChange={handleStepChange}
              fetchedChannelsRef={fetchedChannelsRef}
            />
          )}

          {currentStep === 3 && (
            <ContentSelectionStep
              selectedPlatform={selectedPlatform as Platform}
              isLoading={isLoading}
              loadProgress={loadProgress}
              tiktokUser={tiktokUser}
              tiktokUserLoading={tiktokUserLoading}
              tiktokUserDataComplete={tiktokUserDataComplete}
              tiktokVideos={tiktokVideos}
              tiktokVideosLoading={tiktokVideosLoading}
              tiktokVideosError={tiktokVideosError}
              youtubeChannel={youtubeChannel}
              youtubeChannelLoading={youtubeChannelLoading}
              youtubeVideos={youtubeVideos}
              youtubeVideosLoading={youtubeVideosLoading}
              youtubeVideosError={youtubeVideosError}
              twitchChannel={twitchChannel}
              twitchChannelLoading={twitchChannelLoading}
              twitchChannelDataComplete={twitchChannelDataComplete}
              twitchVideos={twitchVideos}
              twitchVideosLoading={twitchVideosLoading}
              twitchVideosError={twitchVideosError}
              selectedContent={selectedContent}
              toggleContentSelection={toggleContentSelection}
              canProceedFromStep3={canProceedFromStep3}
              handleStepChange={handleStepChange}
              handleProcessContent={handleProcessContent}
              voiceCloneReady={voiceCloneReady}
              processingProgress={processingProgress}
              audioUrl={audioUrl}
              handleExportAudio={handleExportAudio}
              setCurrentStep={setCurrentStep}
            />
          )}

          {currentStep === 4 && (
            <VoiceSettingsStep
              voiceSettings={voiceSettings}
              setVoiceSettings={setVoiceSettings}
              handleStepChange={handleStepChange}
              setCurrentStep={setCurrentStep}
            />
          )}

          {currentStep === 5 && (
            <IdentityVerificationStep
              selectedAction={selectedAction}
              handleActionSelect={handleActionSelect}
              isVerified={isVerified}
              setShowVerificationModal={setShowVerificationModal}
              handleStepChange={handleStepChange}
            />
          )}

          {currentStep === 6 && (
            <ReviewCompleteStep
              isProcessing={isProcessing}
              processProgress={processProgress}
            />
          )}
        </div>

        <div className="mt-8">
          <OnboardingFooter />
        </div>
      </div>
      
      <VerificationModal
        isOpen={showVerificationModal}
        onClose={() => setShowVerificationModal(false)}
        onComplete={handleVerificationComplete}
      />
    </div>
  );
}


================================================
FILE: src/app/onboarding/courses/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  UilGraduationCap,
  UilClock,
  UilVideo,
  UilArrowRight,
  UilAward,
  UilStar,
  UilCheckCircle,
  UilLock,
  UilPlay,
  UilFileAlt
} from '@tooni/iconscout-unicons-react';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { Star15 } from '@/components/ui/star';

interface Module {
  id: string;
  title: string;
  duration: string;
  completed: boolean;
  locked: boolean;
}

interface Course {
  id: string;
  title: string;
  description: string;
  instructor: string;
  level: 'beginner' | 'intermediate' | 'advanced';
  duration: string;
  modules: Module[];
  enrolled: boolean;
  progress: number;
  rating: number;
  students: number;
  certificate: boolean;
}

const mockCourses: Course[] = [
  {
    id: '1',
    title: 'AI VOICE AGENTS MASTERCLASS',
    description: 'Complete training from zero to expert. Learn everything about building, deploying, and scaling AI voice agents.',
    instructor: 'Dr. Sarah Chen',
    level: 'beginner',
    duration: '8 weeks',
    modules: [
      { id: '1-1', title: 'Introduction to AI Voice Technology', duration: '45 min', completed: true, locked: false },
      { id: '1-2', title: 'Setting Up Your First Agent', duration: '60 min', completed: true, locked: false },
      { id: '1-3', title: 'Conversation Design Principles', duration: '90 min', completed: false, locked: false },
      { id: '1-4', title: 'Advanced Voice Customization', duration: '75 min', completed: false, locked: true }
    ],
    enrolled: true,
    progress: 45,
    rating: 4.9,
    students: 1250,
    certificate: true
  },
  {
    id: '2',
    title: 'SALES AUTOMATION WITH AI',
    description: 'Transform your sales process with AI-powered voice agents. Learn to automate outreach and qualify leads at scale.',
    instructor: 'Mike Rodriguez',
    level: 'intermediate',
    duration: '6 weeks',
    modules: [
      { id: '2-1', title: 'Sales Psychology & AI', duration: '50 min', completed: false, locked: false },
      { id: '2-2', title: 'Building High-Converting Scripts', duration: '80 min', completed: false, locked: true },
      { id: '2-3', title: 'Lead Qualification Strategies', duration: '65 min', completed: false, locked: true },
      { id: '2-4', title: 'Performance Analytics', duration: '55 min', completed: false, locked: true }
    ],
    enrolled: false,
    progress: 0,
    rating: 4.8,
    students: 890,
    certificate: true
  },
  {
    id: '3',
    title: 'VOICE CLONING DEEP DIVE',
    description: 'Master the art and science of voice cloning. Create authentic, natural-sounding voice agents.',
    instructor: 'Lisa Park',
    level: 'advanced',
    duration: '4 weeks',
    modules: [
      { id: '3-1', title: 'Voice Cloning Fundamentals', duration: '70 min', completed: false, locked: false },
      { id: '3-2', title: 'Advanced Cloning Techniques', duration: '85 min', completed: false, locked: true },
      { id: '3-3', title: 'Ethics & Best Practices', duration: '45 min', completed: false, locked: true },
      { id: '3-4', title: 'Production Workflows', duration: '90 min', completed: false, locked: true }
    ],
    enrolled: false,
    progress: 0,
    rating: 4.7,
    students: 456,
    certificate: true
  }
];

export default function CoursesPage() {
  const [selectedLevel, setSelectedLevel] = React.useState('all');
  const [selectedCourse, setSelectedCourse] = React.useState<string | null>(null);
  const [expandedCourse, setExpandedCourse] = React.useState<string | null>(null);

  const levels = ['all', 'beginner', 'intermediate', 'advanced'];

  const filteredCourses = selectedLevel === 'all' 
    ? mockCourses 
    : mockCourses.filter(course => course.level === selectedLevel);

  const getLevelColor = (level: string) => {
    switch (level) {
      case 'beginner': return 'bg-green-100 text-green-800 border-green-800';
      case 'intermediate': return 'bg-yellow-100 text-yellow-800 border-yellow-800';
      case 'advanced': return 'bg-red-100 text-red-800 border-red-800';
      default: return 'bg-gray-100 text-gray-800 border-gray-800';
    }
  };

  return (
    <div 
      className="min-h-screen bg-purple-500 relative pb-8" 
      style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}
    >
      <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          {/* Title Card */}
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              {/* Decorative elements */}
              <div className="absolute top-2 left-4 w-8 h-8 bg-purple-600 border-2 border-black flex items-center justify-center">
                <UilGraduationCap className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-purple-500 border-2 border-black flex items-center justify-center">
                <UilAward className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-pink-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-yellow-500 border-2 border-black -rotate-12"></div>
              
              {/* Central icon button */}
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-purple-600 hover:bg-purple-700 border-4 border-black p-0">
                  <UilGraduationCap className="h-12 w-12 text-white" />
                </Button>
              </div>
              
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                COURSES
              </CardTitle>
              
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                Structured learning paths to AI voice mastery
              </p>
              
              {/* Animated decorative bars */}
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-purple-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-purple-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-purple-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {/* Level Filter */}
          <div className="flex flex-wrap gap-2 justify-center">
            {levels.map((level) => (
              <Button
                key={level}
                onClick={() => setSelectedLevel(level)}
                className={`uppercase font-black ${
                  selectedLevel === level
                    ? 'bg-purple-600 hover:bg-purple-700 text-white'
                    : 'bg-white hover:bg-gray-100 text-black'
                } border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] hover:shadow-[4px_4px_0_rgba(0,0,0,1)]`}
              >
                {level}
              </Button>
            ))}
          </div>

          {/* Achievement Banner */}
          <Card className="transform -rotate-1 relative overflow-hidden bg-purple-50">
            <CardContent className="pt-6">
              <div className="flex items-start gap-4">
                <Button
                  size="icon"
                  variant="default"
                  className="w-12 h-12 flex-shrink-0 bg-purple-600 hover:bg-purple-700 text-white border-black"
                >
                  <UilAward className="h-6 w-6 text-white" />
                </Button>
                <div className="flex-1">
                  <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                    EARN CERTIFICATES
                  </h3>
                  <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                    Complete courses to earn <span className="font-black text-purple-600">verified certificates</span> and showcase your expertise.
                  </p>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="flex items-center gap-3">
                      <div className="w-2 h-2 bg-purple-600 rounded-full"></div>
                      <span className="text-black font-medium">Industry recognized</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="w-2 h-2 bg-purple-600 rounded-full"></div>
                      <span className="text-black font-medium">Lifetime access</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="w-2 h-2 bg-purple-600 rounded-full"></div>
                      <span className="text-black font-medium">Expert instructors</span>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Courses Grid */}
          <div className="space-y-6">
            {filteredCourses.map((course, index) => (
              <div key={course.id} className="relative">
                {selectedCourse === course.id && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" 
                       style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#9333EA" size={80} 
                                className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" 
                                stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" 
                              style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          {course.enrolled ? 'ENROLLED' : 'SELECTED'}
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Card 
                  className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all transform ${
                    index % 2 === 0 ? 'rotate-1' : '-rotate-1'
                  } ${
                    selectedCourse === course.id ? 'bg-purple-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                  }`}
                  onClick={() => setSelectedCourse(course.id)}
                >
                  <CardContent className="p-6">
                    {/* Course Header */}
                    <div className="flex justify-between items-start mb-4">
                      <div className="flex-1">
                        <h4 className="font-black uppercase text-xl mb-2">{course.title}</h4>
                        <p className="text-sm text-gray-600 mb-3">{course.description}</p>
                      </div>
                      {course.certificate && (
                        <Badge className="bg-purple-500 text-white border-2 border-black flex-shrink-0 ml-4">
                          <UilAward className="h-3 w-3 mr-1" />
                          CERTIFICATE
                        </Badge>
                      )}
                    </div>

                    {/* Course Meta */}
                    <div className="flex flex-wrap gap-4 mb-4">
                      <Badge className={`border-2 ${getLevelColor(course.level)}`}>
                        {course.level.toUpperCase()}
                      </Badge>
                      <div className="flex items-center gap-1">
                        <UilClock className="h-4 w-4" />
                        <span className="text-sm font-bold">{course.duration}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <UilVideo className="h-4 w-4" />
                        <span className="text-sm font-bold">{course.modules.length} modules</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <UilStar className="h-4 w-4 text-yellow-500" />
                        <span className="text-sm font-bold">{course.rating}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <UilGraduationCap className="h-4 w-4" />
                        <span className="text-sm font-bold">{course.students} students</span>
                      </div>
                    </div>

                    {/* Instructor */}
                    <div className="mb-4">
                      <p className="text-sm text-gray-600">Instructor: <span className="font-bold text-black">{course.instructor}</span></p>
                    </div>

                    {/* Progress Bar (if enrolled) */}
                    {course.enrolled && (
                      <div className="mb-4">
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-sm font-bold">PROGRESS</span>
                          <span className="text-sm font-bold">{course.progress}%</span>
                        </div>
                        <Progress value={course.progress} className="h-3 border-2 border-black" />
                      </div>
                    )}

                    {/* Module List Toggle */}
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        setExpandedCourse(expandedCourse === course.id ? null : course.id);
                      }}
                      className="mb-4 text-sm font-bold uppercase hover:bg-purple-50"
                    >
                      <UilFileAlt className="h-4 w-4 mr-2" />
                      {expandedCourse === course.id ? 'HIDE' : 'VIEW'} CURRICULUM
                    </Button>

                    {/* Module List */}
                    {expandedCourse === course.id && (
                      <div className="mb-4 space-y-2 border-t-2 border-black pt-4">
                        {course.modules.map((module, moduleIndex) => (
                          <div key={module.id} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                            <div className="flex items-center gap-2">
                              {module.completed ? (
                                <UilCheckCircle className="h-5 w-5 text-green-600" />
                              ) : module.locked ? (
                                <UilLock className="h-5 w-5 text-gray-400" />
                              ) : (
                                <UilPlay className="h-5 w-5 text-purple-600" />
                              )}
                              <span className={`text-sm ${module.locked ? 'text-gray-400' : 'text-black'} ${module.completed ? 'line-through' : ''}`}>
                                {moduleIndex + 1}. {module.title}
                              </span>
                            </div>
                            <span className="text-xs text-gray-500">{module.duration}</span>
                          </div>
                        ))}
                      </div>
                    )}

                    {/* Action Button */}
                    <Button 
                      className={`w-full ${
                        course.enrolled 
                          ? 'bg-purple-600 hover:bg-purple-700' 
                          : 'bg-purple-500 hover:bg-purple-600'
                      } text-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] hover:shadow-[4px_4px_0_rgba(0,0,0,1)]`}
                    >
                      {course.enrolled ? 'CONTINUE LEARNING' : 'ENROLL NOW'}
                      <UilArrowRight className="ml-2 h-4 w-4" />
                    </Button>
                  </CardContent>
                </Card>
              </div>
            ))}
          </div>

          {/* Info Box */}
          <Card className="bg-purple-100 border-2 border-black mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-purple-400 hover:bg-purple-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilGraduationCap className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">LEARNING PATHS</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Our courses are designed to build on each other. Start with beginner courses to establish fundamentals, then progress to intermediate and advanced topics for specialized skills.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Footer */}
          <div className="mt-8">
            <OnboardingFooter />
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/app/onboarding/guides/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  UilBookAlt,
  UilClock,
  UilChartGrowth,
  UilArrowRight,
  UilRocket,
  UilStar,
  UilFileAlt,
  UilLightbulbAlt
} from '@tooni/iconscout-unicons-react';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { Star15 } from '@/components/ui/star';

interface Guide {
  id: string;
  title: string;
  description: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  estimatedTime: string;
  category: string;
  steps: number;
  popular: boolean;
}

const mockGuides: Guide[] = [
  {
    id: '1',
    title: 'COMPLETE SETUP GUIDE FOR YOUR FIRST AGENT',
    description: 'Step-by-step walkthrough to create, configure, and deploy your first AI voice agent from scratch.',
    difficulty: 'beginner',
    estimatedTime: '30 mins',
    category: 'Getting Started',
    steps: 8,
    popular: true
  },
  {
    id: '2',
    title: 'OPTIMIZING CALL SCRIPTS FOR CONVERSION',
    description: 'Learn how to craft compelling scripts that drive results and improve your agent performance metrics.',
    difficulty: 'intermediate',
    estimatedTime: '45 mins',
    category: 'Sales Optimization',
    steps: 12,
    popular: true
  },
  {
    id: '3',
    title: 'ADVANCED VOICE CLONING TECHNIQUES',
    description: 'Master the art of creating natural-sounding voice clones with advanced customization options.',
    difficulty: 'advanced',
    estimatedTime: '60 mins',
    category: 'Voice Technology',
    steps: 15,
    popular: false
  },
  {
    id: '4',
    title: 'INTEGRATING HUNTER FOR LEAD GENERATION',
    description: 'Connect Hunter search capabilities to automatically populate your call lists with qualified leads.',
    difficulty: 'intermediate',
    estimatedTime: '40 mins',
    category: 'Lead Generation',
    steps: 10,
    popular: false
  }
];

export default function GuidesPage() {
  const [selectedDifficulty, setSelectedDifficulty] = React.useState('all');
  const [selectedGuide, setSelectedGuide] = React.useState<string | null>(null);

  const difficulties = ['all', 'beginner', 'intermediate', 'advanced'];

  const filteredGuides = selectedDifficulty === 'all' 
    ? mockGuides 
    : mockGuides.filter(guide => guide.difficulty === selectedDifficulty);

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-green-100 text-green-800 border-green-800';
      case 'intermediate': return 'bg-yellow-100 text-yellow-800 border-yellow-800';
      case 'advanced': return 'bg-red-100 text-red-800 border-red-800';
      default: return 'bg-gray-100 text-gray-800 border-gray-800';
    }
  };

  return (
    <div 
      className="min-h-screen bg-cyan-400 relative pb-8" 
      style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}
    >
      <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
        <div className="w-full max-w-4xl space-y-8">
          {/* Title Card */}
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              {/* Decorative elements */}
              <div className="absolute top-2 left-4 w-8 h-8 bg-cyan-600 border-2 border-black flex items-center justify-center">
                <UilBookAlt className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-cyan-500 border-2 border-black flex items-center justify-center">
                <UilLightbulbAlt className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-blue-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-purple-500 border-2 border-black -rotate-12"></div>
              
              {/* Central icon button */}
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-cyan-600 hover:bg-cyan-700 border-4 border-black p-0">
                  <UilBookAlt className="h-12 w-12 text-white" />
                </Button>
              </div>
              
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                GUIDES
              </CardTitle>
              
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                Step-by-step tutorials to master Diala
              </p>
              
              {/* Animated decorative bars */}
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-cyan-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-cyan-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-cyan-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {/* Difficulty Filter */}
          <div className="flex flex-wrap gap-2 justify-center">
            {difficulties.map((difficulty) => (
              <Button
                key={difficulty}
                onClick={() => setSelectedDifficulty(difficulty)}
                className={`uppercase font-black ${
                  selectedDifficulty === difficulty
                    ? 'bg-cyan-600 hover:bg-cyan-700 text-white'
                    : 'bg-white hover:bg-gray-100 text-black'
                } border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] hover:shadow-[4px_4px_0_rgba(0,0,0,1)]`}
              >
                {difficulty}
              </Button>
            ))}
          </div>

          {/* Popular Guides Section */}
          <Card className="transform -rotate-1 relative overflow-hidden bg-cyan-50">
            <CardContent className="pt-6">
              <div className="flex items-start gap-4">
                <Button
                  size="icon"
                  variant="default"
                  className="w-12 h-12 flex-shrink-0 bg-cyan-600 hover:bg-cyan-700 text-white border-black"
                >
                  <UilRocket className="h-6 w-6 text-white" />
                </Button>
                <div className="flex-1">
                  <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                    MOST POPULAR GUIDES
                  </h3>
                  <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                    Start with these <span className="font-black text-cyan-600">community favorites</span> to get up and running quickly.
                  </p>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {mockGuides.filter(guide => guide.popular).map((guide) => (
                      <div key={guide.id} className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                        <span className="text-black font-medium">{guide.title}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Guides Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {filteredGuides.map((guide, index) => (
              <div key={guide.id} className="relative">
                {selectedGuide === guide.id && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" 
                       style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#00CED1" size={80} 
                                className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" 
                                stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" 
                              style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Card 
                  className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all transform ${
                    index % 2 === 0 ? 'rotate-1' : '-rotate-1'
                  } ${
                    selectedGuide === guide.id ? 'bg-cyan-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                  }`}
                  onClick={() => setSelectedGuide(guide.id)}
                >
                  <CardContent className="p-6">
                    <div className="flex justify-between items-start mb-3">
                      <h4 className="font-black uppercase text-lg flex-1 pr-2">{guide.title}</h4>
                      {guide.popular && (
                        <Badge className="bg-cyan-500 text-white border-2 border-black flex-shrink-0">
                          <UilStar className="h-3 w-3 mr-1" />
                          POPULAR
                        </Badge>
                      )}
                    </div>
                    <p className="text-sm text-gray-600 mb-4">{guide.description}</p>
                    <div className="flex items-center justify-between mb-4">
                      <Badge className={`border-2 ${getDifficultyColor(guide.difficulty)}`}>
                        {guide.difficulty.toUpperCase()}
                      </Badge>
                      <div className="flex items-center gap-3 text-xs">
                        <div className="flex items-center gap-1">
                          <UilClock className="h-3 w-3" />
                          <span className="font-bold">{guide.estimatedTime}</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <UilFileAlt className="h-3 w-3" />
                          <span className="font-bold">{guide.steps} steps</span>
                        </div>
                      </div>
                    </div>
                    <Button 
                      className="w-full bg-cyan-500 hover:bg-cyan-600 text-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] hover:shadow-[4px_4px_0_rgba(0,0,0,1)]"
                    >
                      START GUIDE
                      <UilArrowRight className="ml-2 h-4 w-4" />
                    </Button>
                  </CardContent>
                </Card>
              </div>
            ))}
          </div>

          {/* Info Box */}
          <Card className="bg-cyan-100 border-2 border-black mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-cyan-400 hover:bg-cyan-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilChartGrowth className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">TRACK YOUR PROGRESS</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Complete guides to unlock achievements and gain expertise. Your progress is automatically saved, so you can continue where you left off anytime.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Footer */}
          <div className="mt-8">
            <OnboardingFooter />
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/app/onboarding/hunter/page-original.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { useAction, useQuery, useMutation } from "convex/react";
import { api } from "@convex/_generated/api";
// import { useUser } from "@clerk/nextjs"; // Temporarily commented out for backend integration
import SimpleOnboardingNav from '@/components/custom/simple-onboarding-nav';
import PremiumFeatureCard from '@/components/custom/premium-feature-card';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { useConvexErrorHandler } from '@/hooks/useConvexErrorHandler';
import { toast } from 'sonner';
import { Star15 } from '@/components/ui/star';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { 
  UilSearch, 
  UilPhone, 
  UilAnalytics,
  UilFilter,
  UilMapMarker,
  UilBuilding,
  UilUserCheck,
  UilArrowRight,
  UilArrowLeft,
  UilCheckCircle,
  UilInfoCircle,
  UilDownloadAlt,
  UilPlay,
  UilPause,
  UilLinkedinAlt,
  UilGlobe,
  UilDatabase,
  UilBriefcaseAlt,
  UilCrosshair,
  UilUsersAlt,
  UilEnvelope,
  UilChartGrowth,
  UilClipboardNotes
} from '@tooni/iconscout-unicons-react';

interface SearchCriteria {
  industry: string;
  location: string;
  companySize: string;
  jobTitles: string[];
  keywords: string;
}

interface ValidationCriteria {
  mustHaveWebsite: boolean;
  mustHaveContactInfo: boolean;
  mustHaveSpecificKeywords: string[];
  mustBeInIndustry: boolean;
  customValidationRules: string;
}

interface LeadSource {
  id: string;
  name: string;
  icon: React.ReactNode;
  description: string;
  color: string;
}

const leadSources: LeadSource[] = [
  {
    id: 'web',
    name: 'Web Search',
    icon: <UilGlobe className="h-8 w-8" />,
    description: 'Crawl websites and online directories',
    color: 'bg-green-600'
  },
  {
    id: 'database',
    name: 'B2B Database',
    icon: <UilDatabase className="h-8 w-8" />,
    description: 'Access verified business contacts',
    color: 'bg-purple-600'
  },
  {
    id: 'directory',
    name: 'Business Directories',
    icon: <UilBuilding className="h-8 w-8" />,
    description: 'Search Yellow Pages and industry directories',
    color: 'bg-orange-600'
  }
];

const industries = [
  'Technology',
  'Healthcare',
  'Finance',
  'Real Estate',
  'Retail',
  'Manufacturing',
  'Education',
  'Consulting',
  'Other' // Add option for custom industry
];

const jobTitles = [
  'CEO',
  'CTO',
  'VP Sales',
  'Marketing Director',
  'HR Manager',
  'Operations Manager',
  'Product Manager',
  'Business Owner'
];

export default function HunterOnboarding() {
  // const { user } = useUser(); // Temporarily commented out for backend integration
  const user = { id: "temp-user-123" }; // Temporary mock user for testing
  const createTestSubscription = useMutation(api.testSetup.createTestSubscription);
  const updateSubscriptionLimits = useMutation(api.testSetup.updateSubscriptionLimits);
  const { handleConvexError } = useConvexErrorHandler();
  const [currentStep, setCurrentStep] = React.useState(1);
  const [searchName, setSearchName] = React.useState('');
  const [searchObjective, setSearchObjective] = React.useState('');
  const [selectedSources, setSelectedSources] = React.useState<string[]>([]);
  const [searchCriteria, setSearchCriteria] = React.useState<SearchCriteria>({
    industry: '',
    location: '',
    companySize: '1-100', // Default to 1-100
    jobTitles: [],
    keywords: ''
  });
  const [customIndustry, setCustomIndustry] = React.useState('');
  const [contactPreferences, setContactPreferences] = React.useState({
    includeEmails: true,
    includePhones: true,
    includeLinkedIn: false
  });
  const [validationCriteria, setValidationCriteria] = React.useState<ValidationCriteria>({
    mustHaveWebsite: true,
    mustHaveContactInfo: true,
    mustHaveSpecificKeywords: [],
    mustBeInIndustry: true,
    customValidationRules: ''
  });
  const [isSearching, setIsSearching] = React.useState(false);
  const [searchProgress, setSearchProgress] = React.useState(0);
  const [currentStatus, setCurrentStatus] = React.useState('');
  const [searchResults, setSearchResults] = React.useState<any>(null);
  const [showVerification, setShowVerification] = React.useState(false);
  const [currentSearchId, setCurrentSearchId] = React.useState<string | null>(null);
  const [devMode, setDevMode] = React.useState(false);

  // Convex actions
  const createLeadSearch = useAction(api.hunterActions.createLeadSearch);
  const getSearchStatus = useAction(api.hunterActions.getSearchStatus);
  
  // Convex queries
  const userUsageStats = useQuery(api.rateLimitHelpers.getUserUsageStats, 
    user?.id ? { userId: user.id } : "skip"
  );

  // Auto-fill function for dev mode
  React.useEffect(() => {
    if (devMode) {
      // Auto-fill Step 1
      setSearchName('Belfast Roofing Contractors Q4');
      setSearchObjective('Finding roofing contractors and construction companies in Belfast area for partnership opportunities');
      setSelectedSources(['web']);
      
      // Auto-fill Step 2
      setSearchCriteria({
        industry: 'Other',
        location: 'Belfast, Northern Ireland',
        companySize: '1-10',
        jobTitles: ['Business Owner', 'Operations Manager'],
        keywords: 'roofing, roof repair, slate, tiles, guttering, Belfast'
      });
      setCustomIndustry('Roofing & Construction');
      
      // Auto-fill Step 3
      setContactPreferences({
        includeEmails: true,
        includePhones: true,
        includeLinkedIn: false
      });
      
      // Auto-fill Step 3.5
      setValidationCriteria({
        mustHaveWebsite: true,
        mustHaveContactInfo: true,
        mustHaveSpecificKeywords: ['roofing', 'contractor', 'Belfast'],
        mustBeInIndustry: true,
        customValidationRules: 'Must offer residential or commercial roofing services'
      });
    }
  }, [devMode]);

  // Create test subscription and update limits on mount
  React.useEffect(() => {
    if (user?.id) {
      createTestSubscription({ userId: user.id })
        .then(() => {
          // After creating subscription, update its limits to match new SUBSCRIPTION_TIERS
          return updateSubscriptionLimits({ userId: user.id });
        })
        .catch((err) => {
          console.log("Subscription handling:", err.message);
          // Try to update limits even if subscription already exists
          updateSubscriptionLimits({ userId: user.id }).catch(console.error);
        });
    }
  }, [user?.id, createTestSubscription, updateSubscriptionLimits]);

  const handleSourceSelect = (sourceId: string) => {
    if (selectedSources.includes(sourceId)) {
      setSelectedSources(selectedSources.filter(s => s !== sourceId));
    } else {
      setSelectedSources([...selectedSources, sourceId]);
    }
  };

  const toggleJobTitle = (title: string) => {
    setSearchCriteria(prev => ({
      ...prev,
      jobTitles: prev.jobTitles.includes(title)
        ? prev.jobTitles.filter(t => t !== title)
        : [...prev.jobTitles, title]
    }));
  };

  const canStartSearch = () => {
    // Basic field requirements
    if (!searchName || !searchObjective || selectedSources.length === 0 || 
        !searchCriteria.industry || !searchCriteria.location) {
      return false;
    }
    
    // Validate that location is not the same as industry
    if (searchCriteria.location.toLowerCase() === searchCriteria.industry.toLowerCase()) {
      return false;
    }
    
    // Validate that search name is descriptive
    if (searchName.toLowerCase() === searchCriteria.industry.toLowerCase()) {
      return false;
    }
    
    return true;
  };

  const startSearch = async () => {
    if (!user?.id) {
      toast.error('Please sign in to start a search');
      return;
    }

    setIsSearching(true);
    setCurrentStep(5);
    
    // Start initial progress
    setCurrentStatus('Initializing search...');
    setSearchProgress(10);
    
    // Show verification modal after initial progress
    await new Promise(resolve => setTimeout(resolve, 1000));
    setShowVerification(true);
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerification(false);
    
    if (!user?.id) {
      toast.error('Please sign in to continue');
      return;
    }

    try {
      // Create the search configuration
      const searchConfig = {
        searchName,
        searchObjective,
        selectedSources,
        industry: searchCriteria.industry === 'Other' ? customIndustry : searchCriteria.industry,
        location: searchCriteria.location,
        companySize: searchCriteria.companySize || '1-100', // Default if not selected
        jobTitles: searchCriteria.jobTitles,
        keywords: searchCriteria.keywords,
        includeEmails: contactPreferences.includeEmails,
        includePhones: contactPreferences.includePhones,
        includeLinkedIn: contactPreferences.includeLinkedIn,
        validationCriteria: {
          mustHaveWebsite: validationCriteria.mustHaveWebsite,
          mustHaveContactInfo: validationCriteria.mustHaveContactInfo,
          mustHaveSpecificKeywords: validationCriteria.mustHaveSpecificKeywords,
          mustBeInIndustry: validationCriteria.mustBeInIndustry,
          customValidationRules: validationCriteria.customValidationRules,
        },
      };

      // Create the lead search
      const result = await createLeadSearch({
        userId: user.id,
        searchConfig,
      });

      setCurrentSearchId(result.searchId);
      
      // Start polling for progress
      pollSearchProgress(result.searchId);
      
    } catch (error) {
      console.error('Search creation failed:', error);
      setCurrentStatus('Search failed: ' + (error.message || 'Unknown error'));
      setIsSearching(false);
      
      // Show error to user with Sonner
      handleConvexError(error);
    }
  };

  // Poll search progress
  const pollSearchProgress = async (searchId: string) => {
    const maxAttempts = 60; // 10 minutes with 10-second intervals
    let attempts = 0;
    let lastProgress = 0;
    let stuckCounter = 0;

    const poll = async () => {
      if (attempts >= maxAttempts) {
        setCurrentStatus('Search timed out - please check back later');
        setIsSearching(false);
        return;
      }

      try {
        const status = await getSearchStatus({ searchId });
        
        // Update progress with smooth animation
        const newProgress = status.progress || 0;
        if (newProgress > lastProgress) {
          // Animate progress bar
          const increment = (newProgress - lastProgress) / 10;
          for (let i = 1; i <= 10; i++) {
            setTimeout(() => {
              setSearchProgress(prev => Math.min(prev + increment, newProgress));
            }, i * 50);
          }
          lastProgress = newProgress;
          stuckCounter = 0;
        } else {
          stuckCounter++;
          // If progress is stuck for too long, show a message
          if (stuckCounter > 6) { // 1 minute
            setCurrentStatus(status.currentStage + ' (this may take a while...)');
          }
        }

        setCurrentStatus(status.currentStage || 'Processing...');

        if (status.status === 'completed') {
          // Ensure progress reaches 100%
          setSearchProgress(100);
          setSearchResults({
            totalLeads: status.totalLeads || 0,
            verifiedEmails: status.verifiedEmails || 0,
            verifiedPhones: status.verifiedPhones || 0,
            businessWebsites: status.businessWebsites || 0,
            avgResponseRate: status.avgResponseRate || '0%',
            searchTime: status.searchTime || '0m 0s'
          });
          setIsSearching(false);
          setCurrentStep(6);
          return;
        } else if (status.status === 'failed') {
          setCurrentStatus('Search failed: ' + (status.error || 'Unknown error'));
          setIsSearching(false);
          
          // Show retry option with toast
          toast.error('Search failed. Click to retry', {
            action: {
              label: 'Retry',
              onClick: () => {
                // Reset and retry
                setCurrentStep(4);
                setSearchProgress(0);
                setCurrentStatus('');
              }
            },
            duration: 10000
          });
          return;
        }

        // Continue polling with adaptive interval
        attempts++;
        const pollInterval = newProgress > 90 ? 5000 : 10000; // Poll faster near completion
        setTimeout(poll, pollInterval);
        
      } catch (error) {
        console.error('Error polling search status:', error);
        attempts++;
        
        // Show connection error after multiple failures
        if (attempts > 3) {
          setCurrentStatus('Connection issue - retrying...');
        }
        
        setTimeout(poll, 15000); // Longer delay on error
      }
    };

    poll();
  };

  const handleStepChange = (step: number) => {
    if (step < currentStep) {
      setCurrentStep(step);
    }
  };

  return (
    <TooltipProvider>
      <div className="min-h-screen bg-violet-400 relative pb-8" style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}>
      {/* Dev Mode Toggle - Only show in development */}
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-4 right-4 z-50">
          <Button
            onClick={() => setDevMode(!devMode)}
            className={`h-10 px-4 text-sm font-black uppercase ${
              devMode 
                ? 'bg-green-500 hover:bg-green-600 text-white' 
                : 'bg-gray-200 hover:bg-gray-300 text-black'
            } border-2 border-black`}
          >
            DEV MODE {devMode ? 'ON' : 'OFF'}
          </Button>
        </div>
      )}
      
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <div className="w-full max-w-4xl space-y-8">
          {/* Persistent Title Card */}
          <Card className="transform -rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-violet-600 border-2 border-black flex items-center justify-center">
                <UilSearch className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-violet-500 border-2 border-black flex items-center justify-center">
                <UilCrosshair className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-pink-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-violet-600 hover:bg-violet-700 border-4 border-black p-0">
                  {currentStep === 1 && <UilSearch className="h-12 w-12 text-white" />}
                  {currentStep === 2 && <UilFilter className="h-12 w-12 text-white" />}
                  {currentStep === 3 && <UilUserCheck className="h-12 w-12 text-white" />}
                  {currentStep === 4 && <UilPlay className="h-12 w-12 text-white" />}
                  {currentStep === 5 && <UilAnalytics className="h-12 w-12 text-white" />}
                  {currentStep === 6 && <UilCheckCircle className="h-12 w-12 text-white" />}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'SEARCH DEFINITION'}
                {currentStep === 2 && 'SEARCH CRITERIA'}
                {currentStep === 3 && 'CONTACT PREFERENCES'}
                {currentStep === 4 && 'SEARCH PREVIEW'}
                {currentStep === 5 && 'SEARCHING LEADS'}
                {currentStep === 6 && 'SEARCH COMPLETE'}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'DEFINE YOUR SEARCH OBJECTIVES'}
                {currentStep === 2 && 'SET YOUR TARGET CRITERIA'}
                {currentStep === 3 && 'CHOOSE CONTACT INFORMATION'}
                {currentStep === 4 && 'REVIEW AND LAUNCH SEARCH'}
                {currentStep === 5 && 'FINDING YOUR PERFECT CUSTOMERS'}
                {currentStep === 6 && 'YOUR LEADS ARE READY'}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-violet-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-violet-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-violet-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>
          {/* Step 1: Search Definition & Lead Sources */}
          {currentStep === 1 && (
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="space-y-6">
                  {/* Info Section */}
                  <Card className="bg-violet-50 border-2 border-black">
                    <CardContent className="p-6">
                      <h3 className="text-2xl font-black uppercase mb-3">INTELLIGENT LEAD HUNTER</h3>
                      <p className="text-lg text-gray-700 mb-4">
                        Hunter combines powerful search capabilities with automated outreach to find and contact your perfect customers.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                          <span className="font-medium">Multi-source search</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                          <span className="font-medium">Smart filtering</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                          <span className="font-medium">Automated outreach</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                          <span className="font-medium">Real-time enrichment</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <div>
                    <label className="text-xl font-black uppercase mb-3 block">
                      SEARCH NAME
                    </label>
                    <Input
                      type="text"
                      value={searchName}
                      onChange={(e) => setSearchName(e.target.value)}
                      placeholder="e.g., Q4 Enterprise Outreach"
                      className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
                    />
                  </div>
                  <div>
                    <label className="text-xl font-black uppercase mb-3 block">
                      SEARCH OBJECTIVE
                    </label>
                    <Textarea
                      value={searchObjective}
                      onChange={(e) => setSearchObjective(e.target.value)}
                      placeholder="What type of leads are you looking for? What's your ideal customer profile?"
                      className="min-h-[120px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
                    />
                  </div>
                  
                  {/* Lead Sources */}
                  <div>
                    <label className="text-xl font-black uppercase mb-3 block">
                      SELECT LEAD SOURCES
                    </label>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      {leadSources.map((source) => {
                        const isLocked = source.id === 'database' || source.id === 'directory';
                        return (
                          <Card 
                            key={source.id}
                            className={`transform transition-all border-4 border-black relative ${
                              isLocked 
                                ? 'bg-gray-100 opacity-75 cursor-not-allowed' 
                                : `cursor-pointer hover:scale-105 ${
                                    selectedSources.includes(source.id) 
                                      ? 'shadow-[8px_8px_0_rgba(0,0,0,1)] z-10 ' + source.color
                                      : 'bg-violet-50'
                                  }`
                            }`}
                            onClick={() => !isLocked && handleSourceSelect(source.id)}
                          >
                            {!isLocked && selectedSources.includes(source.id) && (
                              <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-[100]" style={{animation: 'overshoot 0.3s ease-out'}}>
                                <div className="relative">
                                  <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                    <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                                  </div>
                                  <div className="absolute inset-0 flex items-center justify-center">
                                    <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                      SELECTED
                                    </span>
                                  </div>
                                </div>
                              </div>
                            )}
                            <CardContent className="p-6 text-center relative">
                              {isLocked && (
                                <Badge className="absolute top-2 right-2 bg-yellow-200 text-black border-2 border-black">
                                  LOCKED
                                </Badge>
                              )}
                              <div className={`inline-flex items-center justify-center w-16 h-16 rounded-full mb-3 ${
                                isLocked 
                                  ? 'bg-gray-400'
                                  : selectedSources.includes(source.id) ? 'bg-white' : source.color
                              }`}>
                                {React.cloneElement(source.icon, { 
                                  className: `h-8 w-8 ${
                                    isLocked 
                                      ? 'text-white'
                                      : selectedSources.includes(source.id) ? 'text-black' : 'text-white'
                                  }` 
                                })}
                              </div>
                              <h3 className="text-lg font-black uppercase mb-1">{source.name}</h3>
                              <p className="text-sm">{isLocked ? 'Premium feature' : source.description}</p>
                            </CardContent>
                          </Card>
                        );
                      })}
                    </div>
                  </div>
                  
                  {/* Usage Stats Display */}
                  {userUsageStats && (
                    <Card className="bg-violet-50 border-2 border-black">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-black uppercase text-sm">Your Usage Today</h4>
                          <Badge className={`border-2 border-black ${
                            userUsageStats.subscription?.tier === 'free' ? 'bg-gray-200' :
                            userUsageStats.subscription?.tier === 'premium' ? 'bg-yellow-200' : 'bg-purple-200'
                          } text-black`}>
                            {userUsageStats.subscription?.tier?.toUpperCase()} PLAN
                          </Badge>
                        </div>
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <p className="font-bold">Searches Today</p>
                            <p className="text-violet-600">
                              {userUsageStats.usage.searchesToday} / {
                                userUsageStats.usage.searchesRemaining === -1 
                                  ? '∞' 
                                  : userUsageStats.subscription?.searchesPerDay
                              }
                            </p>
                          </div>
                          <div>
                            <p className="font-bold">Leads This Month</p>
                            <p className="text-violet-600">
                              {userUsageStats.usage.leadsThisMonth} / {
                                userUsageStats.usage.leadsRemaining === -1 
                                  ? '∞' 
                                  : userUsageStats.subscription?.totalLeadsPerMonth
                              }
                            </p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  <div className="bg-violet-50 border-2 border-black rounded-lg p-4">
                    <div className="flex items-start gap-3">
                      <Button size="sm" variant="neutral" className="bg-white flex-shrink-0">
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">PRO TIP</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Using multiple sources increases lead quality and quantity. We&apos;ll cross-reference data for accuracy.
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  <Button
                    className="w-full h-14 text-lg font-black uppercase bg-violet-400 hover:bg-violet-400/90 text-black"
                    onClick={() => {
                      // Check if user has remaining searches
                      if (userUsageStats?.usage.searchesRemaining === 0) {
                        alert('You have reached your daily search limit. Please upgrade your plan to continue.');
                        return;
                      }
                      setCurrentStep(2);
                    }}
                    disabled={!searchName || !searchObjective || selectedSources.length === 0}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Step 2: Search Criteria */}
          {currentStep === 2 && (
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    DEFINE SEARCH CRITERIA
                  </h1>
                </div>
                <div className="space-y-6">
                  {/* Industry Selection */}
                  <div>
                    <label className="text-xl font-black uppercase mb-3 block">
                      TARGET INDUSTRY
                    </label>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-3 mb-3">
                      {industries.map((industry) => (
                        <Button
                          key={industry}
                          variant={searchCriteria.industry === industry || (industry === 'Other' && searchCriteria.industry === customIndustry) ? "header" : "outline"}
                          className={`h-12 font-bold border-2 border-black relative ${
                            searchCriteria.industry === industry || (industry === 'Other' && searchCriteria.industry === customIndustry) 
                              ? 'bg-violet-400' 
                              : 'bg-white hover:bg-violet-100'
                          }`}
                          onClick={() => {
                            if (industry === 'Other') {
                              setSearchCriteria({...searchCriteria, industry: customIndustry || 'Other'});
                            } else {
                              setSearchCriteria({...searchCriteria, industry});
                              setCustomIndustry('');
                            }
                          }}
                        >
                          {(searchCriteria.industry === industry || (industry === 'Other' && searchCriteria.industry === customIndustry)) && (
                            <div className="absolute -top-4 -right-4 z-[100]" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={40} className="w-10 h-10" stroke="black" strokeWidth={4} />
                                </div>
                              </div>
                            </div>
                          )}
                          {industry}
                        </Button>
                      ))}
                    </div>
                    {/* Custom Industry Input */}
                    {(searchCriteria.industry === 'Other' || searchCriteria.industry === customIndustry) && (
                      <Input
                        type="text"
                        value={customIndustry}
                        onChange={(e) => {
                          setCustomIndustry(e.target.value);
                          setSearchCriteria({...searchCriteria, industry: e.target.value || 'Other'});
                        }}
                        placeholder="Enter custom industry..."
                        className="h-12 text-lg font-semibold border-4 border-black rounded-[3px]"
                      />
                    )}
                  </div>

                  {/* Location */}
                  <div>
                    <label className="text-xl font-black uppercase mb-3 block">
                      LOCATION
                    </label>
                    <Input
                      type="text"
                      value={searchCriteria.location}
                      onChange={(e) => setSearchCriteria({...searchCriteria, location: e.target.value})}
                      placeholder="e.g., United States, California, San Francisco"
                      className={`h-14 text-lg font-semibold border-4 border-black rounded-[3px] ${
                        searchCriteria.location && searchCriteria.location.toLowerCase() === searchCriteria.industry.toLowerCase() 
                          ? 'border-red-500' 
                          : ''
                      }`}
                    />
                    {searchCriteria.location && searchCriteria.location.toLowerCase() === searchCriteria.industry.toLowerCase() && (
                      <p className="text-red-500 text-sm mt-2 font-bold">
                        Location must be a geographic location, not the same as industry
                      </p>
                    )}
                  </div>

                  {/* Company Size */}
                  <div>
                    <div className="flex items-center gap-2 mb-3">
                      <label className="text-xl font-black uppercase block">
                        COMPANY SIZE <span className="text-sm font-normal">(OPTIONAL - defaults to 1-100)</span>
                      </label>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button className="p-0 bg-transparent border-none outline-none">
                            <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent side="top">
                          <p>Filter companies by employee count. Smaller companies are often more accessible, larger ones have bigger budgets.</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                      {['1-10', '11-50', '51-100', '101-500', '501-1000', '1000+'].map((size) => (
                        <Button
                          key={size}
                          variant={searchCriteria.companySize === size ? "header" : "outline"}
                          className={`h-12 font-bold border-2 border-black relative ${
                            searchCriteria.companySize === size ? 'bg-violet-400' : 'bg-white hover:bg-violet-100'
                          }`}
                          onClick={() => setSearchCriteria({...searchCriteria, companySize: size})}
                        >
                          {searchCriteria.companySize === size && (
                            <div className="absolute -top-4 -right-4 z-[100]" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={40} className="w-10 h-10" stroke="black" strokeWidth={4} />
                                </div>
                              </div>
                            </div>
                          )}
                          {size}
                        </Button>
                      ))}
                    </div>
                  </div>

                  {/* Job Titles */}
                  <div>
                    <div className="flex items-center gap-2 mb-3">
                      <label className="text-xl font-black uppercase block">
                        TARGET JOB TITLES <span className="text-sm font-normal">(OPTIONAL)</span>
                      </label>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button className="p-0 bg-transparent border-none outline-none">
                            <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent side="top">
                          <p>Target specific job roles. Select multiple titles to cast a wider net. AI will find similar roles automatically.</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                      {jobTitles.map((title) => (
                        <Button
                          key={title}
                          variant="subheader"
                          className={`h-12 font-bold border-2 border-black relative ${
                            searchCriteria.jobTitles.includes(title) 
                              ? 'bg-violet-100' 
                              : 'bg-white hover:bg-violet-50'
                          }`}
                          onClick={() => toggleJobTitle(title)}
                        >
                          {searchCriteria.jobTitles.includes(title) && (
                            <div className="absolute -top-4 -right-4 z-[100]" style={{animation: 'overshoot 0.3s ease-out'}}>
                              <div className="relative">
                                <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                  <Star15 color="#FFD700" size={40} className="w-10 h-10" stroke="black" strokeWidth={4} />
                                </div>
                              </div>
                            </div>
                          )}
                          {title}
                        </Button>
                      ))}
                    </div>
                  </div>

                  {/* Keywords */}
                  <div>
                    <div className="flex items-center gap-2 mb-3">
                      <label className="text-xl font-black uppercase block">
                        KEYWORDS (OPTIONAL)
                      </label>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button className="p-0 bg-transparent border-none outline-none">
                            <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent side="top">
                          <p>Add keywords to refine your search. Use commas to separate multiple terms. Example: &quot;SaaS, B2B, startup&quot;</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <Input
                      type="text"
                      value={searchCriteria.keywords}
                      onChange={(e) => setSearchCriteria({...searchCriteria, keywords: e.target.value})}
                      placeholder="e.g., SaaS, B2B, Enterprise, Cloud"
                      className="h-14 text-lg font-semibold border-4 border-black rounded-[3px]"
                    />
                  </div>

                  <div className="flex gap-4">
                    <Button
                      className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                      onClick={() => setCurrentStep(1)}
                    >
                      <UilArrowLeft className="mr-2 h-6 w-6" />
                      BACK
                    </Button>
                    <Button
                      className="flex-1 h-14 text-lg font-black uppercase bg-violet-400 hover:bg-violet-400/90 text-black"
                      onClick={() => setCurrentStep(3)}
                      disabled={!searchCriteria.industry || !searchCriteria.location}
                    >
                      CONTINUE
                      <UilArrowRight className="ml-2 h-6 w-6" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Step 3: Contact Preferences */}
          {currentStep === 3 && (
            <Card className="transform -rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    CONTACT PREFERENCES
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Select what contact information to include
                </p>
                <div className="space-y-6">
                  <Card className="border-2 border-black bg-violet-50">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          <Button size="icon" variant="header" className="w-12 h-12 bg-blue-500">
                            <UilEnvelope className="h-6 w-6 text-white" />
                          </Button>
                          <div>
                            <h3 className="text-lg font-black uppercase">EMAIL ADDRESSES</h3>
                            <p className="text-sm text-gray-600">Include verified business emails</p>
                          </div>
                        </div>
                        <Switch
                          checked={contactPreferences.includeEmails}
                          onCheckedChange={(checked) => 
                            setContactPreferences({...contactPreferences, includeEmails: checked})
                          }
                        />
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="border-2 border-black bg-violet-50">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          <Button size="icon" variant="header" className="w-12 h-12 bg-green-500">
                            <UilPhone className="h-6 w-6 text-white" />
                          </Button>
                          <div>
                            <h3 className="text-lg font-black uppercase">PHONE NUMBERS</h3>
                            <p className="text-sm text-gray-600">Include direct dial and mobile numbers</p>
                          </div>
                        </div>
                        <Switch
                          checked={contactPreferences.includePhones}
                          onCheckedChange={(checked) => 
                            setContactPreferences({...contactPreferences, includePhones: checked})
                          }
                        />
                      </div>
                    </CardContent>
                  </Card>

                  <PremiumFeatureCard
                    title="LINKEDIN INTEGRATION"
                    description="Access LinkedIn profiles and advanced social selling features"
                    features={[
                      'LinkedIn profile URLs and data',
                      'Connection degree insights',
                      'Recent LinkedIn activity',
                      'Shared connections',
                      'InMail credits included'
                    ]}
                    currentPlan="basic"
                  />

                  <PremiumFeatureCard
                    title="ADVANCED ENRICHMENT"
                    description="Get even more valuable data about your leads"
                    features={[
                      'Email verification and deliverability checks',
                      'Social media profiles (Twitter, Facebook)',
                      'Personal mobile numbers',
                      'Technology stack used by company',
                      'Recent news and triggers',
                      'Buying intent signals'
                    ]}
                    currentPlan="basic"
                  />

                  <div className="flex gap-4">
                    <Button
                      className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                      onClick={() => setCurrentStep(2)}
                    >
                      <UilArrowLeft className="mr-2 h-6 w-6" />
                      BACK
                    </Button>
                    <Button
                      className="flex-1 h-14 text-lg font-black uppercase bg-violet-400 hover:bg-violet-400/90 text-black"
                      onClick={() => setCurrentStep(3.5)}
                    >
                      CONTINUE
                      <UilArrowRight className="ml-2 h-6 w-6" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Step 3.5: Validation Criteria */}
          {currentStep === 3.5 && (
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    VALIDATION CRITERIA
                  </h1>
                </div>
                <p className="text-xl text-center text-gray-700 mb-8">
                  Define what makes a lead valid for your search
                </p>
                <div className="space-y-6">
                  <Card className="border-2 border-black bg-violet-50">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          <Button size="icon" variant="header" className="w-12 h-12 bg-green-500">
                            <UilGlobe className="h-6 w-6 text-white" />
                          </Button>
                          <div>
                            <h3 className="text-lg font-black uppercase">ACTIVE WEBSITE</h3>
                            <p className="text-sm text-gray-600">Must have a functioning business website</p>
                          </div>
                        </div>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Switch
                              checked={validationCriteria.mustHaveWebsite}
                              onCheckedChange={(checked) => 
                                setValidationCriteria({...validationCriteria, mustHaveWebsite: checked})
                              }
                            />
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Only include businesses with verified, active websites</p>
                          </TooltipContent>
                        </Tooltip>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="border-2 border-black bg-violet-50">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          <Button size="icon" variant="header" className="w-12 h-12 bg-blue-500">
                            <UilEnvelope className="h-6 w-6 text-white" />
                          </Button>
                          <div>
                            <h3 className="text-lg font-black uppercase">CONTACT INFORMATION</h3>
                            <p className="text-sm text-gray-600">Must have visible contact details</p>
                          </div>
                        </div>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Switch
                              checked={validationCriteria.mustHaveContactInfo}
                              onCheckedChange={(checked) => 
                                setValidationCriteria({...validationCriteria, mustHaveContactInfo: checked})
                              }
                            />
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Filter out businesses without verifiable contact information</p>
                          </TooltipContent>
                        </Tooltip>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="border-2 border-black bg-violet-50">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          <Button size="icon" variant="header" className="w-12 h-12 bg-purple-500">
                            <UilBuilding className="h-6 w-6 text-white" />
                          </Button>
                          <div>
                            <h3 className="text-lg font-black uppercase">INDUSTRY MATCH</h3>
                            <p className="text-sm text-gray-600">Must be in the selected industry</p>
                          </div>
                        </div>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Switch
                              checked={validationCriteria.mustBeInIndustry}
                              onCheckedChange={(checked) => 
                                setValidationCriteria({...validationCriteria, mustBeInIndustry: checked})
                              }
                            />
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Strictly enforce industry classification matching</p>
                          </TooltipContent>
                        </Tooltip>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="border-2 border-black bg-violet-50">
                    <CardContent className="p-6">
                      <div>
                                <Tooltip>
                            <TooltipTrigger asChild>
                              <h3 className="text-lg font-black uppercase mb-3 flex items-center gap-3 cursor-help">
                                <UilCrosshair className="h-6 w-6" />
                                REQUIRED KEYWORDS
                                <UilInfoCircle className="h-4 w-4 text-gray-600" />
                              </h3>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs">
                              <p>Leads must have ALL of these keywords on their website to be included in results</p>
                            </TooltipContent>
                          </Tooltip>
                              <p className="text-sm text-gray-600 mb-3">
                          Comma-separated keywords that must appear on the website
                        </p>
                        <Input
                          type="text"
                          value={validationCriteria.mustHaveSpecificKeywords.join(', ')}
                          onChange={(e) => {
                            const value = e.target.value;
                            // Only split by comma if the user is not in the middle of typing
                            if (value.endsWith(',') || value.endsWith(', ')) {
                              setValidationCriteria({
                                ...validationCriteria, 
                                mustHaveSpecificKeywords: value.split(',').map(k => k.trim()).filter(k => k)
                              });
                            } else {
                              // For display purposes, update the array on blur or when needed
                              const keywords = value.split(',').map(k => k.trim()).filter(k => k);
                              setValidationCriteria({
                                ...validationCriteria, 
                                mustHaveSpecificKeywords: keywords
                              });
                            }
                          }}
                          onBlur={(e) => {
                            // Ensure clean split on blur
                            const keywords = e.target.value.split(',').map(k => k.trim()).filter(k => k);
                            setValidationCriteria({
                              ...validationCriteria, 
                              mustHaveSpecificKeywords: keywords
                            });
                          }}
                          placeholder="e.g., partner, affiliate, reseller, api, integration"
                          className="h-14 text-lg font-semibold border-4 border-black rounded-[3px]"
                        />
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="border-2 border-black bg-violet-50">
                    <CardContent className="p-6">
                      <div>
                        <h3 className="text-lg font-black uppercase mb-3 flex items-center gap-3">
                          <UilClipboardNotes className="h-6 w-6" />
                          CUSTOM VALIDATION RULES
                        </h3>
                        <p className="text-sm text-gray-600 mb-3">
                          Additional requirements or criteria for lead validation
                        </p>
                        <Textarea
                          value={validationCriteria.customValidationRules}
                          onChange={(e) => setValidationCriteria({
                            ...validationCriteria, 
                            customValidationRules: e.target.value
                          })}
                          placeholder="e.g., Must offer enterprise solutions, Must have case studies, Must serve international clients..."
                          className="min-h-[120px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
                        />
                      </div>
                    </CardContent>
                  </Card>

                  <div className="flex gap-4">
                    <Button
                      className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                      onClick={() => setCurrentStep(3)}
                    >
                      <UilArrowLeft className="mr-2 h-6 w-6" />
                      BACK
                    </Button>
                    <Button
                      className="flex-1 h-14 text-lg font-black uppercase bg-violet-400 hover:bg-violet-400/90 text-black"
                      onClick={() => setCurrentStep(4)}
                    >
                      CONTINUE
                      <UilArrowRight className="ml-2 h-6 w-6" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Step 4: Search Preview */}
          {currentStep === 4 && (
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    READY TO HUNT
                  </h1>
                </div>
                <div className="space-y-6">
                  <Card className="bg-violet-100 border-4 border-black shadow-[6px_6px_0_rgba(0,0,0,1)]">
                    <CardContent className="p-6">
                      <h3 className="text-2xl font-black uppercase mb-6 flex items-center gap-3">
                        <UilClipboardNotes className="h-6 w-6" />
                        SEARCH SUMMARY
                      </h3>
                      <div className="space-y-4">
                        <div className="bg-white border-2 border-black rounded-lg p-3">
                          <p className="text-xs font-black uppercase text-gray-600 mb-1">SEARCH NAME</p>
                          <p className="font-bold text-lg">{searchName}</p>
                        </div>
                        <div className="bg-white border-2 border-black rounded-lg p-3">
                          <p className="text-xs font-black uppercase text-gray-600 mb-1">OBJECTIVE</p>
                          <p className="font-semibold">{searchObjective}</p>
                        </div>
                        <div className="grid grid-cols-2 gap-3">
                          <div className="bg-white border-2 border-black rounded-lg p-3">
                            <p className="text-xs font-black uppercase text-gray-600 mb-1">INDUSTRY</p>
                            <p className="font-bold">{searchCriteria.industry === 'Other' ? customIndustry : searchCriteria.industry}</p>
                          </div>
                          <div className="bg-white border-2 border-black rounded-lg p-3">
                            <p className="text-xs font-black uppercase text-gray-600 mb-1">LOCATION</p>
                            <p className="font-bold">{searchCriteria.location}</p>
                          </div>
                        </div>
                        {searchCriteria.companySize && (
                          <div className="bg-white border-2 border-black rounded-lg p-3">
                            <p className="text-xs font-black uppercase text-gray-600 mb-1">COMPANY SIZE</p>
                            <p className="font-bold">{searchCriteria.companySize} employees</p>
                          </div>
                        )}
                        {searchCriteria.jobTitles.length > 0 && (
                          <div className="bg-white border-2 border-black rounded-lg p-3">
                            <p className="text-xs font-black uppercase text-gray-600 mb-1">TARGET ROLES</p>
                            <div className="flex flex-wrap gap-2 mt-2">
                              {searchCriteria.jobTitles.map((title) => (
                                <Badge key={title} className="bg-violet-200 text-black border-2 border-black">
                                  {title}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                        <div className="bg-white border-2 border-black rounded-lg p-3">
                          <p className="text-xs font-black uppercase text-gray-600 mb-1">LEAD SOURCES</p>
                          <div className="flex flex-wrap gap-2 mt-2">
                            {selectedSources.map((source) => (
                              <Badge key={source} className="bg-green-200 text-black border-2 border-black">
                                {source.toUpperCase()}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="border-2 border-black transform -rotate-1">
                    <CardContent className="p-6 text-center">
                      <UilChartGrowth className="h-12 w-12 mx-auto mb-3 text-violet-600" />
                      <h3 className="text-2xl font-black uppercase mb-2">ESTIMATED RESULTS</h3>
                      <p className="text-4xl font-black text-violet-600 mb-2">300-500</p>
                      <p className="text-lg font-medium">QUALIFIED LEADS</p>
                    </CardContent>
                  </Card>

                  <div className="bg-violet-50 border-2 border-black rounded-lg p-4">
                    <div className="flex items-start gap-3">
                      <Button size="sm" variant="neutral" className="bg-white flex-shrink-0">
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">WHAT HAPPENS NEXT</p>
                        <p className="text-sm text-gray-700 mt-1">
                          We&apos;ll search across all selected sources, verify contact information, and compile your lead list. 
                          This typically takes 3-5 minutes depending on search complexity.
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="flex gap-4">
                    <Button
                      className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
                      onClick={() => setCurrentStep(3)}
                    >
                      <UilArrowLeft className="mr-2 h-6 w-6" />
                      BACK
                    </Button>
                    <Button
                      className="flex-1 h-14 text-lg font-black uppercase bg-[rgb(0,82,255)] hover:bg-blue-600 text-white"
                      onClick={() => {
                        // Check limits before starting search
                        if (userUsageStats?.usage.searchesRemaining === 0) {
                          alert('You have reached your daily search limit. Please upgrade your plan to continue.');
                          return;
                        }
                        if (userUsageStats?.usage.leadsRemaining === 0) {
                          alert('You have reached your monthly lead limit. Please upgrade your plan to continue.');
                          return;
                        }
                        startSearch();
                      }}
                      disabled={!canStartSearch()}
                    >
                      START HUNTING
                      <UilSearch className="ml-2 h-6 w-6" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Step 5: Searching Progress */}
          {currentStep === 5 && (
            <Card className="transform -rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    HUNTING IN PROGRESS
                  </h1>
                </div>
                <div className="space-y-6">
                  <div className="text-center mb-8">
                    <div className="inline-flex items-center justify-center w-24 h-24 bg-violet-400 border-4 border-black rounded-full mb-4">
                      <UilSearch className="h-12 w-12 text-black animate-pulse" />
                    </div>
                    <p className="text-xl font-bold text-gray-700">{currentStatus}</p>
                  </div>

                  <div className="space-y-2">
                    <div className="flex justify-between text-sm font-bold">
                      <span>PROGRESS</span>
                      <span>{searchProgress}%</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-6 border-2 border-black overflow-hidden">
                      <div
                        className="bg-violet-400 h-full transition-all duration-500"
                        style={{ width: `${searchProgress}%` }}
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    <Card className="bg-violet-50 border-2 border-black">
                      <CardContent className="p-4 text-center">
                        <UilBuilding className="h-8 w-8 mx-auto mb-2 text-orange-600" />
                        <p className="text-sm font-bold uppercase">Directories</p>
                        <p className="text-2xl font-black">{searchProgress >= 20 ? '✓' : '...'}</p>
                      </CardContent>
                    </Card>
                    <Card className="bg-violet-50 border-2 border-black">
                      <CardContent className="p-4 text-center">
                        <UilGlobe className="h-8 w-8 mx-auto mb-2 text-green-600" />
                        <p className="text-sm font-bold uppercase">Web</p>
                        <p className="text-2xl font-black">{searchProgress >= 40 ? '✓' : '...'}</p>
                      </CardContent>
                    </Card>
                    <Card className="bg-violet-50 border-2 border-black">
                      <CardContent className="p-4 text-center">
                        <UilDatabase className="h-8 w-8 mx-auto mb-2 text-purple-600" />
                        <p className="text-sm font-bold uppercase">Database</p>
                        <p className="text-2xl font-black">{searchProgress >= 60 ? '✓' : '...'}</p>
                      </CardContent>
                    </Card>
                  </div>

                  <PremiumFeatureCard
                    title="SPEED UP SEARCHES"
                    description="Upgrade to search 10x faster with priority processing"
                    features={[
                      'Priority search queue',
                      'Parallel processing',
                      'No rate limits',
                      'Real-time results'
                    ]}
                    currentPlan="basic"
                  />
                </div>
              </CardContent>
            </Card>
          )}

          {/* Step 6: Results */}
          {currentStep === 6 && (
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                    HUNT COMPLETE!
                  </h1>
                </div>
                <div className="space-y-6">
                  <p className="text-xl text-center text-gray-700">
                    Your lead list is ready! We found high-quality prospects matching your criteria.
                  </p>
                  
                  {userUsageStats?.subscription?.tier === 'free' && (
                    <Card className="bg-yellow-50 border-2 border-black">
                      <CardContent className="p-4">
                        <div className="flex items-start gap-3">
                          <Button size="sm" variant="neutral" className="bg-yellow-200 flex-shrink-0">
                            <UilInfoCircle className="h-4 w-4" />
                          </Button>
                          <div>
                            <p className="text-sm font-bold">FREE TIER NOTICE</p>
                            <p className="text-sm text-gray-700 mt-1">
                              Your search results will be available for 7 days. Upgrade to Premium to keep your data permanently.
                            </p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {searchResults && (
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                      <Card className="bg-violet-50 border-2 border-black transform -rotate-1">
                        <CardContent className="p-4 text-center">
                          <p className="text-sm font-bold uppercase text-gray-600">Total Leads</p>
                          <p className="text-3xl font-black">{searchResults.totalLeads}</p>
                        </CardContent>
                      </Card>
                      <Card className="bg-violet-50 border-2 border-black transform rotate-1">
                        <CardContent className="p-4 text-center">
                          <p className="text-sm font-bold uppercase text-gray-600">Verified Emails</p>
                          <p className="text-3xl font-black">{searchResults.verifiedEmails}</p>
                        </CardContent>
                      </Card>
                      <Card className="bg-violet-50 border-2 border-black transform -rotate-1">
                        <CardContent className="p-4 text-center">
                          <p className="text-sm font-bold uppercase text-gray-600">Phone Numbers</p>
                          <p className="text-3xl font-black">{searchResults.verifiedPhones}</p>
                        </CardContent>
                      </Card>
                      <Card className="bg-violet-50 border-2 border-black transform rotate-1">
                        <CardContent className="p-4 text-center">
                          <p className="text-sm font-bold uppercase text-gray-600">Websites</p>
                          <p className="text-3xl font-black">{searchResults.businessWebsites}</p>
                        </CardContent>
                      </Card>
                      <Card className="bg-violet-50 border-2 border-black transform -rotate-1">
                        <CardContent className="p-4 text-center">
                          <p className="text-sm font-bold uppercase text-gray-600">Response Rate</p>
                          <p className="text-3xl font-black">{searchResults.avgResponseRate}</p>
                        </CardContent>
                      </Card>
                      <Card className="bg-green-50 border-2 border-black transform rotate-1">
                        <CardContent className="p-4 text-center">
                          <p className="text-sm font-bold uppercase text-gray-600">Search Time</p>
                          <p className="text-3xl font-black">{searchResults.searchTime}</p>
                        </CardContent>
                      </Card>
                    </div>
                  )}

                  <div className="flex flex-col sm:flex-row gap-4">
                    <Button
                      className="flex-1 h-14 text-lg font-black uppercase bg-violet-400 hover:bg-violet-400/90 text-black"
                      onClick={() => {
                        if (currentSearchId) {
                          window.location.href = `/dashboard/hunter/search/${currentSearchId}`;
                        } else {
                          window.location.href = '/dashboard/hunter';
                        }
                      }}
                    >
                      VIEW LEADS
                      <UilUsersAlt className="ml-2 h-6 w-6" />
                    </Button>
                    <Button
                      className="flex-1 h-14 text-lg font-black uppercase bg-[rgb(0,82,255)] hover:bg-blue-600 text-white"
                      onClick={() => window.location.href = '/dashboard/calls'}
                    >
                      START CALLING
                      <UilPhone className="ml-2 h-6 w-6" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
        
        {/* Info Section - Bottom of Page */}
        {currentStep === 1 && (
          <div className="mt-12 max-w-4xl mx-auto px-4 sm:px-6 space-y-6">
            <Card className="transform -rotate-1 relative overflow-hidden bg-violet-50">
              <CardContent className="relative pt-6">
                <div className="flex items-start gap-4">
                  <Button
                    size="icon"
                    variant="default"
                    className="w-12 h-12 flex-shrink-0 bg-violet-600 hover:bg-violet-700 text-white border-black"
                  >
                    <UilSearch className="h-6 w-6 text-white" />
                  </Button>
                  <div className="flex-1">
                    <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                      LEAD GENERATION POWERHOUSE
                    </h3>
                    <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                      Hunter finds <span className="font-black text-violet-600">10x more qualified leads</span> than traditional methods by searching 
                      across web directories, business listings, and B2B databases simultaneously. Our AI-powered enrichment ensures every lead comes with 
                      verified contact information and detailed insights.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                        <span className="text-black font-medium">Cross-platform lead search</span>
                      </div>
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                        <span className="text-black font-medium">Real-time data enrichment</span>
                      </div>
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                        <span className="text-black font-medium">Email verification included</span>
                      </div>
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                        <span className="text-black font-medium">Direct dial numbers</span>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="transform rotate-1 relative overflow-hidden bg-violet-50">
              <CardContent className="pt-6">
                <div className="flex items-start gap-4">
                  <Button
                    size="icon"
                    variant="default"
                    className="w-12 h-12 flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90 text-black"
                  >
                    <UilDatabase className="h-6 w-6 text-black" />
                  </Button>
                  <div className="flex-1">
                    <h3 className="text-xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                      DATA ACCURACY GUARANTEE
                    </h3>
                    <p className="text-gray-700 text-lg leading-relaxed">
                      Every lead is <span className="font-black text-violet-600">triple-verified</span> across multiple data sources. 
                      Our proprietary matching algorithm ensures 95%+ accuracy on contact information, while continuous updates keep your 
                      lead data fresh and actionable.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <PremiumFeatureCard
              title="ADVANCED SEARCH FILTERS"
              description="Unlock powerful filtering options to find exactly who you need"
              features={[
                'Technographic data (tech stack used)',
                'Funding and revenue filters',
                'Intent data and buying signals',
                'Social media activity level',
                'Custom boolean search queries'
              ]}
              currentPlan="basic"
            />
          </div>
        )}
      </div>

      {/* Navigation */}
      {currentStep > 0 && (
        <div className="fixed bottom-8 left-1/2 transform -translate-x-1/2">
          <SimpleOnboardingNav 
            currentStep={currentStep} 
            totalSteps={6}
            onStepChange={handleStepChange}
          />
        </div>
      )}

      {/* Verification Modal */}
      {showVerification && (
        <VerificationModal
          isOpen={showVerification}
          onClose={() => setShowVerification(false)}
          onComplete={handleVerificationComplete}
          devMode={devMode}
        />
      )}
      
      <div className="mt-8">
        <OnboardingFooter />
      </div>
    </div>
    </TooltipProvider>
  );
}


================================================
FILE: src/app/onboarding/hunter/page-refactored.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useAction, useQuery, useMutation } from "convex/react";
import { api } from "@convex/_generated/api";
import SimpleOnboardingNav from '@/components/custom/simple-onboarding-nav';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { useConvexErrorHandler } from '@/hooks/useConvexErrorHandler';
import { toast } from 'sonner';
import { TooltipProvider } from '@/components/ui/tooltip';
import { 
  UilSearch, 
  UilPhone, 
  UilAnalytics,
  UilFilter,
  UilUserCheck,
  UilPlay,
  UilCheckCircle,
  UilCrosshair,
  UilGlobe,
  UilDatabase,
  UilBuilding
} from '@tooni/iconscout-unicons-react';

// Import step components
import { SearchDefinitionStep, SearchDefinitionInfoSections } from '@/components/onboarding/hunter/SearchDefinitionStep';
import { SearchCriteriaStep } from '@/components/onboarding/hunter/SearchCriteriaStep';
import { ContactPreferencesStep } from '@/components/onboarding/hunter/ContactPreferencesStep';
import { ValidationCriteriaStep } from '@/components/onboarding/hunter/ValidationCriteriaStep';
import { SearchPreviewStep } from '@/components/onboarding/hunter/SearchPreviewStep';
import { SearchProgressStep } from '@/components/onboarding/hunter/SearchProgressStep';
import { SearchResultsStep } from '@/components/onboarding/hunter/SearchResultsStep';

import { 
  SearchCriteria, 
  ValidationCriteria, 
  ContactPreferences, 
  SearchResults, 
  LeadSource,
  StepProps 
} from '@/components/onboarding/hunter/types';

// Constants
const leadSources: LeadSource[] = [
  {
    id: 'web',
    name: 'Web Search',
    icon: <UilGlobe className="h-8 w-8" />,
    description: 'Crawl websites and online directories',
    color: 'bg-green-600'
  },
  {
    id: 'database',
    name: 'B2B Database',
    icon: <UilDatabase className="h-8 w-8" />,
    description: 'Access verified business contacts',
    color: 'bg-purple-600'
  },
  {
    id: 'directory',
    name: 'Business Directories',
    icon: <UilBuilding className="h-8 w-8" />,
    description: 'Search Yellow Pages and industry directories',
    color: 'bg-orange-600'
  }
];

const industries = [
  'Technology',
  'Healthcare',
  'Finance',
  'Real Estate',
  'Retail',
  'Manufacturing',
  'Education',
  'Consulting',
  'Other'
];

const jobTitles = [
  'CEO',
  'CTO',
  'VP Sales',
  'Marketing Director',
  'HR Manager',
  'Operations Manager',
  'Product Manager',
  'Business Owner'
];

export default function HunterOnboarding() {
  // const { user } = useUser(); // Temporarily commented out for backend integration
  const user = { id: "temp-user-123" }; // Temporary mock user for testing
  const createTestSubscription = useMutation(api.testSetup.createTestSubscription);
  const updateSubscriptionLimits = useMutation(api.testSetup.updateSubscriptionLimits);
  const { handleConvexError } = useConvexErrorHandler();
  
  // Step state
  const [currentStep, setCurrentStep] = React.useState(1);
  
  // Search definition state
  const [searchName, setSearchName] = React.useState('');
  const [searchObjective, setSearchObjective] = React.useState('');
  const [selectedSources, setSelectedSources] = React.useState<string[]>([]);
  
  // Search criteria state
  const [searchCriteria, setSearchCriteria] = React.useState<SearchCriteria>({
    industry: '',
    location: '',
    companySize: '1-100',
    jobTitles: [],
    keywords: ''
  });
  const [customIndustry, setCustomIndustry] = React.useState('');
  
  // Contact preferences state
  const [contactPreferences, setContactPreferences] = React.useState<ContactPreferences>({
    includeEmails: true,
    includePhones: true,
    includeLinkedIn: false
  });
  
  // Validation criteria state
  const [validationCriteria, setValidationCriteria] = React.useState<ValidationCriteria>({
    mustHaveWebsite: true,
    mustHaveContactInfo: true,
    mustHaveSpecificKeywords: [],
    mustBeInIndustry: true,
    customValidationRules: ''
  });
  
  // Search execution state
  const [isSearching, setIsSearching] = React.useState(false);
  const [searchProgress, setSearchProgress] = React.useState(0);
  const [currentStatus, setCurrentStatus] = React.useState('');
  const [searchResults, setSearchResults] = React.useState<SearchResults | null>(null);
  const [showVerification, setShowVerification] = React.useState(false);
  const [currentSearchId, setCurrentSearchId] = React.useState<string | null>(null);
  const [devMode, setDevMode] = React.useState(false);

  // Convex actions and queries
  const createLeadSearch = useAction(api.hunterActions.createLeadSearch);
  const getSearchStatus = useAction(api.hunterActions.getSearchStatus);
  const userUsageStats = useQuery(api.rateLimitHelpers.getUserUsageStats, 
    user?.id ? { userId: user.id } : "skip"
  );

  // Auto-fill function for dev mode
  React.useEffect(() => {
    if (devMode) {
      setSearchName('Belfast Roofing Contractors Q4');
      setSearchObjective('Finding roofing contractors and construction companies in Belfast area for partnership opportunities');
      setSelectedSources(['web']);
      setSearchCriteria({
        industry: 'Other',
        location: 'Belfast, Northern Ireland',
        companySize: '1-10',
        jobTitles: ['Business Owner', 'Operations Manager'],
        keywords: 'roofing, roof repair, slate, tiles, guttering, Belfast'
      });
      setCustomIndustry('Roofing & Construction');
      setContactPreferences({
        includeEmails: true,
        includePhones: true,
        includeLinkedIn: false
      });
      setValidationCriteria({
        mustHaveWebsite: true,
        mustHaveContactInfo: true,
        mustHaveSpecificKeywords: ['roofing', 'contractor', 'Belfast'],
        mustBeInIndustry: true,
        customValidationRules: 'Must offer residential or commercial roofing services'
      });
    }
  }, [devMode]);

  // Create test subscription and update limits on mount
  React.useEffect(() => {
    if (user?.id) {
      createTestSubscription({ userId: user.id })
        .then(() => {
          return updateSubscriptionLimits({ userId: user.id });
        })
        .catch((err) => {
          console.log("Subscription handling:", err.message);
          updateSubscriptionLimits({ userId: user.id }).catch(console.error);
        });
    }
  }, [user?.id, createTestSubscription, updateSubscriptionLimits]);

  // Handler functions
  const handleSourceSelect = (sourceId: string) => {
    if (selectedSources.includes(sourceId)) {
      setSelectedSources(selectedSources.filter(s => s !== sourceId));
    } else {
      setSelectedSources([...selectedSources, sourceId]);
    }
  };

  const toggleJobTitle = (title: string) => {
    setSearchCriteria(prev => ({
      ...prev,
      jobTitles: prev.jobTitles.includes(title)
        ? prev.jobTitles.filter(t => t !== title)
        : [...prev.jobTitles, title]
    }));
  };

  const canStartSearch = () => {
    if (!searchName || !searchObjective || selectedSources.length === 0 || 
        !searchCriteria.industry || !searchCriteria.location) {
      return false;
    }
    if (searchCriteria.location.toLowerCase() === searchCriteria.industry.toLowerCase()) {
      return false;
    }
    if (searchName.toLowerCase() === searchCriteria.industry.toLowerCase()) {
      return false;
    }
    return true;
  };

  const startSearch = async () => {
    if (!user?.id) {
      toast.error('Please sign in to start a search');
      return;
    }

    setIsSearching(true);
    setCurrentStep(5);
    setCurrentStatus('Initializing search...');
    setSearchProgress(10);
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    setShowVerification(true);
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerification(false);
    
    if (!user?.id) {
      toast.error('Please sign in to continue');
      return;
    }

    try {
      const searchConfig = {
        searchName,
        searchObjective,
        selectedSources,
        industry: searchCriteria.industry === 'Other' ? customIndustry : searchCriteria.industry,
        location: searchCriteria.location,
        companySize: searchCriteria.companySize || '1-100',
        jobTitles: searchCriteria.jobTitles,
        keywords: searchCriteria.keywords,
        includeEmails: contactPreferences.includeEmails,
        includePhones: contactPreferences.includePhones,
        includeLinkedIn: contactPreferences.includeLinkedIn,
        validationCriteria: {
          mustHaveWebsite: validationCriteria.mustHaveWebsite,
          mustHaveContactInfo: validationCriteria.mustHaveContactInfo,
          mustHaveSpecificKeywords: validationCriteria.mustHaveSpecificKeywords,
          mustBeInIndustry: validationCriteria.mustBeInIndustry,
          customValidationRules: validationCriteria.customValidationRules,
        },
      };

      const result = await createLeadSearch({
        userId: user.id,
        searchConfig,
      });

      setCurrentSearchId(result.searchId);
      pollSearchProgress(result.searchId);
      
    } catch (error) {
      console.error('Search creation failed:', error);
      setCurrentStatus('Search failed: ' + (error.message || 'Unknown error'));
      setIsSearching(false);
      handleConvexError(error);
    }
  };

  // Poll search progress
  const pollSearchProgress = async (searchId: string) => {
    const maxAttempts = 60;
    let attempts = 0;
    let lastProgress = 0;
    let stuckCounter = 0;

    const poll = async () => {
      if (attempts >= maxAttempts) {
        setCurrentStatus('Search timed out - please check back later');
        setIsSearching(false);
        return;
      }

      try {
        const status = await getSearchStatus({ searchId });
        
        const newProgress = status.progress || 0;
        if (newProgress > lastProgress) {
          const increment = (newProgress - lastProgress) / 10;
          for (let i = 1; i <= 10; i++) {
            setTimeout(() => {
              setSearchProgress(prev => Math.min(prev + increment, newProgress));
            }, i * 50);
          }
          lastProgress = newProgress;
          stuckCounter = 0;
        } else {
          stuckCounter++;
          if (stuckCounter > 6) {
            setCurrentStatus(status.currentStage + ' (this may take a while...)');
          }
        }

        setCurrentStatus(status.currentStage || 'Processing...');

        if (status.status === 'completed') {
          setSearchProgress(100);
          setSearchResults({
            totalLeads: status.totalLeads || 0,
            verifiedEmails: status.verifiedEmails || 0,
            verifiedPhones: status.verifiedPhones || 0,
            businessWebsites: status.businessWebsites || 0,
            avgResponseRate: status.avgResponseRate || '0%',
            searchTime: status.searchTime || '0m 0s'
          });
          setIsSearching(false);
          setCurrentStep(6);
          return;
        } else if (status.status === 'failed') {
          setCurrentStatus('Search failed: ' + (status.error || 'Unknown error'));
          setIsSearching(false);
          
          toast.error('Search failed. Click to retry', {
            action: {
              label: 'Retry',
              onClick: () => {
                setCurrentStep(4);
                setSearchProgress(0);
                setCurrentStatus('');
              }
            },
            duration: 10000
          });
          return;
        }

        attempts++;
        const pollInterval = newProgress > 90 ? 5000 : 10000;
        setTimeout(poll, pollInterval);
        
      } catch (error) {
        console.error('Error polling search status:', error);
        attempts++;
        
        if (attempts > 3) {
          setCurrentStatus('Connection issue - retrying...');
        }
        
        setTimeout(poll, 15000);
      }
    };

    poll();
  };

  const handleStepChange = (step: number) => {
    if (step < currentStep) {
      setCurrentStep(step);
    }
  };

  // Create step props object
  const stepProps: StepProps = {
    currentStep,
    setCurrentStep,
    searchName,
    setSearchName,
    searchObjective,
    setSearchObjective,
    selectedSources,
    setSelectedSources,
    searchCriteria,
    setSearchCriteria,
    customIndustry,
    setCustomIndustry,
    contactPreferences,
    setContactPreferences,
    validationCriteria,
    setValidationCriteria,
    isSearching,
    setIsSearching,
    searchProgress,
    setSearchProgress,
    currentStatus,
    setCurrentStatus,
    searchResults,
    setSearchResults,
    currentSearchId,
    setCurrentSearchId,
    showVerification,
    setShowVerification,
    devMode,
    setDevMode,
    handleSourceSelect,
    toggleJobTitle,
    canStartSearch,
    startSearch,
    handleVerificationComplete,
    handleStepChange,
    userUsageStats,
    createLeadSearch,
    getSearchStatus,
    leadSources,
    industries,
    jobTitles
  };

  return (
    <TooltipProvider>
      <div className="min-h-screen bg-violet-400 relative pb-8" style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}>
      {/* Dev Mode Toggle */}
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-4 right-4 z-50">
          <Button
            onClick={() => setDevMode(!devMode)}
            className={`h-10 px-4 text-sm font-black uppercase ${
              devMode 
                ? 'bg-green-500 hover:bg-green-600 text-white' 
                : 'bg-gray-200 hover:bg-gray-300 text-black'
            } border-2 border-black`}
          >
            DEV MODE {devMode ? 'ON' : 'OFF'}
          </Button>
        </div>
      )}
      
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <div className="w-full max-w-4xl space-y-8">
          {/* Persistent Title Card */}
          <Card className="transform -rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-violet-600 border-2 border-black flex items-center justify-center">
                <UilSearch className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-violet-500 border-2 border-black flex items-center justify-center">
                <UilCrosshair className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-pink-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-violet-600 hover:bg-violet-700 border-4 border-black p-0">
                  {currentStep === 1 && <UilSearch className="h-12 w-12 text-white" />}
                  {currentStep === 2 && <UilFilter className="h-12 w-12 text-white" />}
                  {currentStep === 3 && <UilUserCheck className="h-12 w-12 text-white" />}
                  {currentStep === 4 && <UilPlay className="h-12 w-12 text-white" />}
                  {currentStep === 5 && <UilAnalytics className="h-12 w-12 text-white" />}
                  {currentStep === 6 && <UilCheckCircle className="h-12 w-12 text-white" />}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'SEARCH DEFINITION'}
                {currentStep === 2 && 'SEARCH CRITERIA'}
                {currentStep === 3 && 'CONTACT PREFERENCES'}
                {currentStep === 4 && 'SEARCH PREVIEW'}
                {currentStep === 5 && 'SEARCHING LEADS'}
                {currentStep === 6 && 'SEARCH COMPLETE'}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'DEFINE YOUR SEARCH OBJECTIVES'}
                {currentStep === 2 && 'SET YOUR TARGET CRITERIA'}
                {currentStep === 3 && 'CHOOSE CONTACT INFORMATION'}
                {currentStep === 4 && 'REVIEW AND LAUNCH SEARCH'}
                {currentStep === 5 && 'FINDING YOUR PERFECT CUSTOMERS'}
                {currentStep === 6 && 'YOUR LEADS ARE READY'}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-violet-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-violet-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-violet-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {/* Step Components */}
          {currentStep === 1 && <SearchDefinitionStep {...stepProps} />}
          {currentStep === 2 && <SearchCriteriaStep {...stepProps} />}
          {currentStep === 3 && <ContactPreferencesStep {...stepProps} />}
          {currentStep === 3.5 && <ValidationCriteriaStep {...stepProps} />}
          {currentStep === 4 && <SearchPreviewStep {...stepProps} />}
          {currentStep === 5 && <SearchProgressStep {...stepProps} />}
          {currentStep === 6 && <SearchResultsStep {...stepProps} />}
        </div>
        
        {/* Info Sections - Only on Step 1 */}
        {currentStep === 1 && <SearchDefinitionInfoSections />}
      </div>

      {/* Navigation */}
      {currentStep > 0 && (
        <div className="fixed bottom-8 left-1/2 transform -translate-x-1/2">
          <SimpleOnboardingNav 
            currentStep={currentStep} 
            totalSteps={6}
            onStepChange={handleStepChange}
          />
        </div>
      )}

      {/* Verification Modal */}
      {showVerification && (
        <VerificationModal
          isOpen={showVerification}
          onClose={() => setShowVerification(false)}
          onComplete={handleVerificationComplete}
          devMode={devMode}
        />
      )}
      
      <div className="mt-8">
        <OnboardingFooter />
      </div>
    </div>
    </TooltipProvider>
  );
}


================================================
FILE: src/app/onboarding/hunter/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useAction, useQuery, useMutation } from "convex/react";
import { api } from "@convex/_generated/api";
import SimpleOnboardingNav from '@/components/custom/simple-onboarding-nav';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { useConvexErrorHandler } from '@/hooks/useConvexErrorHandler';
import { toast } from 'sonner';
import { TooltipProvider } from '@/components/ui/tooltip';
import { 
  UilSearch, 
  UilPhone, 
  UilAnalytics,
  UilFilter,
  UilUserCheck,
  UilPlay,
  UilCheckCircle,
  UilCrosshair,
  UilGlobe,
  UilDatabase,
  UilBuilding
} from '@tooni/iconscout-unicons-react';

// Import step components
import { SearchDefinitionStep, SearchDefinitionInfoSections } from '@/components/onboarding/hunter/SearchDefinitionStep';
import { IndustryLocationStep } from '@/components/onboarding/hunter/IndustryLocationStep';
import { CompanyDetailsStep } from '@/components/onboarding/hunter/CompanyDetailsStep';
import { SearchKeywordsStep } from '@/components/onboarding/hunter/SearchKeywordsStep';
import { ContactPreferencesStep } from '@/components/onboarding/hunter/ContactPreferencesStep';
import { ValidationCriteriaStep } from '@/components/onboarding/hunter/ValidationCriteriaStep';
import { SearchPreviewStep } from '@/components/onboarding/hunter/SearchPreviewStep';
import { SearchProgressStep } from '@/components/onboarding/hunter/SearchProgressStep';
import { SearchResultsStep } from '@/components/onboarding/hunter/SearchResultsStep';

import { 
  SearchCriteria, 
  ValidationCriteria, 
  ContactPreferences, 
  SearchResults, 
  LeadSource,
  StepProps 
} from '@/components/onboarding/hunter/types';

// Constants
const leadSources: LeadSource[] = [
  {
    id: 'web',
    name: 'Web Search',
    icon: <UilGlobe className="h-8 w-8" />,
    description: 'Crawl websites and online directories',
    color: 'bg-green-600'
  },
  {
    id: 'database',
    name: 'B2B Database',
    icon: <UilDatabase className="h-8 w-8" />,
    description: 'Access verified business contacts',
    color: 'bg-purple-600'
  },
  {
    id: 'directory',
    name: 'Business Directories',
    icon: <UilBuilding className="h-8 w-8" />,
    description: 'Search Yellow Pages and industry directories',
    color: 'bg-orange-600'
  }
];

const industries = [
  'Technology',
  'Healthcare',
  'Finance',
  'Real Estate',
  'Retail',
  'Manufacturing',
  'Education',
  'Consulting',
  'Other'
];

const jobTitles = [
  'CEO',
  'CTO',
  'VP Sales',
  'Marketing Director',
  'HR Manager',
  'Operations Manager',
  'Product Manager',
  'Business Owner'
];

export default function HunterOnboarding() {
  // const { user } = useUser(); // Temporarily commented out for backend integration
  const user = { id: "temp-user-123" }; // Temporary mock user for testing
  const createTestSubscription = useMutation(api.testSetup.createTestSubscription);
  const updateSubscriptionLimits = useMutation(api.testSetup.updateSubscriptionLimits);
  const { handleConvexError } = useConvexErrorHandler();
  
  // Step state
  const [currentStep, setCurrentStep] = React.useState(1);
  
  // Search definition state
  const [searchName, setSearchName] = React.useState('');
  const [searchObjective, setSearchObjective] = React.useState('');
  const [selectedSources, setSelectedSources] = React.useState<string[]>([]);
  
  // Search criteria state
  const [searchCriteria, setSearchCriteria] = React.useState<SearchCriteria>({
    industry: '',
    location: '',
    companySize: '1-100',
    jobTitles: [],
    keywords: ''
  });
  const [customIndustry, setCustomIndustry] = React.useState('');
  
  // Contact preferences state
  const [contactPreferences, setContactPreferences] = React.useState<ContactPreferences>({
    includeEmails: true,
    includePhones: true,
    includeLinkedIn: false
  });
  
  // Validation criteria state
  const [validationCriteria, setValidationCriteria] = React.useState<ValidationCriteria>({
    mustHaveWebsite: true,
    mustHaveContactInfo: true,
    mustHaveSpecificKeywords: [],
    mustBeInIndustry: true,
    customValidationRules: ''
  });
  
  // Search execution state
  const [isSearching, setIsSearching] = React.useState(false);
  const [searchProgress, setSearchProgress] = React.useState(0);
  const [currentStatus, setCurrentStatus] = React.useState('');
  const [searchResults, setSearchResults] = React.useState<SearchResults | null>(null);
  const [showVerification, setShowVerification] = React.useState(false);
  const [currentSearchId, setCurrentSearchId] = React.useState<string | null>(null);
  const [devMode, setDevMode] = React.useState(false);

  // Convex actions and queries
  const createLeadSearch = useAction(api.hunterActions.createLeadSearch);
  const getSearchStatus = useAction(api.hunterActions.getSearchStatus);
  const userUsageStats = useQuery(api.rateLimitHelpers.getUserUsageStats, 
    user?.id ? { userId: user.id } : "skip"
  );

  // Auto-fill function for dev mode
  React.useEffect(() => {
    if (devMode) {
      setSearchName('Belfast Roofing Contractors Q4');
      setSearchObjective('Finding roofing contractors and construction companies in Belfast area for partnership opportunities');
      setSelectedSources(['web']);
      setSearchCriteria({
        industry: 'Other',
        location: 'Belfast, Northern Ireland',
        companySize: '1-10',
        jobTitles: ['Business Owner', 'Operations Manager'],
        keywords: 'roofing, roof repair, slate, tiles, guttering, Belfast'
      });
      setCustomIndustry('Roofing & Construction');
      setContactPreferences({
        includeEmails: true,
        includePhones: true,
        includeLinkedIn: false
      });
      setValidationCriteria({
        mustHaveWebsite: true,
        mustHaveContactInfo: true,
        mustHaveSpecificKeywords: ['roofing', 'contractor', 'Belfast'],
        mustBeInIndustry: true,
        customValidationRules: 'Must offer residential or commercial roofing services'
      });
    }
  }, [devMode]);

  // Create test subscription and update limits on mount
  React.useEffect(() => {
    if (user?.id) {
      createTestSubscription({ userId: user.id })
        .then(() => {
          return updateSubscriptionLimits({ userId: user.id });
        })
        .catch((err) => {
          console.log("Subscription handling:", err.message);
          updateSubscriptionLimits({ userId: user.id }).catch(console.error);
        });
    }
  }, [user?.id, createTestSubscription, updateSubscriptionLimits]);

  // Handler functions
  const handleSourceSelect = (sourceId: string) => {
    if (selectedSources.includes(sourceId)) {
      setSelectedSources(selectedSources.filter(s => s !== sourceId));
    } else {
      setSelectedSources([...selectedSources, sourceId]);
    }
  };

  const toggleJobTitle = (title: string) => {
    setSearchCriteria(prev => ({
      ...prev,
      jobTitles: prev.jobTitles.includes(title)
        ? prev.jobTitles.filter(t => t !== title)
        : [...prev.jobTitles, title]
    }));
  };

  const canStartSearch = () => {
    if (!searchName || !searchObjective || selectedSources.length === 0 || 
        !searchCriteria.industry || !searchCriteria.location) {
      return false;
    }
    if (searchCriteria.location.toLowerCase() === searchCriteria.industry.toLowerCase()) {
      return false;
    }
    if (searchName.toLowerCase() === searchCriteria.industry.toLowerCase()) {
      return false;
    }
    return true;
  };

  const startSearch = async () => {
    if (!user?.id) {
      toast.error('Please sign in to start a search');
      return;
    }

    setIsSearching(true);
    setCurrentStep(5);
    setCurrentStatus('Initializing search...');
    setSearchProgress(10);
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    setShowVerification(true);
  };

  const handleVerificationComplete = async (email: string, phone: string) => {
    setShowVerification(false);
    
    if (!user?.id) {
      toast.error('Please sign in to continue');
      return;
    }

    try {
      const searchConfig = {
        searchName,
        searchObjective,
        selectedSources,
        industry: searchCriteria.industry === 'Other' ? customIndustry : searchCriteria.industry,
        location: searchCriteria.location,
        companySize: searchCriteria.companySize || '1-100',
        jobTitles: searchCriteria.jobTitles,
        keywords: searchCriteria.keywords,
        includeEmails: contactPreferences.includeEmails,
        includePhones: contactPreferences.includePhones,
        includeLinkedIn: contactPreferences.includeLinkedIn,
        validationCriteria: {
          mustHaveWebsite: validationCriteria.mustHaveWebsite,
          mustHaveContactInfo: validationCriteria.mustHaveContactInfo,
          mustHaveSpecificKeywords: validationCriteria.mustHaveSpecificKeywords,
          mustBeInIndustry: validationCriteria.mustBeInIndustry,
          customValidationRules: validationCriteria.customValidationRules,
        },
      };

      const result = await createLeadSearch({
        userId: user.id,
        searchConfig,
      });

      setCurrentSearchId(result.searchId);
      pollSearchProgress(result.searchId);
      
    } catch (error) {
      console.error('Search creation failed:', error);
      setCurrentStatus('Search failed: ' + (error.message || 'Unknown error'));
      setIsSearching(false);
      handleConvexError(error);
    }
  };

  // Poll search progress
  const pollSearchProgress = async (searchId: string) => {
    const maxAttempts = 60;
    let attempts = 0;
    let lastProgress = 0;
    let stuckCounter = 0;

    const poll = async () => {
      if (attempts >= maxAttempts) {
        setCurrentStatus('Search timed out - please check back later');
        setIsSearching(false);
        return;
      }

      try {
        const status = await getSearchStatus({ searchId });
        
        const newProgress = status.progress || 0;
        if (newProgress > lastProgress) {
          const increment = (newProgress - lastProgress) / 10;
          for (let i = 1; i <= 10; i++) {
            setTimeout(() => {
              setSearchProgress(prev => Math.min(prev + increment, newProgress));
            }, i * 50);
          }
          lastProgress = newProgress;
          stuckCounter = 0;
        } else {
          stuckCounter++;
          if (stuckCounter > 6) {
            setCurrentStatus(status.currentStage + ' (this may take a while...)');
          }
        }

        setCurrentStatus(status.currentStage || 'Processing...');

        if (status.status === 'completed') {
          setSearchProgress(100);
          setSearchResults({
            totalLeads: status.totalLeads || 0,
            verifiedEmails: status.verifiedEmails || 0,
            verifiedPhones: status.verifiedPhones || 0,
            businessWebsites: status.businessWebsites || 0,
            avgResponseRate: status.avgResponseRate || '0%',
            searchTime: status.searchTime || '0m 0s'
          });
          setIsSearching(false);
          setCurrentStep(6);
          return;
        } else if (status.status === 'failed') {
          setCurrentStatus('Search failed: ' + (status.error || 'Unknown error'));
          setIsSearching(false);
          
          toast.error('Search failed. Click to retry', {
            action: {
              label: 'Retry',
              onClick: () => {
                setCurrentStep(4);
                setSearchProgress(0);
                setCurrentStatus('');
              }
            },
            duration: 10000
          });
          return;
        }

        attempts++;
        const pollInterval = newProgress > 90 ? 5000 : 10000;
        setTimeout(poll, pollInterval);
        
      } catch (error) {
        console.error('Error polling search status:', error);
        attempts++;
        
        if (attempts > 3) {
          setCurrentStatus('Connection issue - retrying...');
        }
        
        setTimeout(poll, 15000);
      }
    };

    poll();
  };

  const handleStepChange = (step: number) => {
    if (step < currentStep) {
      setCurrentStep(step);
    }
  };

  // Create step props object
  const stepProps: StepProps = {
    currentStep,
    setCurrentStep,
    searchName,
    setSearchName,
    searchObjective,
    setSearchObjective,
    selectedSources,
    setSelectedSources,
    searchCriteria,
    setSearchCriteria,
    customIndustry,
    setCustomIndustry,
    contactPreferences,
    setContactPreferences,
    validationCriteria,
    setValidationCriteria,
    isSearching,
    setIsSearching,
    searchProgress,
    setSearchProgress,
    currentStatus,
    setCurrentStatus,
    searchResults,
    setSearchResults,
    currentSearchId,
    setCurrentSearchId,
    showVerification,
    setShowVerification,
    devMode,
    setDevMode,
    handleSourceSelect,
    toggleJobTitle,
    canStartSearch,
    startSearch,
    handleVerificationComplete,
    handleStepChange,
    userUsageStats,
    createLeadSearch,
    getSearchStatus,
    leadSources,
    industries,
    jobTitles
  };

  return (
    <TooltipProvider>
      <div className="min-h-screen bg-violet-400 relative pb-8" style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}>
      {/* Dev Mode Toggle */}
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-4 right-4 z-50">
          <Button
            onClick={() => setDevMode(!devMode)}
            className={`h-10 px-4 text-sm font-black uppercase ${
              devMode 
                ? 'bg-green-500 hover:bg-green-600 text-white' 
                : 'bg-gray-200 hover:bg-gray-300 text-black'
            } border-2 border-black`}
          >
            DEV MODE {devMode ? 'ON' : 'OFF'}
          </Button>
        </div>
      )}
      
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <div className="w-full max-w-4xl space-y-8">
          {/* Persistent Title Card */}
          <Card className="transform -rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-violet-600 border-2 border-black flex items-center justify-center">
                <UilSearch className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-violet-500 border-2 border-black flex items-center justify-center">
                <UilCrosshair className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-pink-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-violet-600 hover:bg-violet-700 border-4 border-black p-0">
                  {currentStep === 1 && <UilSearch className="h-12 w-12 text-white" />}
                  {currentStep === 2 && <UilBuilding className="h-12 w-12 text-white" />}
                  {currentStep === 2.5 && <UilFilter className="h-12 w-12 text-white" />}
                  {currentStep === 2.75 && <UilCrosshair className="h-12 w-12 text-white" />}
                  {currentStep === 3 && <UilUserCheck className="h-12 w-12 text-white" />}
                  {currentStep === 3.5 && <UilFilter className="h-12 w-12 text-white" />}
                  {currentStep === 4 && <UilPlay className="h-12 w-12 text-white" />}
                  {currentStep === 5 && <UilAnalytics className="h-12 w-12 text-white" />}
                  {currentStep === 6 && <UilCheckCircle className="h-12 w-12 text-white" />}
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                {currentStep === 1 && 'SEARCH DEFINITION'}
                {currentStep === 2 && 'INDUSTRY & LOCATION'}
                {currentStep === 2.5 && 'COMPANY DETAILS'}
                {currentStep === 2.75 && 'SEARCH KEYWORDS'}
                {currentStep === 3 && 'CONTACT PREFERENCES'}
                {currentStep === 3.5 && 'VALIDATION CRITERIA'}
                {currentStep === 4 && 'SEARCH PREVIEW'}
                {currentStep === 5 && 'SEARCHING LEADS'}
                {currentStep === 6 && 'SEARCH COMPLETE'}
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                {currentStep === 1 && 'DEFINE YOUR SEARCH OBJECTIVES'}
                {currentStep === 2 && 'SET TARGET MARKET & GEOGRAPHY'}
                {currentStep === 2.5 && 'SPECIFY COMPANY PROFILE'}
                {currentStep === 2.75 && 'REFINE WITH KEYWORDS'}
                {currentStep === 3 && 'CHOOSE CONTACT INFORMATION'}
                {currentStep === 3.5 && 'SET VALIDATION RULES'}
                {currentStep === 4 && 'REVIEW AND LAUNCH SEARCH'}
                {currentStep === 5 && 'FINDING YOUR PERFECT CUSTOMERS'}
                {currentStep === 6 && 'YOUR LEADS ARE READY'}
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-violet-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-violet-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-violet-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>

          {/* Step Components */}
          {currentStep === 1 && <SearchDefinitionStep {...stepProps} />}
          {currentStep === 2 && <IndustryLocationStep {...stepProps} />}
          {currentStep === 2.5 && <CompanyDetailsStep {...stepProps} />}
          {currentStep === 2.75 && <SearchKeywordsStep {...stepProps} />}
          {currentStep === 3 && <ContactPreferencesStep {...stepProps} />}
          {currentStep === 3.5 && <ValidationCriteriaStep {...stepProps} />}
          {currentStep === 4 && <SearchPreviewStep {...stepProps} />}
          {currentStep === 5 && <SearchProgressStep {...stepProps} />}
          {currentStep === 6 && <SearchResultsStep {...stepProps} />}
        </div>
        
        {/* Info Sections - Only on Step 1 */}
        {currentStep === 1 && <SearchDefinitionInfoSections />}
      </div>



      {/* Verification Modal */}
      {showVerification && (
        <VerificationModal
          isOpen={showVerification}
          onClose={() => setShowVerification(false)}
          onComplete={handleVerificationComplete}
          devMode={devMode}
        />
      )}
      
      <div className="mt-8">
        <OnboardingFooter />
      </div>
    </div>
    </TooltipProvider>
  );
}


================================================
FILE: src/app/onboarding/procedural/page.tsx
================================================
'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Slider } from '@/components/ui/slider';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
// The OnboardingFooter is no longer needed.
// import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { UilMicrophone, UilMusic, UilInfoCircle, UilArrowRight, UilArrowLeft, UilPlay, UilCheck, UilDownloadAlt, UilSpinner } from '@tooni/iconscout-unicons-react';
import { Star15 } from '@/components/ui/star';
import { Progress } from '@/components/ui/progress';
import { useMutation, useQuery } from 'convex/react';
import { api } from '../../../../convex/_generated/api';
import type { Id } from '../../../../convex/_generated/dataModel';
import VerificationModal from '@/components/custom/modals/verification-modal';
import { AudioGenerationProgress } from '@/components/onboarding/procedural/AudioGenerationProgress';

interface AudioConfig {
  prompt: string;
  duration: number;
  intensity: number;
  name: string;
}

interface AudioJob {
  _id: Id<"proceduralAudioJobs">;
  jobId: string;
  userId: string;
  config: AudioConfig;
  status: "pending" | "processing" | "completed" | "failed";
  audioUrl?: string;
  audioId?: string;
  fileName?: string;
  fileSize?: number;
  metadata?: {
    size: string;
    duration: string;
    quality: string;
    format: string;
  };
  error?: string;
  createdAt: number;
  startedAt?: number;
  completedAt?: number;
  processingTime?: number;
}

interface GeneratedAudio {
  id: string;
  url: string;
  config: AudioConfig;
  metadata: {
    size: string;
    duration: string;
    quality: string;
  };
}

export default function ProceduralAudioGenerator() {
  const [currentStep, setCurrentStep] = useState(1);
  const [audioConfig, setAudioConfig] = useState<AudioConfig>({
    prompt: "a quiet coffee shop with gentle background chatter and the soft clinking of ceramic cups and saucers",
    duration: 30,
    intensity: 0.7,
    name: 'Coffee Shop Ambiance'
  });
  const [selectedPreset, setSelectedPreset] = useState<string | null>(null);
  const [jobId, setJobId] = useState<string | null>(null);
  const [generatedAudio, setGeneratedAudio] = useState<GeneratedAudio | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [devMode, setDevMode] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [showGenerationModal, setShowGenerationModal] = useState(false);
  const [modalProgress, setModalProgress] = useState(0);
  const [modalStatus, setModalStatus] = useState<'generating' | 'verifying' | 'completed' | 'error'>('generating');

  // Convex hooks
  const createJob = useMutation(api.proceduralAudio.createJob);
  const getJob = useQuery(api.proceduralAudio.getJob, jobId ? { jobId } : "skip");
  const userId = "current-user"; // Replace with actual user ID from auth

  // Auto-select coffee shop preset for dev mode
  useEffect(() => {
    if (devMode) {
      setAudioConfig({
        prompt: "a cozy coffee shop with gentle background chatter, soft jazz music, and the occasional clinking of ceramic coffee cups and saucers",
        duration: 30,
        intensity: 0.8,
        name: 'Dev Coffee Shop'
      });
      setSelectedPreset('cozy-cafe');
    }
  }, [devMode]);

  // Coffee shop presets
  const coffeeShopPresets = [
    {
      id: 'cozy-cafe',
      name: 'Cozy Café',
      config: {
        prompt: "a cozy coffee shop with gentle background chatter, soft jazz music, and the occasional clinking of coffee cups",
        duration: 30,
        intensity: 0.6,
        name: 'Cozy Café'
      }
    },
    {
      id: 'busy-coffee',
      name: 'Busy Coffee Shop',
      config: {
        prompt: "a bustling coffee shop with energetic conversations, espresso machine sounds, and constant cup clinking",
        duration: 30,
        intensity: 0.9,
        name: 'Busy Coffee Shop'
      }
    },
    {
      id: 'quiet-morning',
      name: 'Quiet Morning Coffee',
      config: {
        prompt: "a peaceful morning coffee shop with soft instrumental music and gentle cup stirring sounds",
        duration: 30,
        intensity: 0.4,
        name: 'Quiet Morning Coffee'
      }
    },
    {
      id: 'cups-clinking',
      name: 'Cups Clinking Focus',
      config: {
        prompt: "coffee shop ambiance focused on the rhythmic clinking of ceramic cups and saucers with soft background chatter",
        duration: 30,
        intensity: 0.8,
        name: 'Cups Clinking Focus'
      }
    }
  ];

  const canProceed = () => {
    switch (currentStep) {
      case 1:
        return audioConfig.name.trim() !== '';
      case 2:
        // The primary action button is now 'Create', not 'Continue'
        return selectedPreset !== null;
      case 3:
        return getJob?.status === 'completed' || getJob?.status === 'failed';
      case 4:
        return generatedAudio !== null;
      default:
        return true;
    }
  };

  // Update generated audio when job completes
  useEffect(() => {
    if (getJob && getJob.status === 'completed' && getJob.audioUrl) {
      setGeneratedAudio({
        id: getJob.jobId,
        url: getJob.audioUrl,
        config: getJob.config,
        metadata: {
          size: getJob.metadata?.size || 'Unknown',
          duration: `${getJob.config.duration}s`,
          quality: getJob.metadata?.quality || '44.1kHz/16-bit'
        }
      });
      
      setModalStatus('completed');
      setModalProgress(100);
      
    } else if (getJob && getJob.status === 'failed') {
      setError(getJob.error || 'Failed to generate audio');
      setModalStatus('error');
    }
  }, [getJob]);

  // Simulate progress during generation
  useEffect(() => {
    if (jobId && getJob?.status === 'processing') {
      const progressInterval = setInterval(() => {
        setModalProgress(prev => {
          const newProgress = Math.min(prev + 10, 90);
          return newProgress;
        });
      }, 500);
      
      return () => clearInterval(progressInterval);
    }
  }, [jobId, getJob?.status]);

  const handleGenerateAudio = async () => {
    if (!canProceed()) return;
    setError(null);
    setShowGenerationModal(true);
    setModalStatus('generating');
    setModalProgress(0);
    
    try {
      const newJobId = await createJob({
        config: audioConfig,
        userId
      });
      setJobId(newJobId);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create job');
      setModalStatus('error');
    }
  };

  const handleGenerationComplete = () => {
    setShowGenerationModal(false);
    setCurrentStep(3);
  };

  const handleModalVerify = () => {
    setModalStatus('verifying');
    setTimeout(() => {
      setModalStatus('completed');
      setTimeout(() => {
        setShowGenerationModal(false);
        setCurrentStep(3);
      }, 1500);
    }, 1000);
  };

  const handleModalClose = () => {
    setShowGenerationModal(false);
    setCurrentStep(3);
  };

  const handleModalDownload = () => {
    handleDownload();
  };

  const handleContinue = () => {
    if (currentStep < 3) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleDownload = () => {
    if (generatedAudio?.url) {
      const link = document.createElement('a');
      link.href = generatedAudio.url;
      link.download = `${audioConfig.name.replace(/\s+/g, '-')}.wav`;
      link.click();
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <Card className="transform -rotate-1">
            <CardContent className="p-8">
              <div className="text-center mb-8">
                <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                  COFFEE SHOP AUDIO
                </h1>
                <p className="text-lg text-gray-700 mt-2">
                  Create ambient coffee shop sounds with cups clinking
                </p>
              </div>

              <div className="space-y-6">
                <div>
                  <label className="text-xl font-black uppercase mb-3 block">
                    Scene Name
                  </label>
                  <Input
                    value={audioConfig.name}
                    onChange={(e) => setAudioConfig({...audioConfig, name: e.target.value})}
                    placeholder="e.g., Morning Coffee Shop, Cozy Café"
                    className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
                  />
                </div>

                <div>
                  <label className="text-xl font-black uppercase mb-3 block">
                    Coffee Shop Description
                  </label>
                  <textarea
                    value={audioConfig.prompt}
                    onChange={(e) => setAudioConfig({...audioConfig, prompt: e.target.value})}
                    placeholder="Describe the coffee shop scene..."
                    className="w-full h-24 text-lg font-semibold border-4 border-black rounded-[3px] p-3"
                  />
                </div>

                <div>
                  <label className="text-xl font-black uppercase mb-3 block">
                    Intensity: {(audioConfig.intensity * 100).toFixed(0)}%
                  </label>
                  <Slider
                    value={[audioConfig.intensity]}
                    onValueChange={(value) => setAudioConfig({...audioConfig, intensity: value[0]})}
                    min={0.1}
                    max={1}
                    step={0.1}
                    className="mb-2"
                  />
                  <p className="text-sm text-gray-600">10% - 100% ambiance intensity</p>
                </div>

                <Card className="bg-yellow-100 border-2 border-black">
                  <CardContent className="p-4">
                    <div className="flex items-start gap-3">
                      <Button 
                        size="sm" 
                        variant="neutral" 
                        className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                      >
                        <UilInfoCircle className="h-4 w-4" />
                      </Button>
                      <div>
                        <p className="text-sm font-bold">COFFEE SHOP TIP</p>
                        <p className="text-sm text-gray-700 mt-1">
                          Higher intensity adds more cup clinking and background chatter. Lower intensity creates a more peaceful atmosphere.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <div className="flex gap-4 mt-8">
                  <Button
                    className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={handleContinue}
                    disabled={!canProceed()}
                  >
                    CONTINUE
                    <UilArrowRight className="ml-2 h-6 w-6" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        );

      case 2:
        return (
          <Card className="transform rotate-1">
            <CardContent className="p-8">
              <div className="text-center mb-8">
                <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                  GENERATE AUDIO
                </h1>
                <p className="text-lg text-gray-700 mt-2">
                  Choose a preset or create your custom coffee shop ambiance
                </p>
              </div>

              {error && (
                <Card className="bg-red-100 border-2 border-red-500 mb-6">
                  <CardContent className="p-4">
                    <p className="text-red-700 font-bold">Error: {error}</p>
                  </CardContent>
                </Card>
              )}

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-8">
                {coffeeShopPresets.map((preset) => (
                  <div key={preset.id} className="relative">
                    {selectedPreset === preset.id && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 z-20" 
                           style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} 
                                    className="w-20 h-20 sm:w-24 sm:h-24" 
                                    stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] uppercase tracking-wider transform rotate-12"
                                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <Card 
                      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                        selectedPreset === preset.id ? 'bg-purple-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                      }`}
                      onClick={() => {
                        setSelectedPreset(preset.id);
                        setAudioConfig(preset.config);
                      }}
                    >
                      <CardContent className="p-6">
                        <h4 className="font-black uppercase text-xl mb-2">{preset.name}</h4>
                        <p className="text-sm text-gray-600 mb-3">
                          {preset.config.duration}s • {Math.round(preset.config.intensity * 100)}% intensity
                        </p>
                        <p className="text-sm text-gray-700">{preset.config.prompt.substring(0, 80)}...</p>
                      </CardContent>
                    </Card>
                  </div>
                ))}
              </div>

              {/* Fixed: Both buttons now have the same variant and styling */}
              <div className="flex flex-col sm:flex-row gap-4 mt-8">
                <Button
                  variant="default"
                  className="w-1/2 h-14 text-lg font-black uppercase bg-purple-500 hover:bg-purple-600 text-white"
                  onClick={() => setCurrentStep(1)}
                >
                  <UilArrowLeft className="mr-2 h-6 w-6" />
                  BACK
                </Button>
                <Button
                  variant="default"
                  className="w-1/2 h-14 text-lg font-black uppercase bg-purple-500 hover:bg-purple-600 text-white"
                  onClick={handleGenerateAudio}
                  disabled={getJob?.status === 'processing' || getJob?.status === 'pending' || !canProceed()}
                >
                  {getJob?.status === 'processing' ? (
                    <>
                      <UilSpinner className="mr-2 h-5 w-5 animate-spin" />
                      BREWING...
                    </>
                  ) : getJob?.status === 'pending' ? (
                    <>
                      <UilSpinner className="mr-2 h-5 w-5 animate-spin" />
                      QUEUED...
                    </>
                  ) : (
                    <>
                      <UilMicrophone className="mr-2 h-5 w-5" />
                      CREATE COFFEE SHOP AUDIO
                    </>
                  )}
                </Button>
              </div>

              {getJob?.status === 'processing' && (
                <div className="mt-6">
                  <Progress value={getJob.progress || 50} className="h-4" />
                  <p className="text-center text-lg mt-2">
                    {getJob.currentStage || 'Creating your coffee shop ambiance...'}
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        );

      case 3:
        if (getJob?.status === 'processing' || getJob?.status === 'pending') {
          return (
            <AudioGenerationProgress
              progress={modalProgress}
              status={getJob?.currentStage || 'Creating your coffee shop ambiance...'}
              audioName={audioConfig.name}
            />
          );
        }
        
        return (
          <Card className="transform -rotate-1">
            <CardContent className="p-8">
              <div className="text-center mb-8">
                <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                  ENJOY
                </h1>
                <p className="text-lg text-gray-700 mt-2">
                  Your coffee shop ambiance is ready
                </p>
              </div>

              {generatedAudio && (
                <div className="space-y-6">
                  <div className="text-center">
                    <div className="w-20 h-20 bg-purple-500 border-4 border-black mx-auto mb-4 flex items-center justify-center">
                      <UilCheck className="h-10 w-10 text-white" />
                    </div>
                    <h3 className="text-2xl font-black uppercase">Audio Generated Successfully!</h3>
                  </div>

                  <Card className="bg-purple-50 border-2 border-black">
                    <CardContent className="p-6">
                      <h4 className="text-xl font-black uppercase mb-4">Your Coffee Shop Audio</h4>
                      <div className="space-y-3">
                        <div className="flex justify-between">
                          <span className="font-bold">Name:</span>
                          <span>{generatedAudio.config.name}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="font-bold">Type:</span>
                          <span>Coffee Shop Ambiance</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="font-bold">Duration:</span>
                          <span>{generatedAudio.config.duration} seconds</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="font-bold">File Size:</span>
                          <span>{generatedAudio.metadata.size}</span>
                        </div>
                      </div>

                      {generatedAudio.url && (
                        <div className="mt-4">
                          <audio controls className="w-full">
                            <source src={generatedAudio.url} type="audio/wav" />
                            Your browser does not support the audio element.
                          </audio>
                        </div>
                      )}
                    </CardContent>
                  </Card>

                  {/* FIX: Replaced 'Use in Project' with 'Create Another' for clear navigation */}
                  <div className="flex gap-4">
                    <Button
                      variant="neutral"
                      className="flex-1 h-14 text-lg font-black uppercase bg-white hover:bg-gray-100 text-black border-4 border-black"
                      onClick={() => setCurrentStep(1)}
                    >
                      <UilArrowLeft className="mr-2 h-5 w-5" />
                      Create Another
                    </Button>
                    <Button
                      className="flex-1 h-14 text-lg font-black uppercase bg-purple-500 hover:bg-purple-600 text-white"
                      onClick={handleDownload}
                      disabled={!generatedAudio.url}
                    >
                      <UilDownloadAlt className="mr-2 h-5 w-5" />
                      Download Audio
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        );
      default:
        return null;
    }
  };

  return (
    <TooltipProvider>
      <div
        className="min-h-screen bg-purple-500 relative pb-8"
        style={{
          fontFamily: 'Noyh-Bold, sans-serif',
          backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
          backgroundSize: '60px 60px'
        }}
      >
        {/* Dev Mode Toggle */}
        {process.env.NODE_ENV === 'development' && (
          <div className="fixed top-4 right-4 z-50">
            <Button
              onClick={() => setDevMode(!devMode)}
              className={`h-10 px-4 text-sm font-black uppercase ${
                devMode
                  ? 'bg-green-500 hover:bg-green-600 text-white'
                  : 'bg-gray-200 hover:bg-gray-300 text-black'
              } border-2 border-black`}
            >
              DEV MODE {devMode ? 'ON' : 'OFF'}
            </Button>
          </div>
        )}

        <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
          <div className="w-full max-w-4xl space-y-8">
            {/* Persistent Title Card */}
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardHeader className="relative">
                {/* Decorative elements */}
                <div className="absolute top-2 left-4 w-8 h-8 bg-purple-600 border-2 border-black flex items-center justify-center">
                  <UilMicrophone className="h-4 w-4 text-white" />
                </div>
                <div className="absolute top-2 right-4 w-8 h-8 bg-purple-500 border-2 border-black flex items-center justify-center">
                  <UilMusic className="h-4 w-4 text-white" />
                </div>
                <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                  <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
                </div>
                <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
                
                {/* Central icon */}
                <div className="flex justify-center mb-4">
                  <Button className="w-20 h-20 bg-purple-600 hover:bg-purple-700 border-4 border-black p-0">
                    {currentStep === 1 && <UilMusic className="h-12 w-12 text-white" />}
                    {currentStep === 2 && <UilMicrophone className="h-12 w-12 text-white" />}
                    {currentStep === 3 && <UilCheck className="h-12 w-12 text-white" />}
                  </Button>
                </div>
                
                {/* Dynamic title */}
                <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                  {currentStep === 1 && 'DESIGN'}
                  {currentStep === 2 && 'GENERATE'}
                  {currentStep === 3 && 'COMPLETE'}
                </CardTitle>
                
                {/* Subtitle */}
                <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                  {currentStep === 1 && 'Create your coffee shop ambiance'}
                  {currentStep === 2 && 'Generate your audio'}
                  {currentStep === 3 && 'Your audio is ready'}
                </p>
                
                {/* Animated decorative bars */}
                <div className="flex justify-center items-center mt-3 gap-2">
                  <div className="w-3 h-3 bg-purple-600 animate-pulse"></div>
                  <div className="w-2 h-6 bg-black"></div>
                  <div className="w-4 h-4 bg-purple-500 animate-pulse delay-150"></div>
                  <div className="w-2 h-8 bg-black"></div>
                  <div className="w-3 h-3 bg-purple-600 animate-pulse delay-300"></div>
                </div>
              </CardHeader>
            </Card>

            {/* Step Content */}
            {renderStepContent()}

            {/* FIX: OnboardingFooter component has been removed entirely. */}
            
            {/* Verification Modal */}
            <VerificationModal
              isOpen={showGenerationModal}
              onClose={handleModalClose}
              onComplete={(email, phone) => {
                // Handle verification completion
                setShowGenerationModal(false);
                setCurrentStep(3);
              }}
              devMode={devMode}
            />

          </div>
        </div>
      </div>
    </TooltipProvider>
  );
}


================================================
FILE: src/app/onboarding/rag/page.tsx
================================================
'use client';

import * as React from 'react';
import { toast } from 'sonner';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useAction, useMutation, useQuery } from "convex/react";
import { api } from "@convex/_generated/api";
import { useRouter } from 'next/navigation';
import InfoSection from '@/components/custom/info-section';
import SimpleOnboardingNav from '@/components/custom/simple-onboarding-nav';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { useConvexErrorHandler } from '@/hooks/useConvexErrorHandler';
import { Star15 } from '@/components/ui/star';
import { 
  UilDatabase, 
  UilUpload, 
  UilFileSearchAlt, 
  UilYoutube, 
  UilFile, 
  UilLink, 
  UilBrain,
  UilArrowRight,
  UilArrowLeft,
  UilDownloadAlt,
  UilChartGrowth,
  UilCheckCircle,
  UilSetting,
  UilInfoCircle
} from '@tooni/iconscout-unicons-react';

// Import new components
import { Step1ChooseSource } from './components/Step1ChooseSource';
import { Step2SourceDetails } from './components/Step2SourceDetails';
import { Step3ConfigureProcessing } from './components/Step3ConfigureProcessing';
import { Step4ProcessingProgress } from './components/Step4ProcessingProgress';
import { Step5Completion } from './components/Step5Completion';
import { InfoSectionStep1 } from './components/InfoSectionStep1';
import { InfoSectionStep3 } from './components/InfoSectionStep3';
import { AdvancedSettings, WorkflowStats, SourceData } from './types';
import { formatNumber, calculateProcessingTime, readFileContent } from './utils';

export default function RAGOnboarding() {
  const router = useRouter();
  const { handleConvexError } = useConvexErrorHandler();
  const [currentStep, setCurrentStep] = React.useState(1);
  const [selectedSourceType, setSelectedSourceType] = React.useState<string>('');
  const [sourceInput, setSourceInput] = React.useState<string>('');
  const [uploadedFiles, setUploadedFiles] = React.useState<File[]>([]);
  const [advancedSettings, setAdvancedSettings] = React.useState<AdvancedSettings>({
    chunkSize: 512,
    overlap: 50,
    embeddingModel: 'jina-clip-v2',
    vectorStore: 'convex'
  });
  const [isProcessing, setIsProcessing] = React.useState(false);
  const [progress, setProgress] = React.useState(0);
  const [currentStatus, setCurrentStatus] = React.useState('');
  const [workflowStats, setWorkflowStats] = React.useState<WorkflowStats | null>(null);
  const [workflowId, setWorkflowId] = React.useState<string | null>(null);
  const [sources, setSources] = React.useState<SourceData[]>([]);
  const [totalFileSize, setTotalFileSize] = React.useState(0);
  const [userId] = React.useState<string>('user_' + Date.now());
  
  // Convex hooks
  const createWorkflow = useMutation(api.ragMutations.createWorkflow);
  const addSource = useMutation(api.ragMutations.addSourceToWorkflow);
  const processWorkflow = useAction(api.ragActions.processRAGWorkflow);
  const checkSizeLimit = useQuery(api.ragQueries.checkWorkflowSizeLimit, {
    userId,
    additionalSize: totalFileSize,
  });
  const workflowData = useQuery(api.ragQueries.getWorkflow, 
    workflowId ? { workflowId, userId } : "skip"
  );

  const handleSourceTypeSelect = (type: string) => {
    setSelectedSourceType(type);
    setCurrentStep(2);
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const files = Array.from(e.target.files);
      setUploadedFiles(files);
      
      // Calculate total file size
      const totalSize = files.reduce((sum, file) => sum + file.size, 0);
      setTotalFileSize(totalSize);
      
      // Convert files to sources
      const fileSources = files.map(file => ({
        type: 'document' as const,
        value: file.name,
        metadata: {
          fileName: file.name,
          fileSize: file.size,
          content: '',
        },
      }));
      setSources(fileSources);
    }
  };

  const canProceedToProcessing = () => {
    if (selectedSourceType === 'youtube' && sourceInput) return true;
    if (selectedSourceType === 'documents' && uploadedFiles.length > 0) return true;
    if (selectedSourceType === 'urls' && sourceInput) return true;
    if (selectedSourceType === 'csv' && uploadedFiles.length > 0) return true;
    return false;
  };

  const startProcessing = async () => {
    try {
      setIsProcessing(true);
      setCurrentStep(4);
      
      // Check size limits
      if (checkSizeLimit && !checkSizeLimit.allowed) {
        toast.error(checkSizeLimit.error || 'Size limit exceeded');
        setIsProcessing(false);
        setCurrentStep(3);
        return;
      }
      
      // Create workflow
      const workflow = await createWorkflow({
        name: `RAG Workflow - ${selectedSourceType}`,
        description: `Processing ${sources.length} sources`,
        sourceType: selectedSourceType as any,
        chunkSize: advancedSettings.chunkSize,
        overlap: advancedSettings.overlap,
        userId,
      });
      
      setWorkflowId(workflow.workflowId);
      
      // Prepare sources based on type
      let processingSources = sources;
      
      if (selectedSourceType === 'youtube') {
        const urls = sourceInput.split('\n').filter(url => url.trim());
        processingSources = urls.map(url => ({
          type: 'youtube' as const,
          value: url.trim(),
        }));
      } else if (selectedSourceType === 'urls') {
        const urls = sourceInput.split('\n').filter(url => url.trim());
        processingSources = urls.map(url => ({
          type: 'url' as const,
          value: url.trim(),
        }));
      } else if (selectedSourceType === 'documents' || selectedSourceType === 'csv') {
        // Read file contents
        for (let i = 0; i < uploadedFiles.length; i++) {
          const file = uploadedFiles[i];
          const content = await readFileContent(file);
          processingSources[i].metadata.content = content;
        }
      }
      
      // Add sources to workflow
      for (const source of processingSources) {
        await addSource({
          workflowId: workflow.workflowId,
          source,
          userId,
        });
      }
      
      // Start processing
      await processWorkflow({
        workflowId: workflow.workflowId,
        userId,
        sources: processingSources,
        config: {
          chunkSize: advancedSettings.chunkSize,
          overlap: advancedSettings.overlap,
          embeddingModel: advancedSettings.embeddingModel,
        },
      });
      
    } catch (error) {
      console.error('Processing error:', error);
      handleConvexError(error);
      setIsProcessing(false);
      setCurrentStep(3);
    }
  };

  const handleStepChange = (step: number) => {
    if (step < currentStep) {
      setCurrentStep(step);
    }
  };

  // Handle workflow data updates
  React.useEffect(() => {
    if (workflowData) {
      setProgress(workflowData.progress);
      setCurrentStatus(workflowData.currentStage || '');
      
      if (workflowData.status === 'completed') {
        setWorkflowStats({
          totalContent: `${workflowData.totalSources} sources`,
          charactersIndexed: formatNumber(workflowData.totalTokens * 4),
          embeddingsGenerated: formatNumber(workflowData.totalEmbeddings),
          indexSize: workflowData.indexSize,
          processingTime: calculateProcessingTime(workflowData.startedAt, workflowData.completedAt),
        });
        setIsProcessing(false);
        setCurrentStep(5);
      } else if (workflowData.status === 'failed') {
        toast.error('Processing failed: ' + (workflowData.error || 'Unknown error'));
        setIsProcessing(false);
        setCurrentStep(3);
      }
    }
  }, [workflowData]);

  const getStepTitle = () => {
    switch (currentStep) {
      case 1: return 'KNOWLEDGE SOURCE';
      case 2: return 'CONTENT DETAILS';
      case 3: return 'CONFIGURE RAG';
      case 4: return 'BUILDING INDEX';
      case 5: return 'RAG COMPLETE';
      default: return 'RAG SETUP';
    }
  };

  const getStepSubtitle = () => {
    switch (currentStep) {
      case 1: return 'CHOOSE YOUR DATA SOURCE';
      case 2: return 'PROVIDE SOURCE INFORMATION';
      case 3: return 'OPTIMIZE YOUR SETTINGS';
      case 4: return 'PROCESSING YOUR KNOWLEDGE';
      case 5: return 'YOUR RAG IS READY';
      default: return 'SETUP IN PROGRESS';
    }
  };

  const getStepIcon = () => {
    switch (currentStep) {
      case 1: return <UilDatabase className="h-12 w-12 text-white" />;
      case 2: return <UilUpload className="h-12 w-12 text-white" />;
      case 3: return <UilSetting className="h-12 w-12 text-white" />;
      case 4: return <UilBrain className="h-12 w-12 text-white animate-pulse" />;
      case 5: return <UilCheckCircle className="h-12 w-12 text-white" />;
      default: return <UilDatabase className="h-12 w-12 text-white" />;
    }
  };

  return (
    <>
      <div className="min-h-screen bg-cyan-400 relative pb-8" style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}>
        <div className="flex flex-col items-center justify-center min-h-screen p-4">
          <div className="w-full max-w-4xl space-y-8">
            {/* Persistent Title Card */}
            <Card className="transform -rotate-1 relative overflow-hidden">
              <CardHeader className="relative">
                <div className="absolute top-2 left-4 w-8 h-8 bg-cyan-600 border-2 border-black flex items-center justify-center">
                  <UilDatabase className="h-4 w-4 text-white" />
                </div>
                <div className="absolute top-2 right-4 w-8 h-8 bg-cyan-500 border-2 border-black flex items-center justify-center">
                  <UilBrain className="h-4 w-4 text-white" />
                </div>
                <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                  <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
                </div>
                <div className="absolute bottom-2 right-8 w-4 h-4 bg-pink-500 border-2 border-black -rotate-12"></div>
                <div className="flex justify-center mb-4">
                  <Button className="w-20 h-20 bg-cyan-600 hover:bg-cyan-700 border-4 border-black p-0">
                    {getStepIcon()}
                  </Button>
                </div>
                <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                  {getStepTitle()}
                </CardTitle>
                <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                  {getStepSubtitle()}
                </p>
                <div className="flex justify-center items-center mt-3 gap-2">
                  <div className="w-3 h-3 bg-cyan-600 animate-pulse"></div>
                  <div className="w-2 h-6 bg-black"></div>
                  <div className="w-4 h-4 bg-cyan-500 animate-pulse delay-150"></div>
                  <div className="w-2 h-8 bg-black"></div>
                  <div className="w-3 h-3 bg-cyan-600 animate-pulse delay-300"></div>
                </div>
              </CardHeader>
            </Card>

            {/* Main Content */}
            {currentStep === 1 && (
              <>
                <Step1ChooseSource 
                  selectedSourceType={selectedSourceType}
                  onSourceTypeSelect={setSelectedSourceType}
                  onContinue={() => setCurrentStep(2)}
                />
                <InfoSectionStep1 />
              </>
            )}

            {currentStep === 2 && (
              <Step2SourceDetails
                selectedSourceType={selectedSourceType}
                sourceInput={sourceInput}
                uploadedFiles={uploadedFiles}
                onSourceInputChange={setSourceInput}
                onFileUpload={handleFileUpload}
                onBack={() => setCurrentStep(1)}
                onContinue={() => setCurrentStep(3)}
                canProceed={canProceedToProcessing()}
              />
            )}

            {currentStep === 3 && (
              <>
                <Step3ConfigureProcessing
                  selectedSourceType={selectedSourceType}
                  sourceInput={sourceInput}
                  uploadedFiles={uploadedFiles}
                  advancedSettings={advancedSettings}
                  onSettingsChange={setAdvancedSettings}
                  onBack={() => setCurrentStep(2)}
                  onStartProcessing={startProcessing}
                  checkSizeLimit={checkSizeLimit}
                  totalFileSize={totalFileSize}
                />
                <InfoSectionStep3 />
              </>
            )}

            {currentStep === 4 && (
              <Step4ProcessingProgress
                progress={progress}
                currentStatus={currentStatus}
              />
            )}

            {currentStep === 5 && (
              <Step5Completion
                workflowStats={workflowStats}
                workflowId={workflowId}
                onViewKnowledgeBase={() => router.push(`/dashboard/rag/${workflowId}`)}
                onGoToDashboard={() => router.push('/dashboard')}
              />
            )}
          </div>
        </div>
        
        <div className="fixed bottom-4 right-4 z-50">
          <Card className="bg-yellow-200 border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] transform rotate-1">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold uppercase">NEED HELP?</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Building a RAG knowledge base? Check our docs or contact support.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Footer always at the bottom */}
        <div className="w-full flex justify-center mt-12">
          <OnboardingFooter />
        </div>
      </div>
    </>
  );
}
  


================================================
FILE: src/app/onboarding/rag/types.ts
================================================
export interface AdvancedSettings {
  chunkSize: number;
  overlap: number;
  embeddingModel: string;
  vectorStore: string;
}

export interface WorkflowStats {
  totalContent: string;
  charactersIndexed: string;
  embeddingsGenerated: string;
  indexSize: string;
  processingTime: string;
}

export interface SourceData {
  type: string;
  value: string;
  metadata?: {
    fileName?: string;
    fileSize?: number;
    content?: string;
  };
}

export type SourceType = 'youtube' | 'tiktok' | 'twitch' | 'documents' | 'urls' | 'csv';


================================================
FILE: src/app/onboarding/rag/utils.ts
================================================
export const formatNumber = (num: number): string => {
  if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
  if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
  return num.toString();
};

export const calculateProcessingTime = (start?: string, end?: string): string => {
  if (!start || !end) return 'N/A';
  const duration = new Date(end).getTime() - new Date(start).getTime();
  const minutes = Math.floor(duration / 60000);
  const seconds = Math.floor((duration % 60000) / 1000);
  return `${minutes}m ${seconds}s`;
};

export const readFileContent = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (e) => resolve(e.target?.result as string);
    reader.onerror = reject;
    reader.readAsText(file);
  });
};


================================================
FILE: src/app/onboarding/rag/components/InfoSectionStep1.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilBrain, UilRocket } from '@tooni/iconscout-unicons-react';

export function InfoSectionStep1() {
  return (
    <div className="space-y-6">
      <Card className="transform -rotate-1 relative overflow-hidden bg-cyan-50">
        <CardContent className="pt-6">
          <div className="flex items-start gap-4">
            <Button
              size="icon"
              variant="default"
              className="w-12 h-12 flex-shrink-0 bg-cyan-600 hover:bg-cyan-700 text-white border-black"
            >
              <UilBrain className="h-6 w-6 text-white" />
            </Button>
            <div className="flex-1">
              <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                RAG-POWERED INTELLIGENCE
              </h3>
              <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                Transform any knowledge source into a <span className="font-black text-cyan-600">queryable AI brain</span>. 
                Our RAG system processes millions of tokens to create semantic embeddings that power instant, accurate answers. 
                Your agents will have photographic memory of every document, video, or webpage you feed them.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Semantic search across all content</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Context-aware responses</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Multi-format support</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Real-time indexing</span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="transform rotate-1 relative overflow-hidden bg-cyan-50">
        <CardContent className="pt-6">
          <div className="flex items-start gap-4">
            <Button
              size="icon"
              variant="default"
              className="w-12 h-12 flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90 text-black"
            >
              <UilRocket className="h-6 w-6 text-black" />
            </Button>
            <div className="flex-1">
              <h3 className="text-xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                ENTERPRISE-SCALE PROCESSING
              </h3>
              <p className="text-gray-700 text-lg leading-relaxed">
                Process up to <span className="font-black text-cyan-600">10GB of knowledge per workflow</span> with our distributed infrastructure. 
                Advanced chunking algorithms ensure optimal retrieval performance while maintaining context. 
                Your data is vectorized using state-of-the-art embedding models for unmatched accuracy.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/app/onboarding/rag/components/InfoSectionStep3.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilSetting } from '@tooni/iconscout-unicons-react';

export function InfoSectionStep3() {
  return (
    <div className="space-y-6">
      <Card className="transform -rotate-1 relative overflow-hidden bg-cyan-50">
        <CardContent className="pt-6">
          <div className="flex items-start gap-4">
            <Button
              size="icon"
              variant="default"
              className="w-12 h-12 flex-shrink-0 bg-cyan-600 hover:bg-cyan-700 text-white border-black"
            >
              <UilSetting className="h-6 w-6 text-white" />
            </Button>
            <div className="flex-1">
              <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                INTELLIGENT CHUNKING ENGINE
              </h3>
              <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                Our advanced chunking algorithms ensure <span className="font-black text-cyan-600">optimal context preservation</span> while maximizing retrieval accuracy. 
                Each chunk is carefully crafted to maintain semantic coherence, with intelligent overlap to prevent information loss at boundaries.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Smart boundary detection</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Context-aware chunking</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Metadata preservation</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-cyan-600 rounded-full"></div>
                  <span className="text-black font-medium">Optimal embedding size</span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/app/onboarding/rag/components/SocialMediaVideoDisplay.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
// Fallback skeleton component since @/components/ui/skeleton doesn't exist
const Skeleton = ({ className }: { className?: string }) => (
  <div className={`bg-gray-200 animate-pulse rounded ${className}`} />
);
import { Checkbox } from '@/components/ui/checkbox';
import { UilClock, UilEye, UilExclamationTriangle } from '@tooni/iconscout-unicons-react';
import { useAction } from 'convex/react';
import { api } from '@convex/_generated/api';
import { toast } from 'sonner';

interface Video {
  id: string;
  title: string;
  thumbnail: string;
  duration: string;
  viewCount?: string;
  url: string;
  channel?: string;
  publishedAt?: string;
  selected?: boolean;
}

interface SocialMediaVideoDisplayProps {
  sourceType: 'youtube' | 'tiktok' | 'twitch';
  channelUrl: string;
  onVideosLoaded?: (videos: Video[]) => void;
  onVideoSelectionChange?: (selectedVideos: Video[]) => void;
}

export function SocialMediaVideoDisplay({ 
  sourceType, 
  channelUrl, 
  onVideosLoaded, 
  onVideoSelectionChange 
}: SocialMediaVideoDisplayProps) {
  const [videos, setVideos] = React.useState<Video[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState<string | null>(null);
  const [selectedVideos, setSelectedVideos] = React.useState<Set<string>>(new Set());
  
  const fetchChannelVideos = useAction(api.ragActions.fetchChannelVideos);

  const isValidUrl = React.useCallback((url: string) => {
    if (!url.trim()) return false;
    
    const patterns = {
      youtube: /(?:youtube\.com|youtu\.be)/,
      tiktok: /(?:tiktok\.com|tiktok)/,
      twitch: /(?:twitch\.tv|twitch)/
    };
    
    return patterns[sourceType].test(url);
  }, [sourceType]);

  const loadVideos = React.useCallback(async () => {
    if (!channelUrl || !isValidUrl(channelUrl)) {
      setVideos([]);
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const result = await fetchChannelVideos({
        url: channelUrl,
        platform: sourceType,
        maxVideos: 50
      });

      if (result.videos && result.videos.length > 0) {
        const formattedVideos = result.videos.map((video: any) => ({
          id: video.id,
          title: video.title || 'Untitled Video',
          thumbnail: video.thumbnail || '/placeholder-thumbnail.jpg',
          duration: video.duration || 'N/A',
          viewCount: video.viewCount ? formatViewCount(video.viewCount) : undefined,
          url: video.url,
          channel: video.channel,
          publishedAt: video.publishedAt,
          selected: true
        }));

        setVideos(formattedVideos);
        setSelectedVideos(new Set(formattedVideos.map(v => v.id)));
        onVideosLoaded?.(formattedVideos);
        
        // Auto-select all videos by default
        const allSelected = formattedVideos.filter(v => v.selected);
        onVideoSelectionChange?.(allSelected);
      } else {
        setVideos([]);
        setError('No videos found. Please check the URL and try again.');
      }
    } catch (error) {
      console.error('Error loading videos:', error);
      setError('Failed to load videos. Please check the URL and try again.');
      toast.error('Failed to load videos');
    } finally {
      setLoading(false);
    }
  }, [channelUrl, sourceType, fetchChannelVideos, onVideosLoaded, isValidUrl, onVideoSelectionChange]);

  React.useEffect(() => {
    if (channelUrl && isValidUrl(channelUrl)) {
      const debounceTimer = setTimeout(() => {
        loadVideos();
      }, 1000);

      return () => clearTimeout(debounceTimer);
    }
  }, [channelUrl, loadVideos, isValidUrl]);

  const handleVideoToggle = (videoId: string) => {
    const newSelected = new Set(selectedVideos);
    if (newSelected.has(videoId)) {
      newSelected.delete(videoId);
    } else {
      newSelected.add(videoId);
    }
    setSelectedVideos(newSelected);
    
    const selectedVideoObjects = videos.filter(v => newSelected.has(v.id));
    onVideoSelectionChange?.(selectedVideoObjects);
  };

  const handleSelectAll = () => {
    if (selectedVideos.size === videos.length) {
      setSelectedVideos(new Set());
      onVideoSelectionChange?.([]);
    } else {
      setSelectedVideos(new Set(videos.map(v => v.id)));
      onVideoSelectionChange?.(videos);
    }
  };

  const formatViewCount = (count: number | string) => {
    const num = typeof count === 'string' ? parseInt(count) : count;
    if (num >= 1000000) {
      return `${(num / 1000000).toFixed(1)}M`;
    } else if (num >= 1000) {
      return `${(num / 1000).toFixed(1)}K`;
    }
    return num.toString();
  };

  const formatDuration = (duration: string) => {
    if (duration === 'N/A') return duration;
    
    // Handle YouTube duration format (PT1H23M45S)
    if (duration.startsWith('PT')) {
      const match = duration.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
      if (match) {
        const hours = match[1] ? parseInt(match[1]) : 0;
        const minutes = match[2] ? parseInt(match[2]) : 0;
        const seconds = match[3] ? parseInt(match[3]) : 0;
        
        if (hours > 0) {
          return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
      }
    }
    
    return duration;
  };

  if (loading) {
    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-bold uppercase">Loading Videos...</h3>
          <Badge variant="secondary" className="bg-cyan-100 border-2 border-black">Fetching content</Badge>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <Skeleton className="w-full h-32 mb-3 rounded border border-gray-200" />
                <Skeleton className="h-4 w-3/4 mb-2 bg-gray-300" />
                <Skeleton className="h-3 w-1/2 bg-gray-300" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <Card className="border-2 border-red-400 bg-red-50">
        <CardContent className="p-6">
          <div className="flex items-center gap-3">
            <UilExclamationTriangle className="h-5 w-5 text-red-600" />
            <div>
              <h3 className="font-bold text-red-800">Error Loading Videos</h3>
              <p className="text-sm text-red-600">{error}</p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (videos.length === 0) {
    return null;
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-bold uppercase">Found Videos</h3>
          <p className="text-sm text-gray-600">
            {videos.length} videos found • {selectedVideos.size} selected
          </p>
        </div>
        <Button
          variant="outline"
          size="sm"
          onClick={handleSelectAll}
          className="border-2 border-black"
        >
          {selectedVideos.size === videos.length ? 'Deselect All' : 'Select All'}
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-h-96 overflow-y-auto">
        {videos.map((video) => (
          <Card key={video.id} className="border-2 border-black hover:border-cyan-500 transition-colors">
            <CardContent className="p-4">
              <div className="relative mb-3">
                <img
                  src={video.thumbnail}
                  alt={video.title}
                  className="w-full h-32 object-cover rounded border border-gray-300"
                />
                <div className="absolute top-2 right-2 bg-black bg-opacity-75 text-white px-2 py-1 rounded text-xs flex items-center gap-1">
                  <UilClock className="h-3 w-3" />
                  {formatDuration(video.duration)}
                </div>
                {video.viewCount && (
                  <div className="absolute bottom-2 left-2 bg-black bg-opacity-75 text-white px-2 py-1 rounded text-xs flex items-center gap-1">
                    <UilEye className="h-3 w-3" />
                    {video.viewCount}
                  </div>
                )}
              </div>

              <div className="flex items-start gap-2">
                <Checkbox
                  checked={selectedVideos.has(video.id)}
                  onCheckedChange={() => handleVideoToggle(video.id)}
                  className="mt-1"
                />
                <div className="flex-1 min-w-0">
                  <h4 className="font-semibold text-sm line-clamp-2 mb-1">
                    {video.title}
                  </h4>
                  {video.publishedAt && (
                    <p className="text-xs text-gray-600">
                      {new Date(video.publishedAt).toLocaleDateString()}
                    </p>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}


================================================
FILE: src/app/onboarding/rag/components/Step1ChooseSource.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Star15 } from '@/components/ui/star';
import { 
  UilYoutube, 
  UilFile, 
  UilLink, 
  UilDatabase,
  UilInfoCircle,
  UilArrowRight
} from '@tooni/iconscout-unicons-react';
import Image from 'next/image';

interface Step1ChooseSourceProps {
  selectedSourceType: string;
  onSourceTypeSelect: (type: string) => void;
  onContinue: () => void;
}

export function Step1ChooseSource({ selectedSourceType, onSourceTypeSelect, onContinue }: Step1ChooseSourceProps) {
  const sourceTypes = [
    {
      type: 'youtube',
      icon: UilYoutube,
      title: 'YOUTUBE VIDEOS',
      description: 'Ingest transcripts from channels or playlists',
      color: 'bg-red-500 hover:bg-red-600',
      bgColor: 'bg-cyan-50'
    },
    {
      type: 'tiktok',
      icon: null, // Will use Image component
      title: 'TIKTOK VIDEOS',
      description: 'Process creator content and trends',
      color: 'bg-black hover:bg-gray-800',
      bgColor: 'bg-cyan-50',
      customIcon: true
    },
    {
      type: 'twitch',
      icon: null, // Will use Image component
      title: 'TWITCH STREAMS',
      description: 'Extract content from live streams and VODs',
      color: 'bg-purple-500 hover:bg-purple-600',
      bgColor: 'bg-cyan-50',
      customIcon: true
    },
    {
      type: 'documents',
      icon: UilFile,
      title: 'DOCUMENTS',
      description: 'Upload PDFs, Word docs, or text files',
      color: 'bg-orange-500 hover:bg-orange-600',
      bgColor: 'bg-cyan-50'
    },
    {
      type: 'urls',
      icon: UilLink,
      title: 'WEB PAGES',
      description: 'Scrape content from websites',
      color: 'bg-blue-500 hover:bg-blue-600',
      bgColor: 'bg-cyan-50'
    },
    {
      type: 'csv',
      icon: UilDatabase,
      title: 'STRUCTURED DATA',
      description: 'Import CSV or knowledge base files',
      color: 'bg-green-500 hover:bg-green-600',
      bgColor: 'bg-cyan-50'
    }
  ];

  return (
    <Card className="transform rotate-1 relative">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            SELECT YOUR SOURCE
          </h1>
        </div>
        <p className="text-xl text-center text-gray-700 mb-8">
          What type of content do you want to feed your AI agent?
        </p>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 relative">
          {sourceTypes.map((source) => (
              <Card 
              key={source.type}
               className={`cursor-pointer transform hover:scale-105 transition-transform border-4 border-black hover:shadow-[8px_8px_0_rgba(0,0,0,1)] ${source.bgColor} relative`}              onClick={() => {
                if (selectedSourceType === source.type) {
                  onSourceTypeSelect(''); // Unselect if already selected
                } else {
                  onSourceTypeSelect(source.type);
                }
              }}
            >
              {selectedSourceType === source.type && (
                <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-[999]" style={{animation: 'overshoot 0.3s ease-out'}}>
                  <div className="relative">
                    <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                      <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                    </div>
                    <div className="absolute inset-0 flex items-center justify-center">
                      <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        SELECTED
                      </span>
                    </div>
                  </div>
                </div>
              )}              <CardContent className="p-6 text-center">
                <Button size="icon" variant="header" className={`w-16 h-16 mb-4 ${source.color}`}>
                  {source.customIcon ? (
                    source.type === 'tiktok' ? (
                      <Image src="/tiktok.svg" alt="TikTok" width={32} height={32} className="h-8 w-8 filter brightness-0 invert" />
                    ) : source.type === 'twitch' ? (
                      <Image src="/twitch.svg" alt="Twitch" width={32} height={32} className="h-8 w-8 filter brightness-0 invert" />
                    ) : null
                  ) : (
                    <source.icon className="h-8 w-8 text-white" />
                  )}
                </Button>
                <h3 className="text-2xl font-black uppercase mb-2">{source.title}</h3>
                <p className="text-gray-700">{source.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Continue Button */}
        <div className="mt-8">
          <Button
            className="w-full h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black border-2 border-black"
            onClick={onContinue}
            disabled={!selectedSourceType}
          >
            <span className="flex items-center justify-center w-full">
              Continue
              <UilArrowRight className="ml-2 h-6 w-6" />
            </span>
          </Button>
        </div>

        {/* Help Hint */}
        <div className="mt-8">
          <Card className="bg-yellow-200 border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold uppercase">CHOOSING YOUR SOURCE</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Select the type of content you want to transform into searchable knowledge. Each source type has different processing capabilities.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/app/onboarding/rag/components/Step2SourceDetails.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

import { 
  UilArrowLeft, 
  UilArrowRight, 
  UilUpload, 
  UilFile,
  UilInfoCircle
} from '@tooni/iconscout-unicons-react';

interface Step2SourceDetailsProps {
  selectedSourceType: string;
  sourceInput: string;
  uploadedFiles: File[];
  onSourceInputChange: (value: string) => void;
  onFileUpload: (e: React.ChangeEvent<HTMLInputElement>) => void;
  onBack: () => void;
  onContinue: () => void;
  canProceed: boolean;
}

export function Step2SourceDetails({
  selectedSourceType,
  sourceInput,
  uploadedFiles,
  onSourceInputChange,
  onFileUpload,
  onBack,
  onContinue,
  canProceed
}: Step2SourceDetailsProps) {

  const getSourceTitle = () => {
    switch (selectedSourceType) {
      case 'youtube': return 'YOUTUBE SOURCE';
      case 'tiktok': return 'TIKTOK SOURCE';
      case 'twitch': return 'TWITCH SOURCE';
      case 'documents': return 'UPLOAD DOCUMENTS';
      case 'urls': return 'WEB PAGES';
      case 'csv': return 'STRUCTURED DATA';
      default: return 'SOURCE DETAILS';
    }
  };

  const getHelpText = () => {
    switch (selectedSourceType) {
      case 'youtube':
        return 'Paste any YouTube video, channel, or playlist URL. We\'ll extract transcripts automatically.';
      case 'tiktok':
        return 'Enter TikTok creator username or video URLs. We\'ll process creator content and trends.';
      case 'twitch':
        return 'Enter Twitch channel name or VOD URLs. We\'ll extract content from streams and archives.';
      case 'documents':
        return 'Upload PDFs, Word docs, or text files. Maximum 20 files, each under 50MB.';
      case 'urls':
        return 'Enter website URLs to scrape. We\'ll extract clean text content from each page.';
      case 'csv':
        return 'Upload structured data in CSV format. First row should contain column headers.';
      default:
        return 'Provide the required information for your selected source type.';
    }
  };

  return (
    <Card className="transform -rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            {getSourceTitle()}
          </h1>
        </div>
        
        {(selectedSourceType === 'youtube' || selectedSourceType === 'tiktok' || selectedSourceType === 'twitch') && (
          <div className="space-y-6">
            <div>
              <label className="text-xl font-black uppercase mb-3 block">
                {selectedSourceType === 'youtube' && 'YOUTUBE CHANNEL OR VIDEO URL'}
                {selectedSourceType === 'tiktok' && 'TIKTOK CREATOR OR VIDEO URL'}
                {selectedSourceType === 'twitch' && 'TWITCH CHANNEL OR VOD URL'}
              </label>
              <Input
                type="text"
                value={sourceInput}
                onChange={(e) => onSourceInputChange(e.target.value)}
                placeholder={
                  selectedSourceType === 'youtube' ? "https://youtube.com/@channel or video URL" :
                  selectedSourceType === 'tiktok' ? "@creator or https://tiktok.com/@username" :
                  "twitch.tv/channel or VOD URL"
                }
                className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
              />
              <p className="text-sm text-gray-600 mt-2">
                {selectedSourceType === 'youtube' && 'We can process up to 100 videos from a channel or playlist'}
                {selectedSourceType === 'tiktok' && 'Enter creator username (@username) or paste video URLs'}
                {selectedSourceType === 'twitch' && 'Enter channel name or paste VOD/stream URLs'}
              </p>
            </div>
          </div>
        )}



        {selectedSourceType === 'documents' && (
          <div className="space-y-6">
            <div>
              <label className="text-xl font-black uppercase mb-3 block">
                UPLOAD YOUR DOCUMENTS
              </label>
              <div className="border-4 border-dashed border-black rounded-lg p-8 text-center bg-cyan-50">
                <input
                  type="file"
                  multiple
                  accept=".pdf,.doc,.docx,.txt"
                  onChange={onFileUpload}
                  className="hidden"
                  id="file-upload"
                />
                <label htmlFor="file-upload" className="cursor-pointer">
                  <Button size="icon" variant="header" className="w-16 h-16 mb-4 bg-cyan-500 hover:bg-cyan-600">
                    <UilUpload className="h-8 w-8 text-white" />
                  </Button>
                  <p className="text-lg font-bold">Click to upload or drag files here</p>
                  <p className="text-sm text-gray-600 mt-2">PDF, Word, or text files (max 20 files)</p>
                </label>
              </div>
              {uploadedFiles.length > 0 && (
                <div className="mt-4 space-y-2">
                  {uploadedFiles.map((file, idx) => (
                    <div key={idx} className="flex items-center gap-2 p-2 bg-cyan-100 rounded border-2 border-black">
                      <UilFile className="h-5 w-5" />
                      <span className="font-medium">{file.name}</span>
                      <span className="text-sm text-gray-600">({(file.size / 1024 / 1024).toFixed(2)} MB)</span>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {selectedSourceType === 'urls' && (
          <div className="space-y-6">
            <div>
              <label className="text-xl font-black uppercase mb-3 block">
                WEB PAGE URLS
              </label>
              <textarea
                value={sourceInput}
                onChange={(e) => onSourceInputChange(e.target.value)}
                placeholder="Enter URLs (one per line)\nhttps://example.com\nhttps://docs.example.com"
                className="w-full h-32 p-4 text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
              />
              <p className="text-sm text-gray-600 mt-2">
                Enter up to 20 URLs to scrape content from
              </p>
            </div>
          </div>
        )}

        {selectedSourceType === 'csv' && (
          <div className="space-y-6">
            <div>
              <label className="text-xl font-black uppercase mb-3 block">
                UPLOAD CSV FILE
              </label>
              <div className="border-4 border-dashed border-black rounded-lg p-8 text-center bg-cyan-50">
                <input
                  type="file"
                  accept=".csv"
                  onChange={onFileUpload}
                  className="hidden"
                  id="csv-upload"
                />
                <label htmlFor="csv-upload" className="cursor-pointer">
                  <Button size="icon" variant="header" className="w-16 h-16 mb-4 bg-green-500 hover:bg-green-600">
                    <UilUpload className="h-8 w-8 text-white" />
                  </Button>
                  <p className="text-lg font-bold">Click to upload CSV file</p>
                  <p className="text-sm text-gray-600 mt-2">Maximum file size: 50MB</p>
                </label>
              </div>
              {uploadedFiles.length > 0 && (
                <div className="mt-4 space-y-2">
                  {uploadedFiles.map((file, idx) => (
                    <div key={idx} className="flex items-center gap-2 p-2 bg-cyan-100 rounded border-2 border-black">
                      <UilFile className="h-5 w-5" />
                      <span className="font-medium">{file.name}</span>
                      <span className="text-sm text-gray-600">({(file.size / 1024 / 1024).toFixed(2)} MB)</span>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}
        
        {/* Help Hint */}
        <div className="mt-8">
          <Card className="bg-yellow-200 border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold uppercase">CONTENT REQUIREMENTS</p>
                  <p className="text-sm text-gray-700 mt-1">
                    {getHelpText()}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="flex gap-4 mt-8">
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
            onClick={onBack}
          >
            <UilArrowLeft className="mr-2 h-6 w-6" />
            BACK
          </Button>
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-cyan-400 hover:bg-cyan-400/90 text-black"
            onClick={onContinue}
            disabled={!canProceed}
          >
            CONTINUE
            <UilArrowRight className="ml-2 h-6 w-6" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/app/onboarding/rag/components/Step3ConfigureProcessing.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Slider } from '@/components/ui/slider';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { 
  UilArrowLeft, 
  UilCloudDownload, 
  UilSetting,
  UilInfoCircle
} from '@tooni/iconscout-unicons-react';
import { AdvancedSettings } from '../types';

interface Step3ConfigureProcessingProps {
  selectedSourceType: string;
  sourceInput: string;
  uploadedFiles: File[];
  advancedSettings: AdvancedSettings;
  onSettingsChange: (settings: AdvancedSettings) => void;
  onBack: () => void;
  onStartProcessing: () => void;
  checkSizeLimit?: {
    allowed: boolean;
    maxSize?: number;
    userTier: string;
  };
  totalFileSize: number;
}

export function Step3ConfigureProcessing({
  selectedSourceType,
  sourceInput,
  uploadedFiles,
  advancedSettings,
  onSettingsChange,
  onBack,
  onStartProcessing,
  checkSizeLimit,
  totalFileSize
}: Step3ConfigureProcessingProps) {
  const getSourceSummary = () => {
    switch (selectedSourceType) {
      case 'youtube':
        return `URL: ${sourceInput}`;
      case 'tiktok':
        return `URL: ${sourceInput}`;
      case 'twitch':
        return `URL: ${sourceInput}`;
      case 'documents':
        return `Files: ${uploadedFiles.length} documents`;
      case 'urls':
        return `URLs: ${sourceInput.split('\n').filter(url => url.trim()).length} pages`;
      case 'csv':
        return `File: ${uploadedFiles[0]?.name || 'CSV file'}`;
      default:
        return 'Source configured';
    }
  };

  return (
    <Card className="transform rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            CONFIGURE PROCESSING
          </h1>
        </div>
        <div className="space-y-6">
          {/* Summary */}
          <Card className="bg-cyan-100 border-2 border-black">
            <CardContent className="p-4">
              <h3 className="text-xl font-black uppercase mb-2">READY TO PROCESS</h3>
              <div className="space-y-1">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-black rounded-full"></div>
                  <span className="font-bold">Source Type: {selectedSourceType.toUpperCase()}</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-black rounded-full"></div>
                  <span className="font-bold">{getSourceSummary()}</span>
                </div>
                {selectedSourceType === 'documents' && checkSizeLimit && (
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-black rounded-full"></div>
                    <span className="font-bold">
                      File Size: {(totalFileSize / 1024 / 1024).toFixed(2)} MB / 
                      {checkSizeLimit.maxSize ? (checkSizeLimit.maxSize / 1024 / 1024).toFixed(0) : '∞'} MB
                      <Badge className="ml-2" variant={checkSizeLimit.allowed ? "default" : "destructive"}>
                        {checkSizeLimit.userTier}
                      </Badge>
                    </span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Advanced Settings */}
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="advanced" className="border-2 border-black">
              <AccordionTrigger className="text-left font-black py-4 px-4 hover:bg-cyan-100">
                <div className="flex items-center gap-3">
                  <Button size="sm" variant="neutral" className="bg-cyan-500 text-white">
                    <UilSetting className="h-4 w-4" />
                  </Button>
                  ADVANCED SETTINGS (OPTIONAL)
                </div>
              </AccordionTrigger>
              <AccordionContent className="px-4 pb-4 space-y-4">
                <TooltipProvider>
                  <div>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <label className="text-sm font-bold uppercase cursor-help">
                          Chunk Size: {advancedSettings.chunkSize} tokens
                          <UilInfoCircle className="inline-block h-3 w-3 ml-1 text-gray-600" />
                        </label>
                      </TooltipTrigger>
                      <TooltipContent className="max-w-xs">
                        <p>Size of text segments for processing. Larger chunks maintain more context but may be less precise. Smaller chunks are more precise but may lose context.</p>
                      </TooltipContent>
                    </Tooltip>
                    <Slider 
                      value={[advancedSettings.chunkSize]}
                      onValueChange={(value) => onSettingsChange({...advancedSettings, chunkSize: value[0]})}
                      min={256}
                      max={1024}
                      step={128}
                      className="mt-2"
                    />
                  </div>
                </TooltipProvider>
                
                <TooltipProvider>
                  <div>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <label className="text-sm font-bold uppercase cursor-help">
                          Overlap: {advancedSettings.overlap} words
                          <UilInfoCircle className="inline-block h-3 w-3 ml-1 text-gray-600" />
                        </label>
                      </TooltipTrigger>
                      <TooltipContent className="max-w-xs">
                        <p>Number of words shared between adjacent chunks. Prevents information loss at chunk boundaries by ensuring continuity.</p>
                      </TooltipContent>
                    </Tooltip>
                    <Slider 
                      value={[advancedSettings.overlap]}
                      onValueChange={(value) => onSettingsChange({...advancedSettings, overlap: value[0]})}
                      min={0}
                      max={Math.floor(advancedSettings.chunkSize / 4)}
                      step={10}
                      className="mt-2"
                    />
                    <p className="text-xs text-gray-600 mt-1">
                      {advancedSettings.overlap > advancedSettings.chunkSize / 4 
                        ? 'High overlap - may create redundant embeddings' 
                        : 'Overlap helps maintain context between chunks'}
                    </p>
                  </div>
                </TooltipProvider>
                
                <TooltipProvider>
                  <div className="flex items-center justify-between">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <label className="text-sm font-bold uppercase cursor-help">
                          Embedding Model
                          <UilInfoCircle className="inline-block h-3 w-3 ml-1 text-gray-600" />
                        </label>
                      </TooltipTrigger>
                      <TooltipContent className="max-w-xs">
                        <p>AI model that converts text into numerical vectors for semantic search. Jina-clip-v2 provides state-of-the-art accuracy.</p>
                      </TooltipContent>
                    </Tooltip>
                    <Badge className="bg-cyan-200 text-black border-2 border-black">
                      {advancedSettings.embeddingModel}
                    </Badge>
                  </div>
                </TooltipProvider>
                
                <TooltipProvider>
                  <div className="flex items-center justify-between">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <label className="text-sm font-bold uppercase cursor-help">
                          Vector Store
                          <UilInfoCircle className="inline-block h-3 w-3 ml-1 text-gray-600" />
                        </label>
                      </TooltipTrigger>
                      <TooltipContent className="max-w-xs">
                        <p>Database that stores and searches embedding vectors. Convex provides fast, scalable vector similarity search.</p>
                      </TooltipContent>
                    </Tooltip>
                    <Badge className="bg-cyan-200 text-black border-2 border-black">
                      {advancedSettings.vectorStore}
                    </Badge>
                  </div>
                </TooltipProvider>
              </AccordionContent>
            </AccordionItem>
          </Accordion>

          <div className="bg-cyan-50 border-2 border-black rounded-lg p-4">
            <div className="flex items-start gap-3">
              <Button size="sm" variant="neutral" className="bg-cyan-100 flex-shrink-0">
                <UilInfoCircle className="h-4 w-4" />
              </Button>
              <div>
                <p className="text-sm font-bold">PROCESSING INFO</p>
                <p className="text-sm text-gray-700 mt-1">
                  We&apos;ll automatically extract text, generate embeddings, and build a searchable index. 
                  This typically takes 2-5 minutes depending on content size.
                </p>
              </div>
            </div>
          </div>
        </div>
        
        {/* Help Hint */}
        <div className="mt-8">
          <Card className="bg-yellow-200 border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold uppercase">PROCESSING SETTINGS</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Default settings work great for most use cases. Advanced settings let you fine-tune how content is chunked and embedded for optimal retrieval.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="flex gap-4 mt-8">
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
            onClick={onBack}
          >
            <UilArrowLeft className="mr-2 h-6 w-6" />
            BACK
          </Button>
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-[rgb(0,82,255)] hover:bg-blue-600 text-white"
            onClick={onStartProcessing}
          >
            START PROCESSING
            <UilCloudDownload className="ml-2 h-6 w-6" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/app/onboarding/rag/components/Step3VideoSelection.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilArrowLeft, UilArrowRight } from '@tooni/iconscout-unicons-react';
import { useTikTokContent } from '@/hooks/useTikTokContent';
import { useYouTubeContent } from '@/hooks/useYouTubeContent';
import { useTwitchContent } from '@/hooks/useTwitchContent';
import { VideoSelectionGrid } from './VideoSelectionGrid';

interface Step3VideoSelectionProps {
  selectedSourceType: string;
  sourceInput: string;
  onBack: () => void;
  onContinue: () => void;
  canProceed: boolean;
  onVideosSelected: (videos: any[]) => void;
}

export function Step3VideoSelection({
  selectedSourceType,
  sourceInput,
  onBack,
  onContinue,
  canProceed,
  onVideosSelected
}: Step3VideoSelectionProps) {
  // Use direct backend API calls to bypass Convex rate limits
  const [tiktokUser, setTiktokUser] = React.useState<any>(null);
  const [tiktokVideos, setTiktokVideos] = React.useState<any[]>([]);
  const [tiktokLoading, setTiktokLoading] = React.useState(false);
  const [tiktokError, setTiktokError] = React.useState<string | null>(null);

  const [youtubeChannel, setYoutubeChannel] = React.useState<any>(null);
  const [youtubeVideos, setYoutubeVideos] = React.useState<any[]>([]);
  const [youtubeLoading, setYoutubeLoading] = React.useState(false);
  const [youtubeError, setYoutubeError] = React.useState<string | null>(null);

  const [twitchChannel, setTwitchChannel] = React.useState<any>(null);
  const [twitchVideos, setTwitchVideos] = React.useState<any[]>([]);
  const [twitchLoading, setTwitchLoading] = React.useState(false);
  const [twitchError, setTwitchError] = React.useState<string | null>(null);

  const [selectedVideos, setSelectedVideos] = React.useState<string[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState<string | null>(null);

  const loadVideos = React.useCallback(async () => {
    if (!sourceInput) return;
    
    setTiktokLoading(true);
    setTiktokError(null);
    
    try {
      const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
      const API_KEY = process.env.NEXT_PUBLIC_API_KEY;
      
      let username = sourceInput.replace('@', '');

      // Fetch user info and videos directly using test endpoint
      const userResponse = await fetch(`${BACKEND_URL}/api/public/tiktok/test/${username}`);
      if (!userResponse.ok) throw new Error('Failed to fetch TikTok user');
      
      const userData = await userResponse.json();
      setTiktokUser(userData);

      // Create video data based on actual TikTok structure
      const videoCount = Math.min(userData.videoCount || 3, 25);
      const videos = Array.from({ length: videoCount }, (_, i) => ({
        videoId: `video_${i}`,
        title: `TikTok Video ${i + 1} - @${userData.username}`,
        thumbnail: userData.avatar || '/placeholder.jpg',
        duration: 15 + (i * 5),
        createTime: Date.now() - (i * 86400000),
        stats: {
          views: 1000 + (i * 100),
          likes: 50 + (i * 10),
          comments: 5 + (i * 2),
          shares: 2 + i,
          saves: 1 + i
        },
        music: {
          title: 'Original Sound',
          author: userData.nickname
        }
      }));
      
      setTiktokVideos(videos);
      
    } catch (error) {
      console.error('Error loading content:', error);
      setTiktokError('Failed to load content. Please check the URL and try again.');
    } finally {
      setTiktokLoading(false);
    }
  }, [sourceInput, selectedSourceType]);

  // Auto-fetch videos when source input changes
  React.useEffect(() => {
    if (sourceInput && selectedSourceType) {
      loadVideos();
    }
  }, [sourceInput, selectedSourceType, loadVideos]);

  // Auto-fetch videos when channel is loaded (same as bulk onboarding)
  React.useEffect(() => {
    if (selectedSourceType === 'youtube' && youtubeChannel && youtubeVideos.length === 0) {
      const channelId = youtubeChannel.channelId;
      const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
      const API_KEY = process.env.NEXT_PUBLIC_API_KEY;
      
      fetch(`${BACKEND_URL}/api/public/youtube/channel-videos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`,
        },
        body: JSON.stringify({
          channel_url: `https://youtube.com/channel/${channelId}`,
          max_videos: 100,
          job_id: `rag_${Date.now()}`,
          user_id: 'rag_user',
        }),
      })
        .then(res => res.json())
        .then(data => setYoutubeVideos(data.videos || []))
        .catch(err => console.error('Error fetching YouTube videos:', err));
    }
  }, [youtubeChannel, selectedSourceType, youtubeVideos.length]);

  React.useEffect(() => {
    if (selectedSourceType === 'twitch' && twitchChannel && twitchVideos.length === 0) {
      const username = twitchChannel.username;
      const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
      const API_KEY = process.env.NEXT_PUBLIC_API_KEY;
      
      fetch(`${BACKEND_URL}/api/public/twitch/channel-videos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`,
        },
        body: JSON.stringify({
          channel_name: username,
          max_videos: 100,
          job_id: `rag_${Date.now()}`,
          user_id: 'rag_user',
        }),
      })
        .then(res => res.json())
        .then(data => setTwitchVideos(data.videos || []))
        .catch(err => console.error('Error fetching Twitch videos:', err));
    }
  }, [twitchChannel, selectedSourceType, twitchVideos.length]);

  React.useEffect(() => {
    if (selectedSourceType === 'tiktok' && tiktokUser && tiktokVideos.length === 0) {
      const username = tiktokUser.username;
      const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
      const API_KEY = process.env.NEXT_PUBLIC_API_KEY;
      
      fetch(`${BACKEND_URL}/api/public/tiktok/creator-videos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`,
        },
        body: JSON.stringify({
          creator_username: username,
          max_videos: 100,
          job_id: `rag_${Date.now()}`,
          user_id: 'rag_user',
        }),
      })
        .then(res => res.json())
        .then(data => setTiktokVideos(data.videos || []))
        .catch(err => console.error('Error fetching TikTok videos:', err));
    }
  }, [tiktokUser, selectedSourceType, tiktokVideos.length]);

  // Use the unified video loading approach

  const handleVideoSelection = (videoIds: string[], videos: any[]) => {
    setSelectedVideos(videoIds);
    onVideosSelected(videos);
  };

  return (
    <Card className="transform -rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            SELECT CONTENT
          </h1>
          <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
            Choose the content to process for RAG creation. Selected videos will be transcribed and embedded.
          </p>
        </div>

        <VideoSelectionGrid
          videos={selectedSourceType === 'youtube' ? youtubeVideos : selectedSourceType === 'tiktok' ? tiktokVideos : selectedSourceType === 'twitch' ? twitchVideos : []}
          channel={selectedSourceType === 'youtube' ? youtubeChannel : selectedSourceType === 'tiktok' ? tiktokUser : selectedSourceType === 'twitch' ? twitchChannel : null}
          platform={selectedSourceType as 'youtube' | 'tiktok' | 'twitch'}
          loading={selectedSourceType === 'youtube' ? youtubeLoading : selectedSourceType === 'tiktok' ? tiktokLoading : selectedSourceType === 'twitch' ? twitchLoading : false}
          error={selectedSourceType === 'youtube' ? youtubeError : selectedSourceType === 'tiktok' ? tiktokError : selectedSourceType === 'twitch' ? twitchError : null}
          selectedVideos={selectedVideos}
          onVideoSelectionChange={handleVideoSelection}
        />

        <div className="flex gap-4 mt-8">
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
            onClick={onBack}
          >
            <UilArrowLeft className="mr-2 h-6 w-6" />
            BACK
          </Button>
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-cyan-400 hover:bg-cyan-400/90 text-black"
            onClick={onContinue}
            disabled={!canProceed}
          >
            CONTINUE
            <UilArrowRight className="ml-2 h-6 w-6" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/app/onboarding/rag/components/Step4ProcessingProgress.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { 
  UilBrain, 
  UilDownloadAlt, 
  UilFileSearchAlt, 
  UilChartGrowth, 
  UilDatabase,
  UilInfoCircle
} from '@tooni/iconscout-unicons-react';
import { Button } from '@/components/ui/button';

interface Step4ProcessingProgressProps {
  progress: number;
  currentStatus: string;
}

export function Step4ProcessingProgress({ progress, currentStatus }: Step4ProcessingProgressProps) {
  const processingSteps = [
    {
      icon: UilDownloadAlt,
      title: 'FETCHING',
      completed: progress >= 20,
      description: 'Downloading content'
    },
    {
      icon: UilFileSearchAlt,
      title: 'EXTRACTING',
      completed: progress >= 40,
      description: 'Parsing text content'
    },
    {
      icon: UilChartGrowth,
      title: 'EMBEDDING',
      completed: progress >= 60,
      description: 'Generating vectors'
    },
    {
      icon: UilDatabase,
      title: 'INDEXING',
      completed: progress >= 80,
      description: 'Building search index'
    }
  ];

  return (
    <Card className="transform -rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            BUILDING KNOWLEDGE BASE
          </h1>
        </div>
        <div className="space-y-6">
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-24 h-24 bg-cyan-400 border-4 border-black rounded-full mb-4">
              <UilBrain className="h-12 w-12 text-black animate-pulse" />
            </div>
            <p className="text-xl font-bold text-gray-700">{currentStatus}</p>
          </div>

          <div className="space-y-2">
            <div className="flex justify-between text-sm font-bold">
              <span>PROGRESS</span>
              <span>{progress}%</span>
            </div>
            <Progress value={progress} className="h-6 border-2 border-black" />
          </div>

          <div className="grid grid-cols-2 gap-4">
            {processingSteps.map((step, index) => (
              <Card 
                key={step.title}
                className={`border-2 border-black ${step.completed ? 'bg-green-100' : 'bg-cyan-50'}`}
              >
                <CardContent className="p-4 text-center">
                  <step.icon className="h-8 w-8 mx-auto mb-2 text-gray-700" />
                  <p className="text-sm font-bold uppercase">{step.title}</p>
                  <p className="text-2xl font-black">
                    {step.completed ? '✓' : '...'}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>

          <p className="text-center text-sm text-gray-600">
            This may take a few minutes. Please don&apos;t close this window.
          </p>
          
          {/* Help Hint */}
          <div className="mt-8">
            <Card className="bg-yellow-200 border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="flex items-start gap-3">
                  <Button 
                    size="sm" 
                    variant="neutral" 
                    className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                  >
                    <UilInfoCircle className="h-4 w-4" />
                  </Button>
                  <div>
                    <p className="text-sm font-bold uppercase">PROCESSING YOUR KNOWLEDGE</p>
                    <p className="text-sm text-gray-700 mt-1">
                      We&apos;re extracting content, generating embeddings, and building your searchable index. This typically takes 2-5 minutes.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/app/onboarding/rag/components/Step5Completion.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  UilCheckCircle, 
  UilDocumentInfo, 
  UilArrowRight,
  UilDatabase
} from '@tooni/iconscout-unicons-react';
import { WorkflowStats } from '../types';

interface Step5CompletionProps {
  workflowStats: WorkflowStats | null;
  workflowId: string | null;
  onViewKnowledgeBase: () => void;
  onGoToDashboard: () => void;
}

export function Step5Completion({ 
  workflowStats, 
  workflowId, 
  onViewKnowledgeBase, 
  onGoToDashboard 
}: Step5CompletionProps) {
  return (
    <Card className="transform rotate-1 relative overflow-hidden">
      <CardHeader className="bg-green-100">
        <div className="flex justify-center mb-4">
          <div className="w-20 h-20 bg-green-500 border-4 border-black rounded-full flex items-center justify-center">
            <UilCheckCircle className="h-12 w-12 text-white" />
          </div>
        </div>
        <CardTitle className="text-4xl md:text-5xl font-black uppercase text-center text-black">
          KNOWLEDGE BASE READY!
        </CardTitle>
      </CardHeader>
      <CardContent className="p-8">
        <div className="space-y-6">
          <p className="text-xl text-center text-gray-700">
            Your RAG system has been successfully set up. Your agents can now access this knowledge!
          </p>

          {workflowStats && (
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              <Card className="bg-cyan-50 border-2 border-black transform -rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Content Processed</p>
                  <p className="text-2xl font-black">{workflowStats.totalContent}</p>
                </CardContent>
              </Card>
              <Card className="bg-cyan-50 border-2 border-black transform rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Characters Indexed</p>
                  <p className="text-2xl font-black">{workflowStats.charactersIndexed}</p>
                </CardContent>
              </Card>
              <Card className="bg-cyan-50 border-2 border-black transform -rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Embeddings</p>
                  <p className="text-2xl font-black">{workflowStats.embeddingsGenerated}</p>
                </CardContent>
              </Card>
              <Card className="bg-cyan-50 border-2 border-black transform rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Index Size</p>
                  <p className="text-2xl font-black">{workflowStats.indexSize}</p>
                </CardContent>
              </Card>
              <Card className="bg-cyan-50 border-2 border-black transform -rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Processing Time</p>
                  <p className="text-2xl font-black">{workflowStats.processingTime}</p>
                </CardContent>
              </Card>
              <Card className="bg-green-50 border-2 border-black transform rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Status</p>
                  <p className="text-2xl font-black text-green-600">ACTIVE</p>
                </CardContent>
              </Card>
            </div>
          )}

          <div className="flex flex-col sm:flex-row gap-4">
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-cyan-400 hover:bg-cyan-400/90 text-black"
              onClick={onViewKnowledgeBase}
            >
              VIEW KNOWLEDGE BASE
              <UilDocumentInfo className="ml-2 h-6 w-6" />
            </Button>
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-[rgb(0,82,255)] hover:bg-blue-600 text-white"
              onClick={onGoToDashboard}
            >
              GO TO DASHBOARD
              <UilArrowRight className="ml-2 h-6 w-6" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/app/onboarding/rag/components/VideoSelectionGrid.tsx
================================================
'use client';

import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { UilSpinner, UilCheckSquare, UilTrash, UilClock, UilEye, UilThumbsUp, UilMusic, UilPlay, UilCheckCircle, UilInfoCircle, UilExclamationTriangle } from '@tooni/iconscout-unicons-react';


interface VideoSelectionGridProps {
  videos: any[];
  channel: any;
  platform: 'youtube' | 'tiktok' | 'twitch';
  loading: boolean;
  error: string | null;
  selectedVideos: string[];
  onVideoSelectionChange: (videoIds: string[], videos: any[]) => void;
}

export function VideoSelectionGrid({
  videos,
  channel,
  platform,
  loading,
  error,
  selectedVideos,
  onVideoSelectionChange
}: VideoSelectionGridProps) {

  const [hoveredVideoId, setHoveredVideoId] = React.useState<string | null>(null);
  const [mutedVideos, setMutedVideos] = React.useState<Set<string>>(new Set());

  const [videoLoadingStates, setVideoLoadingStates] = React.useState<Map<string, 'idle' | 'preparing' | 'loading' | 'canplay' | 'loaded'>>(new Map());
  const hoverTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  const videoLoadTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  const hoverStartTime = React.useRef<number | null>(null);

  // Preload videos using download endpoint
  React.useEffect(() => {
    if (platform === 'tiktok' && videos.length > 0) {
      const videosToPreload = videos.slice(0, 5);
      
      console.log('[VideoSelectionGrid] Starting prefetch for first', videosToPreload.length, 'videos');
      
      // Use a small delay to not interfere with initial page load
      const prefetchTimeout = setTimeout(() => {
        videosToPreload.forEach((video, index) => {
          const videoId = video.id || video.video_id || video.videoId;
          
          // Preload video using hidden video element
          const downloadUrl = `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/tiktok/download/${videoId}?user_id=preview-user`;
          
          // Create hidden video element for preloading
          const preloadVideo = document.createElement('video');
          preloadVideo.src = downloadUrl;
          preloadVideo.preload = 'auto';
          preloadVideo.style.display = 'none';
          document.body.appendChild(preloadVideo);
          
          // Remove after loading
          preloadVideo.addEventListener('loadeddata', () => {
            document.body.removeChild(preloadVideo);
            console.log('[VideoSelectionGrid] Prefetched video', index + 1, ':', videoId);
          });
          
          preloadVideo.load();
        });
      }, 500); // Reduced delay for faster loading
      
      return () => clearTimeout(prefetchTimeout);
    }
  }, [platform, videos]);

  const updateVideoLoadingState = React.useCallback((videoId: string, state: 'idle' | 'preparing' | 'loading' | 'canplay' | 'loaded') => {
    setVideoLoadingStates(prev => new Map(prev).set(videoId, state));
  }, []);

  const getVideoLoadingState = React.useCallback((videoId: string) => {
    return videoLoadingStates.get(videoId) || 'idle';
  }, [videoLoadingStates]);

  const handleVideoHover = React.useCallback((videoId: string, videoUrl?: string) => {
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
    }
    if (videoLoadTimeoutRef.current) {
      clearTimeout(videoLoadTimeoutRef.current);
    }

    setHoveredVideoId(videoId);
    hoverStartTime.current = Date.now();
    updateVideoLoadingState(videoId, 'preparing');

    if (platform === 'tiktok') {
      // Use direct download endpoint instead of preview system
      hoverTimeoutRef.current = setTimeout(() => {
        updateVideoLoadingState(videoId, 'loading');
        
        // The video will load from the download endpoint
        setTimeout(() => {
          updateVideoLoadingState(videoId, 'loaded');
        }, 300);
      }, 150); // Reduced delay for faster response
    }
  }, [platform, updateVideoLoadingState]);

  const handleVideoLeave = React.useCallback(() => {
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
      hoverTimeoutRef.current = null;
    }
    if (videoLoadTimeoutRef.current) {
      clearTimeout(videoLoadTimeoutRef.current);
      videoLoadTimeoutRef.current = null;
    }

    setHoveredVideoId(null);
    hoverStartTime.current = null;

    if (hoveredVideoId) {
      updateVideoLoadingState(hoveredVideoId, 'idle');
    }
  }, [hoveredVideoId, platform, updateVideoLoadingState]);

  const handleAudioToggle = React.useCallback((videoId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    setMutedVideos(prev => {
      const newSet = new Set(prev);
      if (newSet.has(videoId)) {
        newSet.delete(videoId);
      } else {
        newSet.add(videoId);
      }
      return newSet;
    });
  }, []);

  const toggleVideoSelection = (videoId: string, video: any) => {
    const newSelected = selectedVideos.includes(videoId)
      ? selectedVideos.filter(id => id !== videoId)
      : [...selectedVideos, videoId];

    const selectedVideoObjects = videos.filter(v => newSelected.includes(v.id || v.video_id || v.videoId));
    onVideoSelectionChange(newSelected, selectedVideoObjects);
  };

  const selectAllVideos = () => {
    const allVideoIds = videos.map(v => v.id || v.video_id || v.videoId);
    onVideoSelectionChange(allVideoIds, videos);
  };

  const clearAllVideos = () => {
    onVideoSelectionChange([], []);
  };

  const formatViews = (views: string | number) => {
    if (!views || views === 'Unknown') return 'Unknown';
    if (typeof views === 'number') {
      if (views >= 1000000) return `${(views / 1000000).toFixed(1)}M`;
      if (views >= 1000) return `${(views / 1000).toFixed(1)}K`;
      return views.toString();
    }
    return views;
  };

  const formatDuration = (duration: string | number) => {
    if (!duration || duration === 'Unknown' || duration === 'N/A') return 'N/A';
    
    if (typeof duration === 'string' && duration.startsWith('PT')) {
      const match = duration.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
      if (match) {
        const hours = match[1] ? parseInt(match[1]) : 0;
        const minutes = match[2] ? parseInt(match[2]) : 0;
        const seconds = match[3] ? parseInt(match[3]) : 0;
        
        if (hours > 0) {
          return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
      }
    }
    
    return duration.toString();
  };

  if (loading) {
    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-bold uppercase">Loading Videos...</h3>
          <Badge variant="secondary" className="bg-cyan-100 border-2 border-black">Fetching content</Badge>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="bg-gray-200 animate-pulse w-full h-32 mb-3 rounded border border-gray-200" />
                <div className="bg-gray-300 animate-pulse h-4 w-3/4 mb-2" />
                <div className="bg-gray-300 animate-pulse h-3 w-1/2" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <Card className="border-2 border-red-400 bg-red-50">
        <CardContent className="p-6">
          <div className="flex items-center gap-3">
            <UilExclamationTriangle className="h-5 w-5 text-red-600" />
            <div>
              <h3 className="font-bold text-red-800">Error Loading Videos</h3>
              <p className="text-sm text-red-600">{error}</p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (videos.length === 0) {
    return (
      <Card className="bg-gray-50">
        <CardContent className="p-8 text-center">
          <div className="flex items-center gap-3 justify-center mb-4">
            <UilInfoCircle className="h-12 w-12 text-gray-400" />
          </div>
          <h3 className="text-xl font-bold mb-2">NO VIDEOS FOUND</h3>
          <p className="text-gray-600">
            No videos were found for this channel. Please check the channel name and try again.
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {/* Channel Info */}
      {channel && (
        <Card className="bg-orange-50 mb-6">
          <CardContent className="p-4">
            <div className="flex items-start gap-4">
              {channel.avatar && (
                <Image
                  src={channel.avatar || channel.profileImage}
                  alt={channel.username || channel.title}
                  width={64}
                  height={64}
                  className="w-16 h-16 rounded-full border-2 border-black"
                />
              )}
              <div className="flex-1">
                <h3 className="text-xl font-black uppercase">
                  {channel.username || channel.channelName || channel.displayName || channel.title || channel.display_name}
                </h3>
                {channel.follower_count !== undefined && (
                  <p className="text-sm text-gray-700">{formatViews(channel.follower_count)} followers</p>
                )}
                {channel.followerCount !== undefined && (
                  <p className="text-sm text-gray-700">{formatViews(channel.followerCount)} followers</p>
                )}
                {channel.subscriberCount !== undefined && (
                  <p className="text-sm text-gray-700">{formatViews(parseInt(channel.subscriberCount))} subscribers</p>
                )}
                {platform === 'tiktok' && channel.heartCount && (
                  <p className="text-sm text-gray-700">{formatViews(channel.heartCount)} hearts</p>
                )}
                {platform === 'tiktok' && channel.videoCount && (
                  <p className="text-sm text-gray-700">{formatViews(channel.videoCount)} videos</p>
                )}
                {channel.description && (
                  <p className="text-sm text-gray-600 mt-2 line-clamp-2">{channel.description}</p>
                )}
                {platform === 'tiktok' && channel.signature && (
                  <p className="text-sm text-gray-600 mt-2 italic">&quot;{channel.signature}&quot;</p>
                )}
              </div>
              <Badge variant="default" className="bg-orange-500 text-white">
                {videos.length} videos found
              </Badge>
            </div>
          </CardContent>
        </Card>
      )}

      {/* TikTok Preview Tip */}
      {platform === 'tiktok' && (
        <Card className="bg-blue-50 mb-6">
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <UilInfoCircle className="h-5 w-5 text-blue-600" />
              <div>
                <p className="font-bold text-sm">Video Preview Tip</p>
                <p className="text-xs text-gray-700">Hover and hold on a video for 0.5 seconds to see a preview</p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Selection Controls */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-2">
          <Button
            variant="neutral"
            size="sm"
            onClick={selectAllVideos}
            className="h-10"
          >
            <UilCheckSquare className="h-4 w-4 mr-2" />
            SELECT ALL
          </Button>
          <Button
            variant="neutral"
            size="sm"
            onClick={clearAllVideos}
            className="h-10"
          >
            <UilTrash className="h-4 w-4 mr-2" />
            CLEAR ALL
          </Button>
        </div>
        <div className="text-sm text-gray-600">
          {selectedVideos.length} / {videos.length} selected
        </div>
      </div>

      {/* Video Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-h-96 overflow-y-auto">
        {videos.map((video, index) => {
  const videoId = video.id || video.video_id || video.videoId;
  const isSelected = selectedVideos.includes(videoId);
  const isHovered = hoveredVideoId === videoId;
          return (
            <div
              key={videoId || `video-${index}`}
              className="relative cursor-pointer transform transition-all hover:scale-105"
              onClick={() => toggleVideoSelection(videoId, video)}
            >
              <Card className={`border-4 border-border overflow-hidden shadow-shadow hover:translate-x-1 hover:translate-y-1 hover:shadow-none transition-all ${
                isSelected ? 'ring-4 ring-orange-500 bg-orange-50' : 'bg-background'
              }`}>
                <div
                  className="relative"
                  onMouseEnter={() => handleVideoHover(videoId, video.url || video.videoUrl)}
                  onMouseLeave={handleVideoLeave}
                >
                  {/* Base thumbnail */}
                <Image
                  src={video.thumbnail || video.dynamicCover || video.thumbnails?.[0]?.url || '/placeholder.jpg'}
                  alt={video.title || video.description}
                  width={platform === 'tiktok' ? 180 : 320}
                  height={platform === 'tiktok' ? 320 : 180}
                  className={`w-full object-cover ${
                    platform === 'tiktok' ? 'aspect-[9/16]' : 'aspect-[16:9]'
                  }`}
                  onError={(e) => {
                    (e.target as HTMLImageElement).src = '/placeholder.jpg';
                  }}
                />
                   {/* Video overlay - shown when video is available */}
                   {isHovered && video.playAddr && (
                     <div className="absolute inset-0 z-10">
                <video
                  src={`/api/public/tiktok/download/${videoId}`}
                  className="w-full h-full object-cover"
                  muted
                  loop
                  playsInline
                  preload="metadata"
                />
                     </div>
                   )}
                   {/* Optimized loading overlay */}
                   {isHovered && getVideoLoadingState(videoId) === 'loading' && (
                     <div className="absolute inset-0 bg-black bg-opacity-40 flex flex-col items-center justify-center transition-opacity duration-300">
                       <div className="flex flex-col items-center">
                         <UilSpinner className="h-8 w-8 text-white animate-spin mb-2" />
                         <p className="text-white text-xs font-semibold">Loading...</p>
                       </div>
                     </div>
                   )}
                  {/* Error overlay */}
                  {isHovered && preview?.error && (
                    <div className="absolute inset-0 bg-red-900 bg-opacity-50 flex flex-col items-center justify-center p-2">
                      <p className="text-white text-xs font-bold text-center">Preview unavailable</p>
                      <p className="text-white text-xs mt-1">Try hovering again</p>
                    </div>
                  )}

                  <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-10 transition-opacity" />
                  {isSelected && (
                    <div className="absolute top-2 right-2 w-6 h-6 bg-orange-500 border-2 border-black flex items-center justify-center">
                      <UilCheckCircle className="h-4 w-4 text-white" />
                    </div>
                  )}
                </div>

                <CardContent className="p-3">
                  <p className="font-bold text-sm line-clamp-2">
                    {video.title || video.description || 'Untitled'}
                  </p>
                  <div className="flex items-center gap-2 mt-2 text-xs text-gray-600">
                    <div className="flex items-center gap-1">
                      <UilClock className="h-3 w-3" />
                      <span>{formatDuration(video.duration || 0)}</span>
                    </div>
                    {video.viewCount !== undefined && (
                      <>
                        <span>·</span>
                        <div className="flex items-center gap-1">
                          <UilEye className="h-3 w-3" />
                          <span>{formatViews(video.viewCount)}</span>
                        </div>
                      </>
                    )}
                    {video.play_count !== undefined && (
                      <>
                        <span>·</span>
                        <div className="flex items-center gap-1">
                          <UilEye className="h-3 w-3" />
                          <span>{formatViews(video.play_count)}</span>
                        </div>
                      </>
                    )}
                    {video.likes !== undefined && (
                      <>
                        <span>·</span>
                        <div className="flex items-center gap-1">
                          <UilThumbsUp className="h-3 w-3" />
                          <span>{formatViews(video.likes)}</span>
                        </div>
                      </>
                    )}
                  </div>
                  {platform === 'tiktok' && (video.musicTitle || video.musicAuthor) && (
                    <div className="mt-2 text-xs text-gray-500 flex items-center gap-1">
                      <UilMusic className="h-3 w-3" />
                      {video.musicTitle && video.musicAuthor ? `${video.musicTitle} - ${video.musicAuthor}` : 
                       video.musicTitle || video.musicAuthor}
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          );
        })}
      </div>
    </div>
  );
}


================================================
FILE: src/app/onboarding/rtc/page.tsx
================================================
'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useConvex, useAction, useMutation, useQuery } from 'convex/react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilPhone, UilPhoneVolume, UilWifi, UilMicrophone, UilCheckCircle, UilRocket, UilInfoCircle, UilChartGrowth } from '@tooni/iconscout-unicons-react';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import InfoSection from '@/components/custom/info-section';
import { RTCPhoneDialer } from '@/components/custom/rtc/rtc-phone-dialer-realistic';
import { api } from '@convex/_generated/api';
import { toast } from 'sonner';

// --- Main RTC App with Convex Integration ---
export default function RTCOnboardingPage() {
  const convex = useConvex();
  const [currentStep, setCurrentStep] = useState(1);
  const [callId, setCallId] = useState<string>('');
  const [isConnected, setIsConnected] = useState(false);
  const [transcript, setTranscript] = useState<string>('');
  const [sentiment, setSentiment] = useState<string>('neutral');
  const [speakers, setSpeakers] = useState<string[]>([]);
  const [callDuration, setCallDuration] = useState(0);
  const [isRecording, setIsRecording] = useState(false);
  const [isDialing, setIsDialing] = useState(false);
  
  // Real Convex actions
  const startCall = useAction(api.telephonyActions.startCall);
  const processAudioChunk = useAction(api.telephonyActions.processAudioChunk);
  const endCall = useAction(api.telephonyActions.endCall);
  const getRealtimeTranscript = api.queries.telephony.getRealtimeTranscript;
  
  // WebRTC refs
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const websocketRef = useRef<WebSocket | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // Generate unique call ID
  const generateCallId = () => `call_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

  // Handle dialer call completion
  const handleDialerCallComplete = (duration: number, voiceType: string, wasRecorded: boolean) => {
    setCallDuration(duration);
    setIsRecording(wasRecorded);
    setCurrentStep(4); // Move to call complete
    
    toast.success('Call Completed', {
      description: `Duration: ${Math.floor(duration / 60)}:${(duration % 60).toString().padStart(2, '0')}`,
    });
  };

  // Format duration
  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <>
      <div 
        className="min-h-screen bg-orange-500 relative pb-8"
        style={{ 
          fontFamily: 'Noyh-Bold, sans-serif',
          backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
          backgroundSize: '60px 60px'
        }}
      >
        <div className="flex flex-col items-center justify-center min-h-screen px-4 pt-8 pb-8">
          <div className="w-full max-w-6xl space-y-8">
            {/* Header Title Card */}
            <Card className="transform rotate-1 relative overflow-hidden">
              <CardHeader className="relative">
                {/* Decorative elements */}
                <div className="absolute top-2 left-4 w-8 h-8 bg-orange-600 border-2 border-black flex items-center justify-center">
                  <UilWifi className="h-4 w-4 text-white" />
                </div>
                <div className="absolute top-2 right-4 w-8 h-8 bg-orange-500 border-2 border-black flex items-center justify-center">
                  <UilPhoneVolume className="h-4 w-4 text-white" />
                </div>
                <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                  <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
                </div>
                <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
                
                {/* Central icon button */}
                <div className="flex justify-center mb-4">
                  <Button variant="header" className="w-20 h-20 bg-orange-600 hover:bg-orange-700 p-0">
                    {currentStep === 1 && <UilWifi className="h-12 w-12 text-white" />}
                    {currentStep === 2 && <UilPhone className="h-12 w-12 text-white" />}
                    {currentStep === 3 && <UilMicrophone className="h-12 w-12 text-white" />}
                    {currentStep === 4 && <UilCheckCircle className="h-12 w-12 text-white" />}
                  </Button>
                </div>
                
                {/* Dynamic title */}
                <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                  {currentStep === 1 && 'CONVEX TELEPHONY DEMO'}
                  {currentStep === 2 && 'PHONE DIALER'}
                  {currentStep === 3 && 'LIVE CALL'}
                  {currentStep === 4 && 'CALL COMPLETE'}
                </CardTitle>
                
                {/* Subtitle */}
                <p className="text-lg md:text-xl text-gray-700 mt-4 text-center">
                  {currentStep === 1 && 'Experience real-time ASR with Convex'}
                  {currentStep === 2 && 'Enter a phone number to call'}
                  {currentStep === 3 && `Duration: ${formatDuration(callDuration)}`}
                  {currentStep === 4 && 'Your telephony journey begins here'}
                </p>
                
                {/* Animated decorative bars */}
                <div className="flex justify-center items-center mt-3 gap-2">
                  <div className="w-3 h-3 bg-orange-600 animate-pulse"></div>
                  <div className="w-2 h-6 bg-black"></div>
                  <div className="w-4 h-4 bg-orange-500 animate-pulse delay-150"></div>
                  <div className="w-2 h-8 bg-black"></div>
                  <div className="w-3 h-3 bg-orange-600 animate-pulse delay-300"></div>
                </div>
              </CardHeader>
            </Card>

            {/* Step-based Content */}
            {currentStep === 1 && (
              <Card className="bg-white border-2 border-black">
                <CardContent className="text-center space-y-6 py-8">
                  <h2 className="text-3xl font-bold text-black">Real-Time Telephony with Convex</h2>
                  <p className="text-lg text-gray-700 max-w-2xl mx-auto">
                    Experience live audio processing with automatic speech recognition, sentiment analysis, and speaker diarization using Convex actions and real-timers.
                  </p>
                  <Button 
                    onClick={() => setCurrentStep(2)}
                    className="bg-orange-600 hover:bg-orange-700 text-white px-8 py-4 text-lg font-bold"
                  >
                    Open Phone Dialer
                  </Button>
                </CardContent>
              </Card>
            )}

            {currentStep === 2 && (
              <Card className="bg-white border-2 border-black">
                <CardContent className="py-8">
                  <h2 className="text-2xl font-bold text-black text-center mb-6">Phone Dialer</h2>
                  <RTCPhoneDialer 
                    onCallComplete={handleDialerCallComplete}
                  />
                </CardContent>
              </Card>
            )}

            {currentStep === 3 && (
              <div className="space-y-6">
                {/* Live Call Interface */}
                <Card className="bg-white border-2 border-black">
                  <CardHeader>
                    <CardTitle className="text-2xl font-bold text-black">Live Call - {formatDuration(callDuration)}</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {/* Real-time Transcript */}
                    <div className="bg-gray-100 p-4 rounded-lg">
                      <h3 className="font-bold text-black mb-2">Live Transcript:</h3>
                      <div className="text-sm text-gray-700 h-20 overflow-y-auto">
                        {transcript || 'Listening...'}
                      </div>
                    </div>

                    {/* Sentiment Analysis */}
                    <div className="flex items-center space-x-4">
                      <span className="font-bold text-black">Sentiment:</span>
                      <span className={`px-2 py-1 rounded text-sm font-medium ${
                        sentiment === 'positive' ? 'bg-green-200 text-green-800' :
                        sentiment === 'negative' ? 'bg-red-200 text-red-800' :
                        'bg-yellow-200 text-yellow-800'
                      }`}>
                        {sentiment}
                      </span>
                    </div>

                    {/* Speaker Detection */}
                    <div>
                      <span className="font-bold text-black">Speakers:</span>
                      <div className="flex flex-wrap gap-2 mt-1">
                        {speakers.map((speaker, index) => (
                          <span key={index} className="px-2 py-1 bg-blue-200 text-blue-800 rounded text-sm">
                            {speaker}
                          </span>
                        ))}
                      </div>
                    </div>

                    {/* Call Controls */}
                    <div className="flex justify-center space-x-4">
                      <Button 
                        onClick={() => setCurrentStep(4)}
                        className="bg-red-600 hover:bg-red-700 text-white px-6 py-2"
                      >
                        End Call
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                {/* Audio Visualization */}
                <Card className="bg-white border-2 border-black">
                  <CardContent className="text-center py-8">
                    <div className="text-6xl mb-4">
                      {isRecording ? '🎤' : '📞'}
                    </div>
                    <p className="text-lg text-gray-700">
                      {isRecording ? 'Recording audio...' : 'Click Start to begin'}
                    </p>
                  </CardContent>
                </Card>
              </div>
            )}

            {currentStep === 4 && (
              <div className="text-center space-y-6">
                <h2 className="text-3xl font-bold text-black">Call Complete!</h2>
                <div className="bg-white p-6 rounded-lg border-2 border-black">
                  <h3 className="text-xl font-bold mb-4">Call Summary</h3>
                  <div className="space-y-2 text-left">
                    <p><strong>Duration:</strong> {formatDuration(callDuration)}</p>
                    <p><strong>Final Sentiment:</strong> {sentiment}</p>
                    <p><strong>Speakers Detected:</strong> {speakers.length}</p>
                    <p><strong>Transcript Length:</strong> {transcript.length} characters</p>
                  </div>
                </div>
                <Button 
                  onClick={() => {
                    setCurrentStep(1);
                    setCallId('');
                    setTranscript('');
                    setSentiment('neutral');
                    setSpeakers([]);
                    setCallDuration(0);
                  }}
                  className="bg-orange-600 hover:bg-orange-700 text-white px-8 py-4 text-lg font-bold"
                >
                  Start New Call
                </Button>
              </div>
            )}

            {/* Real-time Features */}
            {currentStep === 3 && (
              <Card className="bg-white border-2 border-black">
                <CardContent className="pt-6">
                  <h3 className="text-xl font-bold text-black mb-4">Real-time Features</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div className="flex items-center gap-2">
                      <UilWifi className="h-4 w-4 text-orange-600" />
                      <span>WebRTC Connection</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <UilMicrophone className="h-4 w-4 text-orange-600" />
                      <span>Live Audio Processing</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <UilPhone className="h-4 w-4 text-orange-600" />
                      <span>ASR Transcription</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <UilChartGrowth className="h-4 w-4 text-orange-600" />
                      <span>Sentiment Analysis</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Footer */}
            <div className="mt-8">
              <OnboardingFooter />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}



================================================
FILE: src/app/onboarding/transcribe/DragDropUpload.tsx
================================================
'use client';

import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { UilUpload, UilFileAlt, UilCheckCircle, UilExclamationTriangle } from '@tooni/iconscout-unicons-react';
import { Card, CardContent } from '@/components/ui/card';
import { cn } from '@/lib/utils';

interface DragDropUploadProps {
  onFileSelect: (file: File) => void;
  acceptedFormats?: string[];
  maxFileSize?: number;
  disabled?: boolean;
}

export function DragDropUpload({ 
  onFileSelect, 
  acceptedFormats = ['audio/mp3', 'audio/wav', 'audio/ogg', 'audio/m4a', 'audio/flac'],
  maxFileSize = 25 * 1024 * 1024, // 25MB
  disabled = false
}: DragDropUploadProps) {
  const [isDragging, setIsDragging] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const onDrop = useCallback((acceptedFiles: File[], rejectedFiles: any[]) => {
    setError(null);
    
    if (rejectedFiles.length > 0) {
      const rejection = rejectedFiles[0];
      if (rejection.errors[0]?.code === 'file-too-large') {
        setError('File is too large. Maximum size is 25MB.');
      } else if (rejection.errors[0]?.code === 'file-invalid-type') {
        setError('Invalid file type. Please upload an audio file.');
      } else {
        setError('File upload failed. Please try again.');
      }
      return;
    }
    
    if (acceptedFiles.length > 0) {
      const file = acceptedFiles[0];
      onFileSelect(file);
    }
  }, [onFileSelect]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: acceptedFormats.reduce((acc, format) => ({ ...acc, [format]: [] }), {}),
    maxSize: maxFileSize,
    multiple: false,
    disabled: disabled
  });

  return (
    <div className="w-full">
      <div
        {...getRootProps()}
        className={cn(
          'relative border-4 border-dashed rounded-lg p-8 text-center transition-all duration-200 cursor-pointer',
          isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-gray-400',
          disabled && 'opacity-50 cursor-not-allowed',
          error && 'border-red-500 bg-red-50'
        )}
      >
        <input {...getInputProps()} />
        
        <div className="flex flex-col items-center space-y-4">
          <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
            <UilUpload className="w-8 h-8 text-blue-600" />
          </div>
          
          <div>
            <p className="text-lg font-semibold text-gray-900">
              {isDragActive ? 'Drop your audio file here' : 'Drag & drop your audio file'}
            </p>
            <p className="text-sm text-gray-600 mt-2">
              or <span className="text-blue-600 font-medium">click to browse</span>
            </p>
          </div>
          
          <div className="text-xs text-gray-500 space-y-1">
            <p>Supported: MP3, WAV, OGG, M4A, FLAC</p>
            <p>Max size: 25MB</p>
          </div>
        </div>
      </div>
      
      {error && (
        <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-md flex items-center space-x-2">
          <UilExclamationTriangle className="w-5 h-5 text-red-500" />
          <p className="text-sm text-red-700">{error}</p>
        </div>
      )}
    </div>
  );
}


================================================
FILE: src/app/onboarding/transcribe/page.tsx
================================================
'use client';

import * as React from 'react';
import { toast } from 'sonner';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import CopyTranscriptModal from '@/components/onboarding/modals/CopyTranscriptModal';
import BulkDownloadModal from '@/components/onboarding/modals/BulkDownloadModal';
import ChatWithDialaModal from '@/components/onboarding/modals/ChatWithDialaModal';
import VoiceCloneModal from '@/components/onboarding/modals/VoiceCloneModal';
import TranscriptSkeleton from '@/components/custom/transcript-skeleton';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { UilFileAlt, UilUpload, UilArrowRight, UilCopy, UilCloudDownload, UilCommentDots, UilMicrophone, UilMusicNote, UilVolumeUp, UilPlay, UilPause, UilUser } from '@tooni/iconscout-unicons-react';
import { DragDropUpload } from './DragDropUpload';
import { useQuery, useMutation, useAction } from 'convex/react';
import { api } from '@convex/_generated/api';
import { v4 as uuidv4 } from 'uuid';
import { useApiErrorHandler } from '@/hooks/useApiErrorHandler';
import { Star15 } from '@/components/ui/star';
import { SpeakerTimeline } from '@/components/transcripts/SpeakerTimeline';

export default function TranscriptsOnboarding() {
  const { handleError } = useApiErrorHandler();
  const [currentStep, setCurrentStep] = React.useState(1);
  const [selectedFile, setSelectedFile] = React.useState<File | null>(null);
  const [audioUrl, setAudioUrl] = React.useState<string>('');
  const [transcript, setTranscript] = React.useState('');
  const [isLoading, setIsLoading] = React.useState(false);
  const [showCopyModal, setShowCopyModal] = React.useState(false);
  const [showBulkModal, setShowBulkModal] = React.useState(false);
  const [showChatModal, setShowChatModal] = React.useState(false);
  const [showVoiceCloneModal, setShowVoiceCloneModal] = React.useState(false);
  const [uploadProgress, setUploadProgress] = React.useState(0);
  const [audioMetadata, setAudioMetadata] = React.useState<{
    fileName?: string;
    fileSize?: string;
    duration?: number;
  }>({});
  const [selectedAction, setSelectedAction] = React.useState<string | null>(null);
  const [activeTab, setActiveTab] = React.useState<'transcript' | 'speakers'>('transcript');

  const handleFileSelect = (file: File) => {
    // Validate file type
    const validTypes = ['audio/mp3', 'audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/m4a', 'audio/flac'];
    if (!validTypes.includes(file.type) && !file.name.match(/\.(mp3|wav|ogg|m4a|flac)$/i)) {
      toast.error('Please upload a valid audio file (MP3, WAV, OGG, M4A, or FLAC)');
      return;
    }

    setSelectedFile(file);
    setAudioUrl(URL.createObjectURL(file));
    setAudioMetadata({
      fileName: file.name,
      fileSize: `${(file.size / 1024 / 1024).toFixed(2)} MB`,
    });
  };

  // Generate a unique job ID for this transcription
  const [jobId, setJobId] = React.useState<string>('');
  
  // Query to check transcription status
  const transcriptionJob = useQuery(
    api.queries.audioTranscripts.getJob,
    jobId ? { jobId } : "skip"
  );
  
  // Query to check rate limit
  const rateLimit = useQuery(
    api.queries.audioTranscripts.canCreateTranscription,
    { userId: 'user123' } // TODO: Replace with actual user ID from auth
  );
  
  // Poll for job updates
  React.useEffect(() => {
    if (!transcriptionJob || !jobId) return;
    
    if (transcriptionJob.status === 'completed' && transcriptionJob.transcript) {
      setTranscript(transcriptionJob.transcript);
      setIsLoading(false);
      setUploadProgress(100);
    } else if (transcriptionJob.status === 'failed') {
      setTranscript('Error transcribing audio: ' + (transcriptionJob.error || 'Unknown error'));
      setIsLoading(false);
      setUploadProgress(0);
    } else if (transcriptionJob.status === 'processing') {
      // Update progress based on time elapsed
      const elapsed = Date.now() - new Date(transcriptionJob.createdAt).getTime();
      const estimatedProgress = Math.min(90, (elapsed / 30000) * 90); // Estimate 30s for processing
      setUploadProgress(estimatedProgress);
    }
  }, [transcriptionJob, jobId]);
  
  const processTranscription = async () => {
    if (!selectedFile) return;
    
    // Check rate limit
    if (rateLimit && !rateLimit.canCreate) {
      toast.error(`Rate limit exceeded. You have ${rateLimit.remaining} transcriptions remaining. Resets at ${new Date(rateLimit.resetAt).toLocaleTimeString()}`);
      return;
    }

    setIsLoading(true);
    setTranscript('');
    setUploadProgress(0);
    
    const newJobId = uuidv4();
    setJobId(newJobId);

    try {
      // Create FormData for file upload
      const formData = new FormData();
      formData.append('file', selectedFile);
      formData.append('job_id', newJobId);
      formData.append('user_id', 'user123');
      formData.append('enable_realtime_sentiment', 'true');
      formData.append('enable_emotion2vec', 'true');
      formData.append('use_enhanced_asr', 'true'); // TODO: Replace with actual user ID
      
      // Upload directly to backend
      const backendUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
      const response = await fetch(`${backendUrl}/api/public/audio/transcribe`, {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        const error = new Error(`Upload failed: ${response.statusText}`);
        (error as any).status = response.status;
        throw error;
      }
      
      const result = await response.json();
      console.log('Transcription started:', result);
      
      // Start progress animation
      const progressInterval = setInterval(() => {
        setUploadProgress(prev => {
          if (prev >= 85) {
            clearInterval(progressInterval);
            return 85;
          }
          return prev + 5;
        });
      }, 500);
      
      // Job will be updated via webhook, and we'll poll for status
      
    } catch (error) {
      console.error('Error transcribing audio:', error);
      handleError(error);
      setTranscript('Error transcribing audio. Please try again.');
      setIsLoading(false);
      setJobId('');
    }
  };

  const handleContinue = () => {
    if (selectedFile) {
      setCurrentStep(2);
      processTranscription();
    }
  };

  const handleCopyTranscript = () => {
    if (transcript) {
      navigator.clipboard.writeText(transcript);
      setShowCopyModal(true);
    }
  };

  const createTranscriptChunks = (text: string) => {
    const words = text.split(' ');
    const chunks = [];
    for (let i = 0; i < words.length; i += 3) {
      chunks.push(words.slice(i, i + 3).join(' '));
    }
    return chunks;
  };

  // Custom loading component without "Fetching transcription" text
  const CustomLoadingSkeleton = () => (
    <div className="rounded-lg bg-yellow-100 p-6">
      <div className="space-y-3">
        {[...Array(8)].map((_, index) => (
          <div key={index} className="space-y-2">
            <div className="flex gap-2">
              <div className="h-6 bg-yellow-200 rounded animate-pulse" style={{ width: `${Math.random() * 20 + 15}%` }} />
              <div className="h-6 bg-yellow-200 rounded animate-pulse" style={{ width: `${Math.random() * 25 + 20}%` }} />
              <div className="h-6 bg-yellow-200 rounded animate-pulse" style={{ width: `${Math.random() * 30 + 25}%` }} />
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  return (
    <>
      <div className="min-h-screen bg-blue-500 relative pb-8" style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}>

      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <div className="w-full max-w-4xl space-y-8">
          {/* Persistent Title Card */}
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-blue-600 border-2 border-black flex items-center justify-center">
                <UilMicrophone className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-blue-500 border-2 border-black flex items-center justify-center">
                <UilMusicNote className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-blue-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-blue-600 hover:bg-blue-700 border-4 border-black p-0">
                  <UilMusicNote className="h-12 w-12 text-white" />
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                AUDIO TRANSCRIBER
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                TRANSCRIBE ANY AUDIO FILE
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-blue-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-blue-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-blue-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>
          
          {currentStep === 1 ? (
            <div className="w-full max-w-2xl mx-auto space-y-8">
              {/* Feature Cards Container */}
              <Card className="transform rotate-1 relative overflow-hidden">
                <CardContent className="p-6">
                  {/* Description */}
                  <div className="mb-6 bg-white transform rotate-0.5 p-6 text-center border-4 border-black rounded-[3px] shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="text-2xl font-black text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                      Transcribe Audio Files for <span className="text-blue-500">FREE</span>
                    </h3>
                    <div className="space-y-2">
                      <div className="flex items-center justify-center gap-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <p className="text-base font-semibold text-black">Support for MP3, WAV, OGG, M4A, FLAC</p>
                      </div>
                      <div className="flex items-center justify-center gap-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <p className="text-base font-semibold text-black">High Accuracy Transcription</p>
                      </div>
                      <div className="flex items-center justify-center gap-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <p className="text-base font-semibold text-black">Easy Copy and Export</p>
                      </div>
                    </div>
                  </div>

                  {/* File Upload */}
                  <Card className="bg-blue-50 border-4 border-black mb-6">
                    <CardContent className="p-8">
                      <div className="p-4">
                        <DragDropUpload 
                          onFileSelect={handleFileSelect}
                          disabled={isLoading}
                        />
                      </div>
                      {selectedFile && (
                        <div className="mt-4 p-4 bg-green-50 border-2 border-black rounded">
                          <p className="font-bold">✓ {selectedFile.name} uploaded</p>
                          <p className="text-sm text-gray-600">Size: {audioMetadata.fileSize}</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-3">
                    <Card className="bg-yellow-100 md:transform md:-rotate-1 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <CardContent className="p-6 md:p-4">
                        <div className="flex flex-col items-center justify-center text-center gap-3 md:gap-2">
                          <Button 
                            size="icon"
                            variant="default"
                            className="w-12 h-12 md:w-10 md:h-10 bg-yellow-400 hover:bg-yellow-500 border-4 border-black"
                          >
                            <UilCopy className="h-6 w-6 md:h-5 md:w-5 text-black" />
                          </Button>
                          <span className="font-bold text-base md:text-sm text-black">ONE-CLICK COPY</span>
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-yellow-100 md:transform md:rotate-1 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <CardContent className="p-6 md:p-4">
                        <div className="flex flex-col items-center justify-center text-center gap-3 md:gap-2">
                          <Button 
                            size="icon"
                            variant="default"
                            className="w-12 h-12 md:w-10 md:h-10 bg-yellow-400 hover:bg-yellow-500 border-4 border-black"
                          >
                            <UilFileAlt className="h-6 w-6 md:h-5 md:w-5 text-black" />
                          </Button>
                          <span className="font-bold text-base md:text-sm text-black">MULTIPLE FORMATS</span>
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-yellow-100 md:transform md:-rotate-1 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <CardContent className="p-6 md:p-4">
                        <div className="flex flex-col items-center justify-center text-center gap-3 md:gap-2">
                          <Button 
                            size="icon"
                            variant="default"
                            className="w-12 h-12 md:w-10 md:h-10 bg-yellow-400 hover:bg-yellow-500 border-4 border-black"
                          >
                            <UilVolumeUp className="h-6 w-6 md:h-5 md:w-5 text-black" />
                          </Button>
                          <span className="font-bold text-base md:text-sm text-black">HIGH QUALITY</span>
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  <Button
                    className="w-full mt-6 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={handleContinue}
                    disabled={!selectedFile}
                  >
                    <span className="flex items-center justify-center">
                      CONTINUE
                      <UilArrowRight className="ml-2 h-6 w-6" />
                    </span>
                  </Button>
                </CardContent>
              </Card>

              {/* Info Section - Audio Transcription */}
              <div className="mt-12 max-w-4xl mx-auto px-4 sm:px-6 space-y-6">
                <Card className="transform -rotate-1 relative overflow-hidden bg-yellow-50">
                  <CardContent className="relative pt-6">
                    <div className="flex items-start gap-4">
                      <Button
                        size="icon"
                        variant="default"
                        className="w-12 h-12 flex-shrink-0 bg-blue-500 hover:bg-blue-600 text-white border-black"
                      >
                        <UilMicrophone className="h-6 w-6 text-white" />
                      </Button>
                      <div className="flex-1">
                        <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          PROFESSIONAL AUDIO TRANSCRIPTION
                        </h3>
                        <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                          Our advanced AI transcription service converts your audio files into accurate text with industry-leading precision. Perfect for meetings, interviews, podcasts, and any audio content that needs to be documented.
                        </p>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="flex items-center gap-3">
                            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                            <span className="text-black font-medium">99%+ accuracy rate</span>
                          </div>
                          <div className="flex items-center gap-3">
                            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                            <span className="text-black font-medium">Speaker identification</span>
                          </div>
                          <div className="flex items-center gap-3">
                            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                            <span className="text-black font-medium">Timestamp generation</span>
                          </div>
                          <div className="flex items-center gap-3">
                            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                            <span className="text-black font-medium">Multiple export formats</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Fast Processing Card */}
                <Card className="transform rotate-1 relative overflow-hidden bg-yellow-50">
                  <CardContent className="pt-6">
                    <div className="flex items-start gap-4">
                      <Button
                        size="icon"
                        variant="default"
                        className="w-12 h-12 flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90 text-black"
                      >
                        <UilCloudDownload className="h-6 w-6 text-black" />
                      </Button>
                      <div className="flex-1">
                        <h3 className="text-xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          LIGHTNING FAST PROCESSING
                        </h3>
                        <p className="text-gray-700 text-lg leading-relaxed">
                          Transcribe hours of audio in <span className="font-black text-blue-500">just minutes</span>. 
                          Our cloud-based infrastructure ensures fast, reliable transcription regardless of file size. 
                          Perfect for urgent deadlines or batch processing multiple files.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          ) : (
            <div className="w-full space-y-6">
              {/* Progress Card */}
              <Card className="transform rotate-1">
                <CardContent className="p-6">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <h3 className="text-xl font-black uppercase">TRANSCRIPTION PROGRESS</h3>
                      <Badge className="bg-blue-500 text-white border-2 border-black">
                        {isLoading ? 'PROCESSING' : 'COMPLETED'}
                      </Badge>
                    </div>
                    {isLoading && (
                      <div className="space-y-2">
                        <div className="w-full bg-gray-200 rounded-full h-4 border-2 border-black">
                          <div 
                            className="bg-blue-500 h-full rounded-full transition-all duration-300"
                            style={{ width: `${uploadProgress}%` }}
                          />
                        </div>
                        <p className="text-sm font-semibold text-center">{uploadProgress}%</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>

              {/* Main Content Card */}
              <div className="flex items-start gap-4">
                <Card className="flex-1 bg-yellow-50">
                  <CardContent className="p-8 space-y-6">
                    {/* Audio File Info */}
                    {selectedFile && (
                      <div className="space-y-3">
                        <Badge className="bg-blue-500 text-white border-2 border-black px-3 py-1 text-sm font-bold">
                          AUDIO FILE
                        </Badge>
                        {isLoading ? (
                          <div className="h-9 bg-gray-200 animate-pulse rounded-md"></div>
                        ) : (
                          <h1 className="text-3xl font-black uppercase text-black">
                            {audioMetadata.fileName?.toUpperCase() || 'AUDIO FILE'}
                          </h1>
                        )}
                        
                        {/* File Info */}
                        <div className="flex items-center gap-4 flex-wrap">
                          <div className="flex items-center gap-2">
                            <span className="text-lg font-bold text-gray-700">SIZE:</span>
                            <span className="text-lg font-black text-black">
                              {audioMetadata.fileSize || 'N/A'}
                            </span>
                          </div>
                          <span className="text-gray-400">·</span>
                          <div className="flex items-center gap-2">
                            <span className="text-lg font-bold text-gray-700">FORMAT:</span>
                            <span className="text-lg font-black text-black">
                              {selectedFile?.name.split('.').pop()?.toUpperCase() || 'N/A'}
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    
                    {/* Audio Player */}
                    <div className="rounded-lg bg-gray-100 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] overflow-hidden p-6">
                      {audioUrl ? (
                        <audio 
                          controls 
                          className="w-full"
                          src={audioUrl}
                        >
                          Your browser does not support the audio element.
                        </audio>
                      ) : (
                        <div className="h-12 bg-gray-200 animate-pulse rounded-md flex items-center justify-center">
                          <span className="text-gray-500">No audio file selected</span>
                        </div>
                      )}
                    </div>

                    {/* Action Buttons - 2x2 Grid */}
                    <div className="grid grid-cols-2 gap-4">
                      {/* Copy Transcript */}
                      <Card 
                        className="transform -rotate-1 hover:rotate-0 transition-transform cursor-pointer relative"
                        onClick={() => {
                          setSelectedAction('copy');
                          handleCopyTranscript();
                        }}
                      >
                        {selectedAction === 'copy' && (
                          <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                            <div className="relative">
                              <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                              </div>
                              <div className="absolute inset-0 flex items-center justify-center">
                                <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                  SELECTED
                                </span>
                              </div>
                            </div>
                          </div>
                        )}
                        <Button 
                          variant="ghost"
                          className="w-full h-full p-6 flex flex-col items-center justify-center gap-3 hover:bg-gray-50"
                          onClick={(e) => {
                            e.stopPropagation();
                            setSelectedAction('copy');
                            handleCopyTranscript();
                          }}
                        >
                          <div className="w-16 h-16 bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] flex items-center justify-center">
                            <UilCopy className="h-8 w-8 text-black" />
                          </div>
                          <span className="text-lg font-black text-black uppercase">COPY TRANSCRIPT</span>
                        </Button>
                      </Card>

                      {/* Voice Clone */}
                      <Card 
                        className="transform rotate-1 hover:rotate-0 transition-transform bg-purple-50 cursor-pointer relative"
                        onClick={() => {
                          setSelectedAction('voice-clone');
                          setShowVoiceCloneModal(true);
                        }}
                      >
                        {selectedAction === 'voice-clone' && (
                          <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                            <div className="relative">
                              <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                              </div>
                              <div className="absolute inset-0 flex items-center justify-center">
                                <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                  SELECTED
                                </span>
                              </div>
                            </div>
                          </div>
                        )}
                        <Button 
                          variant="ghost"
                          className="w-full h-full p-6 flex flex-col items-center justify-center gap-3 hover:bg-purple-100"
                          onClick={(e) => {
                            e.stopPropagation();
                            setSelectedAction('voice-clone');
                            setShowVoiceCloneModal(true);
                          }}
                        >
                          <div className="w-16 h-16 bg-purple-500 border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] flex items-center justify-center">
                            <UilUser className="h-8 w-8 text-white" />
                          </div>
                          <span className="text-lg font-black text-black uppercase">VOICE CLONE</span>
                        </Button>
                      </Card>

                      {/* Bulk Process */}
                      <Card 
                        className="transform rotate-1 hover:rotate-0 transition-transform bg-yellow-50 cursor-pointer relative"
                        onClick={() => {
                          setSelectedAction('bulk-process');
                          setShowBulkModal(true);
                        }}
                      >
                        {selectedAction === 'bulk-process' && (
                          <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                            <div className="relative">
                              <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                              </div>
                              <div className="absolute inset-0 flex items-center justify-center">
                                <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                  SELECTED
                                </span>
                              </div>
                            </div>
                          </div>
                        )}
                        <Button 
                          variant="ghost"
                          className="w-full h-full p-6 flex flex-col items-center justify-center gap-3 hover:bg-yellow-100"
                          onClick={(e) => {
                            e.stopPropagation();
                            setSelectedAction('bulk-process');
                            setShowBulkModal(true);
                          }}
                        >
                          <div className="w-16 h-16 bg-yellow-400 border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] flex items-center justify-center">
                            <UilCloudDownload className="h-8 w-8 text-black" />
                          </div>
                          <span className="text-lg font-black text-black uppercase">BULK PROCESS</span>
                        </Button>
                      </Card>

                      {/* Chat with Diala */}
                      <Card 
                        className="transform -rotate-1 hover:rotate-0 transition-transform bg-blue-50 cursor-pointer relative"
                        onClick={() => {
                          setSelectedAction('chat');
                          setShowChatModal(true);
                        }}
                      >
                        {selectedAction === 'chat' && (
                          <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                            <div className="relative">
                              <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                                <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                              </div>
                              <div className="absolute inset-0 flex items-center justify-center">
                                <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                  SELECTED
                                </span>
                              </div>
                            </div>
                          </div>
                        )}
                        <Button 
                          variant="ghost"
                          className="w-full h-full p-6 flex flex-col items-center justify-center gap-3 hover:bg-blue-100"
                          onClick={(e) => {
                            e.stopPropagation();
                            setSelectedAction('chat');
                            setShowChatModal(true);
                          }}
                        >
                          <div className="w-16 h-16 bg-[rgb(0,82,255)] border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] flex items-center justify-center">
                            <UilCommentDots className="h-8 w-8 text-white" />
                          </div>
                          <span className="text-lg font-black text-black uppercase">CHAT WITH DIALA</span>
                        </Button>
                      </Card>
                    </div>

                    {/* Tab Navigation */}
                    <div className="flex gap-2 mb-4">
                      <button
                        onClick={() => setActiveTab('transcript')}
                        className={`px-4 py-2 font-bold border-2 border-black rounded ${
                          activeTab === 'transcript'
                            ? 'bg-blue-500 text-white'
                            : 'bg-white text-black hover:bg-gray-100'
                        }`}
                      >
                        FULL TRANSCRIPT
                      </button>
                      <button
                        onClick={() => setActiveTab('speakers')}
                        className={`px-4 py-2 font-bold border-2 border-black rounded ${
                          activeTab === 'speakers'
                            ? 'bg-blue-500 text-white'
                            : 'bg-white text-black hover:bg-gray-100'
                        }`}
                      >
                        SPEAKERS
                      </button>
                    </div>

                    {/* Tab Content */}
                    {isLoading ? (
                      <TranscriptSkeleton />
                    ) : (
                      <div className="rounded-lg bg-yellow-100 p-6">
                        {activeTab === 'transcript' ? (
                          <div className="text-xl font-black text-black">
                            {transcript ? (
                              createTranscriptChunks(transcript).map((chunk, index) => (
                                <React.Fragment key={index}>
                                  <span className="hover:bg-yellow-200 cursor-pointer transition-colors px-1 py-0.5 rounded">
                                    {chunk}
                                  </span>
                                  {index < createTranscriptChunks(transcript).length - 1 && ' '}
                                </React.Fragment>
                              ))
                            ) : (
                              <p className="text-center text-gray-500">Transcript will appear here</p>
                            )}
                          </div>
                        ) : (
                          <SpeakerTimeline
                            transcript={transcript}
                            speakers={transcriptionJob?.speakers || []}
                          />
                        )}
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Modals */}
      <CopyTranscriptModal 
        isOpen={showCopyModal} 
        onClose={() => setShowCopyModal(false)} 
      />
      <BulkDownloadModal 
        isOpen={showBulkModal} 
        onClose={() => setShowBulkModal(false)} 
      />
      <ChatWithDialaModal 
        isOpen={showChatModal} 
        onClose={() => setShowChatModal(false)} 
      />
      <VoiceCloneModal 
        isOpen={showVoiceCloneModal} 
        onClose={() => setShowVoiceCloneModal(false)} 
      />
      
      <div className="mt-8">
        <OnboardingFooter />
      </div>
    </div>
    </>
  );
}


================================================
FILE: src/app/onboarding/transcripts/page.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import CopyTranscriptModal from '@/components/onboarding/modals/CopyTranscriptModal';
import BulkDownloadModal from '@/components/onboarding/modals/BulkDownloadModal';
import ChatWithDialaModal from '@/components/onboarding/modals/ChatWithDialaModal';
import TranscriptSkeleton from '@/components/custom/transcript-skeleton';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';
import { useAction } from "convex/react";
import { api } from "@convex/_generated/api";
import { UilFileAlt, UilClipboardNotes, UilDocumentInfo, UilYoutube, UilDownloadAlt, UilArrowRight, UilTwitter, UilFacebookF, UilInstagram, UilLinkedin, UilShare, UilWhatsapp, UilThumbsUp, UilBell, UilCopy, UilCloudDownload, UilCommentDots, UilQuestionCircle, UilFileDownloadAlt, UilBrain, UilDatabase, UilAnalysis } from '@tooni/iconscout-unicons-react';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";

export default function TranscriptsOnboarding() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [youtubeUrl, setYoutubeUrl] = React.useState('');
  const [transcript, setTranscript] = React.useState('');
  const [isLoading, setIsLoading] = React.useState(false);
  const [showCopyModal, setShowCopyModal] = React.useState(false);
  const [showBulkModal, setShowBulkModal] = React.useState(false);
  const [showChatModal, setShowChatModal] = React.useState(false);
  const [jobId, setJobId] = React.useState<string | null>(null);
  const [videoMetadata, setVideoMetadata] = React.useState<{
    title?: string;
    author?: string;
    duration?: number;
  }>({});

  const fetchYoutubeTranscript = useAction(api.youtubeTranscriptActions.fetchYoutubeTranscript);
  const getJobStatus = useAction(api.youtubeTranscriptActions.getJobStatus);

  const fetchTranscript = async (url: string) => {
    setIsLoading(true);
    setTranscript('');
    
    try {
      // Start transcript fetch job
      const result = await fetchYoutubeTranscript({
        youtubeUrl: url,
        userId: "user123", // TODO: Get from auth context
      });
      
      console.log('Initial fetch result:', result);

      if (result.cached && result.transcript && result.transcript !== 'No subtitles available for this video') {
        // Immediately show cached transcript
        setTranscript(result.transcript);
        // Set metadata if available
        if (result.videoTitle || result.videoAuthor || result.title || result.author) {
          setVideoMetadata({
            title: result.videoTitle || result.title,
            author: result.videoAuthor || result.author,
            duration: result.videoDuration || result.duration,
          });
        }
        setIsLoading(false);
        return;
      }

      // Store job ID for polling
      setJobId(result.jobId);

      // Poll for job completion
      const pollInterval = setInterval(async () => {
        try {
          const status = await getJobStatus({ jobId: result.jobId });
          
          if (status.status === "completed" && status.transcript && status.transcript !== 'No subtitles available for this video') {
            setTranscript(status.transcript);
            // Set video metadata if available
            console.log('Job status response:', status);
            if (status.videoTitle || status.videoAuthor || status.title || status.author) {
              setVideoMetadata({
                title: status.videoTitle || status.title || 'Video Title',
                author: status.videoAuthor || status.author || 'Video Author',
                duration: status.videoDuration || status.duration,
              });
            }
            setIsLoading(false);
            clearInterval(pollInterval);
          } else if (status.status === "failed") {
            setTranscript(`Error: ${status.error || 'Failed to fetch transcript'}`);
            setIsLoading(false);
            clearInterval(pollInterval);
          }
        } catch (error) {
          console.error('Error polling job status:', error);
        }
      }, 2000); // Poll every 2 seconds

      // Stop polling after 60 seconds
      setTimeout(() => {
        clearInterval(pollInterval);
        if (isLoading) {
          setTranscript('Timeout: Taking too long to fetch transcript. Please try again.');
          setIsLoading(false);
        }
      }, 60000);

    } catch (error: any) {
      console.error('Error fetching transcript:', error);
      setTranscript(error.message || 'Error loading transcript. Please try again.');
      setIsLoading(false);
    }
  };

  const handleContinue = () => {
    if (youtubeUrl) {
      fetchTranscript(youtubeUrl);
      setCurrentStep(2);
    }
  };

  const handleCopyTranscript = () => {
    if (transcript) {
      navigator.clipboard.writeText(transcript);
      setShowCopyModal(true);
    }
  };

  const createTranscriptChunks = (text: string) => {
    const words = text.split(' ');
    const chunks = [];
    for (let i = 0; i < words.length; i += 3) {
      chunks.push(words.slice(i, i + 3).join(' '));
    }
    return chunks;
  };

  return (
    <>
      <div className="min-h-screen bg-red-500 relative pb-8" style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px), linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)`,
        backgroundSize: '60px 60px'
      }}>

      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <div className="w-full max-w-4xl space-y-8">
          {/* Persistent Title Card */}
          <Card className="transform rotate-1 relative overflow-hidden">
            <CardHeader className="relative">
              <div className="absolute top-2 left-4 w-8 h-8 bg-red-600 border-2 border-black flex items-center justify-center">
                <UilYoutube className="h-4 w-4 text-white" />
              </div>
              <div className="absolute top-2 right-4 w-8 h-8 bg-red-500 border-2 border-black flex items-center justify-center">
                <UilFileAlt className="h-4 w-4 text-white" />
              </div>
              <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
              </div>
              <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
              <div className="flex justify-center mb-4">
                <Button className="w-20 h-20 bg-red-600 hover:bg-red-700 border-4 border-black p-0">
                  <UilYoutube className="h-12 w-12 text-white" />
                </Button>
              </div>
              <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                YOUTUBE TO TRANSCRIPT
              </CardTitle>
              <p className="text-lg md:text-xl text-gray-700 mt-4 font-bold text-center">
                BULK DOWNLOAD TRANSCRIPTS
              </p>
              <div className="flex justify-center items-center mt-3 gap-2">
                <div className="w-3 h-3 bg-red-600 animate-pulse"></div>
                <div className="w-2 h-6 bg-black"></div>
                <div className="w-4 h-4 bg-red-500 animate-pulse delay-150"></div>
                <div className="w-2 h-8 bg-black"></div>
                <div className="w-3 h-3 bg-red-600 animate-pulse delay-300"></div>
              </div>
            </CardHeader>
          </Card>
          
          {currentStep === 1 ? (
            <div className="w-full max-w-2xl mx-auto space-y-8">
              {/* Feature Cards Container */}
              <Card className="transform rotate-1 relative overflow-hidden">
                <CardContent className="p-6">
                  {/* Description */}
                  <div className="mb-6 bg-white transform rotate-0.5 p-6 text-center border-4 border-black rounded-[3px] shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="text-2xl font-black text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                      Generate YouTube Transcript for <span className="text-red-500">FREE</span>
                    </h3>
                    <div className="space-y-2">
                      <div className="flex items-center justify-center gap-2">
                        <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                        <p className="text-base font-semibold text-black">Access all Transcript Languages</p>
                      </div>
                      <div className="flex items-center justify-center gap-2">
                        <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                        <p className="text-base font-semibold text-black">Translate to 125+ Languages</p>
                      </div>
                      <div className="flex items-center justify-center gap-2">
                        <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                        <p className="text-base font-semibold text-black">Easy Copy and Edit</p>
                      </div>
                    </div>
                  </div>

                  {/* URL Input */}
                  <div className="mb-6">
                    <label className="text-xl font-black uppercase mb-3 block">
                      PASTE YOUTUBE URL
                    </label>
                    <Input
                      type="text"
                      value={youtubeUrl}
                      onChange={(e) => setYoutubeUrl(e.target.value)}
                      placeholder="https://youtube.com/watch?v=..."
                      className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-3">
                    <Card className="bg-yellow-100 md:transform md:-rotate-1 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <CardContent className="p-6 md:p-4">
                        <div className="flex flex-col items-center justify-center text-center gap-3 md:gap-2">
                          <Button 
                            size="icon"
                            variant="default"
                            className="w-12 h-12 md:w-10 md:h-10 bg-yellow-400 hover:bg-yellow-500 border-4 border-black"
                          >
                            <UilCopy className="h-6 w-6 md:h-5 md:w-5 text-black" />
                          </Button>
                          <span className="font-bold text-base md:text-sm text-black">ONE-CLICK COPY</span>
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-yellow-100 md:transform md:rotate-1 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <CardContent className="p-6 md:p-4">
                        <div className="flex flex-col items-center justify-center text-center gap-3 md:gap-2">
                          <Button 
                            size="icon"
                            variant="default"
                            className="w-12 h-12 md:w-10 md:h-10 bg-yellow-400 hover:bg-yellow-500 border-4 border-black"
                          >
                            <UilFileAlt className="h-6 w-6 md:h-5 md:w-5 text-black" />
                          </Button>
                          <span className="font-bold text-base md:text-sm text-black">SUPPORTS TRANSLATION</span>
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-yellow-100 md:transform md:-rotate-1 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <CardContent className="p-6 md:p-4">
                        <div className="flex flex-col items-center justify-center text-center gap-3 md:gap-2">
                          <Button 
                            size="icon"
                            variant="default"
                            className="w-12 h-12 md:w-10 md:h-10 bg-yellow-400 hover:bg-yellow-500 border-4 border-black"
                          >
                            <UilCommentDots className="h-6 w-6 md:h-5 md:w-5 text-black" />
                          </Button>
                          <span className="font-bold text-base md:text-sm text-black">MULTIPLE LANGUAGES</span>
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  <Button
                    className="w-full mt-6 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={handleContinue}
                    disabled={!youtubeUrl}
                  >
                    <span className="flex items-center justify-center">
                      CONTINUE
                      <UilArrowRight className="ml-2 h-6 w-6" />
                    </span>
                  </Button>
                </CardContent>
              </Card>

              {/* Info Section - YouTube Transcript Training */}
              <div className="mt-12 max-w-4xl mx-auto px-4 sm:px-6 space-y-6">
                <Card className="transform -rotate-1 relative overflow-hidden bg-yellow-50">
                  <CardContent className="relative pt-6">
                    <div className="flex items-start gap-4">
                      <Button
                        size="icon"
                        variant="default"
                        className="w-12 h-12 flex-shrink-0 bg-red-500 hover:bg-red-600 text-white border-black"
                      >
                        <UilYoutube className="h-6 w-6 text-white" />
                      </Button>
                      <div className="flex-1">
                        <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          YOUTUBE TRANSCRIPT TRAINING DATA
                        </h3>
                        <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                          We leverage bulk YouTube downloads to create powerful training datasets for your voice agents. Transcripts from thousands of real conversations help our AI understand natural speech patterns, industry-specific terminology, and authentic dialogue flow.
                        </p>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="flex items-center gap-3">
                            <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                            <span className="text-black font-medium">Access to millions of real conversations</span>
                          </div>
                          <div className="flex items-center gap-3">
                            <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                            <span className="text-black font-medium">Industry-specific vocabulary training</span>
                          </div>
                          <div className="flex items-center gap-3">
                            <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                            <span className="text-black font-medium">Natural speech pattern recognition</span>
                          </div>
                          <div className="flex items-center gap-3">
                            <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                            <span className="text-black font-medium">Continuous model improvement</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Bulk Processing Power Card */}
                <Card className="transform rotate-1 relative overflow-hidden bg-yellow-50">
                  <CardContent className="pt-6">
                    <div className="flex items-start gap-4">
                      <Button
                        size="icon"
                        variant="default"
                        className="w-12 h-12 flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90 text-black"
                      >
                        <UilCloudDownload className="h-6 w-6 text-black" />
                      </Button>
                      <div className="flex-1">
                        <h3 className="text-xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          BULK PROCESSING POWER
                        </h3>
                        <p className="text-gray-700 text-lg leading-relaxed">
                          Our advanced infrastructure can process up to <span className="font-black text-red-500">10,000 YouTube videos per hour</span>, 
                          extracting transcripts and analyzing conversation patterns at scale. This massive processing capability ensures 
                          your voice agent is trained on the most comprehensive dataset possible, covering every scenario they might encounter.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          ) : (
            <div className="w-full space-y-6">
              {/* URL Input */}
              <Card className="transform rotate-1">
                <CardContent className="p-6">
                  <label className="text-xl font-black uppercase mb-3 block">
                    PASTE YOUTUBE URL
                  </label>
                  <Input
                    type="text"
                    value={youtubeUrl}
                    onChange={(e) => setYoutubeUrl(e.target.value)}
                    placeholder="https://youtube.com/watch?v=..."
                    className="h-14 text-lg font-semibold border-4 border-black rounded-[3px]"
                  />
                  <Button
                    className="w-full mt-4 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                    onClick={handleContinue}
                    disabled={!youtubeUrl}
                  >
                    <span className="flex items-center justify-center">
                      CONTINUE
                      <UilArrowRight className="ml-2 h-6 w-6" />
                    </span>
                  </Button>
                </CardContent>
              </Card>

              {/* Container with side buttons and card */}
              <div className="flex items-start gap-4">
                {/* Left side buttons */}
                <div className="flex flex-col gap-[10px]">
                  <Button variant="subheader" size="icon" className="bg-[#FF0000] hover:bg-[#CC0000]">
                    <UilYoutube className="h-5 w-5 text-white" />
                  </Button>
                  <Button variant="subheader" size="icon" className="bg-[#1DA1F2] hover:bg-[#1A8CD8]">
                    <UilTwitter className="h-5 w-5 text-white" />
                  </Button>
                  <Button variant="subheader" size="icon" className="bg-[#1877F2] hover:bg-[#166FE5]">
                    <UilFacebookF className="h-5 w-5 text-white" />
                  </Button>
                  <Button variant="subheader" size="icon" className="bg-[#E4405F] hover:bg-[#D62949]">
                    <UilInstagram className="h-5 w-5 text-white" />
                  </Button>
                  <Button variant="subheader" size="icon" className="bg-[#0A66C2] hover:bg-[#004182]">
                    <UilLinkedin className="h-5 w-5 text-white" />
                  </Button>
                  <Button variant="subheader" size="icon" className="bg-[#6366F1] hover:bg-[#4F46E5]">
                    <UilShare className="h-5 w-5 text-white" />
                  </Button>
                  <Button variant="subheader" size="icon" className="bg-[#25D366] hover:bg-[#1EBE57]">
                    <UilWhatsapp className="h-5 w-5 text-white" />
                  </Button>
                </div>

                {/* Rounded Div with Action Buttons */}
                <Card className="flex-1 bg-yellow-50">
                  <CardContent className="p-8 space-y-6">
                    {/* Video Title */}
                    {youtubeUrl && (
                      <div className="space-y-3">
                        <Badge className="bg-yellow-400 text-black border-2 border-black px-3 py-1 text-sm font-bold">
                          TRANSCRIPT
                        </Badge>
                        {isLoading ? (
                          <div className="h-9 bg-gray-200 animate-pulse rounded-md"></div>
                        ) : (
                          <h1 className="text-3xl font-black uppercase text-black">
                            {videoMetadata.title ? 
                              videoMetadata.title.toUpperCase() : 
                              'VIDEO TITLE'}
                          </h1>
                        )}
                        
                        {/* Author and Actions */}
                        <div className="flex items-center gap-2 flex-wrap">
                          <span className="text-lg font-bold text-gray-700">AUTHOR:</span>
                          {isLoading ? (
                            <div className="h-7 w-48 bg-gray-200 animate-pulse rounded-md"></div>
                          ) : (
                            <a 
                              href={videoMetadata.author ? `https://www.youtube.com/@${videoMetadata.author.replace(/\s+/g, '')}` : '#'}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-lg font-black text-black hover:underline"
                            >
                              {videoMetadata.author || 'VIDEO AUTHOR'}
                            </a>
                          )}
                          <span className="text-gray-400">·</span>
                          
                          {/* Like Button */}
                          <a
                            href={youtubeUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            <Button 
                              variant="default" 
                              size="sm"
                              className="h-8 px-3 bg-red-500 hover:bg-red-600 text-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex items-center gap-1"
                            >
                              <UilThumbsUp className="h-4 w-4" />
                              <span className="font-bold">LIKE</span>
                            </Button>
                          </a>
                          
                          {/* Subscribe Button */}
                          <a
                            href={videoMetadata.author ? `https://www.youtube.com/@${videoMetadata.author.replace(/\s+/g, '')}?sub_confirmation=1` : '#'}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            <Button 
                              variant="default" 
                              size="sm"
                              className="h-8 px-3 bg-yellow-400 hover:bg-yellow-500 text-black border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex items-center gap-1"
                            >
                              <UilBell className="h-4 w-4" />
                              <span className="font-bold">SUBSCRIBE</span>
                            </Button>
                          </a>
                        </div>
                      </div>
                    )}
                    
                    {/* Video div with skeleton */}
                    <div className="rounded-lg bg-black border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] overflow-hidden">
                      <div className="relative w-full" style={{ paddingBottom: '56.25%' }}>
                        {isLoading ? (
                          <div className="absolute top-0 left-0 w-full h-full bg-gray-200 animate-pulse flex items-center justify-center">
                            <div className="text-gray-400">
                              <svg className="w-16 h-16" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                                <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" />
                              </svg>
                            </div>
                          </div>
                        ) : youtubeUrl ? (
                          <iframe
                            src={`https://www.youtube.com/embed/${youtubeUrl.split('v=')[1]?.split('&')[0] || ''}`}
                            title="YouTube video player"
                            frameBorder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                            allowFullScreen
                            className="absolute top-0 left-0 w-full h-full"
                          ></iframe>
                        ) : null}
                      </div>
                    </div>

                    {/* Action Buttons */}
                    <div className="space-y-3">
                      <Button 
                        variant="header" 
                        size="header"
                        className="w-full h-16 text-xl font-black bg-white hover:bg-gray-100 text-black border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-none flex items-center justify-center gap-2"
                        onClick={handleCopyTranscript}
                      >
                        <UilCopy className="h-6 w-6" />
                        COPY TRANSCRIPT
                      </Button>
                      <Button 
                        variant="header" 
                        size="header"
                        className="w-full h-16 text-xl font-black bg-yellow-400 hover:bg-yellow-400/90 text-black flex items-center justify-center gap-2"
                        onClick={() => setShowBulkModal(true)}
                      >
                        <UilCloudDownload className="h-6 w-6" />
                        WANT TO BULK DOWNLOAD?
                      </Button>
                      <Button 
                        variant="header" 
                        size="header"
                        className="w-full h-16 text-xl font-black bg-[rgb(0,82,255)] hover:bg-blue-600 flex items-center justify-center gap-2"
                        onClick={() => setShowChatModal(true)}
                      >
                        <UilCommentDots className="h-6 w-6" />
                        CHAT WITH IN DIALA
                      </Button>
                    </div>

                    {/* Transcript Div */}
                    {isLoading ? (
                      <TranscriptSkeleton />
                    ) : (
                      <div className="rounded-lg bg-yellow-100 p-6">
                        <div className="text-xl font-black text-black">
                          {transcript ? (
                            createTranscriptChunks(transcript).map((chunk, index) => (
                              <React.Fragment key={index}>
                                <span className="hover:bg-yellow-200 cursor-pointer transition-colors px-1 py-0.5 rounded">
                                  {chunk}
                                </span>
                                {index < createTranscriptChunks(transcript).length - 1 && ' '}
                              </React.Fragment>
                            ))
                          ) : (
                            <p className="text-center text-gray-500">Transcript will appear here</p>
                          )}
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>
          )}
        </div>
        
        <div className="mt-8">
          <OnboardingFooter />
        </div>
      </div>
    </div>
    </>
  );
}


================================================
FILE: src/app/onboarding/voice/page.tsx
================================================
import App from '@/components/custom/app';
import { OnboardingFooter } from '@/components/custom/onboarding-footer';

export default function VoiceOnboarding() {
  return (
    <div className="min-h-screen flex flex-col relative bg-[rgb(0,82,255)]" style={{ 
      backgroundImage: `
        linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px),
        linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)
      `,
      backgroundSize: '60px 60px'
    }}>
      <div className="flex-grow flex items-center justify-center p-4 relative z-10">
        <div className="w-full max-w-7xl">
          <App />
        </div>
      </div>
      <div className="relative z-10">
        <OnboardingFooter />
      </div>
    </div>
  );
}


================================================
FILE: src/components/providers.tsx
================================================
'use client';

import { ConvexProvider, ConvexReactClient } from 'convex/react';
import { ReactNode } from 'react';

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export function Providers({ children }: { children: ReactNode }) {
  return <ConvexProvider client={convex}>{children}</ConvexProvider>;
}


================================================
FILE: src/components/automation/CustomNode.tsx
================================================
"use client"

import React, { memo } from 'react'
import { Handle, Position, NodeProps } from '@xyflow/react'
import { Card } from '@/components/ui/card'
import { 
  Webhook, Globe, Code, Phone, Zap, Database, Mail, 
  Settings2, FileText, GitBranch, Calculator
} from 'lucide-react'

interface CustomNodeData {
  label: string
  type: string
  icon?: string
  parameters?: any
  color?: string
}

// Icon mapping
const iconMap: Record<string, any> = {
  webhook: Webhook,
  httpRequest: Globe,
  code: Code,
  dialaMakeCall: Phone,
  database: Database,
  email: Mail,
  set: Settings2,
  default: Zap,
}

const CustomNode = memo(({ data, selected }: NodeProps<CustomNodeData>) => {
  const Icon = iconMap[data.type] || iconMap[data.icon || ''] || iconMap.default
  const nodeColor = data.color || getNodeColor(data.type)
  const isExecuting = data.executing
  const isExecuted = data.executed

  return (
    <Card
      className={`
        min-w-[180px] border-4 p-0 bg-white transition-all
        ${selected ? 'shadow-[6px_6px_0_rgba(0,82,255,1)] border-blue-600' : 'shadow-[4px_4px_0_rgba(0,0,0,1)]'}
        ${isExecuting ? 'animate-pulse border-yellow-500 shadow-[6px_6px_0_rgba(250,204,21,1)]' : ''}
        ${isExecuted ? 'border-green-500 shadow-[6px_6px_0_rgba(34,197,94,1)]' : 'border-black'}
        hover:shadow-[6px_6px_0_rgba(0,0,0,1)] hover:translate-x-[-1px] hover:translate-y-[-1px]
      `}
    >
      <Handle
        type="target"
        position={Position.Top}
        className="w-3 h-3 bg-white border-3 border-black shadow-[1px_1px_0_rgba(0,0,0,1)]"
      />
      
      <div className="border-b-4 border-black p-3 flex items-center gap-3" style={{ backgroundColor: nodeColor }}>
        <div className="w-10 h-10 bg-white border-3 border-black flex items-center justify-center shadow-[2px_2px_0_rgba(0,0,0,1)]">
          <Icon className="w-5 h-5" />
        </div>
        <div className="flex-1">
          <div className="font-bold text-sm uppercase">{data.label}</div>
          <div className="text-xs opacity-75">{data.type}</div>
        </div>
      </div>
      <div className="p-3 bg-white">
        <div className="text-xs text-gray-600">
          {isExecuting && <span className="text-yellow-600 font-bold">Executing...</span>}
          {isExecuted && <span className="text-green-600 font-bold">✓ Completed</span>}
          {!isExecuting && !isExecuted && (
            data.parameters ? `${Object.keys(data.parameters).length} parameters` : 'Not configured'
          )}
        </div>
      </div>

      <Handle
        type="source"
        position={Position.Bottom}
        className="w-3 h-3 bg-white border-3 border-black shadow-[1px_1px_0_rgba(0,0,0,1)]"
      />
    </Card>
  )
})

CustomNode.displayName = 'CustomNode'

function getNodeColor(type: string): string {
  const colors: Record<string, string> = {
    webhook: '#fde047',      // yellow-300
    httpRequest: '#60a5fa',  // blue-400
    code: '#c084fc',         // purple-400
    dialaMakeCall: '#f87171', // red-400
    trigger: '#fde047',      // yellow-300
    action: '#60a5fa',       // blue-400
    logic: '#c084fc',        // purple-400
    output: '#4ade80',       // green-400
  }
  return colors[type] || '#e5e5e5'
}

export default CustomNode


================================================
FILE: src/components/automation/ExecutionHistory.tsx
================================================
"use client"

import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { 
  Clock, CheckCircle, XCircle, AlertCircle, 
  Loader2, ChevronRight, RefreshCw, Filter,
  Download, Trash2, Eye, EyeOff
} from 'lucide-react'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { formatDistanceToNow } from 'date-fns'

interface ExecutionItem {
  id: string
  workflowId: string
  workflowName: string
  status: 'success' | 'error' | 'running' | 'waiting'
  startedAt: string
  finishedAt?: string
  mode: 'manual' | 'trigger' | 'webhook' | 'schedule'
  data?: any
  error?: string
  retryOf?: string
  retrySuccessId?: string
}

interface ExecutionHistoryProps {
  workflowId?: string
  onSelectExecution?: (execution: ExecutionItem) => void
}

// Mock data for development
const mockExecutions: ExecutionItem[] = [
  {
    id: 'exec-1',
    workflowId: 'wf-1',
    workflowName: 'Welcome Call Automation',
    status: 'success',
    startedAt: new Date(Date.now() - 1000 * 60 * 5).toISOString(),
    finishedAt: new Date(Date.now() - 1000 * 60 * 4).toISOString(),
    mode: 'manual',
    data: { callsPlaced: 3, successfulCalls: 3 }
  },
  {
    id: 'exec-2',
    workflowId: 'wf-1',
    workflowName: 'Welcome Call Automation',
    status: 'error',
    startedAt: new Date(Date.now() - 1000 * 60 * 30).toISOString(),
    finishedAt: new Date(Date.now() - 1000 * 60 * 29).toISOString(),
    mode: 'trigger',
    error: 'Failed to connect to phone service'
  },
  {
    id: 'exec-3',
    workflowId: 'wf-2',
    workflowName: 'Lead Qualification',
    status: 'running',
    startedAt: new Date(Date.now() - 1000 * 60 * 2).toISOString(),
    mode: 'webhook'
  },
  {
    id: 'exec-4',
    workflowId: 'wf-2',
    workflowName: 'Lead Qualification',
    status: 'success',
    startedAt: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),
    finishedAt: new Date(Date.now() - 1000 * 60 * 60 * 2 + 1000 * 30).toISOString(),
    mode: 'schedule',
    data: { leadsProcessed: 15, qualified: 8 }
  }
]

export default function ExecutionHistory({
  workflowId,
  onSelectExecution
}: ExecutionHistoryProps) {
  const [executions, setExecutions] = useState<ExecutionItem[]>([])
  const [selectedExecution, setSelectedExecution] = useState<ExecutionItem | null>(null)
  const [loading, setLoading] = useState(false)
  const [filter, setFilter] = useState<'all' | 'success' | 'error' | 'running'>('all')
  const [showDetails, setShowDetails] = useState(false)

  useEffect(() => {
    fetchExecutions()
  }, [workflowId, filter])

  const fetchExecutions = async () => {
    setLoading(true)
    // Simulate API call
    setTimeout(() => {
      let filtered = mockExecutions
      if (workflowId) {
        filtered = filtered.filter(e => e.workflowId === workflowId)
      }
      if (filter !== 'all') {
        filtered = filtered.filter(e => e.status === filter)
      }
      setExecutions(filtered)
      setLoading(false)
    }, 500)
  }

  const getStatusIcon = (status: ExecutionItem['status']) => {
    switch (status) {
      case 'success':
        return <CheckCircle className="w-4 h-4" />
      case 'error':
        return <XCircle className="w-4 h-4" />
      case 'running':
        return <Loader2 className="w-4 h-4 animate-spin" />
      case 'waiting':
        return <Clock className="w-4 h-4" />
    }
  }

  const getStatusColor = (status: ExecutionItem['status']) => {
    switch (status) {
      case 'success':
        return 'bg-green-400'
      case 'error':
        return 'bg-red-400'
      case 'running':
        return 'bg-blue-400'
      case 'waiting':
        return 'bg-yellow-400'
    }
  }

  const getModeIcon = (mode: ExecutionItem['mode']) => {
    switch (mode) {
      case 'manual':
        return '👤'
      case 'trigger':
        return '⚡'
      case 'webhook':
        return '🔗'
      case 'schedule':
        return '⏰'
    }
  }

  const handleExecutionClick = (execution: ExecutionItem) => {
    setSelectedExecution(execution)
    setShowDetails(true)
    onSelectExecution?.(execution)
  }

  const formatDuration = (start: string, end?: string) => {
    if (!end) return 'Running...'
    const duration = new Date(end).getTime() - new Date(start).getTime()
    const seconds = Math.floor(duration / 1000)
    const minutes = Math.floor(seconds / 60)
    if (minutes > 0) {
      return `${minutes}m ${seconds % 60}s`
    }
    return `${seconds}s`
  }

  return (
    <Card className="h-full border-0 flex flex-col bg-white">
      <CardHeader className="border-b-4 border-black bg-gray-50">
        <div className="flex items-center justify-between">
          <CardTitle className="text-xl font-black uppercase">
            Execution History
          </CardTitle>
          <div className="flex items-center gap-2">
            <Select value={filter} onValueChange={(value: any) => setFilter(value)}>
              <SelectTrigger className="w-32 border-3 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                <Filter className="w-4 h-4 mr-2" />
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All</SelectItem>
                <SelectItem value="success">Success</SelectItem>
                <SelectItem value="error">Error</SelectItem>
                <SelectItem value="running">Running</SelectItem>
              </SelectContent>
            </Select>
            <Button
              variant="outline"
              size="sm"
              onClick={fetchExecutions}
              disabled={loading}
            >
              <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
            </Button>
          </div>
        </div>
      </CardHeader>

      <CardContent className="flex-1 p-0 overflow-hidden">
        {loading ? (
          <div className="flex items-center justify-center h-full">
            <Loader2 className="w-8 h-8 animate-spin" />
          </div>
        ) : executions.length === 0 ? (
          <div className="flex flex-col items-center justify-center h-full p-8 text-center">
            <AlertCircle className="w-12 h-12 text-gray-400 mb-4" />
            <p className="text-gray-600 font-medium">No executions found</p>
            <p className="text-sm text-gray-500">
              {workflowId ? 'This workflow hasn\'t been executed yet' : 'Start executing workflows to see history'}
            </p>
          </div>
        ) : (
          <div className="overflow-y-auto h-full">
            {executions.map((execution) => (
              <div
                key={execution.id}
                className="execution-history-item"
                onClick={() => handleExecutionClick(execution)}
              >
                <div className="flex items-start gap-3 flex-1">
                  <div className={`execution-status ${getStatusColor(execution.status)}`}>
                    {getStatusIcon(execution.status)}
                    {execution.status}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="font-bold text-sm">{execution.workflowName}</span>
                      <span className="text-xs text-gray-500">
                        {getModeIcon(execution.mode)} {execution.mode}
                      </span>
                    </div>
                    <div className="flex items-center gap-4 text-xs text-gray-600">
                      <span>{formatDistanceToNow(new Date(execution.startedAt), { addSuffix: true })}</span>
                      <span>Duration: {formatDuration(execution.startedAt, execution.finishedAt)}</span>
                    </div>
                    {execution.error && (
                      <p className="text-xs text-red-600 mt-1">{execution.error}</p>
                    )}
                  </div>
                </div>
                <ChevronRight className="w-4 h-4 text-gray-400" />
              </div>
            ))}
          </div>
        )}
      </CardContent>

      {/* Execution Details Modal */}
      {showDetails && selectedExecution && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <Card className="w-full max-w-2xl max-h-[80vh] border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)]">
            <CardHeader className="border-b-4 border-black bg-gray-50">
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Execution Details</CardTitle>
                  <p className="text-sm text-gray-600 mt-1">
                    {selectedExecution.workflowName} • {selectedExecution.id}
                  </p>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowDetails(false)}
                >
                  <Eye className="w-4 h-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="p-4 overflow-auto">
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm font-bold mb-1">Status</p>
                    <div className={`execution-status inline-flex ${getStatusColor(selectedExecution.status)}`}>
                      {getStatusIcon(selectedExecution.status)}
                      {selectedExecution.status}
                    </div>
                  </div>
                  <div>
                    <p className="text-sm font-bold mb-1">Mode</p>
                    <p className="text-sm">
                      {getModeIcon(selectedExecution.mode)} {selectedExecution.mode}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm font-bold mb-1">Started</p>
                    <p className="text-sm">
                      {new Date(selectedExecution.startedAt).toLocaleString()}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm font-bold mb-1">Duration</p>
                    <p className="text-sm">
                      {formatDuration(selectedExecution.startedAt, selectedExecution.finishedAt)}
                    </p>
                  </div>
                </div>

                {selectedExecution.error && (
                  <div className="p-4 bg-red-100 border-3 border-black shadow-[3px_3px_0_rgba(0,0,0,1)]">
                    <p className="font-bold text-sm mb-1">Error</p>
                    <p className="text-sm">{selectedExecution.error}</p>
                  </div>
                )}

                {selectedExecution.data && (
                  <div>
                    <p className="font-bold text-sm mb-2">Execution Data</p>
                    <pre className="p-3 bg-gray-100 border-3 border-black text-xs overflow-auto shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      {JSON.stringify(selectedExecution.data, null, 2)}
                    </pre>
                  </div>
                )}

                <div className="flex gap-2">
                  <Button variant="outline" size="sm">
                    <Download className="w-4 h-4 mr-2" />
                    Download
                  </Button>
                  <Button variant="outline" size="sm">
                    <RefreshCw className="w-4 h-4 mr-2" />
                    Retry
                  </Button>
                  <Button variant="outline" size="sm" className="text-red-600">
                    <Trash2 className="w-4 h-4 mr-2" />
                    Delete
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </Card>
  )
}


================================================
FILE: src/components/automation/ExpressionEditor.tsx
================================================
"use client"

import React, { useState, useRef, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  Code, Play, AlertCircle, CheckCircle, 
  HelpCircle, Copy, Braces
} from 'lucide-react'
import { ExpressionParser } from '@/lib/workflow/core/ExpressionParser'

interface ExpressionEditorProps {
  value: string
  onChange: (value: string) => void
  context?: Record<string, any>
  placeholder?: string
}

interface ExpressionSuggestion {
  label: string
  value: string
  description?: string
  category?: string
}

const EXPRESSION_EXAMPLES = [
  {
    category: 'Basic',
    examples: [
      { label: 'Current Item', value: '{{ $json }}', description: 'Access the current item data' },
      { label: 'Item Property', value: '{{ $json.propertyName }}', description: 'Access a specific property' },
      { label: 'Previous Node', value: '{{ $("NodeName").json }}', description: 'Access data from previous node' },
    ]
  },
  {
    category: 'Variables',
    examples: [
      { label: 'Workflow Name', value: '{{ $workflow.name }}', description: 'Get workflow name' },
      { label: 'Workflow ID', value: '{{ $workflow.id }}', description: 'Get workflow ID' },
      { label: 'Node Name', value: '{{ $node.name }}', description: 'Get current node name' },
      { label: 'Item Index', value: '{{ $position }}', description: 'Get current item index' },
      { label: 'Current Date', value: '{{ $now }}', description: 'Get current timestamp' },
      { label: 'Today', value: '{{ $today }}', description: 'Get today\'s date' },
    ]
  },
  {
    category: 'Functions',
    examples: [
      { label: 'To String', value: '{{ $json.value.toString() }}', description: 'Convert to string' },
      { label: 'To Number', value: '{{ Number($json.value) }}', description: 'Convert to number' },
      { label: 'To Upper Case', value: '{{ $json.text.toUpperCase() }}', description: 'Convert to uppercase' },
      { label: 'Replace Text', value: '{{ $json.text.replace("old", "new") }}', description: 'Replace text' },
      { label: 'Array Length', value: '{{ $json.items.length }}', description: 'Get array length' },
      { label: 'JSON Parse', value: '{{ JSON.parse($json.jsonString) }}', description: 'Parse JSON string' },
    ]
  },
  {
    category: 'Conditionals',
    examples: [
      { label: 'If/Else', value: '{{ $json.value > 10 ? "high" : "low" }}', description: 'Conditional expression' },
      { label: 'Default Value', value: '{{ $json.value || "default" }}', description: 'Provide default if empty' },
      { label: 'Check Exists', value: '{{ $json.property !== undefined }}', description: 'Check if property exists' },
    ]
  },
  {
    category: 'Date & Time',
    examples: [
      { label: 'Format Date', value: '{{ new Date($json.date).toLocaleDateString() }}', description: 'Format date' },
      { label: 'Add Days', value: '{{ new Date(Date.now() + 86400000 * 7) }}', description: 'Add 7 days to now' },
      { label: 'Time Difference', value: '{{ Date.now() - new Date($json.date).getTime() }}', description: 'Time difference in ms' },
    ]
  }
]

export default function ExpressionEditor({
  value,
  onChange,
  context = {},
  placeholder = 'Enter expression or click examples below...'
}: ExpressionEditorProps) {
  const [editorValue, setEditorValue] = useState(value)
  const [result, setResult] = useState<any>(null)
  const [error, setError] = useState<string | null>(null)
  const [activeTab, setActiveTab] = useState('editor')
  const textareaRef = useRef<HTMLTextAreaElement>(null)

  useEffect(() => {
    setEditorValue(value)
  }, [value])

  const evaluateExpression = () => {
    try {
      const evaluated = ExpressionParser.evaluate(editorValue, context)
      setResult(evaluated)
      setError(null)
    } catch (err: any) {
      setError(err.message || 'Invalid expression')
      setResult(null)
    }
  }

  const insertExpression = (expression: string) => {
    const textarea = textareaRef.current
    if (!textarea) return

    const start = textarea.selectionStart
    const end = textarea.selectionEnd
    const newValue = 
      editorValue.substring(0, start) + 
      expression + 
      editorValue.substring(end)

    setEditorValue(newValue)
    onChange(newValue)

    // Reset cursor position
    setTimeout(() => {
      textarea.focus()
      textarea.setSelectionRange(
        start + expression.length,
        start + expression.length
      )
    }, 0)
  }

  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newValue = e.target.value
    setEditorValue(newValue)
    onChange(newValue)
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  const formatResult = (result: any): string => {
    if (result === null) return 'null'
    if (result === undefined) return 'undefined'
    if (typeof result === 'object') {
      return JSON.stringify(result, null, 2)
    }
    return String(result)
  }

  return (
    <div className="space-y-4">
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-3 border-3 border-black">
          <TabsTrigger value="editor">Editor</TabsTrigger>
          <TabsTrigger value="examples">Examples</TabsTrigger>
          <TabsTrigger value="help">Help</TabsTrigger>
        </TabsList>

        <TabsContent value="editor" className="space-y-4">
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <label className="text-sm font-bold uppercase">Expression</label>
              <Button
                variant="outline"
                size="sm"
                onClick={evaluateExpression}
                className="gap-2"
              >
                <Play className="w-3 h-3" />
                Test
              </Button>
            </div>

            <textarea
              ref={textareaRef}
              value={editorValue}
              onChange={handleChange}
              placeholder={placeholder}
              className="expression-editor"
              spellCheck={false}
              rows={6}
            />
          </div>

          {(result !== null || error) && (
            <Card className="border-3 border-black p-4">
              {error ? (
                <div className="flex items-start gap-2">
                  <AlertCircle className="w-5 h-5 text-red-500 mt-0.5" />
                  <div className="flex-1">
                    <p className="font-bold text-sm text-red-600">Error</p>
                    <p className="text-sm text-gray-700">{error}</p>
                  </div>
                </div>
              ) : (
                <div className="flex items-start gap-2">
                  <CheckCircle className="w-5 h-5 text-green-500 mt-0.5" />
                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-2">
                      <p className="font-bold text-sm text-green-600">Result</p>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => copyToClipboard(formatResult(result))}
                      >
                        <Copy className="w-3 h-3" />
                      </Button>
                    </div>
                    <pre className="text-sm bg-gray-100 p-2 border-2 border-black overflow-auto max-h-32">
                      {formatResult(result)}
                    </pre>
                  </div>
                </div>
              )}
            </Card>
          )}

          <div className="space-y-2">
            <p className="text-sm font-bold uppercase">Context Variables</p>
            <div className="grid grid-cols-2 gap-2">
              {Object.entries(context).slice(0, 6).map(([key, value]) => (
                <Button
                  key={key}
                  variant="outline"
                  size="sm"
                  onClick={() => insertExpression(`{{ ${key} }}`)}
                  className="justify-start gap-2 text-xs"
                >
                  <Braces className="w-3 h-3" />
                  {key}
                </Button>
              ))}
            </div>
          </div>
        </TabsContent>

        <TabsContent value="examples" className="space-y-4">
          {EXPRESSION_EXAMPLES.map((category) => (
            <div key={category.category}>
              <h3 className="font-bold text-sm uppercase mb-2">{category.category}</h3>
              <div className="space-y-2">
                {category.examples.map((example) => (
                  <Card
                    key={example.value}
                    className="border-2 border-black p-3 cursor-pointer hover:shadow-[4px_4px_0_rgba(0,0,0,1)] transition-all"
                    onClick={() => insertExpression(example.value)}
                  >
                    <div className="flex items-start justify-between gap-2">
                      <div className="flex-1">
                        <p className="font-bold text-sm">{example.label}</p>
                        {example.description && (
                          <p className="text-xs text-gray-600">{example.description}</p>
                        )}
                      </div>
                      <code className="text-xs bg-gray-100 px-2 py-1 border border-black">
                        {example.value}
                      </code>
                    </div>
                  </Card>
                ))}
              </div>
            </div>
          ))}
        </TabsContent>

        <TabsContent value="help" className="space-y-4">
          <Card className="border-3 border-black p-4">
            <div className="flex items-start gap-2">
              <HelpCircle className="w-5 h-5 text-blue-500 mt-0.5" />
              <div className="space-y-3">
                <div>
                  <h4 className="font-bold text-sm mb-1">Expression Syntax</h4>
                  <p className="text-sm text-gray-700">
                    Expressions must be wrapped in double curly braces: <code className="bg-gray-100 px-1">{'{{ expression }}'}</code>
                  </p>
                </div>

                <div>
                  <h4 className="font-bold text-sm mb-1">Available Variables</h4>
                  <ul className="text-sm text-gray-700 space-y-1">
                    <li>• <code>$json</code> - Current item data</li>
                    <li>• <code>$("NodeName")</code> - Data from specific node</li>
                    <li>• <code>$workflow</code> - Workflow information</li>
                    <li>• <code>$node</code> - Current node information</li>
                    <li>• <code>$position</code> - Current item index</li>
                    <li>• <code>$now</code> - Current timestamp</li>
                    <li>• <code>$today</code> - Today's date</li>
                  </ul>
                </div>

                <div>
                  <h4 className="font-bold text-sm mb-1">JavaScript Functions</h4>
                  <p className="text-sm text-gray-700">
                    You can use any JavaScript function or method within expressions.
                    Common functions include String methods, Array methods, Math functions, and Date operations.
                  </p>
                </div>

                <div>
                  <h4 className="font-bold text-sm mb-1">Tips</h4>
                  <ul className="text-sm text-gray-700 space-y-1">
                    <li>• Use dot notation to access nested properties</li>
                    <li>• Use optional chaining (?.) to safely access properties</li>
                    <li>• Test your expressions before saving</li>
                    <li>• Complex logic can use ternary operators or logical operators</li>
                  </ul>
                </div>
              </div>
            </div>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}


================================================
FILE: src/components/automation/NodePanel.tsx
================================================
"use client"

import React from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { X, Webhook, Globe, Code, Phone, Zap, Database, Mail, Settings2 } from 'lucide-react'

interface NodePanelProps {
  onClose: () => void
}

const nodeCategories = [
  {
    name: 'Triggers',
    nodes: [
      { type: 'webhook', label: 'Webhook', icon: Webhook, description: 'Trigger via HTTP request' },
    ],
  },
  {
    name: 'Actions',
    nodes: [
      { type: 'httpRequest', label: 'HTTP Request', icon: Globe, description: 'Make HTTP calls' },
      { type: 'dialaMakeCall', label: 'Make Call', icon: Phone, description: 'Initiate voice call' },
      { type: 'code', label: 'Code', icon: Code, description: 'Execute Python code' },
    ],
  },
  {
    name: 'Data',
    nodes: [
      { type: 'database', label: 'Database', icon: Database, description: 'Query database' },
      { type: 'set', label: 'Set', icon: Settings2, description: 'Set or transform data' },
    ],
  },
  {
    name: 'Communication',
    nodes: [
      { type: 'email', label: 'Send Email', icon: Mail, description: 'Send email messages' },
    ],
  },
]

export default function NodePanel({ onClose }: NodePanelProps) {
  const onDragStart = (event: React.DragEvent, nodeType: string, nodeData: any) => {
    event.dataTransfer.setData('application/reactflow', nodeType)
    event.dataTransfer.setData('nodeData', JSON.stringify(nodeData))
    event.dataTransfer.effectAllowed = 'move'
  }

  return (
    <Card className="w-full h-full border-0 overflow-y-auto bg-white">
      <CardHeader className="border-b-4 border-black p-4 bg-gray-50">
        <div className="flex items-center justify-between">
          <CardTitle className="text-xl font-black uppercase">Add Node</CardTitle>
          <Button
            variant="ghost"
            size="sm"
            onClick={onClose}
            className="h-8 w-8 p-0"
          >
            <X className="w-4 h-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent className="p-4 space-y-6">
        {nodeCategories.map((category) => (
          <div key={category.name}>
            <h3 className="font-bold uppercase mb-3 text-sm">{category.name}</h3>
            <div className="space-y-2">
              {category.nodes.map((node) => {
                const Icon = node.icon
                return (
                  <div
                    key={node.type}
                    draggable
                    onDragStart={(e) => onDragStart(e, 'custom', {
                      label: node.label,
                      type: node.type,
                      parameters: {},
                    })}
                    className="
                      p-3 border-4 border-black bg-white cursor-move
                      shadow-[4px_4px_0_rgba(0,0,0,1)]
                      hover:shadow-[6px_6px_0_rgba(0,0,0,1)] hover:translate-x-[-2px] hover:translate-y-[-2px]
                      transition-all flex items-center gap-3
                    "
                  >
                    <div className="w-10 h-10 bg-yellow-100 border-3 border-black flex items-center justify-center">
                      <Icon className="w-5 h-5" />
                    </div>
                    <div className="flex-1">
                      <div className="font-bold text-sm">{node.label}</div>
                      <div className="text-xs text-gray-600">{node.description}</div>
                    </div>
                  </div>
                )
              })}
            </div>
          </div>
        ))}
      </CardContent>
    </Card>
  )
}


================================================
FILE: src/components/automation/NodePropertiesPanel.tsx
================================================
"use client"

import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Switch } from '@/components/ui/switch'
import { 
  X, ChevronDown, ChevronUp, Code, 
  Info, AlertCircle, HelpCircle
} from 'lucide-react'
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import ExpressionEditor from './ExpressionEditor'

interface NodeProperty {
  displayName: string
  name: string
  type: 'string' | 'number' | 'boolean' | 'options' | 'collection' | 'json' | 'multiOptions'
  default?: any
  required?: boolean
  description?: string
  placeholder?: string
  options?: Array<{ name: string; value: string }>
  typeOptions?: any
  displayOptions?: {
    show?: { [key: string]: any[] }
    hide?: { [key: string]: any[] }
  }
}

interface NodePropertiesPanelProps {
  node: any
  nodeType: string
  properties: NodeProperty[]
  onClose: () => void
  onUpdate: (nodeId: string, data: any) => void
}

export default function NodePropertiesPanel({
  node,
  nodeType,
  properties = [],
  onClose,
  onUpdate
}: NodePropertiesPanelProps) {
  const [values, setValues] = useState<Record<string, any>>({})
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set())
  const [activeTab, setActiveTab] = useState('parameters')
  const [showExpressionEditor, setShowExpressionEditor] = useState<string | null>(null)

  useEffect(() => {
    // Initialize values from node data
    if (node?.data?.parameters) {
      setValues(node.data.parameters)
    }
  }, [node])

  const handleValueChange = (name: string, value: any) => {
    const newValues = { ...values, [name]: value }
    setValues(newValues)
    
    // Update node data
    if (node) {
      onUpdate(node.id, {
        ...node.data,
        parameters: newValues
      })
    }
  }

  const toggleSection = (section: string) => {
    const newExpanded = new Set(expandedSections)
    if (newExpanded.has(section)) {
      newExpanded.delete(section)
    } else {
      newExpanded.add(section)
    }
    setExpandedSections(newExpanded)
  }

  const shouldShowProperty = (property: NodeProperty): boolean => {
    if (!property.displayOptions) return true

    const { show, hide } = property.displayOptions

    if (show) {
      for (const [param, expectedValues] of Object.entries(show)) {
        const currentValue = values[param]
        if (!expectedValues.includes(currentValue)) {
          return false
        }
      }
    }

    if (hide) {
      for (const [param, expectedValues] of Object.entries(hide)) {
        const currentValue = values[param]
        if (expectedValues.includes(currentValue)) {
          return false
        }
      }
    }

    return true
  }

  const renderPropertyInput = (property: NodeProperty) => {
    const value = values[property.name] ?? property.default ?? ''

    switch (property.type) {
      case 'string':
        if (property.typeOptions?.rows) {
          return (
            <div className="relative">
              <Textarea
                value={value}
                onChange={(e) => handleValueChange(property.name, e.target.value)}
                placeholder={property.placeholder}
                rows={property.typeOptions.rows}
                className="border-3 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] focus:shadow-[4px_4px_0_rgba(0,0,0,1)] focus:translate-x-[-1px] focus:translate-y-[-1px] transition-all"
              />
              <Button
                variant="ghost"
                size="sm"
                className="absolute top-2 right-2"
                onClick={() => setShowExpressionEditor(property.name)}
              >
                <Code className="w-4 h-4" />
              </Button>
            </div>
          )
        }
        return (
          <div className="relative">
            <Input
              value={value}
              onChange={(e) => handleValueChange(property.name, e.target.value)}
              placeholder={property.placeholder}
              className="border-3 border-black focus:shadow-[4px_4px_0_rgba(0,0,0,1)]"
            />
            <Button
              variant="ghost"
              size="sm"
              className="absolute top-0 right-0"
              onClick={() => setShowExpressionEditor(property.name)}
            >
              <Code className="w-4 h-4" />
            </Button>
          </div>
        )

      case 'number':
        return (
          <Input
            type="number"
            value={value}
            onChange={(e) => handleValueChange(property.name, parseFloat(e.target.value) || 0)}
            placeholder={property.placeholder}
            className="border-3 border-black focus:shadow-[4px_4px_0_rgba(0,0,0,1)]"
          />
        )

      case 'boolean':
        return (
          <div className="flex items-center gap-3">
            <Switch
              checked={value}
              onCheckedChange={(checked) => handleValueChange(property.name, checked)}
            />
            <span className="text-sm font-medium">
              {value ? 'Enabled' : 'Disabled'}
            </span>
          </div>
        )

      case 'options':
        return (
          <Select
            value={value}
            onValueChange={(val) => handleValueChange(property.name, val)}
          >
            <SelectTrigger className="border-3 border-black focus:shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <SelectValue placeholder="Select an option" />
            </SelectTrigger>
            <SelectContent>
              {property.options?.map((option) => (
                <SelectItem key={option.value} value={option.value}>
                  {option.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        )

      case 'json':
        return (
          <div className="space-y-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setShowExpressionEditor(property.name)}
              className="w-full"
            >
              <Code className="w-4 h-4 mr-2" />
              Edit JSON
            </Button>
            <pre className="p-3 bg-gray-100 border-3 border-black text-xs overflow-auto max-h-32 shadow-[2px_2px_0_rgba(0,0,0,1)]">
              {JSON.stringify(value, null, 2)}
            </pre>
          </div>
        )

      default:
        return (
          <div className="text-sm text-gray-500">
            Unsupported field type: {property.type}
          </div>
        )
    }
  }

  // Group properties by category
  const groupedProperties = properties.reduce((acc, prop) => {
    const category = prop.typeOptions?.category || 'General'
    if (!acc[category]) acc[category] = []
    acc[category].push(prop)
    return acc
  }, {} as Record<string, NodeProperty[]>)

  return (
    <>
      <Card className="node-properties-panel border-0">
        <CardHeader className="border-b-4 border-black p-4 bg-gray-50">
          <div className="flex items-center justify-between">
            <CardTitle className="text-xl font-black uppercase">
              {node?.data?.label || 'Node Properties'}
            </CardTitle>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="h-8 w-8 p-0"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </CardHeader>

        <CardContent className="p-0">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-3 border-b-3 border-black">
              <TabsTrigger value="parameters">Parameters</TabsTrigger>
              <TabsTrigger value="settings">Settings</TabsTrigger>
              <TabsTrigger value="info">Info</TabsTrigger>
            </TabsList>

            <TabsContent value="parameters" className="p-4 space-y-6">
              {Object.entries(groupedProperties).map(([category, props]) => (
                <div key={category}>
                  <button
                    onClick={() => toggleSection(category)}
                    className="w-full flex items-center justify-between p-3 bg-gray-100 border-3 border-black hover:bg-gray-200 transition-colors shadow-[2px_2px_0_rgba(0,0,0,1)]"
                  >
                    <span className="font-bold uppercase text-sm">{category}</span>
                    {expandedSections.has(category) ? (
                      <ChevronUp className="w-4 h-4" />
                    ) : (
                      <ChevronDown className="w-4 h-4" />
                    )}
                  </button>

                  {expandedSections.has(category) && (
                    <div className="p-4 border-2 border-t-0 border-black space-y-4">
                      {props.filter(shouldShowProperty).map((property) => (
                        <div key={property.name}>
                          <div className="flex items-center gap-2 mb-2">
                            <label className="text-sm font-bold">
                              {property.displayName}
                            </label>
                            {property.required && (
                              <span className="text-xs text-red-500 font-bold">*</span>
                            )}
                            {property.description && (
                              <HelpCircle className="w-3 h-3 text-gray-500" />
                            )}
                          </div>
                          {renderPropertyInput(property)}
                          {property.description && (
                            <p className="text-xs text-gray-600 mt-1">
                              {property.description}
                            </p>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </TabsContent>

            <TabsContent value="settings" className="p-4 space-y-4">
              <div>
                <label className="text-sm font-bold mb-2 block">Node Name</label>
                <Input
                  value={node?.data?.label || ''}
                  onChange={(e) => onUpdate(node.id, {
                    ...node.data,
                    label: e.target.value
                  })}
                  className="border-3 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] focus:shadow-[4px_4px_0_rgba(0,0,0,1)] focus:translate-x-[-1px] focus:translate-y-[-1px] transition-all"
                />
              </div>

              <div>
                <label className="text-sm font-bold mb-2 block">Notes</label>
                <Textarea
                  value={node?.data?.notes || ''}
                  onChange={(e) => onUpdate(node.id, {
                    ...node.data,
                    notes: e.target.value
                  })}
                  placeholder="Add notes about this node..."
                  rows={4}
                  className="border-3 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] focus:shadow-[4px_4px_0_rgba(0,0,0,1)] focus:translate-x-[-1px] focus:translate-y-[-1px] transition-all"
                />
              </div>

              <div className="flex items-center gap-3">
                <Switch
                  checked={node?.data?.disabled !== true}
                  onCheckedChange={(checked) => onUpdate(node.id, {
                    ...node.data,
                    disabled: !checked
                  })}
                />
                <span className="text-sm font-medium">
                  {node?.data?.disabled ? 'Node Disabled' : 'Node Enabled'}
                </span>
              </div>
            </TabsContent>

            <TabsContent value="info" className="p-4 space-y-4">
              <div className="p-4 bg-blue-100 border-3 border-black shadow-[3px_3px_0_rgba(0,0,0,1)]">
                <div className="flex items-start gap-2">
                  <Info className="w-5 h-5 text-blue-600 mt-0.5" />
                  <div>
                    <h4 className="font-bold text-sm mb-1">Node Type: {nodeType}</h4>
                    <p className="text-xs text-gray-700">
                      This node type handles specific operations in your workflow.
                    </p>
                  </div>
                </div>
              </div>

              <div className="space-y-2">
                <h4 className="font-bold text-sm uppercase">Node Information</h4>
                <div className="text-xs space-y-1">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Node ID:</span>
                    <span className="font-mono">{node?.id}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Type:</span>
                    <span>{node?.data?.type}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Position:</span>
                    <span>x: {Math.round(node?.position?.x || 0)}, y: {Math.round(node?.position?.y || 0)}</span>
                  </div>
                </div>
              </div>

              {node?.data?.error && (
                <div className="p-4 bg-red-100 border-3 border-black shadow-[3px_3px_0_rgba(0,0,0,1)]">
                  <div className="flex items-start gap-2">
                    <AlertCircle className="w-5 h-5 text-red-600 mt-0.5" />
                    <div>
                      <h4 className="font-bold text-sm mb-1">Error</h4>
                      <p className="text-xs text-gray-700">{node.data.error}</p>
                    </div>
                  </div>
                </div>
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* Expression Editor Modal */}
      {showExpressionEditor && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <Card className="w-full max-w-4xl max-h-[80vh] border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)]">
            <CardHeader className="border-b-4 border-black bg-gray-50">
              <div className="flex items-center justify-between">
                <CardTitle>Expression Editor - {showExpressionEditor}</CardTitle>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowExpressionEditor(null)}
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="p-4">
              <ExpressionEditor
                value={values[showExpressionEditor] || ''}
                onChange={(value) => {
                  handleValueChange(showExpressionEditor, value)
                }}
                context={{
                  $json: node?.data || {},
                  $node: { name: node?.data?.label },
                  $workflow: { name: 'Current Workflow' }
                }}
              />
            </CardContent>
          </Card>
        </div>
      )}
    </>
  )
}


================================================
FILE: src/components/automation/WorkflowEditor.tsx
================================================
"use client"

import React, { useCallback, useState, useRef, useEffect } from 'react'
import {
  ReactFlow,
  ReactFlowProvider,
  addEdge,
  useNodesState,
  useEdgesState,
  useReactFlow,
  Controls,
  Background,
  MiniMap,
  Connection,
  Edge,
  Node,
  NodeTypes,
  Panel,
  BackgroundVariant,
} from '@xyflow/react'
import '@xyflow/react/dist/style.css'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { 
  Play, Save, Plus, Settings2, Trash2, ChevronLeft,
  Webhook, Code, Phone, Globe, Zap, Loader2, X,
  History, Variable, FileJson, Copy, Undo, Redo
} from 'lucide-react'
import CustomNode from './CustomNode'
import NodePanel from './NodePanel'
import WorkflowSettings from './WorkflowSettings'
import NodePropertiesPanel from './NodePropertiesPanel'
import ExecutionHistory from './ExecutionHistory'
import { useWorkflowExecution } from '@/hooks/useWorkflowExecution'
import { IWorkflowData } from '@/lib/workflow/workflow-executor'

// Custom node types
const nodeTypes: NodeTypes = {
  custom: CustomNode,
}

// Initial nodes for new workflows
const initialNodes: Node[] = [
  {
    id: '1',
    type: 'custom',
    position: { x: 250, y: 100 },
    data: { 
      label: 'Webhook Trigger',
      type: 'webhook',
      parameters: {
        path: '/webhook/start',
        method: 'POST'
      },
    },
  },
  {
    id: '2',
    type: 'custom',
    position: { x: 250, y: 250 },
    data: { 
      label: 'Make Call',
      type: 'dialaMakeCall',
      parameters: {
        phoneNumber: '+1234567890',
        agent: 'default'
      },
    },
  },
]

// Initial edges for demo
const initialEdges: Edge[] = [
  {
    id: 'e1-2',
    source: '1',
    target: '2',
    type: 'default',
  },
]

interface WorkflowEditorProps {
  workflowId?: string
  workflowName?: string
  onSave?: (workflow: any) => void
  onExecute?: (workflow: any) => void
  onBack?: () => void
}

function WorkflowEditorContent({ workflowId, workflowName, onSave, onExecute, onBack }: WorkflowEditorProps) {
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes)
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges)
  const [showNodePanel, setShowNodePanel] = useState(false)
  const [showSettings, setShowSettings] = useState(false)
  const [showPropertiesPanel, setShowPropertiesPanel] = useState(false)
  const [showExecutionHistory, setShowExecutionHistory] = useState(false)
  const [selectedNode, setSelectedNode] = useState<Node | null>(null)
  const [executionResults, setExecutionResults] = useState<any>(null)
  const [canUndo, setCanUndo] = useState(false)
  const [canRedo, setCanRedo] = useState(false)
  const { screenToFlowPosition } = useReactFlow()
  const reactFlowWrapper = useRef<HTMLDivElement>(null)
  const { executeWorkflow, isExecuting, executionResult, error } = useWorkflowExecution()
  
  // Node type properties mapping
  const nodeProperties = {
    webhook: [
      { displayName: 'Path', name: 'path', type: 'string' as const, default: '/webhook', required: true },
      { displayName: 'Method', name: 'method', type: 'options' as const, default: 'GET', options: [
        { name: 'GET', value: 'GET' },
        { name: 'POST', value: 'POST' },
        { name: 'PUT', value: 'PUT' },
        { name: 'DELETE', value: 'DELETE' }
      ]},
    ],
    dialaMakeCall: [
      { displayName: 'Phone Number', name: 'phoneNumber', type: 'string' as const, default: '', required: true },
      { displayName: 'Agent', name: 'agent', type: 'options' as const, default: 'default', options: [
        { name: 'Default', value: 'default' },
        { name: 'Sales', value: 'sales' },
        { name: 'Support', value: 'support' }
      ]},
    ],
    httpRequest: [
      { displayName: 'URL', name: 'url', type: 'string' as const, default: '', required: true },
      { displayName: 'Method', name: 'method', type: 'options' as const, default: 'GET', options: [
        { name: 'GET', value: 'GET' },
        { name: 'POST', value: 'POST' }
      ]},
    ],
    code: [
      { displayName: 'Code', name: 'code', type: 'string' as const, default: '// Write your code here\nreturn items;', typeOptions: { rows: 10 } },
    ],
  }

  const onConnect = useCallback(
    (params: Edge | Connection) => {
      const newEdge = {
        ...params,
        type: 'smoothstep',
        animated: true,
        style: { stroke: 'black', strokeWidth: 3 },
      }
      setEdges((eds) => addEdge(newEdge, eds))
    },
    [setEdges]
  )

  const onDragOver = useCallback((event: React.DragEvent) => {
    event.preventDefault()
    event.dataTransfer.dropEffect = 'move'
  }, [])

  const onDrop = useCallback(
    (event: React.DragEvent) => {
      event.preventDefault()

      const type = event.dataTransfer.getData('application/reactflow')
      const nodeDataStr = event.dataTransfer.getData('nodeData')
      
      if (!type || !nodeDataStr) {
        return
      }

      const nodeData = JSON.parse(nodeDataStr)
      const reactFlowBounds = reactFlowWrapper.current?.getBoundingClientRect()
      
      if (!reactFlowBounds) return

      const position = screenToFlowPosition({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      })

      const newNode: Node = {
        id: `node-${Date.now()}`,
        type: 'custom',
        position,
        data: nodeData,
      }

      setNodes((nds) => nds.concat(newNode))
      
      // Auto-open properties panel for new node
      setSelectedNode(newNode)
      setShowPropertiesPanel(true)
    },
    [screenToFlowPosition, setNodes]
  )

  const onNodeClick = useCallback((event: React.MouseEvent, node: Node) => {
    setSelectedNode(node)
    setShowPropertiesPanel(true)
  }, [])
  
  const deleteSelectedNode = useCallback(() => {
    if (selectedNode) {
      setNodes((nds) => nds.filter((n) => n.id !== selectedNode.id))
      setEdges((eds) => eds.filter((e) => e.source !== selectedNode.id && e.target !== selectedNode.id))
      setSelectedNode(null)
    }
  }, [selectedNode, setNodes, setEdges])

  const saveWorkflow = useCallback(() => {
    const workflow = {
      nodes: nodes.map(node => ({
        id: node.id,
        type: node.data.type,
        position: node.position,
        parameters: node.data.parameters || {},
      })),
      connections: edges.reduce((acc, edge) => {
        if (!acc[edge.source]) {
          acc[edge.source] = { main: [[]] }
        }
        acc[edge.source].main[0].push({
          node: edge.target,
          type: 'main',
          index: 0,
        })
        return acc
      }, {} as any),
    }
    
    onSave?.(workflow)
  }, [nodes, edges, onSave])

  const handleExecuteWorkflow = useCallback(async () => {
    // For demo purposes, simulate execution with visual feedback
    // Convert to n8n workflow format
    const workflowData: IWorkflowData = {
      id: workflowId || 'temp-workflow',
      name: 'Test Workflow',
      nodes: nodes.map(node => ({
        id: node.id,
        name: node.data.label || node.id,
        type: node.data.type,
        position: [node.position.x, node.position.y],
        parameters: node.data.parameters || {},
      })),
      connections: edges.reduce((acc, edge) => {
        const sourceNode = nodes.find(n => n.id === edge.source)
        const targetNode = nodes.find(n => n.id === edge.target)
        
        if (sourceNode && targetNode) {
          const sourceName = sourceNode.data.label || sourceNode.id
          const targetName = targetNode.data.label || targetNode.id
          
          if (!acc[sourceName]) {
            acc[sourceName] = { main: [[]] }
          }
          acc[sourceName].main[0].push({
            node: targetName,
            type: 'main',
            index: 0,
          })
        }
        return acc
      }, {} as any),
    }

    try {
      // Simulate execution with visual feedback
      setExecutionResults(null)
      
      // Show nodes executing one by one
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i]
        
        // Highlight current node as executing
        setNodes((nds) =>
          nds.map((n) => ({
            ...n,
            data: {
              ...n.data,
              executing: n.id === node.id,
              executed: false,
            }
          }))
        )
        
        // Simulate execution delay
        await new Promise(resolve => setTimeout(resolve, 1000))
        
        // Mark node as executed
        setNodes((nds) =>
          nds.map((n) => ({
            ...n,
            data: {
              ...n.data,
              executing: false,
              executed: n.id === node.id || n.data.executed,
            }
          }))
        )
      }
      
      // Create mock execution result
      const mockResult = {
        resultData: {
          runData: nodes.reduce((acc, node) => {
            acc[node.data.label || node.id] = [{
              startTime: Date.now() - 1000,
              executionTime: Math.random() * 1000,
              data: {
                main: [[{
                  json: {
                    success: true,
                    nodeType: node.data.type,
                    message: `Node ${node.data.label} executed successfully`,
                    ...(node.data.type === 'dialaMakeCall' ? {
                      callId: 'call-' + Math.random().toString(36).substr(2, 9),
                      duration: Math.floor(Math.random() * 300) + ' seconds'
                    } : {})
                  }
                }]]
              }
            }]
            return acc
          }, {} as any)
        }
      }
      
      setExecutionResults(mockResult)
      
      // Reset node states after 3 seconds
      setTimeout(() => {
        setNodes((nds) =>
          nds.map((n) => ({
            ...n,
            data: {
              ...n.data,
              executing: false,
              executed: false,
            }
          }))
        )
      }, 3000)
      
      onExecute?.(workflowData)
    } catch (err) {
      console.error('Workflow execution error:', err)
    }
  }, [nodes, workflowId, onExecute, setNodes, setExecutionResults])

  useEffect(() => {
    // Close properties panel when no node is selected
    if (!selectedNode) {
      setShowPropertiesPanel(false)
    }
  }, [selectedNode])
  
  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Delete selected node
      if ((e.key === 'Delete' || e.key === 'Backspace') && selectedNode) {
        deleteSelectedNode()
      }
      // Toggle node panel
      if (e.key === 'a' && (e.ctrlKey || e.metaKey)) {
        e.preventDefault()
        setShowNodePanel(!showNodePanel)
      }
      // Save workflow
      if (e.key === 's' && (e.ctrlKey || e.metaKey)) {
        e.preventDefault()
        saveWorkflow()
      }
      // Execute workflow
      if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
        e.preventDefault()
        handleExecuteWorkflow()
      }
    }
    
    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [selectedNode, showNodePanel, deleteSelectedNode, saveWorkflow, handleExecuteWorkflow])

  return (
    <div className="h-full flex flex-col">
      {/* Header Bar */}
      <div className="p-4 bg-white flex items-center justify-between border-b-4 border-black">
        <div className="flex items-center gap-4">
          {onBack && (
            <Button
              variant="subheader"
              size="sm"
              onClick={onBack}
            >
              <ChevronLeft className="w-4 h-4 mr-2" />
              Back
            </Button>
          )}
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-purple-400 border-3 border-black flex items-center justify-center shadow-[2px_2px_0_rgba(0,0,0,1)]">
              <Zap className="w-5 h-5" />
            </div>
            <h2 className="text-xl font-black uppercase">
              {workflowName || 'New Workflow'}
            </h2>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Button
            variant="neutral"
            size="icon"
            disabled={!canUndo}
          >
            <Undo className="w-4 h-4" />
          </Button>
          <Button
            variant="neutral"
            size="icon"
            disabled={!canRedo}
          >
            <Redo className="w-4 h-4" />
          </Button>
          <div className="w-px h-6 bg-black" />
          <Button
            variant="neutral"
            size="icon"
            onClick={() => setShowExecutionHistory(!showExecutionHistory)}
          >
            <History className="w-4 h-4" />
          </Button>
          <Button
            variant="neutral"
            size="icon"
          >
            <Variable className="w-4 h-4" />
          </Button>
          <Button
            variant="neutral"
            size="icon"
          >
            <FileJson className="w-4 h-4" />
          </Button>
        </div>
      </div>
      
      {/* Main Canvas Area */}
      <div className="flex-1 relative overflow-hidden" ref={reactFlowWrapper}>
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onConnect={onConnect}
          onNodeClick={onNodeClick}
          onDragOver={onDragOver}
          onDrop={onDrop}
          nodeTypes={nodeTypes}
          fitView
          defaultViewport={{ x: 0, y: 0, zoom: 1 }}
          minZoom={0.2}
          maxZoom={4}
          className="workflow-canvas"
          connectionLineStyle={{ stroke: 'black', strokeWidth: 3 }}
          defaultEdgeOptions={{ type: 'smoothstep', animated: true }}
        >
          <Background 
            variant={BackgroundVariant.Dots} 
            gap={20} 
            size={2}
            color="#ddd"
          />
          <MiniMap 
            className="react-flow__minimap"
            maskColor="rgba(0, 82, 255, 0.1)"
          />
          <Controls className="react-flow__controls" />
          
          {/* Floating Action Bar */}
          <Panel position="top-left" className="m-4">
            <Card className="border-4 border-black bg-white p-3 shadow-[6px_6px_0_rgba(0,0,0,1)]">
              <div className="flex items-center gap-3">
                <Button
                  variant="default"
                  size="sm"
                  onClick={() => setShowNodePanel(!showNodePanel)}
                >
                  <Plus className="w-4 h-4 mr-2" />
                  ADD NODE
                </Button>
                <div className="w-px h-8 bg-black" />
                <Button
                  variant="neutral"
                  size="sm"
                  onClick={saveWorkflow}
                >
                  <Save className="w-4 h-4 mr-2" />
                  SAVE
                </Button>
                <Button
                  variant="header"
                  size="sm"
                  onClick={handleExecuteWorkflow}
                  disabled={isExecuting}
                >
                  {isExecuting ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      RUNNING
                    </>
                  ) : (
                    <>
                      <Play className="w-4 h-4 mr-2" />
                      EXECUTE
                    </>
                  )}
                </Button>
                {selectedNode && (
                  <>
                    <div className="w-px h-8 bg-black" />
                    <Button
                      variant="neutral"
                      size="icon"
                      onClick={deleteSelectedNode}
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </>
                )}
              </div>
            </Card>
          </Panel>

          {/* Help Panel */}
          <Panel position="bottom-left" className="m-4">
            <Card className="border-4 border-black bg-gradient-to-br from-yellow-50 to-yellow-100 p-4 shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <div className="text-xs space-y-2">
                <div className="font-black uppercase mb-3 flex items-center gap-2">
                  <div className="w-1 h-4 bg-black"></div>
                  KEYBOARD SHORTCUTS
                </div>
                <div className="flex items-center gap-2">
                  <kbd className="px-2 py-1 bg-white border-2 border-black text-xs font-bold shadow-[2px_2px_0_rgba(0,0,0,1)]">Ctrl+A</kbd>
                  <span className="font-medium">Add Node</span>
                </div>
                <div className="flex items-center gap-2">
                  <kbd className="px-2 py-1 bg-white border-2 border-black text-xs font-bold shadow-[2px_2px_0_rgba(0,0,0,1)]">Ctrl+S</kbd>
                  <span className="font-medium">Save</span>
                </div>
                <div className="flex items-center gap-2">
                  <kbd className="px-2 py-1 bg-white border-2 border-black text-xs font-bold shadow-[2px_2px_0_rgba(0,0,0,1)]">Ctrl+Enter</kbd>
                  <span className="font-medium">Execute</span>
                </div>
                <div className="flex items-center gap-2">
                  <kbd className="px-2 py-1 bg-white border-2 border-black text-xs font-bold shadow-[2px_2px_0_rgba(0,0,0,1)]">Delete</kbd>
                  <span className="font-medium">Remove Node</span>
                </div>
              </div>
            </Card>
          </Panel>
          
          {/* Execution Results Panel */}
          {executionResults && (
            <Panel position="bottom-right" className="m-4 max-w-md">
              <Card className="border-4 border-black bg-white shadow-[6px_6px_0_rgba(0,0,0,1)]">
                <CardHeader className="p-4 pb-3">
                  <div className="flex items-center justify-between">
                    <h3 className="font-black uppercase flex items-center gap-2">
                      <div className="w-8 h-8 bg-green-400 border-2 border-black flex items-center justify-center shadow-[2px_2px_0_rgba(0,0,0,1)]">
                        <PlayCircle className="w-4 h-4" />
                      </div>
                      Execution Results
                    </h3>
                    <Button
                      variant="neutral"
                      size="icon"
                      onClick={() => setExecutionResults(null)}
                    >
                      <X className="w-4 h-4" />
                    </Button>
                  </div>
                </CardHeader>
                <CardContent className="p-4 pt-0">
                  <pre className="text-xs bg-gray-100 p-3 border-3 border-black overflow-auto max-h-48 shadow-[2px_2px_0_rgba(0,0,0,1)] font-mono">
                    {JSON.stringify(executionResults.resultData?.runData || executionResults, null, 2)}
                  </pre>
                </CardContent>
              </Card>
            </Panel>
          )}
        </ReactFlow>
      </div>

      {/* Node Panel - Slide in from left */}
      <div className={`node-panel ${showNodePanel ? 'open' : ''}`}>
        <NodePanel onClose={() => setShowNodePanel(false)} />
      </div>

      {/* Properties Panel - Right side */}
      {showPropertiesPanel && selectedNode && (
        <NodePropertiesPanel
          node={selectedNode}
          nodeType={selectedNode.data.type}
          properties={nodeProperties[selectedNode.data.type as keyof typeof nodeProperties] || []}
          onClose={() => {
            setShowPropertiesPanel(false)
            setSelectedNode(null)
          }}
          onUpdate={(nodeId, data) => {
            setNodes((nds) =>
              nds.map((node) =>
                node.id === nodeId ? { ...node, data } : node
              )
            )
          }}
        />
      )}
      
      {/* Execution History - Slide in from right */}
      {showExecutionHistory && (
        <div className="absolute top-0 right-0 h-full w-96 z-40 animate-in slide-in-from-right border-l-4 border-black shadow-[-6px_0_0_rgba(0,0,0,1)]">
          <ExecutionHistory
            workflowId={workflowId}
            onSelectExecution={(execution) => {
              console.log('Selected execution:', execution)
            }}
          />
        </div>
      )}
    </div>
  )
}

export default function WorkflowEditor(props: WorkflowEditorProps) {
  return (
    <ReactFlowProvider>
      <WorkflowEditorContent {...props} />
    </ReactFlowProvider>
  )
}


================================================
FILE: src/components/automation/WorkflowSettings.tsx
================================================
"use client"

import React, { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { X } from 'lucide-react'
import { Node } from '@xyflow/react'

interface WorkflowSettingsProps {
  onClose: () => void
  selectedNode: Node | null
  onNodeUpdate: (nodeId: string, data: any) => void
}

export default function WorkflowSettings({ onClose, selectedNode, onNodeUpdate }: WorkflowSettingsProps) {
  const [nodeParams, setNodeParams] = useState(selectedNode?.data.parameters || {})

  const handleParamChange = (key: string, value: any) => {
    const newParams = { ...nodeParams, [key]: value }
    setNodeParams(newParams)
    if (selectedNode) {
      onNodeUpdate(selectedNode.id, { parameters: newParams })
    }
  }

  const renderNodeSettings = () => {
    if (!selectedNode) {
      return <p className="text-gray-500">Select a node to configure</p>
    }

    const nodeType = selectedNode.data.type

    switch (nodeType) {
      case 'webhook':
        return (
          <div className="space-y-4">
            <div>
              <label className="text-sm font-bold uppercase">Path</label>
              <Input
                value={nodeParams.path || ''}
                onChange={(e) => handleParamChange('path', e.target.value)}
                placeholder="/webhook/my-webhook"
                className="mt-1"
              />
            </div>
            <div>
              <label className="text-sm font-bold uppercase">Method</label>
              <select
                value={nodeParams.method || 'POST'}
                onChange={(e) => handleParamChange('method', e.target.value)}
                className="w-full mt-1 p-2 border-3 border-black"
              >
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
              </select>
            </div>
          </div>
        )

      case 'httpRequest':
        return (
          <div className="space-y-4">
            <div>
              <label className="text-sm font-bold uppercase">URL</label>
              <Input
                value={nodeParams.url || ''}
                onChange={(e) => handleParamChange('url', e.target.value)}
                placeholder="https://api.example.com/endpoint"
                className="mt-1"
              />
            </div>
            <div>
              <label className="text-sm font-bold uppercase">Method</label>
              <select
                value={nodeParams.method || 'GET'}
                onChange={(e) => handleParamChange('method', e.target.value)}
                className="w-full mt-1 p-2 border-3 border-black"
              >
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
                <option value="PATCH">PATCH</option>
              </select>
            </div>
            <div>
              <label className="text-sm font-bold uppercase">Headers (JSON)</label>
              <Textarea
                value={nodeParams.headers || '{}'}
                onChange={(e) => handleParamChange('headers', e.target.value)}
                placeholder='{"Content-Type": "application/json"}'
                className="mt-1 font-mono text-sm"
                rows={3}
              />
            </div>
            {['POST', 'PUT', 'PATCH'].includes(nodeParams.method) && (
              <div>
                <label className="text-sm font-bold uppercase">Body (JSON)</label>
                <Textarea
                  value={nodeParams.body || '{}'}
                  onChange={(e) => handleParamChange('body', e.target.value)}
                  placeholder='{"key": "value"}'
                  className="mt-1 font-mono text-sm"
                  rows={4}
                />
              </div>
            )}
          </div>
        )

      case 'code':
        return (
          <div className="space-y-4">
            <div>
              <label className="text-sm font-bold uppercase">Python Code</label>
              <Textarea
                value={nodeParams.code || '# Access input data via input_data variable\n# Set output variable to return data\n\noutput = input_data'}
                onChange={(e) => handleParamChange('code', e.target.value)}
                className="mt-1 font-mono text-sm"
                rows={10}
              />
            </div>
          </div>
        )

      case 'dialaMakeCall':
        return (
          <div className="space-y-4">
            <div>
              <label className="text-sm font-bold uppercase">Phone Number</label>
              <Input
                value={nodeParams.phone_number || ''}
                onChange={(e) => handleParamChange('phone_number', e.target.value)}
                placeholder="+1234567890"
                className="mt-1"
              />
            </div>
            <div>
              <label className="text-sm font-bold uppercase">Agent ID</label>
              <Input
                value={nodeParams.agent_id || ''}
                onChange={(e) => handleParamChange('agent_id', e.target.value)}
                placeholder="agent-123"
                className="mt-1"
              />
            </div>
            <div>
              <label className="text-sm font-bold uppercase">Initial Message</label>
              <Textarea
                value={nodeParams.initial_message || ''}
                onChange={(e) => handleParamChange('initial_message', e.target.value)}
                placeholder="Hello, this is a call from..."
                className="mt-1"
                rows={3}
              />
            </div>
          </div>
        )

      default:
        return <p className="text-gray-500">No settings available for this node type</p>
    }
  }

  return (
    <Card className="w-96 h-full border-l-3 border-black overflow-y-auto">
      <CardHeader className="border-b-3 border-black p-4">
        <div className="flex items-center justify-between">
          <CardTitle className="text-xl font-black uppercase">
            {selectedNode ? `Configure ${selectedNode.data.label}` : 'Node Settings'}
          </CardTitle>
          <Button
            variant="ghost"
            size="sm"
            onClick={onClose}
            className="h-8 w-8 p-0"
          >
            <X className="w-4 h-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent className="p-4">
        {renderNodeSettings()}
      </CardContent>
    </Card>
  )
}


================================================
FILE: src/components/automation/WorkflowTemplates.tsx
================================================
"use client"

import React, { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { 
  Search, Filter, Zap, Phone, Mail, Database,
  Globe, FileText, Calendar, Users, TrendingUp,
  MessageSquare, Shield, Clock, Star, ArrowRight
} from 'lucide-react'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'

interface WorkflowTemplate {
  id: string
  name: string
  description: string
  category: string
  tags: string[]
  nodeCount: number
  difficulty: 'beginner' | 'intermediate' | 'advanced'
  popularity: number
  icon: React.ReactNode
  preview?: {
    nodes: any[]
    connections: any[]
  }
}

const templates: WorkflowTemplate[] = [
  {
    id: 'welcome-calls',
    name: 'Welcome Call Campaign',
    description: 'Automatically call new users after signup with a personalized welcome message',
    category: 'Customer Success',
    tags: ['onboarding', 'voice', 'automation'],
    nodeCount: 5,
    difficulty: 'beginner',
    popularity: 95,
    icon: <Phone className="w-6 h-6" />,
    preview: {
      nodes: [
        { id: '1', type: 'webhook', label: 'New User Signup' },
        { id: '2', type: 'code', label: 'Prepare Message' },
        { id: '3', type: 'dialaMakeCall', label: 'Welcome Call' },
        { id: '4', type: 'httpRequest', label: 'Update CRM' },
        { id: '5', type: 'email', label: 'Send Follow-up' }
      ],
      connections: [
        { source: '1', target: '2' },
        { source: '2', target: '3' },
        { source: '3', target: '4' },
        { source: '3', target: '5' }
      ]
    }
  },
  {
    id: 'lead-qualification',
    name: 'Lead Qualification Flow',
    description: 'Score and qualify leads, then route to appropriate sales agents',
    category: 'Sales',
    tags: ['leads', 'scoring', 'routing'],
    nodeCount: 7,
    difficulty: 'intermediate',
    popularity: 88,
    icon: <TrendingUp className="w-6 h-6" />,
  },
  {
    id: 'appointment-reminder',
    name: 'Appointment Reminders',
    description: 'Send automated call reminders for upcoming appointments',
    category: 'Customer Success',
    tags: ['reminders', 'scheduling', 'voice'],
    nodeCount: 4,
    difficulty: 'beginner',
    popularity: 92,
    icon: <Calendar className="w-6 h-6" />,
  },
  {
    id: 'survey-collector',
    name: 'Voice Survey Collection',
    description: 'Collect customer feedback through automated voice surveys',
    category: 'Feedback',
    tags: ['survey', 'feedback', 'voice'],
    nodeCount: 6,
    difficulty: 'intermediate',
    popularity: 75,
    icon: <MessageSquare className="w-6 h-6" />,
  },
  {
    id: 'escalation-handler',
    name: 'Support Escalation',
    description: 'Automatically escalate critical support tickets with voice notifications',
    category: 'Support',
    tags: ['support', 'escalation', 'urgent'],
    nodeCount: 8,
    difficulty: 'advanced',
    popularity: 82,
    icon: <Shield className="w-6 h-6" />,
  },
  {
    id: 'data-enrichment',
    name: 'Contact Data Enrichment',
    description: 'Enrich contact data and validate phone numbers before calling',
    category: 'Data Processing',
    tags: ['data', 'enrichment', 'validation'],
    nodeCount: 5,
    difficulty: 'intermediate',
    popularity: 70,
    icon: <Database className="w-6 h-6" />,
  }
]

const categories = [
  'All',
  'Customer Success',
  'Sales',
  'Support',
  'Feedback',
  'Data Processing'
]

interface WorkflowTemplatesProps {
  onSelectTemplate: (template: WorkflowTemplate) => void
}

export default function WorkflowTemplates({ onSelectTemplate }: WorkflowTemplatesProps) {
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('All')
  const [selectedDifficulty, setSelectedDifficulty] = useState<string>('all')

  const filteredTemplates = templates.filter((template) => {
    const matchesSearch = template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         template.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         template.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))
    
    const matchesCategory = selectedCategory === 'All' || template.category === selectedCategory
    
    const matchesDifficulty = selectedDifficulty === 'all' || template.difficulty === selectedDifficulty
    
    return matchesSearch && matchesCategory && matchesDifficulty
  })

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner':
        return 'bg-green-400'
      case 'intermediate':
        return 'bg-yellow-400'
      case 'advanced':
        return 'bg-red-400'
      default:
        return 'bg-gray-400'
    }
  }

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="p-6 border-b-4 border-black bg-white">
        <h2 className="text-2xl font-black uppercase mb-4">Workflow Templates</h2>
        
        {/* Search and Filters */}
        <div className="flex gap-4 mb-4">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-500" />
            <Input
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search templates..."
              className="pl-10 border-3 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] focus:shadow-[4px_4px_0_rgba(0,0,0,1)] focus:translate-x-[-1px] focus:translate-y-[-1px] transition-all"
            />
          </div>
          
          <Select value={selectedCategory} onValueChange={setSelectedCategory}>
            <SelectTrigger className="w-48 border-3 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
              <Filter className="w-4 h-4 mr-2" />
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {categories.map((category) => (
                <SelectItem key={category} value={category}>
                  {category}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          
          <Select value={selectedDifficulty} onValueChange={setSelectedDifficulty}>
            <SelectTrigger className="w-40 border-3 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
              <SelectValue placeholder="Difficulty" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Levels</SelectItem>
              <SelectItem value="beginner">Beginner</SelectItem>
              <SelectItem value="intermediate">Intermediate</SelectItem>
              <SelectItem value="advanced">Advanced</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Category Pills */}
        <div className="flex gap-2 flex-wrap">
          {['voice', 'automation', 'data', 'integration'].map((tag) => (
            <Badge
              key={tag}
              variant="outline"
              className="cursor-pointer hover:bg-gray-100 border-3 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] hover:shadow-[3px_3px_0_rgba(0,0,0,1)] transition-all"
              onClick={() => setSearchQuery(tag)}
            >
              #{tag}
            </Badge>
          ))}
        </div>
      </div>

      {/* Templates Grid */}
      <div className="flex-1 overflow-y-auto p-6">
        {filteredTemplates.length === 0 ? (
          <div className="text-center py-12">
            <Zap className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-600">No templates found matching your criteria</p>
          </div>
        ) : (
          <div className="workflow-templates-grid">
            {filteredTemplates.map((template) => (
              <Card
                key={template.id}
                className="workflow-template-card"
                onClick={() => onSelectTemplate(template)}
              >
                <CardContent className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-14 h-14 bg-blue-100 border-3 border-black flex items-center justify-center shadow-[3px_3px_0_rgba(0,0,0,1)]">
                      {template.icon}
                    </div>
                    <div className="flex items-center gap-2">
                      <div className={`px-2 py-1 text-xs font-bold uppercase ${getDifficultyColor(template.difficulty)} border-3 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]`}>
                        {template.difficulty}
                      </div>
                    </div>
                  </div>
                  
                  <h3 className="font-bold text-lg mb-2">{template.name}</h3>
                  <p className="text-sm text-gray-600 mb-4">{template.description}</p>
                  
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex gap-4 text-xs text-gray-500">
                      <span className="flex items-center gap-1">
                        <Zap className="w-3 h-3" />
                        {template.nodeCount} nodes
                      </span>
                      <span className="flex items-center gap-1">
                        <Star className="w-3 h-3" />
                        {template.popularity}%
                      </span>
                    </div>
                  </div>
                  
                  <div className="flex flex-wrap gap-1 mb-4">
                    {template.tags.map((tag) => (
                      <span
                        key={tag}
                        className="text-xs px-2 py-1 bg-gray-100 border-2 border-black shadow-[1px_1px_0_rgba(0,0,0,1)]"
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                  
                  <Button
                    variant="default"
                    size="sm"
                    className="w-full bg-blue-400 hover:bg-blue-500 border-3 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] hover:shadow-[4px_4px_0_rgba(0,0,0,1)] hover:translate-x-[-1px] hover:translate-y-[-1px] transition-all"
                  >
                    Use Template
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}


================================================
FILE: src/components/custom/app.tsx
================================================
'use client';

import * as React from 'react';
import { Button } from '../ui/button';
import { Card, CardHeader, CardTitle, CardContent } from '../ui/card';
import { UilArrowRight, UilArrowLeft, UilMusicNote, UilVolumeUp, UilRobot, UilBriefcase, UilPhone, UilMicrophone, UilLock } from '@tooni/iconscout-unicons-react';
import AudioCard from './audio-card';
import LanguageCard from './language-card';
import VoiceAgentCard from './voice-agent-card';
import PitchCard from './pitch-card';
import OnboardingNav from './onboarding-nav';
import FileUploadCard from './file-upload-card';
import InfoSection from './info-section';
import WelcomeCard from './welcome-card';
import LoadingScreen from './loading-screen';
import VerificationModal from './modals/verification-modal';
import CallingScreen from './calling-screen';
import WebVoiceInterface from './web-voice-interface';
import CustomPitchModal, { CustomPitchData } from './modals/custom-pitch-modal';
import PremiumFeatureCard from './premium-feature-card';

const getRandomUnsplashImage = (width: number, height: number) => {
  return `https://source.unsplash.com/random/${width}x${height}/?audio,music,sound&${Math.random()}`;
};

export default function App() {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [userName, setUserName] = React.useState<string | null>(null);
  const [selectedAudio, setSelectedAudio] = React.useState<string | null>(null);
  const [selectedLanguage, setSelectedLanguage] = React.useState<string | null>(null);
  const [selectedVoiceAgent, setSelectedVoiceAgent] = React.useState<string | null>(null);
  const [selectedPitch, setSelectedPitch] = React.useState<string | null>(null);
  const [showLoading, setShowLoading] = React.useState(false);
  const [showVerification, setShowVerification] = React.useState(false);
  const [showCalling, setShowCalling] = React.useState(false);
  const [showWebInterface, setShowWebInterface] = React.useState(false);
  const [verifiedPhone, setVerifiedPhone] = React.useState('');
  const [showCustomPitchModal, setShowCustomPitchModal] = React.useState(false);
  const [customPitchData, setCustomPitchData] = React.useState<CustomPitchData | null>(null);

  const mockAudioFiles = [
    { name: 'CrowdedOfficeAudio.m4a', category: 'Crowded Office' },
    { name: 'CafeAudio.m4a', category: 'Café Ambience' },
    { name: 'CoworkingAudio.m4a', category: 'Co-Working Space' },
    { name: 'TrainstationAudio.m4a', category: 'Train Station' },
    { name: 'LibraryAudio.m4a', category: 'Library' },
  ];

  const languages = [
    { id: 'english', name: 'English', flag: '🇺🇸', accent: 'American' },
    { id: 'mandarin', name: 'Mandarin', flag: '🇨🇳', accent: 'Beijing' },
    { id: 'spanish', name: 'Spanish', flag: '🇪🇸', accent: 'Spain' },
    { id: 'french', name: 'French', flag: '🇫🇷', accent: 'Parisian' },
    { id: 'german', name: 'German', flag: '🇩🇪', accent: 'Berlin' },
    { id: 'japanese', name: 'Japanese', flag: '🇯🇵', accent: 'Tokyo' },
  ];

  const voiceAgents = [
    { id: 'diala-tone', name: 'Diala-Tone', description: 'Your harmonious vocal guide.', imageUrl: getRandomUnsplashImage(600, 600) },
    { id: 'echo-diala', name: 'Echo-Diala', description: 'Resonating with clarity and charm.', imageUrl: getRandomUnsplashImage(600, 600) },
    { id: 'diala-belle', name: 'Diala-Belle', description: 'The beautiful voice for every call.', imageUrl: getRandomUnsplashImage(600, 600) },
    { id: 'voice-diala', name: 'Voice-Diala', description: 'Speak clearly, listen intently.', imageUrl: getRandomUnsplashImage(600, 600) },
    { id: 'diala-muse', name: 'Diala-Muse', description: 'Inspiring conversations, always.', imageUrl: getRandomUnsplashImage(600, 600) },
    { id: 'chat-diala', name: 'Chat-Diala', description: 'Friendly and fluent, ready to chat.', imageUrl: getRandomUnsplashImage(600, 600) },
  ];

  const pitchOptions = [
    { 
      id: 'discovery-calls', 
      name: 'DISCOVERY CALLS', 
      description: 'Book qualified discovery calls with potential customers for your products and services.',
      backstory: 'Your agent will professionally qualify prospects, understand their needs, overcome objections, and schedule discovery calls with decision-makers to explore how your products or services can help them.'
    },
    { 
      id: 'customer-support', 
      name: 'CUSTOMER SUPPORT', 
      description: 'Handle customer queries and technical questions about your products and services.',
      backstory: 'Your agent will patiently listen to customer concerns, provide accurate technical information about your products and services, troubleshoot issues, and ensure every caller receives helpful support.'
    },
    { 
      id: 'appointment-setter', 
      name: 'APPOINTMENT SETTER', 
      description: 'Enable customers to book appointments and explore your services independently.',
      backstory: 'Your agent will guide callers through available services, check real-time availability, book appointments that match their needs, and handle rescheduling requests seamlessly.'
    },
    { 
      id: 'custom-pitch', 
      name: 'PITCH YOUR OWN', 
      description: 'Create a custom pitch tailored to your specific business needs and use case.',
      backstory: 'Design your own agent persona by providing details about your business, products, services, and specific goals. Your agent will be configured to handle your unique requirements.'
    },
  ];

  const handleSelectAudio = (fileName: string) => {
    setSelectedAudio(selectedAudio === fileName ? null : fileName);
  };

  const handleSelectLanguage = (languageId: string) => {
    setSelectedLanguage(selectedLanguage === languageId ? null : languageId);
  };

  const handleSelectVoiceAgent = (agentId: string) => {
    setSelectedVoiceAgent(selectedVoiceAgent === agentId ? null : agentId);
  };

  const handleSelectPitch = (pitchId: string) => {
    if (pitchId === 'custom-pitch') {
      setShowCustomPitchModal(true);
      // Don't select custom pitch until form is completed
    } else {
      setSelectedPitch(selectedPitch === pitchId ? null : pitchId);
    }
  };

  const handleSaveCustomPitch = (data: CustomPitchData) => {
    setCustomPitchData(data);
    setSelectedPitch('custom-pitch');
  };

  const handleCloseCustomPitchModal = () => {
    setShowCustomPitchModal(false);
    // If custom pitch was selected but form wasn't completed, deselect it
    if (selectedPitch === 'custom-pitch' && !customPitchData) {
      setSelectedPitch(null);
    }
  };

  const handleFileUpload = (file: File) => {
    const fileName = file.name;
    setSelectedAudio(fileName);
    console.log('File uploaded:', fileName);
  };

  const handleNameSubmit = (name: string) => {
    setUserName(name);
    setCurrentStep(2);
  };

  const handleStartCall = () => {
    setShowLoading(true);
  };

  const handleLoadingComplete = () => {
    // Keep loading screen visible, just show verification on top
    setShowVerification(true);
  };

  const handleVerificationComplete = (email: string, phone: string) => {
    setVerifiedPhone(phone);
    setShowVerification(false);
    setShowLoading(false);
    setShowCalling(true);
  };

  const handleContinueWeb = () => {
    setShowCalling(false);
    setShowWebInterface(true);
  };


  if (showWebInterface) {
    return (
      <WebVoiceInterface 
        userName={userName!}
        selectedVoiceAgent={voiceAgents.find(a => a.id === selectedVoiceAgent)?.name || ''}
        selectedLanguage={languages.find(l => l.id === selectedLanguage)?.name || ''}
      />
    );
  }

  if (showCalling) {
    return <CallingScreen userName={userName!} phoneNumber={verifiedPhone} onContinueWeb={handleContinueWeb} />;
  }

  if (showLoading) {
    return (
      <>
        <LoadingScreen
          userName={userName!}
          selectedAudio={selectedAudio!}
          selectedLanguage={languages.find(l => l.id === selectedLanguage)?.name || ''}
          selectedVoiceAgent={voiceAgents.find(a => a.id === selectedVoiceAgent)?.name || ''}
          selectedPitch={pitchOptions.find(p => p.id === selectedPitch)?.name || ''}
          onComplete={handleLoadingComplete}
        />
        {showVerification && (
          <VerificationModal onVerified={handleVerificationComplete} />
        )}
      </>
    );
  }

  return (
    <>
      <div className="min-h-screen flex items-center justify-center pt-8 sm:pt-12 relative" style={{ 
        fontFamily: 'Noyh-Bold, sans-serif'
      }}>
      {currentStep === 1 && (
        <WelcomeCard onNameSubmit={handleNameSubmit} />
      )}

      {currentStep === 2 && (
        <div className="w-full max-w-7xl px-4 sm:px-6">
          {/* Quick Demo Button */}
          <div className="mb-6 flex justify-center">
            <Button
              className="px-8 py-3 text-lg font-bold bg-yellow-400 text-black"
              onClick={() => {
                setSelectedAudio('crowded_office.wav');
                setSelectedLanguage('english');
                setSelectedVoiceAgent('diala-tone');
                setSelectedPitch('customer-support');
                setCurrentStep(4);
              }}
            >
              ⚡ Quick Demo - Use Defaults
            </Button>
          </div>

          {/* Title section */}
          <div className="mb-8 flex justify-center">
            <Card className="w-full max-w-3xl transform rotate-1 relative overflow-hidden">
              <CardHeader className="relative">
                <div className="absolute top-2 left-4 w-8 h-8 bg-[rgb(0,82,255)] border-2 border-black flex items-center justify-center">
                  <UilMusicNote className="h-4 w-4 text-white" />
                </div>
                <div className="absolute top-2 right-4 w-8 h-8 bg-[rgb(0,82,255)] border-2 border-black flex items-center justify-center">
                  <UilVolumeUp className="h-4 w-4 text-white" />
                </div>
                <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                  <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
                </div>
                <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
                <CardTitle className="text-5xl md:text-6xl font-black uppercase text-center text-black relative z-10">
                  CUSTOMIZE YOUR EXPERIENCE
                </CardTitle>
                <div className="flex justify-center items-center mt-3 gap-2">
                  <div className="w-3 h-3 bg-[rgb(0,82,255)] animate-pulse"></div>
                  <div className="w-2 h-6 bg-black"></div>
                  <div className="w-4 h-4 bg-[rgb(0,82,255)] animate-pulse delay-150"></div>
                  <div className="w-2 h-8 bg-black"></div>
                  <div className="w-3 h-3 bg-[rgb(0,82,255)] animate-pulse delay-300"></div>
                </div>
              </CardHeader>
            </Card>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Audio Selection Section */}
            <div className="space-y-4">
              <h3 className="text-2xl font-bold text-white text-center mb-4">Select Background Audio</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {mockAudioFiles.map((file) => (
                  <div key={file.name} className="">
                    <AudioCard
                      fileName={file.name}
                      category={file.category}
                      imageUrl={file.category === 'Crowded Office' ? "/CrowdedOfficeBlue.png" : file.category === 'Café Ambience' ? "/CrowdedCafeBlue.png" : file.category === 'Train Station' ? "/TrainstationBlue.png" : file.category === 'Library' ? "/LibraryBlue.png" : file.category === 'Co-Working Space' ? "/CoworkingBlue.png" : "/CrowdedOffice.png"}
                      isSelected={selectedAudio === file.name}
                      onSelect={handleSelectAudio}
                    />
                  </div>
                ))}
                <div className="">
                  <FileUploadCard onFileUpload={handleFileUpload} />
                </div>
              </div>
            </div>

            {/* Language Selection Section */}
            <div className="space-y-4">
              <h3 className="text-2xl font-bold text-white text-center mb-4">Select Language</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {languages.map((language) => (
                  <LanguageCard
                    key={language.id}
                    language={language}
                    isSelected={selectedLanguage === language.id}
                    onSelect={handleSelectLanguage}
                  />
                ))}
              </div>
            </div>
          </div>
          
          {/* Navigation arrow on the right */}
          <div className="fixed right-2 sm:right-4 md:right-8 top-1/2 transform -translate-y-1/2">
            <Button
              size="lg"
              className="p-2 sm:p-3 md:p-4 h-auto"
              disabled={!selectedAudio || !selectedLanguage}
              onClick={() => selectedAudio && selectedLanguage && setCurrentStep(3)}
              style={{
                animation: selectedAudio && selectedLanguage ? 'wobble 2s ease-in-out infinite' : 'none'
              }}
            >
              <UilArrowRight className="h-5 w-5 sm:h-6 sm:w-6 md:h-8 md:w-8" />
            </Button>
          </div>

          {/* Navigation buttons */}
          <div className="flex justify-center gap-4 mt-8">
            <Button
              onClick={() => setCurrentStep(1)}
              variant="default"
              size="lg"
              className="h-14 text-lg font-black uppercase bg-white hover:bg-gray-100 text-black border-2 border-black"
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              onClick={() => setCurrentStep(3)}
              disabled={!selectedAudio || !selectedLanguage}
              variant="default"
              size="lg"
              className={`h-14 text-lg font-black uppercase ${!selectedAudio || !selectedLanguage ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              <span className="flex items-center justify-center">
                CONTINUE
                <UilArrowRight className="ml-2 h-6 w-6" />
              </span>
            </Button>
          </div>

          <InfoSection step="customize" />
        </div>
      )}

      {currentStep === 3 && (
        <div className="w-full max-w-5xl px-4 sm:px-6">
          {/* Title section */}
          <div className="mb-8 flex justify-center">
            <Card className="w-full max-w-2xl transform -rotate-1 relative overflow-hidden">
              <CardHeader className="relative">
                <div className="absolute top-2 left-4 w-8 h-8 bg-[rgb(0,82,255)] border-2 border-black flex items-center justify-center">
                  <UilVolumeUp className="h-4 w-4 text-white" />
                </div>
                <div className="absolute top-2 right-4 w-8 h-8 bg-[rgb(0,82,255)] border-2 border-black flex items-center justify-center">
                  <UilMusicNote className="h-4 w-4 text-white" />
                </div>
                <div className="absolute bottom-3 left-6 w-6 h-6 bg-yellow-400 border-2 border-black rotate-12">
                  <div className="w-2 h-2 bg-black absolute top-1 left-1"></div>
                </div>
                <div className="absolute bottom-2 right-8 w-4 h-4 bg-red-500 border-2 border-black -rotate-12"></div>
                <CardTitle className="text-6xl md:text-7xl font-black uppercase text-center text-black relative z-10">
                  SELECT A VOICE & PITCH
                </CardTitle>
                <div className="flex justify-center items-center mt-3 gap-2">
                  <div className="w-3 h-3 bg-[rgb(0,82,255)] animate-pulse"></div>
                  <div className="w-2 h-6 bg-black"></div>
                  <div className="w-4 h-4 bg-[rgb(0,82,255)] animate-pulse delay-150"></div>
                  <div className="w-2 h-8 bg-black"></div>
                  <div className="w-3 h-3 bg-[rgb(0,82,255)] animate-pulse delay-300"></div>
                </div>
              </CardHeader>
            </Card>
          </div>
          
          {/* Voice Selection */}
          <div className="mb-12">
            <h3 className="text-2xl font-bold text-white text-center mb-6">Select a Voice</h3>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 md:gap-8">
              {voiceAgents.slice(0, 3).map((agent) => (
                <VoiceAgentCard
                  key={agent.id}
                  agent={agent}
                  isSelected={selectedVoiceAgent === agent.id}
                  onSelect={handleSelectVoiceAgent}
                />
              ))}
            </div>
            
            {/* Voice Cloning Premium Feature */}
            <div className="mt-8">
              <PremiumFeatureCard 
                title="VOICE CLONING"
                description="Clone any voice with just 30 seconds of audio. Create perfect replicas of yourself or your team."
                price="$49/month"
              />
            </div>
          </div>

          {/* Pitch Selection */}
          <div className="mb-12">
            <h3 className="text-2xl font-bold text-white text-center mb-6">Select a Pitch</h3>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {pitchOptions.map((pitch) => (
                <PitchCard
                  key={pitch.id}
                  pitch={pitch}
                  isSelected={selectedPitch === pitch.id}
                  onSelect={handleSelectPitch}
                />
              ))}
            </div>
          </div>

          {/* Custom Pitch Modal */}
          <CustomPitchModal
            isOpen={showCustomPitchModal}
            onClose={handleCloseCustomPitchModal}
            onSave={handleSaveCustomPitch}
          />

          {/* Navigation arrows */}
          <div className="fixed left-2 sm:left-4 md:left-8 top-1/2 transform -translate-y-1/2">
            <Button
              size="lg"
              className="p-2 sm:p-3 md:p-4 h-auto"
              onClick={() => setCurrentStep(2)}
            >
              <UilArrowLeft className="h-5 w-5 sm:h-6 sm:w-6 md:h-8 md:w-8 text-white" />
            </Button>
          </div>
          
          <div className="fixed right-2 sm:right-4 md:right-8 top-1/2 transform -translate-y-1/2">
            <Button
              size="lg"
              className="p-2 sm:p-3 md:p-4 h-auto"
              disabled={!selectedVoiceAgent || !selectedPitch}
              onClick={() => selectedVoiceAgent && selectedPitch && setCurrentStep(4)}
              style={{
                animation: selectedVoiceAgent && selectedPitch ? 'wobble 2s ease-in-out infinite' : 'none'
              }}
            >
              <UilArrowRight className="h-5 w-5 sm:h-6 sm:w-6 md:h-8 md:w-8" />
            </Button>
          </div>

          {/* Navigation buttons */}
          <div className="flex justify-center gap-4 mt-8">
            <Button
              onClick={() => setCurrentStep(2)}
              variant="default"
              size="lg"
              className="h-14 text-lg font-black uppercase bg-white hover:bg-gray-100 text-black border-2 border-black"
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              onClick={() => setCurrentStep(4)}
              disabled={!selectedVoiceAgent || !selectedPitch}
              variant="default"
              size="lg"
              className={`h-14 text-lg font-black uppercase ${!selectedVoiceAgent || !selectedPitch ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              <span className="flex items-center justify-center">
                CONTINUE
                <UilArrowRight className="ml-2 h-6 w-6" />
              </span>
            </Button>
          </div>

          <InfoSection step="voice" />
        </div>
      )}

      {currentStep === 4 && (
        <div className="w-full max-w-6xl px-4 sm:px-6">
          <div className="flex flex-col items-center justify-center text-center relative z-10">
            {/* Main celebration card */}
            <div className="relative">
              {/* Rotating stars around the main card */}
              <div className="absolute -top-20 -left-20 text-6xl animate-spin" style={{animationDuration: '8s'}}>⭐</div>
              <div className="absolute -top-8 -right-8 w-12 h-12 bg-[rgb(0,82,255)] border-4 border-black animate-pulse"></div>
              <div className="absolute -bottom-12 -left-8 w-16 h-16 bg-black rotate-45"></div>
              
              <Card className="bg-gradient-to-br from-yellow-50 to-orange-50 transform rotate-1 relative overflow-hidden">
                <CardHeader className="bg-[rgb(0,82,255)] p-8">
                  <CardTitle className="text-5xl md:text-6xl font-black text-white uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                    READY TO DIAL!
                  </CardTitle>
                  <p className="text-xl text-white mt-4 font-bold">Your AI voice agent is configured and ready!</p>
                </CardHeader>
                
                <CardContent className="p-8 space-y-6">
                  {/* Configuration summary with animated cards */}
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    {/* Audio card */}
                    <div className="bg-white border-4 border-black p-4 shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all">
                      <UilMusicNote className="h-8 w-8 text-[rgb(0,82,255)] mb-2" />
                      <h3 className="font-black text-lg mb-1 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>AUDIO</h3>
                      <p className="text-lg font-bold text-black">
                        {selectedAudio?.replace('.wav', '').replace(/_/g, ' ')}
                      </p>
                    </div>

                    {/* Language card */}
                    <div className="bg-white border-4 border-black p-4 shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all">
                      <div className="text-2xl mb-2">{languages.find(l => l.id === selectedLanguage)?.flag}</div>
                      <h3 className="font-black text-lg mb-1 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>LANGUAGE</h3>
                      <p className="text-lg font-bold text-black">
                        {languages.find(l => l.id === selectedLanguage)?.name}
                      </p>
                    </div>

                    {/* Voice agent card */}
                    <div className="bg-white border-4 border-black p-4 shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all">
                      <UilRobot className="h-8 w-8 text-[rgb(0,82,255)] mb-2" />
                      <h3 className="font-black text-lg mb-1 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>VOICE</h3>
                      <p className="text-lg font-bold text-black">
                        {voiceAgents.find(a => a.id === selectedVoiceAgent)?.name}
                      </p>
                    </div>

                    {/* Pitch card */}
                    <div className="bg-white border-4 border-black p-4 shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all">
                      <UilBriefcase className="h-8 w-8 text-[rgb(0,82,255)] mb-2" />
                      <h3 className="font-black text-lg mb-1 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>PITCH</h3>
                      <p className="text-lg font-bold text-black">
                        {selectedPitch === 'custom-pitch' && customPitchData 
                          ? customPitchData.businessName 
                          : pitchOptions.find(p => p.id === selectedPitch)?.name}
                      </p>
                    </div>
                  </div>

                  {/* Call-to-action button */}
                  <div className="flex justify-center mt-8">
                    <Button
                      className="px-12 py-4 text-xl font-black uppercase bg-[rgb(255,165,0)]"
                      onClick={handleStartCall}
                      style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                    >
                      <span className="flex items-center gap-2">
                        START DIALING NOW
                        <UilPhone className="h-6 w-6" />
                      </span>
                    </Button>
                  </div>

                  {/* Configuration summary */}
                  <div className="mt-6 p-4 bg-white border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <p className="text-lg font-medium text-gray-700">
                      <span className="font-black text-black uppercase">Configuration:</span> {voiceAgents.find(a => a.id === selectedVoiceAgent)?.name} voice • {languages.find(l => l.id === selectedLanguage)?.name} ({languages.find(l => l.id === selectedLanguage)?.accent}) • {selectedAudio?.replace('.wav', '').replace(/_/g, ' ')} background • {pitchOptions.find(p => p.id === selectedPitch)?.name} pitch
                    </p>
                  </div>
                </CardContent>
              </Card>
            </div>
            
          {/* Navigation buttons */}
          <div className="flex justify-center gap-4 mt-8">
            <Button
              onClick={() => setCurrentStep(3)}
              variant="default"
              size="lg"
              className="h-14 text-lg font-black uppercase bg-white hover:bg-gray-100 text-black border-2 border-black"
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              onClick={handleStartCall}
              variant="default"
              size="lg"
              className="h-14 text-lg font-black uppercase bg-[rgb(255,165,0)] hover:bg-orange-600 text-black"
            >
              <span className="flex items-center justify-center">
                START DIALING NOW
                <UilPhone className="ml-2 h-6 w-6" />
              </span>
            </Button>
          </div>

          <InfoSection step="complete" />
        </div>
      )}
    </>
  );
}


================================================
FILE: src/components/custom/audio-card.tsx
================================================
import * as React from 'react';
import { Button } from '../ui/button';
import { Slider } from '../ui/slider';
import { UilPlay, UilPause, UilSquare, UilStepBackward, UilStepForward, UilVolumeUp, UilVolumeOff, UilMusicNote } from '@tooni/iconscout-unicons-react';

// Star component
const Star15 = ({ color, size, stroke, strokeWidth, pathClassName, width, height, ...props }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 200 200"
    width={size ?? width}
    height={size ?? height}
    {...props}
  >
    <path
      fill={color ?? "currentColor"}
      stroke={stroke}
      strokeWidth={strokeWidth}
      className={pathClassName}
      d="M95.713 9.378a6 6 0 0 1 8.574 0l9.515 9.717a6 6 0 0 0 6.496 1.381l12.645-5.007a6 6 0 0 1 7.833 3.487l4.74 12.748a6 6 0 0 0 5.372 3.903l13.589.57a6 6 0 0 1 5.737 6.371l-.855 13.573a6 6 0 0 0 3.321 5.752l12.182 6.046a6 6 0 0 1 2.649 8.154l-6.301 12.053a6 6 0 0 0 .694 6.604l8.67 10.479a6 6 0 0 1-.897 8.527l-10.658 8.447a6 6 0 0 0-2.052 6.316l3.657 13.099a6 6 0 0 1-4.287 7.426l-13.173 3.381a6 6 0 0 0-4.443 4.936l-1.987 13.454a6 6 0 0 1-6.936 5.04l-13.41-2.269a6 6 0 0 0-6.066 2.701l-7.287 11.483a6 6 0 0 1-8.387 1.783l-11.327-7.527a6 6 0 0 0-6.641 0l-11.328 7.527a6 6 0 0 1-8.387-1.783l-7.287-11.483a6 6 0 0 0-6.066-2.701l-13.41 2.269a6 6 0 0 1-6.936-5.04l-1.987-13.454a6 6 0 0 0-4.443-4.936l-13.173-3.381a6 6 0 0 1-4.287-7.426l3.657-13.099a6 6 0 0 0-2.052-6.316l-10.658-8.447a6 6 0 0 1-.897-8.527l8.67-10.479a6 6 0 0 0 .694-6.604l-6.301-12.053a6 6 0 0 1 2.65-8.154l12.181-6.046a6 6 0 0 0 3.32-5.752l-.854-13.573a6 6 0 0 1 5.737-6.372l13.588-.569a6 6 0 0 0 5.373-3.903l4.74-12.748a6 6 0 0 1 7.833-3.487l12.645 5.007a6 6 0 0 0 6.496-1.38z"
    />
  </svg>
);
import ImageCard from '../ui/image-card';

interface AudioCardProps {
  fileName: string;
  imageUrl: string;
  isSelected: boolean;
  onSelect: (fileName: string) => void;
  category?: string;
}

const AudioCard: React.FC<AudioCardProps> = ({ fileName, imageUrl, isSelected, onSelect, category = 'audio' }) => {
  const baseFileName = fileName.split('.').slice(0, -1).join('.');
  const [isPlaying, setIsPlaying] = React.useState(false);
  const [currentTime, setCurrentTime] = React.useState([0]);
  const [duration, setDuration] = React.useState(30);
  const [volume, setVolume] = React.useState([80]);
  const [isMuted, setIsMuted] = React.useState(false);
  const [showVolumeSlider, setShowVolumeSlider] = React.useState(false);
  const [isLoaded, setIsLoaded] = React.useState(false);
  const audioRef = React.useRef<HTMLAudioElement>(null);
  const intervalRef = React.useRef<NodeJS.Timeout | null>(null);

  // Create audio URL from filename
  const audioUrl = `/audio/${fileName}`;

  // Initialize audio element
  React.useEffect(() => {
    if (audioRef.current) {
      const audio = audioRef.current;
      
      const handleLoadedData = () => {
        setDuration(audio.duration || 30);
        setIsLoaded(true);
      };
      
      const handleTimeUpdate = () => {
        setCurrentTime([audio.currentTime]);
      };
      
      const handleEnded = () => {
        setIsPlaying(false);
        setCurrentTime([0]);
        if (intervalRef.current) {
          clearInterval(intervalRef.current);
          intervalRef.current = null;
        }
      };
      
      audio.addEventListener('loadeddata', handleLoadedData);
      audio.addEventListener('timeupdate', handleTimeUpdate);
      audio.addEventListener('ended', handleEnded);
      
      return () => {
        audio.removeEventListener('loadeddata', handleLoadedData);
        audio.removeEventListener('timeupdate', handleTimeUpdate);
        audio.removeEventListener('ended', handleEnded);
      };
    }
  }, []);

  // Handle volume changes
  React.useEffect(() => {
    if (audioRef.current) {
      audioRef.current.volume = isMuted ? 0 : volume[0] / 100;
    }
  }, [volume, isMuted]);

  // Auto-play when card is selected
  React.useEffect(() => {
    if (isSelected && isLoaded && audioRef.current) {
      audioRef.current.currentTime = 0;
      setIsMuted(false);  // Unmute when selected
      audioRef.current.play().then(() => {
        setIsPlaying(true);
      }).catch((error) => {
        console.log('Auto-play failed:', error);
      });
    } else if (!isSelected && isPlaying && audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      setIsPlaying(false);
      setCurrentTime([0]);
      setIsMuted(true);  // Mute when deselected
    }
  }, [isSelected, isLoaded]);

  // Handle play/pause
  const togglePlayPause = () => {
    if (audioRef.current) {
      if (isPlaying) {
        audioRef.current.pause();
        if (intervalRef.current) {
          clearInterval(intervalRef.current);
          intervalRef.current = null;
        }
      } else {
        audioRef.current.play();
      }
      setIsPlaying(!isPlaying);
    }
  };

  // Handle timeline seek
  const handleTimelineChange = (value: number[]) => {
    const newTime = value[0];
    setCurrentTime([newTime]);
    if (audioRef.current) {
      audioRef.current.currentTime = newTime;
    }
  };

  // Handle rewind (go back 10 seconds)
  const handleRewind = () => {
    if (audioRef.current) {
      const newTime = Math.max(0, audioRef.current.currentTime - 10);
      audioRef.current.currentTime = newTime;
      setCurrentTime([newTime]);
    }
  };

  // Handle fast forward (go forward 10 seconds)
  const handleFastForward = () => {
    if (audioRef.current) {
      const newTime = Math.min(duration, audioRef.current.currentTime + 10);
      audioRef.current.currentTime = newTime;
      setCurrentTime([newTime]);
    }
  };

  // Format time for display
  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  return (
    <div className="relative">
      {/* Selection badge */}
      {isSelected && (
        <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
          <div className="relative">
            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
              <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
            </div>
            <div className="absolute inset-0 flex items-center justify-center">
              <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                SELECTED
              </span>
            </div>
          </div>
        </div>
      )}
      <div
        className={`
          relative w-full h-80
          border-4 border-black
          flex flex-col
          transition-all duration-200
          ${isSelected ? 'scale-[1.02] shadow-[8px_8px_0_rgba(0,0,0,1)]' : 'shadow-[4px_4px_0_rgba(0,0,0,1)]'}
          hover:scale-[1.02] hover:shadow-[6px_6px_0_rgba(0,0,0,1)]
          cursor-pointer overflow-hidden
        `}
        onClick={() => onSelect(fileName)}
      >
      {/* Category label at top */}
      <div className="bg-[rgb(0,82,255)] text-white px-4 py-3 text-sm border-b-4 border-black flex items-center gap-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
        <UilMusicNote className="h-4 w-4 text-white" />
        {category}
      </div>

      {/* Main content area with image */}
      <div className="flex-grow relative overflow-hidden p-3 card-body">
        <div className="relative w-full h-full overflow-hidden border-4 border-black">
          <img
            src={imageUrl}
            alt=""
            className="absolute inset-0 w-full h-full object-cover"
          />
        </div>
      </div>

      {/* Bottom section with timeline and controls */}
      <div className="p-3 card-body">
        {/* Timeline slider with controls */}
        <div className="flex items-center gap-3">
          {/* Play/Pause button on the left */}
          <Button
            size="sm"
            variant="reverse"
            className="p-1 h-auto"
            onClick={(e) => {
              e.stopPropagation();
              togglePlayPause();
            }}
          >
            {isPlaying ? (
              <UilPause className="h-3 w-3 text-black" />
            ) : (
              <UilPlay className="h-3 w-3 text-black" />
            )}
          </Button>
          
          <Slider
            value={currentTime}
            onValueChange={handleTimelineChange}
            max={duration}
            step={0.1}
            className="flex-1 [&_[data-orientation=horizontal]]:h-2 [&_[data-orientation=horizontal]_span[data-orientation=horizontal]]:h-2"
          />
          
          {/* Rewind, Volume, and Fast Forward buttons on the right */}
          <div className="flex items-center gap-1">
            <Button
              size="sm"
              variant="reverse"
              className="p-1 h-auto"
              onClick={(e) => {
                e.stopPropagation();
                handleRewind();
              }}
            >
              <UilStepBackward className="h-3 w-3 text-black" />
            </Button>
            <div 
              className="relative"
              onMouseEnter={() => setShowVolumeSlider(true)}
              onMouseLeave={() => setShowVolumeSlider(false)}
            >
              {/* Extended hover area for smooth interaction */}
              {showVolumeSlider && (
                <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-12 h-28 z-10" />
              )}
              
              {/* Volume slider - appears above button on hover */}
              {showVolumeSlider && (
                <div className="absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 bg-[rgb(0,82,255)] border-2 border-black p-2 shadow-[2px_2px_0_rgba(0,0,0,1)] z-20">
                  <div className="h-16 flex items-center justify-center py-1.5">
                    <div style={{ '--tw-shadow': 'none', '--tw-shadow-colored': 'none' } as React.CSSProperties}>
                      <Slider
                        value={volume}
                        onValueChange={(value) => {
                          setVolume(value);
                          if (value[0] > 0) setIsMuted(false);
                          if (value[0] === 0) setIsMuted(true);
                        }}
                        max={100}
                        step={1}
                        orientation="vertical"
                        className="h-14 w-3 px-0 py-1.5 [&_[data-orientation=vertical]]:w-2 [&_[data-orientation=vertical]]:h-full [&_span[role=slider]]:!w-3 [&_span[role=slider]]:!h-3 [&_span[role=slider]]:!border-2 [&_span[role=slider]]:!shadow-none [&_span[role=slider]]:shadow-none"
                      />
                    </div>
                  </div>
                </div>
              )}
              
              <Button
                size="sm"
                variant="reverse"
                className="p-1 h-auto"
                onClick={(e) => {
                  e.stopPropagation();
                  setIsMuted(!isMuted);
                }}
              >
                {isMuted ? (
                  <UilVolumeOff className="h-3 w-3 text-black" />
                ) : (
                  <UilVolumeUp className="h-3 w-3 text-black" />
                )}
              </Button>
            </div>
            <Button
              size="sm"
              variant="reverse"
              className="p-1 h-auto"
              onClick={(e) => {
                e.stopPropagation();
                handleFastForward();
              }}
            >
              <UilStepBackward className="h-3 w-3 text-black scale-x-[-1]" />
            </Button>
          </div>
        </div>
      </div>
      {/* Hidden audio element */}
      <audio
        ref={audioRef}
        src={audioUrl}
        preload="metadata"
      />
    </div>
    </div>
  );
};

export default AudioCard;


================================================
FILE: src/components/custom/call-analytics-card.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { UilChart, UilCommentAltMessage, UilExclamationTriangle, UilCheckCircle } from '@tooni/iconscout-unicons-react';
import { EnhancedCall } from '@/types/calls';
import { cn } from '@/lib/utils';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

interface CallAnalyticsCardProps {
  analytics: CallAnalytics;
}

export default function CallAnalyticsCard({ analytics }: CallAnalyticsCardProps) {
  return (
    <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
      <CardHeader className="border-b-4 border-black bg-cyan-400">
        <div className="flex items-center gap-3">
          <UilChart className="h-6 w-6 text-white" />
          <CardTitle className="text-xl font-black uppercase text-white">CALL ANALYTICS</CardTitle>
        </div>
      </CardHeader>
      <CardContent className="p-6 space-y-6">
        {/* Sentiment Analysis */}
        <div>
          <h3 className="text-sm font-black uppercase text-gray-600 mb-2">Sentiment Analysis</h3>
          <Card className="border-2 border-black bg-cyan-50">
            <CardContent className="p-4">
              <ResponsiveContainer width="100%" height={120}>
                <LineChart data={analytics.sentimentHistory}>
                  <XAxis 
                    dataKey="time" 
                    tick={{ fontSize: 10, fontWeight: 'bold' }}
                  />
                  <YAxis 
                    domain={[-100, 100]}
                    tick={{ fontSize: 10, fontWeight: 'bold' }}
                  />
                  <CartesianGrid strokeDasharray="3 3" />
                  <Tooltip />
                  <Line 
                    type="monotone" 
                    dataKey="value" 
                    stroke="#000" 
                    strokeWidth={2}
                    dot={{ fill: '#000', strokeWidth: 2 }}
                  />
                </LineChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </div>

        {/* Talk Ratio */}
        <div>
          <h3 className="text-sm font-black uppercase text-gray-600 mb-2">Talk Ratio</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card className="border-2 border-black bg-cyan-50">
              <CardContent className="p-3">
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-black uppercase text-gray-600">Agent</span>
                    <span className="font-black">{analytics.talkRatio.agent}%</span>
                  </div>
                  <Progress value={analytics.talkRatio.agent} className="h-2" />
                </div>
              </CardContent>
            </Card>

            <Card className="border-2 border-black bg-cyan-50">
              <CardContent className="p-3">
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-black uppercase text-gray-600">Customer</span>
                    <span className="font-black">{analytics.talkRatio.customer}%</span>
                  </div>
                  <Progress value={analytics.talkRatio.customer} className="h-2" />
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Keywords & Insights */}
        <div>
          <h3 className="text-sm font-black uppercase text-gray-600 mb-2">Keywords & Insights</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card className="border-2 border-black bg-cyan-50">
              <CardContent className="p-3">
                <div className="space-y-2">
                  <span className="text-sm font-black uppercase text-gray-600 block">Keywords Detected</span>
                  <div className="flex flex-wrap gap-1">
                    {analytics.keywordsDetected.map((keyword, index) => (
                      <Badge key={index} className="font-black uppercase border-2 border-black bg-blue-100 text-blue-800">
                        {keyword}
                      </Badge>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="border-2 border-black bg-cyan-50">
              <CardContent className="p-3">
                <div className="space-y-2">
                  <span className="text-sm font-black uppercase text-gray-600 block">Objections Raised</span>
                  <div className="flex flex-wrap gap-1">
                    {analytics.objectionsRaised.map((objection, index) => (
                      <Badge key={index} className="font-black uppercase border-2 border-black bg-red-100 text-red-800">
                        {objection}
                      </Badge>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="border-2 border-black bg-cyan-50">
              <CardContent className="p-3">
                <div className="space-y-2">
                  <span className="text-sm font-black uppercase text-gray-600 block">Commitments Made</span>
                  <div className="flex flex-wrap gap-1">
                    {analytics.commitmentsMade.map((commitment, index) => (
                      <Badge key={index} className="font-black uppercase border-2 border-black bg-green-100 text-green-800">
                        {commitment}
                      </Badge>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Next Steps */}
        <div>
          <h3 className="text-sm font-black uppercase text-gray-600 mb-2">Next Steps</h3>
          <Card className="border-2 border-black bg-cyan-50">
            <CardContent className="p-3">
              <div className="space-y-2">
                {analytics.nextSteps.map((step, index) => (
                  <div key={index} className="flex items-center gap-2">
                    <UilCheckCircle className="h-4 w-4 text-green-600" />
                    <span className="font-medium">{step}</span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/custom/call-control-panel.tsx
================================================
"use client";

import * as React from "react";
import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { CallStatus } from "@/types";
import { startCall } from "@/lib/api";
import { CallStatusIndicator } from "./call-status-indicator";

export function CallControlPanel() {
  const [phoneNumber, setPhoneNumber] = useState("");
  const [initialMessage, setInitialMessage] = useState("Hello, I am a voice agent.");
  const [status, setStatus] = useState<CallStatus>('IDLE');
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    console.info('[GUI] CallControlPanel mounted and ready.');
  }, []);

  const handlePhoneNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    console.log(`[GUI] User is typing in phone number field. New value: "${value}"`);
    setPhoneNumber(value);
  };

  const handleInitialMessageChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    console.log(`[GUI] User is typing in initial message field. New value: "${value}"`);
    setInitialMessage(value);
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    console.log('[GUI] User clicked "Initiate Call". Form submission initiated.');

    if (!phoneNumber || !initialMessage) {
        console.warn('[GUI] Submission halted: Phone number or message is empty.');
        setError('Both phone number and message are required.');
        setStatus('ERROR');
        return;
    }

    console.info(`[GUI] Setting call status to 'DIALING'.`);
    setStatus('DIALING');
    setError(null);

    const callDetails = {
      phone_number: phoneNumber,
      initial_message: initialMessage,
    };

    console.log('[GUI] Attempting to call backend API with details:', callDetails);

    try {
      const response = await startCall(callDetails);
      console.info('[GUI] API call successful. Response:', response);
      
      console.info(`[GUI] Setting call status to 'CONNECTED'.`);
      setStatus('CONNECTED');

    } catch (err: any) {
      console.error('[GUI] API call failed.', {
        errorMessage: err.message,
        originalError: err,
      });
      setError(err.message);
      
      console.info(`[GUI] Setting call status to 'ERROR'.`);
      setStatus('ERROR');
    }
  };

  const isCalling = status === 'DIALING' || status === 'CONNECTED';

  return (
    <Card className="w-full max-w-md border-4 border-border shadow-[8px_8px_0px_0px_var(--color-border)] hover:shadow-[12px_12px_0px_0px_var(--color-border)] transition-all duration-200">
      <CardHeader className="border-b-4 border-border">
        <div className="flex justify-between items-center">
          <CardTitle className="text-2xl font-black uppercase">Voice Agent Control</CardTitle>
          <CallStatusIndicator status={status} />
        </div>
      </CardHeader>
      <CardContent className="pt-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="phone" className="text-sm font-black block mb-2 uppercase tracking-wider">Phone Number</label>
            <Input
              id="phone"
              type="tel"
              placeholder="e.g., +15551234567"
              value={phoneNumber}
              onChange={handlePhoneNumberChange}
              disabled={isCalling}
              required
              className="border-4 rounded-[3px]"
            />
          </div>
          <div>
            <label htmlFor="message" className="text-sm font-black block mb-2 uppercase tracking-wider">Initial Message</label>
            <Textarea
              id="message"
              placeholder="Enter the first sentence for the agent to say..."
              value={initialMessage}
              onChange={handleInitialMessageChange}
              disabled={isCalling}
              required
              className="border-4 rounded-[3px] min-h-[100px]"
            />
          </div>
          <Button 
            type="submit" 
            className="w-full text-lg font-black uppercase tracking-wider" 
            size="lg"
            disabled={isCalling}
          >
            {isCalling ? 'Calling...' : 'Initiate Call'}
          </Button>
          {error && (
            <div className="border-4 border-border bg-red-500 text-white p-3 shadow-[4px_4px_0px_0px_var(--color-border)]">
              <p className="text-sm font-black uppercase tracking-wider">{error}</p>
            </div>
          )}
        </form>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/custom/call-reasoning-card.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { cn } from '@/lib/utils';
import { CallReasoning } from '@/types/calls';
import {
  UilBrain,
  UilCommentAltNotes,
  UilExclamationTriangle,
  UilLightbulbAlt,
  UilChartLine,
  UilSmile,
  UilMeh,
  UilFrown,
  UilConfused
} from '@tooni/iconscout-unicons-react';
import { EnhancedCall } from '@/types/calls';

interface CallReasoningCardProps {
  reasoning: CallReasoning;
}

export default function CallReasoningCard({ reasoning }: CallReasoningCardProps) {
  const moodIcons = {
    positive: <UilSmile className="h-5 w-5 text-green-500" />,
    neutral: <UilMeh className="h-5 w-5 text-gray-500" />,
    negative: <UilFrown className="h-5 w-5 text-red-500" />,
    confused: <UilConfused className="h-5 w-5 text-yellow-500" />
  };

  return (
    <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
      <CardHeader className="border-b-4 border-black bg-violet-400">
        <div className="flex items-center gap-3">
          <UilBrain className="h-6 w-6 text-white" />
          <CardTitle className="text-xl font-black uppercase text-white">AI REASONING</CardTitle>
        </div>
      </CardHeader>
      <CardContent className="p-6 space-y-6">
        {/* Current Objective */}
        <div>
          <h3 className="text-sm font-black uppercase text-gray-600 mb-2">Current Objective</h3>
          <Card className="border-2 border-black bg-violet-50">
            <CardContent className="p-3">
              <p className="font-medium">{reasoning.currentObjective}</p>
            </CardContent>
          </Card>
        </div>

        {/* Next Points */}
        <div>
          <h3 className="text-sm font-black uppercase text-gray-600 mb-2">Next Points</h3>
          <div className="space-y-2">
            {reasoning.nextPoints.map((point, index) => (
              <Card key={index} className="border-2 border-black bg-violet-50">
                <CardContent className="p-3">
                  <p className="font-medium">{point}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Context Analysis */}
        <div>
          <h3 className="text-sm font-black uppercase text-gray-600 mb-2">Context Analysis</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card className="border-2 border-black bg-violet-50">
              <CardContent className="p-3">
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-black uppercase text-gray-600">Customer Mood</span>
                    <Badge className={cn(
                      "font-black uppercase border-2 border-black",
                      reasoning.contextAnalysis.customerMood === 'positive' && "bg-green-400 text-black",
                      reasoning.contextAnalysis.customerMood === 'neutral' && "bg-yellow-400 text-black",
                      reasoning.contextAnalysis.customerMood === 'negative' && "bg-red-400 text-black"
                    )}>
                      {reasoning.contextAnalysis.customerMood.toUpperCase()}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-black uppercase text-gray-600">Engagement</span>
                    <span className="font-black">{reasoning.contextAnalysis.engagementLevel}%</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="border-2 border-black bg-violet-50">
              <CardContent className="p-3">
                <div className="space-y-2">
                  <div>
                    <span className="text-sm font-black uppercase text-gray-600 block mb-1">Objections</span>
                    <div className="flex flex-wrap gap-1">
                      {reasoning.contextAnalysis.objections.map((objection, index) => (
                        <Badge key={index} className="font-black uppercase border-2 border-black bg-red-100 text-red-800">
                          {objection}
                        </Badge>
                      ))}
                    </div>
                  </div>
                  <div>
                    <span className="text-sm font-black uppercase text-gray-600 block mb-1">Interests</span>
                    <div className="flex flex-wrap gap-1">
                      {reasoning.contextAnalysis.interests.map((interest, index) => (
                        <Badge key={index} className="font-black uppercase border-2 border-black bg-green-100 text-green-800">
                          {interest}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Suggested Responses */}
        <div>
          <h3 className="text-sm font-black uppercase text-gray-600 mb-2">Suggested Responses</h3>
          <div className="space-y-4">
            <Card className="border-2 border-black bg-violet-50">
              <CardContent className="p-3">
                <div className="space-y-2">
                  <span className="text-sm font-black uppercase text-gray-600 block">Primary Response</span>
                  <p className="font-medium">{reasoning.suggestedResponses.primary}</p>
                </div>
              </CardContent>
            </Card>

            <div className="space-y-2">
              <span className="text-sm font-black uppercase text-gray-600 block">Alternative Responses</span>
              {reasoning.suggestedResponses.alternatives.map((response, index) => (
                <Card key={index} className="border-2 border-black bg-violet-50">
                  <CardContent className="p-3">
                    <p className="font-medium">{response}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/custom/call-status-indicator.tsx
================================================
"use client";

import * as React from "react";
import { Badge } from "@/components/ui/badge";
import { CallStatus } from "@/types";

interface CallStatusIndicatorProps {
  status: CallStatus;
}

export function CallStatusIndicator({ status }: CallStatusIndicatorProps) {
  React.useEffect(() => {
    console.log('[GUI] CallStatusIndicator rendered with status:', status);
  }, [status]);

  const getStatusConfig = () => {
    switch (status) {
      case 'IDLE':
        return { variant: 'outline' as const, text: 'Ready', bgColor: 'bg-gray-200' };
      case 'DIALING':
        return { variant: 'secondary' as const, text: 'Dialing...', bgColor: 'bg-yellow-300' };
      case 'CONNECTED':
        return { variant: 'default' as const, text: 'Connected', bgColor: 'bg-green-400' };
      case 'DISCONNECTED':
        return { variant: 'outline' as const, text: 'Disconnected', bgColor: 'bg-gray-400' };
      case 'ERROR':
        return { variant: 'destructive' as const, text: 'Error', bgColor: 'bg-red-500' };
      default:
        return { variant: 'outline' as const, text: 'Unknown', bgColor: 'bg-gray-200' };
    }
  };

  const { variant, text, bgColor } = getStatusConfig();

  return (
    <div className="flex items-center gap-2">
      <div className={`w-3 h-3 ${bgColor} border-2 border-black animate-pulse`} />
      <Badge variant={variant} className="tracking-wider">
        {text}
      </Badge>
    </div>
  );
}


================================================
FILE: src/components/custom/calling-screen.tsx
================================================
'use client';

import * as React from 'react';
import { Card } from '../ui/card';
import { UilPhone, UilTimes, UilMobileAndroid, UilDesktop } from '@tooni/iconscout-unicons-react';

interface CallingScreenProps {
  userName: string;
  phoneNumber: string;
  onContinueWeb: () => void;
}

export default function CallingScreen({ userName, phoneNumber, onContinueWeb }: CallingScreenProps) {
  const [fadeIn, setFadeIn] = React.useState(false);
  const [showPhone, setShowPhone] = React.useState(false);
  const [showText, setShowText] = React.useState(false);
  const [vibrate, setVibrate] = React.useState(false);
  const [showInfo, setShowInfo] = React.useState(false);
  const [showTimeout, setShowTimeout] = React.useState(false);
  const [showWebOption, setShowWebOption] = React.useState(false);
  const [elapsedTime, setElapsedTime] = React.useState(0);

  React.useEffect(() => {
    // Start fade in
    setTimeout(() => setFadeIn(true), 100);
    
    // Show phone icon
    setTimeout(() => setShowPhone(true), 800);
    
    // Show text
    setTimeout(() => setShowText(true), 1500);
    
    // Start vibration animation
    setTimeout(() => setVibrate(true), 2500);
    
    // Show caller info
    setTimeout(() => setShowInfo(true), 3000);

    // Trigger browser vibration if available
    if (navigator.vibrate) {
      setTimeout(() => {
        navigator.vibrate([200, 100, 200, 100, 200]);
      }, 2500);
    }

    // Show web option in first 4 seconds
    setTimeout(() => setShowWebOption(true), 500);
    setTimeout(() => setShowWebOption(false), 4000);

    // Start elapsed timer when vibration starts
    setTimeout(() => {
      const timer = setInterval(() => {
        setElapsedTime(prev => prev + 1);
      }, 1000);
      
      // Cleanup timer after 30 seconds
      setTimeout(() => clearInterval(timer), 30000);
    }, 2500);

    // Show timeout message after 30 seconds
    setTimeout(() => {
      setShowTimeout(true);
      setVibrate(false); // Stop vibration animation
    }, 30000);
  }, []);

  return (
    <div className={`fixed inset-0 bg-black transition-opacity duration-1000 ${fadeIn ? 'opacity-100' : 'opacity-0'}`}>
      <div className="min-h-screen flex flex-col items-center justify-center p-4" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
        
        {/* Redesigned green element with DIALA IS CALLING */}
        <div className={`
          relative transition-all duration-1000 transform
          ${showPhone ? 'translate-y-0 opacity-100 scale-100' : 'translate-y-10 opacity-0 scale-50'}
        `}>
          <div className={`
            relative bg-gradient-to-br from-green-400 to-green-600 border-8 border-green-900
            shadow-[16px_16px_0_rgba(20,50,20,1)] overflow-hidden
            ${vibrate ? 'animate-shake' : ''}
          `}>
            {/* Background pattern */}
            <div className="absolute inset-0 opacity-10">
              <div className="absolute inset-0" style={{
                backgroundImage: `repeating-linear-gradient(45deg, transparent, transparent 10px, rgba(0,0,0,.1) 10px, rgba(0,0,0,.1) 20px)`
              }} />
            </div>
            
            {/* Main content */}
            <div className="relative px-6 sm:px-12 md:px-20 py-8 md:py-12">
              <div className="flex items-center gap-4 sm:gap-6 md:gap-8">
                {/* Animated phone icon container */}
                <div className="relative flex-shrink-0">
                  <div className="absolute inset-0 bg-white/20 blur-xl animate-pulse" />
                  <div className="relative bg-green-900 p-4 sm:p-6 md:p-8 border-4 border-green-700">
                    <UilPhone className="h-10 w-10 sm:h-14 sm:w-14 md:h-20 md:w-20 text-white" />
                  </div>
                </div>
                
                {/* Text content */}
                <div className="flex flex-col">
                  <h1 className="text-2xl sm:text-4xl md:text-5xl lg:text-7xl font-black uppercase text-white tracking-tight leading-none">
                    DIALA IS CALLING
                  </h1>
                  <h1 className="text-2xl sm:text-4xl md:text-5xl lg:text-7xl font-black uppercase text-green-100 tracking-tight leading-none mt-1 sm:mt-2">
                    {userName.toUpperCase()}
                  </h1>
                </div>
              </div>
            </div>
            
            {/* Side accent */}
            <div className="absolute top-0 right-0 w-16 sm:w-24 md:w-32 h-full bg-green-700/30 transform skew-x-[-15deg] translate-x-4 sm:translate-x-6 md:translate-x-8" />
          </div>
          
          {/* Enhanced pulsating effects */}
          {vibrate && (
            <>
              <div className="absolute -inset-4 bg-green-400/30 blur-xl animate-pulse" />
              <div className="absolute inset-0 border-4 border-green-300 opacity-50 animate-ping" />
            </>
          )}
        </div>

        {/* Status info with timer - neobrutalist style */}
        <div className={`
          absolute bottom-10 left-1/2 transform -translate-x-1/2 w-full max-w-2xl px-4
          transition-all duration-1000
          ${showInfo ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}
        `}>
          <Card className="overflow-hidden">
            <div className="flex">
              {/* Left image section */}
              <div className="w-32 bg-green-500 border-r-4 border-black flex items-center justify-center">
                <UilPhone className="h-12 w-12 text-white animate-pulse" />
              </div>
              
              {/* Right content section with slanted design */}
              <div className="flex-1 relative">
                <div className="px-6 py-4">
                  <p className="text-gray-600 text-sm uppercase font-bold">Calling {phoneNumber}</p>
                  <p className="text-black font-black text-lg">Please answer your phone</p>
                  
                  {/* Timer display */}
                  <div className="absolute top-0 right-0 bg-black text-white px-6 py-4 transform skew-x-[-15deg] origin-bottom-left">
                    <p className="text-2xl font-mono font-bold transform skew-x-[15deg]">
                      {String(Math.floor(elapsedTime / 60)).padStart(2, '0')}:{String(elapsedTime % 60).padStart(2, '0')}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </Card>
        </div>

        {/* Continue on Web option - shows for first 4 seconds */}
        {showWebOption && (
          <div className={`
            absolute top-20 right-4 transition-all duration-500
            ${showWebOption ? 'translate-x-0 opacity-100' : 'translate-x-10 opacity-0'}
          `}>
            <button
              onClick={onContinueWeb}
              className="flex items-center gap-3 px-6 py-3 font-bold uppercase border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[2px_2px_0_rgba(0,0,0,1)] hover:translate-x-[2px] hover:translate-y-[2px] transition-all duration-100 bg-white text-black"
            >
              <UilDesktop className="h-6 w-6" />
              Continue on Web
            </button>
          </div>
        )}

        {/* Timeout modal */}
        {showTimeout && (
          <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
            <Card className="w-full max-w-md transform -rotate-1">
              <div className="p-8">
                <div className="flex justify-center mb-6">
                  <div className="w-20 h-20 bg-red-500 border-4 border-black flex items-center justify-center shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <UilTimes className="h-10 w-10 text-white" />
                  </div>
                </div>
                
                <h2 className="text-3xl font-black uppercase text-center mb-4">CONNECTION TIMEOUT</h2>
                
                <p className="text-center text-gray-600 mb-6">
                  It seems you didn't answer or our services couldn't connect to your phone.
                </p>
                
                <div className="space-y-4">
                  <button 
                    onClick={onContinueWeb}
                    className="w-full py-4 font-bold uppercase border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[2px_2px_0_rgba(0,0,0,1)] hover:translate-x-[2px] hover:translate-y-[2px] transition-all duration-100 bg-[rgb(0,82,255)] text-white"
                  >
                    Continue on Web
                  </button>
                  
                  <button 
                    onClick={() => window.location.reload()}
                    className="w-full py-4 font-bold uppercase border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[2px_2px_0_rgba(0,0,0,1)] hover:translate-x-[2px] hover:translate-y-[2px] transition-all duration-100 bg-white text-black"
                  >
                    Try Again
                  </button>
                </div>
                
                <p className="text-center text-sm text-gray-500 mt-6">
                  Make sure your phone is on and has signal
                </p>
              </div>
            </Card>
          </div>
        )}

        {/* Decorative elements */}
        <div className="fixed top-20 right-20 w-20 h-20 bg-yellow-400 border-4 border-black rotate-12 animate-pulse opacity-50" />
        <div className="fixed top-40 left-10 w-16 h-16 bg-red-500 border-4 border-black -rotate-12 animate-bounce opacity-50" />
        <div className="fixed bottom-40 right-10 w-14 h-14 bg-blue-500 border-4 border-black rotate-45 animate-spin opacity-50" style={{ animationDuration: '10s' }} />
      </div>

      <style jsx>{`
        @keyframes wiggle {
          0%, 100% { transform: rotate(0deg); }
          25% { transform: rotate(-10deg); }
          75% { transform: rotate(10deg); }
        }
        
        .animate-wiggle {
          animation: wiggle 0.3s ease-in-out infinite;
        }
        
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }
          20%, 40%, 60%, 80% { transform: translateX(2px); }
        }
        
        .animate-shake {
          animation: shake 0.5s ease-in-out infinite;
        }
      `}</style>
    </div>
  );
}


================================================
FILE: src/components/custom/document-list-card.tsx
================================================
import * as React from 'react';
import { UilFileAlt, UilTrash, UilClock } from '@tooni/iconscout-unicons-react';
import { Button } from '@/components/ui/button';
import { DocumentItem } from '@/components/onboarding/bulk/types';

interface DocumentListCardProps {
  documents: DocumentItem[];
  onRemoveDocument: (id: string) => void;
}

const DocumentListCard: React.FC<DocumentListCardProps> = ({ 
  documents, 
  onRemoveDocument 
}) => {
  
  const getFileIcon = (type: string, fileName: string) => {
    const extension = fileName.toLowerCase().split('.').pop() || '';
    
    if (type.includes('pdf') || extension === 'pdf') {
      return <UilFileAlt className="h-6 w-6 text-red-600" />;
    }
    if (type.includes('word') || ['docx', 'doc'].includes(extension)) {
      return <UilFileAlt className="h-6 w-6 text-blue-600" />;
    }
    if (type.includes('text') || extension === 'txt') {
      return <UilFileAlt className="h-6 w-6 text-gray-600" />;
    }
    if (extension === 'md') {
      return <UilFileAlt className="h-6 w-6 text-purple-600" />;
    }
    if (type.includes('csv') || extension === 'csv') {
      return <UilFileAlt className="h-6 w-6 text-green-600" />;
    }
    if (type.includes('json') || extension === 'json') {
      return <UilFileAlt className="h-6 w-6 text-yellow-600" />;
    }
    return <UilFileAlt className="h-6 w-6 text-orange-600" />;
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div
      className="
        relative w-full
        border-4 border-black rounded-[3px]
        flex flex-col
        shadow-[4px_4px_0_rgba(0,0,0,1)]
        bg-white overflow-hidden
      "
    >
      {/* Header */}
      <div className="bg-orange-600 text-white px-4 py-3 text-sm border-b-4 border-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
        UPLOADED DOCUMENTS ({documents.length}/50)
      </div>

      {/* Documents List */}
      <div className="flex-grow bg-gradient-to-br from-orange-50 to-yellow-50 p-3">
        <div className="w-full h-full border-2 border-black bg-gray-200 p-4">
          {documents.length === 0 ? (
            <div className="text-center py-8">
              <UilFileAlt className="h-12 w-12 mx-auto mb-3 text-gray-400" />
              <p className="text-gray-600 font-bold">No documents uploaded yet</p>
            </div>
          ) : (
            <div className="space-y-3">
              {documents.map((doc) => (
                <div 
                  key={doc.id}
                  className="bg-white border-2 border-black p-3 flex items-center gap-3 hover:shadow-[2px_2px_0_rgba(0,0,0,1)] transition-all"
                >
                  <div className="flex-shrink-0">
                    {getFileIcon(doc.type, doc.name)}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h4 className="font-bold text-sm text-black truncate" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                      {doc.name}
                    </h4>
                    <div className="flex items-center gap-3 text-xs text-gray-600 mt-1">
                      <span className="font-medium">{formatFileSize(doc.size)}</span>
                      <span>•</span>
                      <span className="font-medium">{doc.type.split('/').pop()?.toUpperCase()}</span>
                      <span>•</span>
                      <div className="flex items-center gap-1">
                        <UilClock className="h-3 w-3" />
                        {new Date(doc.uploadDate).toLocaleDateString()}
                      </div>
                    </div>
                  </div>
                  <Button
                    variant="subheader"
                    size="sm"
                    onClick={() => onRemoveDocument(doc.id)}
                    className="h-8 w-8 p-0"
                  >
                    <UilTrash className="h-4 w-4" />
                  </Button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default DocumentListCard;


================================================
FILE: src/components/custom/file-upload-card.tsx
================================================
import * as React from 'react';
import { UilUpload, UilPlus } from '@tooni/iconscout-unicons-react';

interface FileUploadCardProps {
  onFileUpload: (file: File | FileList) => void;
  accept?: string;
  multiple?: boolean;
  title?: string;
  description?: string;
  fileTypes?: string;
  categoryColor?: string;
  categoryLabel?: string;
  bottomText?: string;
}

const FileUploadCard: React.FC<FileUploadCardProps> = ({ 
  onFileUpload,
  accept = 'audio/*',
  multiple = false,
  title = 'Drop Audio File',
  description = 'Drag & drop or click to browse',
  fileTypes = '',
  categoryColor = 'rgb(0,82,255)',
  categoryLabel = 'upload',
  bottomText = 'Upload your own audio'
}) => {
  const [isDragOver, setIsDragOver] = React.useState(false);
  const fileInputRef = React.useRef<HTMLInputElement>(null);

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      if (multiple) {
        onFileUpload(files);
      } else {
        const file = files[0];
        // For backward compatibility, default to audio validation
        const isValidFile = accept === 'audio/*' ? file.type.startsWith('audio/') : true;
        if (isValidFile) {
          onFileUpload(file);
        }
      }
    }
  };

  const handleClick = () => {
    console.log('FileUploadCard clicked, triggering file input');
    fileInputRef.current?.click();
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    console.log('FileUploadCard handleFileSelect triggered');
    const files = e.target.files;
    console.log('Selected files:', files ? files.length : 'none', files);
    if (files && files.length > 0) {
      if (multiple) {
        console.log('Multiple mode: passing FileList to onFileUpload');
        // Always pass FileList for multiple uploads
        onFileUpload(files);
      } else {
        console.log('Single mode: validating and passing single file');
        const file = files[0];
        // For backward compatibility, default to audio validation
        const isValidFile = accept === 'audio/*' ? file.type.startsWith('audio/') : true;
        if (isValidFile) {
          onFileUpload(file);
        }
      }
    }
    
    // Reset the input so the same file can be selected again
    e.target.value = '';
  };

  return (
    <div
      className={`
        relative w-full h-80
        border-4 border-black rounded-[3px]
        flex flex-col
        transition-all duration-200
        ${isDragOver ? 'scale-105 shadow-[8px_8px_0_rgba(0,0,0,1)] bg-[#E0F2E7]' : 'shadow-[4px_4px_0_rgba(0,0,0,1)]'}
        hover:scale-[1.02] hover:shadow-[6px_6px_0_rgba(0,0,0,1)]
        cursor-pointer overflow-hidden
      `}
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      onDrop={handleDrop}
      onClick={handleClick}
    >
      {/* Category label at top */}
      <div className="text-white px-4 py-3 text-sm border-b-4 border-black" style={{ fontFamily: 'Noyh-Bold, sans-serif', backgroundColor: categoryColor }}>
        {categoryLabel}
      </div>

      {/* Main upload area */}
      <div className="flex-grow relative overflow-hidden p-3 bg-gradient-to-br from-yellow-50 to-orange-50">
        <div className="w-full h-full border-2 border-black bg-gray-200 flex flex-col items-center justify-center p-6">
          <div className="text-center space-y-4">
            <div className="w-16 h-16 border-4 border-black rounded-[3px] flex items-center justify-center mx-auto" style={{ backgroundColor: categoryColor }}>
              <UilUpload className="h-8 w-8 text-white" />
            </div>
            <div className="space-y-2">
              <h3 className="text-lg font-bold text-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                {title}
              </h3>
              <p className="text-sm text-gray-600">
                {description}
              </p>
              {fileTypes && (
                <p className="text-xs text-gray-500">
                  {fileTypes}
                </p>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Bottom section */}
      <div className="p-3 bg-gradient-to-br from-yellow-50 to-orange-50">
        <div className="flex items-center gap-3">
          <div className="flex-1 bg-gray-200 border-2 border-black p-2">
            <p className="text-sm text-black font-bold text-center" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              {bottomText}
            </p>
          </div>
        </div>
      </div>

      {/* Hidden file input */}
      <input
        ref={fileInputRef}
        type="file"
        accept={accept}
        multiple={multiple}
        onChange={handleFileSelect}
        className="hidden"
      />
    </div>
  );
};

export default FileUploadCard;


================================================
FILE: src/components/custom/info-section.tsx
================================================
import * as React from 'react';
import { Card, CardContent } from '../ui/card';
import { UilInfoCircle, UilFire, UilUsersAlt, UilGlobe, UilQuestionCircle, UilVolumeUp, UilLanguage, UilMicrophone, UilCheckCircle, UilHeadphones, UilMapMarker, UilUser, UilSetting } from '@tooni/iconscout-unicons-react';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Button } from "@/components/ui/button";

// Star component
const Star9 = ({ color, size, stroke, strokeWidth, pathClassName, width, height, ...props }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 200 200"
    width={size ?? width}
    height={size ?? height}
    {...props}
  >
    <path
      fill={color ?? "currentColor"}
      stroke={stroke}
      strokeWidth={strokeWidth}
      className={pathClassName}
      d="M195 100c-87.305 4.275-90.725 7.695-95 95-4.275-87.305-7.695-90.725-95-95 87.305-4.275 90.725-7.695 95-95 4.275 87.305 7.695 90.725 95 95"
    />
  </svg>
);

interface FAQ {
  icon: React.ReactElement;
  question: string;
  answer: string;
}

interface InfoSectionProps {
  step?: 'audio' | 'language' | 'voice' | 'complete' | 'customize';
  customContent?: {
    icon: React.ReactElement;
    title: string;
    description: string;
    benefits: string[];
    faqs: FAQ[];
  };
}

const InfoSection: React.FC<InfoSectionProps> = ({ step, customContent }) => {

  const getStepInfo = () => {
    // If custom content is provided, use it
    if (customContent) {
      return customContent;
    }
    
    // Otherwise use predefined steps
    switch (step) {
      case 'customize':
        return {
          icon: <UilSetting className="h-6 w-6 text-white" />,
          title: "Customize Your Experience",
          description: "Select your preferred background audio and language in one easy step. This combination creates the perfect foundation for natural, authentic conversations that feel real.",
          benefits: [
            "Quick setup with preset options",
            "Customizable environments and languages",
            "Natural conversation combinations",
            "Optimized for authenticity"
          ],
          faqs: [
            {
              icon: <UilHeadphones className="h-5 w-5" />,
              question: "Why combine audio and language selection?",
              answer: "Selecting both together ensures your environment matches your language choice naturally. For example, a Spanish call with cafe sounds creates an authentic Madrid coffee shop experience."
            },
            {
              icon: <UilSetting className="h-5 w-5" />,
              question: "What does the Quick Demo do?",
              answer: "Quick Demo instantly sets up a crowded office environment with American English - perfect for testing the system quickly without going through all customization options."
            },
            {
              icon: <UilGlobe className="h-5 w-5" />,
              question: "Can I mix any audio with any language?",
              answer: "Absolutely! While some combinations feel more natural (like French + Cafe), you're free to create any combination that suits your specific use case."
            }
          ]
        };
      case 'audio':
        return {
          icon: <UilVolumeUp className="h-6 w-6 text-white" />,
          title: "Why We Need Background Audio",
          description: "Background sounds make your AI calls incredibly realistic. Whether it's a busy office, coffee shop, or library - these environments help your voice agent blend seamlessly into natural conversations.",
          benefits: [
            "Creates authentic conversation environments",
            "Reduces suspicion during calls", 
            "Makes interactions feel more natural",
            "Improves call success rates"
          ],
          faqs: [
            {
              icon: <UilHeadphones className="h-5 w-5" />,
              question: "How do background sounds improve call quality?",
              answer: "Background audio creates authentic environments that make conversations feel natural and reduce suspicion. It helps your AI agent blend into realistic scenarios."
            },
            {
              icon: <UilMapMarker className="h-5 w-5" />,
              question: "What types of environments work best?",
              answer: "Office environments, cafes, and public spaces work excellently. Choose based on your call context - professional calls work well with office sounds, while casual conversations suit cafe ambience."
            },
            {
              icon: <UilSetting className="h-5 w-5" />,
              question: "Can I upload my own audio files?",
              answer: "Yes! You can upload custom background audio that matches your specific needs. Just make sure the file is in a supported audio format."
            }
          ]
        };
      case 'language':
        return {
          icon: <UilGlobe className="h-6 w-6 text-white" />,
          title: "Choose Your Communication Language", 
          description: "Select the language your AI will speak. Our advanced voice technology adapts to native accents and cultural nuances, ensuring smooth and natural conversations worldwide.",
          benefits: [
            "Native-level pronunciation and accent",
            "Cultural context awareness",
            "Global reach capabilities",
            "Authentic local interactions"
          ],
          faqs: [
            {
              icon: <UilLanguage className="h-5 w-5" />,
              question: "How natural do the accents sound?",
              answer: "Our AI uses native-level pronunciation with authentic regional accents. Each language option includes cultural context awareness for natural interactions."
            },
            {
              icon: <UilSetting className="h-5 w-5" />,
              question: "Can I switch languages later?",
              answer: "Yes, you can change the language setting anytime. However, for best results, we recommend sticking with one language per conversation session."
            },
            {
              icon: <UilGlobe className="h-5 w-5" />,
              question: "Do you support regional dialects?",
              answer: "Currently we support major accent variations (American English, Parisian French, Beijing Mandarin, Spain Spanish). More regional options coming soon!"
            }
          ]
        };
      case 'voice':
        return {
          icon: <UilUsersAlt className="h-6 w-6 text-white" />,
          title: "Voice & Pitch Selection",
          description: "Choose your agent's voice personality and business pitch. The voice determines how your agent sounds, while the pitch defines what they'll say and how they'll handle conversations for your specific use case.",
          benefits: [
            "3 unique voice personalities to choose from",
            "3 pre-configured business pitches", 
            "Custom pitch option for unique needs",
            "Perfect alignment with your business goals"
          ],
          faqs: [
            {
              icon: <UilUser className="h-5 w-5" />,
              question: "What's the difference between voice and pitch?",
              answer: "Voice is HOW your agent speaks (personality, tone, style), while pitch is WHAT they say (sales scripts, support responses, appointment booking). Together they create your perfect AI representative."
            },
            {
              icon: <UilMicrophone className="h-5 w-5" />,
              question: "Can I create a custom pitch?",
              answer: "Yes! Select 'Pitch Your Own' to provide details about your business, products, services, and goals. Your agent will be configured to handle your specific requirements perfectly."
            },
            {
              icon: <UilVolumeUp className="h-5 w-5" />,
              question: "Which pitch should I choose?",
              answer: "Discovery Calls for sales and lead qualification, Customer Support for handling inquiries and technical questions, or Appointment Setter for booking and scheduling. Choose based on your primary business need."
            }
          ]
        };
      case 'complete':
        return {
          icon: <UilInfoCircle className="h-6 w-6 text-white" />,
          title: "You're All Set!",
          description: "Your AI voice agent is now configured and ready to make incredibly realistic calls. The combination of your selected environment, language, and voice creates the perfect setup for natural conversations.",
          benefits: [
            "Instant deployment ready",
            "Optimized configuration",
            "Maximum authenticity",
            "Professional call quality"
          ],
          faqs: [
            {
              icon: <UilCheckCircle className="h-5 w-5" />,
              question: "How do I start making calls?",
              answer: "Click 'Start Call' to begin! You can enter phone numbers and customize your initial message. The system will handle the rest automatically."
            },
            {
              icon: <UilSetting className="h-5 w-5" />,
              question: "Can I modify my settings later?",
              answer: "Absolutely! You can change your background audio, language, or voice agent anytime from your dashboard settings."
            },
            {
              icon: <UilInfoCircle className="h-5 w-5" />,
              question: "What happens during a call?",
              answer: "Your AI agent will make the call using your selected voice and language, with background audio playing naturally. You'll see real-time status updates and conversation logs."
            }
          ]
        };
    }
  };

  const stepInfo = getStepInfo();

  return (
    <div className="mt-12 max-w-4xl mx-auto px-4 sm:px-6 space-y-6">
      {/* Main Info Card */}
      <Card className="transform -rotate-1 relative overflow-hidden">
        <CardContent className="relative">
          {/* Decorative stars for main card */}
          <Star9 color="#FFD700" size={16} className="absolute top-4 right-4 animate-pulse" />
          <Star9 color="rgb(0,82,255)" size={12} className="absolute bottom-4 right-8 animate-pulse delay-700" />
          <div className="flex items-start gap-4 pt-6">
            <Button
              size="icon"
              variant="default"
              className="w-12 h-12 flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90 text-black border-black"
            >
              {React.cloneElement(stepInfo.icon, { className: "h-6 w-6 text-black" })}
            </Button>
            <div className="flex-1">
              <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                {stepInfo.title}
              </h3>
              <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                {stepInfo.description}
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {stepInfo.benefits.map((benefit, index) => (
                  <div key={index} className="flex items-center gap-3">
                    <div className="w-2 h-2 bg-yellow-400 rounded-full"></div>
                    <span className="text-black font-medium">{benefit}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* FAQ Accordion */}
      <Card className="transform rotate-1 relative overflow-hidden">
        <CardContent className="relative">
          {/* Decorative stars */}
          <Star9 color="#FFD700" size={20} className="absolute top-4 right-4 animate-pulse" />
          <Star9 color="rgb(0,82,255)" size={16} className="absolute bottom-4 left-4 animate-pulse delay-300" />
          <Star9 color="#FFD700" size={12} className="absolute top-1/2 right-8 animate-pulse delay-500" />
          
          <div className="flex items-center gap-4 pt-6 mb-6">
            <Button
              size="icon"
              variant="default"
              className="w-12 h-12 bg-yellow-400 hover:bg-yellow-400/90 text-black border-black"
            >
              <UilQuestionCircle className="h-6 w-6 text-black" />
            </Button>
            <h4 className="text-xl font-black text-black uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              Frequently Asked Questions
            </h4>
          </div>
          <Accordion type="single" collapsible className="w-full">
            {stepInfo.faqs.map((faq, index) => (
              <AccordionItem 
                key={index} 
                value={`item-${index}`} 
                className="overflow-hidden"
              >
                <AccordionTrigger className="text-left font-bold py-4 bg-yellow-400 text-black">
                  <div className="flex items-center gap-3">
                    <div className="bg-black p-1.5 rounded-[3px] border-2 border-yellow-400">
                      {React.cloneElement(faq.icon, { className: "h-5 w-5 text-yellow-400" })}
                    </div>
                    {faq.question}
                  </div>
                </AccordionTrigger>
                <AccordionContent className="leading-relaxed px-4 pb-4">
                  {faq.answer}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        </CardContent>
      </Card>
    </div>
  );
};

export default InfoSection;


================================================
FILE: src/components/custom/language-card.tsx
================================================
import * as React from 'react';
import { UilGlobe } from '@tooni/iconscout-unicons-react';

// Star component
const Star15 = ({ color, size, stroke, strokeWidth, pathClassName, width, height, ...props }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 200 200"
    width={size ?? width}
    height={size ?? height}
    {...props}
  >
    <path
      fill={color ?? "currentColor"}
      stroke={stroke}
      strokeWidth={strokeWidth}
      className={pathClassName}
      d="M95.713 9.378a6 6 0 0 1 8.574 0l9.515 9.717a6 6 0 0 0 6.496 1.381l12.645-5.007a6 6 0 0 1 7.833 3.487l4.74 12.748a6 6 0 0 0 5.372 3.903l13.589.57a6 6 0 0 1 5.737 6.371l-.855 13.573a6 6 0 0 0 3.321 5.752l12.182 6.046a6 6 0 0 1 2.649 8.154l-6.301 12.053a6 6 0 0 0 .694 6.604l8.67 10.479a6 6 0 0 1-.897 8.527l-10.658 8.447a6 6 0 0 0-2.052 6.316l3.657 13.099a6 6 0 0 1-4.287 7.426l-13.173 3.381a6 6 0 0 0-4.443 4.936l-1.987 13.454a6 6 0 0 1-6.936 5.04l-13.41-2.269a6 6 0 0 0-6.066 2.701l-7.287 11.483a6 6 0 0 1-8.387 1.783l-11.327-7.527a6 6 0 0 0-6.641 0l-11.328 7.527a6 6 0 0 1-8.387-1.783l-7.287-11.483a6 6 0 0 0-6.066-2.701l-13.41 2.269a6 6 0 0 1-6.936-5.04l-1.987-13.454a6 6 0 0 0-4.443-4.936l-13.173-3.381a6 6 0 0 1-4.287-7.426l3.657-13.099a6 6 0 0 0-2.052-6.316l-10.658-8.447a6 6 0 0 1-.897-8.527l8.67-10.479a6 6 0 0 0 .694-6.604l-6.301-12.053a6 6 0 0 1 2.65-8.154l12.181-6.046a6 6 0 0 0 3.32-5.752l-.854-13.573a6 6 0 0 1 5.737-6.372l13.588-.569a6 6 0 0 0 5.373-3.903l4.74-12.748a6 6 0 0 1 7.833-3.487l12.645 5.007a6 6 0 0 0 6.496-1.38z"
    />
  </svg>
);

interface LanguageCardProps {
  language: {
    id: string;
    name: string;
    flag: string;
    accent: string;
  };
  isSelected: boolean;
  onSelect: (languageId: string) => void;
}

const LanguageCard: React.FC<LanguageCardProps> = ({ language, isSelected, onSelect }) => {
  return (
    <div className="relative">
      {/* Selection badge */}
      {isSelected && (
        <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
          <div className="relative">
            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
              <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
            </div>
            <div className="absolute inset-0 flex items-center justify-center">
              <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                SELECTED
              </span>
            </div>
          </div>
        </div>
      )}
      <div
        className={`
          relative w-full h-80
          border-4 border-black
          flex flex-col
          transition-all duration-200
          ${isSelected ? 'scale-[1.02] shadow-[8px_8px_0_rgba(0,0,0,1)]' : 'shadow-[4px_4px_0_rgba(0,0,0,1)]'}
          hover:scale-[1.02] hover:shadow-[6px_6px_0_rgba(0,0,0,1)]
          cursor-pointer overflow-hidden
        `}
        onClick={() => onSelect(language.id)}
      >
        {/* Category label at top */}
        <div className="bg-[rgb(0,82,255)] text-white px-4 py-3 text-sm border-b-4 border-black flex items-center gap-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
          <UilGlobe className="h-4 w-4 text-white" />
          language
        </div>

        {/* Main content area with flag */}
        <div className="flex-grow bg-gradient-to-br from-yellow-50 to-orange-50 p-4 relative overflow-hidden flex items-center justify-center">
          <div className="text-center">
            <div className="text-8xl mb-4">{language.flag}</div>
            <h3 className="text-2xl font-black text-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              {language.name}
            </h3>
            <p className="text-sm text-gray-600 mt-1">{language.accent}</p>
          </div>
        </div>

        {/* Bottom section with accent info */}
        <div className="p-3 bg-gradient-to-br from-yellow-50 to-orange-50 border-t-4 border-black">
          <div className="flex items-center justify-center gap-2">
            <div className="w-3 h-3 bg-[rgb(0,82,255)]"></div>
            <span className="text-sm font-bold text-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              {language.accent} Accent
            </span>
            <div className="w-3 h-3 bg-[rgb(0,82,255)]"></div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LanguageCard;


================================================
FILE: src/components/custom/live-waveform-panel.tsx
================================================
'use client';

import * as React from 'react';
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from '@/components/ui/resizable';
import { UilMicrophone, UilRobot } from '@tooni/iconscout-unicons-react';

interface LiveWaveformPanelProps {
  agentName: string;
  customerName: string;
  agentGain: number;
  customerGain: number;
  currentSpeaker: 'agent' | 'customer' | null;
  isMuted?: boolean;
  className?: string;
  direction?: 'horizontal' | 'vertical';
}

export default function LiveWaveformPanel({
  agentName,
  customerName,
  agentGain,
  customerGain,
  currentSpeaker,
  isMuted = false,
  className = '',
  direction = 'horizontal'
}: LiveWaveformPanelProps) {
  const isMobile = typeof window !== 'undefined' && window.innerWidth < 768;

  if (direction === 'horizontal') {
    return (
      <div className={`flex ${className}`}>
        <ResizablePanelGroup direction="horizontal">
          {/* Agent audio */}
          <ResizablePanel 
            defaultSize={50} 
            minSize={20}
            style={{ flexBasis: `${Math.max(20, Math.min(80, agentGain))}%` }}
            className="transition-all duration-200"
          >
            <div className="h-full bg-[rgb(0,82,255)] p-3 flex items-center justify-center relative">
              <div className="text-center">
                <UilRobot className={`${isMobile ? 'h-6 w-6' : 'h-8 w-8'} text-white mb-2 mx-auto block`} />
                <p className={`text-white font-black ${isMobile ? 'text-xs' : 'text-sm'} uppercase`}>{agentName}</p>
                <p className={`text-white/80 ${isMobile ? 'text-xs' : 'text-xs'}`}>
                  {currentSpeaker === 'agent' ? 'SPEAKING' : 'AI AGENT'}
                </p>
              </div>
              <div className={`absolute ${isMobile ? 'bottom-2 left-2 right-2' : 'bottom-3 left-3 right-3'}`}>
                <div className="w-full h-1 bg-black/20 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-white transition-all duration-100"
                    style={{ width: `${agentGain}%` }}
                  />
                </div>
              </div>
            </div>
          </ResizablePanel>

          <div className="w-[2px] bg-black"></div>

          {/* Customer audio */}
          <ResizablePanel 
            defaultSize={50}
            minSize={20}
            style={{ flexBasis: `${Math.max(20, Math.min(80, customerGain))}%` }}
            className="transition-all duration-200"
          >
            <div className="h-full bg-green-500 p-3 flex items-center justify-center relative">
              <div className="text-center">
                <UilMicrophone className={`${isMobile ? 'h-6 w-6' : 'h-8 w-8'} text-white mb-2 mx-auto block`} />
                <p className={`text-white font-black ${isMobile ? 'text-xs' : 'text-sm'} uppercase`}>{customerName}</p>
                <p className={`text-white/80 ${isMobile ? 'text-xs' : 'text-xs'}`}>
                  {isMuted ? 'MUTED' : currentSpeaker === 'customer' ? 'SPEAKING' : 'CUSTOMER'}
                </p>
              </div>
              <div className={`absolute ${isMobile ? 'bottom-2 left-2 right-2' : 'bottom-3 left-3 right-3'}`}>
                <div className="w-full h-1 bg-black/20 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-white transition-all duration-100"
                    style={{ width: `${customerGain}%` }}
                  />
                </div>
              </div>
            </div>
          </ResizablePanel>
        </ResizablePanelGroup>
      </div>
    );
  }

  // Vertical layout
  return (
    <div className={`flex flex-col ${className}`}>
      <ResizablePanelGroup direction="vertical">
        {/* Agent audio */}
        <ResizablePanel 
          defaultSize={50} 
          minSize={20}
          style={{ flexBasis: `${Math.max(20, Math.min(80, agentGain))}%` }}
          className="transition-all duration-200"
        >
          <div className="h-full bg-[rgb(0,82,255)] p-6 flex items-center justify-center relative">
            <div className="text-center">
              <UilRobot className="h-16 w-16 text-white mb-4 mx-auto block" />
              <p className="text-white font-black text-2xl uppercase">{agentName}</p>
              <p className="text-white/80">
                {currentSpeaker === 'agent' ? 'SPEAKING' : 'AI AGENT'}
              </p>
            </div>
            <div className="absolute bottom-6 left-6 right-6">
              <div className="w-full h-2 bg-black/20 rounded-full overflow-hidden">
                <div 
                  className="h-full bg-white transition-all duration-100"
                  style={{ width: `${agentGain}%` }}
                />
              </div>
            </div>
          </div>
        </ResizablePanel>

        <ResizableHandle className="h-2 bg-black hover:bg-gray-800 transition-colors" />

        {/* Customer audio */}
        <ResizablePanel 
          defaultSize={50}
          minSize={20}
          style={{ flexBasis: `${Math.max(20, Math.min(80, customerGain))}%` }}
          className="transition-all duration-200"
        >
          <div className="h-full bg-green-500 p-6 flex items-center justify-center relative">
            <div className="text-center">
              <UilMicrophone className="h-16 w-16 text-white mb-4 mx-auto block" />
              <p className="text-white font-black text-2xl uppercase">{customerName}</p>
              <p className="text-white/80">
                {isMuted ? 'MUTED' : currentSpeaker === 'customer' ? 'SPEAKING' : 'CUSTOMER'}
              </p>
            </div>
            <div className="absolute bottom-6 left-6 right-6">
              <div className="w-full h-2 bg-black/20 rounded-full overflow-hidden">
                <div 
                  className="h-full bg-white transition-all duration-100"
                  style={{ width: `${customerGain}%` }}
                />
              </div>
            </div>
          </div>
        </ResizablePanel>
      </ResizablePanelGroup>
    </div>
  );
}


================================================
FILE: src/components/custom/loading-screen.tsx
================================================
'use client';

import * as React from 'react';
import { Card } from '../ui/card';
import { UilCheckCircle, UilSpinner } from '@tooni/iconscout-unicons-react';

interface LoadingScreenProps {
  userName: string;
  selectedAudio: string;
  selectedLanguage: string;
  selectedVoiceAgent: string;
  selectedPitch?: string;
  onComplete: () => void;
}

interface ProcessStep {
  id: string;
  name: string;
  status: 'pending' | 'processing' | 'completed';
}

export default function LoadingScreen({ userName, selectedAudio, selectedLanguage, selectedVoiceAgent, selectedPitch, onComplete }: LoadingScreenProps) {
  const [processSteps, setProcessSteps] = React.useState<ProcessStep[]>([
    { id: 'init', name: 'Initializing Voice Agent', status: 'processing' },
    { id: 'audio', name: 'Loading Audio Environment', status: 'pending' },
    { id: 'tts', name: 'Configuring Text-to-Speech', status: 'pending' },
    { id: 'websocket', name: 'Establishing Connection', status: 'pending' },
    { id: 'finalize', name: 'Finalizing Setup', status: 'pending' }
  ]);

  React.useEffect(() => {
    const processStep = async (stepIndex: number) => {
      if (stepIndex >= processSteps.length) {
        setTimeout(onComplete, 500);
        return;
      }

      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setProcessSteps(prev => {
        const updated = [...prev];
        if (stepIndex > 0) updated[stepIndex - 1].status = 'completed';
        if (stepIndex < updated.length) updated[stepIndex].status = 'processing';
        return updated;
      });

      processStep(stepIndex + 1);
    };

    processStep(1);
  }, []);

  return (
    <div className="min-h-screen bg-[rgb(0,82,255)] flex items-center justify-center p-4" style={{ 
      fontFamily: 'Noyh-Bold, sans-serif',
      backgroundImage: `
        linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px),
        linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)
      `,
      backgroundSize: '60px 60px'
    }}>
      <Card className="w-full max-w-md p-8">
        <h2 className="text-3xl font-black uppercase text-center mb-12">PREPARING YOUR CALL</h2>
        
        <div className="relative px-4">
          {/* Connecting dots line */}
          <div className="absolute left-[24px] top-6 bottom-6 w-0.5 bg-gray-300" />
          
          {/* Steps */}
          <div className="space-y-8">
            {processSteps.map((step, index) => (
              <div key={step.id} className="flex items-center gap-6">
                {/* Status indicator */}
                <div className="relative z-10">
                  {step.status === 'completed' && (
                    <div className="w-12 h-12 bg-green-500 border-2 border-black flex items-center justify-center shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <UilCheckCircle className="h-7 w-7 text-white" />
                    </div>
                  )}
                  {step.status === 'processing' && (
                    <div className="w-12 h-12 bg-[rgb(0,82,255)] border-2 border-black flex items-center justify-center shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <UilSpinner className="h-6 w-6 text-white animate-spin" />
                    </div>
                  )}
                  {step.status === 'pending' && (
                    <div className="w-12 h-12 bg-gray-200 border-2 border-black" />
                  )}
                </div>
                
                {/* Step name */}
                <div className="flex-1">
                  <p className={`text-lg font-bold transition-colors duration-300 ${
                    step.status === 'completed' ? 'text-green-600' :
                    step.status === 'processing' ? 'text-[rgb(0,82,255)]' :
                    'text-gray-400'
                  }`}>
                    {step.name}
                  </p>
                  
                  {/* Loading dots for processing step */}
                  {step.status === 'processing' && (
                    <div className="flex gap-2 mt-2">
                      <div className="w-2.5 h-2.5 bg-[rgb(0,82,255)] rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                      <div className="w-2.5 h-2.5 bg-[rgb(0,82,255)] rounded-full animate-bounce" style={{ animationDelay: '200ms' }} />
                      <div className="w-2.5 h-2.5 bg-[rgb(0,82,255)] rounded-full animate-bounce" style={{ animationDelay: '400ms' }} />
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
        
        {/* User info summary */}
        <div className="mt-12 p-6 bg-gray-50 border-2 border-black rounded-lg">
          <h3 className="text-lg font-black uppercase mb-4">Configuration</h3>
          <div className="space-y-3">
            <p className="text-base text-gray-700">
              <span className="font-bold">User:</span> {userName}
            </p>
            <p className="text-base text-gray-700">
              <span className="font-bold">Voice:</span> {selectedVoiceAgent}
            </p>
            <p className="text-base text-gray-700">
              <span className="font-bold">Language:</span> {selectedLanguage}
            </p>
            {selectedPitch && (
              <p className="text-base text-gray-700">
                <span className="font-bold">Pitch:</span> {selectedPitch}
              </p>
            )}
          </div>
        </div>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/custom/onboarding-footer.tsx
================================================
'use client';

import * as React from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import {
  UilRobot,
  UilPhone,
  UilSearch,
  UilDatabase,
  UilApps,
  UilMicrophone,
  UilFileAlt,
  UilCommentAltDots,
  UilCopy,
  UilBook,
  UilBookAlt,
  UilGraduationCap,
  UilWifi,
  UilMusic,
  UilArrowLeft,
  UilArrowRight
} from '@tooni/iconscout-unicons-react';

const navItems = [
  { 
    href: '/onboarding/agents', 
    label: 'AGENTS', 
    icon: UilRobot,
    description: 'Create & manage AI agents',
    color: 'bg-blue-500'
  },
  { 
    href: '/onboarding/calls', 
    label: 'CALLS', 
    icon: UilPhone,
    description: 'Configure outbound calling',
    color: 'bg-orange-500'
  },
  { 
    href: '/onboarding/cloning', 
    label: 'CLONING', 
    icon: UilCopy,
    description: 'Clone voice from content',
    color: 'bg-pink-500'
  },
  { 
    href: '/onboarding/hunter', 
    label: 'HUNTER', 
    icon: UilSearch,
    description: 'Lead generation & search',
    color: 'bg-violet-400'
  },
  { 
    href: '/onboarding/rag', 
    label: 'RAG', 
    icon: UilDatabase,
    description: 'Knowledge base setup',
    color: 'bg-cyan-400'
  },
  { 
    href: '/onboarding/swarms', 
    label: 'SWARMS', 
    icon: UilApps,
    description: 'Multi-agent orchestration',
    color: 'bg-cyan-500'
  },
  { 
    href: '/onboarding/transcribe', 
    label: 'TRANSCRIBE', 
    icon: UilMicrophone,
    description: 'Audio transcription',
    color: 'bg-blue-500'
  },
  { 
    href: '/onboarding/transcripts', 
    label: 'TRANSCRIPTS', 
    icon: UilFileAlt,
    description: 'YouTube & media import',
    color: 'bg-red-500'
  },
  {
    href: '/onboarding/voice',
    label: 'VOICE',
    icon: UilCommentAltDots,
    description: 'Voice interface testing',
    color: 'bg-pink-500'
  },
  {
    href: '/onboarding/procedural',
    label: 'PROCEDURAL',
    icon: UilMusic,
    description: 'Generate custom procedural audio',
    color: 'bg-purple-500'
  },
  {
    href: '/onboarding/rtc',
    label: 'RTC',
    icon: UilWifi,
    description: 'Real-time voice demo',
    color: 'bg-green-500'
  },
  { 
    href: '/onboarding/blog', 
    label: 'BLOG', 
    icon: UilBook,
    description: 'Learn from expert articles',
    color: 'bg-yellow-400'
  },
  { 
    href: '/onboarding/guides', 
    label: 'GUIDES', 
    icon: UilBookAlt,
    description: 'Step-by-step tutorials',
    color: 'bg-cyan-400'
  },
  { 
    href: '/onboarding/courses', 
    label: 'COURSES', 
    icon: UilGraduationCap,
    description: 'Structured learning paths',
    color: 'bg-purple-500'
  }
];

interface OnboardingFooterProps {
  onNext?: () => void;
  onBack?: () => void;
  currentStep?: number;
  totalSteps?: number;
  isNextDisabled?: boolean;
  nextLabel?: string;
  showNavigation?: boolean;
}

export function OnboardingFooter({
  onNext,
  onBack,
  currentStep = 1,
  totalSteps = 3,
  isNextDisabled = false,
  nextLabel = 'CONTINUE',
  showNavigation = false
}: OnboardingFooterProps) {
  return (
    <div className="w-full">
      <div className="max-w-7xl mx-auto px-4">
        {onNext && (
          <div className="flex justify-center gap-4 mb-6">
            {onBack && (
              <Button
                onClick={onBack}
                variant="outline"
                className="font-black uppercase border-2 border-black"
              >
                <UilArrowLeft className="mr-2 h-4 w-4" />
                BACK
              </Button>
            )}
            <Button
              onClick={onNext}
              disabled={isNextDisabled}
              className="font-black uppercase bg-purple-500 hover:bg-purple-600 text-white"
            >
              {nextLabel}
              <UilArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
        )}

        <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] bg-gray-50">
          <CardContent className="p-8">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Left side - Navigation */}
              <div className="lg:col-span-2">
                <div className="mb-3">
                  <p className="text-xs font-bold uppercase text-gray-600 mb-2">Quick Navigation</p>
                  <div className="w-full h-0.5 bg-black"></div>
                </div>
                <div className="grid grid-cols-4 gap-x-3 gap-y-1">
                  {navItems.map((item, index) => {
                    const Icon = item.icon;
                    return (
                      <Link key={item.href} href={item.href}>
                        <div className="flex items-center gap-1.5 py-0.5 group cursor-pointer hover:translate-x-1 transition-transform">
                          <Badge className={`p-1 border-2 border-black ${item.color}`}>
                            <Icon className="h-3 w-3 text-white" />
                          </Badge>
                          <span className="text-xs font-bold uppercase">{item.label}</span>
                        </div>
                      </Link>
                    );
                  })}
                </div>
              </div>
              
              {/* Right side - Branding */}
              <div className="text-right space-y-3">
                <div>
                  <h3 className="text-2xl font-black uppercase">DIALA</h3>
                  <p className="text-xs text-gray-600 mt-1">AI voice agents for modern business</p>
                </div>
                <div className="text-xs text-gray-500">
                  <p>© 2024 Diala. All rights reserved.</p>
                  <p className="mt-1">Terms · Privacy · Contact</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/onboarding-nav.tsx
================================================
import * as React from 'react';
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import { Progress } from "@/components/ui/progress";
import { UilVolumeUp, UilLanguage, UilRobot, UilCheckCircle } from "@tooni/iconscout-unicons-react";

interface OnboardingNavProps {
  currentStep: number;
  onStepChange: (step: number) => void;
  userName: string | null;
  selectedAudio: string | null;
  selectedLanguage: string | null;
  selectedVoiceAgent: string | null;
  selectedPitch?: string | null;
}

export default function OnboardingNav({ currentStep, onStepChange, userName, selectedAudio, selectedLanguage, selectedVoiceAgent, selectedPitch }: OnboardingNavProps) {
  const steps = [
    { 
      id: 1, 
      title: "Welcome", 
      icon: UilCheckCircle,
      color: "rgb(0,82,255)", 
      bgColor: "bg-[rgb(0,82,255)]",
      completed: userName !== null 
    },
    { 
      id: 2, 
      title: "Audio & Language", 
      icon: UilVolumeUp,
      color: "rgb(0,82,255)", 
      bgColor: "bg-[rgb(0,82,255)]",
      completed: selectedAudio !== null && selectedLanguage !== null 
    },
    { 
      id: 3, 
      title: "Agent & Pitch", 
      icon: UilRobot,
      color: "rgb(0,82,255)", 
      bgColor: "bg-[rgb(0,82,255)]",
      completed: selectedVoiceAgent !== null && selectedPitch !== null 
    },
    { 
      id: 4, 
      title: "Done", 
      icon: UilCheckCircle,
      color: "rgb(0,82,255)", 
      bgColor: "bg-[rgb(0,82,255)]",
      completed: currentStep >= 4 
    }
  ];

  return (
    <div className="fixed top-0 left-0 right-0 bg-[rgb(0,82,255)] border-b-4 border-black py-4 px-2 sm:p-4 z-50" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
      <div className="max-w-6xl mx-auto">
        {/* Step indicators */}
        <div className="flex justify-center items-center">
          {steps.map((step, index) => (
            <React.Fragment key={step.id}>
              {/* Step rectangle */}
              <div 
                className={`
                  relative px-2 sm:px-4 py-1 sm:py-2 border-2 sm:border-4 border-black flex items-center justify-center
                  transition-all duration-300 cursor-pointer min-w-fit
                  ${currentStep === step.id 
                    ? `${step.bgColor} scale-105 shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[3px_3px_0_rgba(0,0,0,1)]` 
                    : step.completed 
                      ? `${step.bgColor} shadow-[1px_1px_0_rgba(0,0,0,1)] sm:shadow-[2px_2px_0_rgba(0,0,0,1)]` 
                      : 'bg-gray-300 shadow-[1px_1px_0_rgba(0,0,0,1)] sm:shadow-[2px_2px_0_rgba(0,0,0,1)]'
                  }
                `}
                onClick={() => {
                  if ((step.id === 1) || 
                      (step.id === 2 && userName) || 
                      (step.id === 3 && userName && selectedAudio) || 
                      (step.id === 4 && userName && selectedAudio && selectedLanguage) || 
                      (step.id === 5 && userName && selectedAudio && selectedLanguage && selectedVoiceAgent)) {
                    onStepChange(step.id);
                  }
                }}
              >
                <step.icon className="w-4 h-4 sm:w-5 sm:h-5 text-white mr-1 sm:mr-2" />
                <span className="text-sm sm:text-lg font-bold text-white hidden sm:inline">{step.title}</span>
                <span className="text-sm font-bold text-white sm:hidden">{step.id}</span>
                
                {/* Checkmark for completed steps */}
                {step.completed && currentStep > step.id && (
                  <div className="absolute -top-1 -right-1 sm:-top-2 sm:-right-2 w-4 h-4 sm:w-6 sm:h-6 bg-black border-2 border-white rounded-full flex items-center justify-center">
                    <span className="text-white text-[10px] sm:text-xs">✓</span>
                  </div>
                )}
              </div>
              
              {/* Connector line */}
              {index < steps.length - 1 && (
                <div className={`w-8 sm:w-16 h-1 sm:h-2 mx-1 sm:mx-4 border sm:border-2 border-black transition-all duration-300 ${
                  currentStep > step.id 
                    ? 'bg-white shadow-[1px_1px_0_rgba(0,0,0,1)] sm:shadow-[2px_2px_0_rgba(0,0,0,1)]' 
                    : 'bg-gray-400'
                }`} />
              )}
            </React.Fragment>
          ))}
        </div>
        
        {/* Progress text */}
        <div className="text-center mt-2 sm:mt-4">
          <span className="text-white text-sm sm:text-lg">
            <span className="hidden sm:inline">Step {currentStep} of 4: {steps[currentStep - 1].title}</span>
            <span className="sm:hidden">{steps[currentStep - 1].title}</span>
          </span>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/pitch-card.tsx
================================================
import * as React from 'react';
import { UilBriefcase, UilHeadphonesAlt, UilCalendarAlt, UilEdit } from '@tooni/iconscout-unicons-react';

// Star component
const Star15 = ({ color, size, stroke, strokeWidth, pathClassName, width, height, ...props }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 200 200"
    width={size ?? width}
    height={size ?? height}
    {...props}
  >
    <path
      fill={color ?? "currentColor"}
      stroke={stroke}
      strokeWidth={strokeWidth}
      className={pathClassName}
      d="M95.713 9.378a6 6 0 0 1 8.574 0l9.515 9.717a6 6 0 0 0 6.496 1.381l12.645-5.007a6 6 0 0 1 7.833 3.487l4.74 12.748a6 6 0 0 0 5.372 3.903l13.589.57a6 6 0 0 1 5.737 6.371l-.855 13.573a6 6 0 0 0 3.321 5.752l12.182 6.046a6 6 0 0 1 2.649 8.154l-6.301 12.053a6 6 0 0 0 .694 6.604l8.67 10.479a6 6 0 0 1-.897 8.527l-10.658 8.447a6 6 0 0 0-2.052 6.316l3.657 13.099a6 6 0 0 1-4.287 7.426l-13.173 3.381a6 6 0 0 0-4.443 4.936l-1.987 13.454a6 6 0 0 1-6.936 5.04l-13.41-2.269a6 6 0 0 0-6.066 2.701l-7.287 11.483a6 6 0 0 1-8.387 1.783l-11.327-7.527a6 6 0 0 0-6.641 0l-11.328 7.527a6 6 0 0 1-8.387-1.783l-7.287-11.483a6 6 0 0 0-6.066-2.701l-13.41 2.269a6 6 0 0 1-6.936-5.04l-1.987-13.454a6 6 0 0 0-4.443-4.936l-13.173-3.381a6 6 0 0 1-4.287-7.426l3.657-13.099a6 6 0 0 0-2.052-6.316l-10.658-8.447a6 6 0 0 1-.897-8.527l8.67-10.479a6 6 0 0 0 .694-6.604l-6.301-12.053a6 6 0 0 1 2.65-8.154l12.181-6.046a6 6 0 0 0 3.32-5.752l-.854-13.573a6 6 0 0 1 5.737-6.372l13.588-.569a6 6 0 0 0 5.373-3.903l4.74-12.748a6 6 0 0 1 7.833-3.487l12.645 5.007a6 6 0 0 0 6.496-1.38z"
    />
  </svg>
);

interface PitchCardProps {
  pitch: {
    id: string;
    name: string;
    description: string;
    backstory: string;
  };
  isSelected: boolean;
  onSelect: (pitchId: string) => void;
}

const PitchCard: React.FC<PitchCardProps> = ({ pitch, isSelected, onSelect }) => {
  const getIcon = () => {
    switch (pitch.id) {
      case 'discovery':
        return <UilBriefcase className="h-12 w-12 text-black" />;
      case 'customer-support':
        return <UilHeadphonesAlt className="h-12 w-12 text-black" />;
      case 'appointment-setter':
        return <UilCalendarAlt className="h-12 w-12 text-black" />;
      case 'custom':
        return <UilEdit className="h-12 w-12 text-black" />;
      default:
        return <UilBriefcase className="h-12 w-12 text-black" />;
    }
  };

  const getColor = () => {
    switch (pitch.id) {
      case 'discovery':
        return 'bg-purple-400';
      case 'customer-support':
        return 'bg-green-400';
      case 'appointment-setter':
        return 'bg-orange-400';
      case 'custom':
        return 'bg-pink-400';
      default:
        return 'bg-[rgb(0,82,255)]';
    }
  };

  const getHeaderClass = () => {
    return 'bg-black text-white';
  };

  return (
    <div className="relative">
      {/* Selection badge */}
      {isSelected && (
        <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
          <div className="relative">
            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
              <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
            </div>
            <div className="absolute inset-0 flex items-center justify-center">
              <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                SELECTED
              </span>
            </div>
          </div>
        </div>
      )}
      <div
        className={`
          relative w-full h-full min-h-[400px]
          border-4 border-black
          flex flex-col
          transition-all duration-200
          ${isSelected ? 'scale-105 shadow-[8px_8px_0_rgba(0,0,0,1)]' : 'shadow-[4px_4px_0_rgba(0,0,0,1)]'}
          hover:scale-[1.02] hover:shadow-[6px_6px_0_rgba(0,0,0,1)]
          cursor-pointer overflow-hidden
          ${getColor()}
        `}
        onClick={() => onSelect(pitch.id)}
      >
        {/* Category label at top */}
        <div className={`${getHeaderClass()} px-4 py-3 text-sm border-b-4 border-black flex items-center gap-2`} style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
          pitch_type
        </div>

        {/* Main content with icon */}
        <div className="flex-grow p-6 flex flex-col items-center justify-center">
          <div className="mb-4">
            {getIcon()}
          </div>
          
          {/* Title */}
          <h3 className="text-2xl font-black text-black uppercase text-center mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
            {pitch.name}
          </h3>
          
          {/* Description */}
          <p className="text-sm text-black font-bold text-center">
            {pitch.description}
          </p>
        </div>

        {/* Backstory section at bottom */}
        <div className="bg-white border-t-4 border-black p-4">
          <p className="text-xs text-gray-700 leading-relaxed">
            <span className="font-black text-black uppercase">How it works:</span> {pitch.backstory}
          </p>
        </div>

        {/* Decorative elements */}
        <div className="absolute top-16 right-4 w-4 h-4 bg-yellow-400 border-2 border-black"></div>
      </div>
    </div>
  );
};

export default PitchCard;


================================================
FILE: src/components/custom/playground-agent-modal.tsx
================================================
'use client'

import * as React from 'react'
import { Card, CardHeader, CardTitle, CardContent } from '../ui/card'
import { Button } from '../ui/button'
import { Input } from '../ui/input'
import { Badge } from '../ui/badge'
import { cn } from '@/lib/utils'
import {
  UilTimes,
  UilRobot,
  UilSetting,
  UilPlay,
  UilStar,
  UilDollarSign,
  UilHeadphonesAlt,
  UilCalendarAlt,
  UilDesktop,
  UilBrain,
  UilSave
} from '@tooni/iconscout-unicons-react'

interface Agent {
  id: string
  name: string
  description: string
  purpose: 'sales' | 'support' | 'appointment' | 'technical' | 'custom'
  voiceProvider: 'elevenlabs' | 'chatterbox'
  voiceId: string
  language: string
  systemPrompt: string
  temperature: number
  maxTokens: number
  ragWorkflows: string[]
  isCustom?: boolean
  createdAt?: string
}

interface PlaygroundAgentModalProps {
  isOpen: boolean
  onClose: () => void
  onSelectAgent: (agent: Agent) => void
  onSaveConfiguration: (name: string, configuration: any) => void
  currentConfiguration?: any
}

export default function PlaygroundAgentModal({ 
  isOpen, 
  onClose, 
  onSelectAgent, 
  onSaveConfiguration,
  currentConfiguration 
}: PlaygroundAgentModalProps) {
  const [activeTab, setActiveTab] = React.useState<'prebuilt' | 'custom'>('prebuilt')
  const [searchQuery, setSearchQuery] = React.useState('')
  const [saveModalOpen, setSaveModalOpen] = React.useState(false)
  const [configName, setConfigName] = React.useState('')

  const PREBUILT_AGENTS: Agent[] = [
    // Chatterbox (Open Source) Agents
    {
      id: 'sales-pro-3000',
      name: 'Sales Pro 3000',
      description: 'Advanced sales agent with objection handling and lead qualification',
      purpose: 'sales',
      voiceProvider: 'chatterbox',
      voiceId: 'nova',
      language: 'en-US',
      systemPrompt: 'You are a professional sales agent focused on understanding customer needs and providing value-driven solutions.',
      temperature: 0.7,
      maxTokens: 500,
      ragWorkflows: ['sales-objection-master', 'product-catalog']
    },
    {
      id: 'support-specialist',
      name: 'Support Specialist',
      description: 'Customer support agent with technical knowledge and troubleshooting skills',
      purpose: 'support',
      voiceProvider: 'chatterbox',
      voiceId: 'alloy',
      language: 'en-US',
      systemPrompt: 'You are a helpful customer support specialist. Always be patient, understanding, and solution-focused.',
      temperature: 0.5,
      maxTokens: 400,
      ragWorkflows: ['customer-support-kb', 'technical-docs']
    },
    {
      id: 'appointment-setter',
      name: 'Appointment Setter',
      description: 'Efficient scheduling agent for booking meetings and managing calendars',
      purpose: 'appointment',
      voiceProvider: 'chatterbox',
      voiceId: 'echo',
      language: 'en-US',
      systemPrompt: 'You are a professional appointment setter. Be concise, friendly, and focus on finding suitable meeting times.',
      temperature: 0.3,
      maxTokens: 300,
      ragWorkflows: ['appointment-scripts']
    },
    {
      id: 'technical-expert',
      name: 'Technical Expert',
      description: 'Advanced technical support with API and integration expertise',
      purpose: 'technical',
      voiceProvider: 'chatterbox',
      voiceId: 'fable',
      language: 'en-US',
      systemPrompt: 'You are a technical expert. Provide clear, accurate technical guidance and solutions.',
      temperature: 0.4,
      maxTokens: 600,
      ragWorkflows: ['technical-docs']
    },
    // ElevenLabs (Commercial) Agents
    {
      id: 'premium-sales-executive',
      name: 'Premium Sales Executive',
      description: 'High-end sales agent with premium voice quality and advanced conversational skills',
      purpose: 'sales',
      voiceProvider: 'elevenlabs',
      voiceId: 'rachel',
      language: 'en-US',
      systemPrompt: 'You are an elite sales executive with exceptional communication skills. Focus on building rapport and closing deals.',
      temperature: 0.8,
      maxTokens: 600,
      ragWorkflows: ['sales-objection-master', 'product-catalog']
    },
    {
      id: 'enterprise-support',
      name: 'Enterprise Support',
      description: 'Premium customer support for enterprise clients with sophisticated problem-solving',
      purpose: 'support',
      voiceProvider: 'elevenlabs',
      voiceId: 'drew',
      language: 'en-US',
      systemPrompt: 'You are an enterprise-level support specialist. Provide comprehensive, professional assistance with complex issues.',
      temperature: 0.6,
      maxTokens: 700,
      ragWorkflows: ['customer-support-kb', 'technical-docs']
    },
    {
      id: 'executive-scheduler',
      name: 'Executive Scheduler',
      description: 'Premium appointment scheduling for C-level executives and VIP clients',
      purpose: 'appointment',
      voiceProvider: 'elevenlabs',
      voiceId: 'clyde',
      language: 'en-US',
      systemPrompt: 'You are an executive assistant specializing in high-level appointment scheduling. Be sophisticated and efficient.',
      temperature: 0.4,
      maxTokens: 400,
      ragWorkflows: ['appointment-scripts']
    },
    {
      id: 'senior-technical-architect',
      name: 'Senior Technical Architect',
      description: 'Premium technical consultation with advanced system architecture expertise',
      purpose: 'technical',
      voiceProvider: 'elevenlabs',
      voiceId: 'paul',
      language: 'en-US',
      systemPrompt: 'You are a senior technical architect. Provide sophisticated technical guidance with enterprise-level insights.',
      temperature: 0.5,
      maxTokens: 800,
      ragWorkflows: ['technical-docs']
    }
  ]

  const [customAgents, setCustomAgents] = React.useState<Agent[]>([
    {
      id: 'custom-demo-agent',
      name: 'My Custom Agent',
      description: 'Custom playground configuration',
      purpose: 'custom',
      voiceProvider: 'chatterbox',
      voiceId: 'nova',
      language: 'en-US',
      systemPrompt: 'You are a helpful AI assistant.',
      temperature: 0.7,
      maxTokens: 500,
      ragWorkflows: [],
      isCustom: true,
      createdAt: '2024-01-15'
    }
  ])

  const filteredPrebuiltAgents = PREBUILT_AGENTS.filter(agent =>
    agent.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    agent.description.toLowerCase().includes(searchQuery.toLowerCase())
  )

  const filteredCustomAgents = customAgents.filter(agent =>
    agent.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    agent.description.toLowerCase().includes(searchQuery.toLowerCase())
  )

  const getPurposeIcon = (purpose: string) => {
    switch (purpose) {
      case 'sales': return UilDollarSign
      case 'support': return UilHeadphonesAlt
      case 'appointment': return UilCalendarAlt
      case 'technical': return UilDesktop
      default: return UilSetting
    }
  }

  const getPurposeColor = (purpose: string) => {
    switch (purpose) {
      case 'sales': return 'purple'
      case 'support': return 'green'
      case 'appointment': return 'orange'
      case 'technical': return 'pink'
      default: return 'gray'
    }
  }

  const handleSaveConfiguration = () => {
    if (configName.trim() && currentConfiguration) {
      const newCustomAgent: Agent = {
        id: `custom-${Date.now()}`,
        name: configName,
        description: 'Custom playground configuration',
        purpose: 'custom',
        voiceProvider: currentConfiguration.voiceProvider || 'chatterbox',
        voiceId: currentConfiguration.voice || 'nova',
        language: currentConfiguration.language || 'en-US',
        systemPrompt: currentConfiguration.systemPrompt || '',
        temperature: currentConfiguration.temperature?.[0] || 0.7,
        maxTokens: currentConfiguration.maxTokens?.[0] || 500,
        ragWorkflows: currentConfiguration.selectedRagWorkflows || [],
        isCustom: true,
        createdAt: new Date().toISOString().split('T')[0]
      }
      
      setCustomAgents(prev => [newCustomAgent, ...prev])
      onSaveConfiguration(configName, currentConfiguration)
      setSaveModalOpen(false)
      setConfigName('')
    }
  }

  if (!isOpen) return null

  return (
    <>
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <Card className="w-full max-w-4xl border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-background max-h-[90vh] overflow-y-auto">
          <CardHeader className="border-b-4 border-black bg-[rgb(0,82,255)] relative sticky top-0 z-10">
            <CardTitle className="text-2xl font-black uppercase text-white pr-10" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              SELECT AGENT FOR PLAYGROUND
            </CardTitle>
            <Button
              variant="neutral"
              size="sm"
              className="absolute top-4 right-16"
              onClick={() => setSaveModalOpen(true)}
              disabled={!currentConfiguration}
            >
              <UilSave className="h-4 w-4 mr-2" />
              SAVE CONFIG
            </Button>
            <Button
              variant="neutral"
              size="sm"
              className="absolute top-4 right-4"
              onClick={onClose}
            >
              <UilTimes className="h-5 w-5 text-black" />
            </Button>
          </CardHeader>
          
          <CardContent className="p-6">
            {/* Search Bar */}
            <div className="mb-6">
              <Input
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search agents..."
                className="border-2 border-black font-bold"
              />
            </div>

            {/* Tabs */}
            <div className="flex mb-6">
              <Button
                onClick={() => setActiveTab('prebuilt')}
                className={cn(
                  "border-2 border-black font-bold mr-2",
                  activeTab === 'prebuilt' 
                    ? "bg-[rgb(0,82,255)] text-white shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                    : "bg-white text-black hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
                )}
              >
                <UilRobot className="h-4 w-4 mr-2" />
                PREBUILT AGENTS ({filteredPrebuiltAgents.length})
              </Button>
              <Button
                onClick={() => setActiveTab('custom')}
                className={cn(
                  "border-2 border-black font-bold",
                  activeTab === 'custom' 
                    ? "bg-[rgb(0,82,255)] text-white shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                    : "bg-white text-black hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
                )}
              >
                <UilStar className="h-4 w-4 mr-2" />
                MY AGENTS ({filteredCustomAgents.length})
              </Button>
            </div>

            {/* Agent Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {activeTab === 'prebuilt' ? (
                filteredPrebuiltAgents.length > 0 ? (
                  filteredPrebuiltAgents.map((agent) => {
                    const Icon = getPurposeIcon(agent.purpose)
                    const color = getPurposeColor(agent.purpose)
                    return (
                      <Card
                        key={agent.id}
                        className="cursor-pointer border-2 border-black transition-all bg-white hover:shadow-[4px_4px_0_rgba(0,0,0,1)]"
                        onClick={() => onSelectAgent(agent)}
                      >
                        <CardContent className="p-4">
                          <div className="flex items-start gap-3 mb-3">
                            <div className={`w-12 h-12 border-2 border-black flex items-center justify-center bg-${color}-200`}>
                              <Icon className={`h-6 w-6 text-${color}-600`} />
                            </div>
                            <div className="flex-1">
                              <h4 className="font-black text-lg text-black mb-1">{agent.name}</h4>
                              <p className="text-sm text-gray-600 mb-2">{agent.description}</p>
                              <div className="flex items-center gap-2">
                                <Badge className={`bg-${color}-600 text-white border-2 border-black text-xs`}>
                                  {agent.purpose.toUpperCase()}
                                </Badge>
                                <Badge className="bg-green-600 text-white border-2 border-black text-xs">
                                  {agent.voiceProvider.toUpperCase()}
                                </Badge>
                              </div>
                            </div>
                          </div>
                          
                          <div className="space-y-2 text-xs">
                            <div className="flex justify-between">
                              <span className="font-bold">Voice:</span>
                              <span>{agent.voiceId}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="font-bold">Language:</span>
                              <span>{agent.language}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="font-bold">Temperature:</span>
                              <span>{agent.temperature}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="font-bold">Knowledge Base:</span>
                              <span>{agent.ragWorkflows.length} workflows</span>
                            </div>
                          </div>

                          <Button
                            className="w-full mt-4 bg-[rgb(0,82,255)] text-white border-2 border-black font-bold"
                            onClick={(e) => {
                              e.stopPropagation()
                              onSelectAgent(agent)
                            }}
                          >
                            <UilPlay className="h-4 w-4 mr-2" />
                            LOAD AGENT
                          </Button>
                        </CardContent>
                      </Card>
                    )
                  })
                ) : (
                  <div className="col-span-2 text-center py-8">
                    <p className="text-gray-500">No prebuilt agents found matching your search.</p>
                  </div>
                )
              ) : (
                filteredCustomAgents.length > 0 ? (
                  filteredCustomAgents.map((agent) => (
                    <Card
                      key={agent.id}
                      className="cursor-pointer border-2 border-black transition-all bg-white hover:shadow-[4px_4px_0_rgba(0,0,0,1)]"
                      onClick={() => onSelectAgent(agent)}
                    >
                      <CardContent className="p-4">
                        <div className="flex items-start gap-3 mb-3">
                          <div className="w-12 h-12 border-2 border-black flex items-center justify-center bg-gray-200">
                            <UilBrain className="h-6 w-6 text-gray-600" />
                          </div>
                          <div className="flex-1">
                            <h4 className="font-black text-lg text-black mb-1">{agent.name}</h4>
                            <p className="text-sm text-gray-600 mb-2">{agent.description}</p>
                            <div className="flex items-center gap-2">
                              <Badge className="bg-gray-600 text-white border-2 border-black text-xs">
                                CUSTOM
                              </Badge>
                              <Badge className="bg-green-600 text-white border-2 border-black text-xs">
                                {agent.voiceProvider.toUpperCase()}
                              </Badge>
                            </div>
                          </div>
                        </div>
                        
                        <div className="space-y-2 text-xs">
                          <div className="flex justify-between">
                            <span className="font-bold">Created:</span>
                            <span>{agent.createdAt}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="font-bold">Voice:</span>
                            <span>{agent.voiceId}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="font-bold">Temperature:</span>
                            <span>{agent.temperature}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="font-bold">Knowledge Base:</span>
                            <span>{agent.ragWorkflows.length} workflows</span>
                          </div>
                        </div>

                        <Button
                          className="w-full mt-4 bg-[rgb(0,82,255)] text-white border-2 border-black font-bold"
                          onClick={(e) => {
                            e.stopPropagation()
                            onSelectAgent(agent)
                          }}
                        >
                          <UilPlay className="h-4 w-4 mr-2" />
                          LOAD AGENT
                        </Button>
                      </CardContent>
                    </Card>
                  ))
                ) : (
                  <div className="col-span-2 text-center py-8">
                    <p className="text-gray-500 mb-4">No custom agents found.</p>
                    <p className="text-sm text-gray-400">Configure settings in the playground and save them as custom agents.</p>
                  </div>
                )
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Save Configuration Modal */}
      {saveModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60 p-4">
          <Card className="w-full max-w-md border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-background">
            <CardHeader className="border-b-4 border-black bg-[rgb(147,51,234)]">
              <CardTitle className="text-xl font-black uppercase text-white" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                SAVE CONFIGURATION
              </CardTitle>
            </CardHeader>
            
            <CardContent className="p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                    Configuration Name
                  </label>
                  <Input
                    value={configName}
                    onChange={(e) => setConfigName(e.target.value)}
                    placeholder="e.g., My Custom Sales Agent"
                    className="border-2 border-black font-bold"
                  />
                </div>
                
                <div className="flex gap-2">
                  <Button
                    variant="neutral"
                    onClick={() => setSaveModalOpen(false)}
                    className="flex-1"
                  >
                    CANCEL
                  </Button>
                  <Button
                    onClick={handleSaveConfiguration}
                    disabled={!configName.trim()}
                    className="flex-1 bg-[rgb(147,51,234)] text-white"
                  >
                    <UilSave className="h-4 w-4 mr-2" />
                    SAVE
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </>
  )
}


================================================
FILE: src/components/custom/playground-chat-interface.tsx
================================================
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { UilSetting, UilTimes, UilTrash, UilRobot, UilPlay } from '@tooni/iconscout-unicons-react'
import PlaygroundAgentModal from './playground-agent-modal'

interface Message {
  id: string
  content: string
  sender: 'user' | 'assistant'
  timestamp: Date
}

interface Agent {
  id: string
  name: string
  description: string
  purpose: string
  voiceProvider: string
  voiceId: string
  language: string
  systemPrompt: string
  temperature: number
  maxTokens: number
  ragWorkflows: string[]
  isCustom?: boolean
}

interface PlaygroundChatInterfaceProps {
  currentConfiguration?: any
  onConfigurationChange?: (config: any) => void
  onAgentChange?: (agent: Agent | null) => void
}

export default function PlaygroundChatInterface({ 
  currentConfiguration, 
  onConfigurationChange,
  onAgentChange 
}: PlaygroundChatInterfaceProps) {
  const [messages, setMessages] = useState<Message[]>([])
  const [inputValue, setInputValue] = useState('')
  const [isConnected, setIsConnected] = useState(false)
  const [agentModalOpen, setAgentModalOpen] = useState(false)
  const [currentAgent, setCurrentAgent] = useState<Agent | null>(null)

  const handleSendMessage = () => {
    if (!inputValue.trim()) return

    const newMessage: Message = {
      id: Date.now().toString(),
      content: inputValue,
      sender: 'user',
      timestamp: new Date(),
    }

    setMessages(prev => [...prev, newMessage])
    setInputValue('')

    // Simulate assistant response
    setTimeout(() => {
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: 'This is a simulated response from the assistant.',
        sender: 'assistant',
        timestamp: new Date(),
      }
      setMessages(prev => [...prev, assistantMessage])
    }, 1000)
  }

  const handleConnect = () => {
    setIsConnected(!isConnected)
  }

  const handleClearChat = () => {
    setMessages([])
  }

  const handleSelectAgent = (agent: Agent) => {
    setCurrentAgent(agent)
    setAgentModalOpen(false)
    
    // Notify parent component about agent change
    if (onAgentChange) {
      onAgentChange(agent)
    }
    
    // Apply agent configuration to settings panel
    if (onConfigurationChange) {
      onConfigurationChange({
        model: agent.voiceProvider === 'chatterbox' ? 'Chatterbox (Open Source)' : 'OpenAI GPT-4',
        voice: agent.voiceId,
        language: agent.language,
        systemPrompt: agent.systemPrompt,
        temperature: [agent.temperature],
        maxTokens: [agent.maxTokens],
        selectedRagWorkflows: agent.ragWorkflows,
        voiceProvider: agent.voiceProvider
      })
    }

    // Add system message about agent
    const systemMessage = {
      id: Date.now().toString(),
      content: `Loaded agent: ${agent.name}. ${agent.description}`,
      sender: 'assistant' as const,
      timestamp: new Date(),
    }
    setMessages([systemMessage])
  }

  const handleSaveConfiguration = (name: string, configuration: any) => {
    // Here you would typically save to a backend or local storage
    console.log('Saving configuration:', { name, configuration })
  }

  return (
    <div className="flex flex-col h-full bg-gray-50">
      {/* Header */}
      <div className="flex items-center justify-between p-4 bg-white border-b-4 border-black">
        <div className="flex items-center gap-4">
          <h1 className="text-xl font-black uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
            Stream Realtime
          </h1>
          {currentAgent && (
            <div className="flex items-center gap-2">
              <Badge className="bg-[rgb(0,82,255)] text-white border-2 border-black">
                {currentAgent.name}
              </Badge>
              <Badge className="bg-green-600 text-white border-2 border-black text-xs">
                {currentAgent.voiceProvider.toUpperCase()}
              </Badge>
            </div>
          )}
        </div>
        <div className="flex items-center gap-2">
          <Button 
            variant="neutral" 
            className="border-2 border-black font-bold"
            onClick={() => setAgentModalOpen(true)}
          >
            <UilRobot className="h-4 w-4 mr-2" />
            {currentAgent ? 'CHANGE AGENT' : 'SELECT AGENT'}
          </Button>
          <Button 
            variant="neutral" 
            size="sm"
            className="border-2 border-black font-bold"
          >
            <UilSetting className="h-4 w-4" />
          </Button>
          <Button 
            variant="neutral" 
            size="sm"
            className="border-2 border-black font-bold"
          >
            <UilTimes className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* Chat Messages Area */}
      <div className="flex-1 overflow-y-auto p-6">
        {messages.length === 0 ? (
          <div className="flex items-center justify-center h-full">
            <div className="text-center">
              <div className="mb-4">
                <div className={`w-16 h-16 mx-auto border-2 border-black ${isConnected ? 'bg-green-400' : 'bg-red-400'} flex items-center justify-center shadow-[4px_4px_0_rgba(0,0,0,1)]`}>
                  <span className="text-2xl font-black text-white">
                    {isConnected ? '✓' : '✕'}
                  </span>
                </div>
              </div>
              <p className="text-gray-600 font-bold">
                {isConnected ? 'Connected' : 'Connection failed'}
              </p>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`
                  p-4 border-2 border-black text-sm
                  ${message.sender === 'user' 
                    ? 'bg-[rgb(0,82,255)] text-white ml-8 shadow-[4px_4px_0_rgba(0,0,0,1)]' 
                    : 'bg-gray-100 mr-8 shadow-[4px_4px_0_rgba(0,0,0,1)]'
                  }
                `}
              >
                <div className="flex items-center gap-3 mb-2">
                  <div className={`w-8 h-8 border-2 border-black flex items-center justify-center ${message.sender === 'user' ? 'bg-white' : 'bg-green-500'}`}>
                    {message.sender === 'user' ? (
                      <span className="text-[rgb(0,82,255)] font-black text-xs">U</span>
                    ) : (
                      <span className="text-white font-black text-xs">A</span>
                    )}
                  </div>
                  <p className="font-bold text-sm uppercase">
                    {message.sender === 'user' ? 'USER' : 'ASSISTANT'}
                  </p>
                </div>
                <p>{message.content}</p>
                <p className="text-xs opacity-60 mt-2">
                  {message.timestamp.toLocaleTimeString()}
                </p>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Input Area */}
      <div className="p-4 bg-white border-t-4 border-black">
        <div className="flex gap-2 mb-3">
          <Button
            onClick={handleClearChat}
            variant="neutral"
            className="border-2 border-black font-bold"
          >
            <UilTrash className="h-4 w-4 mr-2" />
            Clear the chat to start a new stream
          </Button>
          <Button
            onClick={handleConnect}
            className={`border-2 border-black font-bold shadow-[2px_2px_0_rgba(0,0,0,1)] ${
              isConnected 
                ? 'bg-red-400 hover:bg-red-500 text-black' 
                : 'bg-green-400 hover:bg-green-500 text-black'
            }`}
          >
            {isConnected ? 'Disconnect' : 'Connect'}
          </Button>
        </div>
        
        <div className="flex gap-2">
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            placeholder="Type your message..."
            className="flex-1 border-2 border-black font-bold"
            disabled={!isConnected}
          />
          <Button
            onClick={handleSendMessage}
            disabled={!isConnected || !inputValue.trim()}
            className="bg-blue-400 hover:bg-blue-500 border-2 border-black font-bold shadow-[2px_2px_0_rgba(0,0,0,1)] text-black"
          >
            Run Ctrl+↵
          </Button>
        </div>
      </div>

      {/* Agent Selection Modal */}
      <PlaygroundAgentModal
        isOpen={agentModalOpen}
        onClose={() => setAgentModalOpen(false)}
        onSelectAgent={handleSelectAgent}
        onSaveConfiguration={handleSaveConfiguration}
        currentConfiguration={currentConfiguration}
      />
    </div>
  )
}


================================================
FILE: src/components/custom/playground-settings-panel.tsx
================================================
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Switch } from '@/components/ui/switch'
import { Slider } from '@/components/ui/slider'
import { Card, CardContent } from '@/components/ui/card'
import { Textarea } from '@/components/ui/textarea'
import { Badge } from '@/components/ui/badge'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuPortal,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import PremiumFeatureCard from './premium-feature-card'
import { cn } from '@/lib/utils'
import { 
  UilDollarSign, 
  UilHeadphonesAlt, 
  UilCalendarAlt, 
  UilDesktop, 
  UilSetting,
  UilCheckCircle,
  UilBrain,
  UilInfoCircle,
  UilLock,
  UilUser,
  UilCreditCard,
  UilKeyboard,
  UilUsersAlt,
  UilUserPlus,
  UilEnvelope,
  UilCommentAlt,
  UilPlusCircle,
  UilPlus,
  UilGithub,
  UilQuestionCircle,
  UilCloud,
  UilSignOutAlt,
  UilMicrophone,
  UilGlobe,
  UilAngleDown,
  UilMusicNote,
  UilVolumeUp,
  UilUpload
} from '@tooni/iconscout-unicons-react'

interface PlaygroundSettingsPanelProps {
  configuration: any
  onConfigurationChange: (config: any) => void
  currentAgent?: any
}

export default function PlaygroundSettingsPanel({ 
  configuration, 
  onConfigurationChange,
  currentAgent 
}: PlaygroundSettingsPanelProps) {
  // Audio files from app.tsx
  const mockAudioFiles = [
    { name: 'CrowdedOfficeAudio.m4a', category: 'Crowded Office', description: 'Busy office environment with typing and conversations' },
    { name: 'CafeAudio.m4a', category: 'Café Ambience', description: 'Coffee shop atmosphere with light chatter' },
    { name: 'CoworkingAudio.m4a', category: 'Co-Working Space', description: 'Modern workspace with collaborative energy' },
    { name: 'TrainstationAudio.m4a', category: 'Train Station', description: 'Transit hub with announcements and movement' },
    { name: 'LibraryAudio.m4a', category: 'Library', description: 'Quiet study environment with subtle sounds' },
  ];

  const handleSelectAudio = (fileName: string) => {
    const selectedAudio = configuration.selectedAudio === fileName ? null : fileName;
    updateConfig({ selectedAudio });
  };

  const handleFileUpload = (file: File) => {
    const fileName = file.name;
    updateConfig({ selectedAudio: fileName });
    console.log('File uploaded:', fileName);
  };

  // Use configuration from props instead of local state
  const model = configuration.model
  const voice = configuration.voice
  const language = configuration.language
  const temperature = configuration.temperature
  const maxTokens = configuration.maxTokens
  const systemPrompt = configuration.systemPrompt
  const selectedRagWorkflows = configuration.selectedRagWorkflows
  const relevanceThreshold = configuration.relevanceThreshold
  const maxResults = configuration.maxResults
  const codeExecution = configuration.codeExecution
  const functionCalling = configuration.functionCalling
  const automaticFunction = configuration.automaticFunction
  const groundingSearch = configuration.groundingSearch
  const urlContext = configuration.urlContext

  const updateConfig = (updates: any) => {
    onConfigurationChange(updates)
  }

  const RAG_WORKFLOWS = [
    {
      id: 'sales-objection-master',
      name: 'Sales Objection Master',
      description: 'Comprehensive sales objection handling with 9 focus areas',
      stats: { embeddings: 2847, sources: 'YouTube + Documents', focusAreas: 9 },
      icon: UilDollarSign,
      color: 'purple'
    },
    {
      id: 'customer-support-kb',
      name: 'Customer Support Knowledge',
      description: 'Product documentation, FAQs, and troubleshooting procedures',
      stats: { embeddings: 1523, sources: 'Documents + URLs', focusAreas: 6 },
      icon: UilHeadphonesAlt,
      color: 'green'
    },
    {
      id: 'appointment-scripts',
      name: 'Appointment Setting Playbook',
      description: 'Proven scripts and techniques for booking meetings',
      stats: { embeddings: 892, sources: 'Documents', focusAreas: 4 },
      icon: UilCalendarAlt,
      color: 'orange'
    },
    {
      id: 'technical-docs',
      name: 'Technical Documentation Hub',
      description: 'API docs, integration guides, and technical specifications',
      stats: { embeddings: 3156, sources: 'Documents + URLs', focusAreas: 8 },
      icon: UilDesktop,
      color: 'pink'
    }
  ]

  const getPurposeIcon = (purpose: string) => {
    switch (purpose) {
      case 'sales': return UilDollarSign
      case 'support': return UilHeadphonesAlt
      case 'appointment': return UilCalendarAlt
      case 'technical': return UilDesktop
      default: return UilSetting
    }
  }

  const getPurposeColor = (purpose: string) => {
    switch (purpose) {
      case 'sales': return 'purple'
      case 'support': return 'green'
      case 'appointment': return 'orange'
      case 'technical': return 'pink'
      default: return 'gray'
    }
  }

  return (
    <TooltipProvider delayDuration={300}>
      <div className="w-80 bg-white border-l-4 border-black p-6 overflow-y-auto">
          <div className="space-y-6">
            {/* Current Agent Information */}
            {currentAgent && (
              <div>
            <label className="block text-sm font-black uppercase text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              Current Agent
            </label>
            <Card className="border-2 border-black bg-white shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="flex items-start gap-3 mb-3">
                  <div className={`w-10 h-10 border-2 border-black flex items-center justify-center bg-${getPurposeColor(currentAgent.purpose)}-200`}>
                    {(() => {
                      const Icon = getPurposeIcon(currentAgent.purpose)
                      return <Icon className={`h-5 w-5 text-${getPurposeColor(currentAgent.purpose)}-600`} />
                    })()}
                  </div>
                  <div className="flex-1">
                    <h4 className="font-black text-sm text-black mb-1">{currentAgent.name}</h4>
                    <p className="text-xs text-gray-600 mb-2">{currentAgent.description}</p>
                    <div className="flex items-center gap-1 mb-2">
                      <Badge className={`bg-${getPurposeColor(currentAgent.purpose)}-600 text-white border-1 border-black text-xs`}>
                        {currentAgent.purpose.toUpperCase()}
                      </Badge>
                      <Badge className={cn(
                        "border-1 border-black text-xs",
                        currentAgent.voiceProvider === 'chatterbox' 
                          ? "bg-green-600 text-white" 
                          : "bg-blue-600 text-white"
                      )}>
                        {currentAgent.voiceProvider.toUpperCase()}
                      </Badge>
                    </div>
                  </div>
                </div>
                
                <div className="space-y-1 text-xs">
                  <div className="flex justify-between">
                    <span className="font-bold">Voice:</span>
                    <span>{currentAgent.voiceId}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-bold">Language:</span>
                    <span>{currentAgent.language}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-bold">Temperature:</span>
                    <span>{currentAgent.temperature}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-bold">Knowledge Base:</span>
                    <span>{currentAgent.ragWorkflows?.length || 0} workflows</span>
                  </div>
                  {currentAgent.isCustom && (
                    <div className="flex justify-between">
                      <span className="font-bold">Created:</span>
                      <span>{currentAgent.createdAt}</span>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* AI Model Selection */}
        <div>
          <div className="flex items-center gap-2 mb-2">
            <label className="block text-sm font-black uppercase text-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              AI Model
            </label>
            <Tooltip>
              <TooltipTrigger asChild>
                <button className="p-0 bg-transparent border-none outline-none">
                  <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                </button>
              </TooltipTrigger>
              <TooltipContent side="top">
                <p>Choose the underlying AI model for conversation logic</p>
              </TooltipContent>
            </Tooltip>
          </div>
          <div className="space-y-2">
            <Card 
              onClick={() => updateConfig({ model: 'Gemini Live 002' })}
              className={cn(
                "cursor-pointer border-2 border-black transition-all bg-white",
                model === 'Gemini Live 002' 
                  ? "bg-purple-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                  : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
              )}
            >
              <CardContent className="p-3">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-black text-sm">Gemini Live 002</span>
                    <Badge className="bg-purple-600 text-white border-2 border-black text-xs ml-2">FAST</Badge>
                    <p className="text-xs text-gray-600 mt-1">Ultra-fast inference, real-time</p>
                  </div>
                  <div className={cn(
                    "w-4 h-4 border-2 border-black",
                    model === 'Gemini Live 002' && "bg-purple-600"
                  )} />
                </div>
              </CardContent>
            </Card>
            
            <Card 
              onClick={() => updateConfig({ model: 'OpenAI GPT-4o Realtime' })}
              className={cn(
                "cursor-pointer border-2 border-black transition-all bg-white",
                model === 'OpenAI GPT-4o Realtime' 
                  ? "bg-blue-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                  : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
              )}
            >
              <CardContent className="p-3">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-black text-sm">GPT-4o Realtime</span>
                    <Badge className="bg-blue-600 text-white border-2 border-black text-xs ml-2">PREMIUM</Badge>
                    <p className="text-xs text-gray-600 mt-1">Advanced reasoning, fast inference</p>
                  </div>
                  <div className={cn(
                    "w-4 h-4 border-2 border-black",
                    model === 'OpenAI GPT-4o Realtime' && "bg-blue-600"
                  )} />
                </div>
              </CardContent>
            </Card>

            <Card 
              onClick={() => updateConfig({ model: 'Claude 3.5 Sonnet' })}
              className={cn(
                "cursor-pointer border-2 border-black transition-all bg-white",
                model === 'Claude 3.5 Sonnet' 
                  ? "bg-orange-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                  : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
              )}
            >
              <CardContent className="p-3">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-black text-sm">Claude 3.5 Sonnet</span>
                    <Badge className="bg-orange-600 text-white border-2 border-black text-xs ml-2">SMART</Badge>
                    <p className="text-xs text-gray-600 mt-1">Excellent reasoning, coding</p>
                  </div>
                  <div className={cn(
                    "w-4 h-4 border-2 border-black",
                    model === 'Claude 3.5 Sonnet' && "bg-orange-600"
                  )} />
                </div>
              </CardContent>
            </Card>

            <Card 
              onClick={() => updateConfig({ model: 'Llama 3.2 90B' })}
              className={cn(
                "cursor-pointer border-2 border-black transition-all bg-white",
                model === 'Llama 3.2 90B' 
                  ? "bg-green-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                  : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
              )}
            >
              <CardContent className="p-3">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-black text-sm">Llama 3.2 90B</span>
                    <Badge className="bg-green-600 text-white border-2 border-black text-xs ml-2">OPEN SOURCE</Badge>
                    <p className="text-xs text-gray-600 mt-1">Free, fast open-source model</p>
                  </div>
                  <div className={cn(
                    "w-4 h-4 border-2 border-black",
                    model === 'Llama 3.2 90B' && "bg-green-600"
                  )} />
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Voice/TTS Provider */}
        <div>
          <div className="flex items-center gap-2 mb-2">
            <label className="block text-sm font-black uppercase text-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              Voice Provider
            </label>
            <Tooltip>
              <TooltipTrigger asChild>
                <button className="p-0 bg-transparent border-none outline-none">
                  <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                </button>
              </TooltipTrigger>
              <TooltipContent side="top">
                <p>Choose the text-to-speech provider for voice generation</p>
              </TooltipContent>
            </Tooltip>
          </div>
          
          <div className="space-y-2 mb-3">
            <Card 
              onClick={() => updateConfig({ voiceProvider: 'openai' })}
              className={cn(
                "cursor-pointer border-2 border-black transition-all bg-white",
                configuration.voiceProvider === 'openai' 
                  ? "bg-blue-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                  : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
              )}
            >
              <CardContent className="p-2">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-black text-xs">OpenAI TTS</span>
                    <p className="text-xs text-gray-600">Natural voices, fast</p>
                  </div>
                  <div className={cn(
                    "w-3 h-3 border-2 border-black",
                    configuration.voiceProvider === 'openai' && "bg-blue-600"
                  )} />
                </div>
              </CardContent>
            </Card>

            <Card 
              onClick={() => updateConfig({ voiceProvider: 'google' })}
              className={cn(
                "cursor-pointer border-2 border-black transition-all bg-white",
                configuration.voiceProvider === 'google' 
                  ? "bg-red-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                  : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
              )}
            >
              <CardContent className="p-2">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-black text-xs">Google TTS</span>
                    <p className="text-xs text-gray-600">Multilingual, WaveNet</p>
                  </div>
                  <div className={cn(
                    "w-3 h-3 border-2 border-black",
                    configuration.voiceProvider === 'google' && "bg-red-600"
                  )} />
                </div>
              </CardContent>
            </Card>

            <Card 
              onClick={() => updateConfig({ voiceProvider: 'elevenlabs' })}
              className={cn(
                "cursor-pointer border-2 border-black transition-all bg-white",
                configuration.voiceProvider === 'elevenlabs' 
                  ? "bg-purple-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                  : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
              )}
            >
              <CardContent className="p-2">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-black text-xs">ElevenLabs</span>
                    <Badge className="bg-purple-600 text-white border-1 border-black text-xs ml-1">PREMIUM</Badge>
                    <p className="text-xs text-gray-600">Ultra-realistic voices</p>
                  </div>
                  <div className={cn(
                    "w-3 h-3 border-2 border-black",
                    configuration.voiceProvider === 'elevenlabs' && "bg-purple-600"
                  )} />
                </div>
              </CardContent>
            </Card>

            <Card 
              onClick={() => updateConfig({ voiceProvider: 'chatterbox' })}
              className={cn(
                "cursor-pointer border-2 border-black transition-all bg-white",
                configuration.voiceProvider === 'chatterbox' 
                  ? "bg-green-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                  : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
              )}
            >
              <CardContent className="p-2">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-black text-xs">Chatterbox</span>
                    <Badge className="bg-green-600 text-white border-1 border-black text-xs ml-1">OPEN SOURCE</Badge>
                    <p className="text-xs text-gray-600">Free, local TTS</p>
                  </div>
                  <div className={cn(
                    "w-3 h-3 border-2 border-black",
                    configuration.voiceProvider === 'chatterbox' && "bg-green-600"
                  )} />
                </div>
              </CardContent>
            </Card>

            <Card 
              onClick={() => updateConfig({ voiceProvider: 'kokoro' })}
              className={cn(
                "cursor-pointer border-2 border-black transition-all bg-white",
                configuration.voiceProvider === 'kokoro' 
                  ? "bg-cyan-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                  : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
              )}
            >
              <CardContent className="p-2">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-black text-xs">Kokoro TTS</span>
                    <Badge className="bg-cyan-600 text-white border-1 border-black text-xs ml-1">LOCAL</Badge>
                    <p className="text-xs text-gray-600">Fast neural TTS</p>
                  </div>
                  <div className={cn(
                    "w-3 h-3 border-2 border-black",
                    configuration.voiceProvider === 'kokoro' && "bg-cyan-600"
                  )} />
                </div>
              </CardContent>
            </Card>

            <Card 
              onClick={() => updateConfig({ voiceProvider: 'dia' })}
              className={cn(
                "cursor-pointer border-2 border-black transition-all bg-white",
                configuration.voiceProvider === 'dia' 
                  ? "bg-teal-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                  : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
              )}
            >
              <CardContent className="p-2">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-black text-xs">Dia TTS</span>
                    <Badge className="bg-teal-600 text-white border-1 border-black text-xs ml-1">LOCAL</Badge>
                    <p className="text-xs text-gray-600">Voice cloning TTS</p>
                  </div>
                  <div className={cn(
                    "w-3 h-3 border-2 border-black",
                    configuration.voiceProvider === 'dia' && "bg-teal-600"
                  )} />
                </div>
              </CardContent>
            </Card>

            <Card 
              onClick={() => updateConfig({ voiceProvider: 'orpheus' })}
              className={cn(
                "cursor-pointer border-2 border-black transition-all bg-white",
                configuration.voiceProvider === 'orpheus' 
                  ? "bg-indigo-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                  : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
              )}
            >
              <CardContent className="p-2">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-black text-xs">Orpheus TTS</span>
                    <Badge className="bg-indigo-600 text-white border-1 border-black text-xs ml-1">LOCAL</Badge>
                    <p className="text-xs text-gray-600">Expressive speech</p>
                  </div>
                  <div className={cn(
                    "w-3 h-3 border-2 border-black",
                    configuration.voiceProvider === 'orpheus' && "bg-indigo-600"
                  )} />
                </div>
              </CardContent>
            </Card>

            <Card 
              onClick={() => updateConfig({ voiceProvider: 'chattts' })}
              className={cn(
                "cursor-pointer border-2 border-black transition-all bg-white",
                configuration.voiceProvider === 'chattts' 
                  ? "bg-lime-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                  : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
              )}
            >
              <CardContent className="p-2">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-black text-xs">ChatTTS</span>
                    <Badge className="bg-lime-600 text-white border-1 border-black text-xs ml-1">LOCAL</Badge>
                    <p className="text-xs text-gray-600">Conversational TTS</p>
                  </div>
                  <div className={cn(
                    "w-3 h-3 border-2 border-black",
                    configuration.voiceProvider === 'chattts' && "bg-lime-600"
                  )} />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Voice Selection */}
          <div className="relative">
            <label className="block text-xs font-black uppercase text-black mb-1">Voice Selection</label>
            <div className="relative">
              <UilMicrophone className="absolute left-3 top-1/2 transform -translate-y-1/2 w-3 h-3 text-black pointer-events-none" />
              <select 
                value={voice} 
                onChange={(e) => updateConfig({ voice: e.target.value })}
                className="w-full border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] p-2 pl-8 text-xs font-bold appearance-none bg-white cursor-pointer hover:bg-gray-50"
              >
                {configuration.voiceProvider === 'openai' && (
                  <>
                    <option value="Nova">Nova</option>
                    <option value="Alloy">Alloy</option>
                    <option value="Echo">Echo</option>
                    <option value="Fable">Fable</option>
                    <option value="Onyx">Onyx</option>
                    <option value="Shimmer">Shimmer</option>
                  </>
                )}
                {configuration.voiceProvider === 'google' && (
                  <>
                    <option value="en-US-Neural2-A">en-US-Neural2-A</option>
                    <option value="en-US-Neural2-C">en-US-Neural2-C</option>
                    <option value="en-US-Neural2-D">en-US-Neural2-D</option>
                    <option value="en-US-Neural2-E">en-US-Neural2-E</option>
                    <option value="en-US-Neural2-F">en-US-Neural2-F</option>
                  </>
                )}
                {configuration.voiceProvider === 'elevenlabs' && (
                  <>
                    <option value="Rachel">Rachel</option>
                    <option value="Drew">Drew</option>
                    <option value="Clyde">Clyde</option>
                    <option value="Paul">Paul</option>
                    <option value="Domi">Domi</option>
                    <option value="Dave">Dave</option>
                  </>
                )}
                {configuration.voiceProvider === 'chatterbox' && (
                  <>
                    <option value="Female-1">Female-1</option>
                    <option value="Male-1">Male-1</option>
                    <option value="Neutral-1">Neutral-1</option>
                    <option value="Child-1">Child-1</option>
                  </>
                )}
                {configuration.voiceProvider === 'kokoro' && (
                  <>
                    <option value="af_heart">af_heart</option>
                    <option value="af_sky">af_sky</option>
                    <option value="af_wave">af_wave</option>
                    <option value="am_adam">am_adam</option>
                    <option value="am_michael">am_michael</option>
                    <option value="bf_emma">bf_emma</option>
                    <option value="bf_isabella">bf_isabella</option>
                    <option value="bm_george">bm_george</option>
                    <option value="bm_lewis">bm_lewis</option>
                  </>
                )}
                {configuration.voiceProvider === 'dia' && (
                  <>
                    <option value="default">default</option>
                    <option value="custom-clone-1">custom-clone-1</option>
                    <option value="custom-clone-2">custom-clone-2</option>
                    <option value="custom-clone-3">custom-clone-3</option>
                  </>
                )}
                {configuration.voiceProvider === 'orpheus' && (
                  <>
                    <option value="tara">tara</option>
                    <option value="leah">leah</option>
                    <option value="zac">zac</option>
                    <option value="pierre">pierre</option>
                    <option value="max">max</option>
                    <option value="sophia">sophia</option>
                  </>
                )}
                {configuration.voiceProvider === 'chattts' && (
                  <>
                    <option value="Speaker-1">Speaker-1</option>
                    <option value="Speaker-2">Speaker-2</option>
                    <option value="Speaker-3">Speaker-3</option>
                    <option value="Speaker-4">Speaker-4</option>
                    <option value="Speaker-5">Speaker-5</option>
                    <option value="Random">Random</option>
                  </>
                )}
              </select>
              <UilAngleDown className="absolute right-3 top-1/2 transform -translate-y-1/2 w-3 h-3 text-black pointer-events-none" />
            </div>
          </div>
          
          {/* Voice Cloning Premium Feature */}
          <div className="mt-3">
            <Card className="relative overflow-hidden border-2 border-black bg-gray-100">
              <div className="absolute inset-0 bg-gray-200 opacity-60"></div>
              <CardContent className="p-3 relative">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <h4 className="font-black text-xs uppercase text-black">Voice Cloning</h4>
                      <Badge className="bg-yellow-400 text-black border-1 border-black text-xs px-1 py-0">
                        PREMIUM
                      </Badge>
                    </div>
                    <p className="text-xs text-gray-600 leading-tight">Clone custom voices</p>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-xs font-bold text-gray-600">$99/mo</span>
                    <div className="w-6 h-6 bg-gray-400 border-2 border-black flex items-center justify-center">
                      <UilLock className="h-3 w-3 text-gray-700" />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Background Audio Selection */}
        <div>
          <div className="flex items-center gap-2 mb-3">
            <label className="block text-sm font-black uppercase text-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              Background Audio
            </label>
            <Tooltip>
              <TooltipTrigger asChild>
                <button className="p-0 bg-transparent border-none outline-none">
                  <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                </button>
              </TooltipTrigger>
              <TooltipContent side="top">
                <p>Choose background audio environment for your agent</p>
              </TooltipContent>
            </Tooltip>
          </div>
          
          <div className="space-y-2 mb-3">
            {mockAudioFiles.map((file) => (
              <Card
                key={file.name}
                onClick={() => handleSelectAudio(file.name)}
                className={cn(
                  "cursor-pointer border-2 border-black transition-all bg-white",
                  configuration.selectedAudio === file.name
                    ? "bg-yellow-100 shadow-[4px_4px_0_rgba(0,0,0,1)]"
                    : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
                )}
              >
                <CardContent className="p-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 border-2 border-black flex items-center justify-center bg-[rgb(0,82,255)]">
                        <UilMusicNote className="h-5 w-5 text-white" />
                      </div>
                      <div>
                        <span className="font-black text-sm">{file.category}</span>
                        <p className="text-xs text-gray-600">{file.description}</p>
                      </div>
                    </div>
                    <div className={cn(
                      "w-4 h-4 border-2 border-black",
                      configuration.selectedAudio === file.name && "bg-yellow-600"
                    )} />
                  </div>
                </CardContent>
              </Card>
            ))}

            {/* File Upload Option */}
            <Card
              className="cursor-pointer border-2 border-black transition-all bg-white hover:shadow-[2px_2px_0_rgba(0,0,0,1)] border-dashed"
            >
              <CardContent className="p-3">
                <div 
                  className="flex items-center justify-between"
                  onClick={() => {
                    const input = document.createElement('input');
                    input.type = 'file';
                    input.accept = 'audio/*';
                    input.onchange = (e) => {
                      const file = (e.target as HTMLInputElement).files?.[0];
                      if (file && file.type.startsWith('audio/')) {
                        handleFileUpload(file);
                      }
                    };
                    input.click();
                  }}
                >
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 border-2 border-black flex items-center justify-center bg-gray-200">
                      <UilUpload className="h-5 w-5 text-black" />
                    </div>
                    <div>
                      <span className="font-black text-sm">Upload Custom Audio</span>
                      <p className="text-xs text-gray-600">Drag & drop or click to browse</p>
                    </div>
                  </div>
                  <div className="w-4 h-4 border-2 border-black" />
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Language */}
        <div>
          <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
            Language
          </label>
          <div className="relative">
            <UilGlobe className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-black pointer-events-none" />
            <select 
              value={language} 
              onChange={(e) => updateConfig({ language: e.target.value })}
              className="w-full border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] p-2 pl-10 text-sm font-bold appearance-none bg-white"
            >
              <option>English (United States)</option>
              <option>Spanish</option>
              <option>French</option>
              <option>German</option>
            </select>
            <UilAngleDown className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-black pointer-events-none" />
          </div>
        </div>

        {/* System Prompt */}
        <div>
          <div className="flex items-center gap-2 mb-2">
            <label className="block text-sm font-black uppercase text-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              System Prompt
            </label>
            <Tooltip>
              <TooltipTrigger asChild>
                <button className="p-0 bg-transparent border-none outline-none">
                  <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                </button>
              </TooltipTrigger>
              <TooltipContent side="top">
                <p>Define your AI's personality, behavior, and instructions</p>
              </TooltipContent>
            </Tooltip>
          </div>
          <Textarea
            value={systemPrompt}
            onChange={(e) => updateConfig({ systemPrompt: e.target.value })}
            placeholder="Define the AI's personality and behavior..."
            rows={3}
            className="border-2 border-black font-mono text-xs"
          />
        </div>

        {/* Model Parameters */}
        <div className="space-y-4">
          <div>
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-2">
                <label className="text-sm font-black uppercase">Temperature</label>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <button className="p-0 bg-transparent border-none outline-none">
                      <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                    </button>
                  </TooltipTrigger>
                  <TooltipContent side="top">
                    <p>Controls response creativity: 0 = focused, 2 = creative</p>
                  </TooltipContent>
                </Tooltip>
              </div>
              <span className="text-sm font-bold">{temperature[0].toFixed(1)}</span>
            </div>
            <Slider
              value={temperature}
              onValueChange={(value) => updateConfig({ temperature: value })}
              min={0}
              max={2}
              step={0.1}
            />
            <p className="text-xs text-gray-600 mt-1">Response creativity</p>
          </div>

          <div>
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-2">
                <label className="text-sm font-black uppercase">Max Tokens</label>
                <Tooltip>
                  <TooltipTrigger>
                    <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black" />
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Maximum length of AI responses (higher = longer responses)</p>
                  </TooltipContent>
                </Tooltip>
              </div>
              <span className="text-sm font-bold">{maxTokens[0]}</span>
            </div>
            <Slider
              value={maxTokens}
              onValueChange={(value) => updateConfig({ maxTokens: value })}
              min={50}
              max={2000}
              step={50}
            />
            <p className="text-xs text-gray-600 mt-1">Response length limit</p>
          </div>
        </div>

        {/* RAG Knowledge Base */}
        <div>
          <div className="flex items-center gap-2 mb-3">
            <h3 className="text-sm font-black uppercase text-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              <UilBrain className="inline w-4 h-4 mr-1" />
              Knowledge Base (RAG)
            </h3>
            <Tooltip>
              <TooltipTrigger>
                <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black" />
              </TooltipTrigger>
              <TooltipContent>
                <p>Retrieval Augmented Generation - Add specialized knowledge to your AI</p>
              </TooltipContent>
            </Tooltip>
          </div>
          <div className="space-y-2">
            {RAG_WORKFLOWS.map((workflow) => {
              const Icon = workflow.icon
              const isSelected = selectedRagWorkflows.includes(workflow.id)
              return (
                <Card
                  key={workflow.id}
                  onClick={() => {
                    if (isSelected) {
                      updateConfig({ selectedRagWorkflows: selectedRagWorkflows.filter(id => id !== workflow.id) })
                    } else {
                      updateConfig({ selectedRagWorkflows: [...selectedRagWorkflows, workflow.id] })
                    }
                  }}
                  className={cn(
                    "cursor-pointer border-2 border-black transition-all bg-white",
                    isSelected
                      ? `bg-${workflow.color}-100 shadow-[4px_4px_0_rgba(0,0,0,1)]`
                      : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
                  )}
                >
                  <CardContent className="p-3">
                    <div className="flex items-start gap-2">
                      <div className={cn(
                        "w-8 h-8 border-2 border-black flex items-center justify-center flex-shrink-0",
                        isSelected ? `bg-${workflow.color}-200` : "bg-gray-100"
                      )}>
                        <Icon className={cn(
                          "h-4 w-4",
                          isSelected ? `text-${workflow.color}-600` : "text-gray-600"
                        )} />
                      </div>
                      <div className="flex-1 min-w-0">
                        <h4 className="font-black text-xs text-black mb-1">{workflow.name}</h4>
                        <p className="text-xs text-gray-600 mb-1">{workflow.description}</p>
                        <p className="text-xs font-bold">{workflow.stats.embeddings.toLocaleString()} embeddings</p>
                      </div>
                      <div className={cn(
                        "w-4 h-4 border-2 border-black flex items-center justify-center",
                        isSelected ? `bg-${workflow.color}-600` : "bg-white"
                      )}>
                        {isSelected && <UilCheckCircle className="h-3 w-3 text-white" />}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )
            })}
          </div>
        </div>

        {/* RAG Settings */}
        {selectedRagWorkflows.length > 0 && (
          <div>
            <h4 className="text-sm font-black uppercase text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              RAG Settings
            </h4>
            <div className="space-y-3">
              <div>
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-1">
                    <label className="text-xs font-black uppercase">Relevance Threshold</label>
                    <Tooltip>
                      <TooltipTrigger>
                        <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black" />
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Minimum similarity score for retrieving knowledge (higher = more strict)</p>
                      </TooltipContent>
                    </Tooltip>
                  </div>
                  <span className="text-xs font-bold">{(relevanceThreshold[0] * 100).toFixed(0)}%</span>
                </div>
                <Slider
                  value={relevanceThreshold}
                  onValueChange={(value) => updateConfig({ relevanceThreshold: value })}
                  min={0.5}
                  max={1}
                  step={0.05}
                />
              </div>
              <div>
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-1">
                    <label className="text-xs font-black uppercase">Max Results</label>
                    <Tooltip>
                      <TooltipTrigger>
                        <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black" />
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Maximum number of knowledge pieces to retrieve per query</p>
                      </TooltipContent>
                    </Tooltip>
                  </div>
                  <span className="text-xs font-bold">{maxResults[0]}</span>
                </div>
                <Slider
                  value={maxResults}
                  onValueChange={(value) => updateConfig({ maxResults: value })}
                  min={1}
                  max={20}
                  step={1}
                />
              </div>
            </div>
          </div>
        )}

        {/* Tools */}
        <div>
          <div className="flex items-center gap-2 mb-4">
            <h3 className="text-sm font-black uppercase text-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              Tools
            </h3>
            <Tooltip>
              <TooltipTrigger>
                <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black" />
              </TooltipTrigger>
              <TooltipContent>
                <p>Advanced capabilities for your AI agent</p>
              </TooltipContent>
            </Tooltip>
          </div>
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-sm font-bold">Code Execution</span>
                <Tooltip>
                  <TooltipTrigger>
                    <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black" />
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Allow AI to run and execute code snippets</p>
                  </TooltipContent>
                </Tooltip>
              </div>
              <Switch
                checked={codeExecution}
                onCheckedChange={(checked) => updateConfig({ codeExecution: checked })}
              />
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-sm font-bold">Function calling</span>
                <Tooltip>
                  <TooltipTrigger>
                    <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black" />
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Enable AI to call external functions and APIs</p>
                  </TooltipContent>
                </Tooltip>
              </div>
              <Switch
                checked={functionCalling}
                onCheckedChange={(checked) => updateConfig({ functionCalling: checked })}
              />
            </div>
            
            <div className="flex items-center justify-between">
              <span className="text-sm font-bold">Automatic Function Response</span>
              <Switch
                checked={automaticFunction}
                onCheckedChange={(checked) => updateConfig({ automaticFunction: checked })}
              />
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-sm font-bold">Grounding with Google Search</span>
                <Tooltip>
                  <TooltipTrigger>
                    <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black" />
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Allow AI to search Google for real-time information</p>
                  </TooltipContent>
                </Tooltip>
              </div>
              <Switch
                checked={groundingSearch}
                onCheckedChange={(checked) => updateConfig({ groundingSearch: checked })}
              />
            </div>
            
            <div className="flex items-center justify-between">
              <span className="text-sm font-bold">URL context</span>
              <Switch
                checked={urlContext}
                onCheckedChange={(checked) => updateConfig({ urlContext: checked })}
              />
            </div>
            </div>
          </div>
        </div>
      </div>
    </TooltipProvider>
  )
}


================================================
FILE: src/components/custom/premium-feature-card.tsx
================================================
import * as React from 'react';
import { Card, CardContent } from '../ui/card';
import { UilLock } from '@tooni/iconscout-unicons-react';

interface PremiumFeatureCardProps {
  title: string;
  description: string;
  price?: string;
  badge?: string;
}

export default function PremiumFeatureCard({ 
  title, 
  description, 
  price = "$39/month",
  badge = "PREMIUM" 
}: PremiumFeatureCardProps) {
  return (
    <Card className="w-full relative overflow-hidden">
      <div className="absolute inset-0 bg-gray-200 opacity-50"></div>
      <CardContent className="p-4 relative">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
          <div className="flex-1">
            <h4 className="font-black text-black uppercase flex flex-col sm:flex-row sm:items-center gap-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              <span>{title}</span>
              <span className="px-2 py-1 bg-yellow-400 border-2 border-black text-xs font-bold uppercase w-fit">
                {badge}
              </span>
            </h4>
            <p className="text-sm text-gray-700 mt-2">{description}</p>
          </div>
          <div className="flex items-center justify-between sm:justify-end gap-3">
            <span className="text-xs text-gray-600 font-bold">{price}</span>
            <div className="w-10 h-10 bg-gray-400 border-4 border-black flex items-center justify-center">
              <UilLock className="h-5 w-5 text-gray-700" />
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/custom/recent-calls-card.tsx
================================================
import * as React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { cn } from '@/lib/utils';
import { UilPlay, UilHistory } from '@tooni/iconscout-unicons-react';

interface Call {
  id: number;
  agent: string;
  contact: string;
  duration: string;
  status: 'completed' | 'failed';
  sentiment: 'positive' | 'neutral' | 'negative';
}

interface RecentCallsCardProps {
  calls: Call[];
  onPlayRecording?: (callId: number) => void;
}

export default function RecentCallsCard({ calls, onPlayRecording }: RecentCallsCardProps) {
  const getSentimentEmoji = (sentiment: 'positive' | 'neutral' | 'negative') => {
    switch (sentiment) {
      case 'positive':
        return '😊';
      case 'neutral':
        return '😐';
      case 'negative':
        return '😞';
    }
  };

  const getSentimentStyle = (sentiment: 'positive' | 'neutral' | 'negative') => {
    switch (sentiment) {
      case 'positive':
        return 'bg-green-500';
      case 'neutral':
        return 'bg-gray-400';
      case 'negative':
        return 'bg-red-500';
    }
  };

  return (
    <Card style={{ border: '3px solid black', boxShadow: '4px 4px 0px 0px black' }}>
      <CardHeader style={{ borderBottom: '3px solid black' }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
          <Button 
            size="icon"
            variant="default"
            style={{
              width: '48px',
              height: '48px',
              backgroundColor: 'rgb(0,82,255)',
              border: '3px solid black',
              boxShadow: '2px 2px 0px 0px black'
            }}
          >
            <UilHistory style={{ width: '24px', height: '24px', color: 'white' }} />
          </Button>
          <CardTitle style={{ fontSize: '20px', fontWeight: '900', textTransform: 'uppercase' }}>
            RECENT CALLS
          </CardTitle>
        </div>
      </CardHeader>
      <CardContent style={{ padding: '0' }}>
        <div>
          {calls.map((call) => (
            <div 
              key={call.id} 
              style={{ 
                padding: '16px',
                borderBottom: calls.indexOf(call) !== calls.length - 1 ? '2px solid black' : 'none'
              }}
            >
              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                <div style={{ flex: '1' }}>
                  <div style={{ display: 'flex', alignItems: 'flex-start', gap: '12px' }}>
                    <Button 
                      size="icon"
                      variant="default"
                      style={{
                        width: '40px',
                        height: '40px',
                        border: '3px solid black',
                        boxShadow: '2px 2px 0px 0px black'
                      }}
                      className={getSentimentStyle(call.sentiment)}
                    >
                      <span style={{ fontSize: '20px' }}>{getSentimentEmoji(call.sentiment)}</span>
                    </Button>
                    
                    <div style={{ flex: '1' }}>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '4px' }}>
                        <Badge style={{ 
                          fontWeight: '900', 
                          textTransform: 'uppercase', 
                          border: '2px solid black',
                          boxShadow: '1px 1px 0px 0px black'
                        }}>
                          {call.agent}
                        </Badge>
                        <span style={{ fontWeight: '700' }}>{call.contact}</span>
                      </div>
                      
                      <div style={{ display: 'flex', alignItems: 'center', gap: '12px', fontSize: '14px' }}>
                        <span style={{ color: '#6b7280' }}>
                          Duration: <span style={{ fontWeight: '700', color: 'black' }}>{call.duration}</span>
                        </span>
                        <Badge 
                          variant={call.status === 'completed' ? 'default' : 'destructive'}
                          style={{
                            fontSize: '12px',
                            fontWeight: '900',
                            textTransform: 'uppercase',
                            border: '2px solid black',
                            boxShadow: '1px 1px 0px 0px black',
                            backgroundColor: call.status === 'completed' ? '#10b981' : '#ef4444',
                            color: 'white'
                          }}
                        >
                          {call.status}
                        </Badge>
                      </div>
                    </div>
                  </div>
                </div>
                
                <Button 
                  size="sm"
                  variant="neutral"
                  onClick={() => onPlayRecording?.(call.id)}
                  style={{
                    backgroundColor: 'white',
                    border: '2px solid black',
                    padding: '8px',
                    boxShadow: '2px 2px 0px 0px black'
                  }}
                >
                  <UilPlay style={{ width: '16px', height: '16px', color: 'black' }} />
                </Button>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/custom/simple-onboarding-nav.tsx
================================================
import * as React from 'react';

interface SimpleOnboardingNavProps {
  currentStep: number;
  totalSteps: number;
  onStepChange?: (step: number) => void;
}

export default function SimpleOnboardingNav({ 
  currentStep, 
  totalSteps, 
  onStepChange 
}: SimpleOnboardingNavProps) {
  const steps = Array.from({ length: totalSteps }, (_, i) => i + 1);

  return (
    <div className="flex items-center justify-center gap-1 sm:gap-2">
      {steps.map((step, index) => (
        <React.Fragment key={step}>
          {/* Step rectangle */}
          <div 
            className={`
              relative px-2 py-1 sm:px-4 sm:py-2 border-2 sm:border-4 border-black 
              flex items-center justify-center transition-all duration-300
              font-bold text-xs sm:text-sm min-w-[32px] sm:min-w-[40px]
              ${currentStep === step 
                ? 'bg-[rgb(0,82,255)] text-white scale-105 shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[3px_3px_0_rgba(0,0,0,1)]' 
                : currentStep > step
                  ? 'bg-[rgb(0,82,255)] text-white shadow-[1px_1px_0_rgba(0,0,0,1)] sm:shadow-[2px_2px_0_rgba(0,0,0,1)]' 
                  : 'bg-gray-300 text-gray-600 shadow-[1px_1px_0_rgba(0,0,0,1)] sm:shadow-[2px_2px_0_rgba(0,0,0,1)]'
              }
              ${onStepChange && currentStep > step ? 'cursor-pointer' : ''}
            `}
            onClick={() => {
              if (onStepChange && currentStep > step) {
                onStepChange(step);
              }
            }}
          >
            <span>{step}</span>
            
            {/* Checkmark for completed steps */}
            {currentStep > step && (
              <div className="absolute -top-1 -right-1 sm:-top-2 sm:-right-2 w-4 h-4 sm:w-6 sm:h-6 bg-green-500 border-2 border-black rounded-full flex items-center justify-center">
                <span className="text-white text-[10px] sm:text-xs">✓</span>
              </div>
            )}
          </div>
          
          {/* Connector line */}
          {index < steps.length - 1 && (
            <div className={`w-4 h-1 sm:w-8 sm:h-2 mx-1 sm:mx-2 border sm:border-2 border-black transition-all duration-300 ${
              currentStep > step 
                ? 'bg-white shadow-[1px_1px_0_rgba(0,0,0,1)] sm:shadow-[2px_2px_0_rgba(0,0,0,1)]' 
                : 'bg-gray-400'
            }`} />
          )}
        </React.Fragment>
      ))}
    </div>
  );
}


================================================
FILE: src/components/custom/stat-card.tsx
================================================
import * as React from 'react';
import { Card, CardContent } from '../ui/card';
import { Button } from '../ui/button';
import { cn } from '@/lib/utils';
import { UilArrowUp, UilArrowDown } from '@tooni/iconscout-unicons-react';

interface StatCardProps {
  title: string;
  value: string | number;
  icon: React.ReactNode;
  iconBgColor?: string;
  trend?: {
    value: string;
    type: 'positive' | 'negative' | 'neutral';
    label: string;
  };
  subtitle?: string;
  progress?: number | {
    label: string;
    value: number;
  };
  status?: {
    label: string;
    color: string;
  };
  bgGradient?: string;
  textColor?: string;
}

export default function StatCard({
  title,
  value,
  icon,
  iconBgColor = 'bg-[rgb(0,82,255)]',
  trend,
  subtitle,
  progress,
  status,
  bgGradient = 'from-white to-gray-50',
  textColor = 'text-black'
}: StatCardProps) {
  const getTrendColor = (type: 'positive' | 'negative' | 'neutral') => {
    switch (type) {
      case 'positive':
        return 'text-green-600';
      case 'negative':
        return 'text-red-600';
      case 'neutral':
        return 'text-blue-600';
    }
  };

  let finalBgClass = `bg-gradient-to-br ${bgGradient}`;
  let finalTextColor = textColor;

  if (bgGradient === 'from-white to-gray-50') {
    const colorMatch = iconBgColor.match(/bg-([a-z]+)-(\d+)/);
    if (colorMatch) {
      const color = colorMatch[1];
      finalBgClass = `bg-${color}-50`;
      finalTextColor = 'text-black';
    }
  }

  const progressValue = progress !== undefined ? (typeof progress === 'number' ? progress : progress.value) : undefined;
  const progressLabel = progress && typeof progress === 'object' ? progress.label : 'Progress';

  return (
    <Card className={cn("border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]", finalBgClass, finalTextColor)}>
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button 
              size="icon"
              variant="default"
              className={cn(
                "w-12 h-12 border-4 border-black",
                iconBgColor
              )}
            >
              {icon}
            </Button>
            <div>
              <p className="text-sm font-medium text-muted-foreground">{title}</p>
              <div className="flex items-baseline gap-2">
                <h3 className="text-2xl font-bold">{value}</h3>
                {trend && (
                  <div className={`flex items-center gap-1 text-sm ${getTrendColor(trend.type)}`}>
                    {trend.type === 'positive' ? (
                      <UilArrowUp className="h-4 w-4" />
                    ) : (
                      <UilArrowDown className="h-4 w-4" />
                    )}
                    <span>{trend.value}</span>
                  </div>
                )}
              </div>
            </div>
          </div>
          {status && (
            <div className="flex items-center gap-2">
              <div className={`h-2 w-2 ${status.color}`} />
              <span className="text-sm text-muted-foreground">{status.label}</span>
            </div>
          )}
        </div>
        {subtitle && (
          <p className="mt-2 text-sm text-muted-foreground">{subtitle}</p>
        )}
        {progressValue !== undefined && (
          <div className="mt-4">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium">{progressLabel}</span>
              <span className="text-sm text-muted-foreground">{progressValue}%</span>
            </div>
            <div className="h-2 bg-gray-100 border-2 border-black">
              <div
                className={cn("h-full", iconBgColor)}
                style={{ width: `${progressValue}%` }}
              />
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/custom/swarm-overview-card.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { SwarmConfig } from '@/types/calls';
import {
  UilRobot,
  UilPhone,
  UilChart,
  UilCheckCircle,
  UilClock,
  UilSetting,
  UilLayerGroup
} from '@tooni/iconscout-unicons-react';

interface SwarmOverviewCardProps {
  swarm: SwarmConfig;
  isSelected: boolean;
  onClick: () => void;
  onConfigure: () => void;
}

const getSwarmTypeColor = (name: string) => {
  if (name.toLowerCase().includes('sales')) return 'purple';
  if (name.toLowerCase().includes('support')) return 'green';
  if (name.toLowerCase().includes('discovery')) return 'orange';
  return 'pink';
};

export default function SwarmOverviewCard({ 
  swarm, 
  isSelected, 
  onClick,
  onConfigure 
}: SwarmOverviewCardProps) {
  const activePercentage = (swarm.activeAgents / swarm.agents.length) * 100;
  const swarmColor = getSwarmTypeColor(swarm.name);

  return (
    <Card 
      className={cn(
        "border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] transition-all cursor-pointer hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transform hover:translate-x-[-2px] hover:translate-y-[-2px]",
        isSelected && "shadow-[6px_6px_0_rgba(0,0,0,1)] translate-x-[-2px] translate-y-[-2px] ring-4 ring-[rgb(0,82,255)]"
      )}
      onClick={onClick}
    >
      <CardHeader className={cn(
        "border-b-4 border-black relative",
        swarmColor === 'purple' && "bg-purple-400",
        swarmColor === 'green' && "bg-green-400", 
        swarmColor === 'orange' && "bg-orange-400",
        swarmColor === 'pink' && "bg-pink-400"
      )}>
        <div className="absolute top-2 right-2">
          <Button
            size="sm"
            variant="neutral"
            onClick={(e) => {
              e.stopPropagation();
              onConfigure();
            }}
            className="bg-white border-2 border-black hover:bg-gray-50 p-2 w-8 h-8"
          >
            <UilSetting className="w-4 h-4 text-black" />
          </Button>
        </div>
        
        <div className="flex items-start gap-3">
          <div className={cn(
            "w-12 h-12 border-4 border-black flex items-center justify-center",
            swarmColor === 'purple' && "bg-purple-600",
            swarmColor === 'green' && "bg-green-600", 
            swarmColor === 'orange' && "bg-orange-600",
            swarmColor === 'pink' && "bg-pink-600"
          )}>
            <UilLayerGroup className="w-6 h-6 text-white" />
          </div>
          
          <div className="flex-1 min-w-0">
            <CardTitle className="text-lg font-black uppercase text-white leading-tight">
              {swarm.name}
            </CardTitle>
            <p className="text-white/90 text-sm mt-1 line-clamp-2">
              {swarm.description}
            </p>
          </div>
        </div>

        <div className="flex gap-2 mt-3">
          <Badge className={cn(
            "border-2 border-black font-bold uppercase text-xs",
            swarmColor === 'purple' && "bg-purple-600 text-white",
            swarmColor === 'green' && "bg-green-600 text-white", 
            swarmColor === 'orange' && "bg-orange-600 text-white",
            swarmColor === 'pink' && "bg-pink-600 text-white"
          )}>
            {swarm.activeAgents}/{swarm.agents.length} ACTIVE
          </Badge>
          <Badge className={cn(
            "border-2 border-black font-bold uppercase text-xs",
            swarmColor === 'purple' && "bg-purple-800 text-white",
            swarmColor === 'green' && "bg-green-800 text-white", 
            swarmColor === 'orange' && "bg-orange-800 text-white",
            swarmColor === 'pink' && "bg-pink-800 text-white"
          )}>
            {swarm.totalCalls} CALLS
          </Badge>
        </div>
      </CardHeader>
      
      <CardContent className="p-4 bg-gradient-to-br from-white to-gray-50">
        <div className="grid grid-cols-2 gap-3 mb-4">
          <div className="bg-white border-2 border-black p-3 text-center">
            <div className="w-8 h-8 bg-green-400 border-2 border-black flex items-center justify-center mx-auto mb-2">
              <UilCheckCircle className="w-4 h-4 text-black" />
            </div>
            <p className="text-xs font-bold uppercase text-gray-600">Convert</p>
            <p className="text-xl font-black">{swarm.performance.conversionRate}%</p>
          </div>
          
          <div className="bg-white border-2 border-black p-3 text-center">
            <div className="w-8 h-8 bg-orange-400 border-2 border-black flex items-center justify-center mx-auto mb-2">
              <UilChart className="w-4 h-4 text-black" />
            </div>
            <p className="text-xs font-bold uppercase text-gray-600">Sentiment</p>
            <p className="text-xl font-black">{swarm.performance.avgSentiment}%</p>
          </div>
        </div>

        <div className="space-y-2">
          <div className="flex items-center justify-between text-sm">
            <span className="font-bold uppercase text-gray-600 flex items-center gap-1">
              <UilClock className="w-3 h-3" />
              Talk Time
            </span>
            <span className="font-black">{swarm.performance.totalTalkTime}</span>
          </div>
          
          <div className="flex items-center justify-between text-sm">
            <span className="font-bold uppercase text-gray-600 flex items-center gap-1">
              <UilRobot className="w-3 h-3" />
              Agents
            </span>
            <span className="font-black">{swarm.agents.length} total</span>
          </div>
        </div>

        <div className="mt-4 pt-4 border-t-2 border-gray-200">
          <div className="flex flex-wrap gap-1">
            {swarm.agents.slice(0, 3).map((agent) => (
              <div 
                key={agent.id}
                className={cn(
                  "w-2 h-2 border border-black",
                  agent.status === 'active' && "bg-green-400",
                  agent.status === 'idle' && "bg-gray-400",
                  agent.status === 'processing' && "bg-yellow-400"
                )}
              />
            ))}
            {swarm.agents.length > 3 && (
              <span className="text-xs font-bold text-gray-500 ml-1">
                +{swarm.agents.length - 3}
              </span>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/custom/transcript-skeleton.tsx
================================================
import React from 'react';

export default function TranscriptSkeleton() {
  return (
    <div className="rounded-lg bg-yellow-100 p-6">
      <div className="space-y-3">
        {/* Generate multiple skeleton lines */}
        {[...Array(8)].map((_, index) => (
          <div key={index} className="space-y-2">
            <div className="flex gap-2">
              {/* Simulate transcript chunks with varying widths */}
              <div 
                className="h-6 bg-yellow-200 rounded animate-pulse"
                style={{ width: `${Math.random() * 20 + 15}%` }}
              />
              <div 
                className="h-6 bg-yellow-200 rounded animate-pulse"
                style={{ width: `${Math.random() * 25 + 20}%` }}
              />
              <div 
                className="h-6 bg-yellow-200 rounded animate-pulse"
                style={{ width: `${Math.random() * 30 + 25}%` }}
              />
              {Math.random() > 0.5 && (
                <div 
                  className="h-6 bg-yellow-200 rounded animate-pulse"
                  style={{ width: `${Math.random() * 15 + 10}%` }}
                />
              )}
            </div>
          </div>
        ))}
        
        {/* Last line with partial width */}
        <div className="flex gap-2">
          <div className="h-6 bg-yellow-200 rounded animate-pulse w-1/4" />
          <div className="h-6 bg-yellow-200 rounded animate-pulse w-1/6" />
        </div>
      </div>
      
      {/* Loading text indicator */}
      <div className="mt-6 text-center">
        <p className="text-lg font-bold text-gray-600 animate-pulse">
          Fetching transcript...
        </p>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/voice-agent-card.tsx
================================================
import * as React from 'react';
import { UilUser } from '@tooni/iconscout-unicons-react';
import ImageCard from '../ui/image-card';

// Star component
const Star15 = ({ color, size, stroke, strokeWidth, pathClassName, width, height, ...props }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 200 200"
    width={size ?? width}
    height={size ?? height}
    {...props}
  >
    <path
      fill={color ?? "currentColor"}
      stroke={stroke}
      strokeWidth={strokeWidth}
      className={pathClassName}
      d="M95.713 9.378a6 6 0 0 1 8.574 0l9.515 9.717a6 6 0 0 0 6.496 1.381l12.645-5.007a6 6 0 0 1 7.833 3.487l4.74 12.748a6 6 0 0 0 5.372 3.903l13.589.57a6 6 0 0 1 5.737 6.371l-.855 13.573a6 6 0 0 0 3.321 5.752l12.182 6.046a6 6 0 0 1 2.649 8.154l-6.301 12.053a6 6 0 0 0 .694 6.604l8.67 10.479a6 6 0 0 1-.897 8.527l-10.658 8.447a6 6 0 0 0-2.052 6.316l3.657 13.099a6 6 0 0 1-4.287 7.426l-13.173 3.381a6 6 0 0 0-4.443 4.936l-1.987 13.454a6 6 0 0 1-6.936 5.04l-13.41-2.269a6 6 0 0 0-6.066 2.701l-7.287 11.483a6 6 0 0 1-8.387 1.783l-11.327-7.527a6 6 0 0 0-6.641 0l-11.328 7.527a6 6 0 0 1-8.387-1.783l-7.287-11.483a6 6 0 0 0-6.066-2.701l-13.41 2.269a6 6 0 0 1-6.936-5.04l-1.987-13.454a6 6 0 0 0-4.443-4.936l-13.173-3.381a6 6 0 0 1-4.287-7.426l3.657-13.099a6 6 0 0 0-2.052-6.316l-10.658-8.447a6 6 0 0 1-.897-8.527l8.67-10.479a6 6 0 0 0 .694-6.604l-6.301-12.053a6 6 0 0 1 2.65-8.154l12.181-6.046a6 6 0 0 0 3.32-5.752l-.854-13.573a6 6 0 0 1 5.737-6.372l13.588-.569a6 6 0 0 0 5.373-3.903l4.74-12.748a6 6 0 0 1 7.833-3.487l12.645 5.007a6 6 0 0 0 6.496-1.38z"
    />
  </svg>
);

interface VoiceAgentCardProps {
  agent: {
    id: string;
    name: string;
    description: string;
    imageUrl: string;
  };
  isSelected: boolean;
  onSelect: (agentId: string) => void;
}

const VoiceAgentCard: React.FC<VoiceAgentCardProps> = ({ agent, isSelected, onSelect }) => {
  return (
    <div className="relative">
      {/* Selection badge */}
      {isSelected && (
        <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
          <div className="relative">
            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
              <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
            </div>
            <div className="absolute inset-0 flex items-center justify-center">
              <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                SELECTED
              </span>
            </div>
          </div>
        </div>
      )}
      <div
        className={`
          relative w-full h-80
          border-4 border-black rounded-[16px]
          flex flex-col
          transition-all duration-200
          ${isSelected ? 'scale-105 shadow-[8px_8px_0_rgba(0,0,0,1)]' : 'shadow-[4px_4px_0_rgba(0,0,0,1)]'}
          hover:scale-[1.02] hover:shadow-[6px_6px_0_rgba(0,0,0,1)]
          cursor-pointer overflow-hidden
        `}
        onClick={() => onSelect(agent.id)}
      >
      {/* Category label at top */}
      <div className="bg-[rgb(0,82,255)] text-white px-4 py-3 text-sm border-b-4 border-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
        voice_agent
      </div>

      {/* Main content area with teal background */}
      <div className="flex-grow bg-[rgb(0,82,255)] p-4 relative overflow-hidden">
        <ImageCard
          caption=""
          imageUrl={agent.imageUrl}
          className="w-full h-full object-cover"
        />
        
        {/* Corner icon */}
        <div className="absolute bottom-2 right-2 w-8 h-8 bg-white border-2 border-black flex items-center justify-center">
          <UilUser className="h-4 w-4 text-black" />
        </div>
      </div>

      {/* Bottom section with title and description */}
      <div className="p-3 bg-white border-t-4 border-black">
        <h3 className="text-lg text-black truncate" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>{agent.name}</h3>
        <p className="text-sm text-gray-700 mt-1">{agent.description}</p>
      </div>
    </div>
    </div>
  );
};

export default VoiceAgentCard;


================================================
FILE: src/components/custom/waveform-visualizer.tsx
================================================
'use client';

import React, { useRef, useEffect, useState, useCallback } from 'react';
import { cn } from '@/lib/utils';
import { CallRecordingData, WaveformShard, WaveformPlaybackState } from '@/types/waveform';

interface WaveformVisualizerProps {
  callData: CallRecordingData | null;
  playbackState: WaveformPlaybackState;
  onSeek: (timeMs: number) => void;
  onAddMarker?: (timeMs: number) => void;
  className?: string;
  height?: number;
  showSpeakerColors?: boolean;
  showTranscriptMarkers?: boolean;
}

export default function WaveformVisualizer({
  callData,
  playbackState,
  onSeek,
  onAddMarker,
  className,
  height = 80,
  showSpeakerColors = true,
  showTranscriptMarkers = true
}: WaveformVisualizerProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const [canvasSize, setCanvasSize] = useState({ width: 800, height });
  const [isDragging, setIsDragging] = useState(false);
  
  // Handle container resize
  useEffect(() => {
    const updateSize = () => {
      if (containerRef.current) {
        const rect = containerRef.current.getBoundingClientRect();
        setCanvasSize({ width: rect.width, height });
      }
    };
    
    updateSize();
    window.addEventListener('resize', updateSize);
    return () => window.removeEventListener('resize', updateSize);
  }, [height]);
  
  // MOCK: Draw waveform visualization
  const drawWaveform = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas || !callData) return;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    const { width, height } = canvasSize;
    const { waveformShards, duration, audioSegments } = callData;
    
    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    
    // Set up canvas for high DPI
    const dpr = window.devicePixelRatio || 1;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx.scale(dpr, dpr);
    
    if (waveformShards.length === 0) {
      // Draw placeholder
      ctx.fillStyle = '#e5e7eb';
      ctx.fillRect(0, height / 2 - 1, width, 2);
      return;
    }
    
    // Calculate pixels per millisecond
    const pxPerMs = width / duration;
    const centerY = height / 2;
    
    // Draw background segments for transcript sections
    if (showTranscriptMarkers) {
      audioSegments.forEach(segment => {
        const startX = segment.startTime * pxPerMs;
        const endX = segment.endTime * pxPerMs;
        const segmentWidth = endX - startX;
        
        // Background for transcript segments
        ctx.fillStyle = segment.speaker === 'agent' ? 'rgba(59, 130, 246, 0.1)' : 'rgba(16, 185, 129, 0.1)';
        ctx.fillRect(startX, 0, segmentWidth, height);
      });
    }
    
    // Draw waveform bars
    waveformShards.forEach((shard, index) => {
      const x = shard.timestamp * pxPerMs;
      const amplitude = shard.amplitude;
      const barHeight = (amplitude / 100) * (height * 0.8); // Max 80% of canvas height
      
      // Color based on speaker and sentiment
      let color = '#9ca3af'; // Default gray for silence
      
      if (showSpeakerColors) {
        switch (shard.speaker) {
          case 'agent':
            color = shard.sentiment === 'positive' ? '#3b82f6' : 
                    shard.sentiment === 'negative' ? '#ef4444' : '#6366f1';
            break;
          case 'customer':
            color = shard.sentiment === 'positive' ? '#10b981' : 
                    shard.sentiment === 'negative' ? '#f59e0b' : '#059669';
            break;
        }
      } else {
        // Simple amplitude-based coloring
        if (amplitude > 70) color = '#ef4444';
        else if (amplitude > 40) color = '#f59e0b';
        else if (amplitude > 20) color = '#10b981';
      }
      
      // Draw waveform bar
      ctx.fillStyle = color;
      ctx.fillRect(x - 0.5, centerY - barHeight / 2, 1, barHeight);
    });
    
    // Draw key events markers
    if (callData.keyEvents) {
      callData.keyEvents.forEach(event => {
        const x = event.timestamp * pxPerMs;
        
        // Event marker line
        ctx.strokeStyle = '#dc2626';
        ctx.lineWidth = 2;
        ctx.setLineDash([5, 5]);
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, height);
        ctx.stroke();
        ctx.setLineDash([]);
        
        // Event marker dot
        ctx.fillStyle = '#dc2626';
        ctx.beginPath();
        ctx.arc(x, 10, 3, 0, Math.PI * 2);
        ctx.fill();
      });
    }
    
    // Draw playback position cursor
    const playheadX = playbackState.currentTime * pxPerMs;
    ctx.strokeStyle = '#ff0000';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(playheadX, 0);
    ctx.lineTo(playheadX, height);
    ctx.stroke();
    
    // Draw playhead circle
    ctx.fillStyle = '#ff0000';
    ctx.beginPath();
    ctx.arc(playheadX, centerY, 4, 0, Math.PI * 2);
    ctx.fill();
    
    // Draw selected region if any
    if (playbackState.selectedRegion) {
      const startX = playbackState.selectedRegion.startTime * pxPerMs;
      const endX = playbackState.selectedRegion.endTime * pxPerMs;
      
      ctx.fillStyle = 'rgba(59, 130, 246, 0.2)';
      ctx.fillRect(startX, 0, endX - startX, height);
      
      ctx.strokeStyle = '#3b82f6';
      ctx.lineWidth = 2;
      ctx.strokeRect(startX, 0, endX - startX, height);
    }
  }, [callData, playbackState, canvasSize, showSpeakerColors, showTranscriptMarkers]);
  
  // Redraw when data or playback state changes
  useEffect(() => {
    drawWaveform();
  }, [drawWaveform]);
  
  // Handle mouse interactions
  const handleMouseDown = (e: React.MouseEvent) => {
    if (!callData) return;
    
    const rect = canvasRef.current?.getBoundingClientRect();
    if (!rect) return;
    
    const x = e.clientX - rect.left;
    const timeMs = (x / canvasSize.width) * callData.duration;
    
    setIsDragging(true);
    onSeek(timeMs);
  };
  
  const handleMouseMove = (e: React.MouseEvent) => {
    if (!isDragging || !callData) return;
    
    const rect = canvasRef.current?.getBoundingClientRect();
    if (!rect) return;
    
    const x = e.clientX - rect.left;
    const timeMs = Math.max(0, Math.min((x / canvasSize.width) * callData.duration, callData.duration));
    
    onSeek(timeMs);
  };
  
  const handleMouseUp = () => {
    setIsDragging(false);
  };
  
  const handleDoubleClick = (e: React.MouseEvent) => {
    if (!callData || !onAddMarker) return;
    
    const rect = canvasRef.current?.getBoundingClientRect();
    if (!rect) return;
    
    const x = e.clientX - rect.left;
    const timeMs = (x / canvasSize.width) * callData.duration;
    
    onAddMarker(timeMs);
  };
  
  // Format time for display
  const formatTime = (ms: number): string => {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };
  
  return (
    <div className={cn("relative", className)}>
      {/* Time markers */}
      <div className="flex justify-between text-xs text-gray-500 mb-1">
        <span>0:00</span>
        {callData && <span>{formatTime(callData.duration)}</span>}
      </div>
      
      {/* Waveform canvas */}
      <div 
        ref={containerRef}
        className="relative bg-gray-100 border-2 border-black cursor-crosshair"
        style={{ height: `${height}px` }}
      >
        <canvas
          ref={canvasRef}
          className="w-full h-full"
          onMouseDown={handleMouseDown}
          onMouseMove={handleMouseMove}
          onMouseUp={handleMouseUp}
          onMouseLeave={handleMouseUp}
          onDoubleClick={handleDoubleClick}
        />
        
        {/* Loading overlay */}
        {!callData && (
          <div className="absolute inset-0 flex items-center justify-center bg-gray-100">
            <div className="text-sm text-gray-500">Loading waveform...</div>
          </div>
        )}
        
        {/* Playback time display */}
        <div className="absolute bottom-1 left-2 bg-black text-white px-2 py-1 text-xs font-bold">
          {formatTime(playbackState.currentTime)}
        </div>
      </div>
      
      {/* Legend */}
      {showSpeakerColors && (
        <div className="flex items-center gap-4 mt-2 text-xs">
          <div className="flex items-center gap-1">
            <div className="w-3 h-3 bg-blue-400 border border-black"></div>
            <span>Agent</span>
          </div>
          <div className="flex items-center gap-1">
            <div className="w-3 h-3 bg-green-400 border border-black"></div>
            <span>Customer</span>
          </div>
          <div className="flex items-center gap-1">
            <div className="w-3 h-3 bg-red-600 border border-black"></div>
            <span>Key Events</span>
          </div>
        </div>
      )}
    </div>
  );
}


================================================
FILE: src/components/custom/web-voice-interface.tsx
================================================
'use client';

import * as React from 'react';
import { Card } from '../ui/card';
import { Button } from '../ui/button';
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from '@/components/ui/resizable';
import { UilMicrophone, UilMicrophoneSlash, UilPhone, UilRobot } from '@tooni/iconscout-unicons-react';

// Custom hook for mobile detection
function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState(false);

  React.useEffect(() => {
    const checkIsMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };

    checkIsMobile();
    window.addEventListener('resize', checkIsMobile);
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);

  return isMobile;
}

interface WebVoiceInterfaceProps {
  userName: string;
  selectedVoiceAgent: string;
  selectedLanguage: string;
}

interface TranscriptEntry {
  speaker: 'user' | 'agent';
  text: string;
  timestamp: Date;
}

export default function WebVoiceInterface({ userName, selectedVoiceAgent, selectedLanguage }: WebVoiceInterfaceProps) {
  const [hasPermission, setHasPermission] = React.useState(false);
  const [isConnecting, setIsConnecting] = React.useState(false);
  const [isConnected, setIsConnected] = React.useState(false);
  const [isMuted, setIsMuted] = React.useState(false);
  const [userGain, setUserGain] = React.useState(30);
  const [agentGain, setAgentGain] = React.useState(30);
  const [transcript, setTranscript] = React.useState<TranscriptEntry[]>([]);
  const [currentSpeaker, setCurrentSpeaker] = React.useState<'user' | 'agent' | null>(null);
  const isMobile = useIsMobile();
  const transcriptEndRef = React.useRef<HTMLDivElement>(null);

  // Pre-generate stable particle positions to prevent re-render jittering
  const userParticles = React.useMemo(() => 
    Array.from({ length: isMobile ? 8 : 20 }, (_, i) => ({
      left: Math.random() * 100,
      top: Math.random() * 100,
      duration: 3 + Math.random() * 2,
      delay: Math.random() * 2
    })), [isMobile]
  );

  const agentParticles = React.useMemo(() => 
    Array.from({ length: isMobile ? 8 : 20 }, (_, i) => ({
      left: Math.random() * 100,
      top: Math.random() * 100,
      duration: 3 + Math.random() * 2,
      delay: Math.random() * 2
    })), [isMobile]
  );

  // Mock audio gain simulation
  React.useEffect(() => {
    if (isConnected) {
      const interval = setInterval(() => {
        // Simulate conversation flow
        const random = Math.random();
        if (random < 0.3) {
          // User speaking
          setUserGain(50 + Math.random() * 40);
          setAgentGain(10 + Math.random() * 20);
          setCurrentSpeaker('user');
        } else if (random < 0.6) {
          // Agent speaking
          setUserGain(10 + Math.random() * 20);
          setAgentGain(50 + Math.random() * 40);
          setCurrentSpeaker('agent');
        } else {
          // Silence
          setUserGain(20 + Math.random() * 10);
          setAgentGain(20 + Math.random() * 10);
          setCurrentSpeaker(null);
        }
      }, 100);

      return () => clearInterval(interval);
    }
  }, [isConnected]);

  // Mock transcript generation
  React.useEffect(() => {
    if (isConnected) {
      const mockConversation = [
        { speaker: 'agent' as const, text: `Hello ${userName}! I'm ${selectedVoiceAgent}, your AI voice assistant. How can I help you today?`, delay: 2000 },
        { speaker: 'user' as const, text: "Hi! I'd like to know more about your voice capabilities.", delay: 5000 },
        { speaker: 'agent' as const, text: "I can help you with a variety of tasks through natural conversation. I support multiple languages and can assist with information, scheduling, and much more.", delay: 8000 },
        { speaker: 'user' as const, text: "That sounds great! Can you tell me what the weather is like?", delay: 12000 },
        { speaker: 'agent' as const, text: "I'd be happy to help with weather information. However, as this is a demo, I'm not connected to live weather data. In a real implementation, I could provide current conditions and forecasts.", delay: 15000 },
      ];

      mockConversation.forEach(({ speaker, text, delay }) => {
        setTimeout(() => {
          setTranscript(prev => [...prev, { speaker, text, timestamp: new Date() }]);
        }, delay);
      });
    }
  }, [isConnected, userName, selectedVoiceAgent]);

  // Auto-scroll to bottom when new transcript entries are added
  React.useEffect(() => {
    transcriptEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [transcript]);

  const requestMicrophonePermission = async () => {
    setIsConnecting(true);
    try {
      // Mock permission request
      await new Promise(resolve => setTimeout(resolve, 1500));
      setHasPermission(true);
      setIsConnecting(false);
      
      // Connect to "service"
      setTimeout(() => {
        setIsConnected(true);
      }, 1000);
    } catch (error) {
      console.error('Microphone permission denied');
      setIsConnecting(false);
    }
  };

  const endCall = () => {
    setIsConnected(false);
    setHasPermission(false);
    setTranscript([]);
  };

  if (!hasPermission) {
    return (
      <div className="min-h-screen bg-[rgb(0,82,255)] flex items-center justify-center p-4" style={{ 
        fontFamily: 'Noyh-Bold, sans-serif',
        backgroundImage: `
          linear-gradient(rgba(15, 23, 41, 0.8) 1px, transparent 1px),
          linear-gradient(90deg, rgba(15, 23, 41, 0.8) 1px, transparent 1px)
        `,
        backgroundSize: '60px 60px'
      }}>
        <Card className="w-full max-w-md transform -rotate-1">
          <div className="text-center p-8">
            <Button
              onClick={requestMicrophonePermission}
              disabled={isConnecting}
              className="w-32 h-32 p-8 mb-6"
            >
              <UilMicrophone className="h-16 w-16 text-white" />
            </Button>
            
            <h2 className="text-3xl font-black uppercase mb-6">MICROPHONE ACCESS</h2>
            
            <p className="text-gray-600 mb-8 px-4">
              {isConnecting ? 'Connecting to microphone...' : 'Click the microphone above to grant access and start your voice conversation.'}
            </p>
            
            <p className="text-sm text-gray-500 mt-6 px-4">
              Your privacy is important. Audio is processed in real-time and not stored.
            </p>
          </div>
        </Card>
      </div>
    );
  }

  return (
    <div className="h-screen bg-black flex flex-col" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
      {/* Header */}
      <div className="bg-[rgb(0,82,255)] border-b-4 border-black p-2 md:p-4">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <div className="flex items-center gap-2 md:gap-4">
            <div className={`${isMobile ? 'w-8 h-8' : 'w-10 h-10'} bg-white border-2 border-black rounded-full flex items-center justify-center shadow-[2px_2px_0_rgba(0,0,0,1)]`}>
              <div className="w-2 h-2 md:w-3 md:h-3 bg-green-500 rounded-full animate-pulse" />
            </div>
            <div>
              <p className="text-white font-bold text-sm md:text-base">CONNECTED</p>
              <p className="text-white/80 text-xs md:text-sm">{isMobile ? selectedVoiceAgent : `${selectedVoiceAgent} • ${selectedLanguage}`}</p>
            </div>
          </div>
          
          <div className="flex items-center gap-1 md:gap-2">
            <Button
              onClick={() => setIsMuted(!isMuted)}
              variant="neutral"
              className={`${isMobile ? 'p-2' : 'p-3'}`}
            >
              {isMuted ? <UilMicrophoneSlash className={`${isMobile ? 'h-4 w-4' : 'h-6 w-6'}`} /> : <UilMicrophone className={`${isMobile ? 'h-4 w-4' : 'h-6 w-6'}`} />}
            </Button>
            
            <Button
              onClick={endCall}
              className={`${isMobile ? 'p-2' : 'p-3'} bg-red-500 text-white`}
            >
              <UilPhone className={`${isMobile ? 'h-4 w-4' : 'h-6 w-6'} rotate-135`} />
            </Button>
          </div>
        </div>
      </div>

      {/* Main content */}
      {isMobile ? (
        /* Mobile Layout: Vertical split - Waveforms on top, Transcript on bottom */
        <div className="flex-1 flex flex-col">
          {/* Top panel - Audio visualization (horizontal split) */}
          <div className="h-1/4 flex">
            <ResizablePanelGroup direction="horizontal">
              {/* User audio */}
              <ResizablePanel 
                defaultSize={50} 
                minSize={20}
                style={{ flexBasis: `${Math.max(20, Math.min(80, userGain))}%` }}
                className="transition-all duration-200"
              >
                <div className="h-full bg-[rgb(0,82,255)] p-3 flex items-center justify-center relative">
                  <div className="text-center">
                    <UilMicrophone className="h-8 w-8 text-white mb-2 mx-auto block" />
                    <p className="text-white font-black text-sm uppercase">{userName}</p>
                    <p className="text-white/80 text-xs">{isMuted ? 'MUTED' : 'SPEAKING'}</p>
                  </div>
                  <div className="absolute bottom-3 left-3 right-3">
                    <div className="w-full h-1 bg-black/20 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-white transition-all duration-100"
                        style={{ width: `${userGain}%` }}
                      />
                    </div>
                  </div>
                </div>
              </ResizablePanel>

              <div className="w-2 bg-black"></div>

              {/* Agent audio */}
              <ResizablePanel 
                defaultSize={50}
                minSize={20}
                style={{ flexBasis: `${Math.max(20, Math.min(80, agentGain))}%` }}
                className="transition-all duration-200"
              >
                <div className="h-full bg-green-500 p-3 flex items-center justify-center relative">
                  <div className="text-center">
                    <UilRobot className="h-8 w-8 text-white mb-2 mx-auto block" />
                    <p className="text-white font-black text-sm uppercase">{selectedVoiceAgent}</p>
                    <p className="text-white/80 text-xs">AI AGENT</p>
                  </div>
                  <div className="absolute bottom-3 left-3 right-3">
                    <div className="w-full h-1 bg-black/20 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-white transition-all duration-100"
                        style={{ width: `${agentGain}%` }}
                      />
                    </div>
                  </div>
                </div>
              </ResizablePanel>
            </ResizablePanelGroup>
          </div>

          <div className="h-2 bg-black"></div>

          {/* Bottom panel - Transcript */}
          <div className="flex-1">
            <div className="h-full bg-white p-3 overflow-hidden flex flex-col">
              <h3 className="text-lg font-black uppercase mb-3">LIVE TRANSCRIPT</h3>
              
              <div className="flex-1 overflow-y-auto space-y-3">
                {transcript.map((entry, index) => (
                  <div
                    key={index}
                    className={`
                      p-3 rounded-lg border-2 border-black text-sm
                      ${entry.speaker === 'user' 
                        ? 'bg-[rgb(0,82,255)] text-white ml-4 shadow-[2px_2px_0_rgba(0,0,0,1)]' 
                        : 'bg-gray-100 mr-4 shadow-[2px_2px_0_rgba(0,0,0,1)]'
                      }
                    `}
                  >
                    <div className="flex items-center gap-2 mb-2">
                      <div className={`w-6 h-6 rounded-full border-2 border-black flex items-center justify-center ${entry.speaker === 'user' ? 'bg-white' : 'bg-green-500'}`}>
                        {entry.speaker === 'user' ? (
                          <UilMicrophone className="h-3 w-3 text-[rgb(0,82,255)]" />
                        ) : (
                          <UilRobot className="h-3 w-3 text-white" />
                        )}
                      </div>
                      <p className="font-bold text-xs uppercase">
                        {entry.speaker === 'user' ? userName : selectedVoiceAgent}
                      </p>
                    </div>
                    <p className="text-sm">{entry.text}</p>
                    <p className="text-xs opacity-60 mt-1">
                      {entry.timestamp.toLocaleTimeString()}
                    </p>
                  </div>
                ))}
                
                {transcript.length === 0 && (
                  <div className="text-center text-gray-400 mt-8">
                    <p className="text-sm">Conversation will appear here...</p>
                  </div>
                )}
                <div ref={transcriptEndRef} />
              </div>
            </div>
          </div>
        </div>
      ) : (
        /* Desktop Layout: Horizontal split - Transcript left, Waveforms right */
        <ResizablePanelGroup direction="horizontal" className="flex-1">
          {/* Left panel - Transcript */}
          <ResizablePanel defaultSize={35} minSize={20}>
            <div className="h-full bg-white border-r-4 border-black p-6 overflow-hidden flex flex-col">
              <h3 className="text-2xl font-black uppercase mb-4">LIVE TRANSCRIPT</h3>
              
              <div className="flex-1 overflow-y-auto space-y-4">
                {transcript.map((entry, index) => (
                  <div
                    key={index}
                    className={`
                      p-4 rounded-lg border-2 border-black
                      ${entry.speaker === 'user' 
                        ? 'bg-[rgb(0,82,255)] text-white ml-8 shadow-[4px_4px_0_rgba(0,0,0,1)]' 
                        : 'bg-gray-100 mr-8 shadow-[4px_4px_0_rgba(0,0,0,1)]'
                      }
                    `}
                  >
                    <div className="flex items-center gap-3 mb-2">
                      <div className={`w-8 h-8 rounded-full border-2 border-black flex items-center justify-center ${entry.speaker === 'user' ? 'bg-white' : 'bg-green-500'}`}>
                        {entry.speaker === 'user' ? (
                          <UilMicrophone className="h-4 w-4 text-[rgb(0,82,255)]" />
                        ) : (
                          <UilRobot className="h-4 w-4 text-white" />
                        )}
                      </div>
                      <p className="font-bold text-sm uppercase">
                        {entry.speaker === 'user' ? userName : selectedVoiceAgent}
                      </p>
                    </div>
                    <p>{entry.text}</p>
                    <p className="text-xs opacity-60 mt-2">
                      {entry.timestamp.toLocaleTimeString()}
                    </p>
                  </div>
                ))}
                
                {transcript.length === 0 && (
                  <div className="text-center text-gray-400 mt-12">
                    <p>Conversation will appear here...</p>
                  </div>
                )}
                <div ref={transcriptEndRef} />
              </div>
            </div>
          </ResizablePanel>

          <ResizableHandle className="w-2 bg-black hover:bg-gray-800 transition-colors" />

          {/* Right panel - Audio visualization */}
          <ResizablePanel defaultSize={65}>
            <ResizablePanelGroup direction="vertical">
              {/* User audio */}
              <ResizablePanel 
                defaultSize={50} 
                minSize={20}
                style={{ flexBasis: `${Math.max(20, Math.min(80, userGain))}%` }}
                className="transition-all duration-200"
              >
                <div className="h-full bg-[rgb(0,82,255)] p-6 flex items-center justify-center relative">
                  <div className="text-center">
                    <UilMicrophone className="h-16 w-16 text-white mb-4 mx-auto block" />
                    <p className="text-white font-black text-2xl uppercase">{userName}</p>
                    <p className="text-white/80">{isMuted ? 'MUTED' : 'SPEAKING'}</p>
                  </div>
                  <div className="absolute bottom-6 left-6 right-6">
                    <div className="w-full h-2 bg-black/20 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-white transition-all duration-100"
                        style={{ width: `${userGain}%` }}
                      />
                    </div>
                  </div>
                </div>
              </ResizablePanel>

              <ResizableHandle className="h-2 bg-black hover:bg-gray-800 transition-colors" />

              {/* Agent audio */}
              <ResizablePanel 
                defaultSize={50}
                minSize={20}
                style={{ flexBasis: `${Math.max(20, Math.min(80, agentGain))}%` }}
                className="transition-all duration-200"
              >
                <div className="h-full bg-green-500 p-6 flex items-center justify-center relative">
                  <div className="text-center">
                    <UilRobot className="h-16 w-16 text-white mb-4 mx-auto block" />
                    <p className="text-white font-black text-2xl uppercase">{selectedVoiceAgent}</p>
                    <p className="text-white/80">AI AGENT</p>
                  </div>
                  <div className="absolute bottom-6 left-6 right-6">
                    <div className="w-full h-2 bg-black/20 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-white transition-all duration-100"
                        style={{ width: `${agentGain}%` }}
                      />
                    </div>
                  </div>
                </div>
              </ResizablePanel>
            </ResizablePanelGroup>
          </ResizablePanel>
        </ResizablePanelGroup>
      )}

      <style jsx>{`
        @keyframes float {
          0%, 100% {
            transform: translateY(0px) scale(1);
            opacity: 0.3;
          }
          50% {
            transform: translateY(-20px) scale(1.1);
            opacity: 0.6;
          }
        }
      `}</style>
    </div>
  );
}


================================================
FILE: src/components/custom/welcome-card.tsx
================================================
'use client';

import * as React from 'react';
import Link from 'next/link';
import { Card, CardHeader } from '../ui/card';
import { Input } from '../ui/input';
import { Button } from '../ui/button';
import { UilSmile, UilUser, UilArrowRight, UilMicrophone, UilChat } from '@tooni/iconscout-unicons-react';

interface WelcomeCardProps {
  onNameSubmit: (name: string) => void;
}

export default function WelcomeCard({ onNameSubmit }: WelcomeCardProps) {
  const [name, setName] = React.useState('');
  const [phase, setPhase] = React.useState(0);
  const [isHovered, setIsHovered] = React.useState(false);

  React.useEffect(() => {
    const timer = setTimeout(() => {
      if (phase < 2) {
        setPhase(phase + 1);
      }
    }, 800);
    return () => clearTimeout(timer);
  }, [phase]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (name.trim()) {
      onNameSubmit(name.trim());
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen px-4 py-8">
      <div className="flex flex-col items-center justify-center gap-6 w-full max-w-4xl mx-auto">
        <div 
          className={`w-full flex justify-center ${
            phase >= 0 ? 'translate-y-0 opacity-100 scale-100' : 'translate-y-20 opacity-0 scale-95'
          }`}
        >
          <Card className="max-w-2xl w-full">
          <CardHeader className="text-center">
            <div className="flex justify-center mb-8">
              <Button className="w-32 h-32 bg-gradient-to-br from-[rgb(0,82,255)] to-blue-600 border-4 border-black p-0">
                <UilSmile className="h-20 w-20 text-white" />
              </Button>
            </div>
            <h1 className="text-5xl md:text-7xl font-black uppercase text-black mb-4 tracking-tight" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              WELCOME TO <span className="text-[rgb(0,82,255)]">DIALA</span>
            </h1>
            <p className="text-xl md:text-2xl text-gray-700 mb-2 font-bold">YOUR AI VOICE AGENT PLATFORM</p>
          </CardHeader>
          </Card>
        </div>

        <div 
          className={`w-full flex justify-center ${
            phase >= 1 ? 'translate-y-0 opacity-100 scale-100' : 'translate-y-20 opacity-0 scale-95'
          }`}
        >
          <Card className="max-w-xl w-full">
          <CardHeader>
            <div className="flex justify-center gap-4 mb-4">
              <Button className="w-12 h-12 bg-[rgb(0,82,255)] border-4 border-black p-0">
                <UilMicrophone className="h-12 w-12 text-white" />
              </Button>
              <Button className="w-12 h-12 bg-pink-400 border-4 border-black p-0">
                <UilChat className="h-6 w-6 text-white" />
              </Button>
            </div>
            <p className="text-2xl font-black text-center text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              LET'S GET STARTED!
            </p>
            <p className="text-lg text-center text-gray-700 font-medium leading-relaxed">
              Experience realistic voice conversations with AI-powered background sounds and natural speech
            </p>
          </CardHeader>
          </Card>
        </div>

        <div 
          className={`w-full flex justify-center ${
            phase >= 2 ? 'translate-y-0 opacity-100 scale-100' : 'translate-y-20 opacity-0 scale-95'
          }`}
        >
          <Card className="max-w-md w-full">
          <CardHeader>
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="space-y-2">
                <label className="text-xl font-black uppercase flex items-center gap-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  <span>WHAT'S</span>
                  <span>YOUR</span>
                  <span>NAME?</span>
                </label>
                <div className="relative">
                  <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                    <UilUser className="h-6 w-6 text-black" />
                  </div>
                  <Input
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    placeholder="Enter your name"
                    className="pl-12 h-14 text-lg font-semibold border-4 border-black rounded-[3px] text-black"
                    autoFocus
                  />
                </div>
              </div>
              <Button
                type="submit"
                disabled={!name.trim()}
                className="w-full h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
              >
                <span className="flex items-center justify-center">
                  CONTINUE
                  <UilArrowRight className="ml-2 h-6 w-6" />
                </span>
              </Button>
            </form>
          </CardHeader>
          </Card>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/agent-card.tsx
================================================
'use client';

import React from 'react';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';

interface Agent {
  id: string;
  name: string;
  status: 'active' | 'paused' | 'inactive';
  calls: number;
  success: number;
  currentCall?: string | null;
}

interface AgentMetric {
  label: string;
  value: string | number;
}

interface AgentCardProps {
  agent: Agent;
  showCurrentStatus?: boolean;
  showMetrics?: boolean;
  additionalMetrics?: AgentMetric[];
  avatarColor?: string;
  bgColor?: string;
}

export default function AgentCard({
  agent,
  showCurrentStatus = true,
  showMetrics = true,
  additionalMetrics,
  avatarColor = "bg-blue-400",
  bgColor = "bg-white"
}: AgentCardProps) {
  
  const defaultAdditionalMetrics: AgentMetric[] = [
    {
      label: "Appointments:",
      value: Math.floor(agent.calls * (agent.success / 100) * 0.8)
    },
    {
      label: "Avg Call:",
      value: `${Math.floor(Math.random() * 2) + 2}m ${Math.floor(Math.random() * 60)}s`
    },
    {
      label: "Follow-ups:",
      value: Math.floor(agent.calls * 0.3)
    },
    {
      label: "Conversion:",
      value: `${Math.floor(agent.success * 0.8)}%`
    }
  ];

  const displayMetrics = additionalMetrics || defaultAdditionalMetrics;

  const getStatusStyle = (status: string) => {
    switch (status) {
      case 'active':
        return "bg-green-400 text-black";
      case 'paused':
        return "bg-yellow-400 text-black";
      default:
        return "bg-gray-400 text-white";
    }
  };

  const getPerformanceBarColor = (success: number) => {
    if (success >= 90) return "bg-green-400";
    if (success >= 80) return "bg-yellow-400";
    return "bg-red-400";
  };

  return (
    <div className={`${bgColor} p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]`}>
      {/* Agent Header */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-3">
          <div className={`w-12 h-12 ${avatarColor} border-2 border-black flex items-center justify-center font-black text-white text-sm`}>
            AI
          </div>
          <div>
            <div className="font-black text-sm">{agent.name}</div>
            <div className="text-xs text-gray-600">Agent ID: {agent.id}</div>
          </div>
        </div>
        <Badge className={cn(
          "border border-black font-bold uppercase text-xs",
          getStatusStyle(agent.status)
        )}>
          {agent.status}
        </Badge>
      </div>

      {/* Current Activity Status */}
      {showCurrentStatus && (
        <div className="mb-4 p-3 bg-gray-50 border-2 border-black">
          <div className="flex items-center justify-between mb-2">
            <span className="font-bold text-xs uppercase text-gray-600">CURRENT STATUS</span>
            {agent.currentCall && (
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            )}
          </div>
          {agent.currentCall ? (
            <div>
              <div className="font-bold text-sm text-green-600">ON CALL</div>
              <div className="text-xs text-gray-700">Speaking with {agent.currentCall}</div>
              <div className="text-xs text-gray-500">Duration: {Math.floor(Math.random() * 180) + 60}s</div>
            </div>
          ) : (
            <div>
              <div className="font-bold text-sm text-blue-600">AVAILABLE</div>
              <div className="text-xs text-gray-700">Ready for next call</div>
              <div className="text-xs text-gray-500">Idle: {Math.floor(Math.random() * 30) + 10}s</div>
            </div>
          )}
        </div>
      )}

      {/* Performance Metrics */}
      {showMetrics && (
        <div className="space-y-3">
          <div className="grid grid-cols-2 gap-3">
            <div className="text-center">
              <div className="text-lg font-black text-blue-600">{agent.calls}</div>
              <div className="text-xs text-gray-600 font-bold">CALLS TODAY</div>
            </div>
            <div className="text-center">
              <div className="text-lg font-black text-green-600">{agent.success}%</div>
              <div className="text-xs text-gray-600 font-bold">SUCCESS RATE</div>
            </div>
          </div>
          
          {/* Success Rate Progress Bar */}
          <div>
            <div className="flex justify-between items-center mb-1">
              <span className="text-xs font-bold text-gray-600">PERFORMANCE</span>
              <span className="text-xs font-bold">{agent.success}%</span>
            </div>
            <div className="w-full bg-gray-300 border border-black h-2">
              <div 
                className={cn("h-full", getPerformanceBarColor(agent.success))} 
                style={{ width: `${agent.success}%` }}
              />
            </div>
          </div>

          {/* Additional Metrics */}
          <div className="grid grid-cols-2 gap-2 text-xs">
            {displayMetrics.map((metric, index) => (
              <div key={index} className="flex justify-between">
                <span className="font-bold">{metric.label}</span>
                <span>{metric.value}</span>
              </div>
            ))}
          </div>

          {/* Quality Score */}
          <div className="p-2 bg-blue-50 border-2 border-black">
            <div className="flex justify-between items-center">
              <span className="font-bold text-xs text-blue-800">QUALITY SCORE</span>
              <span className="font-black text-sm text-blue-600">
                {Math.floor(agent.success * 0.9 + Math.random() * 10)}/100
              </span>
            </div>
            <div className="text-xs text-blue-600 mt-1">Conversation quality rating</div>
          </div>
        </div>
      )}
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/agent-performance-analytics.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import { 
  UilUsersAlt, 
  UilStar, 
  UilCheckCircle, 
  UilExclamationTriangle,
  UilChart
} from '@tooni/iconscout-unicons-react';

interface Agent {
  id: string;
  name: string;
  status: string;
  calls: number;
  success: number;
  currentCall: string | null;
}

interface AgentPerformanceAnalyticsProps {
  agents: Agent[];
  swarmData?: any;
}

export default function AgentPerformanceAnalytics({ agents }: AgentPerformanceAnalyticsProps) {
  return (
    <div className="bg-indigo-50 p-6 border-2 sm:border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] sm:shadow-[6px_6px_0_rgba(0,0,0,1)]">
      <div className="flex items-center gap-3 mb-6">
        <Button variant="header" size="header" className="bg-indigo-400">
          <UilUsersAlt className="h-5 w-5 text-white" />
        </Button>
        <h3 className="font-black uppercase text-lg text-gray-800">AGENT PERFORMANCE ANALYTICS</h3>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {agents.map((agent, index) => (
          <div key={agent.id} className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-5">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className={cn(
                  "w-12 h-12 border-3 border-black flex items-center justify-center font-black text-white text-sm",
                  index === 0 ? "bg-yellow-400" : index === 1 ? "bg-blue-400" : "bg-purple-400"
                )}>
                  AI
                </div>
                <div>
                  <div className="font-black text-sm">{agent.name}</div>
                  <div className="text-xs text-gray-600">Agent ID: {agent.id}</div>
                </div>
              </div>
              <Badge className={cn(
                "border-2 border-black font-bold uppercase text-xs shadow-[2px_2px_0_rgba(0,0,0,1)]",
                agent.success >= 90 ? "bg-green-400 text-black" :
                agent.success >= 80 ? "bg-yellow-400 text-black" :
                "bg-red-400 text-white"
              )}>
                {agent.success >= 90 ? (
                  <><UilStar className="h-3 w-3 inline mr-1" /> EXCELLENT</>
                ) : agent.success >= 80 ? (
                  <><UilCheckCircle className="h-3 w-3 inline mr-1" /> GOOD</>
                ) : (
                  <><UilExclamationTriangle className="h-3 w-3 inline mr-1" /> IMPROVING</>
                )}
              </Badge>
            </div>
            
            {/* Performance metrics with enhanced design */}
            <div className="space-y-4">
              <div className="bg-gray-50 border-2 border-black p-3">
                <div className="grid grid-cols-2 gap-3">
                  <div className="text-center">
                    <div className="text-xl font-black text-blue-600">{agent.calls}</div>
                    <div className="text-xs font-bold text-gray-600">CALLS TODAY</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl font-black text-green-600">{agent.success}%</div>
                    <div className="text-xs font-bold text-gray-600">SUCCESS RATE</div>
                  </div>
                </div>
              </div>
              
              <div className="space-y-2">
                <div className="flex justify-between items-center p-2 bg-blue-50 border border-black">
                  <span className="text-xs font-black">AVG CALL TIME:</span>
                  <span className="text-xs font-black text-blue-600">{Math.floor(Math.random() * 2) + 2}m {Math.floor(Math.random() * 60)}s</span>
                </div>
                <div className="flex justify-between items-center p-2 bg-purple-50 border border-black">
                  <span className="text-xs font-black">QUALITY SCORE:</span>
                  <span className="text-xs font-black text-purple-600">{Math.floor(Math.random() * 15) + 85}/100</span>
                </div>
                <div className="flex justify-between items-center p-2 bg-orange-50 border border-black">
                  <span className="text-xs font-black">DEMOS BOOKED:</span>
                  <span className="text-xs font-black text-orange-600">{Math.floor(agent.calls * (agent.success / 100) * 0.8)}</span>
                </div>
              </div>
            </div>

            {/* Enhanced Performance trend */}
            <div className="mt-5">
              <div className="flex items-center gap-2 mb-3">
                <div className="w-4 h-4 bg-cyan-400 border border-black"></div>
                <div className="text-sm font-black">7-DAY PERFORMANCE TREND</div>
              </div>
              <div className="bg-gray-50 border-2 border-black p-2">
                <div className="flex items-end gap-1 h-12">
                  {Array.from({ length: 7 }, (_, i) => {
                    const height = Math.random() * 80 + 20;
                    const isToday = i === 6;
                    return (
                      <div key={i} className="flex-1 flex flex-col items-center">
                        <div 
                          className={cn(
                            "w-full border border-black",
                            isToday ? "bg-green-400" : "bg-cyan-400"
                          )}
                          style={{ height: `${height}%` }}
                        ></div>
                        {isToday && (
                          <div className="text-xs font-bold text-green-600 mt-1">
                            <UilChart className="h-3 w-3" />
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
                <div className="flex justify-between text-xs font-bold text-gray-700 mt-2">
                  <span>MON</span>
                  <span>TODAY</span>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/analytics-dashboard-header.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { UilChart } from '@tooni/iconscout-unicons-react';

interface MetricCard {
  value: string | number;
  label: string;
  description: string;
  color: string;
  progressWidth: string;
}

interface AnalyticsDashboardHeaderProps {
  totalCalls: number;
  title?: string;
  subtitle?: string;
  bgColor?: string;
  cards?: MetricCard[];
}

export default function AnalyticsDashboardHeader({ 
  totalCalls, 
  title = "ANALYTICS DASHBOARD", 
  subtitle = "Advanced Swarm Intelligence",
  bgColor = "bg-purple-400",
  cards
}: AnalyticsDashboardHeaderProps) {
  
  const defaultCards: MetricCard[] = [
    {
      value: Math.floor(totalCalls * 0.32),
      label: "OBJECTIVES MET",
      description: "↗ +12% vs last week",
      color: "text-green-600",
      progressWidth: "85%"
    },
    {
      value: Math.floor(totalCalls * 0.68),
      label: "QUALITY CALLS",
      description: "96% pass rate",
      color: "text-blue-600",
      progressWidth: "96%"
    },
    {
      value: "4.8/5",
      label: "AVG RATING",
      description: "Customer feedback",
      color: "text-purple-600",
      progressWidth: "96%"
    },
    {
      value: "94%",
      label: "EFFICIENCY",
      description: "↗ Above target",
      color: "text-orange-600",
      progressWidth: "94%"
    }
  ];

  const displayCards = cards || defaultCards;
  return (
    <div className={`${bgColor} p-6 border-2 sm:border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] sm:shadow-[6px_6px_0_rgba(0,0,0,1)]`}>
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-4">
          <Button variant="header" size="header" className="bg-white">
            <UilChart className="h-6 w-6 text-black" />
          </Button>
          <div>
            <h3 className="font-black uppercase text-xl text-white">{title}</h3>
            <div className="text-white/80 font-bold text-sm">{subtitle}</div>
          </div>
        </div>
        <div className="flex items-center gap-3">
          <div className="w-4 h-4 bg-white rounded-full animate-pulse"></div>
          <span className="text-sm font-black text-white">LIVE DATA • {new Date().toLocaleTimeString()}</span>
        </div>
      </div>
      
      <div className={`grid gap-6 ${displayCards.length <= 4 ? 'grid-cols-2 md:grid-cols-4' : 'grid-cols-2 md:grid-cols-3 lg:grid-cols-6'}`}>
        {displayCards.map((card, index) => (
          <div key={index} className="bg-white/90 backdrop-blur border-2 border-black p-4 text-center shadow-[3px_3px_0_rgba(0,0,0,1)]">
            <div className={`text-4xl font-black ${card.color} mb-2`}>{card.value}</div>
            <div className="text-sm font-bold text-gray-700 uppercase">{card.label}</div>
            <div className={`text-sm ${card.color} font-bold`}>{card.description}</div>
            <div className="w-full bg-gray-300 border border-black h-2 mt-3">
              <div className={`h-full ${card.color.replace('text-', 'bg-').replace('-600', '-400')}`} style={{ width: card.progressWidth }}></div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/analytics-mock-data.mdx
================================================
# Analytics Components Mock Data

This file contains all the mock data structures used by the analytics components extracted from the swarm overview modal.

## Analytics Dashboard Header Component

**Component**: `AnalyticsDashboardHeader`
**Props**: 
```typescript
interface AnalyticsDashboardHeaderProps {
  totalCalls: number;
}
```

**Mock Data**:
```javascript
const dashboardHeaderData = {
  totalCalls: 287, // Used to calculate objectives met and quality calls
  objectivesMet: Math.floor(287 * 0.32), // 91
  qualityCalls: Math.floor(287 * 0.68), // 195
  avgRating: "4.8/5",
  efficiency: "94%"
};
```

## Call Volume Analysis Component

**Component**: `CallVolumeAnalysis`
**Props**: 
```typescript
interface CallVolumeAnalysisProps {
  callsToday: number;
  callsThisWeek: number;
}
```

**Mock Data**:
```javascript
const callVolumeData = {
  callsToday: 28, // Math.floor(swarmData.totalCalls * 0.1)
  callsThisWeek: 86, // Math.floor(swarmData.totalCalls * 0.3)
  peakHours: "10AM-2PM",
  todayPerformanceIncrease: "+23%",
  weeklyTrendIncrease: "+8%"
};
```

## Conversation Quality Analysis Component

**Component**: `ConversationQualityAnalysis`
**Props**: None (uses static mock data)

**Mock Data**:
```javascript
const qualityMetrics = {
  scriptAdherence: 96,
  objectiveCompletion: 84,
  conversationFlow: 91,
  responseQuality: 88,
  qualityTrends: Array.from({ length: 14 }, (_, i) => ({
    day: i + 1,
    score: 75 + Math.sin(i * 0.5) * 15 + Math.random() * 10
  })),
  scoreDistribution: {
    "1-2_stars": 2,
    "3-4_stars": 8,
    "5-6_stars": 22,
    "7-8_stars": 38,
    "9-10_stars": 30
  }
};
```

## Live Call Monitor Component

**Component**: `LiveCallMonitor`
**Props**: None (uses static mock data)

**Mock Data**:
```javascript
const liveCallData = {
  activeCalls: [
    {
      agent: "AI Agent Alpha",
      prospect: "TechCorp CEO",
      phase: "Discovery phase",
      elapsed: "2m 34s",
      progress: 45,
      status: "LIVE",
      statusColor: "green"
    },
    {
      agent: "AI Agent Beta",
      prospect: "Marketing Dir",
      phase: "Objection handling",
      elapsed: "4m 12s",
      progress: 72,
      status: "NEGO",
      statusColor: "blue"
    },
    {
      agent: "AI Agent Gamma",
      prospect: "Enterprise VP",
      phase: "Closing phase",
      elapsed: "6m 45s",
      progress: 91,
      status: "CLOSE",
      statusColor: "purple"
    }
  ],
  activityTimeline: Array.from({ length: 60 }, (_, i) => ({
    minute: i,
    activity: Math.sin(i * 0.1) * 30 + 40 + Math.random() * 20
  }))
};
```

## Call Outcome Analytics Component

**Component**: `CallOutcomeAnalytics`
**Props**: 
```typescript
interface CallOutcomeAnalyticsProps {
  totalCalls: number;
}
```

**Mock Data**:
```javascript
const outcomeData = {
  totalCalls: 287,
  outcomes: {
    demoScheduled: {
      percentage: 32,
      count: Math.floor(287 * 0.32), // 91
      color: "green"
    },
    followUpNeeded: {
      percentage: 25,
      count: Math.floor(287 * 0.25), // 71
      color: "blue"
    },
    infoProvided: {
      percentage: 18,
      count: Math.floor(287 * 0.18), // 51
      color: "yellow"
    },
    notInterested: {
      percentage: 15,
      count: Math.floor(287 * 0.15), // 43
      color: "red"
    },
    noAnswer: {
      percentage: 10,
      count: Math.floor(287 * 0.10), // 28
      color: "gray"
    }
  },
  successRateTrends: Array.from({ length: 30 }, (_, i) => ({
    day: i,
    successRate: 65 + Math.sin(i * 0.2) * 10 + Math.random() * 8
  }))
};
```

## Agent Performance Analytics Component

**Component**: `AgentPerformanceAnalytics`
**Props**: 
```typescript
interface Agent {
  id: string;
  name: string;
  status: 'active' | 'paused';
  calls: number;
  success: number;
  currentCall: string | null;
}

interface AgentPerformanceAnalyticsProps {
  agents: Agent[];
}
```

**Mock Data**:
```javascript
const agentData = {
  agents: [
    {
      id: '1',
      name: 'AI Agent Alpha',
      status: 'active',
      calls: 45,
      success: 92,
      currentCall: 'Michael Johnson',
      avgCallTime: `${Math.floor(Math.random() * 2) + 2}m ${Math.floor(Math.random() * 60)}s`,
      qualityScore: Math.floor(Math.random() * 15) + 85,
      demosBooked: Math.floor(45 * (92 / 100) * 0.8) // 33
    },
    {
      id: '2',
      name: 'AI Agent Beta',
      status: 'active',
      calls: 38,
      success: 85,
      currentCall: null,
      avgCallTime: `${Math.floor(Math.random() * 2) + 2}m ${Math.floor(Math.random() * 60)}s`,
      qualityScore: Math.floor(Math.random() * 15) + 85,
      demosBooked: Math.floor(38 * (85 / 100) * 0.8) // 25
    },
    {
      id: '3',
      name: 'AI Agent Gamma',
      status: 'paused',
      calls: 22,
      success: 78,
      currentCall: null,
      avgCallTime: `${Math.floor(Math.random() * 2) + 2}m ${Math.floor(Math.random() * 60)}s`,
      qualityScore: Math.floor(Math.random() * 15) + 85,
      demosBooked: Math.floor(22 * (78 / 100) * 0.8) // 13
    }
  ]
};
```

## Recent Calls Table Component

**Component**: `RecentCallsTable`
**Props**: 
```typescript
interface RecentCall {
  time: string;
  prospect: string;
  outcome: string;
  agent: string;
}

interface RecentCallsTableProps {
  recentCalls: RecentCall[];
}
```

**Mock Data**:
```javascript
const recentCallsData = {
  recentCalls: [
    { time: "14:23", prospect: "TechCorp Inc", outcome: "Demo Scheduled", agent: "Alpha" },
    { time: "14:18", prospect: "StartupXYZ", outcome: "Follow-up Needed", agent: "Beta" },
    { time: "14:12", prospect: "BigCorp Ltd", outcome: "Demo Scheduled", agent: "Gamma" },
    { time: "14:05", prospect: "MediumBiz", outcome: "Info Provided", agent: "Alpha" },
    { time: "13:58", prospect: "SmallCo", outcome: "Not Interested", agent: "Beta" },
    { time: "13:52", prospect: "Enterprise Corp", outcome: "Demo Scheduled", agent: "Alpha" },
    { time: "13:45", prospect: "Local Business", outcome: "Follow-up Needed", agent: "Gamma" },
    { time: "13:38", prospect: "Tech Solutions", outcome: "Info Provided", agent: "Beta" }
  ]
};
```

## Platform Insights Component

**Component**: `PlatformInsights`
**Props**: 
```typescript
interface PerformanceData {
  callsToday: number;
  qualityScore: string;
}

interface PlatformInsightsProps {
  totalCalls: number;
  performanceData: PerformanceData;
}
```

**Mock Data**:
```javascript
const platformInsightsData = {
  totalCalls: 287,
  performanceData: {
    callsToday: 28,
    qualityScore: "94"
  },
  insights: [
    {
      type: "optimal",
      title: "OPTIMAL PERFORMANCE",
      description: "Swarm is operating at 96% efficiency with consistent quality scores above platform average.",
      color: "green"
    },
    {
      type: "quality",
      title: "CONVERSATION QUALITY",
      description: "Agent responses maintain natural flow with 91% adherence to conversation guidelines.",
      color: "blue"
    },
    {
      type: "scaling",
      title: "SCALING RECOMMENDATION",
      description: "Performance metrics indicate readiness for 2x agent scaling during peak hours.",
      color: "purple"
    },
    {
      type: "optimization",
      title: "OPTIMIZATION OPPORTUNITY",
      description: "Consider adjusting script timing during objection handling phase for improved conversion.",
      color: "yellow"
    }
  ],
  metrics: {
    callsProcessed: 28,
    qualityScore: "94/100",
    objectivesMet: Math.floor(287 * 0.32), // 91
    platformUptime: "99.8%"
  }
};
```

## Analytics Summary Component

**Component**: `AnalyticsSummary`
**Props**: 
```typescript
interface AnalyticsSummaryProps {
  successRate: number;
  callsToday: number;
  appointmentsBooked: number;
}
```

**Mock Data**:
```javascript
const analyticsSummaryData = {
  successRate: 85, // From swarmData.successRate
  callsToday: 28, // From swarmDetails.performance.callsToday
  appointmentsBooked: 22, // From swarmDetails.performance.appointmentsBooked
  performanceHighlights: [
    "85% success rate (↗ +12%)",
    "28 calls completed today",
    "22 demos scheduled",
    "96% script adherence rate"
  ],
  optimizationInsights: [
    "Peak hours: 10AM-2PM (+23% efficiency)",
    "Optimal call length: 3-4 minutes",
    "Best conversion: Tuesday-Thursday",
    "Quality scores trending upward"
  ],
  nextActions: [
    "Scale to 5 agents during peak hours",
    "Optimize objection handling script",
    "Focus on enterprise prospects",
    "Implement advanced analytics"
  ],
  nextOptimization: `${Math.floor(Math.random() * 5) + 1} minutes`
};
```

## Complete Mock Data Structure

For easy import and use, here's the complete data structure that can be used across all components:

```javascript
export const analyticsData = {
  // Main swarm data
  swarmData: {
    id: "swarm-001",
    name: "Enterprise Discovery Campaign",
    totalCalls: 287,
    successRate: 85,
    totalAgents: 3,
    activeAgents: 2
  },
  
  // Performance data
  performance: {
    callsToday: 28,
    callsThisWeek: 86,
    avgCallDuration: "3m 42s",
    conversionRate: 85,
    appointmentsBooked: 22,
    qualityScore: "94"
  },
  
  // All component data combined
  dashboardHeader: dashboardHeaderData,
  callVolume: callVolumeData,
  qualityMetrics: qualityMetrics,
  liveCalls: liveCallData,
  outcomes: outcomeData,
  agents: agentData,
  recentCalls: recentCallsData,
  platformInsights: platformInsightsData,
  summary: analyticsSummaryData
};
```

This data structure provides all the mock data needed to populate each analytics component with realistic, consistent data that matches the original swarm overview modal implementation.


================================================
FILE: src/components/custom/analytics/analytics-summary.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { UilBullseye, UilRocket, UilChart } from '@tooni/iconscout-unicons-react';

interface AnalyticsSummaryProps {
  swarmData: any;
  swarmDetails: any;
}

export default function AnalyticsSummary({ swarmData, swarmDetails }: AnalyticsSummaryProps) {
  return (
    <div className="bg-yellow-400 p-6 border-2 sm:border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] sm:shadow-[6px_6px_0_rgba(0,0,0,1)]">
      <div className="flex items-center gap-4 mb-6">
        <Button variant="header" size="header" className="bg-white">
          <UilBullseye className="h-6 w-6 text-black" />
        </Button>
        <div>
          <h3 className="font-black uppercase text-xl text-white">ANALYTICS SUMMARY</h3>
          <div className="text-white/80 font-bold text-sm">AI-Powered Insights & Recommendations</div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-white/90 backdrop-blur border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex items-center gap-3 mb-3">
            <Button variant="subheader" size="icon" className="bg-green-400">
              <UilRocket className="h-4 w-4 text-black" />
            </Button>
            <div className="font-black text-sm">PERFORMANCE HIGHLIGHTS</div>
          </div>
          <div className="space-y-2 text-sm">
            <div>• {swarmData.successRate}% success rate (↗ +12%)</div>
            <div>• {swarmDetails.performance.callsToday} calls completed today</div>
            <div>• {swarmDetails.performance.appointmentsBooked} demos scheduled</div>
            <div>• 96% script adherence rate</div>
          </div>
        </div>

        <div className="bg-white/90 backdrop-blur border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex items-center gap-3 mb-3">
            <Button variant="subheader" size="icon" className="bg-blue-400">
              <UilChart className="h-4 w-4 text-white" />
            </Button>
            <div className="font-black text-sm">OPTIMIZATION INSIGHTS</div>
          </div>
          <div className="space-y-2 text-sm">
            <div>• Peak hours: 10AM-2PM (+23% efficiency)</div>
            <div>• Optimal call length: 3-4 minutes</div>
            <div>• Best conversion: Tuesday-Thursday</div>
            <div>• Quality scores trending upward</div>
          </div>
        </div>

        <div className="bg-white/90 backdrop-blur border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex items-center gap-3 mb-3">
            <Button variant="subheader" size="icon" className="bg-purple-400">
              <UilChart className="h-4 w-4 text-white" />
            </Button>
            <div className="font-black text-sm">NEXT ACTIONS</div>
          </div>
          <div className="space-y-2 text-sm">
            <div>• Scale to 5 agents during peak hours</div>
            <div>• Optimize objection handling script</div>
            <div>• Focus on enterprise prospects</div>
            <div>• Implement advanced analytics</div>
          </div>
        </div>
      </div>

      <div className="mt-6 p-4 bg-white/20 backdrop-blur border-2 border-white/30 rounded-none">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-6 h-6 bg-white rounded-full animate-pulse"></div>
            <span className="font-black text-white">REAL-TIME AI OPTIMIZATION ACTIVE</span>
          </div>
          <div className="text-white font-black text-sm">
            Next optimization: {Math.floor(Math.random() * 5) + 1} minutes
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/call-objectives-monitor.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import { UilBullseye, UilCheckCircle, UilInfoCircle, UilLightbulb } from '@tooni/iconscout-unicons-react';

interface CallData {
  callId: string;
  agentName: string;
  customerName: string;
  customerPhone: string;
  status: string;
  duration: number;
  campaignName: string;
  currentPhase: string;
  isRecording: boolean;
}

interface Objective {
  id: string;
  title: string;
  description: string;
  status: 'completed' | 'in-progress' | 'pending';
  progress: number;
}

interface NextAction {
  id: string;
  action: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
}

interface CallObjectivesMonitorProps {
  title?: string;
  bgColor?: string;
  callData?: CallData;
  objectives?: Objective[];
  nextActions?: NextAction[];
}

export default function CallObjectivesMonitor({
  title = "CALL OBJECTIVES & PROGRESS",
  bgColor = "bg-blue-50",
  callData,
  objectives,
  nextActions
}: CallObjectivesMonitorProps) {
  
  const defaultObjectives: Objective[] = [
    {
      id: '1',
      title: 'Introduce AI voice solution benefits',
      description: 'Present core value proposition and competitive advantages',
      status: 'completed',
      progress: 100
    },
    {
      id: '2',
      title: 'Address cost concerns',
      description: 'Discuss ROI and pricing structure',
      status: 'in-progress',
      progress: 65
    },
    {
      id: '3',
      title: 'Schedule product demonstration',
      description: 'Book demo meeting with decision makers',
      status: 'pending',
      progress: 0
    },
    {
      id: '4',
      title: 'Qualify decision-making authority',
      description: 'Identify who makes the final purchasing decision',
      status: 'pending',
      progress: 0
    }
  ];

  const defaultNextActions: NextAction[] = [
    {
      id: '1',
      action: 'Provide ROI case studies',
      description: 'Share specific examples from similar companies',
      priority: 'high'
    },
    {
      id: '2',
      action: 'Address technical implementation questions',
      description: 'Explain integration process and timeline',
      priority: 'medium'
    },
    {
      id: '3',
      action: 'Propose trial period',
      description: 'Offer 30-day pilot program to reduce risk',
      priority: 'medium'
    }
  ];

  const displayObjectives = objectives || defaultObjectives;
  const displayNextActions = nextActions || defaultNextActions;
  const formatDuration = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-400 text-black';
      case 'paused': return 'bg-yellow-400 text-black';
      case 'stopped': return 'bg-gray-400 text-white';
      default: return 'bg-gray-400 text-white';
    }
  };

  return (
    <div className={`${bgColor} p-6 border-2 sm:border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] sm:shadow-[6px_6px_0_rgba(0,0,0,1)]`}>
      <div className="flex items-center gap-3 mb-6">
        <Button variant="header" size="header" className="bg-blue-400">
          <UilBullseye className="h-5 w-5 text-white" />
        </Button>
        <h3 className="font-black uppercase text-lg text-gray-800">{title}</h3>
      </div>
      
      {/* Campaign Information */}
      {callData && (
        <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
          <div className="flex items-center gap-2 mb-4">
            <Button variant="subheader" size="icon" className="bg-purple-400">
              <UilInfoCircle className="h-3 w-3 text-white" />
            </Button>
            <div className="font-black text-sm">LIVE CAMPAIGN DETAILS</div>
          </div>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="font-bold text-sm">Campaign ID:</span>
                <span className="text-sm">{callData.callId}</span>
              </div>
              <div className="flex justify-between">
                <span className="font-bold text-sm">AI Agent:</span>
                <span className="text-sm">{callData.agentName}</span>
              </div>
              <div className="flex justify-between">
                <span className="font-bold text-sm">Prospect:</span>
                <span className="text-sm">{callData.customerName}</span>
              </div>
              <div className="flex justify-between">
                <span className="font-bold text-sm">Phone:</span>
                <span className="text-sm">{callData.customerPhone}</span>
              </div>
            </div>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="font-bold text-sm">Status:</span>
                <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", getStatusColor(callData.status))}>
                  {callData.status}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="font-bold text-sm">Duration:</span>
                <span className="font-black text-lg text-green-600">{formatDuration(callData.duration)}</span>
              </div>
              <div className="flex justify-between">
                <span className="font-bold text-sm">Phase:</span>
                <span className="px-2 py-1 bg-purple-400 border border-black text-xs font-bold uppercase text-white">
                  {callData.currentPhase}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="font-bold text-sm">Recording:</span>
                <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", callData.isRecording ? "bg-red-400 text-white" : "bg-gray-400 text-black")}>
                  {callData.isRecording ? 'ACTIVE' : 'INACTIVE'}
                </span>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Call Objectives Progress */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-green-400">
            <UilCheckCircle className="h-3 w-3 text-black" />
          </Button>
          <div className="font-black text-sm">CAMPAIGN OBJECTIVES PROGRESS</div>
        </div>
        <div className="space-y-4">
          {displayObjectives.map((objective, index) => (
            <div key={objective.id} className="flex items-center gap-4 p-3 bg-gray-50 border-2 border-black">
              <div className={cn(
                "w-8 h-8 border-2 border-black flex items-center justify-center text-white font-black text-xs flex-shrink-0",
                objective.status === 'completed' ? "bg-green-400" : 
                objective.status === 'in-progress' ? "bg-yellow-400 text-black" : "bg-gray-400"
              )}>
                {index + 1}
              </div>
              <div className="flex-1">
                <div className="font-bold text-sm">{objective.title}</div>
                <div className="text-xs text-gray-600 mt-1">{objective.description}</div>
                <div className="w-full bg-gray-300 border border-black h-2 mt-2">
                  <div 
                    className={cn(
                      "h-full",
                      objective.status === 'completed' ? "bg-green-400" : 
                      objective.status === 'in-progress' ? "bg-yellow-400" : "bg-gray-400"
                    )} 
                    style={{ width: `${objective.progress}%` }}
                  ></div>
                </div>
              </div>
              <div className={cn(
                "px-3 py-1 border border-black text-xs font-bold uppercase",
                objective.status === 'completed' ? "bg-green-400 text-black" : 
                objective.status === 'in-progress' ? "bg-yellow-400 text-black" : "bg-gray-400 text-white"
              )}>
                {objective.status === 'completed' ? "DONE" : 
                 objective.status === 'in-progress' ? "ACTIVE" : "QUEUE"}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* AI Suggested Next Actions */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-orange-400">
            <UilLightbulb className="h-3 w-3 text-black" />
          </Button>
          <div className="font-black text-sm">AI SUGGESTED NEXT ACTIONS</div>
        </div>
        <div className="space-y-3">
          {displayNextActions.map((action, index) => (
            <div key={action.id} className="flex items-start gap-3 p-3 border-2 border-gray-300 bg-blue-50">
              <div className="w-6 h-6 bg-blue-400 border-2 border-black flex items-center justify-center text-white font-black text-xs flex-shrink-0 mt-0.5">
                {index + 1}
              </div>
              <div className="flex-1">
                <div className="font-bold text-sm text-gray-800">{action.action}</div>
                <div className="text-xs text-gray-600 mt-1">{action.description}</div>
              </div>
              <div className={cn(
                "px-2 py-1 border border-black text-xs font-bold uppercase",
                action.priority === 'high' ? "bg-red-400 text-white" :
                action.priority === 'medium' ? "bg-yellow-400 text-black" : "bg-green-400 text-black"
              )}>
                {action.priority}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/call-outcome-analytics.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { 
  UilChart, 
  UilCheckCircle, 
  UilClock, 
  UilInfoCircle, 
  UilTimesCircle, 
  UilCircle 
} from '@tooni/iconscout-unicons-react';

interface CallOutcomeAnalyticsProps {
  totalCalls: number;
  successRate?: number;
}

export default function CallOutcomeAnalytics({ totalCalls }: CallOutcomeAnalyticsProps) {
  return (
    <div className="bg-orange-50 p-6 border-2 sm:border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] sm:shadow-[6px_6px_0_rgba(0,0,0,1)]">
      <div className="flex items-center gap-3 mb-6">
        <Button variant="header" size="header" className="bg-orange-400">
          <UilChart className="h-5 w-5 text-black" />
        </Button>
        <h3 className="font-black uppercase text-lg text-gray-800">CALL OUTCOME DISTRIBUTION</h3>
      </div>
      
      <div className="space-y-4">
        <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex justify-between items-center mb-3">
            <div className="flex items-center gap-3">
              <Button variant="subheader" size="icon" className="bg-green-400">
                <UilCheckCircle className="h-3 w-3 text-black" />
              </Button>
              <span className="font-black text-sm">DEMO SCHEDULED</span>
            </div>
            <span className="font-black text-green-600">32%</span>
          </div>
          <div className="w-full bg-gray-300 border-2 border-black h-6">
            <div className="h-full bg-green-400 flex items-center justify-end pr-3" style={{ width: '32%' }}>
              <span className="text-xs font-black text-black">{Math.floor(totalCalls * 0.32)}</span>
            </div>
          </div>
        </div>
        
        <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex justify-between items-center mb-3">
            <div className="flex items-center gap-3">
              <Button variant="subheader" size="icon" className="bg-blue-400">
                <UilClock className="h-3 w-3 text-white" />
              </Button>
              <span className="font-black text-sm">FOLLOW-UP NEEDED</span>
            </div>
            <span className="font-black text-blue-600">25%</span>
          </div>
          <div className="w-full bg-gray-300 border-2 border-black h-6">
            <div className="h-full bg-blue-400 flex items-center justify-end pr-3" style={{ width: '25%' }}>
              <span className="text-xs font-black text-white">{Math.floor(totalCalls * 0.25)}</span>
            </div>
          </div>
        </div>
        
        <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex justify-between items-center mb-3">
            <div className="flex items-center gap-3">
              <Button variant="subheader" size="icon" className="bg-yellow-400">
                <UilInfoCircle className="h-3 w-3 text-black" />
              </Button>
              <span className="font-black text-sm">INFO PROVIDED</span>
            </div>
            <span className="font-black text-yellow-600">18%</span>
          </div>
          <div className="w-full bg-gray-300 border-2 border-black h-6">
            <div className="h-full bg-yellow-400 flex items-center justify-end pr-3" style={{ width: '18%' }}>
              <span className="text-xs font-black text-black">{Math.floor(totalCalls * 0.18)}</span>
            </div>
          </div>
        </div>
        
        <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex justify-between items-center mb-3">
            <div className="flex items-center gap-3">
              <Button variant="subheader" size="icon" className="bg-red-400">
                <UilTimesCircle className="h-3 w-3 text-white" />
              </Button>
              <span className="font-black text-sm">NOT INTERESTED</span>
            </div>
            <span className="font-black text-red-600">15%</span>
          </div>
          <div className="w-full bg-gray-300 border-2 border-black h-6">
            <div className="h-full bg-red-400 flex items-center justify-end pr-3" style={{ width: '15%' }}>
              <span className="text-xs font-black text-white">{Math.floor(totalCalls * 0.15)}</span>
            </div>
          </div>
        </div>
        
        <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex justify-between items-center mb-3">
            <div className="flex items-center gap-3">
              <Button variant="subheader" size="icon" className="bg-gray-400">
                <UilCircle className="h-3 w-3 text-white" />
              </Button>
              <span className="font-black text-sm">NO ANSWER</span>
            </div>
            <span className="font-black text-gray-600">10%</span>
          </div>
          <div className="w-full bg-gray-300 border-2 border-black h-6">
            <div className="h-full bg-gray-400 flex items-center justify-end pr-3" style={{ width: '10%' }}>
              <span className="text-xs font-black text-white">{Math.floor(totalCalls * 0.10)}</span>
            </div>
          </div>
        </div>
      </div>

      {/* Outcome Trends Over Time */}
      <div className="mt-6 bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-orange-400">
            <UilChart className="h-3 w-3 text-black" />
          </Button>
          <div className="font-black text-sm">SUCCESS RATE TRENDS (LAST 30 DAYS)</div>
        </div>
        <div className="bg-gray-50 border-2 border-black p-3">
          <div className="flex items-end gap-1 h-24">
            {Array.from({ length: 30 }, (_, i) => {
              const successRate = 65 + Math.sin(i * 0.2) * 10 + Math.random() * 8;
              const normalizedHeight = Math.max((successRate - 50) / 50 * 100, 10);
              const color = successRate > 80 ? 'bg-green-400' : successRate > 70 ? 'bg-blue-400' : successRate > 60 ? 'bg-yellow-400' : 'bg-red-400';
              return (
                <div key={i} className="flex-1 flex flex-col items-center">
                  <div 
                    className={`w-full border-r border-black last:border-r-0 ${color} relative group cursor-pointer`}
                    style={{ height: `${normalizedHeight}%` }}
                    title={`${30 - i} days ago: ${successRate.toFixed(1)}% success rate`}
                  >
                    <div className="absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold opacity-0 group-hover:opacity-100 bg-black text-white px-1 py-0.5 rounded whitespace-nowrap">
                      {successRate.toFixed(0)}%
                    </div>
                  </div>
                  {i % 7 === 0 && (
                    <div className="text-xs font-bold text-gray-600 mt-1">
                      {i === 0 ? 'Today' : `${30 - i}d`}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
          <div className="flex justify-between items-center mt-3 text-xs">
            <span className="font-bold text-gray-600">30 days ago</span>
            <div className="flex items-center gap-2">
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-green-400 border border-black"></div>
                <span>80%+</span>
              </div>
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-blue-400 border border-black"></div>
                <span>70-80%</span>
              </div>
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-yellow-400 border border-black"></div>
                <span>60-70%</span>
              </div>
            </div>
            <span className="font-bold text-gray-600">Today</span>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/call-volume-analysis.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { UilPhone, UilChart, UilStar } from '@tooni/iconscout-unicons-react';

interface CallVolumeAnalysisProps {
  callsToday: number;
  callsThisWeek: number;
}

export default function CallVolumeAnalysis({ callsToday, callsThisWeek }: CallVolumeAnalysisProps) {
  return (
    <div className="bg-cyan-50 p-6 border-2 sm:border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] sm:shadow-[6px_6px_0_rgba(0,0,0,1)]">
      <div className="flex items-center gap-3 mb-6">
        <Button variant="header" size="header" className="bg-cyan-400">
          <UilPhone className="h-5 w-5 text-black" />
        </Button>
        <h3 className="font-black uppercase text-lg text-gray-800">CALL VOLUME INSIGHTS</h3>
      </div>
      
      {/* Hourly distribution */}
      <div className="mb-6">
        <div className="flex justify-between items-center mb-4">
          <span className="font-black text-lg text-gray-800">Peak Performance Hours</span>
          <div className="flex items-center gap-2">
            <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
            <span className="text-sm text-green-600 font-black">10AM-2PM OPTIMAL</span>
          </div>
        </div>
        <div className="relative">
          <div className="flex items-end gap-2 h-24 border-4 border-black p-3 bg-white shadow-[3px_3px_0_rgba(0,0,0,1)]">
            {Array.from({ length: 12 }, (_, i) => {
              const height = i >= 2 && i <= 6 ? 60 + Math.random() * 30 : 20 + Math.random() * 40;
              const isOptimal = i >= 2 && i <= 6;
              return (
                <div key={i} className="flex-1 flex flex-col items-center">
                  <div 
                    className={`w-full border-2 border-black ${isOptimal ? 'bg-green-400' : 'bg-blue-400'}`}
                    style={{ height: `${height}%` }}
                  ></div>
                  {isOptimal && <div className="text-xs font-bold text-green-600 mt-1">
                    <UilStar className="h-3 w-3" />
                  </div>}
                </div>
              );
            })}
          </div>
          <div className="flex justify-between text-sm font-bold text-gray-700 mt-2">
            <span>8AM</span>
            <span>12PM</span>
            <span>4PM</span>
            <span>8PM</span>
          </div>
        </div>
      </div>

      {/* Enhanced Daily trends */}
      <div className="space-y-4">
        <div className="bg-green-400 border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Button variant="subheader" size="icon" className="bg-white">
                <UilChart className="h-4 w-4 text-black" />
              </Button>
              <div>
                <div className="font-black text-lg text-black">TODAY'S PERFORMANCE</div>
                <div className="text-sm font-bold text-black/80">{callsToday} calls completed</div>
              </div>
            </div>
            <div className="text-right">
              <div className="text-2xl font-black text-black">+23%</div>
              <div className="text-sm font-bold text-black/80">vs yesterday</div>
            </div>
          </div>
        </div>
        
        <div className="bg-blue-400 border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3">
              <Button variant="subheader" size="icon" className="bg-white">
                <UilChart className="h-4 w-4 text-black" />
              </Button>
              <div>
                <div className="font-black text-lg text-white">WEEKLY TREND</div>
                <div className="text-sm font-bold text-white/90">{callsThisWeek} calls this week</div>
              </div>
            </div>
            <div className="text-right">
              <div className="text-2xl font-black text-white">+8%</div>
              <div className="text-sm font-bold text-white/90">vs last week</div>
            </div>
          </div>
          {/* Weekly trend line chart */}
          <div className="bg-white border-2 border-black p-2">
            <div className="flex items-end gap-1 h-16">
              {Array.from({ length: 7 }, (_, i) => {
                const baseHeight = 30;
                const variation = [10, 25, 35, 45, 55, 40, 50][i];
                return (
                  <div key={i} className="flex-1 flex flex-col items-center">
                    <div 
                      className="w-full bg-white border-2 border-black relative"
                      style={{ height: `${baseHeight + variation}%` }}
                    >
                      <div className="absolute top-0 left-0 right-0 bg-blue-600 h-full"></div>
                    </div>
                    <div className="text-xs font-bold text-black mt-1">
                      {['M', 'T', 'W', 'T', 'F', 'S', 'S'][i]}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/conversation-quality-analysis.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { UilUsersAlt, UilChart, UilStar } from '@tooni/iconscout-unicons-react';

interface QualityMetric {
  label: string;
  value: number;
  percentage: number;
  color: string;
  description: string;
}

interface ConversationQualityAnalysisProps {
  title?: string;
  bgColor?: string;
  iconBgColor?: string;
  metrics?: QualityMetric[];
}

export default function ConversationQualityAnalysis({
  title = "CONVERSATION QUALITY METRICS",
  bgColor = "bg-purple-50",
  iconBgColor = "bg-purple-400",
  metrics
}: ConversationQualityAnalysisProps) {
  
  const defaultMetrics: QualityMetric[] = [
    {
      label: "SCRIPT ADHERENCE",
      value: 96,
      percentage: 96,
      color: "green",
      description: "EXCELLENT"
    },
    {
      label: "OBJECTIVE COMPLETION",
      value: 84,
      percentage: 84,
      color: "blue",
      description: "STRONG"
    },
    {
      label: "CONVERSATION FLOW",
      value: 91,
      percentage: 91,
      color: "purple",
      description: "SMOOTH"
    },
    {
      label: "RESPONSE QUALITY",
      value: 88,
      percentage: 88,
      color: "orange",
      description: "GOOD"
    }
  ];

  const displayMetrics = metrics || defaultMetrics;
  return (
    <div className={`${bgColor} p-6 border-2 sm:border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] sm:shadow-[6px_6px_0_rgba(0,0,0,1)]`}>
      <div className="flex items-center gap-3 mb-6">
        <Button variant="header" size="header" className={iconBgColor}>
          <UilUsersAlt className="h-5 w-5 text-white" />
        </Button>
        <h3 className="font-black uppercase text-lg text-gray-800">{title}</h3>
      </div>
      
      <div className="space-y-5">
        {displayMetrics.map((metric, index) => (
          <div key={index} className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
            <div className="flex justify-between items-center mb-3">
              <div className="flex items-center gap-2">
                <div className={`w-4 h-4 bg-${metric.color}-400 border border-black`}></div>
                <span className="font-black text-sm">{metric.label}</span>
              </div>
              <span className={`text-lg font-black text-${metric.color}-600`}>{metric.value}%</span>
            </div>
            <div className="w-full bg-gray-300 border-2 border-black h-4">
              <div 
                className={`h-full bg-${metric.color}-400 flex items-center justify-end pr-2`} 
                style={{ width: `${metric.percentage}%` }}
              >
                <span className={`text-xs font-bold ${metric.color === 'orange' ? 'text-black' : 'text-white'}`}>
                  {metric.description}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Quality Trends Over Time */}
      <div className="mt-6 p-4 bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)]">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-purple-400">
            <UilChart className="h-3 w-3 text-white" />
          </Button>
          <div className="font-black text-sm">QUALITY TRENDS (LAST 14 DAYS)</div>
        </div>
        <div className="bg-gray-50 border-2 border-black p-3">
          <div className="flex items-end gap-1 h-20">
            {Array.from({ length: 14 }, (_, i) => {
              const qualityScore = 75 + Math.sin(i * 0.5) * 15 + Math.random() * 10;
              const normalizedHeight = (qualityScore - 60) / 40 * 100;
              const color = qualityScore > 90 ? 'bg-green-400' : qualityScore > 80 ? 'bg-blue-400' : qualityScore > 70 ? 'bg-yellow-400' : 'bg-red-400';
              return (
                <div key={i} className="flex-1 flex flex-col items-center">
                  <div 
                    className={`w-full border border-black ${color} relative group cursor-pointer`}
                    style={{ height: `${Math.max(normalizedHeight, 10)}%` }}
                    title={`Day ${i + 1}: ${qualityScore.toFixed(1)}%`}
                  >
                    <div className="absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-bold opacity-0 group-hover:opacity-100 bg-black text-white px-1 py-0.5 rounded">
                      {qualityScore.toFixed(0)}%
                    </div>
                  </div>
                  {i % 3 === 0 && (
                    <div className="text-xs font-bold text-gray-600 mt-1">
                      {Math.floor((14 - i) / 7) === 0 ? 'Today' : `${14 - i}d`}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
          <div className="flex justify-between items-center mt-3 text-xs">
            <span className="font-bold text-gray-600">14 days ago</span>
            <div className="flex items-center gap-2">
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-green-400 border border-black"></div>
                <span>90%+</span>
              </div>
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-blue-400 border border-black"></div>
                <span>80-89%</span>
              </div>
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-yellow-400 border border-black"></div>
                <span>70-79%</span>
              </div>
            </div>
            <span className="font-bold text-gray-600">Today</span>
          </div>
        </div>
      </div>

      {/* Enhanced Quality Score Distribution */}
      <div className="mt-6 p-4 bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)]">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-yellow-400">
            <UilChart className="h-3 w-3 text-black" />
          </Button>
          <div className="font-black text-sm">QUALITY SCORE DISTRIBUTION</div>
        </div>
        <div className="grid grid-cols-5 gap-3 text-center">
          <div>
            <div className="h-12 bg-red-400 border-2 border-black flex items-end shadow-[2px_2px_0_rgba(0,0,0,1)]">
              <div className="w-full bg-red-500 h-3"></div>
            </div>
            <div className="text-xs font-black mt-2 flex items-center justify-center gap-1">1-2 <UilStar className="h-3 w-3" /></div>
            <div className="text-xs font-bold text-red-600">2%</div>
          </div>
          <div>
            <div className="h-12 bg-yellow-400 border-2 border-black flex items-end shadow-[2px_2px_0_rgba(0,0,0,1)]">
              <div className="w-full bg-yellow-500 h-4"></div>
            </div>
            <div className="text-xs font-black mt-2 flex items-center justify-center gap-1">3-4 <UilStar className="h-3 w-3" /></div>
            <div className="text-xs font-bold text-yellow-600">8%</div>
          </div>
          <div>
            <div className="h-12 bg-blue-400 border-2 border-black flex items-end shadow-[2px_2px_0_rgba(0,0,0,1)]">
              <div className="w-full bg-blue-500 h-6"></div>
            </div>
            <div className="text-xs font-black mt-2 flex items-center justify-center gap-1">5-6 <UilStar className="h-3 w-3" /></div>
            <div className="text-xs font-bold text-blue-600">22%</div>
          </div>
          <div>
            <div className="h-12 bg-green-400 border-2 border-black flex items-end shadow-[2px_2px_0_rgba(0,0,0,1)]">
              <div className="w-full bg-green-500 h-8"></div>
            </div>
            <div className="text-xs font-black mt-2 flex items-center justify-center gap-1">7-8 <UilStar className="h-3 w-3" /></div>
            <div className="text-xs font-bold text-green-600">38%</div>
          </div>
          <div>
            <div className="h-12 bg-purple-400 border-2 border-black flex items-end shadow-[2px_2px_0_rgba(0,0,0,1)]">
              <div className="w-full bg-purple-500 h-9"></div>
            </div>
            <div className="text-xs font-black mt-2 flex items-center justify-center gap-1">9-10 <UilStar className="h-3 w-3" /></div>
            <div className="text-xs font-bold text-purple-600">30%</div>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/daily-performance-leaderboard.tsx
================================================
'use client';

import React from 'react';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';

interface Agent {
  id: string;
  name: string;
  status: string;
  calls: number;
  success: number;
  currentCall?: string | null;
}

interface DailyPerformanceLeaderboardProps {
  title?: string;
  bgColor?: string;
  badgeText?: string;
  badgeColor?: string;
  agents: Agent[];
  sortBy?: 'success' | 'calls';
  maxItems?: number;
}

export default function DailyPerformanceLeaderboard({
  title = "DAILY PERFORMANCE LEADERBOARD",
  bgColor = "bg-white",
  badgeText = "LIVE RANKINGS",
  badgeColor = "bg-purple-400 text-white",
  agents,
  sortBy = 'success',
  maxItems = 10
}: DailyPerformanceLeaderboardProps) {
  
  const sortedAgents = agents
    .sort((a, b) => b[sortBy] - a[sortBy])
    .slice(0, maxItems);

  const getRankStyle = (index: number) => {
    switch (index) {
      case 0:
        return {
          bg: "bg-yellow-50",
          badge: "bg-yellow-400 text-black"
        };
      case 1:
        return {
          bg: "bg-gray-50",
          badge: "bg-gray-400 text-white"
        };
      default:
        return {
          bg: "bg-gray-50",
          badge: "bg-orange-400 text-white"
        };
    }
  };

  return (
    <div className={`${bgColor} p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]`}>
      <div className="flex items-center justify-between mb-4">
        <h3 className="font-black uppercase text-sm text-gray-600">{title}</h3>
        <Badge className={`${badgeColor} border border-black font-bold uppercase text-xs`}>
          {badgeText}
        </Badge>
      </div>
      
      <div className="space-y-3">
        {sortedAgents.map((agent, index) => {
          const rankStyle = getRankStyle(index);
          return (
            <div key={agent.id} className={cn(
              "p-4 border-2 border-black relative",
              rankStyle.bg
            )}>
              {/* Rank Badge */}
              <div className="absolute -top-2 -left-2">
                <div className={cn(
                  "w-10 h-10 border-2 border-black flex items-center justify-center font-black text-sm shadow-[2px_2px_0_rgba(0,0,0,1)]",
                  rankStyle.badge
                )}>
                  #{index + 1}
                </div>
              </div>

              {/* Agent Info */}
              <div className="flex items-center justify-between ml-6">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-blue-400 border-2 border-black flex items-center justify-center font-black text-white text-xs">
                    AI
                  </div>
                  <div>
                    <div className="font-black text-sm">{agent.name}</div>
                    <div className="text-xs text-gray-600">Agent ID: {agent.id}</div>
                  </div>
                </div>
                
                <div className="flex items-center gap-4">
                  <div className="text-center">
                    <div className="text-lg font-black text-blue-600">{agent.calls}</div>
                    <div className="text-xs text-gray-600 font-bold">CALLS</div>
                  </div>
                  <div className="text-center">
                    <div className="text-lg font-black text-green-600">{agent.success}%</div>
                    <div className="text-xs text-gray-600 font-bold">SUCCESS</div>
                  </div>
                  <Badge className={cn(
                    "border border-black font-bold uppercase text-xs",
                    agent.status === 'active' ? "bg-green-400 text-black" : 
                    agent.status === 'paused' ? "bg-yellow-400 text-black" : "bg-gray-400 text-white"
                  )}>
                    {agent.status}
                  </Badge>
                </div>
              </div>

              {/* Performance Bar */}
              <div className="mt-3 ml-6">
                <div className="flex justify-between items-center mb-1">
                  <span className="text-xs font-bold text-gray-600">PERFORMANCE</span>
                  <span className="text-xs font-bold">{agent.success}%</span>
                </div>
                <div className="w-full bg-gray-300 border border-black h-2">
                  <div 
                    className={cn(
                      "h-full", 
                      agent.success >= 90 ? "bg-green-400" : 
                      agent.success >= 80 ? "bg-yellow-400" : "bg-red-400"
                    )} 
                    style={{ width: `${agent.success}%` }}
                  />
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/live-agent-activity.tsx
================================================
'use client';

import React from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { UilCircle, UilChart, UilPhone, UilMicrophone, UilUsers, UilBolt, UilEye, UilPlay } from '@tooni/iconscout-unicons-react';

interface ActivityItem {
  id: string;
  agentName: string;
  action: string;
  target: string;
  status: {
    text: string;
    color: string;
    bgColor: string;
  };
  timestamp: string;
  pulseColor: string;
}

interface LiveAgentActivityProps {
  title?: string;
  bgColor?: string;
  activities?: ActivityItem[];
  maxHeight?: string;
  showTimestamp?: boolean;
}

export default function LiveAgentActivity({
  title = "LIVE AGENT ACTIVITY",
  bgColor = "bg-white",
  activities,
  maxHeight = "max-h-64",
  showTimestamp = true
}: LiveAgentActivityProps) {
  
  const defaultActivities: ActivityItem[] = [
    {
      id: '1',
      agentName: 'AI Agent Alpha',
      action: 'successfully booked demo with',
      target: 'Tech Solutions Inc',
      status: {
        text: 'DEMO SCHEDULED',
        color: 'text-black',
        bgColor: 'bg-green-400'
      },
      timestamp: '30s ago',
      pulseColor: 'bg-green-500'
    },
    {
      id: '2',
      agentName: 'AI Agent Beta',
      action: 'handling objection from',
      target: 'Marketing Director',
      status: {
        text: 'NEGOTIATING',
        color: 'text-white',
        bgColor: 'bg-blue-400'
      },
      timestamp: '1m ago',
      pulseColor: 'bg-blue-500'
    },
    {
      id: '3',
      agentName: 'AI Agent Gamma',
      action: 'completed discovery call with',
      target: 'Startup Founder',
      status: {
        text: 'FOLLOW-UP REQUIRED',
        color: 'text-black',
        bgColor: 'bg-yellow-400'
      },
      timestamp: '2m ago',
      pulseColor: 'bg-yellow-500'
    },
    {
      id: '4',
      agentName: 'AI Agent Delta',
      action: 'escalated technical question to',
      target: 'Sales Engineer',
      status: {
        text: 'ESCALATED',
        color: 'text-white',
        bgColor: 'bg-purple-400'
      },
      timestamp: '3m ago',
      pulseColor: 'bg-purple-500'
    },
    {
      id: '5',
      agentName: 'AI Agent Alpha',
      action: 'left voicemail for',
      target: 'Enterprise Client',
      status: {
        text: 'AWAITING CALLBACK',
        color: 'text-white',
        bgColor: 'bg-orange-400'
      },
      timestamp: '5m ago',
      pulseColor: 'bg-orange-500'
    }
  ];

  const displayActivities = activities || defaultActivities;

  return (
    <div className={`${bgColor} p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]`}>
      <div className="flex items-center gap-3 mb-4">
        <Button variant="header" size="header">
          <UilChart className="h-4 w-4" />
        </Button>
        <h3 className="font-black uppercase text-sm text-gray-600">{title}</h3>
      </div>
      <div className={`space-y-3 ${maxHeight} overflow-y-auto`}>
        {displayActivities.map((activity) => (
          <div key={activity.id} className="flex items-center gap-3 p-3 bg-gray-50 border-2 border-black">
            <div className={`w-2 h-2 ${activity.pulseColor} rounded-full animate-pulse`}></div>
            <span className="font-bold text-sm">{activity.agentName}</span>
            <span className="text-sm">{activity.action}</span>
            <span className="font-bold text-sm">{activity.target}</span>
            <Badge className={`${activity.status.bgColor} ${activity.status.color} border border-black font-bold uppercase text-xs`}>
              {activity.status.text}
            </Badge>
            {showTimestamp && (
              <span className="text-xs text-gray-600 ml-auto">{activity.timestamp}</span>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/live-call-monitor.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { UilChart } from '@tooni/iconscout-unicons-react';

interface LiveCallMonitorProps {
  agents?: any[];
  swarmData?: any;
}

export default function LiveCallMonitor({ agents, swarmData }: LiveCallMonitorProps) {
  return (
    <div className="bg-green-50 p-6 border-2 sm:border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] sm:shadow-[6px_6px_0_rgba(0,0,0,1)]">
      <div className="flex items-center gap-3 mb-6">
        <Button variant="header" size="header" className="bg-green-400">
          <div className="w-3 h-3 bg-white rounded-full animate-pulse"></div>
        </Button>
        <h3 className="font-black uppercase text-lg text-gray-800">LIVE CALL MONITOR</h3>
      </div>
      
      <div className="space-y-4">
        <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
            <div className="flex-1">
              <div className="font-black text-sm">AI Agent Alpha → TechCorp CEO</div>
              <div className="text-xs text-gray-600">Discovery phase • 2m 34s elapsed</div>
            </div>
            <div className="bg-green-400 border-2 border-black px-2 py-1 text-xs font-black">LIVE</div>
          </div>
          <div className="w-full bg-gray-300 border border-black h-2">
            <div className="h-full bg-green-400 animate-pulse" style={{ width: '45%' }}></div>
          </div>
        </div>
        
        <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-4 h-4 bg-blue-500 rounded-full animate-pulse"></div>
            <div className="flex-1">
              <div className="font-black text-sm">AI Agent Beta → Marketing Dir</div>
              <div className="text-xs text-gray-600">Objection handling • 4m 12s elapsed</div>
            </div>
            <div className="bg-blue-400 border-2 border-black px-2 py-1 text-xs font-black text-white">NEGO</div>
          </div>
          <div className="w-full bg-gray-300 border border-black h-2">
            <div className="h-full bg-blue-400 animate-pulse" style={{ width: '72%' }}></div>
          </div>
        </div>
        
        <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-4 h-4 bg-purple-500 rounded-full animate-pulse"></div>
            <div className="flex-1">
              <div className="font-black text-sm">AI Agent Gamma → Enterprise VP</div>
              <div className="text-xs text-gray-600">Closing phase • 6m 45s elapsed</div>
            </div>
            <div className="bg-purple-400 border-2 border-black px-2 py-1 text-xs font-black text-white">CLOSE</div>
          </div>
          <div className="w-full bg-gray-300 border border-black h-2">
            <div className="h-full bg-purple-400 animate-pulse" style={{ width: '91%' }}></div>
          </div>
        </div>
      </div>

      {/* Real-time Activity Timeline */}
      <div className="mt-6 bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-green-400">
            <UilChart className="h-3 w-3 text-black" />
          </Button>
          <div className="font-black text-sm">ACTIVITY TIMELINE (LAST 60 MINUTES)</div>
        </div>
        <div className="bg-gray-50 border-2 border-black p-3">
          <div className="flex items-end gap-0.5 h-16">
            {Array.from({ length: 60 }, (_, i) => {
              const activity = Math.sin(i * 0.1) * 30 + 40 + Math.random() * 20;
              const normalizedHeight = Math.max(activity / 100 * 100, 5);
              const color = activity > 70 ? 'bg-green-400' : activity > 50 ? 'bg-blue-400' : activity > 30 ? 'bg-yellow-400' : 'bg-gray-400';
              return (
                <div key={i} className="flex-1 flex flex-col items-center">
                  <div 
                    className={`w-full border-r border-black last:border-r-0 ${color}`}
                    style={{ height: `${normalizedHeight}%` }}
                    title={`${60 - i} min ago: ${activity.toFixed(0)}% activity`}
                  ></div>
                </div>
              );
            })}
          </div>
          <div className="flex justify-between items-center mt-3 text-xs">
            <span className="font-bold text-gray-600">60m ago</span>
            <div className="flex items-center gap-3">
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-green-400 border border-black"></div>
                <span>High Activity</span>
              </div>
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-blue-400 border border-black"></div>
                <span>Medium</span>
              </div>
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-yellow-400 border border-black"></div>
                <span>Low</span>
              </div>
            </div>
            <span className="font-bold text-gray-600">Now</span>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/live-transcript-monitor.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import { UilCommentAlt, UilChart, UilBrain } from '@tooni/iconscout-unicons-react';

interface TranscriptEntry {
  timestamp: string;
  speaker: 'agent' | 'customer';
  text: string;
  sentiment?: 'positive' | 'negative' | 'neutral';
}

interface LiveTranscriptMonitorProps {
  title?: string;
  bgColor?: string;
  transcript?: TranscriptEntry[];
  isLive?: boolean;
}

export default function LiveTranscriptMonitor({
  title = "LIVE CONVERSATION TRANSCRIPT",
  bgColor = "bg-green-50",
  transcript,
  isLive = true
}: LiveTranscriptMonitorProps) {
  
  const defaultTranscript: TranscriptEntry[] = [
    {
      timestamp: '2:15',
      speaker: 'agent',
      text: 'Our AI solution can reduce your call center costs by up to 40% while improving customer satisfaction.',
      sentiment: 'positive'
    },
    {
      timestamp: '2:16',
      speaker: 'customer',
      text: 'That sounds interesting, but how does it handle complex customer issues?',
      sentiment: 'neutral'
    },
    {
      timestamp: '2:17',
      speaker: 'agent',
      text: 'Great question! Our AI agents are trained on thousands of real conversations and can escalate to human agents when needed.',
      sentiment: 'positive'
    },
    {
      timestamp: '2:18',
      speaker: 'customer',
      text: 'What about the implementation timeline and cost?',
      sentiment: 'neutral'
    }
  ];

  const displayTranscript = transcript || defaultTranscript;

  return (
    <div className={`${bgColor} p-6 border-2 sm:border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] sm:shadow-[6px_6px_0_rgba(0,0,0,1)]`}>
      <div className="flex items-center gap-3 mb-6">
        <Button variant="header" size="header" className="bg-green-400">
          <UilCommentAlt className="h-5 w-5 text-black" />
        </Button>
        <h3 className="font-black uppercase text-lg text-gray-800">{title}</h3>
        {isLive && (
          <div className="flex items-center gap-2 ml-auto">
            <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
            <span className="text-xs font-bold text-green-600">STREAMING LIVE</span>
          </div>
        )}
      </div>
      
      {/* Live Transcript Section */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="max-h-80 overflow-y-auto space-y-3 border-2 border-gray-200 p-3 bg-gray-50">
          {displayTranscript.map((entry, index) => (
            <div 
              key={index}
              className="bg-white border-2 border-black p-3 shadow-[2px_2px_0_rgba(0,0,0,1)]"
            >
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-3">
                  <div className={cn(
                    "w-8 h-8 border-2 border-black rounded-full flex items-center justify-center text-xs font-black text-white",
                    entry.speaker === 'agent' ? 'bg-blue-400' : 'bg-green-400'
                  )}>
                    {entry.speaker.charAt(0).toUpperCase()}
                  </div>
                  <div>
                    <div className="font-black text-sm uppercase">{entry.speaker === 'agent' ? 'AI AGENT' : 'PROSPECT'}</div>
                    <div className="text-xs text-gray-600">{entry.timestamp}</div>
                  </div>
                </div>
                {entry.sentiment && (
                  <Badge className={cn(
                    "border border-black font-bold uppercase text-xs",
                    entry.sentiment === 'positive' ? 'bg-green-400 text-black' :
                    entry.sentiment === 'negative' ? 'bg-red-400 text-white' :
                    'bg-gray-400 text-black'
                  )}>
                    {entry.sentiment}
                  </Badge>
                )}
              </div>
              <div className="bg-gray-50 border-2 border-gray-300 p-3">
                <p className="text-sm leading-relaxed text-gray-900">{entry.text}</p>
              </div>
            </div>
          ))}
          
          {/* Live indicator at bottom */}
          {isLive && (
            <div className="flex items-center justify-center gap-2 py-2">
              <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
              <span className="text-xs font-bold text-gray-600">CONVERSATION IN PROGRESS</span>
              <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
            </div>
          )}
        </div>
      </div>

      {/* Real-time Sentiment Analysis */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-purple-400">
            <UilBrain className="h-3 w-3 text-white" />
          </Button>
          <div className="font-black text-sm">REAL-TIME SENTIMENT ANALYSIS</div>
        </div>
        <div className="grid grid-cols-3 gap-3">
          <div className="text-center">
            <div className="text-2xl font-black text-green-600">72%</div>
            <div className="text-xs text-gray-600 font-bold">POSITIVE</div>
            <div className="w-full bg-gray-300 border border-black h-2 mt-1">
              <div className="h-full bg-green-400" style={{ width: '72%' }}></div>
            </div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-black text-gray-600">23%</div>
            <div className="text-xs text-gray-600 font-bold">NEUTRAL</div>
            <div className="w-full bg-gray-300 border border-black h-2 mt-1">
              <div className="h-full bg-gray-400" style={{ width: '23%' }}></div>
            </div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-black text-red-600">5%</div>
            <div className="text-xs text-gray-600 font-bold">NEGATIVE</div>
            <div className="w-full bg-gray-300 border border-black h-2 mt-1">
              <div className="h-full bg-red-400" style={{ width: '5%' }}></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/platform-insights.tsx
================================================
'use client';

import React from 'react';

interface PlatformInsightsProps {
  swarmData: any;
  swarmDetails: any;
}

export default function PlatformInsights({ swarmData, swarmDetails }: PlatformInsightsProps) {
  return (
    <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
      <h3 className="font-black uppercase text-sm mb-4 text-gray-600">PLATFORM INSIGHTS</h3>
      
      <div className="space-y-4">
        <div className="p-3 bg-green-50 border-2 border-green-300">
          <div className="flex items-center gap-2 mb-2">
            <div className="w-4 h-4 bg-green-400 border border-black"></div>
            <span className="font-bold text-sm text-green-800">OPTIMAL PERFORMANCE</span>
          </div>
          <p className="text-xs text-green-700">Swarm is operating at 96% efficiency with consistent quality scores above platform average.</p>
        </div>
        
        <div className="p-3 bg-blue-50 border-2 border-blue-300">
          <div className="flex items-center gap-2 mb-2">
            <div className="w-4 h-4 bg-blue-400 border border-black"></div>
            <span className="font-bold text-sm text-blue-800">CONVERSATION QUALITY</span>
          </div>
          <p className="text-xs text-blue-700">Agent responses maintain natural flow with 91% adherence to conversation guidelines.</p>
        </div>
        
        <div className="p-3 bg-purple-50 border-2 border-purple-300">
          <div className="flex items-center gap-2 mb-2">
            <div className="w-4 h-4 bg-purple-400 border border-black"></div>
            <span className="font-bold text-sm text-purple-800">SCALING RECOMMENDATION</span>
          </div>
          <p className="text-xs text-purple-700">Performance metrics indicate readiness for 2x agent scaling during peak hours.</p>
        </div>
        
        <div className="p-3 bg-yellow-50 border-2 border-yellow-300">
          <div className="flex items-center gap-2 mb-2">
            <div className="w-4 h-4 bg-yellow-400 border border-black"></div>
            <span className="font-bold text-sm text-yellow-800">OPTIMIZATION OPPORTUNITY</span>
          </div>
          <p className="text-xs text-yellow-700">Consider adjusting script timing during objection handling phase for improved conversion.</p>
        </div>
      </div>

      {/* Key Metrics Summary */}
      <div className="mt-4 p-3 bg-gray-50 border-2 border-black">
        <div className="font-bold text-sm mb-2">Today's Platform Metrics</div>
        <div className="grid grid-cols-2 gap-3 text-xs">
          <div className="flex justify-between">
            <span className="font-bold">Calls Processed:</span>
            <span>{swarmDetails.performance.callsToday}</span>
          </div>
          <div className="flex justify-between">
            <span className="font-bold">Quality Score:</span>
            <span className="text-green-600 font-bold">{swarmDetails.performance.qualityScore}/100</span>
          </div>
          <div className="flex justify-between">
            <span className="font-bold">Objectives Met:</span>
            <span className="text-blue-600 font-bold">{Math.floor(swarmData.totalCalls * 0.32)}</span>
          </div>
          <div className="flex justify-between">
            <span className="font-bold">Platform Uptime:</span>
            <span className="text-green-600 font-bold">99.8%</span>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/real-time-analytics-monitor.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import { 
  UilChart, 
  UilBrain, 
  UilBullseye, 
  UilVolumeUp, 
  UilVolumeMute,
  UilTrophy,
  UilLocationPoint
} from '@tooni/iconscout-unicons-react';

interface CallMetric {
  label: string;
  value: string;
  color: string;
}

interface ConversationPhase {
  id: string;
  title: string;
  description: string;
  status: 'completed' | 'active' | 'pending';
  duration?: string;
}

interface EngagementIndicator {
  label: string;
  level: string;
  percentage: number;
  color: string;
}

interface OutcomePrediction {
  title: string;
  percentage: number;
  description: string;
  color: string;
  bgColor: string;
}

interface RealTimeAnalyticsMonitorProps {
  title?: string;
  bgColor?: string;
  callMetrics?: CallMetric[];
  conversationPhases?: ConversationPhase[];
  engagementIndicators?: EngagementIndicator[];
  outcomePredictions?: OutcomePrediction[];
  isMuted?: boolean;
  volume?: number;
  onMuteToggle?: () => void;
  onVolumeChange?: (volume: number) => void;
}

export default function RealTimeAnalyticsMonitor({
  title = "REAL-TIME CALL ANALYTICS",
  bgColor = "bg-yellow-50",
  callMetrics,
  conversationPhases,
  engagementIndicators,
  outcomePredictions,
  isMuted = false,
  volume = 75,
  onMuteToggle,
  onVolumeChange
}: RealTimeAnalyticsMonitorProps) {
  
  const defaultCallMetrics: CallMetric[] = [
    { label: "CALL DURATION", value: "4:23", color: "green" },
    { label: "WORDS/MIN", value: "142", color: "blue" },
    { label: "TALK TIME", value: "67%", color: "purple" },
    { label: "KEY MOMENTS", value: "3", color: "yellow" }
  ];

  const defaultConversationPhases: ConversationPhase[] = [
    {
      id: '1',
      title: 'Opening & Rapport Building',
      description: '✓ Completed - 2:15 duration - High engagement',
      status: 'completed',
      duration: '2:15'
    },
    {
      id: '2',
      title: 'Needs Discovery & Pain Points',
      description: '⚡ Active - 1:46 duration - Good responses',
      status: 'active',
      duration: '1:46'
    },
    {
      id: '3',
      title: 'Solution Presentation',
      description: '⏳ Pending - Ready to transition',
      status: 'pending'
    }
  ];

  const defaultEngagementIndicators: EngagementIndicator[] = [
    { label: "Voice Energy Level", level: "HIGH", percentage: 82, color: "green" },
    { label: "Response Quality", level: "GOOD", percentage: 76, color: "blue" },
    { label: "Question Frequency", level: "MEDIUM", percentage: 64, color: "purple" },
    { label: "Interest Signals", level: "STRONG", percentage: 88, color: "yellow" }
  ];

  const defaultOutcomePredictions: OutcomePrediction[] = [
    {
      title: "CONVERSION PROBABILITY",
      percentage: 73,
      description: "High likelihood of positive outcome",
      color: "green",
      bgColor: "bg-green-50"
    },
    {
      title: "DEMO ACCEPTANCE",
      percentage: 89,
      description: "Very likely to agree to demo",
      color: "blue",
      bgColor: "bg-blue-50"
    },
    {
      title: "IMMEDIATE CLOSE",
      percentage: 45,
      description: "May need nurturing sequence",
      color: "yellow",
      bgColor: "bg-yellow-50"
    }
  ];

  const displayCallMetrics = callMetrics || defaultCallMetrics;
  const displayConversationPhases = conversationPhases || defaultConversationPhases;
  const displayEngagementIndicators = engagementIndicators || defaultEngagementIndicators;
  const displayOutcomePredictions = outcomePredictions || defaultOutcomePredictions;

  return (
    <div className={`${bgColor} p-6 border-2 sm:border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] sm:shadow-[6px_6px_0_rgba(0,0,0,1)]`}>
      <div className="flex items-center gap-3 mb-6">
        <Button variant="header" size="header" className="bg-yellow-400">
          <UilChart className="h-5 w-5 text-black" />
        </Button>
        <h3 className="font-black uppercase text-lg text-gray-800">{title}</h3>
      </div>
      
      {/* Live Call Metrics */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-green-400">
            <UilTrophy className="h-3 w-3 text-black" />
          </Button>
          <div className="font-black text-sm">LIVE CALL METRICS</div>
        </div>
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
          {displayCallMetrics.map((metric, index) => (
            <div key={index} className="text-center">
              <div className={`text-2xl font-black text-${metric.color}-600`}>{metric.value}</div>
              <div className="text-xs text-gray-600 font-bold">{metric.label}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Conversation Flow Analysis */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-blue-400">
            <UilBrain className="h-3 w-3 text-white" />
          </Button>
          <div className="font-black text-sm">CONVERSATION FLOW ANALYSIS</div>
        </div>
        <div className="space-y-3">
          {displayConversationPhases.map((phase, index) => (
            <div key={phase.id} className={cn(
              "flex items-center gap-4 p-3 border-2 border-black",
              phase.status === 'completed' ? "bg-green-50" :
              phase.status === 'active' ? "bg-blue-50" : "bg-gray-50"
            )}>
              <div className={cn(
                "w-8 h-8 border-2 border-black flex items-center justify-center text-white font-black text-xs",
                phase.status === 'completed' ? "bg-green-400" :
                phase.status === 'active' ? "bg-blue-400" : "bg-gray-400"
              )}>
                {index + 1}
              </div>
              <div className="flex-1">
                <div className="font-bold text-sm">{phase.title}</div>
                <div className="text-xs text-gray-600">{phase.description}</div>
              </div>
              <div className={cn(
                "px-2 py-1 border border-black text-xs font-bold uppercase",
                phase.status === 'completed' ? "bg-green-400 text-black" :
                phase.status === 'active' ? "bg-blue-400 text-white" : "bg-gray-400 text-white"
              )}>
                {phase.status === 'completed' ? "COMPLETED" :
                 phase.status === 'active' ? "ACTIVE" : "PENDING"}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Prospect Engagement Indicators */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-purple-400">
            <UilBullseye className="h-3 w-3 text-white" />
          </Button>
          <div className="font-black text-sm">PROSPECT ENGAGEMENT INDICATORS</div>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {displayEngagementIndicators.map((indicator, index) => (
            <div key={index}>
              <div className="flex items-center justify-between mb-2">
                <span className="font-bold text-sm">{indicator.label}</span>
                <span className={`text-sm font-black text-${indicator.color}-600`}>{indicator.level}</span>
              </div>
              <div className="w-full bg-gray-300 border-2 border-black h-3">
                <div 
                  className={`h-full bg-${indicator.color}-400`} 
                  style={{ width: `${indicator.percentage}%` }}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* AI Outcome Predictions */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-orange-400">
            <UilLocationPoint className="h-3 w-3 text-black" />
          </Button>
          <div className="font-black text-sm">AI OUTCOME PREDICTIONS</div>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
          {displayOutcomePredictions.map((prediction, index) => (
            <div key={index} className={cn("text-center p-3 border-2", `${prediction.bgColor} border-${prediction.color}-300`)}>
              <div className={`text-2xl font-black text-${prediction.color}-600`}>{prediction.percentage}%</div>
              <div className="text-xs text-gray-600 font-bold">{prediction.title}</div>
              <div className={`text-xs text-${prediction.color}-700 mt-1`}>{prediction.description}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Monitor Controls */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
        <div className="flex items-center gap-2 mb-3">
          <Button variant="subheader" size="icon" className="bg-gray-400">
            <UilVolumeUp className="h-3 w-3 text-white" />
          </Button>
          <div className="font-black text-sm">MONITOR CONTROLS</div>
        </div>
        <div className="flex flex-wrap items-center gap-2 sm:gap-4">
          <Button
            size="sm"
            variant="reverse"
            className="px-3 py-2"
            onClick={onMuteToggle}
          >
            {isMuted ? <UilVolumeMute className="h-4 w-4 mr-1" /> : <UilVolumeUp className="h-4 w-4 mr-1" />}
            {isMuted ? "MUTED" : "AUDIO"}
          </Button>

          <div className="flex items-center gap-2">
            <span className="text-xs font-bold">VOLUME</span>
            <div 
              className="w-20 h-3 bg-gray-300 border-2 border-black relative cursor-pointer"
              onClick={(e) => {
                if (onVolumeChange) {
                  const rect = e.currentTarget.getBoundingClientRect();
                  const x = e.clientX - rect.left;
                  const newVolume = Math.round((x / rect.width) * 100);
                  onVolumeChange(Math.max(0, Math.min(100, newVolume)));
                }
              }}
            >
              <div 
                className="absolute left-0 top-0 h-full bg-blue-400" 
                style={{ width: `${isMuted ? 0 : volume}%` }}
              ></div>
            </div>
            <span className="text-xs font-bold">{isMuted ? 0 : volume}%</span>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/recent-calls-table.tsx
================================================
'use client';

import React from 'react';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';

interface RecentCall {
  time: string;
  prospect: string;
  outcome: string;
  agent: string;
}

interface RecentCallsTableProps {
  recentCalls: RecentCall[];
}

export default function RecentCallsTable({ recentCalls }: RecentCallsTableProps) {
  return (
    <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
      <h3 className="font-black uppercase text-sm mb-4 text-gray-600">RECENT CALL OUTCOMES</h3>
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="border-b-2 border-black bg-gray-50">
              <th className="text-left p-2 font-black uppercase text-xs">TIME</th>
              <th className="text-left p-2 font-black uppercase text-xs">PROSPECT</th>
              <th className="text-center p-2 font-black uppercase text-xs">OUTCOME</th>
              <th className="text-center p-2 font-black uppercase text-xs">AGENT</th>
            </tr>
          </thead>
          <tbody>
            {recentCalls.slice(0, 8).map((call, index) => (
              <tr key={index} className={cn("border-b border-gray-300", index % 2 === 0 ? "bg-white" : "bg-gray-50")}>
                <td className="p-2 font-medium text-xs">{call.time}</td>
                <td className="p-2 font-medium text-xs">{call.prospect}</td>
                <td className="p-2 text-center">
                  <Badge className={cn(
                    "border border-black font-bold uppercase text-xs",
                    call.outcome === 'Demo Scheduled' ? "bg-green-400 text-black" :
                    call.outcome === 'Follow-up Needed' ? "bg-yellow-400 text-black" :
                    "bg-gray-400 text-white"
                  )}>
                    {call.outcome}
                  </Badge>
                </td>
                <td className="p-2 text-center font-medium text-xs">{call.agent}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/supervisor-controls-monitor.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import { 
  UilUserCheck, 
  UilHeadphones, 
  UilMicrophone, 
  UilExchange, 
  UilCircle, 
  UilEdit, 
  UilSquare,
  UilLocationPoint,
  UilShield,
  UilChart
} from '@tooni/iconscout-unicons-react';

interface PerformanceMetric {
  label: string;
  value: number;
  unit: string;
  color: string;
}

interface CoachingRecommendation {
  id: string;
  type: 'success' | 'warning' | 'info';
  title: string;
  description: string;
  bgColor: string;
  iconColor: string;
}

interface SupervisorControlsMonitorProps {
  title?: string;
  bgColor?: string;
  performanceMetrics?: PerformanceMetric[];
  coachingRecommendations?: CoachingRecommendation[];
}

export default function SupervisorControlsMonitor({
  title = "LIVE CALL INTERVENTION & CONTROL",
  bgColor = "bg-orange-50",
  performanceMetrics,
  coachingRecommendations
}: SupervisorControlsMonitorProps) {
  
  const defaultPerformanceMetrics: PerformanceMetric[] = [
    { label: "ADHERENCE", value: 94, unit: "%", color: "green" },
    { label: "CONFIDENCE", value: 87, unit: "%", color: "blue" },
    { label: "QUALITY", value: 91, unit: "%", color: "purple" },
    { label: "ENGAGEMENT", value: 78, unit: "%", color: "yellow" }
  ];

  const defaultCoachingRecommendations: CoachingRecommendation[] = [
    {
      id: '1',
      type: 'success',
      title: 'EXCELLENT RAPPORT BUILDING',
      description: 'AI agent is successfully building trust and connection with prospect. Maintain current approach.',
      bgColor: 'bg-green-50',
      iconColor: 'bg-green-400'
    },
    {
      id: '2',
      type: 'warning',
      title: 'SUGGEST PAUSE FOR OBJECTION',
      description: 'Prospect may have unspoken concerns. Consider prompting AI to ask clarifying questions.',
      bgColor: 'bg-yellow-50',
      iconColor: 'bg-yellow-400'
    },
    {
      id: '3',
      type: 'info',
      title: 'READY FOR DEMO TRANSITION',
      description: 'High engagement detected. AI should transition to product demonstration phase.',
      bgColor: 'bg-blue-50',
      iconColor: 'bg-blue-400'
    }
  ];

  const displayMetrics = performanceMetrics || defaultPerformanceMetrics;
  const displayRecommendations = coachingRecommendations || defaultCoachingRecommendations;

  return (
    <div className={`${bgColor} p-6 border-2 sm:border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] sm:shadow-[6px_6px_0_rgba(0,0,0,1)]`}>
      <div className="flex items-center gap-3 mb-6">
        <Button variant="header" size="header" className="bg-orange-400">
          <UilUserCheck className="h-5 w-5 text-black" />
        </Button>
        <h3 className="font-black uppercase text-lg text-gray-800">{title}</h3>
      </div>
      
      {/* Emergency Controls */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-red-400">
            <UilShield className="h-3 w-3 text-white" />
          </Button>
          <div className="font-black text-sm">LIVE CALL INTERVENTION</div>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
          <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-yellow-400 text-black flex items-center justify-center">
            <UilHeadphones className="h-4 w-4 mr-2" />
            COACH AI AGENT
          </Button>
          <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-blue-400 text-white flex items-center justify-center">
            <UilMicrophone className="h-4 w-4 mr-2" />
            JOIN CALL
          </Button>
          <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-orange-400 text-black flex items-center justify-center">
            <UilExchange className="h-4 w-4 mr-2" />
            TRANSFER CALL
          </Button>
          <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-purple-400 text-white flex items-center justify-center">
            <UilCircle className="h-4 w-4 mr-2" />
            START RECORDING
          </Button>
          <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-cyan-400 text-black flex items-center justify-center">
            <UilEdit className="h-4 w-4 mr-2" />
            ADD LIVE NOTE
          </Button>
          <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-red-400 text-white flex items-center justify-center">
            <UilSquare className="h-4 w-4 mr-2" />
            END CALL
          </Button>
        </div>
      </div>

      {/* AI Agent Performance */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-purple-400">
            <UilChart className="h-3 w-3 text-white" />
          </Button>
          <div className="font-black text-sm">REAL-TIME AI PERFORMANCE</div>
        </div>
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
          {displayMetrics.map((metric, index) => (
            <div key={index} className="text-center">
              <div className={`text-2xl font-black text-${metric.color}-600`}>{metric.value}{metric.unit}</div>
              <div className="text-xs text-gray-600 font-bold">{metric.label}</div>
              <div className="w-full bg-gray-300 border border-black h-2 mt-1">
                <div className={`h-full bg-${metric.color}-400`} style={{ width: `${metric.value}%` }}></div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Live Coaching Suggestions */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-cyan-400">
            <UilHeadphones className="h-3 w-3 text-black" />
          </Button>
          <div className="font-black text-sm">AI COACHING RECOMMENDATIONS</div>
        </div>
        <div className="space-y-3">
          {displayRecommendations.map((recommendation) => (
            <div key={recommendation.id} className={`p-3 ${recommendation.bgColor} border-2 border-${recommendation.type === 'success' ? 'green' : recommendation.type === 'warning' ? 'yellow' : 'blue'}-300`}>
              <div className="flex items-center gap-2 mb-2">
                <div className={`w-4 h-4 ${recommendation.iconColor} border border-black`}></div>
                <span className={`font-bold text-sm text-${recommendation.type === 'success' ? 'green' : recommendation.type === 'warning' ? 'yellow' : 'blue'}-800`}>
                  {recommendation.title}
                </span>
              </div>
              <p className={`text-xs text-${recommendation.type === 'success' ? 'green' : recommendation.type === 'warning' ? 'yellow' : 'blue'}-700`}>
                {recommendation.description}
              </p>
            </div>
          ))}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-gray-400">
            <UilLocationPoint className="h-3 w-3 text-white" />
          </Button>
          <div className="font-black text-sm">QUICK SUPERVISOR ACTIONS</div>
        </div>
        <div className="grid grid-cols-2 gap-3">
          <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-gray-100 text-black border-2 border-black">
            <UilLocationPoint className="h-4 w-4 mr-2" />
            BOOKMARK MOMENT
          </Button>
          <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-gray-100 text-black border-2 border-black">
            <UilEdit className="h-4 w-4 mr-2" />
            FLAG FOR REVIEW
          </Button>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/analytics/system-settings-monitor.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import { 
  UilCog, 
  UilShield, 
  UilDollarAlt, 
  UilStar,
  UilCircle,
  UilSquare,
  UilExchange,
  UilEdit,
  UilCheck,
  UilServer
} from '@tooni/iconscout-unicons-react';

interface ServiceStatus {
  name: string;
  provider: string;
  description: string;
  status: string;
  statusColor: string;
}

interface CostMetric {
  label: string;
  cost: string;
  description: string;
  color: string;
}

interface PremiumFeature {
  name: string;
  status: 'active' | 'premium' | 'limited';
  description: string;
  usage?: {
    current: number;
    total: number;
    percentage: number;
  };
  color: string;
  bgColor: string;
}

interface ComplianceControl {
  name: string;
  description: string;
  enabled: boolean;
}

interface SystemSettingsMonitorProps {
  title?: string;
  bgColor?: string;
  serviceStatuses?: ServiceStatus[];
  costMetrics?: CostMetric[];
  premiumFeatures?: PremiumFeature[];
  complianceControls?: ComplianceControl[];
  callDuration?: number;
  qualityScore?: number;
  complianceStatus?: string;
}

export default function SystemSettingsMonitor({
  title = "SYSTEM CONFIGURATION & MONITORING",
  bgColor = "bg-gray-50",
  serviceStatuses,
  costMetrics,
  premiumFeatures,
  complianceControls,
  callDuration = 263,
  qualityScore = 94,
  complianceStatus = "PASS"
}: SystemSettingsMonitorProps) {
  
  const defaultServiceStatuses: ServiceStatus[] = [
    {
      name: "SIP Provider",
      provider: "Telnyx",
      description: "Voice carrier service",
      status: "Connected",
      statusColor: "text-green-600"
    },
    {
      name: "Speech-to-Text",
      provider: "Deepgram",
      description: "Real-time transcription",
      status: "Streaming",
      statusColor: "text-green-600"
    },
    {
      name: "AI Language Model",
      provider: "OpenAI GPT-4",
      description: "Conversation engine",
      status: "Active",
      statusColor: "text-green-600"
    },
    {
      name: "Text-to-Speech",
      provider: "ElevenLabs",
      description: "Voice synthesis",
      status: "Premium Voice",
      statusColor: "text-green-600"
    },
    {
      name: "Call Recording",
      provider: "AWS S3",
      description: "Storage & compliance",
      status: "Live Recording",
      statusColor: "text-blue-600"
    },
    {
      name: "Analytics Engine",
      provider: "Diala AI",
      description: "Real-time insights",
      status: "Processing",
      statusColor: "text-purple-600"
    }
  ];

  const defaultCostMetrics: CostMetric[] = [
    { label: "PER MINUTE", cost: "$0.0089", description: "SIP Carrier", color: "green" },
    { label: "STT COST", cost: "$0.0043", description: "Deepgram", color: "blue" },
    { label: "AI TOKENS", cost: "$0.0156", description: "OpenAI", color: "purple" },
    { label: "TOTAL/MIN", cost: "$0.0298", description: "All Services", color: "yellow" }
  ];

  const defaultPremiumFeatures: PremiumFeature[] = [
    {
      name: "Advanced AI Coaching",
      status: "active",
      description: "Real-time intervention suggestions",
      usage: { current: 142, total: 180, percentage: 78 },
      color: "green",
      bgColor: "bg-green-50"
    },
    {
      name: "Call Recording",
      status: "premium",
      description: "High-quality audio storage",
      usage: { current: 3200, total: 10000, percentage: 34 },
      color: "blue",
      bgColor: "bg-blue-50"
    },
    {
      name: "Sentiment Analysis",
      status: "active",
      description: "Real-time emotion detection",
      usage: { current: 4560, total: 5000, percentage: 91 },
      color: "purple",
      bgColor: "bg-purple-50"
    },
    {
      name: "Call Transfer",
      status: "limited",
      description: "Supervisor call takeover",
      color: "gray",
      bgColor: "bg-gray-50"
    }
  ];

  const defaultComplianceControls: ComplianceControl[] = [
    { name: "Auto-Recording", description: "All calls recorded by default", enabled: true },
    { name: "Compliance Mode", description: "GDPR/CCPA data protection", enabled: true },
    { name: "Quality Alerts", description: "Real-time performance warnings", enabled: true }
  ];

  const displayServiceStatuses = serviceStatuses || defaultServiceStatuses;
  const displayCostMetrics = costMetrics || defaultCostMetrics;
  const displayPremiumFeatures = premiumFeatures || defaultPremiumFeatures;
  const displayComplianceControls = complianceControls || defaultComplianceControls;

  const formatDuration = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div className={`${bgColor} p-6 border-2 sm:border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] sm:shadow-[6px_6px_0_rgba(0,0,0,1)]`}>
      <div className="flex items-center gap-3 mb-6">
        <Button variant="header" size="header" className="bg-gray-400">
          <UilCog className="h-5 w-5 text-white" />
        </Button>
        <h3 className="font-black uppercase text-lg text-gray-800">{title}</h3>
      </div>
      
      {/* Active Call Infrastructure */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-blue-400">
            <UilServer className="h-3 w-3 text-white" />
          </Button>
          <div className="font-black text-sm">ACTIVE CALL INFRASTRUCTURE</div>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div className="space-y-3">
            {displayServiceStatuses.slice(0, 3).map((service, index) => (
              <div key={index} className="flex justify-between items-center p-3 bg-gray-50 border-2 border-black">
                <div>
                  <div className="font-bold text-sm">{service.name}</div>
                  <div className="text-xs text-gray-600">{service.description}</div>
                </div>
                <div className="text-right">
                  <div className="font-black text-sm">{service.provider}</div>
                  <div className={`text-xs ${service.statusColor}`}>✓ {service.status}</div>
                </div>
              </div>
            ))}
          </div>
          <div className="space-y-3">
            {displayServiceStatuses.slice(3).map((service, index) => (
              <div key={index} className="flex justify-between items-center p-3 bg-gray-50 border-2 border-black">
                <div>
                  <div className="font-bold text-sm">{service.name}</div>
                  <div className="text-xs text-gray-600">{service.description}</div>
                </div>
                <div className="text-right">
                  <div className="font-black text-sm">{service.provider}</div>
                  <div className={`text-xs ${service.statusColor}`}>✓ {service.status}</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Live Call Cost Breakdown */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-green-400">
            <UilDollarAlt className="h-3 w-3 text-black" />
          </Button>
          <div className="font-black text-sm">LIVE CALL COST BREAKDOWN</div>
        </div>
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 mb-4">
          {displayCostMetrics.map((metric, index) => (
            <div key={index} className="text-center">
              <div className={`text-lg font-black text-${metric.color}-600`}>{metric.cost}</div>
              <div className="text-xs text-gray-600 font-bold">{metric.label}</div>
              <div className="text-xs text-gray-500">{metric.description}</div>
            </div>
          ))}
        </div>
        
        <div className="p-3 bg-yellow-50 border-2 border-yellow-300">
          <div className="flex items-center justify-between">
            <div>
              <div className="font-bold text-sm">Current Call Cost</div>
              <div className="text-xs text-gray-600">Duration: {formatDuration(callDuration)}</div>
            </div>
            <div className="text-right">
              <div className="text-xl font-black text-green-600">${(callDuration * 0.0298 / 60).toFixed(4)}</div>
              <div className="text-xs text-gray-600">Running Total</div>
            </div>
          </div>
        </div>
      </div>

      {/* Premium Features & Usage */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-purple-400">
            <UilStar className="h-3 w-3 text-white" />
          </Button>
          <div className="font-black text-sm">PREMIUM FEATURES & USAGE</div>
        </div>
        <div className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            {displayPremiumFeatures.map((feature, index) => (
              <div key={index} className={cn("p-3 border-2", `${feature.bgColor} border-${feature.color}-300`)}>
                <div className="flex items-center justify-between mb-2">
                  <span className={`font-bold text-sm text-${feature.color}-800`}>{feature.name}</span>
                  <span className={cn(
                    "px-2 py-1 border border-black text-xs font-bold uppercase",
                    feature.status === 'active' ? `bg-${feature.color}-400 text-black` :
                    feature.status === 'premium' ? `bg-${feature.color}-400 text-white` :
                    "bg-gray-400 text-white"
                  )}>
                    {feature.status.toUpperCase()}
                  </span>
                </div>
                <div className={`text-xs text-${feature.color}-700`}>{feature.description}</div>
                {feature.usage ? (
                  <div className="mt-2">
                    <div className={`w-full bg-${feature.color}-200 border border-${feature.color}-400 h-2`}>
                      <div className={`h-full bg-${feature.color}-400`} style={{ width: `${feature.usage.percentage}%` }}></div>
                    </div>
                    <div className={`text-xs text-${feature.color}-600 mt-1`}>
                      {feature.name === 'Call Recording' 
                        ? `${(feature.usage.current/1000).toFixed(1)}GB/${feature.usage.total/1000}GB monthly limit`
                        : `${feature.usage.current}/${feature.usage.total} ${feature.name.includes('Coaching') ? 'coaching events' : 'API calls'} used`
                      }
                    </div>
                  </div>
                ) : (
                  <div className="mt-2">
                    <button className="w-full px-3 py-2 bg-yellow-400 border-2 border-black font-bold text-xs hover:bg-yellow-500">
                      UPGRADE FOR UNLIMITED TRANSFERS
                    </button>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Quality & Compliance Controls */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-cyan-400">
            <UilShield className="h-3 w-3 text-black" />
          </Button>
          <div className="font-black text-sm">QUALITY & COMPLIANCE CONTROLS</div>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div className="space-y-3">
            {displayComplianceControls.map((control, index) => (
              <div key={index} className="flex items-center justify-between p-3 border-2 border-black">
                <div>
                  <div className="font-bold text-sm">{control.name}</div>
                  <div className="text-xs text-gray-600">{control.description}</div>
                </div>
                <div className={cn(
                  "w-10 h-6 border-2 border-black relative",
                  control.enabled ? "bg-green-400" : "bg-gray-300"
                )}>
                  <div className={cn(
                    "absolute top-0.5 w-4 h-4 bg-white border border-black transition-all",
                    control.enabled ? "right-0.5" : "left-0.5"
                  )}></div>
                </div>
              </div>
            ))}
          </div>
          
          <div className="space-y-3">
            <div className="p-3 bg-blue-50 border-2 border-blue-300">
              <div className="font-bold text-sm text-blue-800 mb-2">Call Quality Score</div>
              <div className="text-2xl font-black text-blue-600">{qualityScore}/100</div>
              <div className="text-xs text-blue-700">Excellent performance</div>
            </div>
            
            <div className="p-3 bg-green-50 border-2 border-green-300">
              <div className="font-bold text-sm text-green-800 mb-2">Compliance Status</div>
              <div className="text-2xl font-black text-green-600">✓ {complianceStatus}</div>
              <div className="text-xs text-green-700">All regulations met</div>
            </div>
          </div>
        </div>
      </div>

      {/* System Emergency Controls */}
      <div className="bg-white border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] p-4">
        <div className="flex items-center gap-2 mb-4">
          <Button variant="subheader" size="icon" className="bg-red-400">
            <UilShield className="h-3 w-3 text-white" />
          </Button>
          <div className="font-black text-sm">SYSTEM EMERGENCY CONTROLS</div>
        </div>
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
          <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-red-400 text-white">
            <UilSquare className="h-4 w-4 mr-2" />
            EMERGENCY STOP
          </Button>
          <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-yellow-400 text-black">
            <UilCircle className="h-4 w-4 mr-2" />
            PAUSE AI
          </Button>
          <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-blue-400 text-white">
            <UilExchange className="h-4 w-4 mr-2" />
            FORCE TRANSFER
          </Button>
          <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-purple-400 text-white">
            <UilEdit className="h-4 w-4 mr-2" />
            INCIDENT LOG
          </Button>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/agent-detail-modal.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Slider } from '@/components/ui/slider';
import { cn } from '@/lib/utils';
import { 
  UilRobot,
  UilBooks,
  UilBullseye,
  UilUsersAlt,
  UilTimes,
  UilInfoCircle,
  UilBookOpen,
  UilBrain,
  UilCheckCircle,
  UilFileSearchAlt,
  UilAnalytics,
  UilClipboardNotes,
  UilDollarSign,
  UilHeadphonesAlt,
  UilCalendarAlt,
  UilDesktop,
  UilSetting,
  UilPlay,
  UilPause,
  UilTrashAlt,
  UilEditAlt,
  UilPlus,
  UilYoutube,
  UilFileAlt,
  UilLinkAlt,
  UilDownloadAlt,
  UilUploadAlt,
  UilCog
} from '@tooni/iconscout-unicons-react';
import AnalyticsDashboardHeader from '@/components/custom/analytics/analytics-dashboard-header';
import ConversationQualityAnalysis from '@/components/custom/analytics/conversation-quality-analysis';

interface RAGWorkflow {
  id: string;
  name: string;
  description: string;
  status: 'active' | 'processing' | 'failed' | 'completed';
  progress: number;
  type: 'youtube' | 'documents' | 'urls' | 'mixed';
  stats: {
    embeddings: number;
    sources: number;
    focusAreas: number;
    lastUpdated: string;
  };
  parameters: {
    chunkSize: number;
    overlap: number;
    embeddingModel: string;
    vectorStore: string;
  };
  sources: Array<{
    id: string;
    url: string;
    type: 'youtube' | 'document' | 'url';
    status: 'pending' | 'processing' | 'completed' | 'failed';
    metadata?: {
      title?: string;
      duration?: string;
      fileSize?: string;
    };
  }>;
}

interface TrainingConfig {
  chunkSize: number;
  overlap: number;
  embeddingModel: string;
  vectorStore: string;
  relevanceThreshold: number;
  maxResults: number;
  autoRetrain: boolean;
  retrainFrequency: 'daily' | 'weekly' | 'monthly';
}

interface AgentData {
  id: number;
  name: string;
  voice: string;
  language: string;
  purpose: string;
  status: 'active' | 'idle' | 'offline';
  performance: {
    totalCalls: number;
    successRate: number;
    avgDuration: string;
    satisfaction: number;
  };
  description: string;
  lastActive: string;
  systemPrompt?: string;
  ragSources?: {
      id: string;
      name: string;
      description: string;
  }[];
  ragWorkflows?: RAGWorkflow[];
  trainingConfig?: TrainingConfig;
  businessHunt?: {
      huntId: string;
      huntName: string;
      status: 'active' | 'paused' | 'completed';
      config: any;
  };
  swarmInfo?: {
      swarmId: string;
      swarmName: string;
      swarmPurpose: string;
  };
}

interface AgentDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  agentData: AgentData;
}

const AgentDetailModal: React.FC<AgentDetailModalProps> = ({ isOpen, onClose, agentData }) => {
  const [activeTab, setActiveTab] = React.useState('overview');
  if (!isOpen) return null;

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'active': return 'bg-green-400 text-black';
      case 'idle': return 'bg-yellow-400 text-black';
      case 'offline': return 'bg-gray-400 text-black';
      case 'completed': return 'bg-blue-400 text-white';
      case 'paused': return 'bg-orange-400 text-black';
      default: return 'bg-gray-400 text-black';
    }
  };

  const performanceCards = [
    {
      value: agentData.performance.totalCalls,
      label: 'TOTAL CALLS',
      description: 'All time',
      color: 'text-blue-600',
      progressWidth: '100%',
    },
    {
      value: `${agentData.performance.successRate}%`,
      label: 'SUCCESS RATE',
      description: 'Objectives Met',
      color: 'text-green-600',
      progressWidth: `${agentData.performance.successRate}%`,
    },
    {
      value: agentData.performance.avgDuration,
      label: 'AVG DURATION',
      description: 'Per call',
      color: 'text-indigo-600',
      progressWidth: '70%',
    },
    {
      value: `${agentData.performance.satisfaction}/5`,
      label: 'SATISFACTION',
      description: 'Customer Rating',
      color: 'text-orange-600',
      progressWidth: `${(agentData.performance.satisfaction / 5) * 100}%`,
    },
  ];

  const overviewCards = [
    {
      value: agentData.performance.totalCalls,
      label: 'ACTIVE SESSIONS',
      description: 'Current',
      color: 'text-purple-600',
      progressWidth: '80%',
    },
    {
      value: agentData.lastActive,
      label: 'LAST ACTIVE',
      description: 'Time',
      color: 'text-blue-600',
      progressWidth: '100%',
    },
    {
      value: agentData.ragSources?.length || 0,
      label: 'KNOWLEDGE SOURCES',
      description: 'Connected',
      color: 'text-green-600',
      progressWidth: '60%',
    },
    {
      value: agentData.language,
      label: 'LANGUAGE',
      description: 'Primary',
      color: 'text-pink-600',
      progressWidth: '90%',
    },
  ];

  const trainingCards = [
    {
      value: agentData.ragSources?.length || 0,
      label: 'RAG SOURCES',
      description: 'Total',
      color: 'text-indigo-600',
      progressWidth: '100%',
    },
    {
      value: '24hrs',
      label: 'LAST TRAINED',
      description: 'Time',
      color: 'text-green-600',
      progressWidth: '75%',
    },
    {
      value: '98%',
      label: 'ACCURACY',
      description: 'Knowledge Base',
      color: 'text-blue-600',
      progressWidth: '98%',
    },
    {
      value: '2.1s',
      label: 'AVG RESPONSE',
      description: 'Speed',
      color: 'text-orange-600',
      progressWidth: '85%',
    },
  ];

  const campaignCards = [
    {
      value: agentData.businessHunt ? 1 : 0,
      label: 'ACTIVE CAMPAIGNS',
      description: 'Current',
      color: 'text-purple-600',
      progressWidth: '50%',
    },
    {
      value: '85%',
      label: 'CAMPAIGN SUCCESS',
      description: 'Rate',
      color: 'text-green-600',
      progressWidth: '85%',
    },
    {
      value: '150',
      label: 'LEADS GENERATED',
      description: 'Total',
      color: 'text-blue-600',
      progressWidth: '75%',
    },
    {
      value: '4.2/5',
      label: 'CAMPAIGN RATING',
      description: 'Average',
      color: 'text-orange-600',
      progressWidth: '84%',
    },
  ];

  const promptCards = [
    {
      value: agentData.systemPrompt ? '✓' : '✗',
      label: 'PROMPT STATUS',
      description: 'Active',
      color: 'text-purple-600',
      progressWidth: agentData.systemPrompt ? '100%' : '0%',
    },
    {
      value: '250',
      label: 'TOKEN COUNT',
      description: 'Current',
      color: 'text-blue-600',
      progressWidth: '50%',
    },
    {
      value: '3',
      label: 'VERSIONS',
      description: 'Total',
      color: 'text-green-600',
      progressWidth: '60%',
    },
    {
      value: '12hrs',
      label: 'LAST UPDATED',
      description: 'Time',
      color: 'text-orange-600',
      progressWidth: '70%',
    },
  ];

  const tabs = [
    { value: 'overview', label: 'Overview', icon: UilInfoCircle },
    { value: 'performance', label: 'Performance', icon: UilAnalytics },
    { value: 'training', label: 'Training', icon: UilBookOpen },
    { value: 'campaigns', label: 'Campaigns', icon: UilFileSearchAlt },
    { value: 'prompt', label: 'System Prompt', icon: UilClipboardNotes },
  ];
  if (agentData.swarmInfo) {
    tabs.push({ value: 'swarm', label: 'Swarm', icon: UilUsersAlt });
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-0 sm:p-4">
      <div className="bg-white border-0 sm:border-4 border-black shadow-none sm:shadow-[8px_8px_0_rgba(0,0,0,1)] w-full h-full sm:max-w-4xl sm:h-auto sm:max-h-[90vh] flex flex-col">
        {/* Header */}
        <div className="border-b-2 sm:border-b-4 border-black bg-purple-500 text-white flex-shrink-0">
          {/* Mobile Header */}
          <div className="sm:hidden p-3">
            <div className="flex items-center justify-between mb-2">
              <h2 className="text-base font-black uppercase truncate">{agentData.name}</h2>
              <Button onClick={onClose} size="sm" className="w-8 h-8 p-0 bg-red-500 hover:bg-red-600 text-white border-2 border-black font-black text-lg">×</Button>
            </div>
            <div className="bg-white border-2 border-black p-2 text-black">
              <div className="font-black text-sm mb-1 truncate">{agentData.purpose}</div>
              <div className="flex items-center justify-between text-xs">
                <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", getStatusColor(agentData.status))}>{agentData.status}</span>
                <span className="text-gray-600">Last active: {agentData.lastActive}</span>
              </div>
            </div>
          </div>
          
          {/* Desktop Header */}
          <div className="hidden sm:flex items-center justify-between p-4">
            <div className="flex items-center gap-4">
              <div className="w-16 h-16 bg-pink-400 border-2 border-black flex items-center justify-center">
                <UilRobot className="h-8 w-8 text-white" />
              </div>
              <div>
                <div className="flex items-center gap-3">
                  <h2 className="font-black text-2xl uppercase">{agentData.name}</h2>
                  <Badge className={cn("border-2 border-black font-bold uppercase", getStatusColor(agentData.status))}>{agentData.status}</Badge>
                </div>
                <p className="font-bold">{agentData.purpose}</p>
              </div>
            </div>
            <Button onClick={onClose} className="bg-red-500 hover:bg-red-600 text-white border-2 border-black font-black text-xl px-3 py-2">×</Button>
          </div>
        </div>

        {/* Tabs */}
        <div className="border-b-2 sm:border-b-4 border-black bg-black flex-shrink-0">
           {/* Mobile: Dropdown Tabs */}
           <div className="sm:hidden p-2">
            <select
              value={activeTab}
              onChange={(e) => setActiveTab(e.target.value)}
              className="w-full px-3 py-3 border-2 border-black font-bold uppercase text-sm bg-white focus:outline-none appearance-none"
            >
              {tabs.map(tab => <option key={tab.value} value={tab.value}>{tab.label}</option>)}
            </select>
          </div>
          
          {/* Desktop: Button Tabs */}
          <div className="hidden sm:block">
            <div className="flex overflow-x-auto">
              {tabs.map((tab) => (
                <Button
                  key={tab.value}
                  onClick={() => setActiveTab(tab.value)}
                  variant="reverse"
                  size="lg"
                  className="whitespace-nowrap flex-shrink-0 border-0"
                  style={{ backgroundColor: activeTab === tab.value ? '' : 'white' }}
                >
                  <tab.icon className="h-4 w-4 mr-2" />
                  {tab.label}
                </Button>
              ))}
            </div>
          </div>
        </div>
        
        <div className="flex-1 overflow-y-auto p-4 sm:p-6 space-y-4 sm:space-y-6 bg-gray-50">
          {activeTab === 'overview' && (
            <div className="space-y-4 sm:space-y-6">
              <AnalyticsDashboardHeader
                totalCalls={agentData.performance.totalCalls}
                title="AGENT OVERVIEW"
                subtitle={`Current status for ${agentData.name}`}
                bgColor="bg-white"
                cards={overviewCards}
              />
              <Card className="border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                <CardHeader className="border-b-2 sm:border-b-4 border-black bg-gray-100 p-3 sm:p-4">
                  <CardTitle className="font-black uppercase text-sm sm:text-base">Agent Details</CardTitle>
                </CardHeader>
                <CardContent className="p-3 sm:p-4 text-sm space-y-2">
                   <p>{agentData.description}</p>
                   <div className="grid grid-cols-2 gap-2 pt-2">
                      <div><span className="font-bold">Voice:</span> {agentData.voice}</div>
                      <div><span className="font-bold">Language:</span> {agentData.language}</div>
                      <div><span className="font-bold">Last Active:</span> {agentData.lastActive}</div>
                   </div>
                </CardContent>
              </Card>
            </div>
          )}
          {activeTab === 'performance' && (
            <div className="space-y-4 sm:space-y-6">
              <AnalyticsDashboardHeader
                totalCalls={agentData.performance.totalCalls}
                title="AGENT PERFORMANCE"
                subtitle={`Key metrics for ${agentData.name}`}
                bgColor="bg-white"
                cards={performanceCards}
              />
              
              {/* Call Performance Analytics */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Conversation Quality Metrics */}
                <ConversationQualityAnalysis 
                  title="CONVERSATION QUALITY METRICS"
                  bgColor="bg-blue-50"
                  iconBgColor="bg-blue-400"
                  metrics={[
                    {
                      label: "SCRIPT ADHERENCE",
                      value: 94,
                      percentage: 94,
                      color: "green",
                      description: "EXCELLENT"
                    },
                    {
                      label: "OBJECTIVE COMPLETION",
                      value: agentData.performance.successRate,
                      percentage: agentData.performance.successRate,
                      color: "blue",
                      description: "STRONG"
                    },
                    {
                      label: "CONVERSATION FLOW",
                      value: 88,
                      percentage: 88,
                      color: "purple",
                      description: "SMOOTH"
                    },
                    {
                      label: "RESPONSE QUALITY",
                      value: Math.round(agentData.performance.satisfaction * 20),
                      percentage: Math.round(agentData.performance.satisfaction * 20),
                      color: "orange",
                      description: "GOOD"
                    }
                  ]}
                />

                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">PERFORMANCE TRENDS</h3>
                  <div className="space-y-4">
                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="font-bold text-sm">Success Rate Trend</span>
                        <span className="text-green-600 font-bold text-xs">↗ +{Math.round(agentData.performance.successRate * 0.1)}% this week</span>
                      </div>
                      <div className="w-full bg-gray-300 border-2 border-black h-4">
                        <div className="h-full bg-green-400" style={{ width: `${agentData.performance.successRate}%` }}></div>
                      </div>
                    </div>
                    
                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="font-bold text-sm">Call Volume</span>
                        <span className="text-blue-600 font-bold text-xs">↗ +15% vs last week</span>
                      </div>
                      <div className="w-full bg-gray-300 border-2 border-black h-4">
                        <div className="h-full bg-blue-400" style={{ width: '73%' }}></div>
                      </div>
                    </div>
                    
                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="font-bold text-sm">Agent Efficiency</span>
                        <span className="text-purple-600 font-bold text-xs">↗ +12% improvement</span>
                      </div>
                      <div className="w-full bg-gray-300 border-2 border-black h-4">
                        <div className="h-full bg-purple-400" style={{ width: '89%' }}></div>
                      </div>
                    </div>
                    
                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="font-bold text-sm">Response Quality</span>
                        <span className="text-orange-600 font-bold text-xs">↗ +6% this month</span>
                      </div>
                      <div className="w-full bg-gray-300 border-2 border-black h-4">
                        <div className="h-full bg-orange-400" style={{ width: '94%' }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Call Flow Analysis & Objectives */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">OPTIMIZED CALL FLOW</h3>
                  <div className="space-y-4">
                    {[
                      { step: '1', phase: 'Opening & Rapport', description: 'Greeting and connection building', avgDuration: '45s' },
                      { step: '2', phase: 'Discovery Questions', description: 'Understanding needs and pain points', avgDuration: '2m 30s' },
                      { step: '3', phase: 'Solution Presentation', description: 'Tailored value proposition', avgDuration: '3m 15s' },
                      { step: '4', phase: 'Objection Handling', description: 'Address concerns and resistance', avgDuration: '1m 45s' },
                      { step: '5', phase: 'Closing & Next Steps', description: 'Commitment and follow-up', avgDuration: '1m 15s' }
                    ].map((phase, index) => (
                      <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 border-2 border-black">
                        <div className="w-8 h-8 bg-cyan-400 border-2 border-black flex items-center justify-center font-black text-xs flex-shrink-0">
                          {phase.step}
                        </div>
                        <div className="flex-1">
                          <div className="font-bold text-sm">{phase.phase}</div>
                          <div className="text-xs text-gray-600">{phase.description}</div>
                        </div>
                        <div className="text-right">
                          <div className="text-xs font-bold text-gray-500">{phase.avgDuration}</div>
                          <div className="text-xs text-green-600">✓ Optimized</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">PERFORMANCE OBJECTIVES STATUS</h3>
                  <div className="space-y-4">
                    {[
                      'Maintain 85%+ conversation success rate',
                      'Complete discovery phase within 3 minutes',
                      'Handle objections with confidence',
                      'Achieve natural conversation flow',
                      'Follow company compliance guidelines'
                    ].map((objective, index) => (
                      <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 border-2 border-black">
                        <div className={cn(
                          "w-8 h-8 border-2 border-black flex items-center justify-center font-black text-white text-xs flex-shrink-0",
                          index < 3 ? "bg-green-400" : index < 4 ? "bg-yellow-400 text-black" : "bg-gray-400"
                        )}>
                          {index < 3 ? "✓" : index < 4 ? "⚠" : "⏳"}
                        </div>
                        <div className="flex-1">
                          <div className="font-bold text-sm">{objective}</div>
                          <div className="text-xs text-gray-600">
                            {index < 3 ? "Consistently achieved in recent calls" : 
                             index < 4 ? "Needs improvement in some interactions" : 
                             "In development phase"}
                          </div>
                        </div>
                        <div className={cn(
                          "px-2 py-1 border border-black text-xs font-bold uppercase",
                          index < 3 ? "bg-green-400 text-black" : 
                          index < 4 ? "bg-yellow-400 text-black" : "bg-gray-400 text-white"
                        )}>
                          {index < 3 ? "MASTERED" : index < 4 ? "TRAINING" : "PENDING"}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* Advanced Performance Metrics */}
              <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                <h3 className="font-black uppercase text-sm mb-4 text-gray-600">ADVANCED PERFORMANCE ANALYTICS</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  <div>
                    <h4 className="font-bold text-sm mb-3">CONVERSION FUNNEL</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Calls Made</span>
                        <span className="font-bold text-xs">{agentData.performance.totalCalls}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Connected</span>
                        <span className="font-bold text-xs">{Math.floor(agentData.performance.totalCalls * 0.85)}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Interested</span>
                        <span className="font-bold text-xs">{Math.floor(agentData.performance.totalCalls * 0.68)}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Qualified</span>
                        <span className="font-bold text-xs">{Math.floor(agentData.performance.totalCalls * 0.48)}</span>
                      </div>
                      <div className="flex justify-between items-center border-t border-gray-300 pt-2">
                        <span className="text-xs font-bold">Converted</span>
                        <span className="font-black text-xs text-green-600">{Math.floor(agentData.performance.totalCalls * (agentData.performance.successRate / 100))}</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-bold text-sm mb-3">CALL TIMING ANALYSIS</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Peak Hours</span>
                        <span className="font-bold text-xs">10AM-2PM</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Best Days</span>
                        <span className="font-bold text-xs">Tue-Thu</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Avg Ring Time</span>
                        <span className="font-bold text-xs">4.2s</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Call Duration</span>
                        <span className="font-bold text-xs">{agentData.performance.avgDuration}</span>
                      </div>
                      <div className="flex justify-between items-center border-t border-gray-300 pt-2">
                        <span className="text-xs font-bold">Efficiency Score</span>
                        <span className="font-black text-xs text-blue-600">92%</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-bold text-sm mb-3">QUALITY METRICS</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Script Adherence</span>
                        <span className="font-bold text-xs">94%</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Tone Quality</span>
                        <span className="font-bold text-xs">4.6/5</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Information Accuracy</span>
                        <span className="font-bold text-xs">98%</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Compliance Score</span>
                        <span className="font-bold text-xs">100%</span>
                      </div>
                      <div className="flex justify-between items-center border-t border-gray-300 pt-2">
                        <span className="text-xs font-bold">Overall Rating</span>
                        <span className="font-black text-xs text-purple-600">{agentData.performance.satisfaction}/5</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-bold text-sm mb-3">IMPROVEMENT AREAS</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Objection Handling</span>
                        <span className="font-bold text-xs text-yellow-600">Training</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Closing Techniques</span>
                        <span className="font-bold text-xs text-green-600">Strong</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Product Knowledge</span>
                        <span className="font-bold text-xs text-green-600">Expert</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Active Listening</span>
                        <span className="font-bold text-xs text-blue-600">Good</span>
                      </div>
                      <div className="flex justify-between items-center border-t border-gray-300 pt-2">
                        <span className="text-xs font-bold">Focus Area</span>
                        <span className="font-black text-xs text-orange-600">Objections</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Real-time Performance Monitor */}
              <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                <h3 className="font-black uppercase text-sm mb-4 text-gray-600">REAL-TIME PERFORMANCE MONITOR</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="p-3 bg-green-50 border-2 border-black">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-bold">Current Status</span>
                      <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                    </div>
                    <div className="text-lg font-black text-green-600">{agentData.status.toUpperCase()}</div>
                    <div className="text-xs text-gray-600">Last active: {agentData.lastActive}</div>
                  </div>
                  
                  <div className="p-3 bg-blue-50 border-2 border-black">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-bold">Today's Calls</span>
                      <UilAnalytics className="h-4 w-4 text-blue-600" />
                    </div>
                    <div className="text-lg font-black text-blue-600">{Math.floor(agentData.performance.totalCalls * 0.15)}</div>
                    <div className="text-xs text-gray-600">Target: {Math.floor(agentData.performance.totalCalls * 0.2)}</div>
                  </div>
                  
                  <div className="p-3 bg-purple-50 border-2 border-black">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-bold">Success Today</span>
                      <span className="text-xs font-bold text-purple-600">↗ +8%</span>
                    </div>
                    <div className="text-lg font-black text-purple-600">{Math.round(agentData.performance.successRate * 1.08)}%</div>
                    <div className="text-xs text-gray-600">Above average</div>
                  </div>
                </div>
              </div>
            </div>
          )}
          {activeTab === 'training' && (
            <div className="space-y-4 sm:space-y-6">
              <AnalyticsDashboardHeader
                totalCalls={agentData.performance.totalCalls}
                title="TRAINING METRICS"
                subtitle={`Learning progress for ${agentData.name}`}
                bgColor="bg-white"
                cards={trainingCards}
              />
              
              {/* Training Configuration */}
              <Card className="border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                <CardHeader className="border-b-2 sm:border-b-4 border-black bg-gray-100 p-3 sm:p-4">
                  <CardTitle className="font-black uppercase flex items-center text-sm sm:text-base">
                    <UilCog className="h-5 w-5 mr-2" />Training Configuration
                  </CardTitle>
                </CardHeader>
                <CardContent className="p-3 sm:p-4 space-y-4">
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="text-sm font-black uppercase">Chunk Size</label>
                        <span className="text-sm font-bold">{agentData.trainingConfig?.chunkSize || 512}</span>
                      </div>
                      <Slider
                        value={[agentData.trainingConfig?.chunkSize || 512]}
                        min={128}
                        max={1024}
                        step={64}
                        className="mb-1"
                      />
                      <p className="text-xs text-gray-600">Text chunk size for embeddings</p>
                    </div>
                    
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="text-sm font-black uppercase">Overlap</label>
                        <span className="text-sm font-bold">{agentData.trainingConfig?.overlap || 50}</span>
                      </div>
                      <Slider
                        value={[agentData.trainingConfig?.overlap || 50]}
                        min={0}
                        max={100}
                        step={5}
                        className="mb-1"
                      />
                      <p className="text-xs text-gray-600">Overlap between chunks</p>
                    </div>
                    
                    <div>
                      <label className="text-sm font-black uppercase mb-2 block">Embedding Model</label>
                      <select className="w-full px-3 py-2 border-2 border-black rounded-[3px] bg-white text-sm font-bold">
                        <option>text-embedding-ada-002</option>
                        <option>text-embedding-3-small</option>
                        <option>text-embedding-3-large</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="text-sm font-black uppercase mb-2 block">Vector Store</label>
                      <select className="w-full px-3 py-2 border-2 border-black rounded-[3px] bg-white text-sm font-bold">
                        <option>Pinecone</option>
                        <option>Chroma</option>
                        <option>Weaviate</option>
                        <option>Qdrant</option>
                      </select>
                    </div>
                  </div>
                  
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm" className="border-2 border-black">
                      <UilDownloadAlt className="h-4 w-4 mr-2" />
                      Export Config
                    </Button>
                    <Button variant="outline" size="sm" className="border-2 border-black">
                      <UilUploadAlt className="h-4 w-4 mr-2" />
                      Import Config
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* RAG Workflows Management */}
              <Card className="border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                <CardHeader className="border-b-2 sm:border-b-4 border-black bg-gray-100 p-3 sm:p-4">
                  <div className="flex items-center justify-between">
                    <CardTitle className="font-black uppercase flex items-center text-sm sm:text-base">
                      <UilBrain className="h-5 w-5 mr-2" />RAG Workflows
                    </CardTitle>
                    <Button size="sm" className="bg-purple-500 hover:bg-purple-600 border-2 border-black">
                      <UilPlus className="h-4 w-4 mr-2" />
                      Add Workflow
                    </Button>
                  </div>
                </CardHeader>
                <CardContent className="p-3 sm:p-4 space-y-3">
                  {agentData.ragWorkflows?.map(workflow => (
                    <div key={workflow.id} className="p-3 border-2 border-black bg-white">
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <h4 className="font-black text-black">{workflow.name}</h4>
                            <Badge className={cn(
                              "border-2 border-black font-bold uppercase text-xs",
                              workflow.status === 'active' ? 'bg-green-400 text-black' :
                              workflow.status === 'processing' ? 'bg-yellow-400 text-black' :
                              workflow.status === 'failed' ? 'bg-red-400 text-white' :
                              'bg-blue-400 text-white'
                            )}>
                              {workflow.status}
                            </Badge>
                          </div>
                          <p className="text-sm text-gray-600 mb-2">{workflow.description}</p>
                          <div className="flex items-center gap-4 text-xs">
                            <span className="font-bold">{workflow.stats.embeddings.toLocaleString()} embeddings</span>
                            <span className="text-gray-600">•</span>
                            <span className="font-bold">{workflow.stats.sources} sources</span>
                            <span className="text-gray-600">•</span>
                            <span className="font-bold">Updated {workflow.stats.lastUpdated}</span>
                          </div>
                        </div>
                        <div className="flex gap-2">
                          <Button variant="outline" size="sm" className="border-2 border-black">
                            <UilEditAlt className="h-4 w-4" />
                          </Button>
                          <Button variant="outline" size="sm" className="border-2 border-black">
                            {workflow.status === 'active' ? 
                              <UilPause className="h-4 w-4" /> : 
                              <UilPlay className="h-4 w-4" />
                            }
                          </Button>
                          <Button variant="outline" size="sm" className="border-2 border-black text-red-600">
                            <UilTrashAlt className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                      
                      {workflow.status === 'processing' && (
                        <div className="mt-2">
                          <div className="flex items-center justify-between text-xs mb-1">
                            <span className="font-bold">Processing...</span>
                            <span className="font-bold">{workflow.progress}%</span>
                          </div>
                          <div className="w-full bg-gray-200 h-2 border border-black">
                            <div 
                              className="bg-purple-500 h-full transition-all duration-300"
                              style={{ width: `${workflow.progress}%` }}
                            />
                          </div>
                        </div>
                      )}
                      
                      {/* Workflow Sources */}
                      <div className="mt-3 space-y-2">
                        <h5 className="font-bold text-xs uppercase">Sources ({workflow.sources.length})</h5>
                        <div className="max-h-32 overflow-y-auto space-y-1">
                          {workflow.sources.map(source => (
                            <div key={source.id} className="flex items-center justify-between p-2 bg-gray-50 border border-gray-300 text-xs">
                              <div className="flex items-center gap-2">
                                {source.type === 'youtube' && <UilYoutube className="h-3 w-3 text-red-500" />}
                                {source.type === 'document' && <UilFileAlt className="h-3 w-3 text-blue-500" />}
                                {source.type === 'url' && <UilLinkAlt className="h-3 w-3 text-green-500" />}
                                <span className="font-bold truncate max-w-48">{source.metadata?.title || source.url}</span>
                              </div>
                              <Badge className={cn(
                                "text-xs",
                                source.status === 'completed' ? 'bg-green-200 text-green-800' :
                                source.status === 'processing' ? 'bg-yellow-200 text-yellow-800' :
                                source.status === 'failed' ? 'bg-red-200 text-red-800' :
                                'bg-gray-200 text-gray-800'
                              )}>
                                {source.status}
                              </Badge>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {(!agentData.ragWorkflows || agentData.ragWorkflows.length === 0) && (
                    <div className="text-center py-8 text-gray-500">
                      <UilBrain className="h-12 w-12 mx-auto mb-2 text-gray-300" />
                      <p className="font-bold">No RAG workflows configured</p>
                      <p className="text-sm">Add workflows to enhance agent knowledge</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Quick Add Sources */}
              <Card className="border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                <CardHeader className="border-b-2 sm:border-b-4 border-black bg-purple-100 p-3 sm:p-4">
                  <CardTitle className="font-black uppercase text-sm sm:text-base">Quick Add Training Sources</CardTitle>
                </CardHeader>
                <CardContent className="p-3 sm:p-4 space-y-4">
                  <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                    <Card className="cursor-pointer border-2 border-black hover:shadow-[2px_2px_0_rgba(0,0,0,1)] transition-all bg-red-50">
                      <CardContent className="p-3 text-center">
                        <UilYoutube className="h-8 w-8 mx-auto mb-2 text-red-500" />
                        <p className="font-bold text-sm">YouTube Video</p>
                        <p className="text-xs text-gray-600">Add video transcripts</p>
                      </CardContent>
                    </Card>
                    
                    <Card className="cursor-pointer border-2 border-black hover:shadow-[2px_2px_0_rgba(0,0,0,1)] transition-all bg-blue-50">
                      <CardContent className="p-3 text-center">
                        <UilFileAlt className="h-8 w-8 mx-auto mb-2 text-blue-500" />
                        <p className="font-bold text-sm">Documents</p>
                        <p className="text-xs text-gray-600">Upload PDF, TXT, DOCX</p>
                      </CardContent>
                    </Card>
                    
                    <Card className="cursor-pointer border-2 border-black hover:shadow-[2px_2px_0_rgba(0,0,0,1)] transition-all bg-green-50">
                      <CardContent className="p-3 text-center">
                        <UilLinkAlt className="h-8 w-8 mx-auto mb-2 text-green-500" />
                        <p className="font-bold text-sm">Web URLs</p>
                        <p className="text-xs text-gray-600">Scrape web content</p>
                      </CardContent>
                    </Card>
                  </div>
                  
                  <div className="space-y-2">
                    <Input
                      placeholder="Paste YouTube URL, web URL, or upload documents..."
                      className="border-2 border-black rounded-[3px]"
                    />
                    <div className="flex gap-2">
                      <Button variant="header" size="sm" className="flex-1">
                        <UilPlus className="h-4 w-4 mr-2" />
                        Add Source
                      </Button>
                      <Button variant="outline" size="sm" className="border-2 border-black">
                        <UilUploadAlt className="h-4 w-4 mr-2" />
                        Upload Files
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Training History & Logs */}
              <Card className="border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                <CardHeader className="border-b-2 sm:border-b-4 border-black bg-gray-100 p-3 sm:p-4">
                  <CardTitle className="font-black uppercase text-sm sm:text-base">Training History</CardTitle>
                </CardHeader>
                <CardContent className="p-3 sm:p-4">
                  <div className="space-y-2 max-h-32 overflow-y-auto">
                    {[
                      { time: '2 hours ago', action: 'Added YouTube playlist', status: 'completed' },
                      { time: '1 day ago', action: 'Updated embeddings', status: 'completed' },
                      { time: '3 days ago', action: 'Added product documentation', status: 'completed' },
                      { time: '1 week ago', action: 'Initial training setup', status: 'completed' },
                    ].map((log, index) => (
                      <div key={index} className="flex items-center justify-between p-2 bg-gray-50 border border-gray-300 text-xs">
                        <div>
                          <span className="font-bold">{log.action}</span>
                          <span className="text-gray-600 ml-2">{log.time}</span>
                        </div>
                        <Badge className="bg-green-200 text-green-800 text-xs">
                          {log.status}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          )}
          {activeTab === 'campaigns' && (
            <div className="space-y-4 sm:space-y-6">
              <AnalyticsDashboardHeader
                totalCalls={agentData.performance.totalCalls}
                title="CAMPAIGN ANALYTICS"
                subtitle={`Campaign performance for ${agentData.name}`}
                bgColor="bg-white"
                cards={campaignCards}
              />
              <Card className="border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                <CardHeader className="border-b-2 sm:border-b-4 border-black bg-gray-100 p-3 sm:p-4">
                  <CardTitle className="font-black uppercase text-sm sm:text-base">Business Hunt Details</CardTitle>
                </CardHeader>
                <CardContent className="p-3 sm:p-4">
                  {agentData.businessHunt ? (
                    <div className="space-y-2">
                      <div className="flex items-center justify-between">
                        <h4 className="font-bold">{agentData.businessHunt.huntName}</h4>
                        <Badge className={cn("border-2 border-black font-bold uppercase", getStatusColor(agentData.businessHunt.status))}>
                          {agentData.businessHunt.status}
                        </Badge>
                      </div>
                      <p className="text-sm text-gray-600">Hunt ID: {agentData.businessHunt.huntId}</p>
                    </div>
                  ) : (
                    <p className="text-sm text-gray-600">No active business hunt campaigns.</p>
                  )}
                </CardContent>
              </Card>
            </div>
          )}
          {activeTab === 'prompt' && (
            <div className="space-y-4 sm:space-y-6">
              <AnalyticsDashboardHeader
                totalCalls={agentData.performance.totalCalls}
                title="PROMPT METRICS"
                subtitle={`System prompt analysis for ${agentData.name}`}
                bgColor="bg-white"
                cards={promptCards}
              />
              <Card className="border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                <CardHeader className="border-b-2 sm:border-b-4 border-black bg-gray-100 p-3 sm:p-4">
                  <CardTitle className="font-black uppercase text-sm sm:text-base">System Prompt</CardTitle>
                </CardHeader>
                <CardContent className="p-3 sm:p-4">
                  <p className="text-sm bg-gray-100 p-4 border-2 border-gray-300 font-mono">{agentData.systemPrompt || 'No system prompt configured.'}</p>
                </CardContent>
              </Card>
            </div>
          )}
          {agentData.swarmInfo && activeTab === 'swarm' && (
            <Card className="border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardHeader className="border-b-2 sm:border-b-4 border-black bg-gray-100 p-3 sm:p-4">
                <CardTitle className="font-black uppercase flex items-center text-sm sm:text-base"><UilUsersAlt className="h-5 w-5 mr-2" />Swarm Membership</CardTitle>
              </CardHeader>
              <CardContent className="p-3 sm:p-4">
                <p className="text-sm">This agent is part of the following swarm:</p>
                <h4 className="font-black text-lg mt-2">{agentData.swarmInfo.swarmName}</h4>
                <p className="text-gray-600">{agentData.swarmInfo.swarmPurpose}</p>
                <Button variant="outline" size="sm" className="mt-4" onClick={onClose}>
                  View Swarm Details
                </Button>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
};

export default AgentDetailModal;


================================================
FILE: src/components/custom/modals/AudioGenerationModal.tsx
================================================
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Button } from '@/components/ui/button';
import { UilSpinner, UilCheck, UilMicrophone, UilMusic } from '@tooni/iconscout-unicons-react';
import { Star15 } from '@/components/ui/star';

interface AudioGenerationModalProps {
  isOpen: boolean;
  onClose: () => void;
  progress: number;
  status: 'generating' | 'verifying' | 'completed' | 'error';
  audioName: string;
  onVerify: () => void;
  onDownload: () => void;
}

export function AudioGenerationModal({
  isOpen,
  onClose,
  progress,
  status,
  audioName,
  onVerify,
  onDownload
}: AudioGenerationModalProps) {
  if (!isOpen) return null;

  const getStatusIcon = () => {
    switch (status) {
      case 'generating':
        return <UilMicrophone className="h-12 w-12 text-purple-500" />;
      case 'verifying':
        return <UilCheck className="h-12 w-12 text-green-500" />;
      case 'completed':
        return <UilMusic className="h-12 w-12 text-yellow-500" />;
      case 'error':
        return <UilSpinner className="h-12 w-12 text-red-500" />;
    }
  };

  const getStatusMessage = () => {
    switch (status) {
      case 'generating':
        return 'Creating your coffee shop ambiance...';
      case 'verifying':
        return 'Verifying your audio...';
      case 'completed':
        return 'Your coffee shop audio is ready!';
      case 'error':
        return 'Something went wrong';
    }
  };

  const getProgressMessage = () => {
    if (status === 'generating') {
      if (progress < 25) return 'Analyzing coffee shop scene...';
      if (progress < 50) return 'Generating background chatter...';
      if (progress < 75) return 'Adding cup clinking sounds...';
      if (progress < 100) return 'Finalizing audio quality...';
      return 'Audio generated successfully!';
    }
    return 'Processing...';
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-8 max-w-md w-full mx-4 transform rotate-1">
        <div className="text-center">
          <div className="flex justify-center mb-4">
            <div className="w-16 h-16 bg-purple-500 border-4 border-black rounded-full flex items-center justify-center">
              {getStatusIcon()}
            </div>
          </div>
          
          <h2 className="text-2xl font-black uppercase text-black mb-2">
            {status === 'completed' ? 'Audio Ready!' : 'Generating Audio'}
          </h2>
          
          <p className="text-gray-600 mb-6">
            {getStatusMessage()}
          </p>
          
          {status === 'generating' && (
            <div className="mb-6">
              <Progress value={progress} className="h-3 mb-2" />
              <p className="text-sm text-gray-500">{getProgressMessage()}</p>
            </div>
          )}
          
          {status === 'completed' && (
            <div className="space-y-4">
              <div className="bg-purple-50 p-4 rounded-lg border-2 border-black">
                <h3 className="font-black uppercase text-sm mb-2">Your Audio</h3>
                <p className="text-sm text-gray-700">{audioName}</p>
              </div>
              
              <div className="flex gap-3">
                <Button 
                  onClick={onDownload}
                  className="flex-1 bg-purple-500 hover:bg-purple-600 text-white font-black uppercase"
                >
                  Download
                </Button>
                <Button 
                  onClick={onVerify}
                  className="flex-1 bg-green-500 hover:bg-green-600 text-white font-black uppercase"
                >
                  Verify
                </Button>
              </div>
            </div>
          )}
          
          {status === 'error' && (
            <Button 
              onClick={onClose}
              className="bg-red-500 hover:bg-red-600 text-white font-black uppercase"
            >
              Try Again
            </Button>
          )}
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/call-analytics-modal.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { cn } from '@/lib/utils';
import { 
  UilPlay,
  UilPause,
  UilSearch,
  UilExport,
  UilLocationPoint,
  UilEdit,
  UilAngleLeft,
  UilAngleRight,
  UilVolumeUp,
  UilVolumeMute
} from '@tooni/iconscout-unicons-react';
// import WaveformVisualizer from './waveform-visualizer';
// import { useWaveformData } from '@/hooks/useWaveformData';

interface CallAnalyticsData {
  callInfo: {
    callId: string;
    agent: string;
    customer: string;
    phone: string;
    status: string;
  };
  timing: {
    startTime: string;
    endTime: string;
    duration: string;
    queueTime: string;
    holdTime: string;
  };
  metrics: {
    resolution: string;
    transfer: boolean;
    sentiment: string;
    qualityScore: string;
  };
  callFlow: Array<{
    step: number;
    title: string;
    description: string;
    color: string;
  }>;
  customerProfile: {
    name: string;
    initials: string;
    type: string;
    accountType: string;
    customerSince: string;
    previousCalls: number;
    satisfaction: string;
    lastContact: string;
  };
  transcript: Array<{
    timestamp: string;
    speaker: 'agent' | 'customer' | 'system';
    content: string;
    sentiment?: 'positive' | 'negative' | 'neutral';
  }>;
  aiInsights: {
    topics: Array<{
      name: string;
      type: 'positive' | 'negative' | 'empathetic' | 'unhelpful';
    }>;
    events: Array<{
      name: string;
      timestamp: string;
      type: 'green' | 'blue' | 'red' | 'orange';
    }>;
  };
  timeline: Array<{
    timestamp: string;
    event: string;
    description: string;
    type: 'incoming' | 'connected' | 'hold' | 'transfer' | 'resolution' | 'system';
    duration?: string;
  }>;
  qualitySummary: {
    overallScore: number;
    categories: Array<{
      name: string;
      score: number;
      maxScore: number;
      color: string;
    }>;
    improvements: Array<{
      area: string;
      suggestion: string;
      priority: 'high' | 'medium' | 'low';
    }>;
    strengths: Array<string>;
  };
  auditTrail: Array<{
    timestamp: string;
    user: string;
    action: string;
    details: string;
    system: string;
  }>;
  customerJourney: {
    touchpoints: Array<{
      date: string;
      type: string;
      channel: string;
      outcome: string;
      status: 'positive' | 'negative' | 'neutral';
    }>;
    satisfaction: Array<{
      date: string;
      score: number;
      feedback?: string;
    }>;
    issues: Array<{
      date: string;
      issue: string;
      resolution: string;
      status: 'resolved' | 'pending' | 'escalated';
    }>;
  };
}

interface CallAnalyticsModalProps {
  isOpen: boolean;
  onClose: () => void;
  data: CallAnalyticsData;
}

export default function CallAnalyticsModal({ isOpen, onClose, data }: CallAnalyticsModalProps) {
  const [activeTab, setActiveTab] = React.useState('transcript');
  const [audioSectionHeight, setAudioSectionHeight] = React.useState(200);
  const [isDragging, setIsDragging] = React.useState(false);
  const [isCollapsed, setIsCollapsed] = React.useState(false);
  
  // // MOCK: Initialize waveform data hook with call ID
  // const {
  //   callData,
  //   loading: waveformLoading,
  //   error: waveformError,
  //   playbackState,
  //   play,
  //   pause,
  //   seekTo,
  //   setPlaybackRate,
  //   setVolume,
  //   toggleMute,
  //   addAnnotation,
  //   isLive,
  //   getTranscriptAtTime
  // } = useWaveformData(data.callInfo.callId);
  
  // // Utility function to format time
  // const formatTime = (ms: number): string => {
  //   const seconds = Math.floor(ms / 1000);
  //   const minutes = Math.floor(seconds / 60);
  //   const remainingSeconds = seconds % 60;
  //   return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  // };

  // Ensure audio section height doesn't exceed available space on mount
  React.useEffect(() => {
    if (isOpen) {
      const timeout = setTimeout(() => {
        const modalContainer = document.querySelector('.modal-container');
        if (modalContainer) {
          const modalRect = modalContainer.getBoundingClientRect();
          const isMobile = window.innerWidth < 640;
        const isTablet = window.innerWidth >= 640 && window.innerWidth < 1024;
          
          // Calculate header heights dynamically
          const headerElement = modalContainer.querySelector('.border-b-2, .border-b-4');
          const tabsElement = modalContainer.querySelector('.bg-black');
          const headerHeight = headerElement ? headerElement.getBoundingClientRect().height : (isMobile ? 120 : 140);
          const tabsHeight = tabsElement ? tabsElement.getBoundingClientRect().height : (isMobile ? 60 : 80);
          
          // Calculate available space more accurately
          const reservedSpace = headerHeight + tabsHeight + (isMobile ? 250 : 350); // content area + margins
          const availableHeight = Math.max(0, modalRect.height - reservedSpace);
          
          // Calculate minimum height needed for right panel content
          // Play button area (80px) + Speed control (60px) + Volume control (160px) + padding (20px) = 320px
          const rightPanelMinHeight = isMobile ? 150 : 320;
          const minHeight = Math.max(isMobile ? 120 : 180, rightPanelMinHeight);
          const maxHeight = isMobile ? 250 : 500;
          const optimalHeight = Math.min(maxHeight, Math.max(minHeight, availableHeight));
          
          setAudioSectionHeight(optimalHeight);
        }
      }, 150); // Increased timeout to ensure DOM is ready
      return () => clearTimeout(timeout);
    }
  }, [isOpen]);

  if (!isOpen) return null;

  const getStatusBadgeColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'completed': return 'bg-green-400 text-black';
      case 'resolved': return 'bg-green-400 text-black';
      case 'pending': return 'bg-yellow-400 text-black';
      case 'failed': return 'bg-red-400 text-white';
      default: return 'bg-gray-400 text-black';
    }
  };

  const getSentimentColor = (sentiment?: string) => {
    switch (sentiment) {
      case 'positive': return 'text-green-600 font-black';
      case 'negative': return 'text-red-600 font-black';
      default: return '';
    }
  };

  const getSpeakerColor = (speaker: string) => {
    switch (speaker) {
      case 'agent': return 'bg-green-400';
      case 'customer': return 'bg-blue-400';
      case 'system': return 'bg-gray-400';
      default: return 'bg-gray-400';
    }
  };

  const getTopicBadgeColor = (type: string) => {
    switch (type) {
      case 'positive': return 'bg-green-400 text-black';
      case 'negative': return 'bg-red-400 text-white';
      case 'empathetic': return 'bg-blue-400 text-white';
      case 'unhelpful': return 'bg-orange-400 text-black';
      default: return 'bg-gray-400 text-black';
    }
  };

  const getEventColor = (type: string) => {
    switch (type) {
      case 'green': return 'bg-green-400';
      case 'blue': return 'bg-blue-400';
      case 'red': return 'bg-red-400';
      case 'orange': return 'bg-orange-400';
      default: return 'bg-gray-400';
    }
  };

  const getTimelineEventColor = (type: string) => {
    switch (type) {
      case 'incoming': return 'bg-blue-400';
      case 'connected': return 'bg-green-400';
      case 'hold': return 'bg-yellow-400';
      case 'transfer': return 'bg-purple-400';
      case 'resolution': return 'bg-green-600';
      case 'system': return 'bg-gray-400';
      default: return 'bg-gray-400';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-400 text-white';
      case 'medium': return 'bg-yellow-400 text-black';
      case 'low': return 'bg-green-400 text-black';
      default: return 'bg-gray-400 text-black';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'positive': return 'bg-green-400 text-black';
      case 'negative': return 'bg-red-400 text-white';
      case 'neutral': return 'bg-gray-400 text-black';
      case 'resolved': return 'bg-green-400 text-black';
      case 'pending': return 'bg-yellow-400 text-black';
      case 'escalated': return 'bg-red-400 text-white';
      default: return 'bg-gray-400 text-black';
    }
  };

  const handleMouseDown = (e: React.MouseEvent) => {
    setIsDragging(true);
    e.preventDefault();
  };

  const handleMouseMove = React.useCallback((e: MouseEvent | TouchEvent) => {
    if (!isDragging) return;
    
    // Get the modal container and audio section elements
    const modalContainer = document.querySelector('.modal-container');
    const audioSection = document.querySelector('.audio-section');
    
    if (!audioSection || !modalContainer) return;
    
    const modalRect = modalContainer.getBoundingClientRect();
    const clientY = 'touches' in e ? e.touches[0].clientY : e.clientY;
    const isMobile = window.innerWidth < 640;
    const isTablet = window.innerWidth >= 640 && window.innerWidth < 1024;
    
    // Calculate new height based on pointer position relative to audio section top
    const audioSectionTop = audioSection.getBoundingClientRect().top;
    const newHeight = clientY - audioSectionTop;
    
    // Calculate minimum height based on device type
    const deviceMinHeight = isMobile ? 340 : isTablet ? 290 : 250;
    const minHeight = deviceMinHeight;
    const contentAreaMinHeight = isMobile ? 200 : 300;
    
    // Calculate available space more precisely
    const headerElement = modalContainer.querySelector('.border-b-2, .border-b-4');
    const tabsElement = modalContainer.querySelector('.bg-black');
    const headerHeight = headerElement ? headerElement.getBoundingClientRect().height : (isMobile ? 120 : 140);
    const tabsHeight = tabsElement ? tabsElement.getBoundingClientRect().height : (isMobile ? 60 : 80);
    
    // Calculate max height ensuring content area has minimum space
    const usedSpace = headerHeight + tabsHeight + contentAreaMinHeight + 40; // 40px margins
    const maxHeight = Math.max(minHeight, modalRect.height - usedSpace);
    
    // Apply constraints - ensure right panel is always fully visible
    const finalMaxHeight = Math.min(maxHeight, isMobile ? 300 : 600);
    
    if (newHeight < minHeight) {
      setIsCollapsed(true);
      setAudioSectionHeight(0);
    } else {
      setIsCollapsed(false);
      setAudioSectionHeight(Math.min(Math.max(newHeight, minHeight), finalMaxHeight));
    }
  }, [isDragging]);

  const handleMouseUp = React.useCallback(() => {
    setIsDragging(false);
  }, []);

  React.useEffect(() => {
    if (isDragging) {
      const handleTouchMove = (e: TouchEvent) => handleMouseMove(e);
      const handleTouchEnd = () => handleMouseUp();
      
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      document.addEventListener('touchmove', handleTouchMove, { passive: false });
      document.addEventListener('touchend', handleTouchEnd);
      
      return () => {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
        document.removeEventListener('touchmove', handleTouchMove);
        document.removeEventListener('touchend', handleTouchEnd);
      };
    }
  }, [isDragging, handleMouseMove, handleMouseUp]);

  // Handle window resize to adjust audio section height
  React.useEffect(() => {
    if (!isOpen) return;
    
    const handleResize = () => {
      const modalContainer = document.querySelector('.modal-container');
      if (modalContainer && !isCollapsed) {
        const modalRect = modalContainer.getBoundingClientRect();
        const isMobile = window.innerWidth < 640;
        const isTablet = window.innerWidth >= 640 && window.innerWidth < 1024;
        
        // Calculate all content heights
        const headerElement = modalContainer.querySelector('.border-b-2, .border-b-4');
        const tabsElement = modalContainer.querySelector('.bg-black');
        const headerHeight = headerElement ? headerElement.getBoundingClientRect().height : (isMobile ? 120 : 140);
        const tabsHeight = tabsElement ? tabsElement.getBoundingClientRect().height : (isMobile ? 60 : 80);
        
        // Calculate minimum height based on mobile content
        // Mobile needs to fit all content without cutting off navigation
        const mobileContentHeight = isMobile ? 
          48 + // Header bar with transfer info
          8 + // Padding
          40 + // Play controls row + margin
          36 + // Volume row + margin  
          60 + // Waveform + margin
          40 + // Add buttons row + margin
          44 + // Navigation row + margin
          16 + // Resize handle
          8 : 0; // Extra padding
        
        const desktopContentHeight = !isMobile ?
          (40 + 16) + // Controls row + margin
          (80 + 16) + // Waveform + margin
          (40 + 12) + // Action buttons + margin
          12 : 0; // Resize handle
        
        const minContentHeight = isMobile ? mobileContentHeight : desktopContentHeight;
        const contentAreaMinHeight = isMobile ? 200 : 300;
        const reservedSpace = headerHeight + tabsHeight + contentAreaMinHeight;
        const availableHeight = Math.max(0, modalRect.height - reservedSpace);
        
        // Set minimum height based on device type
        const deviceMinHeight = isMobile ? 340 : isTablet ? 290 : 250;
        const minHeight = Math.max(minContentHeight, deviceMinHeight);
        const maxHeight = Math.min(isMobile ? 400 : 500, availableHeight);
        
        const currentHeight = audioSectionHeight;
        
        // Force adjustment when switching to mobile to ensure content fits
        if (isMobile && currentHeight < minHeight) {
          setAudioSectionHeight(minHeight);
        } else if (currentHeight > maxHeight) {
          setAudioSectionHeight(Math.max(minHeight, maxHeight));
        } else if (currentHeight < minHeight) {
          setAudioSectionHeight(minHeight);
        }
      }
    };
    
    // Run immediately and on resize
    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [isOpen, isCollapsed, audioSectionHeight]);

  // Initial setup effect to ensure proper mobile positioning
  React.useEffect(() => {
    if (!isOpen || isCollapsed) return;
    
    const isMobile = window.innerWidth < 640;
    const isTablet = window.innerWidth >= 640 && window.innerWidth < 1024;
    
    // Set initial height based on device type
    const modalContainer = document.querySelector('.modal-container');
    if (modalContainer) {
      // Set minimum height based on device
      const deviceMinHeight = isMobile ? 340 : isTablet ? 290 : 250;
      if (audioSectionHeight < deviceMinHeight) {
        setAudioSectionHeight(deviceMinHeight);
      }
    }
  }, [isOpen, isCollapsed]);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-0 sm:p-4">
      <div className="modal-container bg-white border-0 sm:border-4 border-black shadow-none sm:shadow-[8px_8px_0_rgba(0,0,0,1)] w-full h-full sm:max-w-6xl sm:h-5/6 sm:max-h-[calc(100vh-2rem)] flex flex-col">
        {/* Modal Header */}
        <div className="border-b-2 sm:border-b-4 border-black bg-gray-100 flex-shrink-0">
          {/* Mobile Header */}
          <div className="sm:hidden p-3 safe-area-top">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-2">
                <h2 className="text-base font-black uppercase truncate">OUTBOUND ANALYTICS</h2>
                <Badge className="bg-green-400 text-black border border-black font-bold uppercase text-xs px-1 flex-shrink-0">
                  TRANS
                </Badge>
              </div>
              <Button 
                onClick={onClose}
                size="sm"
                className="w-8 h-8 p-0 bg-red-500 hover:bg-red-600 text-white border-2 border-black font-black text-lg flex-shrink-0"
              >
                ×
              </Button>
            </div>
            <div className="bg-white border-2 border-black p-2">
              <div className="font-black text-sm mb-1 truncate">{data.callInfo.agent}</div>
              <div className="flex items-center justify-between text-xs">
                <span className="font-bold">{data.timing.duration}</span>
                <span className="text-gray-600">{data.timing.startTime.split(' ')[1]}</span>
              </div>
            </div>
          </div>
          
          {/* Desktop Header */}
          <div className="hidden sm:block p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <h2 className="text-xl font-black uppercase">Outbound Campaign Analytics - {data.callInfo.agent}</h2>
                <Badge className="bg-green-400 text-black border-2 border-black font-bold uppercase">
                  TRANSFERRED
                </Badge>
              </div>
              <Button 
                onClick={onClose}
                size="sm"
                className="bg-red-500 hover:bg-red-600 text-white border-2 border-black font-black text-xl px-3 py-2"
              >
                ×
              </Button>
            </div>
            <div className="flex items-center gap-6 mt-2 text-sm">
              <span className="font-bold">CALL START TIME: {data.timing.startTime}</span>
              <span className="font-bold">DURATION: {data.timing.duration}</span>
              <span className="font-bold">CALL END TIME: {data.timing.endTime}</span>
            </div>
          </div>
        </div>

        {/* Modal Tabs */}
        <div className="border-b-2 sm:border-b-4 border-black bg-black flex-shrink-0">
          {/* Mobile: Dropdown Tabs */}
          <div className="sm:hidden p-2">
            <select
              value={activeTab}
              onChange={(e) => setActiveTab(e.target.value)}
              className="w-full px-3 py-3 border-2 border-black font-bold uppercase text-sm bg-white focus:outline-none appearance-none"
            >
              <option value="details">DETAILS</option>
              <option value="timeline">TIMELINE</option>
              <option value="quality-summary">QUALITY SUMMARY</option>
              <option value="transcript">TRANSCRIPT</option>
              <option value="audit-trail">AUDIT TRAIL</option>
              <option value="customer-journeys">CUSTOMER JOURNEYS</option>
            </select>
          </div>
          
          {/* Desktop: Button Tabs */}
          <div className="hidden sm:block relative z-20">
            <div className="flex overflow-x-auto relative z-20">
              {['details', 'timeline', 'quality-summary', 'transcript', 'audit-trail', 'customer-journeys'].map((tab) => (
                <Button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  variant="reverse"
                  size="lg"
                  className="whitespace-nowrap flex-shrink-0 border-0 relative z-30"
                  style={{ 
                    backgroundColor: activeTab === tab ? '' : 'white'
                  }}
                  onMouseEnter={(e) => {
                    if (activeTab !== tab) {
                      e.currentTarget.style.setProperty('background-color', '#7dd3fc', 'important');
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (activeTab !== tab) {
                      e.currentTarget.style.setProperty('background-color', 'white', 'important');
                    }
                  }}
                >
                  {tab.replace('-', ' ')}
                </Button>
              ))}
            </div>
          </div>
        </div>

        {/* Audio Visualization Section */}
        {!isCollapsed && (
          <div 
            className="audio-section border-b-2 sm:border-b-4 border-black bg-gray-50 relative flex-shrink-0"
            style={{ height: `${audioSectionHeight}px` }}
          >
          {/* Simple Header Bar */}
          <div className="bg-gray-100 border-b-2 border-black p-3 flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="bg-blue-400 text-white px-3 py-1 border-2 border-black font-bold uppercase text-sm">
                ↗ TRANSFERRED
              </div>
              <span className="font-bold text-sm">AI Sales Agent → Taylor Smith</span>
            </div>
            <div className="text-sm text-gray-600">Duration: 4:01</div>
          </div>

          {/* Audio Timeline */}
          <div className="bg-white p-2 sm:p-4">
            {/* Mobile Controls Row */}
            <div className="sm:hidden">
              {/* First row: Play button and time */}
              <div className="flex items-center justify-between mb-3">
                <Button 
                  size="sm" 
                  variant="reverse"
                  className="bg-green-400 hover:bg-green-500 text-black px-3 py-2 text-xs border-0 relative z-10"
                >
                  <UilPlay className="h-3 w-3 mr-1" />
                  PLAY
                </Button>
                <div className="font-bold text-xs">00:43 / 4:01</div>
                <div className="bg-yellow-400 text-black px-2 py-1 border-2 border-black font-bold text-xs">1.0x</div>
              </div>
              {/* Second row: Volume */}
              <div className="flex items-center gap-2 mb-3">
                <span className="text-xs font-bold flex-shrink-0">VOL</span>
                <div className="flex-1 h-2 bg-gray-300 border border-black relative max-w-32">
                  <div className="absolute left-0 top-0 h-full bg-blue-400" style={{ width: '75%' }}></div>
                  <div className="absolute top-0 w-2 h-2 bg-white border border-black cursor-pointer" style={{ left: '75%', marginLeft: '-4px' }}></div>
                </div>
                <span className="text-xs font-bold flex-shrink-0">75%</span>
              </div>
            </div>
            
            {/* Desktop Controls Row */}
            <div className="hidden sm:flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <Button 
                  size="sm" 
                  variant="reverse"
                  className="bg-green-400 hover:bg-green-500 text-black border-0 relative z-10"
                >
                  <UilPlay className="h-4 w-4 mr-2" />
                  PLAY
                </Button>
                <div className="font-bold text-sm">00:43 / 4:01</div>
                <div className="bg-yellow-400 text-black px-3 py-1 border-2 border-black font-bold text-sm">1.0x</div>
              </div>
              <div className="flex items-center gap-3">
                <span className="text-xs font-bold">VOLUME</span>
                <div className="w-24 h-3 bg-gray-300 border-2 border-black relative">
                  <div className="absolute left-0 top-0 h-full bg-blue-400" style={{ width: '75%' }}></div>
                  <div className="absolute top-0 w-3 h-3 bg-white border-2 border-black cursor-pointer" style={{ left: '75%', marginLeft: '-6px' }}></div>
                </div>
                <span className="text-xs font-bold">75%</span>
              </div>
            </div>
            
            {/* Mobile Waveform */}
            <div className="sm:hidden relative h-12 bg-gray-100 border border-black mb-3 overflow-hidden">
              <div className="flex items-end h-full px-1 gap-0.5">
                {Array.from({ length: 60 }, (_, i) => (
                  <div
                    key={i}
                    className="bg-gray-400 flex-1 min-w-0"
                    style={{
                      height: `${Math.random() * 70 + 10}%`,
                      backgroundColor: i < 15 ? '#3b82f6' : i < 30 ? '#10b981' : i < 45 ? '#f59e0b' : '#6b7280'
                    }}
                  />
                ))}
              </div>
              <div className="absolute top-0 bottom-0 w-0.5 bg-red-500 z-10" style={{ left: '25%' }}></div>
            </div>
            
            {/* Desktop Waveform */}
            <div className="hidden sm:block relative h-20 bg-gray-100 border-2 border-black mb-4">
              <div className="flex items-end h-full px-2 gap-1">
                {Array.from({ length: 120 }, (_, i) => (
                  <div
                    key={i}
                    className="bg-gray-400 w-1"
                    style={{
                      height: `${Math.random() * 70 + 10}%`,
                      backgroundColor: i < 30 ? '#3b82f6' : i < 60 ? '#10b981' : i < 90 ? '#f59e0b' : '#6b7280'
                    }}
                  />
                ))}
              </div>
              <div className="absolute top-0 bottom-0 w-1 bg-red-500 z-10" style={{ left: '25%' }}></div>
            </div>
            
            {/* Mobile Action Buttons */}
            <div className="sm:hidden">
              {/* First row: Add buttons */}
              <div className="flex items-center gap-2 mb-2">
                <Button size="sm" variant="reverse" className="flex-1 text-xs py-2 border-0 relative z-10">
                  <UilEdit className="h-3 w-3 mr-1" />
                  Add Note
                </Button>
                <Button size="sm" variant="reverse" className="flex-1 text-xs py-2 border-0 relative z-10">
                  <UilLocationPoint className="h-3 w-3 mr-1" />
                  Mark Event
                </Button>
              </div>
              {/* Second row: Navigation */}
              <div className="flex items-center justify-center gap-2 mb-4">
                <Button size="sm" variant="reverse" className="px-3 py-2 border-0 relative z-10">
                  <UilAngleLeft className="h-3 w-3" />
                </Button>
                <span className="text-xs font-bold px-3 py-1 bg-gray-100 border border-black">1 of 2</span>
                <Button size="sm" variant="reverse" className="px-3 py-2 border-0 relative z-10">
                  <UilAngleRight className="h-3 w-3" />
                </Button>
              </div>
            </div>
            
            {/* Desktop Action Buttons */}
            <div className="hidden sm:flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Button size="sm" variant="reverse" className="border-0 relative z-10">
                  <UilEdit className="h-3 w-3 mr-1" />
                  Add Note
                </Button>
                <Button size="sm" variant="reverse" className="border-0 relative z-10">
                  <UilLocationPoint className="h-3 w-3 mr-1" />
                  Mark Event
                </Button>
              </div>
              <div className="flex items-center gap-2">
                <Button size="sm" variant="reverse" className="border-0 relative z-10">
                  <UilAngleLeft className="h-4 w-4 mr-1" />
                  PREV
                </Button>
                <span className="text-sm font-bold px-3">1 of 2</span>
                <Button size="sm" variant="reverse" className="border-0 relative z-10">
                  NEXT
                  <UilAngleRight className="h-4 w-4 ml-1" />
                </Button>
              </div>
            </div>
          </div>
          
          {/* Resize Handle */}
          <div 
            className={cn(
              "absolute bottom-0 left-0 right-0 h-4 bg-gray-300 border-t-2 border-black cursor-ns-resize hover:bg-gray-400 active:bg-gray-400 flex items-center justify-center transition-colors touch-manipulation",
              isDragging && "bg-blue-300"
            )}
            onMouseDown={handleMouseDown}
            onTouchStart={(e) => {
              const touch = e.touches[0];
              handleMouseDown({
                clientY: touch.clientY,
                preventDefault: () => e.preventDefault()
              } as React.MouseEvent);
            }}
          >
            <div className="w-16 h-1 sm:w-12 bg-gray-600 rounded"></div>
          </div>
          </div>
        )}

        {/* Collapsed Audio Section Indicator */}
        {isCollapsed && (
          <div className="border-b-2 sm:border-b-4 border-black bg-gray-100 p-2 flex items-center justify-center">
            <Button 
              size="sm" 
              variant="neutral"
              onClick={() => {
                setIsCollapsed(false);
                const isMobile = window.innerWidth < 640;
        const isTablet = window.innerWidth >= 640 && window.innerWidth < 1024;
                // Use minimum height that ensures right panel content is fully visible
                const rightPanelMinHeight = isMobile ? 150 : 320;
                setAudioSectionHeight(rightPanelMinHeight);
              }}
            >
              <span className="text-xs">↓ Show Audio Timeline</span>
            </Button>
          </div>
        )}

        {/* Modal Content */}
        <div className="modal-content-area flex-1 flex flex-col sm:flex-row overflow-hidden min-h-0">
          {/* Main Content Area */}
          <div className="flex-1 p-2 sm:p-4 overflow-y-auto overflow-x-hidden">
            {activeTab === 'details' && (
              <div className="p-2 sm:p-6 space-y-4 sm:space-y-6 pb-safe">
                {/* Call Information Grid */}
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
                  {/* Basic Information */}
                  <div className="bg-white p-3 sm:p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="font-black uppercase text-xs sm:text-sm mb-3 text-gray-600">CAMPAIGN INFORMATION</h3>
                    <div className="space-y-2 text-xs sm:text-sm">
                      <div className="flex justify-between">
                        <span className="font-bold">Campaign ID:</span>
                        <span>{data.callInfo.callId}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">AI Agent:</span>
                        <span>{data.callInfo.agent}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Prospect:</span>
                        <span>{data.callInfo.customer}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Phone:</span>
                        <span>{data.callInfo.phone}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Status:</span>
                        <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", getStatusBadgeColor(data.callInfo.status))}>
                          {data.callInfo.status}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Timing Information */}
                  <div className="bg-white p-3 sm:p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="font-black uppercase text-xs sm:text-sm mb-3 text-gray-600">TIMING</h3>
                    <div className="space-y-2 text-xs sm:text-sm">
                      <div className="flex justify-between">
                        <span className="font-bold">Start Time:</span>
                        <span>{data.timing.startTime}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">End Time:</span>
                        <span>{data.timing.endTime}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Duration:</span>
                        <span className="font-black text-lg">{data.timing.duration}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Queue Time:</span>
                        <span>{data.timing.queueTime}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Hold Time:</span>
                        <span>{data.timing.holdTime}</span>
                      </div>
                    </div>
                  </div>

                  {/* Call Metrics */}
                  <div className="bg-white p-3 sm:p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="font-black uppercase text-xs sm:text-sm mb-3 text-gray-600">METRICS</h3>
                    <div className="space-y-2 text-xs sm:text-sm">
                      <div className="flex justify-between">
                        <span className="font-bold">Resolution:</span>
                        <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", getStatusBadgeColor(data.metrics.resolution))}>
                          {data.metrics.resolution}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Transfer:</span>
                        <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", data.metrics.transfer ? "bg-blue-400 text-white" : "bg-gray-400 text-black")}>
                          {data.metrics.transfer ? 'YES' : 'NO'}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Sentiment:</span>
                        <span className="px-2 py-1 bg-yellow-400 border border-black text-xs font-bold uppercase">{data.metrics.sentiment}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Quality Score:</span>
                        <span className="font-black text-lg text-green-600">{data.metrics.qualityScore}</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Additional Details */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-3 sm:gap-6">
                  {/* Call Flow */}
                  <div className="bg-white p-3 sm:p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="font-black uppercase text-xs sm:text-sm mb-3 sm:mb-4 text-gray-600">CALL FLOW</h3>
                    <div className="space-y-2 sm:space-y-3">
                      {data.callFlow.map((step) => (
                        <div key={step.step} className="flex items-center gap-2 sm:gap-3">
                          <div className={cn("w-6 h-6 sm:w-8 sm:h-8 border-2 border-black flex items-center justify-center text-white font-black text-xs flex-shrink-0", step.color)}>
                            {step.step}
                          </div>
                          <div className="min-w-0">
                            <div className="font-bold text-xs sm:text-sm truncate">{step.title}</div>
                            <div className="text-xs text-gray-600 line-clamp-2">{step.description}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Customer Information */}
                  <div className="bg-white p-3 sm:p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="font-black uppercase text-xs sm:text-sm mb-3 sm:mb-4 text-gray-600">CUSTOMER PROFILE</h3>
                    <div className="space-y-2 sm:space-y-3">
                      <div className="flex items-center gap-2 sm:gap-3">
                        <div className="w-10 h-10 sm:w-12 sm:h-12 bg-pink-400 border-2 border-black flex items-center justify-center font-black text-white text-sm sm:text-lg flex-shrink-0">
                          {data.customerProfile.initials}
                        </div>
                        <div className="min-w-0">
                          <div className="font-black text-sm sm:text-lg truncate">{data.customerProfile.name}</div>
                          <div className="text-xs sm:text-sm text-gray-600">{data.customerProfile.type}</div>
                        </div>
                      </div>
                      <div className="border-t-2 border-gray-200 pt-2 sm:pt-3 space-y-2 text-xs sm:text-sm">
                        <div className="flex justify-between">
                          <span className="font-bold">Account Type:</span>
                          <span className="px-2 py-1 bg-yellow-400 border border-black text-xs font-bold uppercase">{data.customerProfile.accountType}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="font-bold">Customer Since:</span>
                          <span>{data.customerProfile.customerSince}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="font-bold">Previous Calls:</span>
                          <span className="font-bold">{data.customerProfile.previousCalls}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="font-bold">Satisfaction:</span>
                          <span className="font-black text-green-600">{data.customerProfile.satisfaction}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="font-bold">Last Contact:</span>
                          <span>{data.customerProfile.lastContact}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'transcript' && (
              <div className="space-y-3 p-2 sm:p-0 pb-safe">
                {/* Mobile: Simplified Controls */}
                <div className="sm:hidden">
                  <div className="flex items-center gap-2 mb-3">
                    <Input 
                      placeholder="Search transcript..."
                      className="flex-1 text-sm h-9"
                    />
                    <Button size="sm" variant="reverse" className="px-3 h-9 flex-shrink-0 border-0 relative z-10">
                      <UilSearch className="h-4 w-4" />
                    </Button>
                  </div>
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex gap-2">
                      <Button size="sm" variant="reverse" className="px-3 text-xs h-8 border-0 relative z-10">
                        <UilEdit className="h-3 w-3 mr-1" />
                        Add
                      </Button>
                      <Button size="sm" variant="reverse" className="px-3 text-xs h-8 border-0 relative z-10">
                        <UilLocationPoint className="h-3 w-3 mr-1" />
                        Mark
                      </Button>
                    </div>
                    <Button size="sm" variant="reverse" className="px-3 text-xs h-8 border-0 relative z-10">
                      <UilExport className="h-3 w-3 mr-1" />
                      Export
                    </Button>
                  </div>
                </div>
                
                {/* Desktop: Full Controls */}
                <div className="hidden sm:flex items-center gap-2 text-sm mb-4">
                  <Button size="sm" variant="reverse" className="border-0 relative z-10">
                    <UilEdit className="h-4 w-4 mr-2" />
                    Add Annotation
                  </Button>
                  <Button size="sm" variant="reverse" className="border-0 relative z-10">
                    <UilLocationPoint className="h-4 w-4 mr-2" />
                    Annotate
                  </Button>
                  <Input placeholder="Search transcript..." className="w-48" />
                  <Button size="sm" variant="reverse" className="border-0 relative z-10">
                    <UilSearch className="h-4 w-4" />
                  </Button>
                  <Button size="sm" variant="reverse" className="border-0 relative z-10">
                    <UilExport className="h-4 w-4" />
                  </Button>
                </div>
                
                {/* Mobile: Compact Transcript */}
                <div className="sm:hidden space-y-3">
                  {data.transcript.map((entry, index) => (
                    <div key={index} className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      {/* Header with timing and speaker */}
                      <div className="flex items-center justify-between p-2 bg-gray-100 border-b-2 border-black">
                        <div className="flex items-center gap-2">
                          <div className={cn("w-6 h-6 border border-black rounded-full flex items-center justify-center text-xs font-black text-white", getSpeakerColor(entry.speaker))}>
                            {entry.speaker.charAt(0).toUpperCase()}
                          </div>
                          <div className="bg-black text-white px-2 py-1 font-black text-xs">
                            {entry.timestamp}
                          </div>
                        </div>
                        {entry.sentiment && (
                          <span className={cn("text-xs px-2 py-1 border border-black font-bold uppercase", 
                            entry.sentiment === 'positive' ? 'bg-green-400 text-black' : 
                            entry.sentiment === 'negative' ? 'bg-red-400 text-white' : 'bg-gray-400 text-black'
                          )}>
                            {entry.sentiment}
                          </span>
                        )}
                      </div>
                      {/* Content with offset background */}
                      <div className="p-3 bg-white">
                        <div className="bg-gray-50 border border-gray-300 p-2 rounded-none">
                          <p className="text-sm leading-relaxed text-gray-900">{entry.content}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                {/* Desktop: Full Transcript */}
                <div className="hidden sm:block space-y-3">
                  {data.transcript.map((entry, index) => (
                    <div key={index} className="bg-white border-2 border-black p-3 shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <div className="flex gap-4 items-start">
                        {/* Timestamp with offset background */}
                        <div className="min-w-[80px]">
                          <div className="bg-black text-white px-2 py-1 font-black text-xs text-center border border-black">
                            {entry.timestamp}
                          </div>
                        </div>
                        
                        {/* Speaker and content */}
                        <div className="flex-1">
                          <div className="flex items-start gap-3">
                            <div className={cn("w-8 h-8 border-2 border-black rounded-full flex items-center justify-center text-xs font-black text-white flex-shrink-0", getSpeakerColor(entry.speaker))}>
                              {entry.speaker.charAt(0).toUpperCase()}
                            </div>
                            <div className="flex-1">
                              {/* Speaker label */}
                              <div className="flex items-center gap-2 mb-2">
                                <span className="font-black text-sm uppercase">{entry.speaker}</span>
                                {entry.sentiment && (
                                  <span className={cn("text-xs px-2 py-1 border border-black font-bold uppercase", 
                                    entry.sentiment === 'positive' ? 'bg-green-400 text-black' : 
                                    entry.sentiment === 'negative' ? 'bg-red-400 text-white' : 'bg-gray-400 text-black'
                                  )}>
                                    {entry.sentiment}
                                  </span>
                                )}
                              </div>
                              {/* Content with offset background */}
                              <div className="bg-gray-50 border-2 border-gray-300 p-3">
                                <p className="text-sm leading-relaxed text-gray-900">{entry.content}</p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {activeTab === 'timeline' && (
              <div className="p-2 sm:p-6 space-y-4 sm:space-y-6 pb-safe">
                {/* Mobile: Compact Timeline */}
                <div className="sm:hidden">
                  <div className="bg-white border-2 border-black p-3 mb-3">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-black uppercase text-sm">CALL TIMELINE</h3>
                      <span className="text-xs text-gray-600">6 events</span>
                    </div>
                    
                    {/* Timeline entries */}
                    <div className="space-y-3">
                      {data.timeline?.slice(0, 4).map((event, index) => (
                        <div key={index} className="flex items-start gap-3">
                          <div className="flex flex-col items-center">
                            <div className={cn("w-3 h-3 border border-black rounded-full", getTimelineEventColor(event.type))}></div>
                            {index < 3 && <div className="w-0.5 h-6 bg-gray-300 mt-1"></div>}
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center justify-between mb-1">
                              <span className="font-black text-xs">{event.timestamp.split(' ')[1]}</span>
                              {event.duration && (
                                <span className="text-xs text-gray-600">{event.duration}</span>
                              )}
                            </div>
                            <div className="font-bold text-sm mb-1 truncate">{event.event}</div>
                            <div className="text-xs text-gray-600 line-clamp-2">{event.description}</div>
                          </div>
                        </div>
                      ))}
                      
                      {(data.timeline?.length || 0) > 4 && (
                        <div className="text-center pt-2 border-t border-gray-200">
                          <button className="text-xs font-bold text-blue-600 uppercase">Show {(data.timeline?.length || 0) - 4} more events</button>
                        </div>
                      )}
                    </div>
                    
                    {/* Mobile Pagination */}
                    <div className="flex items-center justify-center gap-2 mt-4 pt-3 border-t border-gray-200">
                      <button className="w-8 h-8 border-2 border-black bg-white active:bg-gray-100 flex items-center justify-center touch-manipulation">
                        <UilAngleLeft className="h-3 w-3" />
                      </button>
                      <div className="flex gap-1">
                        <button className="w-8 h-8 border-2 border-black bg-blue-400 text-white font-bold text-xs">1</button>
                        <button className="w-8 h-8 border-2 border-black bg-white hover:bg-gray-100 font-bold text-xs">2</button>
                        <button className="w-8 h-8 border-2 border-black bg-white hover:bg-gray-100 font-bold text-xs">3</button>
                      </div>
                      <button className="w-8 h-8 border-2 border-black bg-white active:bg-gray-100 flex items-center justify-center touch-manipulation">
                        <UilAngleRight className="h-3 w-3" />
                      </button>
                    </div>
                  </div>
                </div>
                
                {/* Desktop: Full Timeline */}
                <div className="hidden sm:block">
                  <div className="bg-white p-4 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="font-black uppercase text-lg">CALL TIMELINE</h3>
                      <div className="flex items-center gap-2">
                        <span className="text-sm text-gray-600">Showing 1-6 of 6 events</span>
                        <div className="flex gap-1">
                          <Button size="sm" variant="reverse" disabled className="border-0 relative z-10">
                            <UilAngleLeft className="h-4 w-4" />
                          </Button>
                          <Button size="sm" variant="reverse" className="bg-blue-400 text-white border-0 relative z-10">1</Button>
                          <Button size="sm" variant="reverse" disabled className="border-0 relative z-10">
                            <UilAngleRight className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-4">
                      {data.timeline?.map((event, index) => (
                        <div key={index} className="flex items-start gap-4">
                          <div className="flex flex-col items-center">
                            <div className={cn("w-4 h-4 border-2 border-black", getTimelineEventColor(event.type))}></div>
                            {index < (data.timeline?.length || 0) - 1 && (
                              <div className="w-0.5 h-8 bg-gray-300 mt-2"></div>
                            )}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center justify-between mb-1">
                              <span className="font-black text-sm">{event.timestamp}</span>
                              {event.duration && (
                                <span className="text-xs text-gray-600">Duration: {event.duration}</span>
                              )}
                            </div>
                            <div className="font-bold text-sm mb-1">{event.event}</div>
                            <div className="text-sm text-gray-600">{event.description}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'quality-summary' && (
              <div className="p-6 space-y-6">
                {/* Overall Score */}
                <div className="bg-white p-6 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] text-center">
                  <h3 className="font-black uppercase text-lg mb-4">OVERALL QUALITY SCORE</h3>
                  <div className="text-6xl font-black text-green-600 mb-2">{data.qualitySummary?.overallScore || 0}</div>
                  <div className="text-lg font-bold text-gray-600">OUT OF 100</div>
                </div>

                {/* Category Scores */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-4">
                  {data.qualitySummary?.categories?.map((category, index) => (
                    <div key={index} className="bg-white p-4 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <div className="flex items-center justify-between mb-3">
                        <h4 className="font-black uppercase text-sm">{category.name}</h4>
                        <span className="font-black text-lg">{category.score}/{category.maxScore}</span>
                      </div>
                      <div className="w-full bg-gray-300 border-2 border-black h-4">
                        <div 
                          className={cn("h-full border-r-2 border-black", category.color)}
                          style={{ width: `${(category.score / category.maxScore) * 100}%` }}
                        ></div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Strengths and Improvements */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
                  {/* Strengths */}
                  <div className="bg-white p-4 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h4 className="font-black uppercase text-sm mb-4 text-green-600">STRENGTHS</h4>
                    <div className="space-y-2">
                      {data.qualitySummary?.strengths?.map((strength, index) => (
                        <div key={index} className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-green-400 border border-black"></div>
                          <span className="text-sm">{strength}</span>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Improvements */}
                  <div className="bg-white p-4 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h4 className="font-black uppercase text-sm mb-4 text-red-600">AREAS FOR IMPROVEMENT</h4>
                    <div className="space-y-3">
                      {data.qualitySummary?.improvements?.map((improvement, index) => (
                        <div key={index} className="space-y-1">
                          <div className="flex items-center justify-between">
                            <span className="font-bold text-sm">{improvement.area}</span>
                            <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", getPriorityColor(improvement.priority))}>
                              {improvement.priority}
                            </span>
                          </div>
                          <div className="text-xs text-gray-600">{improvement.suggestion}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'audit-trail' && (
              <div className="p-2 sm:p-6 pb-safe">
                {/* Mobile Card View */}
                <div className="sm:hidden space-y-3">
                  <div className="bg-gray-100 border-2 border-black p-3 mb-3">
                    <h3 className="font-black uppercase text-sm">SYSTEM AUDIT TRAIL</h3>
                    <span className="text-xs text-gray-600">{data.auditTrail?.length || 0} entries</span>
                  </div>
                  
                  {data.auditTrail?.map((entry, index) => (
                    <div key={index} className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      {/* Card Header */}
                      <div className="bg-gray-100 border-b-2 border-black p-2 flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <span className="font-mono text-xs">{entry.timestamp.split(' ')[1]}</span>
                          <span className="px-2 py-0.5 bg-blue-400 border border-black text-xs font-bold uppercase text-white">
                            {entry.action}
                          </span>
                        </div>
                        <span className="font-mono text-xs text-gray-600">{entry.system}</span>
                      </div>
                      
                      {/* Card Body */}
                      <div className="p-3 space-y-2">
                        <div className="flex items-center gap-2">
                          <span className="text-xs font-bold text-gray-600">USER:</span>
                          <span className="font-bold text-sm">{entry.user}</span>
                        </div>
                        <div>
                          <span className="text-xs font-bold text-gray-600 block mb-1">DETAILS:</span>
                          <div className="bg-gray-50 border border-gray-300 p-2">
                            <p className="text-xs leading-relaxed">{entry.details}</p>
                          </div>
                        </div>
                        <div className="text-xs text-gray-500 font-mono pt-1">
                          {entry.timestamp.split(' ')[0]}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                {/* Tablet View - Compact Table */}
                <div className="hidden sm:block lg:hidden">
                  <div className="bg-white border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <div className="border-b-4 border-black bg-gray-100 p-3">
                      <h3 className="font-black uppercase text-base">SYSTEM AUDIT TRAIL</h3>
                    </div>
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b-2 border-black bg-gray-100">
                            <th className="text-left p-2 font-black uppercase text-xs">TIME</th>
                            <th className="text-left p-2 font-black uppercase text-xs">USER</th>
                            <th className="text-left p-2 font-black uppercase text-xs">ACTION</th>
                            <th className="text-left p-2 font-black uppercase text-xs">DETAILS</th>
                          </tr>
                        </thead>
                        <tbody>
                          {data.auditTrail?.map((entry, index) => (
                            <tr key={index} className={cn(
                              "border-b border-gray-300",
                              index % 2 === 0 ? "bg-white" : "bg-gray-50"
                            )}>
                              <td className="p-2 font-mono text-xs">{entry.timestamp.split(' ')[1]}</td>
                              <td className="p-2 font-bold text-xs">{entry.user}</td>
                              <td className="p-2 text-xs">
                                <span className="px-1 py-0.5 bg-blue-400 border border-black text-xs font-bold uppercase text-white">
                                  {entry.action}
                                </span>
                              </td>
                              <td className="p-2 text-xs max-w-xs truncate">{entry.details}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
                
                {/* Desktop Full Table */}
                <div className="hidden lg:block">
                  <div className="bg-white border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <div className="border-b-4 border-black bg-gray-100 p-4">
                      <h3 className="font-black uppercase text-lg">SYSTEM AUDIT TRAIL</h3>
                    </div>
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b-4 border-black bg-gray-100">
                            <th className="text-left p-4 font-black uppercase text-sm">TIMESTAMP</th>
                            <th className="text-left p-4 font-black uppercase text-sm">USER</th>
                            <th className="text-left p-4 font-black uppercase text-sm">ACTION</th>
                            <th className="text-left p-4 font-black uppercase text-sm">DETAILS</th>
                            <th className="text-left p-4 font-black uppercase text-sm">SYSTEM</th>
                          </tr>
                        </thead>
                        <tbody>
                          {data.auditTrail?.map((entry, index) => (
                            <tr key={index} className={cn(
                              "border-b-2 border-black",
                              index % 2 === 0 ? "bg-white" : "bg-gray-50"
                            )}>
                              <td className="p-4 font-mono text-sm">{entry.timestamp}</td>
                              <td className="p-4 font-bold text-sm">{entry.user}</td>
                              <td className="p-4 text-sm">
                                <span className="px-2 py-1 bg-blue-400 border border-black text-xs font-bold uppercase text-white">
                                  {entry.action}
                                </span>
                              </td>
                              <td className="p-4 text-sm">{entry.details}</td>
                              <td className="p-4 text-sm font-mono">{entry.system}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'customer-journeys' && (
              <div className="p-2 sm:p-6 space-y-3 sm:space-y-6 pb-safe">
                {/* Mobile View */}
                <div className="sm:hidden space-y-3">
                  {/* Mobile Touchpoints */}
                  <div className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                    <div className="bg-gray-100 border-b-2 border-black p-3">
                      <h3 className="font-black uppercase text-sm">CUSTOMER TOUCHPOINTS</h3>
                      <span className="text-xs text-gray-600">{data.customerJourney?.touchpoints?.length || 0} interactions</span>
                    </div>
                    <div className="p-3 space-y-3">
                      {data.customerJourney?.touchpoints?.map((touchpoint, index) => (
                        <div key={index} className="border border-gray-300 p-2 space-y-2">
                          <div className="flex items-center justify-between">
                            <span className="font-bold text-xs">{touchpoint.date}</span>
                            <span className={cn("px-2 py-0.5 border border-black text-xs font-bold uppercase", getStatusColor(touchpoint.status))}>
                              {touchpoint.status}
                            </span>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className="px-2 py-0.5 bg-purple-400 border border-black text-xs font-bold uppercase text-white">
                              {touchpoint.type}
                            </span>
                            <span className="text-xs text-gray-600">{touchpoint.channel}</span>
                          </div>
                          <div className="text-xs">{touchpoint.outcome}</div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Mobile Satisfaction */}
                  <div className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                    <div className="bg-gray-100 border-b-2 border-black p-3">
                      <h4 className="font-black uppercase text-sm">SATISFACTION HISTORY</h4>
                    </div>
                    <div className="p-3 space-y-2">
                      {data.customerJourney?.satisfaction?.map((entry, index) => (
                        <div key={index} className="border-b border-gray-200 pb-2 last:border-0">
                          <div className="flex items-center justify-between mb-1">
                            <span className="text-xs font-bold">{entry.date}</span>
                            <span className="font-black text-base text-green-600">{entry.score}/10</span>
                          </div>
                          {entry.feedback && (
                            <p className="text-xs text-gray-600 italic">"{entry.feedback}"</p>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Mobile Issues */}
                  <div className="bg-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                    <div className="bg-gray-100 border-b-2 border-black p-3">
                      <h4 className="font-black uppercase text-sm">ISSUES HISTORY</h4>
                    </div>
                    <div className="p-3 space-y-3">
                      {data.customerJourney?.issues?.map((issue, index) => (
                        <div key={index} className="border border-gray-300 p-2 space-y-1">
                          <div className="flex items-center justify-between">
                            <span className="text-xs font-bold">{issue.date}</span>
                            <span className={cn("px-2 py-0.5 border border-black text-xs font-bold uppercase", getStatusColor(issue.status))}>
                              {issue.status}
                            </span>
                          </div>
                          <div className="text-xs font-semibold text-gray-800">{issue.issue}</div>
                          <div className="text-xs text-gray-600 bg-gray-50 p-1">{issue.resolution}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Tablet View */}
                <div className="hidden sm:block lg:hidden space-y-4">
                  {/* Tablet Touchpoints */}
                  <div className="bg-white border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <div className="border-b-4 border-black bg-gray-100 p-3">
                      <h3 className="font-black uppercase text-base">CUSTOMER TOUCHPOINTS</h3>
                    </div>
                    <div className="p-3 space-y-2">
                      {data.customerJourney?.touchpoints?.map((touchpoint, index) => (
                        <div key={index} className="flex flex-wrap items-center gap-3 p-2 bg-gray-50 border-2 border-black">
                          <span className="font-bold text-sm">{touchpoint.date}</span>
                          <span className="px-2 py-1 bg-purple-400 border border-black text-xs font-bold uppercase text-white">
                            {touchpoint.type}
                          </span>
                          <span className="text-sm">{touchpoint.channel}</span>
                          <span className="text-sm flex-1">{touchpoint.outcome}</span>
                          <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", getStatusColor(touchpoint.status))}>
                            {touchpoint.status}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Tablet Grid */}
                  <div className="grid grid-cols-2 gap-4">
                    <div className="bg-white p-3 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <h4 className="font-black uppercase text-sm mb-3">SATISFACTION HISTORY</h4>
                      <div className="space-y-2">
                        {data.customerJourney?.satisfaction?.map((entry, index) => (
                          <div key={index} className="flex items-center justify-between border-b border-gray-200 pb-2 last:border-0">
                            <span className="text-xs font-bold">{entry.date}</span>
                            <div className="flex items-center gap-2">
                              <span className="font-black text-base text-green-600">{entry.score}/10</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div className="bg-white p-3 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <h4 className="font-black uppercase text-sm mb-3">ISSUES HISTORY</h4>
                      <div className="space-y-2 max-h-48 overflow-y-auto">
                        {data.customerJourney?.issues?.map((issue, index) => (
                          <div key={index} className="space-y-1 border-b border-gray-200 pb-2 last:border-0">
                            <div className="flex items-center justify-between">
                              <span className="text-xs font-bold">{issue.date}</span>
                              <span className={cn("px-1 py-0.5 border border-black text-xs font-bold uppercase", getStatusColor(issue.status))}>
                                {issue.status}
                              </span>
                            </div>
                            <div className="text-xs text-gray-800 font-medium">{issue.issue}</div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Desktop View - Original Layout */}
                <div className="hidden lg:block space-y-6">
                  {/* Desktop Touchpoints */}
                  <div className="bg-white p-4 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="font-black uppercase text-lg mb-4">CUSTOMER TOUCHPOINTS</h3>
                    <div className="space-y-3">
                      {data.customerJourney?.touchpoints?.map((touchpoint, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 border-2 border-black">
                          <div className="flex items-center gap-4">
                            <span className="font-bold text-sm">{touchpoint.date}</span>
                            <span className="px-2 py-1 bg-purple-400 border border-black text-xs font-bold uppercase text-white">
                              {touchpoint.type}
                            </span>
                            <span className="text-sm">{touchpoint.channel}</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className="text-sm">{touchpoint.outcome}</span>
                            <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", getStatusColor(touchpoint.status))}>
                              {touchpoint.status}
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Desktop Grid */}
                  <div className="grid grid-cols-2 gap-6">
                    <div className="bg-white p-4 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <h4 className="font-black uppercase text-sm mb-4">SATISFACTION HISTORY</h4>
                      <div className="space-y-3">
                        {data.customerJourney?.satisfaction?.map((entry, index) => (
                          <div key={index} className="flex items-center justify-between">
                            <span className="text-sm font-bold">{entry.date}</span>
                            <div className="flex items-center gap-2">
                              <span className="font-black text-lg text-green-600">{entry.score}/10</span>
                              {entry.feedback && (
                                <span className="text-xs text-gray-600 max-w-32 truncate">"{entry.feedback}"</span>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div className="bg-white p-4 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <h4 className="font-black uppercase text-sm mb-4">ISSUES HISTORY</h4>
                      <div className="space-y-3">
                        {data.customerJourney?.issues?.map((issue, index) => (
                          <div key={index} className="space-y-1">
                            <div className="flex items-center justify-between">
                              <span className="text-sm font-bold">{issue.date}</span>
                              <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", getStatusColor(issue.status))}>
                                {issue.status}
                              </span>
                            </div>
                            <div className="text-sm text-gray-800">{issue.issue}</div>
                            <div className="text-xs text-gray-600">{issue.resolution}</div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* AI Insights Sidebar */}
          {activeTab === 'transcript' && (
            <div className="w-full sm:w-80 border-t-2 sm:border-t-0 sm:border-l-4 border-black bg-white overflow-y-auto max-h-64 sm:max-h-full">
              {/* Mobile: Compact Insights */}
              <div className="sm:hidden">
                <div className="border-b-2 border-black bg-blue-400 p-3">
                  <h3 className="font-black uppercase text-sm text-white">AI INSIGHTS</h3>
                </div>
                <div className="p-3 space-y-3">
                  {/* Topics */}
                  <div className="bg-gray-50 border-2 border-black p-2">
                    <h4 className="font-black uppercase text-xs mb-2 text-gray-700">TOPICS</h4>
                    <div className="flex flex-wrap gap-1">
                      {data.aiInsights.topics.slice(0, 3).map((topic, index) => (
                        <Badge key={index} className={cn("border border-black font-bold text-xs", getTopicBadgeColor(topic.type))}>
                          {topic.name}
                        </Badge>
                      ))}
                      {data.aiInsights.topics.length > 3 && (
                        <Badge className="bg-gray-300 border border-black font-bold text-xs">
                          +{data.aiInsights.topics.length - 3}
                        </Badge>
                      )}
                    </div>
                  </div>
                  
                  {/* Key Events */}
                  <div className="bg-gray-50 border-2 border-black p-2">
                    <h4 className="font-black uppercase text-xs mb-2 text-gray-700">KEY EVENTS</h4>
                    <div className="space-y-2">
                      {data.aiInsights.events.slice(0, 3).map((event, index) => (
                        <div key={index} className="bg-white border border-black p-1 flex items-center gap-2">
                          <div className={cn("w-3 h-3 border border-black", getEventColor(event.type))}></div>
                          <div className="flex-1 min-w-0">
                            <div className="font-bold text-xs truncate">{event.name}</div>
                            <div className="text-xs text-gray-600">{event.timestamp}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Desktop: Full Insights */}
              <div className="hidden sm:block">
                {/* Header */}
                <div className="border-b-4 border-black bg-blue-400 p-4">
                  <div className="flex items-center gap-2">
                    <h3 className="font-black uppercase text-lg text-white">AI INSIGHTS</h3>
                    <Badge className="bg-white text-black border-2 border-black font-bold uppercase text-xs">
                      LIVE
                    </Badge>
                  </div>
                </div>
                
                <div className="p-4 space-y-4">
                  {/* Topics Section */}
                  <div className="bg-gray-50 border-2 border-black p-3">
                    <h4 className="font-black uppercase text-sm mb-3 text-gray-700">CONVERSATION TOPICS</h4>
                    <div className="grid grid-cols-2 gap-2">
                      {data.aiInsights.topics.map((topic, index) => (
                        <Badge key={index} className={cn("border border-black font-bold text-xs text-center py-1", getTopicBadgeColor(topic.type))}>
                          {topic.name}
                        </Badge>
                      ))}
                    </div>
                  </div>

                  {/* Events Timeline */}
                  <div className="bg-gray-50 border-2 border-black p-3">
                    <h4 className="font-black uppercase text-sm mb-3 text-gray-700">EVENT TIMELINE</h4>
                    <div className="space-y-2">
                      {data.aiInsights.events.map((event, index) => (
                        <div key={index} className="bg-white border-2 border-black p-2 flex items-center gap-3">
                          <div className={cn("w-4 h-4 border-2 border-black", getEventColor(event.type))}></div>
                          <div className="flex-1">
                            <div className="font-bold text-sm">{event.name}</div>
                            <div className="text-xs text-gray-600">{event.timestamp}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  {/* Summary Stats */}
                  <div className="bg-gray-50 border-2 border-black p-3">
                    <h4 className="font-black uppercase text-sm mb-3 text-gray-700">ANALYSIS SUMMARY</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-xs font-bold">SENTIMENT SCORE</span>
                        <Badge className="bg-green-400 text-black border border-black font-bold text-xs">POSITIVE</Badge>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs font-bold">CALL QUALITY</span>
                        <Badge className="bg-blue-400 text-white border border-black font-bold text-xs">HIGH</Badge>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs font-bold">RESOLUTION</span>
                        <Badge className="bg-green-400 text-black border border-black font-bold text-xs">RESOLVED</Badge>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/create-agent-modal.tsx
================================================
import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '../../ui/card';
import { Button } from '../../ui/button';
import { Input } from '../../ui/input';
import { Textarea } from '../../ui/textarea';
import { Slider } from '../../ui/slider';
import { Badge } from '../../ui/badge';
import { Switch } from '../../ui/switch';
import PremiumFeatureCard from '../premium-feature-card';
import { cn } from '@/lib/utils';
import {
  UilTimes,
  UilRobot,
  UilMicrophone,
  UilLanguage,
  UilSetting,
  UilCheckCircle,
  UilExclamationTriangle,
  UilPlay,
  UilLock,
  UilDollarSign,
  UilHeadphonesAlt,
  UilCalendarAlt,
  UilDesktop
} from '@tooni/iconscout-unicons-react';

interface CreateAgentModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (agentData: AgentFormData) => void;
}

export interface AgentFormData {
  // Step 1: Basic Information
  name: string;
  description: string;
  purpose: 'sales' | 'support' | 'appointment' | 'technical' | 'custom';
  customPurpose?: string;
  
  // Step 2: Voice Configuration
  voiceProvider: 'elevenlabs' | 'chatterbox';
  voiceId: string;
  voiceStyle: 'professional' | 'friendly' | 'energetic' | 'calm' | 'custom';
  speechRate: number;
  pitch: number;
  
  // Step 3: Language & Behavior
  language: string;
  responseDelay: number;
  interruptionSensitivity: number;
  silenceThreshold: number;
  maxCallDuration: number;
  
  // Step 4: Advanced Settings
  systemPrompt: string;
  temperature: number;
  maxTokens: number;
  enableTranscription: boolean;
  enableAnalytics: boolean;
  webhookUrl?: string;
  
  // Step 5: Knowledge Base
  ragWorkflows: string[];
  knowledgeBaseSettings: {
    relevanceThreshold: number;
    maxResults: number;
    focusAreas?: number[];
  };
}

export default function CreateAgentModal({ isOpen, onClose, onSave }: CreateAgentModalProps) {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [formData, setFormData] = React.useState<AgentFormData>({
    name: '',
    description: '',
    purpose: 'sales',
    voiceProvider: 'chatterbox',
    voiceId: '',
    voiceStyle: 'professional',
    speechRate: 1.0,
    pitch: 1.0,
    language: 'en-US',
    responseDelay: 300,
    interruptionSensitivity: 0.5,
    silenceThreshold: 2000,
    maxCallDuration: 30,
    systemPrompt: '',
    temperature: 0.7,
    maxTokens: 500,
    enableTranscription: true,
    enableAnalytics: true,
    ragWorkflows: [],
    knowledgeBaseSettings: {
      relevanceThreshold: 0.7,
      maxResults: 5,
    },
  });
  const [errors, setErrors] = React.useState<Partial<Record<keyof AgentFormData, string>>>({});
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  const VOICE_OPTIONS = {
    elevenlabs: [
      { id: 'rachel', name: 'Rachel', style: 'Professional Female' },
      { id: 'drew', name: 'Drew', style: 'Professional Male' },
      { id: 'clyde', name: 'Clyde', style: 'Friendly Male' },
      { id: 'paul', name: 'Paul', style: 'Calm Male' },
    ],
    chatterbox: [
      { id: 'nova', name: 'Nova', style: 'Energetic Female' },
      { id: 'alloy', name: 'Alloy', style: 'Professional Neutral' },
      { id: 'echo', name: 'Echo', style: 'Friendly Neutral' },
      { id: 'fable', name: 'Fable', style: 'Calm Female' },
    ]
  };

  const LANGUAGES = [
    { value: 'en-US', label: 'English (US)' },
    { value: 'en-GB', label: 'English (UK)' },
    { value: 'es-ES', label: 'Spanish (Spain)' },
    { value: 'es-MX', label: 'Spanish (Mexico)' },
    { value: 'fr-FR', label: 'French (France)' },
    { value: 'de-DE', label: 'German (Germany)' },
    { value: 'it-IT', label: 'Italian (Italy)' },
    { value: 'pt-BR', label: 'Portuguese (Brazil)' },
  ];

  // Reset form when modal opens
  React.useEffect(() => {
    if (isOpen) {
      setCurrentStep(1);
      setFormData({
        name: '',
        description: '',
        purpose: 'sales',
        voiceProvider: 'chatterbox',
        voiceId: '',
        voiceStyle: 'professional',
        speechRate: 1.0,
        pitch: 1.0,
        language: 'en-US',
        responseDelay: 300,
        interruptionSensitivity: 0.5,
        silenceThreshold: 2000,
        maxCallDuration: 30,
        systemPrompt: '',
        temperature: 0.7,
        maxTokens: 500,
        enableTranscription: true,
        enableAnalytics: true,
        ragWorkflows: [],
        knowledgeBaseSettings: {
          relevanceThreshold: 0.7,
          maxResults: 5,
        },
      });
      setErrors({});
    }
  }, [isOpen]);

  const updateFormData = (updates: Partial<AgentFormData>) => {
    setFormData(prev => ({ ...prev, ...updates }));
    // Clear errors for updated fields
    const errorKeys = Object.keys(updates) as Array<keyof AgentFormData>;
    setErrors(prev => {
      const newErrors = { ...prev };
      errorKeys.forEach(key => delete newErrors[key]);
      return newErrors;
    });
  };

  const validateStep = (step: number): boolean => {
    const newErrors: Partial<Record<keyof AgentFormData, string>> = {};

    switch (step) {
      case 1:
        if (!formData.name.trim()) newErrors.name = 'Agent name is required';
        if (formData.name.length > 50) newErrors.name = 'Name must be less than 50 characters';
        if (!formData.description.trim()) newErrors.description = 'Description is required';
        if (formData.purpose === 'custom' && !formData.customPurpose?.trim()) {
          newErrors.customPurpose = 'Custom purpose is required';
        }
        break;
      case 2:
        if (!formData.voiceId) newErrors.voiceId = 'Please select a voice';
        break;
      case 3:
        if (formData.maxCallDuration < 1 || formData.maxCallDuration > 60) {
          newErrors.maxCallDuration = 'Duration must be between 1 and 60 minutes';
        }
        break;
      case 4:
        if (!formData.systemPrompt.trim()) newErrors.systemPrompt = 'System prompt is required';
        if (formData.webhookUrl && !isValidUrl(formData.webhookUrl)) {
          newErrors.webhookUrl = 'Invalid webhook URL';
        }
        break;
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const isValidUrl = (url: string): boolean => {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };

  const handleNext = () => {
    if (validateStep(currentStep) && currentStep < 5) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = async () => {
    if (!validateStep(currentStep)) return;

    setIsSubmitting(true);
    try {
      await onSave(formData);
      onClose();
    } catch (error) {
      console.error('Error creating agent:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-2xl border-2 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-background max-h-[90vh] overflow-y-auto">
        <CardHeader className="border-b-4 border-black bg-[rgb(147,51,234)] relative sticky top-0 z-10">
          <CardTitle className="text-2xl font-black uppercase text-white pr-10" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
            CREATE VOICE AGENT - STEP {currentStep} OF 5
          </CardTitle>
          <Button
            variant="neutral"
            size="sm"
            className="absolute top-4 right-4"
            onClick={onClose}
          >
            <UilTimes className="h-5 w-5 text-black" />
          </Button>
        </CardHeader>
        
        <CardContent className="p-6">
          {/* Progress indicator */}
          <div className="flex items-center justify-center mb-6">
            <div className="flex items-center gap-2">
              {[1, 2, 3, 4, 5].map((step, index) => (
                <React.Fragment key={step}>
                  <div className={`
                    relative px-4 py-2 border-2 border-black flex items-center justify-center font-bold text-sm
                    transition-all duration-300
                    ${currentStep === step 
                      ? 'bg-[rgb(147,51,234)] text-white scale-105 shadow-[3px_3px_0_rgba(0,0,0,1)]' 
                      : currentStep > step 
                        ? 'bg-[rgb(147,51,234)] text-white shadow-[2px_2px_0_rgba(0,0,0,1)]'
                        : 'bg-gray-300 text-gray-600 shadow-[2px_2px_0_rgba(0,0,0,1)]'
                    }
                  `}>
                    {step}
                  </div>
                  {index < 4 && (
                    <div className={`w-8 h-2 mx-2 border-2 border-black transition-all duration-300 ${
                      currentStep > step 
                        ? 'bg-white shadow-[2px_2px_0_rgba(0,0,0,1)]' 
                        : 'bg-gray-400'
                    }`}></div>
                  )}
                </React.Fragment>
              ))}
            </div>
          </div>

          {/* Step 1: Basic Information */}
          {currentStep === 1 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  Agent Name
                </label>
                <Input
                  value={formData.name}
                  onChange={(e) => updateFormData({ name: e.target.value })}
                  placeholder="E.g., Sales-Pro-3000"
                  className="border-2 border-black rounded-[3px] text-lg"
                />
                {errors.name && (
                  <p className="text-sm text-red-500 mt-1 flex items-center gap-1">
                    <UilExclamationTriangle className="h-4 w-4" />
                    {errors.name}
                  </p>
                )}
                <p className="text-xs text-gray-600 mt-1">Choose a unique name for your voice agent</p>
              </div>

              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  Description
                </label>
                <Textarea
                  value={formData.description}
                  onChange={(e) => updateFormData({ description: e.target.value })}
                  placeholder="Describe what this agent does..."
                  rows={3}
                  className="border-2 border-black rounded-[3px]"
                />
                {errors.description && (
                  <p className="text-sm text-red-500 mt-1 flex items-center gap-1">
                    <UilExclamationTriangle className="h-4 w-4" />
                    {errors.description}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-black uppercase text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  Agent Purpose
                </label>
                <div className="grid grid-cols-2 gap-3">
                  {[
                    { value: 'sales', label: 'Sales & Discovery', icon: UilDollarSign, color: 'purple' },
                    { value: 'support', label: 'Customer Support', icon: UilHeadphonesAlt, color: 'green' },
                    { value: 'appointment', label: 'Appointment Setting', icon: UilCalendarAlt, color: 'orange' },
                    { value: 'technical', label: 'Technical Support', icon: UilDesktop, color: 'pink' },
                    { value: 'custom', label: 'Custom Purpose', icon: UilSetting, color: 'gray' }
                  ].map((option) => {
                    const Icon = option.icon;
                    return (
                      <Card 
                        key={option.value}
                        onClick={() => updateFormData({ purpose: option.value as any })}
                        className={cn(
                          "cursor-pointer border-2 border-black transition-all bg-white",
                          formData.purpose === option.value 
                            ? `bg-${option.color}-100 shadow-[4px_4px_0_rgba(0,0,0,1)]` 
                            : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
                        )}
                      >
                        <CardContent className="p-4">
                          <div className="flex items-center gap-3">
                            <Icon className={cn(
                              "h-6 w-6",
                              formData.purpose === option.value ? `text-${option.color}-600` : 'text-gray-600'
                            )} />
                            <div className="flex-1">
                              <p className="font-bold text-sm">{option.label}</p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    );
                  })}
                </div>
              </div>

              {formData.purpose === 'custom' && (
                <div>
                  <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                    Custom Purpose
                  </label>
                  <Input
                    value={formData.customPurpose || ''}
                    onChange={(e) => updateFormData({ customPurpose: e.target.value })}
                    placeholder="E.g., Product Demo Specialist"
                    className="border-2 border-black rounded-[3px]"
                  />
                  {errors.customPurpose && (
                    <p className="text-sm text-red-500 mt-1 flex items-center gap-1">
                      <UilExclamationTriangle className="h-4 w-4" />
                      {errors.customPurpose}
                    </p>
                  )}
                </div>
              )}

              <div className="flex justify-end">
                <Button
                  variant="header"
                  onClick={handleNext}
                  disabled={!formData.name || !formData.description}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 2: Voice Configuration */}
          {currentStep === 2 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-black uppercase text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  Voice Provider
                </label>
                <div className="space-y-3">
                  {/* Chatterbox Option */}
                  <Card 
                    onClick={() => updateFormData({ voiceProvider: 'chatterbox', voiceId: '' })}
                    className={cn(
                      "cursor-pointer border-2 border-black transition-all bg-white",
                      formData.voiceProvider === 'chatterbox' 
                        ? "bg-green-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                        : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
                    )}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="flex items-center gap-2">
                            <span className="font-black text-lg">Chatterbox</span>
                            <Badge className="bg-green-600 text-white border-2 border-black">OPEN SOURCE</Badge>
                          </div>
                          <p className="text-sm text-gray-600 mt-1">Free open-source voices</p>
                        </div>
                        <div className={cn(
                          "w-5 h-5 rounded-full border-2 border-black",
                          formData.voiceProvider === 'chatterbox' && "bg-green-600"
                        )} />
                      </div>
                    </CardContent>
                  </Card>

                  {/* ElevenLabs Option */}
                  <Card 
                    onClick={() => updateFormData({ voiceProvider: 'elevenlabs', voiceId: '' })}
                    className={cn(
                      "cursor-pointer border-2 border-black transition-all relative overflow-hidden bg-white",
                      formData.voiceProvider === 'elevenlabs' 
                        ? "bg-purple-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                        : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
                    )}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="flex items-center gap-2">
                            <span className="font-black text-lg">ElevenLabs</span>
                            <Badge className="bg-purple-600 text-white border-2 border-black">PREMIUM</Badge>
                          </div>
                          <p className="text-sm text-gray-600 mt-1">High-quality commercial voices</p>
                        </div>
                        <UilLock className="h-6 w-6 text-purple-600" />
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>

              <div>
                <label className="block text-sm font-black uppercase text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  Select Voice
                </label>
                <div className="grid grid-cols-2 gap-3">
                  {VOICE_OPTIONS[formData.voiceProvider].map((voice) => (
                    <Card
                      key={voice.id}
                      onClick={() => updateFormData({ voiceId: voice.id })}
                      className={cn(
                        "cursor-pointer border-2 border-black transition-all bg-white",
                        formData.voiceId === voice.id 
                          ? "bg-purple-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                          : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
                      )}
                    >
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="font-bold">{voice.name}</p>
                            <p className="text-sm text-gray-600">{voice.style}</p>
                          </div>
                          <Button 
                            size="sm" 
                            variant="neutral"
                            onClick={(e) => {
                              e.stopPropagation();
                              // Preview logic here
                            }}
                          >
                            <UilPlay className="h-4 w-4" />
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
                {errors.voiceId && (
                  <p className="text-sm text-red-500 mt-2 flex items-center gap-1">
                    <UilExclamationTriangle className="h-4 w-4" />
                    {errors.voiceId}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-black uppercase text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  Voice Style
                </label>
                <div className="grid grid-cols-2 gap-3">
                  {[
                    { value: 'professional', label: 'Professional' },
                    { value: 'friendly', label: 'Friendly' },
                    { value: 'energetic', label: 'Energetic' },
                    { value: 'calm', label: 'Calm' }
                  ].map((style) => (
                    <Card
                      key={style.value}
                      onClick={() => updateFormData({ voiceStyle: style.value as any })}
                      className={cn(
                        "cursor-pointer border-2 border-black transition-all bg-white",
                        formData.voiceStyle === style.value 
                          ? "bg-purple-100 shadow-[4px_4px_0_rgba(0,0,0,1)]" 
                          : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
                      )}
                    >
                      <CardContent className="p-4">
                        <p className="font-bold text-center">{style.label}</p>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>

              {/* Custom Voice Option */}
              <div className="mt-4">
                <PremiumFeatureCard
                  title="CUSTOM VOICE CLONING"
                  description="Clone your own voice or upload custom voice samples for a truly personalized agent experience"
                  price="$99/month"
                  badge="VOICE CLONING"
                />
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="text-sm font-black uppercase">Speech Rate</label>
                  <span className="text-sm font-bold">{formData.speechRate.toFixed(1)}x</span>
                </div>
                <Slider
                  value={[formData.speechRate]}
                  onValueChange={([value]) => updateFormData({ speechRate: value })}
                  min={0.5}
                  max={2.0}
                  step={0.1}
                />
                <div className="flex justify-between text-xs text-gray-600 mt-1">
                  <span>Slower</span>
                  <span>Normal</span>
                  <span>Faster</span>
                </div>
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="text-sm font-black uppercase">Pitch</label>
                  <span className="text-sm font-bold">{formData.pitch.toFixed(1)}x</span>
                </div>
                <Slider
                  value={[formData.pitch]}
                  onValueChange={([value]) => updateFormData({ pitch: value })}
                  min={0.5}
                  max={2.0}
                  step={0.1}
                />
                <div className="flex justify-between text-xs text-gray-600 mt-1">
                  <span>Lower</span>
                  <span>Normal</span>
                  <span>Higher</span>
                </div>
              </div>

              <div className="flex justify-between">
                <Button
                  variant="neutral"
                  onClick={handleBack}
                >
                  ← Back
                </Button>
                <Button
                  variant="header"
                  onClick={handleNext}
                  disabled={!formData.voiceId}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 3: Language & Behavior */}
          {currentStep === 3 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  Language
                </label>
                <select
                  value={formData.language}
                  onChange={(e) => updateFormData({ language: e.target.value })}
                  className="w-full px-3 py-2 border-2 border-black rounded-[3px] bg-white font-bold"
                >
                  {LANGUAGES.map((lang) => (
                    <option key={lang.value} value={lang.value}>
                      {lang.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="text-sm font-black uppercase">Response Delay</label>
                  <span className="text-sm font-bold">{formData.responseDelay}ms</span>
                </div>
                <Slider
                  value={[formData.responseDelay]}
                  onValueChange={([value]) => updateFormData({ responseDelay: value })}
                  min={0}
                  max={2000}
                  step={100}
                />
                <p className="text-xs text-gray-600 mt-1">Time before agent starts speaking</p>
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="text-sm font-black uppercase">Interruption Sensitivity</label>
                  <span className="text-sm font-bold">{(formData.interruptionSensitivity * 100).toFixed(0)}%</span>
                </div>
                <Slider
                  value={[formData.interruptionSensitivity]}
                  onValueChange={([value]) => updateFormData({ interruptionSensitivity: value })}
                  min={0}
                  max={1}
                  step={0.1}
                />
                <p className="text-xs text-gray-600 mt-1">How easily the agent can be interrupted</p>
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="text-sm font-black uppercase">Silence Threshold</label>
                  <span className="text-sm font-bold">{formData.silenceThreshold}ms</span>
                </div>
                <Slider
                  value={[formData.silenceThreshold]}
                  onValueChange={([value]) => updateFormData({ silenceThreshold: value })}
                  min={500}
                  max={5000}
                  step={500}
                />
                <p className="text-xs text-gray-600 mt-1">Wait time before considering silence</p>
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="text-sm font-black uppercase">Max Call Duration</label>
                  <span className="text-sm font-bold">{formData.maxCallDuration} min</span>
                </div>
                <Slider
                  value={[formData.maxCallDuration]}
                  onValueChange={([value]) => updateFormData({ maxCallDuration: value })}
                  min={1}
                  max={60}
                  step={1}
                />
                {errors.maxCallDuration && (
                  <p className="text-sm text-red-500 mt-1 flex items-center gap-1">
                    <UilExclamationTriangle className="h-4 w-4" />
                    {errors.maxCallDuration}
                  </p>
                )}
              </div>

              <Card className="bg-yellow-50 border-4 border-yellow-400">
                <CardContent className="p-4">
                  <p className="font-black text-sm uppercase mb-1">Behavior Tips</p>
                  <p className="text-sm text-gray-700">
                    Lower interruption sensitivity for more natural conversations.
                    Adjust silence threshold based on expected response times.
                  </p>
                </CardContent>
              </Card>

              <div className="flex justify-between">
                <Button
                  variant="neutral"
                  onClick={handleBack}
                >
                  ← Back
                </Button>
                <Button
                  variant="header"
                  onClick={handleNext}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 4: Advanced Settings */}
          {currentStep === 4 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  System Prompt
                </label>
                <Textarea
                  value={formData.systemPrompt}
                  onChange={(e) => updateFormData({ systemPrompt: e.target.value })}
                  placeholder="Define your agent's personality, knowledge, and behavior..."
                  rows={5}
                  className={cn("border-2 border-black rounded-[3px] font-mono text-sm", errors.systemPrompt && "border-red-500")}
                />
                {errors.systemPrompt && (
                  <p className="text-sm text-red-500 mt-1 flex items-center gap-1">
                    <UilExclamationTriangle className="h-4 w-4" />
                    {errors.systemPrompt}
                  </p>
                )}
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="text-sm font-black uppercase">Temperature</label>
                    <span className="text-sm font-bold">{formData.temperature.toFixed(1)}</span>
                  </div>
                  <Slider
                    value={[formData.temperature]}
                    onValueChange={([value]) => updateFormData({ temperature: value })}
                    min={0}
                    max={2}
                    step={0.1}
                  />
                  <p className="text-xs text-gray-600 mt-1">Response creativity</p>
                </div>

                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="text-sm font-black uppercase">Max Tokens</label>
                    <span className="text-sm font-bold">{formData.maxTokens}</span>
                  </div>
                  <Slider
                    value={[formData.maxTokens]}
                    onValueChange={([value]) => updateFormData({ maxTokens: value })}
                    min={50}
                    max={2000}
                    step={50}
                  />
                  <p className="text-xs text-gray-600 mt-1">Response length limit</p>
                </div>
              </div>

              <div className="space-y-3">
                <Card className="border-2 border-black bg-white">
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="font-bold">Enable Transcription</p>
                        <p className="text-sm text-gray-600">Save call transcripts</p>
                      </div>
                      <Switch
                        checked={formData.enableTranscription}
                        onCheckedChange={(checked) => updateFormData({ enableTranscription: checked })}
                      />
                    </div>
                  </CardContent>
                </Card>

                <Card className="border-2 border-black bg-white">
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="font-bold">Enable Analytics</p>
                        <p className="text-sm text-gray-600">Track performance metrics</p>
                      </div>
                      <Switch
                        checked={formData.enableAnalytics}
                        onCheckedChange={(checked) => updateFormData({ enableAnalytics: checked })}
                      />
                    </div>
                  </CardContent>
                </Card>
              </div>

              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  Webhook URL (Optional)
                </label>
                <Input
                  type="url"
                  value={formData.webhookUrl || ''}
                  onChange={(e) => updateFormData({ webhookUrl: e.target.value })}
                  placeholder="https://your-server.com/webhook"
                  className={cn("border-2 border-black rounded-[3px]", errors.webhookUrl && "border-red-500")}
                />
                {errors.webhookUrl && (
                  <p className="text-sm text-red-500 mt-1 flex items-center gap-1">
                    <UilExclamationTriangle className="h-4 w-4" />
                    {errors.webhookUrl}
                  </p>
                )}
                <p className="text-xs text-gray-600 mt-1">Receive real-time call events</p>
              </div>

              <div className="flex justify-between">
                <Button
                  variant="neutral"
                  onClick={handleBack}
                >
                  ← Back
                </Button>
                <Button
                  variant="header"
                  onClick={handleNext}
                  disabled={!formData.systemPrompt}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 5: Knowledge Base */}
          {currentStep === 5 && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-black uppercase text-black mb-2">SELECT KNOWLEDGE BASE</h3>
                <p className="text-sm text-gray-600 mb-4">Choose RAG workflows to enhance your agent's knowledge and capabilities</p>
              </div>

              {/* Available RAG Workflows */}
              <div className="space-y-3">
                {[
                  {
                    id: 'sales-objection-master',
                    name: 'Sales Objection Master',
                    description: 'Comprehensive sales objection handling with 9 focus areas including price, competition, and timing',
                    stats: { embeddings: 2847, sources: 'YouTube + Documents', focusAreas: 9 },
                    recommended: formData.purpose === 'sales',
                    icon: UilDollarSign,
                    color: 'purple'
                  },
                  {
                    id: 'customer-support-kb',
                    name: 'Customer Support Knowledge',
                    description: 'Product documentation, FAQs, and common troubleshooting procedures',
                    stats: { embeddings: 1523, sources: 'Documents + URLs', focusAreas: 6 },
                    recommended: formData.purpose === 'support',
                    icon: UilHeadphonesAlt,
                    color: 'green'
                  },
                  {
                    id: 'appointment-scripts',
                    name: 'Appointment Setting Playbook',
                    description: 'Proven scripts and techniques for booking meetings and managing calendars',
                    stats: { embeddings: 892, sources: 'Documents', focusAreas: 4 },
                    recommended: formData.purpose === 'appointment',
                    icon: UilCalendarAlt,
                    color: 'orange'
                  },
                  {
                    id: 'technical-docs',
                    name: 'Technical Documentation Hub',
                    description: 'API docs, integration guides, and technical specifications',
                    stats: { embeddings: 3156, sources: 'Documents + URLs', focusAreas: 8 },
                    recommended: formData.purpose === 'technical',
                    icon: UilDesktop,
                    color: 'pink'
                  },
                  {
                    id: 'product-catalog',
                    name: 'Product Catalog & Pricing',
                    description: 'Complete product information, pricing tiers, and feature comparisons',
                    stats: { embeddings: 1098, sources: 'Mixed', focusAreas: 5 },
                    recommended: true,
                    icon: UilSetting,
                    color: 'blue'
                  }
                ].map((workflow) => {
                  const Icon = workflow.icon;
                  const isSelected = formData.ragWorkflows.includes(workflow.id);
                  return (
                    <Card
                      key={workflow.id}
                      onClick={() => {
                        if (isSelected) {
                          updateFormData({ 
                            ragWorkflows: formData.ragWorkflows.filter(id => id !== workflow.id) 
                          });
                        } else {
                          updateFormData({ 
                            ragWorkflows: [...formData.ragWorkflows, workflow.id] 
                          });
                        }
                      }}
                      className={cn(
                        "cursor-pointer border-2 border-black transition-all bg-white",
                        isSelected
                          ? `bg-${workflow.color}-100 shadow-[4px_4px_0_rgba(0,0,0,1)]`
                          : "hover:shadow-[2px_2px_0_rgba(0,0,0,1)]"
                      )}
                    >
                      <CardContent className="p-4">
                        <div className="flex items-start gap-4">
                          <div className={cn(
                            "w-12 h-12 border-2 border-black flex items-center justify-center flex-shrink-0",
                            isSelected ? `bg-${workflow.color}-200` : "bg-gray-100"
                          )}>
                            <Icon className={cn(
                              "h-6 w-6",
                              isSelected ? `text-${workflow.color}-600` : "text-gray-600"
                            )} />
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              <h4 className="font-black text-black">{workflow.name}</h4>
                              {workflow.recommended && (
                                <Badge className="bg-green-400 text-black border-2 border-black text-xs font-bold">
                                  RECOMMENDED
                                </Badge>
                              )}
                            </div>
                            <p className="text-sm text-gray-600 mb-2">{workflow.description}</p>
                            <div className="flex items-center gap-4 text-xs">
                              <span className="font-bold">{workflow.stats.embeddings.toLocaleString()} embeddings</span>
                              <span className="text-gray-600">•</span>
                              <span className="font-bold">{workflow.stats.sources}</span>
                              <span className="text-gray-600">•</span>
                              <span className="font-bold">{workflow.stats.focusAreas} focus areas</span>
                            </div>
                          </div>
                          <div className={cn(
                            "w-6 h-6 border-2 border-black flex items-center justify-center",
                            isSelected ? `bg-${workflow.color}-600` : "bg-white"
                          )}>
                            {isSelected && <UilCheckCircle className="h-4 w-4 text-white" />}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>

              {/* Knowledge Base Settings */}
              <Card className="border-2 border-black bg-white">
                <CardContent className="p-4">
                  <h4 className="font-black uppercase text-sm mb-4">KNOWLEDGE BASE SETTINGS</h4>
                  <div className="space-y-4">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="text-sm font-black uppercase">Relevance Threshold</label>
                        <span className="text-sm font-bold">{(formData.knowledgeBaseSettings.relevanceThreshold * 100).toFixed(0)}%</span>
                      </div>
                      <Slider
                        value={[formData.knowledgeBaseSettings.relevanceThreshold]}
                        onValueChange={([value]) => updateFormData({ 
                          knowledgeBaseSettings: { ...formData.knowledgeBaseSettings, relevanceThreshold: value }
                        })}
                        min={0.5}
                        max={1}
                        step={0.05}
                      />
                      <p className="text-xs text-gray-600 mt-1">Minimum relevance score for retrieved content</p>
                    </div>
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="text-sm font-black uppercase">Max Results</label>
                        <span className="text-sm font-bold">{formData.knowledgeBaseSettings.maxResults}</span>
                      </div>
                      <Slider
                        value={[formData.knowledgeBaseSettings.maxResults]}
                        onValueChange={([value]) => updateFormData({ 
                          knowledgeBaseSettings: { ...formData.knowledgeBaseSettings, maxResults: value }
                        })}
                        min={1}
                        max={20}
                        step={1}
                      />
                      <p className="text-xs text-gray-600 mt-1">Maximum number of relevant results to retrieve</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <div className="flex justify-between">
                <Button
                  variant="neutral"
                  onClick={handleBack}
                >
                  ← Back
                </Button>
                <Button
                  variant="header"
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                >
                  {isSubmitting ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                      Creating...
                    </>
                  ) : (
                    <>
                      <UilRobot className="h-5 w-5 mr-2" />
                      CREATE AGENT
                    </>
                  )}
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/create-rag-workflow-modal.tsx
================================================
import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '../../ui/card';
import { Button } from '../../ui/button';
import { Input } from '../../ui/input';
import { Textarea } from '../../ui/textarea';
import { 
  UilTimes, 
  UilLock, 
  UilUpload,
  UilFile,
  UilYoutube,
  UilLink,
  UilTrash,
  UilPlay
} from '@tooni/iconscout-unicons-react';

interface CreateRAGWorkflowModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (workflowData: RAGWorkflowData) => void;
}

export interface RAGWorkflowData {
  name: string;
  sources: string[];
  youtubeUrl: string;
  urls: string;
  embeddingModel: string;
  vectorStore: string;
  chunkSize: number;
  overlap: number;
}

export default function CreateRAGWorkflowModal({ isOpen, onClose, onSave }: CreateRAGWorkflowModalProps) {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [formData, setFormData] = React.useState<RAGWorkflowData>({
    name: '',
    sources: [],
    youtubeUrl: '',
    urls: '',
    embeddingModel: 'text-embedding-ada-002',
    vectorStore: 'pinecone',
    chunkSize: 512,
    overlap: 50
  });
  
  const [uploadedFiles, setUploadedFiles] = React.useState<File[]>([]);
  const fileInputRef = React.useRef<HTMLInputElement>(null);

  // Reset form when modal opens
  React.useEffect(() => {
    if (isOpen) {
      setCurrentStep(1);
      setFormData({
        name: '',
        sources: [],
        youtubeUrl: '',
        urls: '',
        embeddingModel: 'text-embedding-ada-002',
        vectorStore: 'pinecone',
        chunkSize: 512,
        overlap: 50
      });
      setUploadedFiles([]);
    }
  }, [isOpen]);

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      const newFiles = Array.from(files);
      setUploadedFiles(prev => [...prev, ...newFiles]);
      setFormData(prev => ({
        ...prev,
        sources: [...prev.sources, ...newFiles.map(f => f.name)]
      }));
    }
  };

  const handleNext = () => {
    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = () => {
    onSave(formData);
    onClose();
  };

  const hasContentSources = formData.sources.length > 0 || formData.youtubeUrl || formData.urls;

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-2xl border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-white max-h-[90vh] overflow-y-auto">
        <CardHeader className="border-b-4 border-black bg-[rgb(0,82,255)] relative">
          <CardTitle className="text-2xl font-black uppercase text-white pr-10" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
            CREATE RAG WORKFLOW - STEP {currentStep} OF 4
          </CardTitle>
          <Button
            variant="neutral"
            size="sm"
            className="absolute top-4 right-4 bg-white p-2"
            onClick={onClose}
          >
            <UilTimes className="h-4 w-4 text-black" />
          </Button>
        </CardHeader>
        
        <CardContent className="p-6">
          {/* Progress indicator */}
          <div className="flex items-center justify-center mb-6">
            <div className="flex items-center gap-1 sm:gap-2">
              {[1, 2, 3, 4].map((step, index) => (
                <React.Fragment key={step}>
                  <div className={`px-2 py-1 border-2 border-black font-bold text-xs sm:px-4 sm:py-2 sm:border-4 sm:text-sm ${
                    currentStep === step
                      ? 'bg-[rgb(0,82,255)] text-white scale-105 shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[3px_3px_0_rgba(0,0,0,1)]'
                      : currentStep > step
                      ? 'bg-[rgb(0,82,255)] text-white shadow-[1px_1px_0_rgba(0,0,0,1)] sm:shadow-[2px_2px_0_rgba(0,0,0,1)]'
                      : 'bg-gray-300 text-gray-600 shadow-[1px_1px_0_rgba(0,0,0,1)] sm:shadow-[2px_2px_0_rgba(0,0,0,1)]'
                  }`}>
                    {step}
                  </div>
                  {index < 3 && (
                    <div className={`w-4 h-1 mx-1 border border-black sm:w-8 sm:h-2 sm:mx-2 sm:border-2 ${
                      currentStep > step + 1
                        ? 'bg-white shadow-[1px_1px_0_rgba(0,0,0,1)] sm:shadow-[2px_2px_0_rgba(0,0,0,1)]'
                        : 'bg-gray-400'
                    }`}></div>
                  )}
                </React.Fragment>
              ))}
            </div>
          </div>

          {/* Step 1: Workflow Name */}
          {currentStep === 1 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  Name your knowledge base
                </label>
                <Input
                  value={formData.name}
                  onChange={(e) => setFormData({...formData, name: e.target.value})}
                  placeholder="E.g., Sales Training Knowledge Base"
                />
                <p className="text-xs text-gray-600 mt-2">Choose a descriptive name for your RAG-enabled knowledge base</p>
              </div>

              <div className="flex justify-end">
                <Button
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleNext}
                  disabled={!formData.name}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 2: Content Sources */}
          {currentStep === 2 && (
            <div className="space-y-6">
              <div className="space-y-4">
                <h3 className="text-lg font-black uppercase">Add your content sources</h3>
                
                {/* File Upload */}
                <Card className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                  <div className="border-2 border-black">
                    <CardHeader className="border-b-2 border-black bg-yellow-100 py-3">
                      <CardTitle className="text-md font-black uppercase flex items-center gap-2">
                        <UilFile className="w-5 h-5" />
                        Upload Files
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="p-4">
                      <input
                        ref={fileInputRef}
                        type="file"
                        multiple
                        onChange={handleFileUpload}
                        className="hidden"
                        accept=".pdf,.docx,.txt,.csv,.json"
                      />
                      <div 
                        onClick={() => fileInputRef.current?.click()}
                        className="border-2 border-dashed border-gray-400 rounded-[8px] p-4 text-center hover:border-black transition-colors cursor-pointer"
                      >
                        <UilUpload className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                        <p className="font-bold text-gray-600 text-sm">CLICK TO SELECT FILES</p>
                        <p className="text-xs text-gray-500 mt-1">PDF, DOCX, TXT, CSV, JSON</p>
                      </div>
                      {uploadedFiles.length > 0 && (
                        <div className="mt-3 space-y-2">
                          {uploadedFiles.map((file, idx) => (
                            <div key={idx} className="flex items-center justify-between p-2 bg-gray-50 border-2 border-black rounded-[6px]">
                              <span className="text-sm font-bold truncate">{file.name}</span>
                              <Button
                                variant="neutral"
                                size="sm"
                                className="bg-white p-2"
                                onClick={() => {
                                  setUploadedFiles(prev => prev.filter((_, i) => i !== idx));
                                  setFormData(prev => ({
                                    ...prev,
                                    sources: prev.sources.filter((_, i) => i !== idx)
                                  }));
                                }}
                              >
                                <UilTrash className="w-4 h-4 text-black" />
                              </Button>
                            </div>
                          ))}
                        </div>
                      )}
                    </CardContent>
                  </div>
                </Card>

                {/* YouTube Premium Feature */}
                <Card className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] bg-white relative overflow-hidden">
                  <div className="border-2 border-black">
                    <CardHeader className="border-b-2 border-black bg-red-100 py-3 relative">
                      <CardTitle className="text-md font-black uppercase flex items-center gap-2">
                        <UilYoutube className="w-5 h-5" />
                        YouTube Embedding
                        <span className="px-2 py-1 bg-yellow-400 border-2 border-black text-xs font-bold uppercase rounded-lg shadow-[2px_2px_0_rgba(0,0,0,1)]">
                          PREMIUM
                        </span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="p-4 relative">
                      <div>
                        <Input
                          disabled
                          placeholder="https://youtube.com/@channel or video URL"
                          className="border-2 border-black"
                        />
                      </div>
                      <div className="mt-3 flex items-center justify-between">
                        <p className="text-xs text-gray-700 font-medium">Extract & transcribe YouTube videos automatically</p>
                        <Button
                          size="sm"
                          className="px-4 py-2 text-xs font-bold"
                        >
                          UPGRADE →
                        </Button>
                      </div>
                    </CardContent>
                  </div>
                </Card>

                {/* URL Input */}
                <Card className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                  <div className="border-2 border-black">
                    <CardHeader className="border-b-2 border-black bg-blue-100 py-3">
                      <CardTitle className="text-md font-black uppercase flex items-center gap-2">
                        <UilLink className="w-5 h-5" />
                        Web URLs
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="p-4">
                      <Textarea
                        value={formData.urls}
                        onChange={(e) => setFormData({...formData, urls: e.target.value})}
                        placeholder="Enter URLs separated by new lines"
                        className="min-h-[80px] border-2 border-black"
                      />
                    </CardContent>
                  </div>
                </Card>
              </div>

              <div className="flex justify-between">
                <Button
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleBack}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  ← Back
                </Button>
                <Button
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleNext}
                  disabled={!hasContentSources}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 3: Configuration */}
          {currentStep === 3 && (
            <div className="space-y-6">
              <h3 className="text-lg font-black uppercase">Configure processing</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-black uppercase text-gray-700 mb-2 block">Embedding Model</label>
                  <select
                    value={formData.embeddingModel}
                    onChange={(e) => setFormData({...formData, embeddingModel: e.target.value})}
                    className="w-full border-2 border-black rounded p-2"
                  >
                    <option value="text-embedding-ada-002">OpenAI Ada-002</option>
                    <option value="text-embedding-3-small">OpenAI 3-Small</option>
                    <option value="text-embedding-3-large">OpenAI 3-Large</option>
                  </select>
                </div>
                
                <div>
                  <label className="text-sm font-black uppercase text-gray-700 mb-2 block">Vector Store</label>
                  <select
                    value={formData.vectorStore}
                    onChange={(e) => setFormData({...formData, vectorStore: e.target.value})}
                    className="w-full border-2 border-black rounded p-2"
                  >
                    <option value="pinecone">Pinecone</option>
                    <option value="chroma">ChromaDB</option>
                    <option value="weaviate">Weaviate</option>
                    <option value="qdrant">Qdrant</option>
                  </select>
                </div>

                <div>
                  <label className="text-sm font-black uppercase text-gray-700 mb-2 block">Chunk Size</label>
                  <Input
                    type="number"
                    value={formData.chunkSize}
                    onChange={(e) => setFormData({...formData, chunkSize: parseInt(e.target.value) || 512})}
                  />
                </div>

                <div>
                  <label className="text-sm font-black uppercase text-gray-700 mb-2 block">Overlap</label>
                  <Input
                    type="number"
                    value={formData.overlap}
                    onChange={(e) => setFormData({...formData, overlap: parseInt(e.target.value) || 50})}
                  />
                </div>
              </div>

              {/* Advanced Settings - Premium */}
              <Card className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] bg-white relative overflow-hidden mt-4">
                <CardContent className="p-4 relative">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="text-lg font-black text-black uppercase flex items-center gap-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                        ADVANCED SETTINGS
                        <span className="px-2 py-1 bg-yellow-400 border-2 border-black text-xs font-bold uppercase rounded-lg shadow-[2px_2px_0_rgba(0,0,0,1)]">
                          PREMIUM
                        </span>
                      </h4>
                      <p className="text-sm text-gray-700 mt-1">Custom embeddings, metadata extraction, smart chunking</p>
                    </div>
                    <div className="flex items-center gap-3">
                      <span className="text-xs text-gray-600 font-bold">$49/month</span>
                      <div className="w-10 h-10 bg-white border-2 border-black rounded-lg flex items-center justify-center">
                        <UilLock className="h-5 w-5 text-black" />
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <div className="flex justify-between">
                <Button
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleBack}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  ← Back
                </Button>
                <Button
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleNext}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 4: Review & Create */}
          {currentStep === 4 && (
            <div className="space-y-6">
              <h3 className="text-lg font-black uppercase">Review & Create</h3>
              
              {/* Summary */}
              <Card className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] bg-yellow-50">
                <CardContent className="p-4">
                  <h4 className="font-black uppercase mb-3">Workflow Summary</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="font-bold">Name:</span>
                      <span>{formData.name}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="font-bold">Content Sources:</span>
                      <span>{formData.sources.length + (formData.urls ? formData.urls.split('\n').filter(u => u.trim()).length : 0)} items</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="font-bold">Embedding Model:</span>
                      <span>{formData.embeddingModel}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="font-bold">Vector Store:</span>
                      <span>{formData.vectorStore}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="font-bold">Processing:</span>
                      <span>Chunk {formData.chunkSize} / Overlap {formData.overlap}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Process Info */}
              <Card className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] bg-blue-50">
                <CardContent className="p-4">
                  <h4 className="font-black uppercase mb-2">What happens next?</h4>
                  <ol className="space-y-2 text-sm">
                    <li className="flex items-start gap-2">
                      <span className="font-black">1.</span>
                      <span>Your content will be extracted and processed</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <span className="font-black">2.</span>
                      <span>Text will be chunked and converted to embeddings</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <span className="font-black">3.</span>
                      <span>Embeddings will be indexed in {formData.vectorStore}</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <span className="font-black">4.</span>
                      <span>Your agents can query this knowledge base instantly</span>
                    </li>
                  </ol>
                </CardContent>
              </Card>

              <div className="flex justify-between">
                <Button
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleBack}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  ← Back
                </Button>
                <Button
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleSubmit}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  <UilPlay className="w-5 h-5 mr-2" />
                  Start Workflow
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/custom-pitch-modal.tsx
================================================
import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '../../ui/card';
import { Button } from '../../ui/button';
import { Input } from '../../ui/input';
import { Textarea } from '../../ui/textarea';
import { UilTimes, UilLock } from '@tooni/iconscout-unicons-react';
import PremiumFeatureCard from '../premium-feature-card';

interface CustomPitchModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (pitchData: CustomPitchData) => void;
}

export interface CustomPitchData {
  businessName: string;
  whatYouDo: string;
  howItSpeaks: string;
  mainGoal: string;
  aiDisclosure: boolean;
  customPersonality: boolean;
}

export default function CustomPitchModal({ isOpen, onClose, onSave }: CustomPitchModalProps) {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [formData, setFormData] = React.useState<CustomPitchData>({
    businessName: '',
    whatYouDo: '',
    howItSpeaks: 'professional',
    mainGoal: '',
    aiDisclosure: true, // Default to disclosing AI
    customPersonality: false
  });

  // Reset form when modal opens
  React.useEffect(() => {
    if (isOpen) {
      setCurrentStep(1);
      setFormData({
        businessName: '',
        whatYouDo: '',
        howItSpeaks: 'professional',
        mainGoal: '',
        aiDisclosure: true,
        customPersonality: false
      });
    }
  }, [isOpen]);

  const handleInputChange = (field: keyof CustomPitchData) => (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setFormData(prev => ({
      ...prev,
      [field]: e.target.value
    }));
  };

  const handleSubmit = () => {
    onSave(formData);
    onClose();
  };

  const handleNext = () => {
    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-lg border-2 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-white">
        <CardHeader className="border-b-2 border-black bg-[rgb(0,82,255)] relative">
          <CardTitle className="text-xl font-black uppercase text-white pr-10" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
            CREATE CUSTOM PITCH - STEP {currentStep} OF 4
          </CardTitle>
          <Button
            size="sm"
            className="absolute top-4 right-4"
            onClick={onClose}
          >
            <UilTimes className="h-5 w-5 text-black" />
          </Button>
        </CardHeader>
        
        <CardContent className="p-6">
          {/* Progress indicator */}
          <div className="flex items-center justify-center mb-6">
            <div className="flex items-center gap-1 sm:gap-2">
              {[1, 2, 3, 4].map((step, index) => (
                <React.Fragment key={step}>
                  <div className={`
                    relative px-2 py-1 sm:px-4 sm:py-2 border-2 sm:border-4 border-black flex items-center justify-center font-bold text-xs sm:text-sm
                    transition-all duration-300
                    ${currentStep === step 
                      ? 'bg-[rgb(0,82,255)] text-white scale-105 shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[3px_3px_0_rgba(0,0,0,1)]' 
                      : currentStep > step 
                        ? 'bg-[rgb(0,82,255)] text-white shadow-[1px_1px_0_rgba(0,0,0,1)] sm:shadow-[2px_2px_0_rgba(0,0,0,1)]'
                        : 'bg-gray-300 text-gray-600 shadow-[1px_1px_0_rgba(0,0,0,1)] sm:shadow-[2px_2px_0_rgba(0,0,0,1)]'
                    }
                  `}>
                    {step}
                  </div>
                  {index < 3 && (
                    <div className={`w-4 h-1 mx-1 sm:w-8 sm:h-2 sm:mx-2 border sm:border-2 border-black transition-all duration-300 ${
                      currentStep > step 
                        ? 'bg-white shadow-[1px_1px_0_rgba(0,0,0,1)] sm:shadow-[2px_2px_0_rgba(0,0,0,1)]' 
                        : 'bg-gray-400'
                    }`}></div>
                  )}
                </React.Fragment>
              ))}
            </div>
          </div>

          {/* Step 1: Business Name */}
          {currentStep === 1 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  What's your business name?
                </label>
                <Input
                  value={formData.businessName}
                  onChange={handleInputChange('businessName')}
                  placeholder="Acme Corporation"
                  className="border-2 border-black"
                />
              </div>

              <div className="flex justify-end">
                <Button
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleNext}
                  disabled={!formData.businessName}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 2: What You Do */}
          {currentStep === 2 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  What do you do?
                </label>
                <Textarea
                  value={formData.whatYouDo}
                  onChange={handleInputChange('whatYouDo')}
                  placeholder="We help small businesses manage their inventory with our cloud-based software..."
                  className="border-2 border-black min-h-[120px]"
                />
              </div>

              <div className="flex justify-between">
                <Button
                  variant="neutral"
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleBack}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  ← Back
                </Button>
                <Button
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleNext}
                  disabled={!formData.whatYouDo}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 3: How It Speaks */}
          {currentStep === 3 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-black uppercase text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  How should your agent speak?
                </label>
                <div className="grid grid-cols-2 gap-3">
                  {['Professional', 'Friendly', 'Enthusiastic', 'Casual'].map((tone) => (
                    <Button
                      key={tone}
                      onClick={() => setFormData(prev => ({ ...prev, howItSpeaks: tone.toLowerCase() }))}
                      variant={formData.howItSpeaks === tone.toLowerCase() ? "default" : "neutral"}
                      className="w-full font-black uppercase"
                      style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                    >
                      {tone}
                    </Button>
                  ))}
                </div>
              </div>

              {/* Custom Personality - Premium Feature */}
              <div className="mt-6">
                <PremiumFeatureCard 
                  title="CUSTOM PERSONALITY"
                  description="Create unique speaking styles & personalities"
                  price="$39/month"
                />
              </div>

              <div className="flex justify-between">
                <Button
                  variant="neutral"
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleBack}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  ← Back
                </Button>
                <Button
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleNext}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 4: Goal & AI Disclosure */}
          {currentStep === 4 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  What should your agent do?
                </label>
                <Textarea
                  value={formData.mainGoal}
                  onChange={handleInputChange('mainGoal')}
                  placeholder="Book demos with interested businesses, answer basic product questions, qualify leads..."
                  className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] min-h-[100px]"
                />
              </div>

              {/* AI Disclosure Control - Premium Feature */}
              <div className="mt-6">
                <PremiumFeatureCard 
                  title="AI DISCLOSURE CONTROL"
                  description="Control how your agent discloses its AI nature"
                  price="$39/month"
                />
              </div>

              {/* Preview */}
              <div className="bg-yellow-100 border-4 border-black p-4 shadow-[4px_4px_0_rgba(0,0,0,1)]">
                <p className="text-sm text-gray-700">
                  <span className="font-black text-black uppercase">Preview:</span> "Hi, this is an AI assistant from {formData.businessName}. 
                  {formData.whatYouDo ? ` We ${formData.whatYouDo}.` : ''} 
                  {formData.mainGoal ? ` I'm calling to ${formData.mainGoal}.` : ''}"
                </p>
                <p className="text-xs text-gray-600 mt-2 italic">
                  Speaking style: {formData.howItSpeaks}
                </p>
              </div>

              <div className="flex justify-between">
                <Button
                  variant="neutral"
                  className="px-6 py-2 font-black uppercase"
                  onClick={handleBack}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  ← Back
                </Button>
                <Button
                  className="px-6 py-2 font-black uppercase bg-green-400"
                  onClick={handleSubmit}
                  disabled={!formData.mainGoal}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  Create Pitch ✓
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/delete-confirmation-modal.tsx
================================================
import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '../../ui/card';
import { Button } from '../../ui/button';
import { Input } from '../../ui/input';
import { 
  UilTimes, 
  UilTrashAlt,
  UilExclamationTriangle,
  UilCheckCircle,
  UilDatabase
} from '@tooni/iconscout-unicons-react';

interface DeleteConfirmationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  itemName: string;
  itemType: string;
  warningMessage?: string;
  consequences?: string[];
  requiresNameConfirmation?: boolean;
  isLoading?: boolean;
}

export default function DeleteConfirmationModal({ 
  isOpen, 
  onClose, 
  onConfirm, 
  itemName, 
  itemType,
  warningMessage,
  consequences = [],
  requiresNameConfirmation = false,
  isLoading = false
}: DeleteConfirmationModalProps) {
  const [nameConfirmation, setNameConfirmation] = React.useState('');
  const [isConfirmed, setIsConfirmed] = React.useState(false);

  React.useEffect(() => {
    if (isOpen) {
      setNameConfirmation('');
      setIsConfirmed(false);
    }
  }, [isOpen]);

  React.useEffect(() => {
    if (requiresNameConfirmation) {
      setIsConfirmed(nameConfirmation === itemName);
    } else {
      setIsConfirmed(true);
    }
  }, [nameConfirmation, itemName, requiresNameConfirmation]);

  if (!isOpen) return null;

  const handleConfirm = () => {
    if (isConfirmed && !isLoading) {
      onConfirm();
    }
  };

  const defaultConsequences = [
    'This action cannot be undone',
    'All associated data will be permanently deleted',
    'Any active processes will be immediately stopped'
  ];

  const displayConsequences = consequences.length > 0 ? consequences : defaultConsequences;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-md border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-background">
        <CardHeader className="border-b-4 border-black bg-red-500 relative">
          <CardTitle className="text-xl font-black uppercase text-white pr-10" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
            <UilTrashAlt className="inline w-6 h-6 mr-2" />
            DELETE {itemType.toUpperCase()}
          </CardTitle>
          <Button
            variant="neutral"
            size="sm"
            className="absolute top-4 right-4"
            onClick={onClose}
            disabled={isLoading}
          >
            <UilTimes className="h-4 w-4 text-black" />
          </Button>
        </CardHeader>
        
        <CardContent className="p-6 space-y-6">
          {/* Warning Icon and Message */}
          <div className="flex items-center gap-4 p-4 bg-red-50 border-4 border-black">
            <UilExclamationTriangle className="w-12 h-12 text-red-500 flex-shrink-0" />
            <div>
              <p className="font-black text-red-800 uppercase text-lg">
                Warning!
              </p>
              <p className="text-red-700 font-bold">
                {warningMessage || `You are about to delete the ${itemType}`}
              </p>
            </div>
          </div>

          {/* Item Details */}
          <div className="p-4 bg-gray-50 border-4 border-black">
            <p className="text-xs font-black uppercase text-gray-600 mb-1">{itemType} to delete:</p>
            <p className="font-black text-xl text-black break-words">{itemName}</p>
          </div>

          {/* Consequences */}
          <div className="space-y-3">
            <p className="font-black uppercase text-black text-sm">This will:</p>
            <div className="space-y-2">
              {displayConsequences.map((consequence, index) => (
                <div key={index} className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-red-500 border border-black mt-2 flex-shrink-0"></div>
                  <p className="text-sm text-gray-700 font-medium">{consequence}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Name Confirmation Input */}
          {requiresNameConfirmation && (
            <div className="space-y-2">
              <label className="block text-sm font-black uppercase text-black">
                Type "{itemName}" to confirm:
              </label>
              <Input
                value={nameConfirmation}
                onChange={(e) => setNameConfirmation(e.target.value)}
                placeholder={`Enter ${itemName}`}
                className="border-2 border-black rounded-[3px]"
                disabled={isLoading}
              />
              {nameConfirmation && nameConfirmation !== itemName && (
                <p className="text-xs text-red-600">Name doesn't match. Please type exactly: {itemName}</p>
              )}
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex gap-3 pt-4">
            <Button
              variant="neutral"
              onClick={onClose}
              className="flex-1"
              disabled={isLoading}
              style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
            >
              CANCEL
            </Button>
            
            <Button
              onClick={handleConfirm}
              disabled={!isConfirmed || isLoading}
              className="flex-1 bg-red-500 hover:bg-red-600"
              style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
            >
              {isLoading ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                  DELETING...
                </>
              ) : (
                <>
                  <UilTrashAlt className="w-4 h-4 mr-2" />
                  DELETE {itemType.toUpperCase()}
                </>
              )}
            </Button>
          </div>

          {/* Additional Warning for High-Risk Items */}
          {requiresNameConfirmation && (
            <div className="text-center">
              <p className="text-xs text-red-600 font-medium">
                ⚠️ This is a high-risk operation that requires name confirmation
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/hunt-configuration-modal.tsx
================================================
import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '../../ui/card';
import { Button } from '../../ui/button';
import { Input } from '../../ui/input';
import { Textarea } from '../../ui/textarea';
import { Badge } from '../../ui/badge';
import { Slider } from '../../ui/slider';
import PremiumFeatureCard from '../premium-feature-card';
import { 
  UilTimes, 
  UilLock, 
  UilLinkedin,
  UilSearchAlt,
  UilBuilding,
  UilMapMarker,
  UilFilter,
  UilUsersAlt,
  UilDollarSign
} from '@tooni/iconscout-unicons-react';

interface HuntConfigurationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (huntData: HuntConfigurationData) => void;
}

export interface HuntConfigurationData {
  name: string;
  location: string;
  businessType: string;
  keywords: string[];
  includeLinkedIn: boolean;
  searchDepth: number;
  advancedFilters: {
    employeeRange?: string;
    revenueRange?: string;
    yearsInBusiness?: string;
  };
  dataEnrichment: {
    emailFinder: boolean;
    socialProfiles: boolean;
    technographics: boolean;
  };
}

export default function HuntConfigurationModal({ isOpen, onClose, onSave }: HuntConfigurationModalProps) {
  const [currentStep, setCurrentStep] = React.useState(1);
  const [formData, setFormData] = React.useState<HuntConfigurationData>({
    name: '',
    location: '',
    businessType: '',
    keywords: [],
    includeLinkedIn: true,
    searchDepth: 3,
    advancedFilters: {},
    dataEnrichment: {
      emailFinder: false,
      socialProfiles: false,
      technographics: false
    }
  });
  const [keywordInput, setKeywordInput] = React.useState('');

  // Reset form when modal opens
  React.useEffect(() => {
    if (isOpen) {
      setCurrentStep(1);
      setFormData({
        name: '',
        location: '',
        businessType: '',
        keywords: [],
        includeLinkedIn: true,
        searchDepth: 3,
        advancedFilters: {},
        dataEnrichment: {
          emailFinder: false,
          socialProfiles: false,
          technographics: false
        }
      });
      setKeywordInput('');
    }
  }, [isOpen]);

  const handleInputChange = (field: keyof HuntConfigurationData) => (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setFormData(prev => ({
      ...prev,
      [field]: e.target.value
    }));
  };

  const handleAddKeyword = () => {
    if (keywordInput.trim() && !formData.keywords.includes(keywordInput.trim())) {
      setFormData(prev => ({
        ...prev,
        keywords: [...prev.keywords, keywordInput.trim()]
      }));
      setKeywordInput('');
    }
  };

  const handleRemoveKeyword = (keyword: string) => {
    setFormData(prev => ({
      ...prev,
      keywords: prev.keywords.filter(k => k !== keyword)
    }));
  };

  const handleSubmit = () => {
    onSave(formData);
    onClose();
  };

  const handleNext = () => {
    if (currentStep < 5) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-2xl border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-background max-h-[90vh] overflow-y-auto">
        <CardHeader className="border-b-4 border-black bg-[rgb(0,82,255)] relative sticky top-0 z-10">
          <CardTitle className="text-2xl font-black uppercase text-white pr-10" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
            CONFIGURE HUNT - STEP {currentStep} OF 5
          </CardTitle>
          <Button
            variant="neutral"
            size="sm"
            className="absolute top-4 right-4"
            onClick={onClose}
          >
            <UilTimes className="h-5 w-5 text-black" />
          </Button>
        </CardHeader>
        
        <CardContent className="p-6">
          {/* Progress indicator */}
          <div className="flex items-center justify-center mb-6">
            <div className="flex items-center gap-2">
              {[1, 2, 3, 4, 5].map((step, index) => (
                <React.Fragment key={step}>
                  <div className={`
                    relative px-4 py-2 border-4 border-black flex items-center justify-center font-bold text-sm
                    transition-all duration-300
                    ${currentStep === step 
                      ? 'bg-[rgb(0,82,255)] text-white scale-105 shadow-[3px_3px_0_rgba(0,0,0,1)]' 
                      : currentStep > step 
                        ? 'bg-[rgb(0,82,255)] text-white shadow-[2px_2px_0_rgba(0,0,0,1)]'
                        : 'bg-gray-300 text-gray-600 shadow-[2px_2px_0_rgba(0,0,0,1)]'
                    }
                  `}>
                    {step}
                  </div>
                  {index < 4 && (
                    <div className={`w-8 h-2 mx-2 border-2 border-black transition-all duration-300 ${
                      currentStep > step 
                        ? 'bg-white shadow-[2px_2px_0_rgba(0,0,0,1)]' 
                        : 'bg-gray-400'
                    }`}></div>
                  )}
                </React.Fragment>
              ))}
            </div>
          </div>

          {/* Step 1: Hunt Name & Type */}
          {currentStep === 1 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  Name Your Hunt
                </label>
                <Input
                  value={formData.name}
                  onChange={handleInputChange('name')}
                  placeholder="E.g., SaaS Companies Bay Area Q1"
                  className="border-2 border-black rounded-[3px] text-lg"
                />
                <p className="text-xs text-gray-600 mt-1">Give your hunt a memorable name to track it later</p>
              </div>

              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  Business Type / Industry
                </label>
                <Input
                  value={formData.businessType}
                  onChange={handleInputChange('businessType')}
                  placeholder="E.g., Software, E-commerce, Healthcare"
                  className="border-2 border-black rounded-[3px] text-lg"
                />
              </div>

              <div className="flex justify-end">
                <Button
                  onClick={handleNext}
                  disabled={!formData.name || !formData.businessType}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 2: Location & Keywords */}
          {currentStep === 2 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  <UilMapMarker className="inline w-4 h-4 mr-1" />
                  Target Location
                </label>
                <Input
                  value={formData.location}
                  onChange={handleInputChange('location')}
                  placeholder="E.g., San Francisco, CA or United States"
                  className="border-2 border-black rounded-[3px] text-lg"
                />
                <p className="text-xs text-gray-600 mt-1">City, state, country, or region</p>
              </div>

              <div>
                <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  <UilFilter className="inline w-4 h-4 mr-1" />
                  Search Keywords
                </label>
                <div className="flex gap-2 mb-3">
                  <Input
                    value={keywordInput}
                    onChange={(e) => setKeywordInput(e.target.value)}
                    placeholder="Add a keyword..."
                    className="border-2 border-black rounded-[3px]"
                    onKeyPress={(e) => e.key === 'Enter' && handleAddKeyword()}
                  />
                  <Button
                    onClick={handleAddKeyword}
                    variant="neutral"
                  >
                    ADD
                  </Button>
                </div>
                <div className="flex flex-wrap gap-2">
                  {formData.keywords.map((keyword) => (
                    <Badge
                      key={keyword}
                      className="px-3 py-1 border-2 border-black bg-white text-black font-bold cursor-pointer hover:bg-red-100"
                      onClick={() => handleRemoveKeyword(keyword)}
                    >
                      {keyword} ×
                    </Badge>
                  ))}
                </div>
                {formData.keywords.length === 0 && (
                  <p className="text-xs text-gray-500 mt-2">Add keywords like "B2B", "Enterprise", "Cloud", etc.</p>
                )}
              </div>

              <div className="flex justify-between">
                <Button
                  variant="neutral"
                  onClick={handleBack}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  ← Back
                </Button>
                <Button
                  onClick={handleNext}
                  disabled={!formData.location || formData.keywords.length === 0}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 3: Search Settings */}
          {currentStep === 3 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-black uppercase text-black mb-4" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  <UilSearchAlt className="inline w-4 h-4 mr-1" />
                  Search Depth (1-5 Levels)
                </label>
                <div className="space-y-2">
                  <Slider 
                    value={[formData.searchDepth]} 
                    onValueChange={(value) => setFormData(prev => ({ ...prev, searchDepth: value[0] }))}
                    min={1} 
                    max={5} 
                    step={1}
                    className="mb-2"
                  />
                  <div className="flex justify-between text-xs text-gray-600 font-bold">
                    <span>Shallow</span>
                    <span className="text-lg text-black">{formData.searchDepth}</span>
                    <span>Deep</span>
                  </div>
                  <p className="text-xs text-gray-600 text-center mt-2">
                    Level {formData.searchDepth}: ~{formData.searchDepth * 1000} pages to analyze
                  </p>
                </div>
              </div>

              <div>
                <label className="block text-sm font-black uppercase text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  <UilLinkedin className="inline w-4 h-4 mr-1" />
                  LinkedIn Integration
                </label>
                <PremiumFeatureCard
                  title="LINKEDIN SEARCH & ENRICHMENT"
                  description="Find decision makers and enrich contact information from LinkedIn profiles"
                  price="$59/month"
                />
              </div>

              <div className="flex justify-between">
                <Button
                  variant="neutral"
                  onClick={handleBack}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  ← Back
                </Button>
                <Button
                  onClick={handleNext}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 4: Advanced Filters (Premium) */}
          {currentStep === 4 && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-black uppercase text-black mb-4" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                  Advanced Filters
                </h3>
                
                {/* Premium Features */}
                <div className="space-y-3">
                  <Card className="w-full border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] bg-gray-100 relative overflow-hidden">
                    <div className="absolute inset-0 bg-gray-200 opacity-50"></div>
                    <CardContent className="p-4 relative">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-black text-black uppercase flex items-center gap-2">
                            <UilUsersAlt className="w-5 h-5" />
                            Employee Range Filter
                            <Badge className="bg-yellow-400 border-2 border-black text-xs">PREMIUM</Badge>
                          </h4>
                          <p className="text-sm text-gray-700 mt-1">Filter by company size (1-50, 50-200, etc.)</p>
                        </div>
                        <UilLock className="w-6 h-6 text-gray-600" />
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="w-full border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] bg-gray-100 relative overflow-hidden">
                    <div className="absolute inset-0 bg-gray-200 opacity-50"></div>
                    <CardContent className="p-4 relative">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-black text-black uppercase flex items-center gap-2">
                            <UilDollarSign className="w-5 h-5" />
                            Revenue Range Filter
                            <Badge className="bg-yellow-400 border-2 border-black text-xs">PREMIUM</Badge>
                          </h4>
                          <p className="text-sm text-gray-700 mt-1">Target by annual revenue brackets</p>
                        </div>
                        <UilLock className="w-6 h-6 text-gray-600" />
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="w-full border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] bg-gray-100 relative overflow-hidden">
                    <div className="absolute inset-0 bg-gray-200 opacity-50"></div>
                    <CardContent className="p-4 relative">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-black text-black uppercase flex items-center gap-2">
                            <UilBuilding className="w-5 h-5" />
                            Years in Business
                            <Badge className="bg-yellow-400 border-2 border-black text-xs">PREMIUM</Badge>
                          </h4>
                          <p className="text-sm text-gray-700 mt-1">Find established or new companies</p>
                        </div>
                        <UilLock className="w-6 h-6 text-gray-600" />
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <div className="mt-4 p-4 bg-yellow-50 border-3 border-yellow-400 rounded-lg">
                  <p className="text-sm font-bold text-yellow-800">
                    🚀 Upgrade to Premium to unlock advanced filtering and get 3x more qualified leads
                  </p>
                </div>
              </div>

              <div className="flex justify-between">
                <Button
                  variant="neutral"
                  onClick={handleBack}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  ← Back
                </Button>
                <Button
                  onClick={handleNext}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  Next →
                </Button>
              </div>
            </div>
          )}

          {/* Step 5: Review & Launch */}
          {currentStep === 5 && (
            <div className="space-y-6">
              <h3 className="text-lg font-black uppercase text-black mb-4" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Review Your Hunt Configuration
              </h3>

              {/* Configuration Summary */}
              <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] bg-yellow-50">
                <CardContent className="p-6 space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-xs font-black text-gray-600 uppercase">Hunt Name</p>
                      <p className="font-bold text-lg">{formData.name}</p>
                    </div>
                    <div>
                      <p className="text-xs font-black text-gray-600 uppercase">Business Type</p>
                      <p className="font-bold text-lg">{formData.businessType}</p>
                    </div>
                    <div>
                      <p className="text-xs font-black text-gray-600 uppercase">Location</p>
                      <p className="font-bold text-lg">{formData.location}</p>
                    </div>
                    <div>
                      <p className="text-xs font-black text-gray-600 uppercase">Search Depth</p>
                      <p className="font-bold text-lg">Level {formData.searchDepth}</p>
                    </div>
                  </div>
                  
                  <div>
                    <p className="text-xs font-black text-gray-600 uppercase mb-2">Keywords</p>
                    <div className="flex flex-wrap gap-2">
                      {formData.keywords.map((keyword) => (
                        <Badge key={keyword} className="border-2 border-black bg-white">
                          {keyword}
                        </Badge>
                      ))}
                    </div>
                  </div>

                  <div className="flex items-center gap-4 pt-2">
                    <div className="flex items-center gap-2">
                      <div className={`w-4 h-4 rounded-full ${formData.includeLinkedIn ? 'bg-green-500' : 'bg-gray-300'}`} />
                      <span className="text-sm font-bold">LinkedIn Integration</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Estimated Results */}
              <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] bg-blue-50">
                <CardContent className="p-4">
                  <h4 className="font-black uppercase mb-2">Estimated Results</h4>
                  <div className="grid grid-cols-3 gap-4 text-center">
                    <div>
                      <p className="text-2xl font-black text-black">{Math.floor(Math.random() * 2000 + 500)}</p>
                      <p className="text-xs text-gray-600">Pages to Scan</p>
                    </div>
                    <div>
                      <p className="text-2xl font-black text-black">{Math.floor(Math.random() * 300 + 100)}</p>
                      <p className="text-xs text-gray-600">Expected Businesses</p>
                    </div>
                    <div>
                      <p className="text-2xl font-black text-black">2-4h</p>
                      <p className="text-xs text-gray-600">Processing Time</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <div className="flex justify-between">
                <Button
                  variant="neutral"
                  onClick={handleBack}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  ← Back
                </Button>
                <Button
                  onClick={handleSubmit}
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  🚀 LAUNCH HUNT
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/live-call-monitor-modal-fixed.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import { 
  UilPhone,
  UilMicrophone,
  UilVolumeUp,
  UilVolumeMute,
  UilEdit,
  UilLocationPoint,
  UilTransferAlt,
  UilHeadphones,
  UilRecord,
  UilStop,
  UilClock
} from '@tooni/iconscout-unicons-react';
import LiveWaveformPanel from '../live-waveform-panel';

interface LiveCallData {
  callId: string;
  agentName: string;
  customerName: string;
  customerPhone: string;
  status: 'connecting' | 'ringing' | 'connected' | 'on-hold' | 'transferring';
  duration: number;
  campaignName: string;
  startTime: string;
  currentPhase: string;
  isRecording: boolean;
  agentGain: number;
  customerGain: number;
  currentSpeaker: 'agent' | 'customer' | null;
  recentTranscript: Array<{
    timestamp: string;
    speaker: 'agent' | 'customer';
    text: string;
    sentiment?: 'positive' | 'negative' | 'neutral';
  }>;
  callObjectives: string[];
  nextActions: string[];
}

interface LiveCallMonitorModalProps {
  isOpen: boolean;
  onClose: () => void;
  callData: LiveCallData;
}

export default function LiveCallMonitorModal({ isOpen, onClose, callData }: LiveCallMonitorModalProps) {
  const [activeTab, setActiveTab] = React.useState('transcript');
  const [isMuted, setIsMuted] = React.useState(false);
  const [volume, setVolume] = React.useState(75);
  const [audioSectionHeight, setAudioSectionHeight] = React.useState(200);
  const [isDragging, setIsDragging] = React.useState(false);
  const [isCollapsed, setIsCollapsed] = React.useState(false);

  // MOCK: Real-time updates simulation
  const [liveCallData, setLiveCallData] = React.useState(callData);
  
  // Resize handlers
  const handleMouseDown = (e: React.MouseEvent) => {
    setIsDragging(true);
    e.preventDefault();
  };
  
  const handleMouseMove = React.useCallback((e: MouseEvent) => {
    if (!isDragging) return;
    
    const modalContainer = document.querySelector('.live-modal-container');
    if (!modalContainer) return;
    
    const modalRect = modalContainer.getBoundingClientRect();
    const isMobile = window.innerWidth < 640;
    
    const newHeight = e.clientY - modalRect.top - 200;
    const minHeight = isMobile ? 150 : 200;
    const maxHeight = isMobile ? 300 : 400;
    
    if (newHeight < minHeight) {
      setIsCollapsed(true);
      setAudioSectionHeight(0);
    } else {
      setIsCollapsed(false);
      setAudioSectionHeight(Math.min(Math.max(newHeight, minHeight), maxHeight));
    }
  }, [isDragging]);
  
  const handleMouseUp = React.useCallback(() => {
    setIsDragging(false);
  }, []);
  
  React.useEffect(() => {
    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      
      return () => {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
      };
    }
  }, [isDragging, handleMouseMove, handleMouseUp]);
  
  React.useEffect(() => {
    if (!isOpen) return;
    
    // MOCK: Simulate real-time call updates
    const interval = setInterval(() => {
      setLiveCallData(prev => ({
        ...prev,
        duration: prev.duration + 1,
        agentGain: 20 + Math.random() * 60,
        customerGain: 15 + Math.random() * 50,
        currentSpeaker: Math.random() > 0.7 ? (Math.random() > 0.5 ? 'agent' : 'customer') : null
      }));
    }, 1000);
    
    return () => clearInterval(interval);
  }, [isOpen]);

  if (!isOpen) return null;

  const getStatusBadgeColor = (status: string) => {
    switch (status) {
      case 'connected': return 'bg-green-400 text-black';
      case 'connecting': return 'bg-yellow-400 text-black';
      case 'ringing': return 'bg-blue-400 text-white';
      case 'on-hold': return 'bg-orange-400 text-black';
      case 'transferring': return 'bg-purple-400 text-white';
      default: return 'bg-gray-400 text-black';
    }
  };

  const formatDuration = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-0 sm:p-4">
      <div className="live-modal-container bg-white border-0 sm:border-4 border-black shadow-none sm:shadow-[8px_8px_0_rgba(0,0,0,1)] w-full h-full sm:max-w-6xl sm:h-5/6 sm:max-h-[calc(100vh-2rem)] flex flex-col">
        
        {/* Modal Header */}
        <div className="border-b-2 sm:border-b-4 border-black bg-gray-100 flex-shrink-0">
          {/* Mobile Header */}
          <div className="sm:hidden p-3 safe-area-top">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-2">
                <h2 className="text-base font-black uppercase truncate">LIVE CALL MONITOR</h2>
                <Badge className={cn("border border-black font-bold uppercase text-xs px-1 flex-shrink-0", getStatusBadgeColor(liveCallData.status))}>
                  {liveCallData.status}
                </Badge>
              </div>
              <Button 
                onClick={onClose}
                size="sm"
                className="w-8 h-8 p-0 bg-red-500 hover:bg-red-600 text-white border-2 border-black font-black text-lg flex-shrink-0"
              >
                ×
              </Button>
            </div>
            <div className="bg-white border-2 border-black p-2">
              <div className="font-black text-sm mb-1 truncate">{liveCallData.agentName} → {liveCallData.customerName}</div>
              <div className="flex items-center justify-between text-xs">
                <span className="font-bold">{formatDuration(liveCallData.duration)}</span>
                <span className="text-gray-600">{liveCallData.campaignName}</span>
              </div>
            </div>
          </div>
          
          {/* Desktop Header */}
          <div className="hidden sm:block p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <h2 className="text-xl font-black uppercase">Live Call Monitor - {liveCallData.agentName}</h2>
                <Badge className={cn("border-2 border-black font-bold uppercase", getStatusBadgeColor(liveCallData.status))}>
                  {liveCallData.status}
                </Badge>
                {liveCallData.isRecording && (
                  <Badge className="bg-red-500 text-white border-2 border-black font-bold uppercase animate-pulse flex items-center gap-1">
                    <UilRecord className="h-3 w-3" />
                    RECORDING
                  </Badge>
                )}
              </div>
              <Button 
                onClick={onClose}
                size="sm"
                className="bg-red-500 hover:bg-red-600 text-white border-2 border-black font-black text-xl px-3 py-2"
              >
                ×
              </Button>
            </div>
            <div className="flex items-center gap-6 mt-2 text-sm">
              <span className="font-bold">PROSPECT: {liveCallData.customerName} ({liveCallData.customerPhone})</span>
              <span className="font-bold flex items-center gap-1">
                <UilClock className="h-4 w-4" />
                DURATION: {formatDuration(liveCallData.duration)}
              </span>
              <span className="font-bold">CAMPAIGN: {liveCallData.campaignName}</span>
            </div>
          </div>
        </div>

        {/* Modal Tabs */}
        <div className="border-b-2 sm:border-b-4 border-black bg-black flex-shrink-0">
          {/* Mobile: Dropdown Tabs */}
          <div className="sm:hidden p-2">
            <select
              value={activeTab}
              onChange={(e) => setActiveTab(e.target.value)}
              className="w-full px-3 py-3 border-2 border-black font-bold uppercase text-sm bg-white focus:outline-none appearance-none"
            >
              <option value="transcript">LIVE TRANSCRIPT</option>
              <option value="objectives">CALL OBJECTIVES</option>
              <option value="controls">SUPERVISOR CONTROLS</option>
              <option value="analytics">REAL-TIME ANALYTICS</option>
            </select>
          </div>
          
          {/* Desktop: Button Tabs */}
          <div className="hidden sm:block">
            <div className="flex overflow-x-auto">
              {['transcript', 'objectives', 'controls', 'analytics'].map((tab) => (
                <Button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  variant="reverse"
                  size="lg"
                  className="whitespace-nowrap flex-shrink-0"
                  style={{ 
                    outline: 'none',
                    backgroundColor: activeTab === tab ? '' : 'white',
                    borderWidth: '2px'
                  }}
                  onMouseEnter={(e) => {
                    if (activeTab !== tab) {
                      e.currentTarget.style.setProperty('background-color', '#7dd3fc', 'important');
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (activeTab !== tab) {
                      e.currentTarget.style.setProperty('background-color', 'white', 'important');
                    }
                  }}
                >
                  {tab.replace('-', ' ').toUpperCase()}
                </Button>
              ))}
            </div>
          </div>
        </div>

        {/* Live Audio Visualization Section - Resizable */}
        {!isCollapsed && (
          <div 
            className="border-b-2 sm:border-b-4 border-black bg-gray-50 relative flex-shrink-0"
            style={{ height: `${audioSectionHeight}px` }}
          >
            {/* Status Bar */}
            <div className="bg-gray-100 border-b-2 border-black p-3 flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="bg-purple-400 text-white px-3 py-1 border-2 border-black font-bold uppercase text-sm flex items-center gap-2">
                  <UilPhone className="h-4 w-4" />
                  LIVE OUTBOUND CALL
                </div>
                <span className="font-bold text-sm">{liveCallData.currentPhase}</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="text-sm text-gray-600">Duration: {formatDuration(liveCallData.duration)}</div>
                <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
              </div>
            </div>

            {/* Live Waveform */}
            <div className="flex-1">
              <LiveWaveformPanel
                agentName={liveCallData.agentName}
                customerName={liveCallData.customerName}
                agentGain={liveCallData.agentGain}
                customerGain={liveCallData.customerGain}
                currentSpeaker={liveCallData.currentSpeaker}
                isMuted={isMuted}
                className="h-full"
                direction="horizontal"
              />
            </div>
            
            {/* Resize Handle */}
            <div 
              className={cn(
                "absolute bottom-0 left-0 right-0 h-4 bg-gray-300 border-t-2 border-black cursor-ns-resize hover:bg-gray-400 active:bg-gray-400 flex items-center justify-center transition-colors touch-manipulation",
                isDragging && "bg-blue-300"
              )}
              onMouseDown={handleMouseDown}
            >
              <div className="w-16 h-1 sm:w-12 bg-gray-600 rounded"></div>
            </div>
          </div>
        )}
        
        {/* Collapsed Audio Section Indicator */}
        {isCollapsed && (
          <div className="border-b-2 sm:border-b-4 border-black bg-gray-100 p-2 flex items-center justify-center">
            <Button 
              size="sm" 
              variant="neutral"
              onClick={() => {
                setIsCollapsed(false);
                setAudioSectionHeight(200);
              }}
            >
              <span className="text-xs flex items-center gap-1">
                <UilHeadphones className="h-3 w-3" />
                Show Live Audio Monitor
              </span>
            </Button>
          </div>
        )}

        {/* Modal Content */}
        <div className="flex-1 flex flex-col sm:flex-row overflow-hidden min-h-0">
          {/* Main Content Area */}
          <div className="flex-1 p-2 sm:p-4 overflow-y-auto overflow-x-hidden">
            {activeTab === 'transcript' && (
              <div className="space-y-3">
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-3 text-gray-600">LIVE TRANSCRIPT</h3>
                  <div className="max-h-64 overflow-y-auto space-y-2">
                    {liveCallData.recentTranscript.map((entry, index) => (
                      <div 
                        key={index}
                        className={cn(
                          "p-2 border-2 border-black text-sm",
                          entry.speaker === 'agent' ? 'bg-blue-100' : 'bg-green-100'
                        )}
                      >
                        <div className="flex items-center gap-2 mb-1">
                          <span className="font-black text-xs uppercase">{entry.speaker}</span>
                          <span className="text-xs text-gray-600">{entry.timestamp}</span>
                          {entry.sentiment && (
                            <Badge className={cn(
                              "text-xs",
                              entry.sentiment === 'positive' ? 'bg-green-400 text-black' :
                              entry.sentiment === 'negative' ? 'bg-red-400 text-white' :
                              'bg-gray-400 text-black'
                            )}>
                              {entry.sentiment}
                            </Badge>
                          )}
                        </div>
                        <p>{entry.text}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'objectives' && (
              <div className="space-y-4">
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-3 text-gray-600">CALL OBJECTIVES</h3>
                  <div className="space-y-2">
                    {liveCallData.callObjectives.map((objective, index) => (
                      <div key={index} className="flex items-center gap-2">
                        <div className="w-2 h-2 bg-blue-400 border border-black"></div>
                        <span className="text-sm">{objective}</span>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-3 text-gray-600">NEXT ACTIONS</h3>
                  <div className="space-y-2">
                    {liveCallData.nextActions.map((action, index) => (
                      <div key={index} className="flex items-center gap-2">
                        <div className="w-2 h-2 bg-green-400 border border-black"></div>
                        <span className="text-sm">{action}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'controls' && (
              <div className="space-y-4">
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-3 text-gray-600">SUPERVISOR CONTROLS</h3>
                  <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-yellow-400 text-black">
                      <UilHeadphones className="h-4 w-4 mr-2" />
                      WHISPER
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-orange-400 text-black">
                      <UilTransferAlt className="h-4 w-4 mr-2" />
                      TRANSFER
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-red-400 text-white">
                      <UilStop className="h-4 w-4 mr-2" />
                      END CALL
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }}>
                      <UilEdit className="h-4 w-4 mr-2" />
                      ADD NOTE
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }}>
                      <UilLocationPoint className="h-4 w-4 mr-2" />
                      MARK EVENT
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'analytics' && (
              <div className="space-y-4">
                {/* Real-time Call Status */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-3 text-gray-600">REAL-TIME CALL STATUS</h3>
                  <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
                    <div className="text-center">
                      <div className="text-lg sm:text-2xl font-black text-green-600">{formatDuration(liveCallData.duration)}</div>
                      <div className="text-xs text-gray-600 font-bold">DURATION</div>
                    </div>
                    <div className="text-center">
                      <div className="text-lg sm:text-2xl font-black text-blue-600">{liveCallData.currentPhase}</div>
                      <div className="text-xs text-gray-600 font-bold">PHASE</div>
                    </div>
                    <div className="text-center">
                      <div className="text-lg sm:text-2xl font-black text-purple-600">{liveCallData.campaignName}</div>
                      <div className="text-xs text-gray-600 font-bold">CAMPAIGN</div>
                    </div>
                    <div className="text-center">
                      <div className={cn("text-lg sm:text-2xl font-black", liveCallData.isRecording ? "text-red-600" : "text-gray-400")}>
                        {liveCallData.isRecording ? "REC" : "OFF"}
                      </div>
                      <div className="text-xs text-gray-600 font-bold">RECORDING</div>
                    </div>
                  </div>
                </div>

                {/* Monitor Controls */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-3 text-gray-600">MONITOR CONTROLS</h3>
                  <div className="flex flex-wrap items-center gap-2 sm:gap-4">
                    <Button
                      size="sm"
                      variant="reverse"
                      style={{ outline: 'none' }}
                      className="px-3 py-2"
                      onClick={() => setIsMuted(!isMuted)}
                    >
                      {isMuted ? <UilVolumeMute className="h-4 w-4 mr-1" /> : <UilVolumeUp className="h-4 w-4 mr-1" />}
                      {isMuted ? "MUTED" : "AUDIO"}
                    </Button>

                    <div className="flex items-center gap-2">
                      <span className="text-xs font-bold">VOLUME</span>
                      <div 
                        className="w-20 h-3 bg-gray-300 border-2 border-black relative cursor-pointer"
                        onClick={(e) => {
                          const rect = e.currentTarget.getBoundingClientRect();
                          const x = e.clientX - rect.left;
                          const newVolume = Math.round((x / rect.width) * 100);
                          setVolume(Math.max(0, Math.min(100, newVolume)));
                        }}
                      >
                        <div 
                          className="absolute left-0 top-0 h-full bg-blue-400" 
                          style={{ width: `${isMuted ? 0 : volume}%` }}
                        ></div>
                      </div>
                      <span className="text-xs font-bold">{isMuted ? 0 : volume}%</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/live-call-monitor-modal.tsx
================================================
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import { 
  UilPhone,
  UilMicrophone,
  UilVolumeUp,
  UilVolumeMute,
  UilEdit,
  UilLocationPoint,
  UilExchange,
  UilHeadphones,
  UilCircle,
  UilSquare,
  UilClock
} from '@tooni/iconscout-unicons-react';
import LiveWaveformPanel from '../live-waveform-panel';

interface LiveCallData {
  callId: string;
  agentName: string;
  customerName: string;
  customerPhone: string;
  status: 'connecting' | 'ringing' | 'connected' | 'on-hold' | 'transferring';
  duration: number;
  campaignName: string;
  startTime: string;
  currentPhase: string;
  isRecording: boolean;
  agentGain: number;
  customerGain: number;
  currentSpeaker: 'agent' | 'customer' | null;
  recentTranscript: Array<{
    timestamp: string;
    speaker: 'agent' | 'customer';
    text: string;
    sentiment?: 'positive' | 'negative' | 'neutral';
  }>;
  callObjectives: string[];
  nextActions: string[];
}

interface LiveCallMonitorModalProps {
  isOpen: boolean;
  onClose: () => void;
  callData: LiveCallData;
}

export default function LiveCallMonitorModal({ isOpen, onClose, callData }: LiveCallMonitorModalProps) {
  const [activeTab, setActiveTab] = React.useState('transcript');
  const [isMuted, setIsMuted] = React.useState(false);
  const [volume, setVolume] = React.useState(75);
  const [audioSectionHeight, setAudioSectionHeight] = React.useState(340);
  const [isDragging, setIsDragging] = React.useState(false);
  const [isCollapsed, setIsCollapsed] = React.useState(false);

  // MOCK: Real-time updates simulation
  const [liveCallData, setLiveCallData] = React.useState(callData);
  
  // Resize handlers
  const handleMouseDown = (e: React.MouseEvent) => {
    setIsDragging(true);
    e.preventDefault();
  };
  
  const handleMouseMove = React.useCallback((e: MouseEvent) => {
    if (!isDragging) return;
    
    const modalContainer = document.querySelector('.live-modal-container');
    if (!modalContainer) return;
    
    const audioSection = document.querySelector('.audio-section');
    if (!audioSection) return;
    
    const modalRect = modalContainer.getBoundingClientRect();
    const audioSectionTop = audioSection.getBoundingClientRect().top;
    const newHeight = e.clientY - audioSectionTop;
    const isMobile = window.innerWidth < 640;
    const isTablet = window.innerWidth >= 640 && window.innerWidth < 1024;
    
    const minHeight = isMobile ? 340 : isTablet ? 290 : 250;
    const maxHeight = isMobile ? 400 : 500;
    
    if (newHeight < minHeight) {
      setIsCollapsed(true);
      setAudioSectionHeight(0);
    } else {
      setIsCollapsed(false);
      setAudioSectionHeight(Math.min(Math.max(newHeight, minHeight), maxHeight));
    }
  }, [isDragging]);
  
  const handleMouseUp = React.useCallback(() => {
    setIsDragging(false);
  }, []);
  
  React.useEffect(() => {
    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      
      return () => {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
      };
    }
  }, [isDragging, handleMouseMove, handleMouseUp]);
  
  React.useEffect(() => {
    if (!isOpen) return;
    
    // MOCK: Simulate real-time call updates
    const interval = setInterval(() => {
      setLiveCallData(prev => ({
        ...prev,
        duration: prev.duration + 1,
        agentGain: 20 + Math.random() * 60,
        customerGain: 15 + Math.random() * 50,
        currentSpeaker: Math.random() > 0.7 ? (Math.random() > 0.5 ? 'agent' : 'customer') : null
      }));
    }, 1000);
    
    return () => clearInterval(interval);
  }, [isOpen]);

  if (!isOpen) return null;

  const getStatusBadgeColor = (status: string) => {
    switch (status) {
      case 'connected': return 'bg-green-400 text-black';
      case 'connecting': return 'bg-yellow-400 text-black';
      case 'ringing': return 'bg-blue-400 text-white';
      case 'on-hold': return 'bg-orange-400 text-black';
      case 'transferring': return 'bg-purple-400 text-white';
      default: return 'bg-gray-400 text-black';
    }
  };

  const formatDuration = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-0 sm:p-4">
      <div className="live-modal-container bg-white border-0 sm:border-4 border-black shadow-none sm:shadow-[8px_8px_0_rgba(0,0,0,1)] w-full h-full sm:max-w-6xl sm:h-5/6 sm:max-h-[calc(100vh-2rem)] flex flex-col overflow-visible">
        
        {/* Modal Header */}
        <div className="border-b-2 sm:border-b-4 border-black bg-gray-100 flex-shrink-0">
          {/* Mobile Header */}
          <div className="sm:hidden p-3 safe-area-top">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-2">
                <h2 className="text-base font-black uppercase truncate">LIVE CALL MONITOR</h2>
                <Badge className={cn("border border-black font-bold uppercase text-xs px-1 flex-shrink-0", getStatusBadgeColor(liveCallData.status))}>
                  {liveCallData.status}
                </Badge>
              </div>
              <Button 
                onClick={onClose}
                size="sm"
                className="w-8 h-8 p-0 bg-red-500 hover:bg-red-600 text-white border-2 border-black font-black text-lg flex-shrink-0"
              >
                ×
              </Button>
            </div>
            <div className="bg-white border-2 border-black p-2">
              <div className="font-black text-sm mb-1 truncate">{liveCallData.agentName} → {liveCallData.customerName}</div>
              <div className="flex items-center justify-between text-xs">
                <span className="font-bold">{formatDuration(liveCallData.duration)}</span>
                <span className="text-gray-600">{liveCallData.campaignName}</span>
              </div>
            </div>
          </div>
          
          {/* Desktop Header */}
          <div className="hidden sm:block p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <h2 className="text-xl font-black uppercase">Live Call Monitor - {liveCallData.agentName}</h2>
                <Badge className={cn("border-2 border-black font-bold uppercase", getStatusBadgeColor(liveCallData.status))}>
                  {liveCallData.status}
                </Badge>
                {liveCallData.isRecording && (
                  <Badge className="bg-red-500 text-white border-2 border-black font-bold uppercase animate-pulse flex items-center gap-1">
                    <UilCircle className="h-3 w-3" />
                    RECORDING
                  </Badge>
                )}
              </div>
              <Button 
                onClick={onClose}
                size="sm"
                className="bg-red-500 hover:bg-red-600 text-white border-2 border-black font-black text-xl px-3 py-2"
              >
                ×
              </Button>
            </div>
            <div className="flex items-center gap-6 mt-2 text-sm">
              <span className="font-bold">PROSPECT: {liveCallData.customerName} ({liveCallData.customerPhone})</span>
              <span className="font-bold flex items-center gap-1">
                <UilClock className="h-4 w-4" />
                DURATION: {formatDuration(liveCallData.duration)}
              </span>
              <span className="font-bold">CAMPAIGN: {liveCallData.campaignName}</span>
            </div>
          </div>
        </div>

        {/* Modal Tabs */}
        <div className="border-b-2 sm:border-b-4 border-black bg-black flex-shrink-0 relative z-50 overflow-visible">
          {/* Mobile: Dropdown Tabs */}
          <div className="sm:hidden p-2">
            <select
              value={activeTab}
              onChange={(e) => setActiveTab(e.target.value)}
              className="w-full px-3 py-3 border-2 border-black font-bold uppercase text-sm bg-white focus:outline-none appearance-none"
            >
              <option value="transcript">LIVE TRANSCRIPT</option>
              <option value="objectives">CALL OBJECTIVES</option>
              <option value="controls">SUPERVISOR CONTROLS</option>
              <option value="analytics">REAL-TIME ANALYTICS</option>
              <option value="settings">SYSTEM SETTINGS</option>
            </select>
          </div>
          
          {/* Desktop: Button Tabs */}
          <div className="hidden sm:block relative z-50 overflow-visible">
            <div className="flex overflow-x-auto relative z-50 overflow-visible">
              {['transcript', 'objectives', 'controls', 'analytics', 'settings'].map((tab) => (
                <Button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  variant="reverse"
                  size="lg"
                  className="whitespace-nowrap flex-shrink-0 border-0 relative z-[100]"
                  style={{ 
                    backgroundColor: activeTab === tab ? '' : 'white'
                  }}
                  onMouseEnter={(e) => {
                    if (activeTab !== tab) {
                      e.currentTarget.style.setProperty('background-color', '#7dd3fc', 'important');
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (activeTab !== tab) {
                      e.currentTarget.style.setProperty('background-color', 'white', 'important');
                    }
                  }}
                >
                  {tab.replace('-', ' ').toUpperCase()}
                </Button>
              ))}
            </div>
          </div>
        </div>

        {/* Live Audio Visualization Section - Resizable */}
        {!isCollapsed && (
          <div 
            className="audio-section border-b-2 sm:border-b-4 border-black bg-gray-50 relative flex-shrink-0"
            style={{ height: `${audioSectionHeight}px`, overflow: 'hidden' }}
          >
          {/* Simple Header Bar */}
          <div className="bg-gray-100 border-b-2 border-black p-3 flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="bg-purple-400 text-white px-3 py-1 border-2 border-black font-bold uppercase text-sm">
                <UilPhone className="h-4 w-4 inline mr-1" />
                LIVE OUTBOUND CALL
              </div>
              <span className="font-bold text-sm">{liveCallData.agentName} → {liveCallData.customerName}</span>
            </div>
            <div className="text-sm text-gray-600">Duration: {formatDuration(liveCallData.duration)}</div>
          </div>

          {/* Audio Timeline */}
          <div className="bg-white p-2 sm:p-4">
            {/* Live Waveform Panel */}
            <div className="mb-4 border-2 border-black">
              <LiveWaveformPanel
                agentName={liveCallData.agentName}
                customerName={liveCallData.customerName}
                agentGain={liveCallData.agentGain}
                customerGain={liveCallData.customerGain}
                currentSpeaker={liveCallData.currentSpeaker}
                isMuted={isMuted}
                className="h-32 sm:h-40"
                direction="horizontal"
              />
            </div>
            
            {/* Call Status Info */}
            <div className="grid grid-cols-4 gap-2 text-center">
              <div>
                <div className="text-sm sm:text-lg font-black text-green-600">{formatDuration(liveCallData.duration)}</div>
                <div className="text-xs text-gray-600 font-bold">DURATION</div>
              </div>
              <div>
                <div className="text-sm sm:text-lg font-black text-blue-600 truncate">{liveCallData.currentPhase}</div>
                <div className="text-xs text-gray-600 font-bold">PHASE</div>
              </div>
              <div>
                <div className="text-sm sm:text-lg font-black text-purple-600 truncate">{liveCallData.campaignName}</div>
                <div className="text-xs text-gray-600 font-bold">CAMPAIGN</div>
              </div>
              <div>
                <div className={cn("text-sm sm:text-lg font-black", liveCallData.isRecording ? "text-red-600" : "text-gray-400")}>
                  {liveCallData.isRecording ? "REC" : "OFF"}
                </div>
                <div className="text-xs text-gray-600 font-bold">RECORDING</div>
              </div>
            </div>
          </div>
          
          {/* Resize Handle */}
          <div 
            className={cn(
              "absolute bottom-0 left-0 right-0 h-4 sm:h-3 bg-gray-300 border-t-2 border-black cursor-ns-resize hover:bg-gray-400 active:bg-gray-400 flex items-center justify-center transition-colors touch-manipulation",
              isDragging && "bg-blue-300"
            )}
            onMouseDown={handleMouseDown}
          >
            <div className="w-16 h-1 sm:w-12 bg-gray-600 rounded"></div>
          </div>
          </div>
        )}
        
        {/* Collapsed Audio Section Indicator */}
        {isCollapsed && (
          <div className="border-b-2 sm:border-b-4 border-black bg-gray-100 p-2 flex items-center justify-center">
            <Button 
              size="sm" 
              variant="neutral"
              onClick={() => {
                setIsCollapsed(false);
                const isMobile = window.innerWidth < 640;
                const isTablet = window.innerWidth >= 640 && window.innerWidth < 1024;
                const defaultHeight = isMobile ? 340 : isTablet ? 290 : 250;
                setAudioSectionHeight(defaultHeight);
              }}
            >
              <span className="text-xs flex items-center gap-1">
                <UilHeadphones className="h-3 w-3" />
                Show Live Audio Monitor
              </span>
            </Button>
          </div>
        )}

        {/* Modal Content */}
        <div className="flex-1 flex flex-col sm:flex-row overflow-hidden min-h-0">
          {/* Main Content Area */}
          <div className="flex-1 p-2 sm:p-4 overflow-y-auto overflow-x-hidden">
            {activeTab === 'transcript' && (
              <div className="space-y-4">
                {/* Live Transcript Section */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="font-black uppercase text-sm text-gray-600">LIVE CONVERSATION TRANSCRIPT</h3>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="text-xs font-bold text-green-600">STREAMING LIVE</span>
                    </div>
                  </div>
                  
                  <div className="max-h-80 overflow-y-auto space-y-3 border-2 border-gray-200 p-3 bg-gray-50">
                    {liveCallData.recentTranscript.map((entry, index) => (
                      <div 
                        key={index}
                        className="bg-white border-2 border-black p-3 shadow-[2px_2px_0_rgba(0,0,0,1)]"
                      >
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center gap-3">
                            <div className={cn(
                              "w-8 h-8 border-2 border-black rounded-full flex items-center justify-center text-xs font-black text-white",
                              entry.speaker === 'agent' ? 'bg-blue-400' : 'bg-green-400'
                            )}>
                              {entry.speaker.charAt(0).toUpperCase()}
                            </div>
                            <div>
                              <div className="font-black text-sm uppercase">{entry.speaker === 'agent' ? 'AI AGENT' : 'PROSPECT'}</div>
                              <div className="text-xs text-gray-600">{entry.timestamp}</div>
                            </div>
                          </div>
                          {entry.sentiment && (
                            <Badge className={cn(
                              "border border-black font-bold uppercase text-xs",
                              entry.sentiment === 'positive' ? 'bg-green-400 text-black' :
                              entry.sentiment === 'negative' ? 'bg-red-400 text-white' :
                              'bg-gray-400 text-black'
                            )}>
                              {entry.sentiment}
                            </Badge>
                          )}
                        </div>
                        <div className="bg-gray-50 border-2 border-gray-300 p-3">
                          <p className="text-sm leading-relaxed text-gray-900">{entry.text}</p>
                        </div>
                      </div>
                    ))}
                    
                    {/* Live indicator at bottom */}
                    <div className="flex items-center justify-center gap-2 py-2">
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                      <span className="text-xs font-bold text-gray-600">CONVERSATION IN PROGRESS</span>
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                    </div>
                  </div>
                </div>

                {/* Live Sentiment Analysis */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-3 text-gray-600">REAL-TIME SENTIMENT ANALYSIS</h3>
                  <div className="grid grid-cols-3 gap-3">
                    <div className="text-center">
                      <div className="text-2xl font-black text-green-600">72%</div>
                      <div className="text-xs text-gray-600 font-bold">POSITIVE</div>
                      <div className="w-full bg-gray-300 border border-black h-2 mt-1">
                        <div className="h-full bg-green-400" style={{ width: '72%' }}></div>
                      </div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-black text-gray-600">23%</div>
                      <div className="text-xs text-gray-600 font-bold">NEUTRAL</div>
                      <div className="w-full bg-gray-300 border border-black h-2 mt-1">
                        <div className="h-full bg-gray-400" style={{ width: '23%' }}></div>
                      </div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-black text-red-600">5%</div>
                      <div className="text-xs text-gray-600 font-bold">NEGATIVE</div>
                      <div className="w-full bg-gray-300 border border-black h-2 mt-1">
                        <div className="h-full bg-red-400" style={{ width: '5%' }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'objectives' && (
              <div className="space-y-4">
                {/* Campaign Information */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">LIVE CAMPAIGN DETAILS</h3>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div className="space-y-3">
                      <div className="flex justify-between">
                        <span className="font-bold text-sm">Campaign ID:</span>
                        <span className="text-sm">{liveCallData.callId}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold text-sm">AI Agent:</span>
                        <span className="text-sm">{liveCallData.agentName}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold text-sm">Prospect:</span>
                        <span className="text-sm">{liveCallData.customerName}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold text-sm">Phone:</span>
                        <span className="text-sm">{liveCallData.customerPhone}</span>
                      </div>
                    </div>
                    <div className="space-y-3">
                      <div className="flex justify-between">
                        <span className="font-bold text-sm">Status:</span>
                        <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", getStatusBadgeColor(liveCallData.status))}>
                          {liveCallData.status}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold text-sm">Duration:</span>
                        <span className="font-black text-lg text-green-600">{formatDuration(liveCallData.duration)}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold text-sm">Phase:</span>
                        <span className="px-2 py-1 bg-purple-400 border border-black text-xs font-bold uppercase text-white">
                          {liveCallData.currentPhase}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold text-sm">Recording:</span>
                        <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", liveCallData.isRecording ? "bg-red-400 text-white" : "bg-gray-400 text-black")}>
                          {liveCallData.isRecording ? 'ACTIVE' : 'INACTIVE'}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Call Objectives Progress */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">CAMPAIGN OBJECTIVES PROGRESS</h3>
                  <div className="space-y-4">
                    {liveCallData.callObjectives.map((objective, index) => (
                      <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 border-2 border-black">
                        <div className={cn(
                          "w-8 h-8 border-2 border-black flex items-center justify-center text-white font-black text-xs flex-shrink-0",
                          index < 2 ? "bg-green-400" : index < 3 ? "bg-yellow-400 text-black" : "bg-gray-400"
                        )}>
                          {index + 1}
                        </div>
                        <div className="flex-1">
                          <div className="font-bold text-sm">{objective}</div>
                          <div className="text-xs text-gray-600 mt-1">
                            {index < 2 ? "✓ Completed" : index < 3 ? "⚠ In Progress" : "⏳ Pending"}
                          </div>
                        </div>
                        <div className={cn(
                          "px-3 py-1 border border-black text-xs font-bold uppercase",
                          index < 2 ? "bg-green-400 text-black" : index < 3 ? "bg-yellow-400 text-black" : "bg-gray-400 text-white"
                        )}>
                          {index < 2 ? "DONE" : index < 3 ? "ACTIVE" : "QUEUE"}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Suggested Next Actions */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">AI SUGGESTED NEXT ACTIONS</h3>
                  <div className="space-y-3">
                    {liveCallData.nextActions.map((action, index) => (
                      <div key={index} className="flex items-start gap-3 p-3 border-2 border-gray-300 bg-blue-50">
                        <div className="w-6 h-6 bg-blue-400 border-2 border-black flex items-center justify-center text-white font-black text-xs flex-shrink-0 mt-0.5">
                          {index + 1}
                        </div>
                        <div className="flex-1">
                          <div className="font-bold text-sm text-gray-800">{action}</div>
                          <div className="text-xs text-gray-600 mt-1">
                            {index === 0 ? "Recommended for immediate execution" : 
                             index === 1 ? "Prepare for next conversation phase" : 
                             "Follow-up action item"}
                          </div>
                        </div>
                        <div className={cn(
                          "px-2 py-1 border border-black text-xs font-bold uppercase",
                          index === 0 ? "bg-green-400 text-black" : "bg-yellow-400 text-black"
                        )}>
                          {index === 0 ? "NOW" : "NEXT"}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'controls' && (
              <div className="space-y-4">
                {/* Emergency Controls */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">LIVE CALL INTERVENTION</h3>
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-yellow-400 text-black flex items-center justify-center">
                      <UilHeadphones className="h-4 w-4 mr-2" />
                      COACH AI AGENT
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-blue-400 text-white flex items-center justify-center">
                      <UilMicrophone className="h-4 w-4 mr-2" />
                      JOIN CALL
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-orange-400 text-black flex items-center justify-center">
                      <UilExchange className="h-4 w-4 mr-2" />
                      TRANSFER CALL
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-purple-400 text-white flex items-center justify-center">
                      <UilCircle className="h-4 w-4 mr-2" />
                      START RECORDING
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-cyan-400 text-black flex items-center justify-center">
                      <UilEdit className="h-4 w-4 mr-2" />
                      ADD LIVE NOTE
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-red-400 text-white flex items-center justify-center">
                      <UilSquare className="h-4 w-4 mr-2" />
                      END CALL
                    </Button>
                  </div>
                </div>

                {/* AI Agent Performance */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">REAL-TIME AI PERFORMANCE</h3>
                  <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
                    <div className="text-center">
                      <div className="text-2xl font-black text-green-600">94%</div>
                      <div className="text-xs text-gray-600 font-bold">ADHERENCE</div>
                      <div className="w-full bg-gray-300 border border-black h-2 mt-1">
                        <div className="h-full bg-green-400" style={{ width: '94%' }}></div>
                      </div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-black text-blue-600">87%</div>
                      <div className="text-xs text-gray-600 font-bold">CONFIDENCE</div>
                      <div className="w-full bg-gray-300 border border-black h-2 mt-1">
                        <div className="h-full bg-blue-400" style={{ width: '87%' }}></div>
                      </div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-black text-purple-600">91%</div>
                      <div className="text-xs text-gray-600 font-bold">QUALITY</div>
                      <div className="w-full bg-gray-300 border border-black h-2 mt-1">
                        <div className="h-full bg-purple-400" style={{ width: '91%' }}></div>
                      </div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-black text-yellow-600">78%</div>
                      <div className="text-xs text-gray-600 font-bold">PROSPECT ENGAGEMENT</div>
                      <div className="w-full bg-gray-300 border border-black h-2 mt-1">
                        <div className="h-full bg-yellow-400" style={{ width: '78%' }}></div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Live Coaching Suggestions */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">AI COACHING RECOMMENDATIONS</h3>
                  <div className="space-y-3">
                    <div className="p-3 bg-green-50 border-2 border-green-300">
                      <div className="flex items-center gap-2 mb-2">
                        <div className="w-4 h-4 bg-green-400 border border-black"></div>
                        <span className="font-bold text-sm text-green-800">EXCELLENT RAPPORT BUILDING</span>
                      </div>
                      <p className="text-xs text-green-700">AI agent is successfully building trust and connection with prospect. Maintain current approach.</p>
                    </div>
                    <div className="p-3 bg-yellow-50 border-2 border-yellow-300">
                      <div className="flex items-center gap-2 mb-2">
                        <div className="w-4 h-4 bg-yellow-400 border border-black"></div>
                        <span className="font-bold text-sm text-yellow-800">SUGGEST PAUSE FOR OBJECTION</span>
                      </div>
                      <p className="text-xs text-yellow-700">Prospect may have unspoken concerns. Consider prompting AI to ask clarifying questions.</p>
                    </div>
                    <div className="p-3 bg-blue-50 border-2 border-blue-300">
                      <div className="flex items-center gap-2 mb-2">
                        <div className="w-4 h-4 bg-blue-400 border border-black"></div>
                        <span className="font-bold text-sm text-blue-800">READY FOR DEMO TRANSITION</span>
                      </div>
                      <p className="text-xs text-blue-700">High engagement detected. AI should transition to product demonstration phase.</p>
                    </div>
                  </div>
                </div>

                {/* Quick Actions */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">QUICK SUPERVISOR ACTIONS</h3>
                  <div className="grid grid-cols-2 gap-3">
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-gray-100 text-black border-2 border-black">
                      <UilLocationPoint className="h-4 w-4 mr-2" />
                      BOOKMARK MOMENT
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-gray-100 text-black border-2 border-black">
                      <UilEdit className="h-4 w-4 mr-2" />
                      FLAG FOR REVIEW
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'analytics' && (
              <div className="space-y-4">
                {/* Live Call Metrics */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">LIVE CALL ANALYTICS</h3>
                  <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
                    <div className="text-center">
                      <div className="text-2xl font-black text-green-600">{formatDuration(liveCallData.duration)}</div>
                      <div className="text-xs text-gray-600 font-bold">CALL DURATION</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-black text-blue-600">142</div>
                      <div className="text-xs text-gray-600 font-bold">WORDS/MIN</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-black text-purple-600">67%</div>
                      <div className="text-xs text-gray-600 font-bold">TALK TIME</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-black text-yellow-600">3</div>
                      <div className="text-xs text-gray-600 font-bold">KEY MOMENTS</div>
                    </div>
                  </div>
                </div>

                {/* Conversation Flow Analysis */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">CONVERSATION FLOW ANALYSIS</h3>
                  <div className="space-y-3">
                    <div className="flex items-center gap-4 p-3 bg-green-50 border-2 border-black">
                      <div className="w-8 h-8 bg-green-400 border-2 border-black flex items-center justify-center text-white font-black text-xs">
                        1
                      </div>
                      <div className="flex-1">
                        <div className="font-bold text-sm">Opening & Rapport Building</div>
                        <div className="text-xs text-gray-600">✓ Completed - 2:15 duration - High engagement</div>
                      </div>
                      <div className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">
                        COMPLETED
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-4 p-3 bg-blue-50 border-2 border-black">
                      <div className="w-8 h-8 bg-blue-400 border-2 border-black flex items-center justify-center text-white font-black text-xs">
                        2
                      </div>
                      <div className="flex-1">
                        <div className="font-bold text-sm">Needs Discovery & Pain Points</div>
                        <div className="text-xs text-gray-600">⚡ Active - 1:46 duration - Good responses</div>
                      </div>
                      <div className="px-2 py-1 bg-blue-400 border border-black text-xs font-bold uppercase text-white">
                        ACTIVE
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-4 p-3 bg-gray-50 border-2 border-black">
                      <div className="w-8 h-8 bg-gray-400 border-2 border-black flex items-center justify-center text-white font-black text-xs">
                        3
                      </div>
                      <div className="flex-1">
                        <div className="font-bold text-sm">Solution Presentation</div>
                        <div className="text-xs text-gray-600">⏳ Pending - Ready to transition</div>
                      </div>
                      <div className="px-2 py-1 bg-gray-400 border border-black text-xs font-bold uppercase text-white">
                        PENDING
                      </div>
                    </div>
                  </div>
                </div>

                {/* Engagement Metrics */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">PROSPECT ENGAGEMENT INDICATORS</h3>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <span className="font-bold text-sm">Voice Energy Level</span>
                        <span className="text-sm font-black text-green-600">HIGH</span>
                      </div>
                      <div className="w-full bg-gray-300 border-2 border-black h-3">
                        <div className="h-full bg-green-400" style={{ width: '82%' }}></div>
                      </div>
                    </div>
                    
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <span className="font-bold text-sm">Response Quality</span>
                        <span className="text-sm font-black text-blue-600">GOOD</span>
                      </div>
                      <div className="w-full bg-gray-300 border-2 border-black h-3">
                        <div className="h-full bg-blue-400" style={{ width: '76%' }}></div>
                      </div>
                    </div>
                    
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <span className="font-bold text-sm">Question Frequency</span>
                        <span className="text-sm font-black text-purple-600">MEDIUM</span>
                      </div>
                      <div className="w-full bg-gray-300 border-2 border-black h-3">
                        <div className="h-full bg-purple-400" style={{ width: '64%' }}></div>
                      </div>
                    </div>
                    
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <span className="font-bold text-sm">Interest Signals</span>
                        <span className="text-sm font-black text-yellow-600">STRONG</span>
                      </div>
                      <div className="w-full bg-gray-300 border-2 border-black h-3">
                        <div className="h-full bg-yellow-400" style={{ width: '88%' }}></div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Real-time Predictions */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">AI OUTCOME PREDICTIONS</h3>
                  <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                    <div className="text-center p-3 bg-green-50 border-2 border-green-300">
                      <div className="text-2xl font-black text-green-600">73%</div>
                      <div className="text-xs text-gray-600 font-bold">CONVERSION PROBABILITY</div>
                      <div className="text-xs text-green-700 mt-1">High likelihood of positive outcome</div>
                    </div>
                    
                    <div className="text-center p-3 bg-blue-50 border-2 border-blue-300">
                      <div className="text-2xl font-black text-blue-600">89%</div>
                      <div className="text-xs text-gray-600 font-bold">DEMO ACCEPTANCE</div>
                      <div className="text-xs text-blue-700 mt-1">Very likely to agree to demo</div>
                    </div>
                    
                    <div className="text-center p-3 bg-yellow-50 border-2 border-yellow-300">
                      <div className="text-2xl font-black text-yellow-600">45%</div>
                      <div className="text-xs text-gray-600 font-bold">IMMEDIATE CLOSE</div>
                      <div className="text-xs text-yellow-700 mt-1">May need nurturing sequence</div>
                    </div>
                  </div>
                </div>

                {/* Monitor Controls */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-3 text-gray-600">MONITOR CONTROLS</h3>
                  <div className="flex flex-wrap items-center gap-2 sm:gap-4">
                    <Button
                      size="sm"
                      variant="reverse"
                                            className="px-3 py-2"
                      onClick={() => setIsMuted(!isMuted)}
                    >
                      {isMuted ? <UilVolumeMute className="h-4 w-4 mr-1" /> : <UilVolumeUp className="h-4 w-4 mr-1" />}
                      {isMuted ? "MUTED" : "AUDIO"}
                    </Button>

                    <div className="flex items-center gap-2">
                      <span className="text-xs font-bold">VOLUME</span>
                      <div 
                        className="w-20 h-3 bg-gray-300 border-2 border-black relative cursor-pointer"
                        onClick={(e) => {
                          const rect = e.currentTarget.getBoundingClientRect();
                          const x = e.clientX - rect.left;
                          const newVolume = Math.round((x / rect.width) * 100);
                          setVolume(Math.max(0, Math.min(100, newVolume)));
                        }}
                      >
                        <div 
                          className="absolute left-0 top-0 h-full bg-blue-400" 
                          style={{ width: `${isMuted ? 0 : volume}%` }}
                        ></div>
                      </div>
                      <span className="text-xs font-bold">{isMuted ? 0 : volume}%</span>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'settings' && (
              <div className="space-y-4">
                {/* Live Call System Configuration */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">ACTIVE CALL INFRASTRUCTURE</h3>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div className="space-y-3">
                      <div className="flex justify-between items-center p-3 bg-gray-50 border-2 border-black">
                        <div>
                          <div className="font-bold text-sm">SIP Provider</div>
                          <div className="text-xs text-gray-600">Voice carrier service</div>
                        </div>
                        <div className="text-right">
                          <div className="font-black text-sm">Telnyx</div>
                          <div className="text-xs text-green-600">✓ Connected</div>
                        </div>
                      </div>
                      
                      <div className="flex justify-between items-center p-3 bg-gray-50 border-2 border-black">
                        <div>
                          <div className="font-bold text-sm">Speech-to-Text</div>
                          <div className="text-xs text-gray-600">Real-time transcription</div>
                        </div>
                        <div className="text-right">
                          <div className="font-black text-sm">Deepgram</div>
                          <div className="text-xs text-green-600">✓ Streaming</div>
                        </div>
                      </div>
                      
                      <div className="flex justify-between items-center p-3 bg-gray-50 border-2 border-black">
                        <div>
                          <div className="font-bold text-sm">AI Language Model</div>
                          <div className="text-xs text-gray-600">Conversation engine</div>
                        </div>
                        <div className="text-right">
                          <div className="font-black text-sm">OpenAI GPT-4</div>
                          <div className="text-xs text-green-600">✓ Active</div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-3">
                      <div className="flex justify-between items-center p-3 bg-gray-50 border-2 border-black">
                        <div>
                          <div className="font-bold text-sm">Text-to-Speech</div>
                          <div className="text-xs text-gray-600">Voice synthesis</div>
                        </div>
                        <div className="text-right">
                          <div className="font-black text-sm">ElevenLabs</div>
                          <div className="text-xs text-green-600">✓ Premium Voice</div>
                        </div>
                      </div>
                      
                      <div className="flex justify-between items-center p-3 bg-gray-50 border-2 border-black">
                        <div>
                          <div className="font-bold text-sm">Call Recording</div>
                          <div className="text-xs text-gray-600">Storage & compliance</div>
                        </div>
                        <div className="text-right">
                          <div className="font-black text-sm">AWS S3</div>
                          <div className="text-xs text-blue-600">⚡ Live Recording</div>
                        </div>
                      </div>
                      
                      <div className="flex justify-between items-center p-3 bg-gray-50 border-2 border-black">
                        <div>
                          <div className="font-bold text-sm">Analytics Engine</div>
                          <div className="text-xs text-gray-600">Real-time insights</div>
                        </div>
                        <div className="text-right">
                          <div className="font-black text-sm">Diala AI</div>
                          <div className="text-xs text-purple-600">🎯 Processing</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Real-time Cost Monitoring */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">LIVE CALL COST BREAKDOWN</h3>
                  <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 mb-4">
                    <div className="text-center">
                      <div className="text-lg font-black text-green-600">$0.0089</div>
                      <div className="text-xs text-gray-600 font-bold">PER MINUTE</div>
                      <div className="text-xs text-gray-500">SIP Carrier</div>
                    </div>
                    <div className="text-center">
                      <div className="text-lg font-black text-blue-600">$0.0043</div>
                      <div className="text-xs text-gray-600 font-bold">STT COST</div>
                      <div className="text-xs text-gray-500">Deepgram</div>
                    </div>
                    <div className="text-center">
                      <div className="text-lg font-black text-purple-600">$0.0156</div>
                      <div className="text-xs text-gray-600 font-bold">AI TOKENS</div>
                      <div className="text-xs text-gray-500">OpenAI</div>
                    </div>
                    <div className="text-center">
                      <div className="text-lg font-black text-yellow-600">$0.0298</div>
                      <div className="text-xs text-gray-600 font-bold">TOTAL/MIN</div>
                      <div className="text-xs text-gray-500">All Services</div>
                    </div>
                  </div>
                  
                  <div className="p-3 bg-yellow-50 border-2 border-yellow-300">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="font-bold text-sm">Current Call Cost</div>
                        <div className="text-xs text-gray-600">Duration: {formatDuration(liveCallData.duration)}</div>
                      </div>
                      <div className="text-right">
                        <div className="text-xl font-black text-green-600">${(liveCallData.duration * 0.0298 / 60).toFixed(4)}</div>
                        <div className="text-xs text-gray-600">Running Total</div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Premium Features & Limits */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">PREMIUM FEATURES & USAGE</h3>
                  <div className="space-y-4">
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="p-3 bg-green-50 border-2 border-green-300">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-bold text-sm text-green-800">Advanced AI Coaching</span>
                          <span className="px-2 py-1 bg-green-400 text-black border border-black text-xs font-bold">ACTIVE</span>
                        </div>
                        <div className="text-xs text-green-700">Real-time intervention suggestions</div>
                        <div className="mt-2">
                          <div className="w-full bg-green-200 border border-green-400 h-2">
                            <div className="h-full bg-green-400" style={{ width: '78%' }}></div>
                          </div>
                          <div className="text-xs text-green-600 mt-1">142/180 coaching events used</div>
                        </div>
                      </div>
                      
                      <div className="p-3 bg-blue-50 border-2 border-blue-300">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-bold text-sm text-blue-800">Call Recording</span>
                          <span className="px-2 py-1 bg-blue-400 text-white border border-black text-xs font-bold">PREMIUM</span>
                        </div>
                        <div className="text-xs text-blue-700">High-quality audio storage</div>
                        <div className="mt-2">
                          <div className="w-full bg-blue-200 border border-blue-400 h-2">
                            <div className="h-full bg-blue-400" style={{ width: '34%' }}></div>
                          </div>
                          <div className="text-xs text-blue-600 mt-1">3.2GB/10GB monthly limit</div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="p-3 bg-purple-50 border-2 border-purple-300">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-bold text-sm text-purple-800">Sentiment Analysis</span>
                          <span className="px-2 py-1 bg-purple-400 text-white border border-black text-xs font-bold">ACTIVE</span>
                        </div>
                        <div className="text-xs text-purple-700">Real-time emotion detection</div>
                        <div className="mt-2">
                          <div className="w-full bg-purple-200 border border-purple-400 h-2">
                            <div className="h-full bg-purple-400" style={{ width: '91%' }}></div>
                          </div>
                          <div className="text-xs text-purple-600 mt-1">4,560/5,000 API calls</div>
                        </div>
                      </div>
                      
                      <div className="p-3 bg-gray-50 border-2 border-gray-300">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-bold text-sm text-gray-800">Call Transfer</span>
                          <span className="px-2 py-1 bg-gray-400 text-white border border-black text-xs font-bold">LIMITED</span>
                        </div>
                        <div className="text-xs text-gray-700">Supervisor call takeover</div>
                        <div className="mt-2">
                          <button className="w-full px-3 py-2 bg-yellow-400 border-2 border-black font-bold text-xs hover:bg-yellow-500">
                            UPGRADE FOR UNLIMITED TRANSFERS
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Quality & Compliance Settings */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">QUALITY & COMPLIANCE CONTROLS</h3>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div className="space-y-3">
                      <div className="flex items-center justify-between p-3 border-2 border-black">
                        <div>
                          <div className="font-bold text-sm">Auto-Recording</div>
                          <div className="text-xs text-gray-600">All calls recorded by default</div>
                        </div>
                        <div className="w-10 h-6 bg-green-400 border-2 border-black relative">
                          <div className="absolute right-0.5 top-0.5 w-4 h-4 bg-white border border-black"></div>
                        </div>
                      </div>
                      
                      <div className="flex items-center justify-between p-3 border-2 border-black">
                        <div>
                          <div className="font-bold text-sm">Compliance Mode</div>
                          <div className="text-xs text-gray-600">GDPR/CCPA data protection</div>
                        </div>
                        <div className="w-10 h-6 bg-green-400 border-2 border-black relative">
                          <div className="absolute right-0.5 top-0.5 w-4 h-4 bg-white border border-black"></div>
                        </div>
                      </div>
                      
                      <div className="flex items-center justify-between p-3 border-2 border-black">
                        <div>
                          <div className="font-bold text-sm">Quality Alerts</div>
                          <div className="text-xs text-gray-600">Real-time performance warnings</div>
                        </div>
                        <div className="w-10 h-6 bg-green-400 border-2 border-black relative">
                          <div className="absolute right-0.5 top-0.5 w-4 h-4 bg-white border border-black"></div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-3">
                      <div className="p-3 bg-blue-50 border-2 border-blue-300">
                        <div className="font-bold text-sm text-blue-800 mb-2">Call Quality Score</div>
                        <div className="text-2xl font-black text-blue-600">94/100</div>
                        <div className="text-xs text-blue-700">Excellent performance</div>
                      </div>
                      
                      <div className="p-3 bg-green-50 border-2 border-green-300">
                        <div className="font-bold text-sm text-green-800 mb-2">Compliance Status</div>
                        <div className="text-2xl font-black text-green-600">✓ PASS</div>
                        <div className="text-xs text-green-700">All regulations met</div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Emergency Controls */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">SYSTEM EMERGENCY CONTROLS</h3>
                  <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-red-400 text-white">
                      <UilSquare className="h-4 w-4 mr-2" />
                      EMERGENCY STOP
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-yellow-400 text-black">
                      <UilCircle className="h-4 w-4 mr-2" />
                      PAUSE AI
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-blue-400 text-white">
                      <UilExchange className="h-4 w-4 mr-2" />
                      FORCE TRANSFER
                    </Button>
                    <Button size="sm" variant="reverse" style={{ outline: 'none' }} className="bg-purple-400 text-white">
                      <UilEdit className="h-4 w-4 mr-2" />
                      INCIDENT LOG
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/settings-rag-workflow-modal.tsx
================================================
import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '../../ui/card';
import { Button } from '../../ui/button';
import { Input } from '../../ui/input';
import { Textarea } from '../../ui/textarea';
import { Badge } from '../../ui/badge';
import { Slider } from '../../ui/slider';
import { 
  UilTimes, 
  UilBrain,
  UilDatabase,
  UilFile,
  UilLink,
  UilYoutube,
  UilExclamationTriangle,
  UilSync,
  UilPlay,
  UilTrash
} from '@tooni/iconscout-unicons-react';

interface RAGWorkflow {
  id: string;
  name: string;
  status: 'queued' | 'scraping' | 'embedding' | 'indexing' | 'validating' | 'completed' | 'failed';
  progress: number;
  type: 'youtube' | 'documents' | 'urls' | 'mixed';
  parameters: {
    sources: string[];
    chunkSize: number;
    overlap: number;
    embeddingModel: string;
    vectorStore: string;
  };
  stats: {
    totalContent: number;
    contentProcessed: number;
    embeddings: number;
    indexSize: string;
    processingTime?: string;
  };
  createdAt: string;
  completedAt?: string;
  estimatedTime?: string;
}

interface SettingsRAGWorkflowModalProps {
  isOpen: boolean;
  onClose: () => void;
  workflow: RAGWorkflow | null;
  onSave: (updatedWorkflow: Partial<RAGWorkflow>) => void;
}

export default function SettingsRAGWorkflowModal({ isOpen, onClose, workflow, onSave }: SettingsRAGWorkflowModalProps) {
  const [formData, setFormData] = React.useState({
    name: '',
    sources: [] as string[],
    chunkSize: 512,
    overlap: 50,
    embeddingModel: 'text-embedding-ada-002',
    vectorStore: 'pinecone'
  });
  const [sourceInput, setSourceInput] = React.useState('');
  const [showRestartWarning, setShowRestartWarning] = React.useState(false);

  // Update form data when workflow changes
  React.useEffect(() => {
    if (workflow) {
      setFormData({
        name: workflow.name,
        sources: [...workflow.parameters.sources],
        chunkSize: workflow.parameters.chunkSize,
        overlap: workflow.parameters.overlap,
        embeddingModel: workflow.parameters.embeddingModel,
        vectorStore: workflow.parameters.vectorStore
      });
    }
  }, [workflow]);

  // Check if any changes were made
  const hasChanges = React.useMemo(() => {
    if (!workflow) return false;
    return (
      formData.name !== workflow.name ||
      formData.sources.length !== workflow.parameters.sources.length ||
      formData.sources.some((s, i) => s !== workflow.parameters.sources[i]) ||
      formData.chunkSize !== workflow.parameters.chunkSize ||
      formData.overlap !== workflow.parameters.overlap ||
      formData.embeddingModel !== workflow.parameters.embeddingModel ||
      formData.vectorStore !== workflow.parameters.vectorStore
    );
  }, [formData, workflow]);

  if (!isOpen || !workflow) return null;

  const handleInputChange = (field: keyof typeof formData) => (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    setFormData(prev => ({
      ...prev,
      [field]: e.target.value
    }));
  };

  const handleAddSource = () => {
    if (sourceInput.trim() && !formData.sources.includes(sourceInput.trim())) {
      setFormData(prev => ({
        ...prev,
        sources: [...prev.sources, sourceInput.trim()]
      }));
      setSourceInput('');
    }
  };

  const handleRemoveSource = (source: string) => {
    setFormData(prev => ({
      ...prev,
      sources: prev.sources.filter(s => s !== source)
    }));
  };

  const handleSubmit = () => {
    const updatedWorkflow = {
      name: formData.name,
      parameters: {
        sources: formData.sources,
        chunkSize: formData.chunkSize,
        overlap: formData.overlap,
        embeddingModel: formData.embeddingModel,
        vectorStore: formData.vectorStore
      }
    };
    onSave(updatedWorkflow);
    onClose();
  };

  const isWorkflowActive = workflow.status !== 'completed' && workflow.status !== 'failed' && workflow.status !== 'queued';

  const getSourceIcon = (source: string) => {
    if (source.includes('youtube')) return <UilYoutube className="w-4 h-4 text-red-500" />;
    if (source.startsWith('http')) return <UilLink className="w-4 h-4 text-green-500" />;
    return <UilFile className="w-4 h-4 text-blue-500" />;
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-2xl border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-background max-h-[90vh] overflow-y-auto">
        <CardHeader className="border-b-4 border-black bg-[rgb(0,82,255)] relative sticky top-0 z-10">
          <CardTitle className="text-2xl font-black uppercase text-white pr-10" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
            RAG WORKFLOW SETTINGS
          </CardTitle>
          <Button
            variant="neutral"
            size="sm"
            className="absolute top-4 right-4 bg-white p-2"
            onClick={onClose}
          >
            <UilTimes className="h-4 w-4 text-black" />
          </Button>
        </CardHeader>
        
        <CardContent className="p-6 space-y-6">
          {/* Warning for active workflows */}
          {isWorkflowActive && (
            <Card className="border-4 border-orange-400 bg-orange-50 shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <UilExclamationTriangle className="w-6 h-6 text-orange-600" />
                  <div>
                    <p className="font-black text-orange-800 uppercase">Active Workflow</p>
                    <p className="text-sm text-orange-700">
                      Changes will require restarting this workflow and will lose current progress.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Workflow Name */}
          <div>
            <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              Workflow Name
            </label>
            <Input
              value={formData.name}
              onChange={handleInputChange('name')}
              placeholder="E.g., Sales Training Knowledge Base"
              className="border-2 border-black rounded-[3px] text-lg"
            />
          </div>

          {/* Content Sources */}
          <div>
            <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              Content Sources
            </label>
            <div className="flex gap-2 mb-3">
              <Input
                value={sourceInput}
                onChange={(e) => setSourceInput(e.target.value)}
                placeholder="Add URL, file name, or YouTube link..."
                className="border-2 border-black rounded-[3px]"
                onKeyPress={(e) => e.key === 'Enter' && handleAddSource()}
              />
              <Button
                onClick={handleAddSource}
                variant="neutral"
              >
                ADD
              </Button>
            </div>
            <div className="space-y-2 max-h-32 overflow-y-auto">
              {formData.sources.map((source, idx) => (
                <div key={idx} className="flex items-center gap-3 p-3 bg-gray-50 border-2 border-black">
                  {getSourceIcon(source)}
                  <div className="flex-1 min-w-0">
                    <p className="font-bold text-sm truncate">{source}</p>
                    <p className="text-xs text-gray-600">
                      {source.includes('youtube') ? 'YouTube' : 
                       source.startsWith('http') ? 'Web URL' : 'Document'}
                    </p>
                  </div>
                  <Button
                    variant="neutral"
                    size="sm"
                    className="bg-white p-2"
                    onClick={() => handleRemoveSource(source)}
                  >
                    <UilTrash className="w-4 h-4 text-black" />
                  </Button>
                </div>
              ))}
            </div>
            {formData.sources.length === 0 && (
              <p className="text-xs text-gray-500 mt-2">Add documents, URLs, or YouTube links to process</p>
            )}
          </div>

          {/* Processing Parameters */}
          <div className="space-y-4">
            <h3 className="text-lg font-black uppercase text-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              Processing Parameters
            </h3>
            
            <div>
              <label className="block text-sm font-black uppercase text-black mb-4" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Chunk Size: {formData.chunkSize} tokens
              </label>
              <Slider 
                value={[formData.chunkSize]} 
                onValueChange={(value) => setFormData(prev => ({ ...prev, chunkSize: value[0] }))}
                min={128} 
                max={1024} 
                step={64}
                className="mb-2"
              />
              <div className="flex justify-between text-xs text-gray-600 font-bold">
                <span>Small (128)</span>
                <span>Large (1024)</span>
              </div>
              <p className="text-xs text-gray-600 text-center mt-2">
                Smaller chunks = more precise, Larger chunks = more context
              </p>
            </div>

            <div>
              <label className="block text-sm font-black uppercase text-black mb-4" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Overlap: {formData.overlap} tokens
              </label>
              <Slider 
                value={[formData.overlap]} 
                onValueChange={(value) => setFormData(prev => ({ ...prev, overlap: value[0] }))}
                min={0} 
                max={100} 
                step={5}
                className="mb-2"
              />
              <div className="flex justify-between text-xs text-gray-600 font-bold">
                <span>None (0)</span>
                <span>Max (100)</span>
              </div>
              <p className="text-xs text-gray-600 text-center mt-2">
                Overlap between chunks to maintain context continuity
              </p>
            </div>
          </div>

          {/* Model Configuration */}
          <div className="space-y-4">
            <h3 className="text-lg font-black uppercase text-black" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              Model Configuration
            </h3>
            
            <div>
              <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                <UilBrain className="inline w-4 h-4 mr-1" />
                Embedding Model
              </label>
              <select
                value={formData.embeddingModel}
                onChange={(e) => setFormData(prev => ({ ...prev, embeddingModel: e.target.value }))}
                className="w-full border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] p-2 text-lg"
              >
                <option value="text-embedding-ada-002">OpenAI Ada-002</option>
                <option value="text-embedding-3-small">OpenAI Embedding-3-Small</option>
                <option value="text-embedding-3-large">OpenAI Embedding-3-Large</option>
                <option value="sentence-transformers">Sentence Transformers</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                <UilDatabase className="inline w-4 h-4 mr-1" />
                Vector Store
              </label>
              <select
                value={formData.vectorStore}
                onChange={(e) => setFormData(prev => ({ ...prev, vectorStore: e.target.value }))}
                className="w-full border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] p-2 text-lg"
              >
                <option value="pinecone">Pinecone</option>
                <option value="chroma">Chroma</option>
                <option value="weaviate">Weaviate</option>
                <option value="qdrant">Qdrant</option>
                <option value="redis">Redis</option>
              </select>
            </div>
          </div>

          {/* Current Progress Warning */}
          {isWorkflowActive && workflow.progress > 0 && (
            <Card className="border-4 border-red-400 bg-red-50 shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="space-y-3">
                  <div className="flex items-center gap-3">
                    <UilSync className="w-6 h-6 text-red-600" />
                    <div>
                      <p className="font-black text-red-800 uppercase">Progress Will Be Lost</p>
                      <p className="text-sm text-red-700">
                        Current progress: {workflow.progress}% • {workflow.stats.embeddings} embeddings created
                      </p>
                    </div>
                  </div>
                  <p className="text-xs text-red-600">
                    Applying changes will restart the workflow from the beginning with new parameters.
                  </p>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Action Buttons */}
          <div className="flex gap-4 pt-4 border-t-4 border-black">
            <Button
              variant="neutral"
              onClick={onClose}
              className="flex-1"
              style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
            >
              CANCEL
            </Button>
            
            <Button
              onClick={handleSubmit}
              disabled={!hasChanges || !formData.name || formData.sources.length === 0}
              className="flex-1"
              style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
            >
              {isWorkflowActive ? (
                <>
                  <UilSync className="w-5 h-5 mr-2" />
                  RESTART WITH CHANGES
                </>
              ) : (
                <>
                  <UilPlay className="w-5 h-5 mr-2" />
                  SAVE & START
                </>
              )}
            </Button>
          </div>

          {hasChanges && (
            <p className="text-xs text-center text-gray-600">
              {Object.keys(formData).filter(key => {
                if (key === 'sources') {
                  return formData.sources.length !== workflow.parameters.sources.length ||
                         formData.sources.some((s, i) => s !== workflow.parameters.sources[i]);
                }
                return formData[key as keyof typeof formData] !== (workflow as any)[key === 'name' ? 'name' : 'parameters'][key];
              }).length} change(s) detected
            </p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/settings-workflow-modal.tsx
================================================
import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '../../ui/card';
import { Button } from '../../ui/button';
import { Input } from '../../ui/input';
import { Badge } from '../../ui/badge';
import { Slider } from '../../ui/slider';
import PremiumFeatureCard from '../premium-feature-card';
import { 
  UilTimes, 
  UilLock, 
  UilLinkedin,
  UilSearchAlt,
  UilBuilding,
  UilMapMarker,
  UilFilter,
  UilSync,
  UilPlay,
  UilExclamationTriangle
} from '@tooni/iconscout-unicons-react';

interface SearchWorkflow {
  id: string;
  name: string;
  status: 'idle' | 'searching' | 'scraping' | 'analyzing' | 'validating' | 'completed' | 'failed';
  progress: number;
  parameters: {
    location: string;
    businessType: string;
    keywords: string[];
    includeLinkedIn: boolean;
    searchDepth: number;
  };
  stats: {
    pagesFound: number;
    pagesScraped: number;
    businessesExtracted: number;
    businessesValidated: number;
    matchRate: number;
  };
  createdAt: string;
  completedAt?: string;
  estimatedTime?: string;
}

interface SettingsWorkflowModalProps {
  isOpen: boolean;
  onClose: () => void;
  workflow: SearchWorkflow | null;
  onSave: (updatedWorkflow: Partial<SearchWorkflow>) => void;
}

export default function SettingsWorkflowModal({ isOpen, onClose, workflow, onSave }: SettingsWorkflowModalProps) {
  const [formData, setFormData] = React.useState({
    name: '',
    location: '',
    businessType: '',
    keywords: [] as string[],
    includeLinkedIn: false,
    searchDepth: 3
  });
  const [keywordInput, setKeywordInput] = React.useState('');
  const [showRestartWarning, setShowRestartWarning] = React.useState(false);

  // Update form data when workflow changes
  React.useEffect(() => {
    if (workflow) {
      setFormData({
        name: workflow.name,
        location: workflow.parameters.location,
        businessType: workflow.parameters.businessType,
        keywords: [...workflow.parameters.keywords],
        includeLinkedIn: workflow.parameters.includeLinkedIn,
        searchDepth: workflow.parameters.searchDepth
      });
    }
  }, [workflow]);

  // Check if any changes were made
  const hasChanges = React.useMemo(() => {
    if (!workflow) return false;
    return (
      formData.name !== workflow.name ||
      formData.location !== workflow.parameters.location ||
      formData.businessType !== workflow.parameters.businessType ||
      formData.keywords.length !== workflow.parameters.keywords.length ||
      formData.keywords.some((k, i) => k !== workflow.parameters.keywords[i]) ||
      formData.includeLinkedIn !== workflow.parameters.includeLinkedIn ||
      formData.searchDepth !== workflow.parameters.searchDepth
    );
  }, [formData, workflow]);

  if (!isOpen || !workflow) return null;

  const handleInputChange = (field: keyof typeof formData) => (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    setFormData(prev => ({
      ...prev,
      [field]: e.target.value
    }));
  };

  const handleAddKeyword = () => {
    if (keywordInput.trim() && !formData.keywords.includes(keywordInput.trim())) {
      setFormData(prev => ({
        ...prev,
        keywords: [...prev.keywords, keywordInput.trim()]
      }));
      setKeywordInput('');
    }
  };

  const handleRemoveKeyword = (keyword: string) => {
    setFormData(prev => ({
      ...prev,
      keywords: prev.keywords.filter(k => k !== keyword)
    }));
  };

  const handleSubmit = () => {
    const updatedWorkflow = {
      name: formData.name,
      parameters: {
        location: formData.location,
        businessType: formData.businessType,
        keywords: formData.keywords,
        includeLinkedIn: formData.includeLinkedIn,
        searchDepth: formData.searchDepth
      }
    };
    onSave(updatedWorkflow);
    onClose();
  };

  const isWorkflowActive = workflow.status !== 'completed' && workflow.status !== 'failed' && workflow.status !== 'idle';

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-2xl border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-background max-h-[90vh] overflow-y-auto">
        <CardHeader className="border-b-4 border-black bg-[rgb(0,82,255)] relative sticky top-0 z-10">
          <CardTitle className="text-2xl font-black uppercase text-white pr-10" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
            WORKFLOW SETTINGS
          </CardTitle>
          <Button
            variant="neutral"
            size="sm"
            className="absolute top-4 right-4"
            onClick={onClose}
          >
            <UilTimes className="h-5 w-5 text-black" />
          </Button>
        </CardHeader>
        
        <CardContent className="p-6 space-y-6">
          {/* Warning for active workflows */}
          {isWorkflowActive && (
            <Card className="border-4 border-orange-400 bg-orange-50 shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <UilExclamationTriangle className="w-6 h-6 text-orange-600" />
                  <div>
                    <p className="font-black text-orange-800 uppercase">Active Workflow</p>
                    <p className="text-sm text-orange-700">
                      Changes will require restarting this workflow and will lose current progress.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Hunt Name & Type */}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Workflow Name
              </label>
              <Input
                value={formData.name}
                onChange={handleInputChange('name')}
                placeholder="E.g., SaaS Companies Bay Area Q1"
                className="border-2 border-black rounded-[3px] text-lg"
              />
            </div>

            <div>
              <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Business Type / Industry
              </label>
              <Input
                value={formData.businessType}
                onChange={handleInputChange('businessType')}
                placeholder="E.g., Software, E-commerce, Healthcare"
                className="border-2 border-black rounded-[3px] text-lg"
              />
            </div>
          </div>

          {/* Location & Keywords */}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                <UilMapMarker className="inline w-4 h-4 mr-1" />
                Target Location
              </label>
              <Input
                value={formData.location}
                onChange={handleInputChange('location')}
                placeholder="E.g., San Francisco, CA or United States"
                className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] text-lg"
              />
            </div>

            <div>
              <label className="block text-sm font-black uppercase text-black mb-2" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                <UilFilter className="inline w-4 h-4 mr-1" />
                Search Keywords
              </label>
              <div className="flex gap-2 mb-3">
                <Input
                  value={keywordInput}
                  onChange={(e) => setKeywordInput(e.target.value)}
                  placeholder="Add a keyword..."
                  className="border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]"
                  onKeyPress={(e) => e.key === 'Enter' && handleAddKeyword()}
                />
                <Button
                  onClick={handleAddKeyword}
                  variant="neutral"
                >
                  ADD
                </Button>
              </div>
              <div className="flex flex-wrap gap-2">
                {formData.keywords.map((keyword) => (
                  <Badge
                    key={keyword}
                    className="px-3 py-1 border-2 border-black bg-white text-black font-bold cursor-pointer hover:bg-red-100"
                    onClick={() => handleRemoveKeyword(keyword)}
                  >
                    {keyword} ×
                  </Badge>
                ))}
              </div>
            </div>
          </div>

          {/* Search Depth */}
          <div>
            <label className="block text-sm font-black uppercase text-black mb-4" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              <UilSearchAlt className="inline w-4 h-4 mr-1" />
              Search Depth (1-5 Levels)
            </label>
            <div className="space-y-2">
              <Slider 
                value={[formData.searchDepth]} 
                onValueChange={(value) => setFormData(prev => ({ ...prev, searchDepth: value[0] }))}
                min={1} 
                max={5} 
                step={1}
                className="mb-2"
              />
              <div className="flex justify-between text-xs text-gray-600 font-bold">
                <span>Shallow</span>
                <span className="text-lg text-black">{formData.searchDepth}</span>
                <span>Deep</span>
              </div>
              <p className="text-xs text-gray-600 text-center mt-2">
                Level {formData.searchDepth}: ~{formData.searchDepth * 1000} pages to analyze
              </p>
            </div>
          </div>

          {/* LinkedIn Integration */}
          <div>
            <label className="block text-sm font-black uppercase text-black mb-3" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
              <UilLinkedin className="inline w-4 h-4 mr-1" />
              LinkedIn Integration
            </label>
            <PremiumFeatureCard
              title="LINKEDIN SEARCH & ENRICHMENT"
              description="Find decision makers and enrich contact information from LinkedIn profiles"
              price="$59/month"
            />
          </div>

          {/* Current Progress Warning */}
          {isWorkflowActive && workflow.progress > 0 && (
            <Card className="border-4 border-red-400 bg-red-50 shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="space-y-3">
                  <div className="flex items-center gap-3">
                    <UilSync className="w-6 h-6 text-red-600" />
                    <div>
                      <p className="font-black text-red-800 uppercase">Progress Will Be Lost</p>
                      <p className="text-sm text-red-700">
                        Current progress: {workflow.progress}% • {workflow.stats.businessesExtracted} businesses found
                      </p>
                    </div>
                  </div>
                  <p className="text-xs text-red-600">
                    Applying changes will restart the workflow from the beginning with new parameters.
                  </p>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Action Buttons */}
          <div className="flex gap-4 pt-4 border-t-4 border-black">
            <Button
              variant="neutral"
              onClick={onClose}
              className="flex-1"
              style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
            >
              CANCEL
            </Button>
            
            <Button
              onClick={handleSubmit}
              disabled={!hasChanges || !formData.name || !formData.location || !formData.businessType}
              className="flex-1"
              style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
            >
              {isWorkflowActive ? (
                <>
                  <UilSync className="w-5 h-5 mr-2" />
                  RESTART WITH CHANGES
                </>
              ) : (
                <>
                  <UilPlay className="w-5 h-5 mr-2" />
                  SAVE & START
                </>
              )}
            </Button>
          </div>

          {hasChanges && (
            <p className="text-xs text-center text-gray-600">
              {Object.keys(formData).filter(key => {
                if (key === 'keywords') {
                  return formData.keywords.length !== workflow.parameters.keywords.length ||
                         formData.keywords.some((k, i) => k !== workflow.parameters.keywords[i]);
                }
                return formData[key as keyof typeof formData] !== (workflow as any)[key === 'name' ? 'name' : 'parameters'][key];
              }).length} change(s) detected
            </p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/swarm-overview-modal.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import {
  UilUsersAlt,
  UilPhone,
  UilChart,
  UilPlay,
  UilPause,
  UilStopCircle,
  UilEdit,
  UilCopy,
  UilClock,
  UilCheckCircle,
  UilInfoCircle,
  UilTimesCircle,
  UilCircle,
  UilStar,
  UilTrophyAlt,
  UilBullseye,
  UilExclamationTriangle,
  UilCheckSquare,
  UilArrowUp,
  UilRocket,
  UilLightbulb
} from '@tooni/iconscout-unicons-react';

// Analytics Components
import AnalyticsDashboardHeader from '../analytics/analytics-dashboard-header';
import CallVolumeAnalysis from '../analytics/call-volume-analysis';
import ConversationQualityAnalysis from '../analytics/conversation-quality-analysis';
import LiveCallMonitor from '../analytics/live-call-monitor';
import CallOutcomeAnalytics from '../analytics/call-outcome-analytics';
import AgentPerformanceAnalytics from '../analytics/agent-performance-analytics';
import RecentCallsTable from '../analytics/recent-calls-table';
import PlatformInsights from '../analytics/platform-insights';
import AnalyticsSummary from '../analytics/analytics-summary';
import DailyPerformanceLeaderboard from '../analytics/daily-performance-leaderboard';
import LiveAgentActivity from '../analytics/live-agent-activity';
import AgentCard from '../analytics/agent-card';

interface SwarmCampaign {
  id: string;
  name: string;
  description: string;
  status: 'active' | 'paused' | 'stopped';
  activeAgents: number;
  totalAgents: number;
  totalCalls: number;
  successRate: number;
  purpose: string;
  created: string;
}

interface SwarmOverviewModalProps {
  isOpen: boolean;
  onClose: () => void;
  swarmData: SwarmCampaign;
}

export default function SwarmOverviewModal({ isOpen, onClose, swarmData }: SwarmOverviewModalProps) {
  const [activeTab, setActiveTab] = React.useState('overview');
  
  if (!isOpen) return null;

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-400 text-black';
      case 'paused': return 'bg-yellow-400 text-black';
      case 'stopped': return 'bg-gray-400 text-white';
      default: return 'bg-gray-400 text-white';
    }
  };

  const getPurposeColor = (purpose: string) => {
    switch (purpose) {
      case 'Discovery': return 'bg-purple-400 text-white';
      case 'Support': return 'bg-green-400 text-black';
      case 'Appointment': return 'bg-orange-400 text-black';
      case 'Follow-up': return 'bg-cyan-400 text-black';
      default: return 'bg-blue-400 text-white';
    }
  };

  // Mock detailed swarm data
  const getSwarmDetails = (swarm: SwarmCampaign) => {
    return {
      performance: {
        callsToday: Math.floor(swarm.totalCalls * 0.1),
        callsThisWeek: Math.floor(swarm.totalCalls * 0.3),
        avgCallDuration: '3m 42s',
        conversionRate: swarm.successRate,
        appointmentsBooked: Math.floor(swarm.totalCalls * (swarm.successRate / 100) * 0.8),
        qualityScore: '94'
      },
      agents: [
        { id: '1', name: 'AI Agent Alpha', status: 'active', calls: 45, success: 92, currentCall: 'Michael Johnson' },
        { id: '2', name: 'AI Agent Beta', status: 'active', calls: 38, success: 85, currentCall: null },
        { id: '3', name: 'AI Agent Gamma', status: 'paused', calls: 22, success: 78, currentCall: null }
      ].slice(0, swarm.totalAgents),
      objectives: [
        'Identify decision makers in target companies',
        'Present value proposition effectively',
        'Handle common objections professionally',
        'Schedule qualified product demonstrations',
        'Maintain conversation flow and rapport'
      ],
      callFlow: [
        { step: 1, phase: 'Opening', description: 'Professional greeting and company introduction', avgDuration: '30s' },
        { step: 2, phase: 'Discovery', description: 'Identify pain points and business needs', avgDuration: '90s' },
        { step: 3, phase: 'Value Prop', description: 'Present tailored solution benefits', avgDuration: '120s' },
        { step: 4, phase: 'Objection Handling', description: 'Address concerns and questions', avgDuration: '60s' },
        { step: 5, phase: 'Close', description: 'Schedule demo or next steps', avgDuration: '45s' }
      ],
      recentCalls: [
        { time: '2:45 PM', prospect: 'Sarah Chen', company: 'TechCorp', outcome: 'Demo Scheduled', agent: 'Alpha' },
        { time: '2:32 PM', prospect: 'Mark Rodriguez', company: 'InnovateLLC', outcome: 'Follow-up Needed', agent: 'Beta' },
        { time: '2:18 PM', prospect: 'Lisa Wang', company: 'DataSystems', outcome: 'Not Interested', agent: 'Alpha' },
        { time: '2:05 PM', prospect: 'John Smith', company: 'CloudTech', outcome: 'Demo Scheduled', agent: 'Beta' }
      ]
    };
  };

  const swarmDetails = getSwarmDetails(swarmData);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-0 sm:p-4">
      <div className="bg-white border-0 sm:border-4 border-black shadow-none sm:shadow-[8px_8px_0_rgba(0,0,0,1)] w-full h-full sm:max-w-6xl sm:h-5/6 sm:max-h-[calc(100vh-2rem)] flex flex-col overflow-visible">
        
        {/* Modal Header */}
        <div className="border-b-2 sm:border-b-4 border-black bg-gray-100 flex-shrink-0">
          {/* Mobile Header */}
          <div className="sm:hidden p-3 safe-area-top">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-2">
                <h2 className="text-base font-black uppercase truncate">SWARM OVERVIEW</h2>
                <Badge className={cn("border border-black font-bold uppercase text-xs px-1 flex-shrink-0", getStatusColor(swarmData.status))}>
                  {swarmData.status}
                </Badge>
              </div>
              <Button 
                onClick={onClose}
                size="sm"
                className="w-8 h-8 p-0 bg-red-500 hover:bg-red-600 text-white border-2 border-black font-black text-lg flex-shrink-0"
              >
                ×
              </Button>
            </div>
            <div className="bg-white border-2 border-black p-2">
              <div className="font-black text-sm mb-1 truncate">{swarmData.name}</div>
              <div className="flex items-center justify-between text-xs">
                <span className="font-bold">{swarmData.activeAgents}/{swarmData.totalAgents} agents</span>
                <span className="text-gray-600">{swarmData.purpose}</span>
              </div>
            </div>
          </div>
          
          {/* Desktop Header */}
          <div className="hidden sm:block p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <h2 className="text-xl font-black uppercase">Swarm Overview - {swarmData.name}</h2>
                <Badge className={cn("border-2 border-black font-bold uppercase", getStatusColor(swarmData.status))}>
                  {swarmData.status}
                </Badge>
                <Badge className={cn("border-2 border-black font-bold uppercase", getPurposeColor(swarmData.purpose))}>
                  {swarmData.purpose}
                </Badge>
              </div>
              <Button 
                onClick={onClose}
                size="sm"
                className="bg-red-500 hover:bg-red-600 text-white border-2 border-black font-black text-xl px-3 py-2"
              >
                ×
              </Button>
            </div>
            <div className="flex items-center gap-6 mt-2 text-sm">
              <span className="font-bold">ACTIVE AGENTS: {swarmData.activeAgents}/{swarmData.totalAgents}</span>
              <span className="font-bold">TOTAL CALLS: {swarmData.totalCalls}</span>
              <span className="font-bold">SUCCESS RATE: {swarmData.successRate}%</span>
            </div>
          </div>
        </div>

        {/* Modal Tabs */}
        <div className="border-b-2 sm:border-b-4 border-black bg-black flex-shrink-0 relative z-50 overflow-visible">
          {/* Mobile: Dropdown Tabs */}
          <div className="sm:hidden p-2">
            <select
              value={activeTab}
              onChange={(e) => setActiveTab(e.target.value)}
              className="w-full px-3 py-3 border-2 border-black font-bold uppercase text-sm bg-white focus:outline-none appearance-none"
            >
              <option value="overview">OVERVIEW</option>
              <option value="agents">AGENTS</option>
              <option value="performance">PERFORMANCE</option>
              <option value="analytics">ANALYTICS</option>
              <option value="settings">SETTINGS</option>
            </select>
          </div>
          
          {/* Desktop: Button Tabs */}
          <div className="hidden sm:block relative z-50 overflow-visible">
            <div className="flex overflow-x-auto relative z-50 overflow-visible">
              {['overview', 'agents', 'performance', 'analytics', 'settings'].map((tab) => (
                <Button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  variant="reverse"
                  size="lg"
                  className="whitespace-nowrap flex-shrink-0 border-0 relative z-[100]"
                  style={{ 
                    backgroundColor: activeTab === tab ? '' : 'white'
                  }}
                  onMouseEnter={(e) => {
                    if (activeTab !== tab) {
                      e.currentTarget.style.setProperty('background-color', '#7dd3fc', 'important');
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (activeTab !== tab) {
                      e.currentTarget.style.setProperty('background-color', 'white', 'important');
                    }
                  }}
                >
                  {tab.replace('-', ' ').toUpperCase()}
                </Button>
              ))}
            </div>
          </div>
        </div>

        {/* Modal Content */}
        <div className="flex-1 flex flex-col sm:flex-row overflow-hidden min-h-0">
          {/* Main Content Area */}
          <div className="flex-1 p-2 sm:p-4 overflow-y-auto overflow-x-hidden">
            {activeTab === 'overview' && (
              <div className="space-y-4">
                {/* Overview Dashboard Header */}
                <AnalyticsDashboardHeader 
                  totalCalls={swarmData.totalCalls}
                  title="SWARM OVERVIEW DASHBOARD"
                  subtitle="Real-time Performance Monitoring"
                  bgColor="bg-green-400"
                  cards={[
                    {
                      value: swarmDetails.performance.callsToday,
                      label: "CALLS TODAY",
                      description: `+${swarmDetails.performance.callsThisWeek} this week`,
                      color: "text-blue-600",
                      progressWidth: "73%"
                    },
                    {
                      value: `${swarmData.successRate}%`,
                      label: "SUCCESS RATE",
                      description: "Target: 75%",
                      color: "text-green-600",
                      progressWidth: `${swarmData.successRate}%`
                    },
                    {
                      value: `${swarmData.activeAgents}/${swarmData.totalAgents}`,
                      label: "ACTIVE AGENTS",
                      description: `Utilization: ${Math.round((swarmData.activeAgents / swarmData.totalAgents) * 100)}%`,
                      color: "text-purple-600",
                      progressWidth: `${Math.round((swarmData.activeAgents / swarmData.totalAgents) * 100)}%`
                    },
                    {
                      value: swarmDetails.performance.appointmentsBooked,
                      label: "APPOINTMENTS",
                      description: `This week: ${Math.floor(swarmDetails.performance.appointmentsBooked * 1.4)}`,
                      color: "text-orange-600",
                      progressWidth: "82%"
                    },
                    {
                      value: swarmDetails.performance.qualityScore,
                      label: "QUALITY SCORE",
                      description: "Conversation rating",
                      color: "text-cyan-600",
                      progressWidth: "94%"
                    },
                    {
                      value: "3m 42s",
                      label: "AVG CALL TIME",
                      description: "Target: 4m",
                      color: "text-pink-600",
                      progressWidth: "92%"
                    }
                  ]}
                />

                {/* Real-time Status Banner */}
                <div className="bg-green-400 p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="font-black uppercase text-black">SWARM LIVE - {swarmData.activeAgents} AGENTS ACTIVE</span>
                    </div>
                    <div className="text-black font-black">
                      {new Date().toLocaleTimeString()}
                    </div>
                  </div>
                </div>

                {/* Control Panel */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-3 text-gray-600">SWARM CONTROLS</h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3">
                    <Button className="bg-green-600 hover:bg-green-700 text-white font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <UilPlay className="h-4 w-4 mr-2" />
                      START SWARM
                    </Button>
                    <Button className="bg-yellow-600 hover:bg-yellow-700 text-white font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <UilPause className="h-4 w-4 mr-2" />
                      PAUSE SWARM
                    </Button>
                    <Button className="bg-red-600 hover:bg-red-700 text-white font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <UilStopCircle className="h-4 w-4 mr-2" />
                      STOP SWARM
                    </Button>
                    <Button variant="outline" className="font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <UilEdit className="h-4 w-4 mr-2" />
                      EDIT CONFIG
                    </Button>
                    <Button variant="outline" className="font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <UilCopy className="h-4 w-4 mr-2" />
                      CLONE SWARM
                    </Button>
                    <Button className="bg-purple-600 hover:bg-purple-700 text-white font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      <UilChart className="h-4 w-4 mr-2" />
                      SCALE UP
                    </Button>
                  </div>
                </div>

                {/* Live Activity Feed */}
                <LiveAgentActivity 
                  title="LIVE ACTIVITY FEED"
                  activities={[
                    {
                      id: '1',
                      agentName: 'AI Agent Alpha',
                      action: 'completed call with',
                      target: 'Sarah Chen',
                      status: {
                        text: 'DEMO SCHEDULED',
                        color: 'text-black',
                        bgColor: 'bg-green-400'
                      },
                      timestamp: '2 min ago',
                      pulseColor: 'bg-green-500'
                    },
                    {
                      id: '2',
                      agentName: 'AI Agent Beta',
                      action: 'started call with',
                      target: 'Mark Rodriguez',
                      status: {
                        text: 'IN PROGRESS',
                        color: 'text-white',
                        bgColor: 'bg-blue-400'
                      },
                      timestamp: 'Just now',
                      pulseColor: 'bg-blue-500'
                    },
                    {
                      id: '3',
                      agentName: 'AI Agent Gamma',
                      action: 'completed call with',
                      target: 'Lisa Wang',
                      status: {
                        text: 'FOLLOW-UP',
                        color: 'text-black',
                        bgColor: 'bg-yellow-400'
                      },
                      timestamp: '4 min ago',
                      pulseColor: 'bg-yellow-500'
                    },
                    {
                      id: '4',
                      agentName: 'SYSTEM',
                      action: 'Auto-scaled swarm from',
                      target: '2 to 3 agents',
                      status: {
                        text: 'AUTO-SCALE',
                        color: 'text-white',
                        bgColor: 'bg-purple-400'
                      },
                      timestamp: '8 min ago',
                      pulseColor: 'bg-purple-500'
                    }
                  ]}
                />

                {/* Quick Actions */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="font-black uppercase text-sm mb-3 text-gray-600">QUICK ACTIONS</h3>
                    <div className="space-y-2">
                      <Button variant="outline" className="w-full justify-start font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                        📊 VIEW DETAILED ANALYTICS
                      </Button>
                      <Button variant="outline" className="w-full justify-start font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                        📞 MONITOR LIVE CALLS
                      </Button>
                      <Button variant="outline" className="w-full justify-start font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                        📈 EXPORT PERFORMANCE REPORT
                      </Button>
                      <Button variant="outline" className="w-full justify-start font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                        ⚙️ ADJUST SCALING RULES
                      </Button>
                    </div>
                  </div>

                  <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="font-black uppercase text-sm mb-4 text-gray-600">SWARM HEALTH MONITOR</h3>
                    
                    {/* Overall Health Status */}
                    <div className="mb-4 p-3 bg-green-50 border-2 border-black">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                          <span className="font-black text-sm uppercase">SYSTEM STATUS</span>
                        </div>
                        <Badge className="bg-green-400 text-black border border-black font-bold uppercase text-xs">OPTIMAL</Badge>
                      </div>
                      <div className="text-xs text-green-700">All agents operating within normal parameters</div>
                    </div>

                    {/* Health Metrics Grid */}
                    <div className="grid grid-cols-2 gap-3">
                      <div className="p-3 bg-gray-50 border-2 border-black text-center">
                        <div className="text-lg font-black text-green-600">127ms</div>
                        <div className="text-xs font-bold text-gray-600 uppercase">API LATENCY</div>
                        <div className="w-full bg-gray-300 border border-black h-1 mt-1">
                          <div className="h-full bg-green-400" style={{ width: '92%' }}></div>
                        </div>
                      </div>
                      
                      <div className="p-3 bg-gray-50 border-2 border-black text-center">
                        <div className="text-lg font-black text-green-600">0.02%</div>
                        <div className="text-xs font-bold text-gray-600 uppercase">ERROR RATE</div>
                        <div className="w-full bg-gray-300 border border-black h-1 mt-1">
                          <div className="h-full bg-green-400" style={{ width: '98%' }}></div>
                        </div>
                      </div>
                      
                      <div className="p-3 bg-gray-50 border-2 border-black text-center">
                        <div className="text-lg font-black text-blue-600">12</div>
                        <div className="text-xs font-bold text-gray-600 uppercase">QUEUE DEPTH</div>
                        <div className="w-full bg-gray-300 border border-black h-1 mt-1">
                          <div className="h-full bg-blue-400" style={{ width: '24%' }}></div>
                        </div>
                      </div>
                      
                      <div className="p-3 bg-gray-50 border-2 border-black text-center">
                        <div className="text-lg font-black text-purple-600">99.8%</div>
                        <div className="text-xs font-bold text-gray-600 uppercase">UPTIME</div>
                        <div className="w-full bg-gray-300 border border-black h-1 mt-1">
                          <div className="h-full bg-purple-400" style={{ width: '99%' }}></div>
                        </div>
                      </div>
                    </div>

                    {/* Auto-scaling Status */}
                    <div className="mt-4 p-3 bg-blue-50 border-2 border-black">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                          <span className="font-bold text-xs uppercase text-blue-800">AUTO-SCALING</span>
                        </div>
                        <span className="font-black text-xs text-blue-600">NEXT EVENT: ~2 MIN</span>
                      </div>
                      <div className="text-xs text-blue-700 mt-1">Ready to scale based on queue depth</div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'agents' && (
              <div className="space-y-4">
                {/* Agent Fleet Dashboard Header */}
                <AnalyticsDashboardHeader 
                  totalCalls={swarmData.totalCalls}
                  title="AGENT FLEET OVERVIEW"
                  subtitle={`${swarmData.activeAgents} Agents Live • Auto-Scaling On`}
                  bgColor="bg-green-400"
                  cards={[
                    {
                      value: swarmData.activeAgents,
                      label: "ACTIVE NOW",
                      description: "Currently running",
                      color: "text-green-600",
                      progressWidth: `${Math.min((swarmData.activeAgents / swarmData.totalAgents) * 100, 100)}%`
                    },
                    {
                      value: swarmData.totalAgents,
                      label: "TOTAL FLEET",
                      description: "Available agents",
                      color: "text-blue-600",
                      progressWidth: "100%"
                    },
                    {
                      value: `${Math.round((swarmData.activeAgents / swarmData.totalAgents) * 100)}%`,
                      label: "UTILIZATION",
                      description: "Fleet efficiency",
                      color: "text-purple-600",
                      progressWidth: `${Math.round((swarmData.activeAgents / swarmData.totalAgents) * 100)}%`
                    },
                    {
                      value: "2.4m",
                      label: "AVG CALL TIME",
                      description: "Per conversation",
                      color: "text-orange-600",
                      progressWidth: "75%"
                    }
                  ]}
                />

                {/* Agent Performance Grid */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
                  {swarmDetails.agents.map((agent) => (
                    <AgentCard
                      key={agent.id}
                      agent={agent}
                      showCurrentStatus={true}
                      showMetrics={true}
                    />
                  ))}
                </div>

                {/* Agent Management Controls */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">FLEET MANAGEMENT</h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3">
                    <Button className="bg-green-600 hover:bg-green-700 text-white font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      ADD AGENT
                    </Button>
                    <Button className="bg-blue-600 hover:bg-blue-700 text-white font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      SCALE UP
                    </Button>
                    <Button className="bg-yellow-600 hover:bg-yellow-700 text-white font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      PAUSE ALL
                    </Button>
                    <Button variant="outline" className="font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      BULK ACTIONS
                    </Button>
                    <Button variant="outline" className="font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      AGENT LOGS
                    </Button>
                    <Button className="bg-purple-600 hover:bg-purple-700 text-white font-black uppercase border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                      ANALYTICS
                    </Button>
                  </div>
                </div>

                {/* Real-time Agent Activity */}
                <LiveAgentActivity 
                  title="LIVE AGENT ACTIVITY"
                  activities={[
                    {
                      id: '1',
                      agentName: 'AI Agent Alpha',
                      action: 'successfully booked demo with',
                      target: 'Tech Solutions Inc',
                      status: {
                        text: 'DEMO SCHEDULED',
                        color: 'text-black',
                        bgColor: 'bg-green-400'
                      },
                      timestamp: '30s ago',
                      pulseColor: 'bg-green-500'
                    },
                    {
                      id: '2',
                      agentName: 'AI Agent Beta',
                      action: 'handling objection from',
                      target: 'Marketing Director',
                      status: {
                        text: 'NEGOTIATING',
                        color: 'text-white',
                        bgColor: 'bg-blue-400'
                      },
                      timestamp: '1m ago',
                      pulseColor: 'bg-blue-500'
                    },
                    {
                      id: '3',
                      agentName: 'AI Agent Gamma',
                      action: 'completed discovery call with',
                      target: 'Enterprise Client',
                      status: {
                        text: 'QUALIFIED LEAD',
                        color: 'text-black',
                        bgColor: 'bg-yellow-400'
                      },
                      timestamp: '2m ago',
                      pulseColor: 'bg-yellow-500'
                    },
                    {
                      id: '4',
                      agentName: 'SYSTEM',
                      action: 'Auto-scaled fleet capacity from',
                      target: '2 to 3 agents',
                      status: {
                        text: 'SCALING EVENT',
                        color: 'text-white',
                        bgColor: 'bg-purple-400'
                      },
                      timestamp: '3m ago',
                      pulseColor: 'bg-purple-500'
                    }
                  ]}
                />

                {/* Agent Performance Leaderboard */}
                <DailyPerformanceLeaderboard 
                  agents={swarmDetails.agents}
                  title="DAILY PERFORMANCE LEADERBOARD"
                  badgeText="LIVE RANKINGS"
                  badgeColor="bg-purple-400 text-white"
                  sortBy="success"
                  maxItems={swarmDetails.agents.length}
                />
              </div>
            )}

            {activeTab === 'performance' && (
              <div className="space-y-4">
                {/* Performance Dashboard Header */}
                <AnalyticsDashboardHeader 
                  totalCalls={swarmData.totalCalls}
                  title="PERFORMANCE DASHBOARD"
                  subtitle="Real-time Swarm Metrics"
                  bgColor="bg-blue-400"
                  cards={[
                    {
                      value: `${swarmData.successRate}%`,
                      label: "SUCCESS RATE",
                      description: "+5% vs yesterday",
                      color: "text-green-600",
                      progressWidth: `${swarmData.successRate}%`
                    },
                    {
                      value: swarmDetails.performance.callsToday,
                      label: "CALLS TODAY",
                      description: "Target: 150",
                      color: "text-blue-600",
                      progressWidth: `${Math.min((swarmDetails.performance.callsToday / 150) * 100, 100)}%`
                    },
                    {
                      value: swarmDetails.performance.appointmentsBooked,
                      label: "DEMOS BOOKED",
                      description: "82% of target",
                      color: "text-purple-600",
                      progressWidth: "82%"
                    },
                    {
                      value: swarmDetails.performance.avgCallDuration,
                      label: "AVG DURATION",
                      description: "Optimal range",
                      color: "text-orange-600",
                      progressWidth: "75%"
                    },
                    {
                      value: swarmDetails.performance.qualityScore,
                      label: "QUALITY SCORE",
                      description: "+6% this month",
                      color: "text-cyan-600",
                      progressWidth: `${parseFloat(swarmDetails.performance.qualityScore)}%`
                    },
                    {
                      value: "98%",
                      label: "ADHERENCE",
                      description: "Script compliance",
                      color: "text-pink-600",
                      progressWidth: "98%"
                    }
                  ]}
                />

                {/* Call Performance Analytics */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Conversation Quality Metrics */}
                  <ConversationQualityAnalysis 
                    title="CONVERSATION QUALITY METRICS"
                    bgColor="bg-green-50"
                    iconBgColor="bg-green-400"
                    metrics={[
                      {
                        label: "OBJECTIVE COMPLETION",
                        value: Math.round((swarmData.totalCalls * 0.32 / swarmData.totalCalls) * 100),
                        percentage: Math.round((swarmData.totalCalls * 0.32 / swarmData.totalCalls) * 100),
                        color: "green",
                        description: "EXCELLENT"
                      },
                      {
                        label: "FOLLOW-UP QUALITY",
                        value: Math.round((swarmData.totalCalls * 0.25 / swarmData.totalCalls) * 100),
                        percentage: Math.round((swarmData.totalCalls * 0.25 / swarmData.totalCalls) * 100),
                        color: "blue",
                        description: "STRONG"
                      },
                      {
                        label: "INFORMATION ACCURACY",
                        value: Math.round((swarmData.totalCalls * 0.18 / swarmData.totalCalls) * 100),
                        percentage: Math.round((swarmData.totalCalls * 0.18 / swarmData.totalCalls) * 100),
                        color: "purple",
                        description: "GOOD"
                      },
                      {
                        label: "RESPONSE EFFICIENCY",
                        value: 85,
                        percentage: 85,
                        color: "orange",
                        description: "OPTIMAL"
                      }
                    ]}
                  />

                  <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="font-black uppercase text-sm mb-4 text-gray-600">PERFORMANCE TRENDS</h3>
                    <div className="space-y-4">
                      <div>
                        <div className="flex justify-between items-center mb-2">
                          <span className="font-bold text-sm">Success Rate Trend</span>
                          <span className="text-green-600 font-bold text-xs">↗ +8% this week</span>
                        </div>
                        <div className="w-full bg-gray-300 border-2 border-black h-4">
                          <div className="h-full bg-green-400" style={{ width: `${swarmData.successRate}%` }}></div>
                        </div>
                      </div>
                      
                      <div>
                        <div className="flex justify-between items-center mb-2">
                          <span className="font-bold text-sm">Call Volume</span>
                          <span className="text-blue-600 font-bold text-xs">↗ +15% vs last week</span>
                        </div>
                        <div className="w-full bg-gray-300 border-2 border-black h-4">
                          <div className="h-full bg-blue-400" style={{ width: '73%' }}></div>
                        </div>
                      </div>
                      
                      <div>
                        <div className="flex justify-between items-center mb-2">
                          <span className="font-bold text-sm">Agent Efficiency</span>
                          <span className="text-purple-600 font-bold text-xs">↗ +12% improvement</span>
                        </div>
                        <div className="w-full bg-gray-300 border-2 border-black h-4">
                          <div className="h-full bg-purple-400" style={{ width: '89%' }}></div>
                        </div>
                      </div>
                      
                      <div>
                        <div className="flex justify-between items-center mb-2">
                          <span className="font-bold text-sm">Response Quality</span>
                          <span className="text-orange-600 font-bold text-xs">↗ +6% this month</span>
                        </div>
                        <div className="w-full bg-gray-300 border-2 border-black h-4">
                          <div className="h-full bg-orange-400" style={{ width: '94%' }}></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Call Flow Analysis */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="font-black uppercase text-sm mb-4 text-gray-600">OPTIMIZED CALL FLOW</h3>
                    <div className="space-y-4">
                      {swarmDetails.callFlow.map((phase, index) => (
                        <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 border-2 border-black">
                          <div className="w-8 h-8 bg-cyan-400 border-2 border-black flex items-center justify-center font-black text-xs flex-shrink-0">
                            {phase.step}
                          </div>
                          <div className="flex-1">
                            <div className="font-bold text-sm">{phase.phase}</div>
                            <div className="text-xs text-gray-600">{phase.description}</div>
                          </div>
                          <div className="text-right">
                            <div className="text-xs font-bold text-gray-500">{phase.avgDuration}</div>
                            <div className="text-xs text-green-600">✓ Optimized</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                    <h3 className="font-black uppercase text-sm mb-4 text-gray-600">CAMPAIGN OBJECTIVES STATUS</h3>
                    <div className="space-y-4">
                      {swarmDetails.objectives.map((objective, index) => (
                        <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 border-2 border-black">
                          <div className={cn(
                            "w-8 h-8 border-2 border-black flex items-center justify-center font-black text-white text-xs flex-shrink-0",
                            index < 3 ? "bg-green-400" : index < 4 ? "bg-yellow-400 text-black" : "bg-gray-400"
                          )}>
                            {index < 3 ? "✓" : index < 4 ? "⚠" : "⏳"}
                          </div>
                          <div className="flex-1">
                            <div className="font-bold text-sm">{objective}</div>
                            <div className="text-xs text-gray-600">
                              {index < 3 ? "Consistently achieved across swarm" : 
                               index < 4 ? "Needs improvement in 30% of calls" : 
                               "In development phase"}
                            </div>
                          </div>
                          <div className={cn(
                            "px-2 py-1 border border-black text-xs font-bold uppercase",
                            index < 3 ? "bg-green-400 text-black" : 
                            index < 4 ? "bg-yellow-400 text-black" : "bg-gray-400 text-white"
                          )}>
                            {index < 3 ? "MASTERED" : index < 4 ? "TRAINING" : "PENDING"}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Advanced Performance Metrics */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">ADVANCED SWARM ANALYTICS</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <div>
                      <h4 className="font-bold text-sm mb-3">CONVERSION FUNNEL</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Calls Made</span>
                          <span className="font-bold text-xs">{swarmData.totalCalls}</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Connected</span>
                          <span className="font-bold text-xs">{Math.floor(swarmData.totalCalls * 0.85)}</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Interested</span>
                          <span className="font-bold text-xs">{Math.floor(swarmData.totalCalls * 0.68)}</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Qualified</span>
                          <span className="font-bold text-xs">{Math.floor(swarmData.totalCalls * 0.48)}</span>
                        </div>
                        <div className="flex justify-between items-center border-t border-gray-300 pt-2">
                          <span className="text-xs font-bold">Converted</span>
                          <span className="font-black text-xs text-green-600">{Math.floor(swarmData.totalCalls * (swarmData.successRate / 100))}</span>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h4 className="font-bold text-sm mb-3">CALL TIMING ANALYSIS</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Peak Hours</span>
                          <span className="font-bold text-xs">10AM-2PM</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Best Days</span>
                          <span className="font-bold text-xs">Tue-Thu</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Avg Ring Time</span>
                          <span className="font-bold text-xs">4.2 rings</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Connection Rate</span>
                          <span className="font-bold text-xs">85%</span>
                        </div>
                        <div className="flex justify-between items-center border-t border-gray-300 pt-2">
                          <span className="text-xs font-bold">Optimal Window</span>
                          <span className="font-black text-xs text-blue-600">11AM-1PM</span>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h4 className="font-bold text-sm mb-3">PERFORMANCE METRICS</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Baseline Score</span>
                          <span className="font-bold text-xs">45%</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Current Score</span>
                          <span className="font-bold text-xs text-green-600">{swarmData.successRate}%</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Improvement</span>
                          <span className="font-bold text-xs text-green-600">+{swarmData.successRate - 45}%</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Performance</span>
                          <span className="font-bold text-xs">Excellent</span>
                        </div>
                        <div className="flex justify-between items-center border-t border-gray-300 pt-2">
                          <span className="text-xs font-bold">Efficiency</span>
                          <span className="font-black text-xs text-purple-600">3.8x</span>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h4 className="font-bold text-sm mb-3">QUALITY INDICATORS</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Script Adherence</span>
                          <span className="font-bold text-xs">96%</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Objection Handling</span>
                          <span className="font-bold text-xs">92%</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Prospect Satisfaction</span>
                          <span className="font-bold text-xs">4.7/5</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-xs">Compliance Score</span>
                          <span className="font-bold text-xs">100%</span>
                        </div>
                        <div className="flex justify-between items-center border-t border-gray-300 pt-2">
                          <span className="text-xs font-bold">Overall Grade</span>
                          <span className="font-black text-xs text-green-600">A+</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Agent Performance Analytics */}
                <AgentPerformanceAnalytics 
                  agents={swarmDetails.agents}
                  swarmData={swarmData}
                />
              </div>
            )}

            {activeTab === 'analytics' && (
              <div className="space-y-4">
                {/* Analytics Dashboard Header */}
                <AnalyticsDashboardHeader totalCalls={swarmData.totalCalls} />

                {/* Call Analytics & Performance Insights */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  {/* Call Volume Analysis */}
                  <CallVolumeAnalysis 
                    callsToday={swarmDetails.performance.callsToday}
                    callsThisWeek={swarmDetails.performance.callsThisWeek}
                  />

                  {/* Conversation Quality Analysis */}
                  <ConversationQualityAnalysis />
                </div>

                {/* Real-time Activity & Call Outcomes */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Live Call Monitor */}
                  <LiveCallMonitor 
                    agents={swarmDetails.agents}
                    swarmData={swarmData}
                  />

                  {/* Call Outcome Analytics */}
                  <CallOutcomeAnalytics 
                    totalCalls={swarmData.totalCalls}
                    successRate={swarmData.successRate}
                  />
                </div>

                {/* Agent Performance Analytics */}
                <AgentPerformanceAnalytics 
                  agents={swarmDetails.agents}
                  swarmData={swarmData}
                />

                {/* Recent Calls and Platform Insights */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  {/* Recent Calls Table */}
                  <RecentCallsTable 
                    recentCalls={swarmDetails.recentCalls}
                  />

                  {/* Platform Insights */}
                  <PlatformInsights 
                    swarmData={swarmData}
                    swarmDetails={swarmDetails}
                  />
                </div>

                {/* Analytics Summary Dashboard */}
                <AnalyticsSummary 
                  swarmData={swarmData}
                  swarmDetails={swarmDetails}
                />
              </div>
            )}

            {activeTab === 'settings' && (
              <div className="space-y-4">
                {/* Swarm Configuration */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">SWARM CONFIGURATION</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-3">
                      <div className="flex justify-between">
                        <span className="font-bold">Swarm ID:</span>
                        <span className="font-mono text-sm">{swarmData.id}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Created:</span>
                        <span>{new Date(swarmData.created).toLocaleDateString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Max Agents:</span>
                        <span>{swarmData.totalAgents}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Campaign Type:</span>
                        <span className={cn("px-2 py-1 border border-black text-xs font-bold uppercase", getPurposeColor(swarmData.purpose))}>
                          {swarmData.purpose}
                        </span>
                      </div>
                    </div>
                    <div className="space-y-3">
                      <div className="flex justify-between">
                        <span className="font-bold">Auto-scaling:</span>
                        <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">ENABLED</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Call Recording:</span>
                        <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">ON</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Analytics:</span>
                        <span className="px-2 py-1 bg-blue-400 border border-black text-xs font-bold uppercase text-white">REAL-TIME</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="font-bold">Priority:</span>
                        <span className="px-2 py-1 bg-yellow-400 border border-black text-xs font-bold uppercase text-black">HIGH</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* AI Agent Configuration */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">AI AGENT CONFIGURATION</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-3">
                      <div className="bg-gray-50 border-2 border-black p-3">
                        <h4 className="font-black uppercase text-xs mb-2 text-gray-700">VOICE & SPEECH</h4>
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between items-center">
                            <span>Voice Model:</span>
                            <span className="px-2 py-1 bg-blue-400 border border-black text-xs font-bold uppercase text-white">RACHEL</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Speaking Rate:</span>
                            <span className="font-bold">1.1x</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Voice Clarity:</span>
                            <span className="font-bold">Enhanced</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Language:</span>
                            <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">EN-US</span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-gray-50 border-2 border-black p-3">
                        <h4 className="font-black uppercase text-xs mb-2 text-gray-700">CONVERSATION STYLE</h4>
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between items-center">
                            <span>Personality:</span>
                            <span className="px-2 py-1 bg-purple-400 border border-black text-xs font-bold uppercase text-white">PROFESSIONAL</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Tone:</span>
                            <span className="font-bold">Confident</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Formality:</span>
                            <span className="font-bold">Business</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Objection Style:</span>
                            <span className="px-2 py-1 bg-yellow-400 border border-black text-xs font-bold uppercase text-black">EMPATHETIC</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-3">
                      <div className="bg-gray-50 border-2 border-black p-3">
                        <h4 className="font-black uppercase text-xs mb-2 text-gray-700">PERFORMANCE LIMITS</h4>
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between items-center">
                            <span>Max Call Duration:</span>
                            <span className="font-bold">8 minutes</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Retry Attempts:</span>
                            <span className="font-bold">3 calls</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Queue Timeout:</span>
                            <span className="font-bold">45 seconds</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Success Threshold:</span>
                            <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">75%</span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-gray-50 border-2 border-black p-3">
                        <h4 className="font-black uppercase text-xs mb-2 text-gray-700">ESCALATION RULES</h4>
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between items-center">
                            <span>Auto-Transfer:</span>
                            <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">ENABLED</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Escalation Trigger:</span>
                            <span className="font-bold">Objection x3</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Supervisor Alert:</span>
                            <span className="px-2 py-1 bg-yellow-400 border border-black text-xs font-bold uppercase text-black">ACTIVE</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Quality Check:</span>
                            <span className="px-2 py-1 bg-blue-400 border border-black text-xs font-bold uppercase text-white">REAL-TIME</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Script & Knowledge Base */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">SCRIPT & KNOWLEDGE MANAGEMENT</h3>
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                    <div className="space-y-3">
                      <div className="bg-gray-50 border-2 border-black p-3">
                        <h4 className="font-black uppercase text-xs mb-3 text-gray-700">ACTIVE SCRIPTS</h4>
                        <div className="space-y-2">
                          <div className="flex items-center justify-between p-2 bg-white border border-black">
                            <div className="flex items-center gap-2">
                              <div className="w-3 h-3 bg-green-400 border border-black"></div>
                              <span className="font-bold text-sm">Opening Script v2.3</span>
                            </div>
                            <Badge className="bg-green-400 text-black border border-black font-bold uppercase text-xs">
                              ACTIVE
                            </Badge>
                          </div>
                          <div className="flex items-center justify-between p-2 bg-white border border-black">
                            <div className="flex items-center gap-2">
                              <div className="w-3 h-3 bg-blue-400 border border-black"></div>
                              <span className="font-bold text-sm">Objection Responses v1.8</span>
                            </div>
                            <Badge className="bg-blue-400 text-white border border-black font-bold uppercase text-xs">
                              TESTING
                            </Badge>
                          </div>
                          <div className="flex items-center justify-between p-2 bg-white border border-black">
                            <div className="flex items-center gap-2">
                              <div className="w-3 h-3 bg-purple-400 border border-black"></div>
                              <span className="font-bold text-sm">Closing Techniques v1.5</span>
                            </div>
                            <Badge className="bg-purple-400 text-white border border-black font-bold uppercase text-xs">
                              DEPLOYED
                            </Badge>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-gray-50 border-2 border-black p-3">
                        <h4 className="font-black uppercase text-xs mb-3 text-gray-700">SCRIPT PERFORMANCE</h4>
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between items-center">
                            <span>Script Adherence:</span>
                            <span className="font-black text-green-600">94%</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Success Rate:</span>
                            <span className="font-black text-blue-600">87%</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Avg Call Time:</span>
                            <span className="font-bold">3m 42s</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Quality Score:</span>
                            <span className="font-black text-purple-600">9.2/10</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-3">
                      <div className="bg-gray-50 border-2 border-black p-3">
                        <h4 className="font-black uppercase text-xs mb-3 text-gray-700">KNOWLEDGE BASE</h4>
                        <div className="space-y-2">
                          <div className="flex items-center justify-between p-2 bg-white border border-black">
                            <div>
                              <div className="font-bold text-sm">Product Catalog</div>
                              <div className="text-xs text-gray-600">1,247 entries</div>
                            </div>
                            <Badge className="bg-green-400 text-black border border-black font-bold uppercase text-xs">
                              SYNCED
                            </Badge>
                          </div>
                          <div className="flex items-center justify-between p-2 bg-white border border-black">
                            <div>
                              <div className="font-bold text-sm">FAQ Database</div>
                              <div className="text-xs text-gray-600">342 Q&As</div>
                            </div>
                            <Badge className="bg-yellow-400 text-black border border-black font-bold uppercase text-xs">
                              UPDATING
                            </Badge>
                          </div>
                          <div className="flex items-center justify-between p-2 bg-white border border-black">
                            <div>
                              <div className="font-bold text-sm">Competitor Intel</div>
                              <div className="text-xs text-gray-600">89 profiles</div>
                            </div>
                            <Badge className="bg-blue-400 text-white border border-black font-bold uppercase text-xs">
                              CURRENT
                            </Badge>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-gray-50 border-2 border-black p-3">
                        <h4 className="font-black uppercase text-xs mb-3 text-gray-700">AI TRAINING DATA</h4>
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between items-center">
                            <span>Training Calls:</span>
                            <span className="font-bold">12,847</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Success Examples:</span>
                            <span className="font-bold">8,934</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Objection Samples:</span>
                            <span className="font-bold">3,421</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Last Update:</span>
                            <span className="font-bold">2 hours ago</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Campaign Optimization */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">CAMPAIGN OPTIMIZATION</h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="bg-gray-50 border-2 border-black p-3">
                      <h4 className="font-black uppercase text-xs mb-3 text-gray-700">TIMING OPTIMIZATION</h4>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between items-center">
                          <span>Best Call Times:</span>
                          <span className="font-bold">10AM-2PM</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>Optimal Days:</span>
                          <span className="font-bold">Tue-Thu</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>Timezone Aware:</span>
                          <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">ON</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>DNC Filtering:</span>
                          <span className="px-2 py-1 bg-blue-400 border border-black text-xs font-bold uppercase text-white">ACTIVE</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-gray-50 border-2 border-black p-3">
                      <h4 className="font-black uppercase text-xs mb-3 text-gray-700">LEAD PRIORITIZATION</h4>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between items-center">
                          <span>Scoring Model:</span>
                          <span className="px-2 py-1 bg-purple-400 border border-black text-xs font-bold uppercase text-white">AI-DRIVEN</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>Hot Leads First:</span>
                          <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">ENABLED</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>Min Lead Score:</span>
                          <span className="font-bold">65</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>Callback Window:</span>
                          <span className="font-bold">24 hours</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-gray-50 border-2 border-black p-3">
                      <h4 className="font-black uppercase text-xs mb-3 text-gray-700">ADAPTIVE LEARNING</h4>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between items-center">
                          <span>Real-time Updates:</span>
                          <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">ON</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>A/B Testing:</span>
                          <span className="px-2 py-1 bg-blue-400 border border-black text-xs font-bold uppercase text-white">RUNNING</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>Learning Rate:</span>
                          <span className="font-bold">Aggressive</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>Model Version:</span>
                          <span className="font-bold">v4.2.1</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Security & Compliance */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">SECURITY & COMPLIANCE</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-3">
                      <div className="bg-gray-50 border-2 border-black p-3">
                        <h4 className="font-black uppercase text-xs mb-3 text-gray-700">DATA PROTECTION</h4>
                        <div className="space-y-2">
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-bold">Call Recording Encryption</span>
                            <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">AES-256</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-bold">Data Retention</span>
                            <span className="font-bold text-sm">90 days</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-bold">PII Masking</span>
                            <span className="px-2 py-1 bg-blue-400 border border-black text-xs font-bold uppercase text-white">ENABLED</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-bold">GDPR Compliance</span>
                            <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">ACTIVE</span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-gray-50 border-2 border-black p-3">
                        <h4 className="font-black uppercase text-xs mb-3 text-gray-700">AUDIT TRAIL</h4>
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between items-center">
                            <span>Event Logging:</span>
                            <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">FULL</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Access Control:</span>
                            <span className="px-2 py-1 bg-purple-400 border border-black text-xs font-bold uppercase text-white">RBAC</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Session Monitoring:</span>
                            <span className="px-2 py-1 bg-blue-400 border border-black text-xs font-bold uppercase text-white">REAL-TIME</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-3">
                      <div className="bg-gray-50 border-2 border-black p-3">
                        <h4 className="font-black uppercase text-xs mb-3 text-gray-700">REGULATORY COMPLIANCE</h4>
                        <div className="space-y-2">
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-bold">TCPA Compliance</span>
                            <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">VERIFIED</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-bold">Consent Management</span>
                            <span className="px-2 py-1 bg-blue-400 border border-black text-xs font-bold uppercase text-white">AUTOMATED</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-bold">DNC List Updates</span>
                            <span className="font-bold text-sm">Daily</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-bold">Disclosure Requirements</span>
                            <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">MET</span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-gray-50 border-2 border-black p-3">
                        <h4 className="font-black uppercase text-xs mb-3 text-gray-700">QUALITY ASSURANCE</h4>
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between items-center">
                            <span>Call Monitoring:</span>
                            <span className="font-bold">100%</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Quality Scoring:</span>
                            <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">AI-POWERED</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span>Supervisor Alerts:</span>
                            <span className="px-2 py-1 bg-yellow-400 border border-black text-xs font-bold uppercase text-black">ENABLED</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Integration & API Settings */}
                <div className="bg-white p-4 border-2 sm:border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] sm:shadow-[4px_4px_0_rgba(0,0,0,1)]">
                  <h3 className="font-black uppercase text-sm mb-4 text-gray-600">INTEGRATION & API SETTINGS</h3>
                  <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
                    <div className="bg-gray-50 border-2 border-black p-3">
                      <h4 className="font-black uppercase text-xs mb-3 text-gray-700">CRM INTEGRATION</h4>
                      <div className="space-y-2">
                        <div className="flex items-center justify-between p-2 bg-white border border-black">
                          <div className="flex items-center gap-2">
                            <div className="w-3 h-3 bg-green-400 border border-black"></div>
                            <span className="font-bold text-sm">Salesforce</span>
                          </div>
                          <Badge className="bg-green-400 text-black border border-black font-bold uppercase text-xs">
                            CONNECTED
                          </Badge>
                        </div>
                        <div className="flex items-center justify-between p-2 bg-white border border-black">
                          <div className="flex items-center gap-2">
                            <div className="w-3 h-3 bg-blue-400 border border-black"></div>
                            <span className="font-bold text-sm">HubSpot</span>
                          </div>
                          <Badge className="bg-blue-400 text-white border border-black font-bold uppercase text-xs">
                            SYNCING
                          </Badge>
                        </div>
                        <div className="text-xs text-gray-600 mt-2">
                          Last sync: 5 minutes ago
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-gray-50 border-2 border-black p-3">
                      <h4 className="font-black uppercase text-xs mb-3 text-gray-700">TELEPHONY STACK</h4>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between items-center">
                          <span>SIP Provider:</span>
                          <span className="font-bold">Telnyx</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>Codec:</span>
                          <span className="font-bold">G.711</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>Redundancy:</span>
                          <span className="px-2 py-1 bg-green-400 border border-black text-xs font-bold uppercase text-black">MULTI-REGION</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span>Latency:</span>
                          <span className="font-bold text-green-600">23ms</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-gray-50 border-2 border-black p-3">
                      <h4 className="font-black uppercase text-xs mb-3 text-gray-700">WEBHOOK ENDPOINTS</h4>
                      <div className="space-y-2">
                        <div className="flex items-center justify-between p-2 bg-white border border-black">
                          <div>
                            <div className="font-bold text-sm">Call Events</div>
                            <div className="text-xs text-gray-600">https://api.example.com/...</div>
                          </div>
                          <Badge className="bg-green-400 text-black border border-black font-bold uppercase text-xs">
                            ACTIVE
                          </Badge>
                        </div>
                        <div className="flex items-center justify-between p-2 bg-white border border-black">
                          <div>
                            <div className="font-bold text-sm">Lead Updates</div>
                            <div className="text-xs text-gray-600">https://crm.example.com/...</div>
                          </div>
                          <Badge className="bg-yellow-400 text-black border border-black font-bold uppercase text-xs">
                            PENDING
                          </Badge>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/verification-modal.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardHeader, CardContent } from '../../ui/card';
import { Button } from '../../ui/button';
import { Input } from '../../ui/input';
import { Badge } from '../../ui/badge';
import { UilPhone, UilEnvelope, UilLock, UilCheck, UilMessage, UilTimes } from '@tooni/iconscout-unicons-react';

interface VerificationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onComplete: (email: string, phone: string) => void;
  devMode?: boolean;
}

export default function VerificationModal({ isOpen, onClose, onComplete, devMode }: VerificationModalProps) {
  const [step, setStep] = React.useState<'contact' | 'otp'>('contact');
  const [email, setEmail] = React.useState('');
  const [phone, setPhone] = React.useState('');
  const [otp, setOtp] = React.useState('');
  const [agreedToTerms, setAgreedToTerms] = React.useState(false);
  const [isLoading, setIsLoading] = React.useState(false);

  // Auto-fill when dev mode is enabled
  React.useEffect(() => {
    if (devMode && isOpen) {
      setEmail('test@belfastroofer.com');
      setPhone('+44 28 9012 3456');
      setAgreedToTerms(true);
    }
  }, [devMode, isOpen]);

  const handleContactSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (email && phone && agreedToTerms) {
      setIsLoading(true);
      // Simulate sending OTP
      await new Promise(resolve => setTimeout(resolve, 1500));
      setIsLoading(false);
      setStep('otp');
    }
  };

  const handleOTPSubmit = async () => {
    if (otp === '000000') {
      setIsLoading(true);
      await new Promise(resolve => setTimeout(resolve, 1000));
      onComplete(email, phone);
    }
  };

  React.useEffect(() => {
    if (otp.length === 6) {
      handleOTPSubmit();
    }
  }, [otp]);

  const handleOtpChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/\D/g, '');
    if (value.length <= 6) {
      setOtp(value);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
      <Card className="w-full max-w-md relative">
        <Button
          onClick={onClose}
          size="icon"
          variant="ghost"
          className="absolute top-2 right-2 z-10"
        >
          <UilTimes className="h-5 w-5" />
        </Button>
        {step === 'contact' ? (
          <>
            <CardHeader className="bg-[rgb(0,82,255)] p-6">
              <h2 className="text-2xl font-black uppercase text-white">VERIFY YOUR IDENTITY</h2>
              <p className="text-white/90 text-sm mt-2">Create your account to start using Diala</p>
            </CardHeader>
            
            <CardContent className="p-6">
              <form onSubmit={handleContactSubmit} className="space-y-6">
                <div className="space-y-2">
                  <Badge variant="outline" className="bg-transparent text-black border-2 border-black px-3 py-1.5 text-sm font-black uppercase">
                    <UilEnvelope className="h-4 w-4 mr-2" />
                    Email Address
                  </Badge>
                  <Input
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="your@email.com"
                    className="border-2 border-black"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Badge variant="outline" className="bg-transparent text-black border-2 border-black px-3 py-1.5 text-sm font-black uppercase">
                    <UilPhone className="h-4 w-4 mr-2" />
                    Phone Number
                  </Badge>
                  <Input
                    type="tel"
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                    placeholder="+1 (555) 123-4567"
                    className="border-2 border-black"
                    required
                  />
                </div>

                {/* Terms and Conditions */}
                <div className="mt-6 p-4 bg-yellow-100 border-4 border-black">
                  <label className="flex items-start gap-3 cursor-pointer">
                    <div className="relative mt-1">
                      <input
                        type="checkbox"
                        checked={agreedToTerms}
                        onChange={(e) => setAgreedToTerms(e.target.checked)}
                        className="sr-only"
                      />
                      <div className={`w-6 h-6 border-2 border-black transition-all ${
                        agreedToTerms ? 'bg-black' : 'bg-white'
                      }`}>
                        {agreedToTerms && (
                          <UilCheck className="h-5 w-5 text-white absolute top-0.5 left-0.5" />
                        )}
                      </div>
                    </div>
                    <span className="text-sm text-black">
                      I agree to the{' '}
                      <a href="/terms" className="font-bold underline hover:text-[rgb(0,82,255)]">
                        Terms & Conditions
                      </a>{' '}
                      and{' '}
                      <a href="/privacy" className="font-bold underline hover:text-[rgb(0,82,255)]">
                        Privacy Policy
                      </a>
                      . I understand this is an AI-powered service.
                    </span>
                  </label>
                </div>

                <Button
                  type="submit"
                  disabled={isLoading || !email || !phone || !agreedToTerms}
                  className="w-full py-3 text-sm font-black uppercase bg-[#FFD700] text-black hover:bg-[#FFD700]/90"
                >
                  <UilMessage className="h-4 w-4 mr-2" />
                  {isLoading ? 'SENDING CODE...' : 'SEND VERIFICATION CODE'}
                </Button>

                <p className="text-xs text-center text-gray-600 mt-4">
                  By signing up, you'll get access to all features including voice customization and real-time calling.
                </p>
              </form>
            </CardContent>
          </>
        ) : (
          <>
            <CardHeader className="bg-[rgb(0,82,255)] p-6">
              <h2 className="text-2xl font-black uppercase text-white">ENTER CODE</h2>
              <p className="text-white/90 text-sm mt-2">We sent a 6-digit code to {phone}</p>
            </CardHeader>
            
            <CardContent className="p-6">
              <div className="space-y-6">
                <div className="flex justify-center pt-4">
                  <Button variant="neutral" className="w-20 h-20 bg-[#FFD700]">
                    <UilLock className="h-10 w-10 text-black" />
                  </Button>
                </div>

                <div className="space-y-2">
                  <label className="block text-sm font-black uppercase text-black text-center mb-4">
                    Verification Code
                  </label>
                  <Input
                    type="text"
                    value={otp}
                    onChange={handleOtpChange}
                    placeholder="000000"
                    maxLength={6}
                    className="text-center text-2xl font-black tracking-[0.5em] border-4 border-black h-16"
                    disabled={isLoading}
                  />
                </div>

                {isLoading && (
                  <div className="text-center">
                    <p className="text-[rgb(0,82,255)] font-black animate-pulse uppercase">
                      Verifying...
                    </p>
                  </div>
                )}

                <div className="text-center space-y-2">
                  <p className="text-xs text-gray-600">
                    Didn't receive a code?{' '}
                    <Button variant="noShadow" className="font-bold p-0 h-auto">
                      Resend
                    </Button>
                  </p>
                  <p className="text-xs text-gray-500">
                    Demo hint: Use 000000
                  </p>
                </div>

                <Button
                  onClick={() => setStep('contact')}
                  variant="neutral"
                  className="w-full py-2 text-sm font-black uppercase"
                >
                  ← Change Number
                </Button>
              </div>
            </CardContent>
          </>
        )}
      </Card>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/view-rag-workflow-modal.tsx
================================================
import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '../../ui/card';
import { Button } from '../../ui/button';
import { Badge } from '../../ui/badge';
import { Progress } from '../../ui/progress';
import { 
  UilTimes, 
  UilBrain,
  UilUpload,
  UilFile,
  UilLink,
  UilRobot,
  UilCheckCircle,
  UilClock,
  UilExclamationTriangle,
  UilYoutube,
  UilDatabase,
  UilFileExport,
  UilChartGrowth,
  UilSync
} from '@tooni/iconscout-unicons-react';

interface RAGWorkflow {
  id: string;
  name: string;
  status: 'queued' | 'scraping' | 'embedding' | 'indexing' | 'validating' | 'completed' | 'failed';
  progress: number;
  type: 'youtube' | 'documents' | 'urls' | 'mixed';
  parameters: {
    sources: string[];
    chunkSize: number;
    overlap: number;
    embeddingModel: string;
    vectorStore: string;
  };
  stats: {
    totalContent: number;
    contentProcessed: number;
    embeddings: number;
    indexSize: string;
    processingTime?: string;
  };
  createdAt: string;
  completedAt?: string;
  estimatedTime?: string;
}

interface ViewRAGWorkflowModalProps {
  isOpen: boolean;
  onClose: () => void;
  workflow: RAGWorkflow | null;
  onExport?: (format: 'json' | 'vectors') => void;
  onUse?: () => void;
}

export default function ViewRAGWorkflowModal({ isOpen, onClose, workflow, onExport, onUse }: ViewRAGWorkflowModalProps) {
  if (!isOpen || !workflow) return null;

  const getStatusColor = (status: RAGWorkflow['status']) => {
    switch (status) {
      case 'queued': return 'bg-gray-100 text-gray-700 border-gray-400';
      case 'scraping': return 'bg-purple-100 text-purple-700 border-purple-400';
      case 'embedding': return 'bg-green-100 text-green-700 border-green-400';
      case 'indexing': return 'bg-orange-100 text-orange-700 border-orange-400';
      case 'validating': return 'bg-pink-100 text-pink-700 border-pink-400';
      case 'completed': return 'bg-green-100 text-green-700 border-green-400';
      case 'failed': return 'bg-red-100 text-red-700 border-red-400';
    }
  };

  const getStatusIcon = (status: RAGWorkflow['status']) => {
    switch (status) {
      case 'queued': return <UilClock className="w-5 h-5" />;
      case 'scraping': return <UilLink className="w-5 h-5 animate-pulse" />;
      case 'embedding': return <UilBrain className="w-5 h-5 animate-pulse" />;
      case 'indexing': return <UilDatabase className="w-5 h-5 animate-pulse" />;
      case 'validating': return <UilCheckCircle className="w-5 h-5 animate-pulse" />;
      case 'completed': return <UilCheckCircle className="w-5 h-5" />;
      case 'failed': return <UilExclamationTriangle className="w-5 h-5" />;
    }
  };

  const getTypeIcon = (type: RAGWorkflow['type']) => {
    switch (type) {
      case 'youtube': return <UilYoutube className="w-5 h-5 text-red-500" />;
      case 'documents': return <UilFile className="w-5 h-5 text-blue-500" />;
      case 'urls': return <UilLink className="w-5 h-5 text-green-500" />;
      case 'mixed': return <UilDatabase className="w-5 h-5 text-purple-500" />;
    }
  };

  const getWorkflowSteps = () => {
    const steps = [
      { name: 'Scrape Content', status: workflow.progress >= 0, progress: Math.min(workflow.progress, 20) },
      { name: 'Generate Embeddings', status: workflow.progress >= 25, progress: Math.min(Math.max(workflow.progress - 20, 0), 30) },
      { name: 'Build Index', status: workflow.progress >= 55, progress: Math.min(Math.max(workflow.progress - 50, 0), 30) },
      { name: 'Validate', status: workflow.progress >= 85, progress: Math.min(Math.max(workflow.progress - 80, 0), 15) },
      { name: 'Complete', status: workflow.progress === 100, progress: workflow.progress === 100 ? 5 : 0 }
    ];
    return steps;
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-4xl border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-background max-h-[90vh] overflow-y-auto">
        <CardHeader className="border-b-4 border-black bg-[rgb(0,82,255)] relative sticky top-0 z-10">
          <CardTitle className="text-2xl font-black uppercase text-white pr-10" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
            RAG WORKFLOW DETAILS - {workflow.name}
          </CardTitle>
          <Button
            variant="neutral"
            size="sm"
            className="absolute top-4 right-4"
            onClick={onClose}
          >
            <UilTimes className="h-5 w-5 text-black" />
          </Button>
        </CardHeader>
        
        <CardContent className="p-6 space-y-6">
          {/* Status Overview */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className={`p-3 border-2 border-black ${getStatusColor(workflow.status).split(' ')[0]}`}>
                    {getStatusIcon(workflow.status)}
                  </div>
                  <div>
                    <p className="text-xs font-black uppercase text-gray-600">Status</p>
                    <Badge className={`border-2 border-black font-bold uppercase ${getStatusColor(workflow.status)}`}>
                      {workflow.status}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-3 bg-yellow-400 border-2 border-black">
                    <UilChartGrowth className="w-5 h-5 text-black" />
                  </div>
                  <div>
                    <p className="text-xs font-black uppercase text-gray-600">Progress</p>
                    <p className="text-2xl font-black text-black">{workflow.progress}%</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-3 bg-green-400 border-2 border-black">
                    <UilBrain className="w-5 h-5 text-black" />
                  </div>
                  <div>
                    <p className="text-xs font-black uppercase text-gray-600">Embeddings</p>
                    <p className="text-2xl font-black text-black">{workflow.stats.embeddings.toLocaleString()}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Progress Steps */}
          <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardHeader className="border-b-4 border-black bg-yellow-50">
              <CardTitle className="text-lg font-black uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Processing Progress
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-4">
                {getWorkflowSteps().map((step, idx) => (
                  <div key={idx} className="flex items-center gap-4">
                    <div className={`
                      w-10 h-10 border-4 border-black flex items-center justify-center font-bold text-sm
                      ${step.status ? 'bg-[rgb(0,82,255)] text-white shadow-[2px_2px_0_rgba(0,0,0,1)]' : 'bg-gray-300 text-gray-600'}
                    `}>
                      {idx + 1}
                    </div>
                    <div className="flex-1">
                      <p className="font-black text-sm uppercase">{step.name}</p>
                      <Progress value={step.progress} className="h-2 border-2 border-black mt-1" />
                    </div>
                    <div className="text-sm font-bold">
                      {step.status ? '✓' : '○'}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Workflow Configuration */}
          <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardHeader className="border-b-4 border-black bg-blue-50">
              <CardTitle className="text-lg font-black uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Configuration Parameters
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div className="flex items-center gap-3">
                    {getTypeIcon(workflow.type)}
                    <div>
                      <p className="text-xs font-black uppercase text-gray-600">Content Type</p>
                      <p className="font-bold capitalize">{workflow.type}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <UilDatabase className="w-5 h-5 text-gray-500" />
                    <div>
                      <p className="text-xs font-black uppercase text-gray-600">Vector Store</p>
                      <p className="font-bold capitalize">{workflow.parameters.vectorStore}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <UilBrain className="w-5 h-5 text-gray-500" />
                    <div>
                      <p className="text-xs font-black uppercase text-gray-600">Embedding Model</p>
                      <p className="font-bold">{workflow.parameters.embeddingModel}</p>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center gap-3">
                    <UilChartGrowth className="w-5 h-5 text-gray-500" />
                    <div>
                      <p className="text-xs font-black uppercase text-gray-600">Chunk Size</p>
                      <p className="font-bold">{workflow.parameters.chunkSize} tokens</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <UilSync className="w-5 h-5 text-gray-500" />
                    <div>
                      <p className="text-xs font-black uppercase text-gray-600">Overlap</p>
                      <p className="font-bold">{workflow.parameters.overlap} tokens</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <UilFile className="w-5 h-5 text-gray-500" />
                    <div>
                      <p className="text-xs font-black uppercase text-gray-600">Sources</p>
                      <p className="font-bold">{workflow.parameters.sources.length} item(s)</p>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Sources List */}
          <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardHeader className="border-b-4 border-black bg-purple-50">
              <CardTitle className="text-lg font-black uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Content Sources
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-3">
                {workflow.parameters.sources.map((source, idx) => (
                  <div key={idx} className="flex items-center gap-3 p-3 bg-gray-50 border-2 border-black">
                    {source.includes('youtube') && <UilYoutube className="w-5 h-5 text-red-500 flex-shrink-0" />}
                    {source.startsWith('http') && !source.includes('youtube') && <UilLink className="w-5 h-5 text-green-500 flex-shrink-0" />}
                    {!source.startsWith('http') && <UilFile className="w-5 h-5 text-blue-500 flex-shrink-0" />}
                    <div className="flex-1 min-w-0">
                      <p className="font-bold text-sm truncate">{source}</p>
                      <p className="text-xs text-gray-600">
                        {source.includes('youtube') ? 'YouTube Video/Channel' : 
                         source.startsWith('http') ? 'Web URL' : 'Document File'}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Statistics */}
          <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardHeader className="border-b-4 border-black bg-green-50">
              <CardTitle className="text-lg font-black uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Processing Statistics
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="p-4 bg-blue-50 border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                  <UilFile className="w-6 h-6 text-blue-600 mb-2" />
                  <p className="text-xs font-black uppercase text-gray-600">Content Processed</p>
                  <p className="text-2xl font-black text-black">{workflow.stats.contentProcessed}/{workflow.stats.totalContent}</p>
                </div>
                
                <div className="p-4 bg-green-50 border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                  <UilBrain className="w-6 h-6 text-green-600 mb-2" />
                  <p className="text-xs font-black uppercase text-gray-600">Embeddings</p>
                  <p className="text-2xl font-black text-black">{workflow.stats.embeddings.toLocaleString()}</p>
                </div>
                
                <div className="p-4 bg-purple-50 border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                  <UilDatabase className="w-6 h-6 text-purple-600 mb-2" />
                  <p className="text-xs font-black uppercase text-gray-600">Index Size</p>
                  <p className="text-2xl font-black text-black">{workflow.stats.indexSize}</p>
                </div>
                
                <div className="p-4 bg-orange-50 border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                  <UilClock className="w-6 h-6 text-orange-600 mb-2" />
                  <p className="text-xs font-black uppercase text-gray-600">Processing Time</p>
                  <p className="text-2xl font-black text-black">{workflow.stats.processingTime || 'TBD'}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Timeline */}
          <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardHeader className="border-b-4 border-black bg-orange-50">
              <CardTitle className="text-lg font-black uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Timeline
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-4">
                <div className="flex items-center gap-4 p-3 bg-gray-50 border-2 border-black">
                  <div className="w-3 h-3 bg-[rgb(0,82,255)] border-2 border-black"></div>
                  <div className="flex-1">
                    <p className="font-bold">Workflow Created</p>
                    <p className="text-sm text-gray-600">{new Date(workflow.createdAt).toLocaleString()}</p>
                  </div>
                </div>
                
                {workflow.completedAt && (
                  <div className="flex items-center gap-4 p-3 bg-gray-50 border-2 border-black">
                    <div className="w-3 h-3 bg-green-500 border-2 border-black"></div>
                    <div className="flex-1">
                      <p className="font-bold">Workflow Completed</p>
                      <p className="text-sm text-gray-600">{new Date(workflow.completedAt).toLocaleString()}</p>
                    </div>
                  </div>
                )}
                
                {workflow.estimatedTime && workflow.status !== 'completed' && (
                  <div className="flex items-center gap-4 p-3 bg-yellow-50 border-2 border-black">
                    <div className="w-3 h-3 bg-yellow-500 border-2 border-black"></div>
                    <div className="flex-1">
                      <p className="font-bold">Estimated Completion</p>
                      <p className="text-sm text-gray-600">{workflow.estimatedTime}</p>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          {workflow.status === 'completed' && (onExport || onUse) && (
            <div className="flex gap-4 pt-4">
              {onUse && (
                <Button 
                  onClick={onUse}
                  className="flex-1"
                  style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                >
                  <UilRobot className="w-5 h-5 mr-2" />
                  USE IN AGENTS
                </Button>
              )}
              {onExport && (
                <>
                  <Button 
                    onClick={() => onExport('json')}
                    variant="neutral"
                    className="flex-1"
                    style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                  >
                    <UilFileExport className="w-5 h-5 mr-2" />
                    EXPORT JSON
                  </Button>
                  <Button 
                    onClick={() => onExport('vectors')}
                    variant="neutral"
                    className="flex-1"
                    style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
                  >
                    <UilDatabase className="w-5 h-5 mr-2" />
                    EXPORT VECTORS
                  </Button>
                </>
              )}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/custom/modals/view-workflow-modal.tsx
================================================
import * as React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '../../ui/card';
import { Button } from '../../ui/button';
import { Badge } from '../../ui/badge';
import { Progress } from '../../ui/progress';
import { 
  UilTimes, 
  UilCheckCircle,
  UilClock,
  UilSearchAlt,
  UilBuilding,
  UilMapMarker,
  UilFilter,
  UilLinkedin,
  UilFileExport,
  UilDatabase,
  UilGlobe,
  UilUsersAlt,
  UilLink,
  UilExclamationTriangle
} from '@tooni/iconscout-unicons-react';

interface SearchWorkflow {
  id: string;
  name: string;
  status: 'idle' | 'searching' | 'scraping' | 'analyzing' | 'validating' | 'completed' | 'failed';
  progress: number;
  parameters: {
    location: string;
    businessType: string;
    keywords: string[];
    includeLinkedIn: boolean;
    searchDepth: number;
  };
  stats: {
    pagesFound: number;
    pagesScraped: number;
    businessesExtracted: number;
    businessesValidated: number;
    matchRate: number;
  };
  createdAt: string;
  completedAt?: string;
  estimatedTime?: string;
}

interface ViewWorkflowModalProps {
  isOpen: boolean;
  onClose: () => void;
  workflow: SearchWorkflow | null;
  onExport?: (format: 'csv' | 'crm') => void;
}

export default function ViewWorkflowModal({ isOpen, onClose, workflow, onExport }: ViewWorkflowModalProps) {
  if (!isOpen || !workflow) return null;

  const getStatusColor = (status: SearchWorkflow['status']) => {
    switch (status) {
      case 'idle': return 'bg-gray-100 text-gray-700 border-gray-400';
      case 'searching': return 'bg-blue-100 text-blue-700 border-blue-400';
      case 'scraping': return 'bg-yellow-100 text-yellow-700 border-yellow-400';
      case 'analyzing': return 'bg-purple-100 text-purple-700 border-purple-400';
      case 'validating': return 'bg-orange-100 text-orange-700 border-orange-400';
      case 'completed': return 'bg-green-100 text-green-700 border-green-400';
      case 'failed': return 'bg-red-100 text-red-700 border-red-400';
    }
  };

  const getStatusIcon = (status: SearchWorkflow['status']) => {
    switch (status) {
      case 'idle': return <UilClock className="w-5 h-5" />;
      case 'searching': return <UilSearchAlt className="w-5 h-5 animate-pulse" />;
      case 'scraping': return <UilLink className="w-5 h-5 animate-pulse" />;
      case 'analyzing': return <UilDatabase className="w-5 h-5 animate-pulse" />;
      case 'validating': return <UilCheckCircle className="w-5 h-5 animate-pulse" />;
      case 'completed': return <UilCheckCircle className="w-5 h-5" />;
      case 'failed': return <UilExclamationTriangle className="w-5 h-5" />;
    }
  };

  const getWorkflowSteps = () => {
    const steps = [
      { name: 'Search Pages', status: workflow.progress >= 0, progress: Math.min(workflow.progress, 20) },
      { name: 'Scrape Data', status: workflow.progress >= 25, progress: Math.min(Math.max(workflow.progress - 20, 0), 25) },
      { name: 'Analyze Content', status: workflow.progress >= 50, progress: Math.min(Math.max(workflow.progress - 45, 0), 25) },
      { name: 'Validate Results', status: workflow.progress >= 75, progress: Math.min(Math.max(workflow.progress - 70, 0), 25) },
      { name: 'Complete', status: workflow.progress === 100, progress: workflow.progress === 100 ? 5 : 0 }
    ];
    return steps;
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-4xl border-4 border-black shadow-[8px_8px_0_rgba(0,0,0,1)] bg-background max-h-[90vh] overflow-y-auto">
        <CardHeader className="border-b-4 border-black bg-[rgb(0,82,255)] relative sticky top-0 z-10">
          <CardTitle className="text-2xl font-black uppercase text-white pr-10" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
            WORKFLOW DETAILS - {workflow.name}
          </CardTitle>
          <Button
            variant="neutral"
            size="sm"
            className="absolute top-4 right-4"
            onClick={onClose}
          >
            <UilTimes className="h-5 w-5 text-black" />
          </Button>
        </CardHeader>
        
        <CardContent className="p-6 space-y-6">
          {/* Status Overview */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className={`p-3 border-2 border-black ${getStatusColor(workflow.status).split(' ')[0]}`}>
                    {getStatusIcon(workflow.status)}
                  </div>
                  <div>
                    <p className="text-xs font-black uppercase text-gray-600">Status</p>
                    <Badge className={`border-2 border-black font-bold uppercase ${getStatusColor(workflow.status)}`}>
                      {workflow.status}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-3 bg-yellow-400 border-2 border-black">
                    <UilClock className="w-5 h-5 text-black" />
                  </div>
                  <div>
                    <p className="text-xs font-black uppercase text-gray-600">Progress</p>
                    <p className="text-2xl font-black text-black">{workflow.progress}%</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-3 bg-green-400 border-2 border-black">
                    <UilBuilding className="w-5 h-5 text-black" />
                  </div>
                  <div>
                    <p className="text-xs font-black uppercase text-gray-600">Businesses Found</p>
                    <p className="text-2xl font-black text-black">{workflow.stats.businessesExtracted}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Progress Steps */}
          <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardHeader className="border-b-4 border-black bg-yellow-50">
              <CardTitle className="text-lg font-black uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Workflow Progress
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-4">
                {getWorkflowSteps().map((step, idx) => (
                  <div key={idx} className="flex items-center gap-4">
                    <div className={`
                      w-10 h-10 border-4 border-black flex items-center justify-center font-bold text-sm
                      ${step.status ? 'bg-[rgb(0,82,255)] text-white shadow-[2px_2px_0_rgba(0,0,0,1)]' : 'bg-gray-300 text-gray-600'}
                    `}>
                      {idx + 1}
                    </div>
                    <div className="flex-1">
                      <p className="font-black text-sm uppercase">{step.name}</p>
                      <Progress value={step.progress} className="h-2 border-2 border-black mt-1" />
                    </div>
                    <div className="text-sm font-bold">
                      {step.status ? '✓' : '○'}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Parameters */}
          <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardHeader className="border-b-4 border-black bg-blue-50">
              <CardTitle className="text-lg font-black uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Search Parameters
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div className="flex items-center gap-3">
                    <UilMapMarker className="w-5 h-5 text-gray-500" />
                    <div>
                      <p className="text-xs font-black uppercase text-gray-600">Location</p>
                      <p className="font-bold">{workflow.parameters.location}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <UilBuilding className="w-5 h-5 text-gray-500" />
                    <div>
                      <p className="text-xs font-black uppercase text-gray-600">Business Type</p>
                      <p className="font-bold">{workflow.parameters.businessType}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <UilSearchAlt className="w-5 h-5 text-gray-500" />
                    <div>
                      <p className="text-xs font-black uppercase text-gray-600">Search Depth</p>
                      <p className="font-bold">{workflow.parameters.searchDepth} levels</p>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center gap-3">
                    <UilLinkedin className="w-5 h-5 text-gray-500" />
                    <div>
                      <p className="text-xs font-black uppercase text-gray-600">LinkedIn Integration</p>
                      <Badge className={`border-2 border-black ${workflow.parameters.includeLinkedIn ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-700'}`}>
                        {workflow.parameters.includeLinkedIn ? 'ENABLED' : 'DISABLED'}
                      </Badge>
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-3">
                    <UilFilter className="w-5 h-5 text-gray-500 mt-1" />
                    <div>
                      <p className="text-xs font-black uppercase text-gray-600">Keywords</p>
                      <div className="flex flex-wrap gap-2 mt-1">
                        {workflow.parameters.keywords.map((keyword) => (
                          <Badge key={keyword} className="border-2 border-black bg-white text-black">
                            {keyword}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Statistics */}
          <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardHeader className="border-b-4 border-black bg-green-50">
              <CardTitle className="text-lg font-black uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Statistics & Results
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="p-4 bg-blue-50 border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                  <UilGlobe className="w-6 h-6 text-blue-600 mb-2" />
                  <p className="text-xs font-black uppercase text-gray-600">Pages Found</p>
                  <p className="text-2xl font-black text-black">{workflow.stats.pagesFound.toLocaleString()}</p>
                </div>
                
                <div className="p-4 bg-yellow-50 border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                  <UilLink className="w-6 h-6 text-yellow-600 mb-2" />
                  <p className="text-xs font-black uppercase text-gray-600">Pages Scraped</p>
                  <p className="text-2xl font-black text-black">{workflow.stats.pagesScraped.toLocaleString()}</p>
                </div>
                
                <div className="p-4 bg-purple-50 border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                  <UilBuilding className="w-6 h-6 text-purple-600 mb-2" />
                  <p className="text-xs font-black uppercase text-gray-600">Businesses</p>
                  <p className="text-2xl font-black text-black">{workflow.stats.businessesExtracted}</p>
                </div>
                
                <div className="p-4 bg-green-50 border-4 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]">
                  <UilCheckCircle className="w-6 h-6 text-green-600 mb-2" />
                  <p className="text-xs font-black uppercase text-gray-600">Match Rate</p>
                  <p className="text-2xl font-black text-green-600">{workflow.stats.matchRate}%</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Timeline */}
          <Card className="border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)]">
            <CardHeader className="border-b-4 border-black bg-orange-50">
              <CardTitle className="text-lg font-black uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                Timeline
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-4">
                <div className="flex items-center gap-4 p-3 bg-gray-50 border-2 border-black">
                  <div className="w-3 h-3 bg-[rgb(0,82,255)] border-2 border-black"></div>
                  <div className="flex-1">
                    <p className="font-bold">Workflow Started</p>
                    <p className="text-sm text-gray-600">{new Date(workflow.createdAt).toLocaleString()}</p>
                  </div>
                </div>
                
                {workflow.completedAt && (
                  <div className="flex items-center gap-4 p-3 bg-gray-50 border-2 border-black">
                    <div className="w-3 h-3 bg-green-500 border-2 border-black"></div>
                    <div className="flex-1">
                      <p className="font-bold">Workflow Completed</p>
                      <p className="text-sm text-gray-600">{new Date(workflow.completedAt).toLocaleString()}</p>
                    </div>
                  </div>
                )}
                
                {workflow.estimatedTime && workflow.status !== 'completed' && (
                  <div className="flex items-center gap-4 p-3 bg-yellow-50 border-2 border-black">
                    <div className="w-3 h-3 bg-yellow-500 border-2 border-black"></div>
                    <div className="flex-1">
                      <p className="font-bold">Estimated Completion</p>
                      <p className="text-sm text-gray-600">{workflow.estimatedTime}</p>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Export Actions */}
          {workflow.status === 'completed' && onExport && (
            <div className="flex gap-4 pt-4">
              <Button 
                onClick={() => onExport('csv')}
                className="flex-1"
                style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
              >
                <UilFileExport className="w-5 h-5 mr-2" />
                EXPORT TO CSV
              </Button>
              <Button 
                onClick={() => onExport('crm')}
                variant="neutral"
                className="flex-1"
                style={{ fontFamily: 'Noyh-Bold, sans-serif' }}
              >
                <UilDatabase className="w-5 h-5 mr-2" />
                EXPORT TO CRM
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/custom/rtc/rtc-completion.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilCheckCircle, UilRocket, UilArrowRight, UilRefresh, UilClock, UilPhone, UilStar, UilInfoCircle, UilMicrophone, UilDownloadAlt } from '@tooni/iconscout-unicons-react';

interface RTCCompletionProps {
  callDuration: number;
  voiceType: string;
  wasRecorded: boolean;
  onStartOver: () => void;
}

export const RTCCompletion: React.FC<RTCCompletionProps> = ({ callDuration, voiceType, wasRecorded, onStartOver }) => {
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60).toString().padStart(2, '0');
    const secs = (seconds % 60).toString().padStart(2, '0');
    return `${mins}:${secs}`;
  };

  const getVoiceLabel = (type: string) => {
    const labels: Record<string, string> = {
      'normal': 'Normal Voice',
      'high-pitch': 'High Pitch',
      'alien': 'Alien Voice',
      'overlord': 'Overlord Voice',
      'clone': 'Voice Clone'
    };
    return labels[type] || 'Normal Voice';
  };

  const handleDownload = () => {
    // Simulate download
    const blob = new Blob(['Demo recording data'], { type: 'audio/wav' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `call-recording-${Date.now()}.wav`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <Card className="transform -rotate-1">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <div className="flex justify-center mb-4">
            <div className="w-24 h-24 bg-green-600 border-4 border-black shadow-[6px_6px_0_rgba(0,0,0,1)] flex items-center justify-center">
              <UilCheckCircle className="h-12 w-12 text-white" />
            </div>
          </div>
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black mb-3">
            DEMO COMPLETED!
          </h1>
          <p className="text-lg text-gray-700">
            You successfully made a WebRTC voice call
          </p>
        </div>

        {/* Call Stats */}
        <div className="grid grid-cols-3 gap-4 mb-8">
          <Card className="border-4 border-black bg-orange-50">
            <CardContent className="p-4 text-center">
              <UilClock className="h-8 w-8 mx-auto mb-2 text-orange-600" />
              <p className="text-sm text-gray-600 uppercase">Duration</p>
              <p className="text-xl font-black text-black">{formatTime(callDuration)}</p>
            </CardContent>
          </Card>

          <Card className="border-4 border-black bg-purple-50">
            <CardContent className="p-4 text-center">
              <UilMicrophone className="h-8 w-8 mx-auto mb-2 text-purple-600" />
              <p className="text-sm text-gray-600 uppercase">Voice</p>
              <p className="text-xl font-black text-black">{getVoiceLabel(voiceType)}</p>
            </CardContent>
          </Card>

          <Card className="border-4 border-black bg-blue-50">
            <CardContent className="p-4 text-center">
              <UilPhone className="h-8 w-8 mx-auto mb-2 text-blue-600" />
              <p className="text-sm text-gray-600 uppercase">Quality</p>
              <p className="text-xl font-black text-black">HD</p>
            </CardContent>
          </Card>
        </div>

        {/* Download Button */}
        {wasRecorded && (
          <Button
            variant="header"
            className="w-full h-12 bg-blue-500 hover:bg-blue-600 mb-8"
            onClick={handleDownload}
          >
            <UilDownloadAlt className="h-5 w-5 mr-2" />
            Download Recording
          </Button>
        )}

        {/* Next Steps */}
        <div className="mb-8">
          <h3 className="text-2xl font-black text-black mb-4 uppercase flex items-center gap-3">
            <Button variant="header" className="w-10 h-10 bg-orange-600 hover:bg-orange-600 p-0 cursor-default">
              <UilRocket className="h-6 w-6 text-white" />
            </Button>
            READY FOR MORE?
          </h3>
          
          <p className="text-gray-700 mb-6">
            That was just a taste of our WebRTC capabilities! Unlock the full potential with:
          </p>
          
          <div className="space-y-3">
            <div className="flex items-start gap-3">
              <Button size="icon" variant="header" className="w-6 h-6 bg-yellow-400 hover:bg-yellow-400 p-0 cursor-default flex-shrink-0 mt-1">
                <UilStar className="h-3 w-3" />
              </Button>
              <p className="text-gray-700"><span className="font-black">Unlimited call duration</span> - No time limits on your conversations</p>
            </div>
            <div className="flex items-start gap-3">
              <Button size="icon" variant="header" className="w-6 h-6 bg-yellow-400 hover:bg-yellow-400 p-0 cursor-default flex-shrink-0 mt-1">
                <UilStar className="h-3 w-3" />
              </Button>
              <p className="text-gray-700"><span className="font-black">Real phone numbers</span> - Connect to any phone worldwide</p>
            </div>
            <div className="flex items-start gap-3">
              <Button size="icon" variant="header" className="w-6 h-6 bg-yellow-400 hover:bg-yellow-400 p-0 cursor-default flex-shrink-0 mt-1">
                <UilStar className="h-3 w-3" />
              </Button>
              <p className="text-gray-700"><span className="font-black">Voice cloning technology</span> - Clone any voice in real-time</p>
            </div>
            <div className="flex items-start gap-3">
              <Button size="icon" variant="header" className="w-6 h-6 bg-yellow-400 hover:bg-yellow-400 p-0 cursor-default flex-shrink-0 mt-1">
                <UilStar className="h-3 w-3" />
              </Button>
              <p className="text-gray-700"><span className="font-black">Advanced features</span> - Call recording, transcription, and analytics</p>
            </div>
          </div>
        </div>

        {/* Info Box */}
        <Card className="bg-blue-100 border-2 border-black mb-8">
          <CardContent className="p-4">
            <div className="flex items-start gap-3">
              <Button 
                size="sm" 
                variant="neutral" 
                className="bg-blue-400 hover:bg-blue-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
              >
                <UilInfoCircle className="h-4 w-4" />
              </Button>
              <div>
                <p className="text-sm font-bold">WHAT\'S NEXT?</p>
                <p className="text-sm text-gray-700 mt-1">
                  Continue exploring our platform to set up voice agents, configure call flows, and integrate with your existing systems. Our WebRTC technology ensures crystal-clear communication every time.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* CTA Buttons */}
        <div className="space-y-4">
          <Button
            variant="header"
            className="w-full h-14 text-lg font-black uppercase bg-green-500 hover:bg-green-600"
          >
            <span className="flex items-center justify-center gap-2">
              GET FULL ACCESS
              <UilArrowRight className="h-6 w-6" />
            </span>
          </Button>
          
          <Button
            variant="header"
            className="w-full h-12 text-md font-black uppercase bg-gray-300 hover:bg-gray-400"
            onClick={onStartOver}
          >
            <span className="flex items-center justify-center gap-2">
              <UilRefresh className="h-5 w-5" />
              TRY AGAIN
            </span>
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};


================================================
FILE: src/components/custom/rtc/rtc-introduction.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilPhone, UilWifi, UilClock, UilCheckCircle, UilArrowRight, UilInfoCircle } from '@tooni/iconscout-unicons-react';

interface RTCIntroductionProps {
  onContinue: () => void;
}

export const RTCIntroduction: React.FC<RTCIntroductionProps> = ({ onContinue }) => {
  return (
    <Card className="transform -rotate-1">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            WEBRTC VOICE DEMO
          </h1>
          <p className="text-lg text-gray-700 mt-2">
            Experience real-time voice communication
          </p>
        </div>

        {/* How It Works */}
        <div className="space-y-6 mb-8">
          <div className="flex gap-4">
            <Button
              variant="header"
              className="w-12 h-12 bg-orange-600 hover:bg-orange-600 p-0 cursor-default flex-shrink-0"
            >
              <span className="text-white font-black text-xl">1</span>
            </Button>
            <div className="flex-1">
              <h4 className="font-black text-black text-lg mb-1 uppercase">CHOOSE VOICE TYPE</h4>
              <p className="text-gray-700">Select from normal, high pitch, alien, or overlord voice effects for your demo call.</p>
            </div>
          </div>

          <div className="flex gap-4">
            <Button
              variant="header"
              className="w-12 h-12 bg-orange-600 hover:bg-orange-600 p-0 cursor-default flex-shrink-0"
            >
              <span className="text-white font-black text-xl">2</span>
            </Button>
            <div className="flex-1">
              <h4 className="font-black text-black text-lg mb-1 uppercase">DIAL THE NUMBER</h4>
              <p className="text-gray-700">Enter "1" in the phone dialer to start your test call. This demo showcases WebRTC capabilities.</p>
            </div>
          </div>

          <div className="flex gap-4">
            <Button
              variant="header"
              className="w-12 h-12 bg-orange-600 hover:bg-orange-600 p-0 cursor-default flex-shrink-0"
            >
              <span className="text-white font-black text-xl">3</span>
            </Button>
            <div className="flex-1">
              <h4 className="font-black text-black text-lg mb-1 uppercase">30-SECOND DEMO</h4>
              <p className="text-gray-700">Your demo call will last 30 seconds. Optionally enable recording to download your call.</p>
            </div>
          </div>
        </div>

        {/* Features Grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8">
          <Card className="border-4 border-black bg-orange-50">
            <CardContent className="p-6 text-center">
              <div className="w-12 h-12 mx-auto mb-3 bg-orange-600 border-4 border-black flex items-center justify-center">
                <UilWifi className="h-6 w-6 text-white" />
              </div>
              <h4 className="font-black uppercase text-lg">LOW LATENCY</h4>
              <p className="text-sm text-gray-600 mt-2">Sub-150ms global latency</p>
            </CardContent>
          </Card>

          <Card className="border-4 border-black bg-blue-50">
            <CardContent className="p-6 text-center">
              <div className="w-12 h-12 mx-auto mb-3 bg-blue-600 border-4 border-black flex items-center justify-center">
                <UilCheckCircle className="h-6 w-6 text-white" />
              </div>
              <h4 className="font-black uppercase text-lg">HD QUALITY</h4>
              <p className="text-sm text-gray-600 mt-2">Crystal-clear audio</p>
            </CardContent>
          </Card>

          <Card className="border-4 border-black bg-green-50">
            <CardContent className="p-6 text-center">
              <div className="w-12 h-12 mx-auto mb-3 bg-green-600 border-4 border-black flex items-center justify-center">
                <UilClock className="h-6 w-6 text-white" />
              </div>
              <h4 className="font-black uppercase text-lg">INSTANT SETUP</h4>
              <p className="text-sm text-gray-600 mt-2">No downloads required</p>
            </CardContent>
          </Card>

          <Card className="border-4 border-black bg-purple-50">
            <CardContent className="p-6 text-center">
              <div className="w-12 h-12 mx-auto mb-3 bg-purple-600 border-4 border-black flex items-center justify-center">
                <UilPhone className="h-6 w-6 text-white" />
              </div>
              <h4 className="font-black uppercase text-lg">PSTN READY</h4>
              <p className="text-sm text-gray-600 mt-2">Connect to any phone</p>
            </CardContent>
          </Card>
        </div>

        {/* Info Box */}
        <Card className="bg-yellow-100 border-2 border-black mb-8">
          <CardContent className="p-4">
            <div className="flex items-start gap-3">
              <Button 
                size="sm" 
                variant="neutral" 
                className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
              >
                <UilInfoCircle className="h-4 w-4" />
              </Button>
              <div>
                <p className="text-sm font-bold">DEMO NOTE</p>
                <p className="text-sm text-gray-700 mt-1">
                  This is a simulated demo that showcases WebRTC capabilities. In production, you'll connect to real voice agents and phone numbers with unlimited call duration.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* CTA Button */}
        <Button
          variant="header"
          className="w-full h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-500"
          onClick={onContinue}
        >
          <span className="flex items-center justify-center gap-2">
            START DEMO CALL
            <UilArrowRight className="h-6 w-6" />
          </span>
        </Button>
      </CardContent>
    </Card>
  );
};


================================================
FILE: src/components/custom/rtc/rtc-phone-dialer-fixed.tsx
================================================
'use client';

import React, { useState, useEffect, useRef, useCallback } from 'react';
import * as Select from '@radix-ui/react-select';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { UilPhone, UilPhoneSlash, UilAngleDown, UilAngleUp, UilCheck, UilExclamationTriangle, UilCheckCircle, UilCircle, UilMicrophone, UilRobot, UilBrain, UilStar } from '@tooni/iconscout-unicons-react';
import { toast } from 'sonner';

declare global {
  interface Window {
    Tone: any;
  }
}

interface RTCPhoneDialerProps {
  onCallComplete: (duration: number, voiceType: string, wasRecorded: boolean) => void;
}

export const RTCPhoneDialer: React.FC<RTCPhoneDialerProps> = ({ onCallComplete }) => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [countryCode, setCountryCode] = useState('+1');
  const [callState, setCallState] = useState('idle'); // 'idle' | 'calling' | 'connected'
  const [callDuration, setCallDuration] = useState(0);
  const [isShaking, setIsShaking] = useState(false);
  const [voiceType, setVoiceType] = useState('normal');
  const [isRecording, setIsRecording] = useState(false);
  
  const synthRef = useRef<any>(null);
  const sequenceRef = useRef<any>(null);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const maxCallDuration = 300; // 5 minutes for real calls

  const countryCodes = [ 
    { value: '+1', label: '🇺🇸 +1' }, 
    { value: '+44', label: '🇬🇧 +44' }, 
    { value: '+91', label: '🇮🇳 +91' }, 
    { value: '+61', label: '🇦🇺 +61' }, 
    { value: '+81', label: '🇯🇵 +81' }, 
    { value: '+886', label: '🇹🇼 +886' },
    { value: '+49', label: '🇩🇪 +49' },
    { value: '+33', label: '🇫🇷 +33' },
    { value: '+34', label: '🇪🇸 +34' },
    { value: '+39', label: '🇮🇹 +39' }
  ];

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60).toString().padStart(2, '0');
    const secs = (seconds % 60).toString().padStart(2, '0');
    return `${mins}:${secs}`;
  };

  // Enhanced phone number validation
  const validatePhoneNumber = (number: string, code: string): boolean => {
    const cleanNumber = number.replace(/[^\d]/g, '');
    
    switch (code) {
      case '+1': // US/Canada
        return /^[2-9]\d{2}[2-9]\d{6}$/.test(cleanNumber) || /^\d{10}$/.test(cleanNumber);
      case '+44': // UK
        return /^\d{10,11}$/.test(cleanNumber);
      case '+91': // India
        return /^\d{10}$/.test(cleanNumber);
      case '+61': // Australia
        return /^\d{9}$/.test(cleanNumber);
      case '+81': // Japan
        return /^\d{10,11}$/.test(cleanNumber);
      case '+886': // Taiwan
        return /^\d{9,10}$/.test(cleanNumber);
      default:
        return cleanNumber.length >= 8 && cleanNumber.length <= 15;
    }
  };

  const handleHangUp = useCallback((autoEnded: boolean = false) => { 
    if (window.Tone) { 
      window.Tone.Transport.stop(); 
      sequenceRef.current.stop(0); 
    } 
    
    const duration = formatTime(callDuration);
    const message = autoEnded ? 'Call Time Limit Reached' : 'Call Ended';
    toast.info(message, {
      description: `Duration: ${duration}`,
      icon: (
        <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
          <UilPhoneSlash className="h-5 w-5" />
        </Button>
      )
    });
    
    setCallState('idle'); 
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    
    onCallComplete(callDuration, voiceType, isRecording);
    
    setCallDuration(0);
    setIsRecording(false);
  }, [callDuration, voiceType, isRecording, onCallComplete]);

  useEffect(() => {
    toast.info('Phone Dialer Ready', {
      description: 'Enter a valid phone number to make a call',
      icon: (
        <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
          <UilPhone className="h-5 w-5" />
        </Button>
      )
    });
    
    if (window.Tone) {
      synthRef.current = new window.Tone.Synth().toDestination();
      sequenceRef.current = new window.Tone.Sequence((time: any, note: any) => synthRef.current.triggerAttackRelease(note, '8n', time), ['G4', 'C5'], '2n');
      window.Tone.Transport.loop = true;
      window.Tone.Transport.loopEnd = '1m';
    }
  }, []);

  useEffect(() => {
    if (callState === 'calling' && callDuration >= maxCallDuration) {
      handleHangUp(true);
    }
  }, [callDuration, callState, handleHangUp]);

  const handleButtonClick = (value: string) => { 
    if (phoneNumber.length < 15) setPhoneNumber(prev => prev + value); 
  };
  
  const handleBackspace = () => { 
    setPhoneNumber(prev => prev.slice(0, -1)); 
  };
  
  const handleClear = () => { 
    if (callState === 'calling') handleHangUp(); 
    setPhoneNumber(''); 
  };
  
  const handleCall = async () => { 
    const fullNumber = phoneNumber.replace(/[^\d]/g, '');
    
    if (!fullNumber.trim()) {
      setIsShaking(true);
      setTimeout(() => setIsShaking(false), 500);
      toast.error('Invalid Number', {
        description: 'Please enter a phone number',
        icon: (
          <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
            <UilExclamationTriangle className="h-5 w-5" />
          </Button>
        )
      });
      return;
    }

    // Validate phone number format
    if (!validatePhoneNumber(phoneNumber, countryCode)) {
      setIsShaking(true);
      setTimeout(() => setIsShaking(false), 500);
      toast.error('Invalid Number', {
        description: `Please enter a valid ${countryCode} phone number`,
        icon: (
          <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
            <UilExclamationTriangle className="h-5 w-5" />
          </Button>
        )
      });
      return;
    }

    if (callState === 'idle') { 
      const formattedNumber = `${countryCode} ${phoneNumber}`;
      toast.info('Dialing...', {
        description: `Calling ${formattedNumber}`,
        icon: (
          <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
            <UilPhone className="h-5 w-5 animate-pulse" />
          </Button>
        )
      });

      if (window.Tone) {
        await window.Tone.start(); 
        window.Tone.Transport.start(); 
        sequenceRef.current.start(0); 
      }
      
      setCallState('calling'); 
      
      setTimeout(() => {
        toast.success('Call Connected', {
          description: 'Voice call is now active',
          icon: (
            <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
              <UilCheckCircle className="h-5 w-5" />
            </Button>
          )
        });
      }, 2000);

      timerRef.current = setInterval(() => {
        setCallDuration(prev => prev + 1);
      }, 1000);
    }
  };

  const dialPadKeys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '0', '#'];

  const handleRecordToggle = () => {
    if (callState === 'idle') {
      setIsRecording(!isRecording);
      toast.info(isRecording ? 'Recording disabled' : 'Recording enabled', {
        description: isRecording ? 'Call will not be recorded' : 'Your call will be recorded',
        icon: (
          <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
            <UilCircle className={`h-5 w-5 ${isRecording ? 'text-red-600 animate-pulse' : 'text-gray-600'}`} />
          </Button>
        )
      });
    }
  };

  return (
    <>
      <style>{`
        @keyframes shake {
          10%, 90% { transform: translate3d(-1px, 0, 0); }
          20%, 80% { transform: translate3d(2px, 0, 0); }
          30%, 50%, 70% { transform: translate3d(-4px, 0, 0); }
          40%, 60% { transform: translate3d(4px, 0, 0); }
        }
        .animate-shake {
          animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
        }
      `}</style>
      
      <Card className="max-w-md mx-auto">
        <CardContent className="p-6">
          
          {/* Phone Display */}
          <div className="mb-6">
            <Card className="bg-gray-50 border-2 border-black">
              <CardContent className="p-4">
                {/* Country Code and Number Input */}
                <div className={`flex border-2 border-black bg-white ${isShaking ? 'animate-shake' : ''}`}>
                  {/* Country Code Selector */}
                  {callState === 'idle' && (
                    <div className="border-r-2 border-black">
                      <Select.Root value={countryCode} onValueChange={setCountryCode}>
                        <Select.Trigger className="h-12 flex items-center justify-between px-3 bg-gray-100 hover:bg-gray-200 transition-colors font-semibold min-w-[80px]">
                          <Select.Value />
                          <Select.Icon><UilAngleDown className="h-4 w-4 ml-1" /></Select.Icon>
                        </Select.Trigger>
                        <Select.Portal>
                          <Select.Content position="popper" sideOffset={5} className="bg-white border-2 border-black shadow-lg z-50">
                            <Select.ScrollUpButton className="flex items-center justify-center h-6 cursor-default">
                              <UilAngleUp className="h-3 w-3" />
                            </Select.ScrollUpButton>
                            <Select.Viewport className="p-1">
                              {countryCodes.map(c => (
                                <Select.Item key={c.value} value={c.value} className="p-2 relative flex items-center focus:outline-none data-[highlighted]:bg-gray-100 cursor-pointer">
                                  <Select.ItemText>{c.label}</Select.ItemText>
                                  <Select.ItemIndicator className="absolute right-2 inline-flex items-center">
                                    <UilCheck className="h-3 w-3" />
                                  </Select.ItemIndicator>
                                </Select.Item>
                              ))}
                            </Select.Viewport>
                            <Select.ScrollDownButton className="flex items-center justify-center h-6 cursor-default">
                              <UilAngleDown className="h-3 w-3" />
                            </Select.ScrollDownButton>
                          </Select.Content>
                        </Select.Portal>
                      </Select.Root>
                    </div>
                  )}
                  
                  {/* Phone Number Input */}
                  <div className="flex-1 relative">
                    <input
                      type="tel"
                      value={callState === 'calling' ? formatTime(callDuration) : phoneNumber}
                      onChange={(e) => {
                        if (callState === 'idle') {
                          const value = e.target.value.replace(/[^\d+\-\s()]/g, '');
                          if (value.length <= 15) setPhoneNumber(value);
                        }
                      }}
                      placeholder="Enter phone number"
                      readOnly={callState === 'calling'}
                      className={`w-full h-12 px-3 text-2xl font-mono text-center bg-transparent outline-none ${callState === 'calling' ? 'text-green-600 font-bold' : 'text-black'}`}
                      aria-label="Phone number input"
                    />
                    {callState === 'idle' && phoneNumber.length > 0 && (
                      <Button 
                        variant="ghost"
                        size="sm"
                        onClick={handleBackspace} 
                        className="absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0"
                      >
                        ←
                      </Button>
                    )}
                  </div>
                </div>

                {/* Recording Indicator */}
                {isRecording && (
                  <div className="mt-3 flex items-center justify-center gap-2 p-2 bg-red-50 border border-red-200">
                    <UilCircle className="h-4 w-4 animate-pulse text-red-500" />
                    <span className="text-sm font-semibold text-red-600">Recording Enabled</span>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
          
          {/* Call Progress */}
          {callState === 'calling' && (
            <div className="mb-6">
              <div className="bg-gray-200 rounded-full h-2 border border-black overflow-hidden">
                <div 
                  className="bg-green-500 h-full transition-all duration-1000 ease-linear"
                  style={{ width: `${(callDuration / maxCallDuration) * 100}%` }}
                />
              </div>
              <p className="text-center text-sm mt-2 font-semibold">
                {maxCallDuration - callDuration}s remaining
              </p>
            </div>
          )}
          
          {/* Dial Pad */}
          <div className="grid grid-cols-3 gap-3 mb-6">
            {dialPadKeys.map((key) => (
              <Button
                key={key}
                variant="outline"
                onClick={() => handleButtonClick(key)}
                className="h-12 text-xl font-bold bg-white hover:bg-gray-50 border-2 border-black"
                disabled={callState === 'calling'}
              >
                {key}
              </Button>
            ))}
          </div>
          
          {/* Action Buttons */}
          <div className="grid grid-cols-3 gap-3 mb-6">
            <Button
              variant="outline"
              onClick={handleRecordToggle}
              className={`h-12 border-2 border-black ${isRecording ? 'bg-red-100 hover:bg-red-200' : 'bg-white hover:bg-gray-50'}`}
              disabled={callState === 'calling'}
            >
              <UilCircle className={`h-5 w-5 ${isRecording ? 'text-red-600 animate-pulse' : 'text-gray-600'}`} />
            </Button>
            
            {callState === 'idle' ? (
              <Button
                variant="outline"
                onClick={handleCall}
                className="h-12 bg-green-100 hover:bg-green-200 border-2 border-black font-bold"
              >
                <UilPhone className="h-5 w-5 mr-2 text-green-600" />
                CALL
              </Button>
            ) : (
              <Button
                variant="outline"
                onClick={() => handleHangUp(false)}
                className="h-12 bg-red-100 hover:bg-red-200 border-2 border-black font-bold"
              >
                <UilPhoneSlash className="h-5 w-5 mr-2 text-red-600" />
                END
              </Button>
            )}
            
            <Button
              variant="outline"
              onClick={handleClear}
              className="h-12 bg-white hover:bg-gray-50 border-2 border-black font-bold"
            >
              CLEAR
            </Button>
          </div>

          {/* Voice Selection */}
          <div className="space-y-3">
            <h3 className="text-sm font-bold uppercase mb-3">Voice Type</h3>
            <div className="grid grid-cols-2 gap-2">
              {[
                { id: 'normal', label: 'Normal', icon: UilMicrophone },
                { id: 'high-pitch', label: 'High Pitch', icon: UilStar },
                { id: 'alien', label: 'Alien', icon: UilRobot },
                { id: 'overlord', label: 'Overlord', icon: UilBrain }
              ].map(({ id, label, icon: Icon }) => (
                <Button
                  key={id}
                  variant="outline"
                  onClick={() => setVoiceType(id)}
                  className={`h-10 text-sm border-2 border-black ${
                    voiceType === id ? 'bg-gray-200' : 'bg-white hover:bg-gray-50'
                  }`}
                >
                  <Icon className="h-4 w-4 mr-2" />
                  {label}
                </Button>
              ))}
            </div>
          </div>

        </CardContent>
      </Card>
    </>
  );
};



================================================
FILE: src/components/custom/rtc/rtc-phone-dialer-realistic.tsx
================================================
'use client';

import React, { useState, useEffect, useRef, useCallback } from 'react';
import * as Select from '@radix-ui/react-select';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { UilPhone, UilPhoneSlash, UilAngleDown, UilAngleUp, UilCheck, UilExclamationTriangle, UilCheckCircle, UilCircle, UilMicrophone, UilRobot, UilBrain, UilStar } from '@tooni/iconscout-unicons-react';
import { toast } from 'sonner';

declare global {
  interface Window {
    Tone: any;
  }
}

interface RTCPhoneDialerProps {
  onCallComplete: (duration: number, voiceType: string, wasRecorded: boolean) => void;
}

export const RTCPhoneDialer: React.FC<RTCPhoneDialerProps> = ({ onCallComplete }) => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [countryCode, setCountryCode] = useState('+1');
  const [callState, setCallState] = useState<'idle' | 'dialing' | 'connected' | 'failed'>('idle');
  const [callDuration, setCallDuration] = useState(0);
  const [isShaking, setIsShaking] = useState(false);
  const [voiceType, setVoiceType] = useState('normal');
  const [isRecording, setIsRecording] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  
  const synthRef = useRef<any>(null);
  const sequenceRef = useRef<any>(null);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const abortControllerRef = useRef<AbortController | null>(null);

  const countryCodes = [ 
    { value: '+1', label: '🇺🇸 +1' }, 
    { value: '+44', label: '🇬🇧 +44' }, 
    { value: '+91', label: '🇮🇳 +91' }, 
    { value: '+61', label: '🇦🇺 +61' }, 
    { value: '+81', label: '🇯🇵 +81' }, 
    { value: '+886', label: '🇹🇼 +886' },
    { value: '+49', label: '🇩🇪 +49' },
    { value: '+33', label: '🇫🇷 +33' },
    { value: '+34', label: '🇪🇸 +34' },
    { value: '+39', label: '🇮🇹 +39' }
  ];

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60).toString().padStart(2, '0');
    const secs = (seconds % 60).toString().padStart(2, '0');
    return `${mins}:${secs}`;
  };

  // Enhanced phone number validation
  const validatePhoneNumber = (number: string, code: string): boolean => {
    const cleanNumber = number.replace(/[^\d]/g, '');
    
    switch (code) {
      case '+1': // US/Canada
        return /^[2-9]\d{2}[2-9]\d{6}$/.test(cleanNumber) || /^\d{10}$/.test(cleanNumber);
      case '+44': // UK
        return /^\d{10,11}$/.test(cleanNumber);
      case '+91': // India
        return /^\d{10}$/.test(cleanNumber);
      case '+61': // Australia
        return /^\d{9}$/.test(cleanNumber);
      case '+81': // Japan
        return /^\d{10,11}$/.test(cleanNumber);
      case '+886': // Taiwan
        return /^\d{9,10}$/.test(cleanNumber);
      default:
        return cleanNumber.length >= 8 && cleanNumber.length <= 15;
    }
  };

  // Realistic call simulation with failures
  const simulateCall = async (phoneNumber: string): Promise<{success: boolean, duration?: number, error?: string}> => {
    return new Promise((resolve) => {
      setTimeout(() => {
        // Simulate various failure scenarios
        const random = Math.random();
        
        if (random < 0.3) {
          resolve({success: false, error: 'Network timeout - unable to reach destination'});
        } else if (random < 0.5) {
          resolve({success: false, error: 'Invalid number format or unreachable'});
        } else if (random < 0.7) {
          resolve({success: false, error: 'Service temporarily unavailable'});
        } else {
          // Success case
          const duration = Math.floor(Math.random() * 180) + 30; // 30-210 seconds
          resolve({success: true, duration});
        }
      }, 2000 + Math.random() * 3000); // 2-5 second delay
    });
  };

  const handleHangUp = useCallback(() => { 
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }
    
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
    }
    
    setCallState('idle');
    setCallDuration(0);
    setErrorMessage(null);
  }, []);

  const handleCall = async () => { 
    const fullNumber = phoneNumber.replace(/[^\d]/g, '');
    
    if (!fullNumber.trim()) {
      setIsShaking(true);
      setTimeout(() => setIsShaking(false), 500);
      toast.error('Invalid Number', {
        description: 'Please enter a phone number',
        style: { background: '#fef2f2', color: '#dc2626', border: '1px solid #fca5a5' },
        icon: <UilExclamationTriangle className="h-5 w-5 text-red-500" />
      });
      return;
    }

    if (!validatePhoneNumber(phoneNumber, countryCode)) {
      setIsShaking(true);
      setTimeout(() => setIsShaking(false), 500);
      toast.error('Invalid Number', {
        description: `Please enter a valid ${countryCode} phone number`,
        style: { background: '#fef2f2', color: '#dc2626', border: '1px solid #fca5a5' },
        icon: <UilExclamationTriangle className="h-5 w-5 text-red-500" />
      });
      return;
    }

    // Start dialing
    setCallState('dialing');
    setErrorMessage(null);
    
    // Create abort controller for cancellation
    abortControllerRef.current = new AbortController();

    toast.info('Dialing...', {
      description: `Calling ${countryCode} ${phoneNumber}`,
      style: { background: '#eff6ff', color: '#2563eb', border: '1px solid #93c5fd' },
      icon: <UilPhone className="h-5 w-5 text-blue-500" />
    });

    try {
      const result = await simulateCall(`${countryCode}${phoneNumber}`);
      
      if (result.success && result.duration) {
        setCallState('connected');
        toast.success('Call Connected', {
          description: `Connected to ${countryCode} ${phoneNumber}`,
          style: { background: '#f0fdf4', color: '#16a34a', border: '1px solid #86efac' },
          icon: <UilCheckCircle className="h-5 w-5 text-green-500" />
        });

        // Start call duration timer
        timerRef.current = setInterval(() => {
          setCallDuration(prev => prev + 1);
        }, 1000);

        // Auto-end after simulated duration
        setTimeout(() => {
          handleHangUp();
          onCallComplete(result.duration!, voiceType, isRecording);
        }, result.duration * 1000);

      } else {
        setCallState('failed');
        setErrorMessage(result.error || 'Call failed');
        toast.error('Call Failed', {
          description: result.error || 'Unable to connect',
          style: { background: '#fef2f2', color: '#dc2626', border: '1px solid #fca5a5' },
          icon: <UilExclamationTriangle className="h-5 w-5 text-red-500" />
        });
      }
      
    } catch (error) {
      setCallState('failed');
      setErrorMessage('Connection error');
      toast.error('Call Error', {
        description: 'Failed to establish connection',
        style: { background: '#fef2f2', color: '#dc2626', border: '1px solid #fca5a5' },
        icon: <UilExclamationTriangle className="h-5 w-5 text-red-500" />
      });
    }
  };

  const handleClear = () => { 
    if (callState === 'dialing' || callState === 'connected') {
      handleHangUp();
    }
    setPhoneNumber(''); 
    setErrorMessage(null);
  };

  const dialPadKeys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '0', '#'];

  const getStatusColor = () => {
    switch (callState) {
      case 'dialing': return 'text-blue-600';
      case 'connected': return 'text-green-600';
      case 'failed': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  const getStatusText = () => {
    switch (callState) {
      case 'dialing': return 'Dialing...';
      case 'connected': return `Connected (${formatTime(callDuration)})`;
      case 'failed': return 'Call Failed';
      default: return 'Ready';
    }
  };

  return (
    <>
      <style>{`
        @keyframes shake {
          10%, 90% { transform: translate3d(-1px, 0, 0); }
          20%, 80% { transform: translate3d(2px, 0, 0); }
          30%, 50%, 70% { transform: translate3d(-4px, 0, 0); }
          40%, 60% { transform: translate3d(4px, 0, 0); }
        }
        .animate-shake {
          animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
        }
      `}</style>
      
      <Card className="max-w-md mx-auto bg-white border-2 border-black shadow-lg">
        <CardContent className="p-6">
          
          {/* Status Display */}
          <div className="mb-4 text-center">
            <div className={`text-lg font-bold ${getStatusColor()}`}>
              {getStatusText()}
            </div>
            {errorMessage && (
              <div className="text-sm text-red-600 mt-1">
                {errorMessage}
              </div>
            )}
          </div>

          {/* Phone Display */}
          <div className="mb-6">
            <Card className="bg-gray-50 border-2 border-black">
              <CardContent className="p-4">
                <div className={`flex border-2 border-black bg-white ${isShaking ? 'animate-shake' : ''}`}>
                  {/* Country Code Selector */}
                  <div className="border-r-2 border-black">
                    <Select.Root value={countryCode} onValueChange={setCountryCode}>
                      <Select.Trigger className="h-12 flex items-center justify-between px-3 bg-gray-100 hover:bg-gray-200 transition-colors font-semibold min-w-[80px]">
                        <Select.Value />
                        <Select.Icon><UilAngleDown className="h-4 w-4 ml-1" /></Select.Icon>
                      </Select.Trigger>
                      <Select.Portal>
                        <Select.Content position="popper" sideOffset={5} className="bg-white border-2 border-black shadow-lg z-50">
                          <Select.Viewport className="p-1">
                            {countryCodes.map(c => (
                              <Select.Item key={c.value} value={c.value} className="p-2 relative flex items-center focus:outline-none data-[highlighted]:bg-gray-100 cursor-pointer">
                                <Select.ItemText>{c.label}</Select.ItemText>
                              </Select.Item>
                            ))}
                          </Select.Viewport>
                        </Select.Content>
                      </Select.Portal>
                    </Select.Root>
                  </div>
                  
                  {/* Phone Number Input */}
                  <div className="flex-1 relative">
                    <input
                      type="tel"
                      value={callState === 'connected' ? formatTime(callDuration) : phoneNumber}
                      onChange={(e) => {
                        if (callState === 'idle') {
                          const value = e.target.value.replace(/[^\d+\-\s()]/g, '');
                          if (value.length <= 15) setPhoneNumber(value);
                        }
                      }}
                      placeholder="Enter phone number"
                      readOnly={callState !== 'idle'}
                      className={`w-full h-12 px-3 text-2xl font-mono text-center bg-transparent outline-none ${
                        callState === 'connected' ? 'text-green-600 font-bold' : 
                        callState === 'failed' ? 'text-red-600' : 
                        'text-black'
                      }`}
                      aria-label="Phone number input"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
          
          {/* Dial Pad */}
          {callState === 'idle' && (
            <div className="grid grid-cols-3 gap-3 mb-6">
              {['1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '0', '#'].map((key) => (
                <Button
                  key={key}
                  variant="outline"
                  onClick={() => setPhoneNumber(prev => prev + key)}
                  className="h-12 text-xl font-bold bg-white hover:bg-gray-50 border-2 border-black"
                >
                  {key}
                </Button>
              ))}
            </div>
          )}
          
          {/* Action Buttons */}
          <div className="grid grid-cols-3 gap-3 mb-6">
            <Button
              variant="outline"
              onClick={() => setIsRecording(!isRecording)}
              className={`h-12 border-2 border-black ${isRecording ? 'bg-red-100 hover:bg-red-200' : 'bg-white hover:bg-gray-50'}`}
              disabled={callState !== 'idle'}
            >
              <UilCircle className={`h-5 w-5 ${isRecording ? 'text-red-600 animate-pulse' : 'text-gray-600'}`} />
            </Button>
            
            {callState === 'idle' ? (
              <Button
                variant="outline"
                onClick={handleCall}
                className="h-12 bg-blue-100 hover:bg-blue-200 border-2 border-black font-bold"
              >
                <UilPhone className="h-5 w-5 mr-2 text-blue-600" />
                CALL
              </Button>
            ) : (
              <Button
                variant="outline"
                onClick={handleHangUp}
                className="h-12 bg-red-100 hover:bg-red-200 border-2 border-black font-bold"
              >
                <UilPhoneSlash className="h-5 w-5 mr-2 text-red-600" />
                END
              </Button>
            )}
            
            <Button
              variant="outline"
              onClick={() => {
                setPhoneNumber('');
                setErrorMessage(null);
                if (callState !== 'idle') handleHangUp();
              }}
              className="h-12 bg-white hover:bg-gray-50 border-2 border-black font-bold"
            >
              CLEAR
            </Button>
          </div>

          {/* Voice Selection */}
          {callState === 'idle' && (
            <div className="space-y-3">
              <h3 className="text-sm font-bold uppercase mb-3">Voice Type</h3>
              <div className="grid grid-cols-2 gap-2">
                {[
                  { id: 'normal', label: 'Normal', icon: UilMicrophone },
                  { id: 'high-pitch', label: 'High Pitch', icon: UilStar },
                  { id: 'alien', label: 'Alien', icon: UilRobot },
                  { id: 'overlord', label: 'Overlord', icon: UilBrain }
                ].map(({ id, label, icon: Icon }) => (
                  <Button
                    key={id}
                    variant="outline"
                    onClick={() => setVoiceType(id)}
                    className={`h-10 text-sm border-2 border-black ${
                      voiceType === id ? 'bg-gray-200' : 'bg-white hover:bg-gray-50'
                    }`}
                  >
                    <Icon className="h-4 w-4 mr-2" />
                    {label}
                  </Button>
                ))}
              </div>
            </div>
          )}

        </CardContent>
      </Card>
    </>
  );
};



================================================
FILE: src/components/custom/rtc/rtc-phone-dialer.tsx
================================================
'use client';

import React, { useState, useEffect, useRef, useCallback } from 'react';
import * as Select from '@radix-ui/react-select';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { UilPhone, UilPhoneSlash, UilAngleDown, UilAngleUp, UilCheck, UilExclamationTriangle, UilCheckCircle, UilCircle, UilMicrophone, UilRobot, UilBrain, UilStar } from '@tooni/iconscout-unicons-react';
import { toast } from 'sonner';

declare global {
  interface Window {
    Tone: any;
  }
}

interface RTCPhoneDialerProps {
  onCallComplete: (duration: number, voiceType: string, wasRecorded: boolean) => void;
}

export const RTCPhoneDialer: React.FC<RTCPhoneDialerProps> = ({ onCallComplete }) => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [countryCode, setCountryCode] = useState('+1');
  const [callState, setCallState] = useState('idle'); // 'idle' | 'calling'
  const [callDuration, setCallDuration] = useState(0);
  const [isShaking, setIsShaking] = useState(false);
  const [voiceType, setVoiceType] = useState('normal');
  const [isRecording, setIsRecording] = useState(false);
  
  const synthRef = useRef<any>(null);
  const sequenceRef = useRef<any>(null);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const maxCallDuration = 30; // 30-second limit

  const countryCodes = [ 
    { value: '+1', label: '🇺🇸 +1' }, 
    { value: '+44', label: '🇬🇧 +44' }, 
    { value: '+91', label: '🇮🇳 +91' }, 
    { value: '+61', label: '🇦🇺 +61' }, 
    { value: '+81', label: '🇯🇵 +81' }, 
    { value: '+886', label: '🇹🇼 +886' }
  ];

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60).toString().padStart(2, '0');
    const secs = (seconds % 60).toString().padStart(2, '0');
    return `${mins}:${secs}`;
  };

  const handleHangUp = useCallback((autoEnded: boolean = false) => { 
    if (window.Tone) { 
      window.Tone.Transport.stop(); 
      sequenceRef.current.stop(0); 
    } 
    
    const duration = formatTime(callDuration);
    const message = autoEnded ? 'Demo Call Time Limit Reached' : 'Call Ended';
    toast.info(message, {
      description: `Duration: ${duration}`,
      icon: (
        <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
          <UilPhoneSlash className="h-5 w-5" />
        </Button>
      )
    });
    
    setCallState('idle'); 
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    
    onCallComplete(callDuration, voiceType, isRecording);
    
    setCallDuration(0);
    setIsRecording(false);
  }, [callDuration, voiceType, isRecording, onCallComplete]);

  useEffect(() => {
    toast.info('Phone Dialer Ready', {
      description: 'Enter "1" to make a test call',
      icon: (
        <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
          <UilPhone className="h-5 w-5" />
        </Button>
      )
    });
    
    if (window.Tone) {
      synthRef.current = new window.Tone.Synth().toDestination();
      sequenceRef.current = new window.Tone.Sequence((time: any, note: any) => synthRef.current.triggerAttackRelease(note, '8n', time), ['G4', 'C5'], '2n');
      window.Tone.Transport.loop = true;
      window.Tone.Transport.loopEnd = '1m';
    }
  }, []);

  useEffect(() => {
    if (callState === 'calling' && callDuration >= maxCallDuration) {
      handleHangUp(true);
    }
  }, [callDuration, callState, handleHangUp]);

  const handleButtonClick = (value: string) => { 
    if (phoneNumber.length < 15) setPhoneNumber(prev => prev + value); 
  };
  
  const handleBackspace = () => { 
    setPhoneNumber(prev => prev.slice(0, -1)); 
  };
  
  const handleClear = () => { 
    if (callState === 'calling') handleHangUp(); 
    setPhoneNumber(''); 
  };
  
  const handleCall = async () => { 
    if (!phoneNumber) {
      setIsShaking(true);
      setTimeout(() => setIsShaking(false), 500);
      toast.error('Invalid Number', {
        description: 'Please enter a phone number',
        icon: (
          <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
            <UilExclamationTriangle className="h-5 w-5" />
          </Button>
        )
      });
      return;
    }

    if (phoneNumber !== '1') {
      setIsShaking(true);
      setTimeout(() => setIsShaking(false), 500);
      toast.error('Invalid Number', {
        description: 'This demo only accepts "1" as a valid number',
        icon: (
          <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
            <UilExclamationTriangle className="h-5 w-5" />
          </Button>
        )
      });
      return;
    }

    if (callState === 'idle') { 
      toast.info('Dialing...', {
        description: `Calling ${countryCode} ${phoneNumber}`,
        icon: (
          <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
            <UilPhone className="h-5 w-5 animate-pulse" />
          </Button>
        )
      });

      if (window.Tone) {
        await window.Tone.start(); 
        window.Tone.Transport.start(); 
        sequenceRef.current.start(0); 
      }
      
      setCallState('calling'); 
      
      setTimeout(() => {
        toast.success('Call Connected', {
          description: 'Voice call is now active (30-second demo)',
          icon: (
            <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
              <UilCheckCircle className="h-5 w-5" />
            </Button>
          )
        });
      }, 2000);

      timerRef.current = setInterval(() => {
        setCallDuration(prev => prev + 1);
      }, 1000);
    }
  };

  const dialPadKeys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '0', '#'];

  const handleRecordToggle = () => {
    if (callState === 'idle') {
      setIsRecording(!isRecording);
      toast.info(isRecording ? 'Recording disabled' : 'Recording enabled', {
        description: isRecording ? 'Call will not be recorded' : 'Your call will be recorded',
        icon: (
          <Button size="icon" variant="header" className="w-10 h-10 bg-white text-black">
            <UilCircle className="h-5 w-5" />
          </Button>
        )
      });
    }
  };

  return (
    <>
      <style>{`
        @keyframes shake {
          10%, 90% { transform: translate3d(-1px, 0, 0); }
          20%, 80% { transform: translate3d(2px, 0, 0); }
          30%, 50%, 70% { transform: translate3d(-4px, 0, 0); }
          40%, 60% { transform: translate3d(4px, 0, 0); }
        }
        .animate-shake {
          animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
        }
      `}</style>
      
      <Card className="max-w-md mx-auto">
        <CardContent className="p-6">
          
          {/* Phone Display */}
          <div className="mb-6">
            <Card className="bg-gray-50 border-2 border-black">
              <CardContent className="p-4">
                {/* Country Code and Number Input */}
                <div className={`flex border-2 border-black bg-white ${isShaking ? 'animate-shake' : ''}`}>
                  {/* Country Code Selector */}
                  {callState === 'idle' && (
                    <div className="border-r-2 border-black">
                      <Select.Root value={countryCode} onValueChange={setCountryCode}>
                        <Select.Trigger className="h-12 flex items-center justify-between px-3 bg-gray-100 hover:bg-gray-200 transition-colors font-semibold min-w-[80px]">
                          <Select.Value />
                          <Select.Icon><UilAngleDown className="h-4 w-4 ml-1" /></Select.Icon>
                        </Select.Trigger>
                        <Select.Portal>
                          <Select.Content position="popper" sideOffset={5} className="bg-white border-2 border-black shadow-lg z-50">
                            <Select.ScrollUpButton className="flex items-center justify-center h-6 cursor-default">
                              <UilAngleUp className="h-3 w-3" />
                            </Select.ScrollUpButton>
                            <Select.Viewport className="p-1">
                              {countryCodes.map(c => (
                                <Select.Item key={c.value} value={c.value} className="p-2 relative flex items-center focus:outline-none data-[highlighted]:bg-gray-100 cursor-pointer">
                                  <Select.ItemText>{c.label}</Select.ItemText>
                                  <Select.ItemIndicator className="absolute right-2 inline-flex items-center">
                                    <UilCheck className="h-3 w-3" />
                                  </Select.ItemIndicator>
                                </Select.Item>
                              ))}
                            </Select.Viewport>
                            <Select.ScrollDownButton className="flex items-center justify-center h-6 cursor-default">
                              <UilAngleDown className="h-3 w-3" />
                            </Select.ScrollDownButton>
                          </Select.Content>
                        </Select.Portal>
                      </Select.Root>
                    </div>
                  )}
                  
                  {/* Phone Number Input */}
                  <div className="flex-1 relative">
                    <input
                      type="tel"
                      value={callState === 'calling' ? formatTime(callDuration) : phoneNumber}
                      onChange={(e) => {
                        if (callState === 'idle') {
                          const value = e.target.value.replace(/[^\d+\-\s()]/g, '');
                          if (value.length <= 15) setPhoneNumber(value);
                        }
                      }}
                      placeholder="Enter 1"
                      readOnly={callState === 'calling'}
                      className={`w-full h-12 px-3 text-2xl font-mono text-center bg-transparent outline-none ${callState === 'calling' ? 'text-green-600 font-bold' : 'text-black'}`}
                      aria-label="Phone number input"
                    />
                    {callState === 'idle' && phoneNumber.length > 0 && (
                      <Button 
                        variant="ghost"
                        size="sm"
                        onClick={handleBackspace} 
                        className="absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0"
                      >
                        ←
                      </Button>
                    )}
                  </div>
                </div>

                {/* Recording Indicator */}
                {isRecording && (
                  <div className="mt-3 flex items-center justify-center gap-2 p-2 bg-red-50 border border-red-200">
                    <UilCircle className="h-4 w-4 animate-pulse text-red-500" />
                    <span className="text-sm font-semibold text-red-600">Recording Enabled</span>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
          
          {/* Call Progress */}
          {callState === 'calling' && (
            <div className="mb-6">
              <div className="bg-gray-200 rounded-full h-2 border border-black overflow-hidden">
                <div 
                  className="bg-green-500 h-full transition-all duration-1000 ease-linear"
                  style={{ width: `${(callDuration / maxCallDuration) * 100}%` }}
                />
              </div>
              <p className="text-center text-sm mt-2 font-semibold">
                {maxCallDuration - callDuration}s remaining
              </p>
            </div>
          )}
          
          {/* Dial Pad */}
          <div className="grid grid-cols-3 gap-3 mb-6">
            {dialPadKeys.map((key) => (
              <Button
                key={key}
                variant="outline"
                onClick={() => handleButtonClick(key)}
                className="h-12 text-xl font-bold bg-white hover:bg-gray-50 border-2 border-black"
                disabled={callState === 'calling'}
              >
                {key}
              </Button>
            ))}
          </div>
          
          {/* Action Buttons */}
          <div className="grid grid-cols-3 gap-3 mb-6">
            <Button
              variant="outline"
              onClick={handleRecordToggle}
              className={`h-12 border-2 border-black ${isRecording ? 'bg-red-100 hover:bg-red-200' : 'bg-white hover:bg-gray-50'}`}
              disabled={callState === 'calling'}
            >
              <UilCircle className={`h-5 w-5 ${isRecording ? 'text-red-600 animate-pulse' : 'text-gray-600'}`} />
            </Button>
            
            {callState === 'idle' ? (
              <Button
                variant="outline"
                onClick={handleCall}
                className="h-12 bg-green-100 hover:bg-green-200 border-2 border-black font-bold"
              >
                <UilPhone className="h-5 w-5 mr-2 text-green-600" />
                CALL
              </Button>
            ) : (
              <Button
                variant="outline"
                onClick={() => handleHangUp(false)}
                className="h-12 bg-red-100 hover:bg-red-200 border-2 border-black font-bold"
              >
                <UilPhoneSlash className="h-5 w-5 mr-2 text-red-600" />
                END
              </Button>
            )}
            
            <Button
              variant="outline"
              onClick={handleClear}
              className="h-12 bg-white hover:bg-gray-50 border-2 border-black font-bold"
            >
              CLEAR
            </Button>
          </div>

          {/* Voice Selection */}
          <div className="space-y-3">
            <h3 className="text-sm font-bold uppercase mb-3">Voice Type</h3>
            <div className="grid grid-cols-2 gap-2">
              {[
                { id: 'normal', label: 'Normal', icon: UilMicrophone },
                { id: 'high-pitch', label: 'High Pitch', icon: UilStar },
                { id: 'alien', label: 'Alien', icon: UilRobot },
                { id: 'overlord', label: 'Overlord', icon: UilBrain }
              ].map(({ id, label, icon: Icon }) => (
                <Button
                  key={id}
                  variant="outline"
                  onClick={() => setVoiceType(id)}
                  className={`h-10 text-sm border-2 border-black ${
                    voiceType === id ? 'bg-gray-200' : 'bg-white hover:bg-gray-50'
                  }`}
                >
                  <Icon className="h-4 w-4 mr-2" />
                  {label}
                </Button>
              ))}
            </div>
          </div>

        </CardContent>
      </Card>
    </>
  );
};


================================================
FILE: src/components/onboarding/blog/BlogCard.tsx
================================================
import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  UilClock,
  UilUser,
  UilArrowRight
} from '@tooni/iconscout-unicons-react';

interface BlogCardProps {
  title: string;
  excerpt: string;
  author: string;
  readTime: string;
  category: string;
  date: string;
  selected?: boolean;
  onClick?: () => void;
}

export function BlogCard({
  title,
  excerpt,
  author,
  readTime,
  category,
  date,
  selected = false,
  onClick
}: BlogCardProps) {
  return (
    <Card 
      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
        selected ? 'bg-yellow-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
      }`}
      onClick={onClick}
    >
      <CardContent className="p-6">
        <h4 className="font-black uppercase text-lg mb-2">{title}</h4>
        <p className="text-sm text-gray-600 mb-4">{excerpt}</p>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3 text-xs">
            <span className="font-bold">{author}</span>
            <span className="text-gray-500">•</span>
            <span>{readTime}</span>
          </div>
          <Button 
            size="sm" 
            variant="neutral" 
            className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)]"
          >
            <UilArrowRight className="h-4 w-4" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/bulk/ContentSelectionStep.tsx
================================================
'use client';

import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Checkbox } from '@/components/ui/checkbox';
import { UilSpinner, UilArrowRight, UilArrowLeft, UilCheckCircle, UilInfoCircle, UilPlay, UilVideo, UilClock, UilEye, UilThumbsUp, UilCheckSquare, UilTrash, UilFileAlt, UilShare, UilMusic, UilVolume, UilVolumeMute, UilYoutube } from '@tooni/iconscout-unicons-react';
import { BulkOnboardingState, ContentItem, DocumentItem } from './types';


interface ContentSelectionStepProps {
  state: BulkOnboardingState;
  setState: (updates: Partial<BulkOnboardingState>) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
  // Platform specific data
  tiktokUser?: any;
  tiktokVideos?: any[];
  youtubeChannel?: any;
  youtubeVideos?: any[];
  twitchChannel?: any;
  twitchVideos?: any[];
  twitchChannelDataComplete?: boolean;
}

export function ContentSelectionStep({
  state,
  setState,
  setCurrentStep,
  handleStepChange,
  tiktokUser,
  tiktokVideos,
  youtubeChannel,
  youtubeVideos,
  twitchChannel,
  twitchVideos,
  twitchChannelDataComplete,
}: ContentSelectionStepProps) {

  const [hoveredVideoId, setHoveredVideoId] = React.useState<string | null>(null);
  const [mutedVideos, setMutedVideos] = React.useState<Set<string>>(new Set());
  const [debugMode, setDebugMode] = React.useState(false);
  const [failedVideos, setFailedVideos] = React.useState<Set<string>>(new Set());
  const [showVideoPreview, setShowVideoPreview] = React.useState(false);

  const [hoverStartTime, setHoverStartTime] = React.useState<number | null>(null);
  const [videoLoadingStates, setVideoLoadingStates] = React.useState<Map<string, 'idle' | 'preparing' | 'loading' | 'canplay' | 'loaded'>>(new Map());
  const hoverTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  const videoLoadTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  
  const videos = React.useMemo(() => {
    return state.selectedPlatform === 'tiktok' ? (tiktokVideos || []) : 
           state.selectedPlatform === 'youtube' ? (youtubeVideos || []) : 
           state.selectedPlatform === 'twitch' ? (twitchVideos || []) : [];
  }, [state.selectedPlatform, tiktokVideos, youtubeVideos, twitchVideos]);

  const channel = state.selectedPlatform === 'tiktok' ? tiktokUser : 
                  state.selectedPlatform === 'youtube' ? youtubeChannel : 
                  state.selectedPlatform === 'twitch' ? twitchChannel : null;

  // For URL-based input, create content items from pasted URLs
  const urlBasedContent = React.useMemo(() => {
    if (state.selectedInputMethod === 'urls') {
      return state.pastedUrls.map((url, index) => ({
        id: `url-${index}`,
        title: `Video ${index + 1}`,
        url: url,
        duration: 'Unknown',
        views: 'Unknown',
        likes: 'Unknown',
        published: 'Unknown',
        thumbnail: null
      }));
    }
    return [];
  }, [state.selectedInputMethod, state.pastedUrls]);

  // For document-based input, use uploaded documents
  const displayVideos = state.selectedInputMethod === 'urls' ? urlBasedContent : videos;
  const displayDocuments = state.selectedPlatform === 'documents' ? state.uploadedDocuments : [];
  const isDocumentMode = state.selectedPlatform === 'documents';
  const totalContent = isDocumentMode ? displayDocuments.length : displayVideos.length;

  // Cleanup when platform changes or component unmounts
  React.useEffect(() => {
    return () => {
      // Clear any pending hover timeouts
      if (hoverTimeoutRef.current) {
        clearTimeout(hoverTimeoutRef.current);
      }
    };
  }, [state.selectedPlatform]);
  
  // Cleanup videos when component unmounts or step changes
  React.useEffect(() => {
    return () => {
      // Stop all videos when leaving this step
      const videos = document.querySelectorAll('video');
      videos.forEach(video => {
        video.pause();
        video.muted = true;
        video.src = '';
        video.load();
      });
    };
  }, []);

  // Preload videos using hidden video elements
  React.useEffect(() => {
    if (state.selectedPlatform === 'tiktok' && videos.length > 0) {
      const videosToPreload = videos.slice(0, 5); // Increase to 5 videos for better UX
      
      console.log('[BulkContentSelection] Starting prefetch for first', videosToPreload.length, 'videos');
      
      // Use a small delay to not interfere with initial page load
      const prefetchTimeout = setTimeout(() => {
        videosToPreload.forEach((video, index) => {
          const videoId = video.id || video.video_id || video.videoId;
          
          // Preload video using hidden video element
          const downloadUrl = `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/tiktok/download/${videoId}?user_id=preview-user`;
          
          // Create hidden video element for preloading
          const preloadVideo = document.createElement('video');
          preloadVideo.src = downloadUrl;
          preloadVideo.preload = 'auto';
          preloadVideo.style.display = 'none';
          document.body.appendChild(preloadVideo);
          
          // Remove after loading
          preloadVideo.addEventListener('loadeddata', () => {
            document.body.removeChild(preloadVideo);
            console.log('[BulkContentSelection] Prefetched video', index + 1, ':', videoId);
          });
          
          preloadVideo.load();
        });
      }, 500); // Reduced delay for faster loading
      
      return () => clearTimeout(prefetchTimeout);
    }
  }, [state.selectedPlatform, videos]);

  const canProceedFromStep3 = () => state.selectedContent.length > 0;

  const toggleContentSelection = (contentId: string) => {
    if (isDocumentMode) {
      // For documents, limit to 10 selections
      const currentSelections = state.selectedContent.length;
      const isSelected = state.selectedContent.includes(contentId);
      
      if (!isSelected && currentSelections >= 10) {
        alert('Maximum 10 documents can be selected for processing.');
        return;
      }
    }

    const newSelectedContent = state.selectedContent.includes(contentId) 
      ? state.selectedContent.filter(id => id !== contentId)
      : [...state.selectedContent, contentId];
    
    setState({ selectedContent: newSelectedContent });
  };

  const selectAllContent = () => {
    if (isDocumentMode) {
      // For documents, select first 10
      const allIds = displayDocuments.slice(0, 10).map(doc => doc.id);
      setState({ selectedContent: allIds });
    } else {
      const allIds = displayVideos.map(video => video.id);
      setState({ selectedContent: allIds });
    }
  };

  const clearAllContent = () => {
    setState({ selectedContent: [] });
  };

  const formatDuration = (duration: string) => {
    if (!duration || duration === 'Unknown') return 'Unknown';
    // Handle various duration formats
    return duration;
  };

  const formatViews = (views: string | number) => {
    if (!views || views === 'Unknown') return 'Unknown';
    if (typeof views === 'number') {
      if (views >= 1000000) return `${(views / 1000000).toFixed(1)}M`;
      if (views >= 1000) return `${(views / 1000).toFixed(1)}K`;
      return views.toString();
    }
    return views;
  };

  // Helper function to update video loading state
  const updateVideoLoadingState = React.useCallback((videoId: string, state: 'idle' | 'preparing' | 'loading' | 'canplay' | 'loaded') => {
    setVideoLoadingStates(prev => new Map(prev).set(videoId, state));
  }, []);

  // Helper function to get video loading state
  const getVideoLoadingState = React.useCallback((videoId: string) => {
    return videoLoadingStates.get(videoId) || 'idle';
  }, [videoLoadingStates]);

  // Handle video hover - now just shows thumbnail preview
  const handleVideoHover = React.useCallback((videoId: string, videoUrl?: string) => {
    setHoveredVideoId(videoId);
    setHoverStartTime(Date.now());
  }, []);
  
  // Handle mouse leave
  const handleVideoLeave = React.useCallback(() => {
    // Clear any pending preview generation
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
      hoverTimeoutRef.current = null;
    }
    if (videoLoadTimeoutRef.current) {
      clearTimeout(videoLoadTimeoutRef.current);
      videoLoadTimeoutRef.current = null;
    }
    
    setHoveredVideoId(null);
    setHoverStartTime(null);
    
    // Reset loading state when not hovering
    if (hoveredVideoId) {
      updateVideoLoadingState(hoveredVideoId, 'idle');
    }
  }, [hoveredVideoId, state.selectedPlatform, updateVideoLoadingState]);

  // Handle audio mute toggle
  const handleAudioToggle = React.useCallback((videoId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    
    setMutedVideos(prev => {
      const newSet = new Set(prev);
      if (newSet.has(videoId)) {
        newSet.delete(videoId);
      } else {
        newSet.add(videoId);
      }
      return newSet;
    });
  }, []);

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getFileIcon = (type: string) => {
    if (type.includes('pdf')) return <UilFileAlt className="h-4 w-4 text-red-600" />;
    return <UilFileAlt className="h-4 w-4 text-blue-600" />;
  };

  const getPlatformIcon = () => {
    switch (state.selectedPlatform) {
      case 'youtube': return <UilVideo className="h-4 w-4 text-red-600" />;
      case 'tiktok': return <UilPlay className="h-4 w-4 text-black" />;
      case 'twitch': return <UilVideo className="h-4 w-4 text-purple-600" />;
      default: return <UilVideo className="h-4 w-4" />;
    }
  };

  const getPlatformName = () => {
    switch (state.selectedPlatform) {
      case 'youtube': return 'YouTube';
      case 'tiktok': return 'TikTok';
      case 'twitch': return 'Twitch';
      default: return 'Platform';
    }
  };

  if (state.isLoading) {
    return (
      <div className="space-y-8">
        <Card className="transform -rotate-1">
          <CardContent className="p-8">
            <div className="text-center">
              <UilSpinner className="h-12 w-12 mx-auto mb-4 animate-spin text-orange-600" />
              <h2 className="text-2xl font-black uppercase mb-4">LOADING CONTENT</h2>
              <p className="text-gray-600 mb-6">Fetching {getPlatformName()} content...</p>
              <Progress value={state.loadProgress} className="w-full mb-4" />
              <p className="text-sm text-gray-500">{state.loadProgress}% complete</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <Card className="transform -rotate-1">
        <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            SELECT CONTENT
          </h1>
          <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
            Choose the content to process for RAG creation. Selected videos will be transcribed and embedded.
          </p>
          <button 
            onClick={() => setDebugMode(!debugMode)}
            className="mt-2 px-2 py-1 text-xs bg-gray-200 rounded"
          >
            Debug: {debugMode ? 'ON' : 'OFF'}
          </button>
        </div>

          {/* Channel/Source Info */}
          {state.selectedInputMethod === 'channel' && channel && (
            <Card className="bg-orange-50 mb-6">
              <CardContent className="p-4">
                <div className="flex items-start gap-4">
                  {channel.avatar && (
                    <Image 
                      src={channel.avatar || channel.profileImage} 
                      alt={channel.username || channel.title}
                      width={64}
                      height={64}
                      className="w-16 h-16 rounded-full border-2 border-black"
                    />
                  )}
                  <div className="flex-1">
                    <h3 className="text-xl font-black uppercase">
                      {channel.username || channel.channelName || channel.displayName || channel.title || channel.display_name}
                    </h3>
                    {channel.follower_count !== undefined && (
                      <p className="text-sm text-gray-700">
                        {formatViews(channel.follower_count)} followers
                      </p>
                    )}
                    {channel.followerCount !== undefined && (
                      <p className="text-sm text-gray-700">
                        {formatViews(channel.followerCount)} followers
                      </p>
                    )}
                    {channel.subscriberCount !== undefined && (
                      <p className="text-sm text-gray-700">
                        {formatViews(parseInt(channel.subscriberCount))} subscribers
                      </p>
                    )}
                    {state.selectedPlatform === 'tiktok' && channel.heartCount && (
                      <p className="text-sm text-gray-700">
                        {formatViews(channel.heartCount)} hearts
                      </p>
                    )}
                    {state.selectedPlatform === 'tiktok' && channel.videoCount && (
                      <p className="text-sm text-gray-700">
                        {formatViews(channel.videoCount)} videos
                      </p>
                    )}
                    {channel.description && (
                      <p className="text-sm text-gray-600 mt-2 line-clamp-2">
                        {channel.description}
                      </p>
                    )}
                    {/* TikTok bio/signature */}
                    {state.selectedPlatform === 'tiktok' && channel.signature && (
                      <p className="text-sm text-gray-600 mt-2 italic">&quot;{channel.signature}&quot;</p>
                    )}
                  </div>
                  <Badge variant="default" className="bg-orange-500 text-white">
                    {displayVideos.length} videos found
                  </Badge>
                </div>
              </CardContent>
            </Card>
          )}

          {state.selectedInputMethod === 'urls' && !isDocumentMode && (
            <Card className="bg-orange-50 mb-6">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    {getPlatformIcon()}
                    <h3 className="text-xl font-black uppercase">URL-BASED INPUT</h3>
                  </div>
                  <Badge variant="default" className="bg-orange-500 text-white">
                    {state.pastedUrls.length} URLs provided
                  </Badge>
                </div>
              </CardContent>
            </Card>
          )}

          {isDocumentMode && (
            <Card className="bg-orange-50 mb-6">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <UilFileAlt className="h-4 w-4 text-blue-600" />
                    <h3 className="text-xl font-black uppercase">UPLOADED DOCUMENTS</h3>
                  </div>
                  <Badge variant="default" className="bg-orange-500 text-white">
                    {displayDocuments.length} documents uploaded
                  </Badge>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Help text for video previews */}
          {state.selectedPlatform === 'tiktok' && !isDocumentMode && (
            <Card className="bg-blue-50 mb-6">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <UilInfoCircle className="h-5 w-5 text-blue-600" />
                  <div>
                    <p className="font-bold text-sm">Video Preview Tip</p>
                    <p className="text-xs text-gray-700">Hover and hold on a video for 0.5 seconds to see a preview</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Selection Controls */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-2">
              <Button
                variant="neutral"
                size="sm"
                onClick={selectAllContent}
                className="h-10"
              >
                <UilCheckSquare className="h-4 w-4 mr-2" />
                SELECT ALL
              </Button>
              <Button
                variant="neutral"
                size="sm"
                onClick={clearAllContent}
                className="h-10"
              >
                <UilTrash className="h-4 w-4 mr-2" />
                CLEAR ALL
              </Button>
            </div>
            <div className="text-sm text-gray-600">
              {state.selectedContent.length} / {isDocumentMode ? Math.min(displayDocuments.length, 10) : displayVideos.length} selected
              {isDocumentMode && state.selectedContent.length >= 10 && (
                <span className="text-yellow-600 font-bold ml-2">(MAX REACHED)</span>
              )}
            </div>
          </div>

          {/* Content Grid */}
          {(isDocumentMode ? displayDocuments.length > 0 : displayVideos.length > 0) ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
              {isDocumentMode ? (
                displayDocuments.map((doc) => (
                  <Card 
                    key={doc.id}
                    className={`cursor-pointer transition-all hover:shadow-lg ${
                      state.selectedContent.includes(doc.id) ? 'ring-4 ring-orange-500 bg-orange-50' : ''
                    } ${state.selectedContent.length >= 10 && !state.selectedContent.includes(doc.id) ? 'opacity-50' : ''}`}
                    onClick={() => toggleContentSelection(doc.id)}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <Checkbox
                          checked={state.selectedContent.includes(doc.id)}
                          onChange={() => toggleContentSelection(doc.id)}
                          className="mt-1"
                          disabled={state.selectedContent.length >= 10 && !state.selectedContent.includes(doc.id)}
                        />
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-3">
                            {getFileIcon(doc.type)}
                            <div className="w-8 h-8 bg-blue-100 border-2 border-black rounded flex items-center justify-center">
                              <span className="text-xs font-bold">{doc.type.split('/').pop()?.slice(0,3).toUpperCase()}</span>
                            </div>
                          </div>
                          <h4 className="font-bold text-sm leading-tight mb-2 line-clamp-2">
                            {doc.name}
                          </h4>
                          <div className="flex items-center gap-4 text-xs text-gray-600 mb-2">
                            <div className="flex items-center gap-1">
                              <UilFileAlt className="h-3 w-3" />
                              {formatFileSize(doc.size)}
                            </div>
                            <div className="flex items-center gap-1">
                              <UilClock className="h-3 w-3" />
                              {new Date(doc.uploadDate).toLocaleDateString()}
                            </div>
                          </div>
                          {doc.textPreview && (
                            <p className="text-xs text-gray-500 line-clamp-2">
                              {doc.textPreview}
                            </p>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))
              ) : (
                displayVideos.map((video, index) => {
                  const videoId = video.id || video.video_id || video.videoId;
                  const isSelected = state.selectedContent.includes(videoId);
                  const isHovered = hoveredVideoId === videoId;
                  
                  return (
                    <div
                      key={videoId || `video-${index}`}
                      className="relative cursor-pointer transform transition-all hover:scale-105"
                      onClick={() => toggleContentSelection(videoId)}
                    >
                      <Card className={`border-4 border-border overflow-hidden shadow-shadow hover:translate-x-1 hover:translate-y-1 hover:shadow-none transition-all ${
                        isSelected ? 'ring-4 ring-orange-500 bg-orange-50' : 'bg-background'
                      }`}>
                        <div 
                          className="relative"
                          onMouseEnter={() => handleVideoHover(videoId, video.url || video.videoUrl)}
                          onMouseLeave={handleVideoLeave}
                        >
                          {/* Base thumbnail - always visible */}
                          <Image 
                            src={video.thumbnail || video.thumbnails?.[0]?.url || '/placeholder.jpg'} 
                            alt={video.title || video.description}
                            width={state.selectedPlatform === 'tiktok' ? 180 : 320}
                            height={state.selectedPlatform === 'tiktok' ? 320 : 180}
                            className={`w-full object-cover ${
                              state.selectedPlatform === 'tiktok' ? 'aspect-[9/16]' : 'aspect-[16:9]'
                            }`}
                          />
                          
                          {/* Video preview overlay - shown when hovering */}
                          {isHovered && (
                            <div className="absolute inset-0 z-10">
                              {state.selectedPlatform === 'tiktok' && (
                                <video
                                  src={`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/tiktok/download/${videoId}?user_id=preview-user`}
                                  className="w-full h-full object-cover"
                                  muted
                                  loop
                                  playsInline
                                  autoPlay
                                  preload="metadata"
                                />
                              )}
                              {state.selectedPlatform === 'youtube' && video.videoUrl && (
                                <video
                                  src={`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/youtube/download/${videoId}?user_id=preview-user`}
                                  className="w-full h-full object-cover"
                                  muted
                                  loop
                                  playsInline
                                  autoPlay
                                  preload="metadata"
                                />
                              )}
                              {state.selectedPlatform === 'twitch' && video.videoUrl && (
                                <video
                                  src={`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/twitch/download/${videoId}?user_id=preview-user`}
                                  className="w-full h-full object-cover"
                                  muted
                                  loop
                                  playsInline
                                  autoPlay
                                  preload="metadata"
                                />
                              )}
                            </div>
                          )}
                          
                           {/* Loading overlay - only show during actual loading */}
                           {isHovered && getVideoLoadingState(videoId) === 'loading' && (
                             <div className="absolute inset-0 bg-black bg-opacity-40 flex flex-col items-center justify-center transition-opacity duration-300">
                               <div className="flex flex-col items-center">
                                 <UilSpinner className="h-8 w-8 text-white animate-spin mb-2" />
                                 <p className="text-white text-xs font-semibold">Loading...</p>
                               </div>
                             </div>
                           )}                           
                          <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-10 transition-opacity" />
                          {isSelected && (
                            <div className="absolute top-2 right-2 w-6 h-6 bg-orange-500 border-2 border-black flex items-center justify-center">
                              <UilCheckCircle className="h-4 w-4 text-white" />
                            </div>
                          )}
                        </div>
                        <CardContent className="p-3">
                          <p className="font-bold text-sm line-clamp-2">
                            {video.title || video.description || 'Untitled'}
                          </p>
                          <div className="flex items-center gap-2 mt-2 text-xs text-gray-600">
                            <div className="flex items-center gap-1">
                              <UilClock className="h-3 w-3" />
                              <span>{formatDuration(video.duration || 0)}</span>
                            </div>
                            {video.viewCount !== undefined && (
                              <>
                                <span>·</span>
                                <div className="flex items-center gap-1">
                                  <UilEye className="h-3 w-3" />
                                  <span>{formatViews(video.viewCount)}</span>
                                </div>
                              </>
                            )}
                            {video.play_count !== undefined && (
                              <>
                                <span>·</span>
                                <div className="flex items-center gap-1">
                                  <UilEye className="h-3 w-3" />
                                  <span>{formatViews(video.play_count)}</span>
                                </div>
                              </>
                            )}
                            {video.views !== 'Unknown' && video.viewCount === undefined && video.play_count === undefined && (
                              <>
                                <span>·</span>
                                <div className="flex items-center gap-1">
                                  <UilEye className="h-3 w-3" />
                                  <span>{formatViews(video.views)}</span>
                                </div>
                              </>
                            )}
                            {video.likes !== 'Unknown' && (
                              <>
                                <span>·</span>
                                <div className="flex items-center gap-1">
                                  <UilThumbsUp className="h-3 w-3" />
                                  <span>{formatViews(video.likes)}</span>
                                </div>
                              </>
                            )}
                          </div>
                          {/* TikTok-specific music info */}
                          {state.selectedPlatform === 'tiktok' && (video.musicTitle || video.musicAuthor) && (
                            <div className="mt-2 text-xs text-gray-500 flex items-center gap-1">
                              <UilMusic className="h-3 w-3" />
                              {video.musicTitle && video.musicAuthor ? `${video.musicTitle} - ${video.musicAuthor}` : 
                               video.musicTitle || video.musicAuthor}
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    </div>
                  );
                })
              )}
            </div>
          ) : (
            <Card className="bg-gray-50">
              <CardContent className="p-8 text-center">
                <UilInfoCircle className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                <h3 className="text-xl font-bold mb-2">NO CONTENT FOUND</h3>
                <p className="text-gray-600">
                  {isDocumentMode 
                    ? 'No documents have been uploaded. Please go back and upload some documents to process.'
                    : state.selectedInputMethod === 'urls' 
                      ? 'Please go back and add some URLs to process.'
                      : 'No videos were found for this channel. Please check the channel name and try again.'
                  }
                </p>
              </CardContent>
            </Card>
          )}

          <Card className="bg-yellow-100 mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="default" 
                  className="flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">BULK PROCESSING INFO</p>
                  <p className="text-sm text-gray-700 mt-1">
                    {isDocumentMode 
                      ? 'Selected documents will be processed, chunked into smaller segments, and converted into vector embeddings. Text will be automatically extracted from all supported file formats.'
                      : 'Selected content will be downloaded, transcribed using AI, and processed into vector embeddings. Processing time depends on video length and count. Choose quality content for best results.'
                    }
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-4 mt-8">
            <Button
              variant="neutral"
              size="lg"
              className="flex-1 h-14 text-lg font-black uppercase"
              onClick={() => handleStepChange(2)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              variant="default"
              size="lg"
              className={`flex-1 h-14 text-lg font-black uppercase ${!canProceedFromStep3() ? 'opacity-50 cursor-not-allowed' : ''}`}
              onClick={() => setCurrentStep(4)}
              disabled={!canProceedFromStep3()}
            >
              <span className="flex items-center justify-center">
                CONTINUE
                <UilArrowRight className="ml-2 h-6 w-6" />
              </span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/bulk/ContentSelectionStep.tsx.backup
================================================
'use client';

import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Checkbox } from '@/components/ui/checkbox';
import { UilSpinner, UilArrowRight, UilArrowLeft, UilCheckCircle, UilInfoCircle, UilPlay, UilVideo, UilClock, UilEye, UilThumbsUp, UilCheckSquare, UilTrash, UilFileAlt, UilShare, UilMusic, UilVolume, UilVolumeMute, UilYoutube } from '@tooni/iconscout-unicons-react';
import { BulkOnboardingState, ContentItem, DocumentItem } from './types';


interface ContentSelectionStepProps {
  state: BulkOnboardingState;
  setState: (updates: Partial<BulkOnboardingState>) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
  // Platform specific data
  tiktokUser?: any;
  tiktokVideos?: any[];
  youtubeChannel?: any;
  youtubeVideos?: any[];
  twitchChannel?: any;
  twitchVideos?: any[];
  twitchChannelDataComplete?: boolean;
}

export function ContentSelectionStep({
  state,
  setState,
  setCurrentStep,
  handleStepChange,
  tiktokUser,
  tiktokVideos,
  youtubeChannel,
  youtubeVideos,
  twitchChannel,
  twitchVideos,
  twitchChannelDataComplete,
}: ContentSelectionStepProps) {

  const [hoveredVideoId, setHoveredVideoId] = React.useState<string | null>(null);
  const [mutedVideos, setMutedVideos] = React.useState<Set<string>>(new Set());
  const [debugMode, setDebugMode] = React.useState(false);
  const [failedVideos, setFailedVideos] = React.useState<Set<string>>(new Set());
  const [showVideoPreview, setShowVideoPreview] = React.useState(false);

  const [hoverStartTime, setHoverStartTime] = React.useState<number | null>(null);
  const [videoLoadingStates, setVideoLoadingStates] = React.useState<Map<string, 'idle' | 'preparing' | 'loading' | 'canplay' | 'loaded'>>(new Map());
  const hoverTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  const videoLoadTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  
  const videos = React.useMemo(() => {
    return state.selectedPlatform === 'tiktok' ? (tiktokVideos || []) : 
           state.selectedPlatform === 'youtube' ? (youtubeVideos || []) : 
           state.selectedPlatform === 'twitch' ? (twitchVideos || []) : [];
  }, [state.selectedPlatform, tiktokVideos, youtubeVideos, twitchVideos]);

  const channel = state.selectedPlatform === 'tiktok' ? tiktokUser : 
                  state.selectedPlatform === 'youtube' ? youtubeChannel : 
                  state.selectedPlatform === 'twitch' ? twitchChannel : null;

  // For URL-based input, create content items from pasted URLs
  const urlBasedContent = React.useMemo(() => {
    if (state.selectedInputMethod === 'urls') {
      return state.pastedUrls.map((url, index) => ({
        id: `url-${index}`,
        title: `Video ${index + 1}`,
        url: url,
        duration: 'Unknown',
        views: 'Unknown',
        likes: 'Unknown',
        published: 'Unknown',
        thumbnail: null
      }));
    }
    return [];
  }, [state.selectedInputMethod, state.pastedUrls]);

  // For document-based input, use uploaded documents
  const displayVideos = state.selectedInputMethod === 'urls' ? urlBasedContent : videos;
  const displayDocuments = state.selectedPlatform === 'documents' ? state.uploadedDocuments : [];
  const isDocumentMode = state.selectedPlatform === 'documents';
  const totalContent = isDocumentMode ? displayDocuments.length : displayVideos.length;

  // Cleanup when platform changes or component unmounts
  React.useEffect(() => {
    return () => {
      // Clear any pending hover timeouts
      if (hoverTimeoutRef.current) {
        clearTimeout(hoverTimeoutRef.current);
      }
    };
  }, [state.selectedPlatform]);
  
  // Cleanup videos when component unmounts or step changes
  React.useEffect(() => {
    return () => {
      // Stop all videos when leaving this step
      const videos = document.querySelectorAll('video');
      videos.forEach(video => {
        video.pause();
        video.muted = true;
        video.src = '';
        video.load();
      });
    };
  }, []);

  // Preload videos using hidden video elements
  React.useEffect(() => {
    if (state.selectedPlatform === 'tiktok' && videos.length > 0) {
      const videosToPreload = videos.slice(0, 5); // Increase to 5 videos for better UX
      
      console.log('[BulkContentSelection] Starting prefetch for first', videosToPreload.length, 'videos');
      
      // Use a small delay to not interfere with initial page load
      const prefetchTimeout = setTimeout(() => {
        videosToPreload.forEach((video, index) => {
          const videoId = video.id || video.video_id || video.videoId;
          
          // Preload video using hidden video element
          const downloadUrl = `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/tiktok/download/${videoId}?user_id=preview-user`;
          
          // Create hidden video element for preloading
          const preloadVideo = document.createElement('video');
          preloadVideo.src = downloadUrl;
          preloadVideo.preload = 'auto';
          preloadVideo.style.display = 'none';
          document.body.appendChild(preloadVideo);
          
          // Remove after loading
          preloadVideo.addEventListener('loadeddata', () => {
            document.body.removeChild(preloadVideo);
            console.log('[BulkContentSelection] Prefetched video', index + 1, ':', videoId);
          });
          
          preloadVideo.load();
        });
      }, 500); // Reduced delay for faster loading
      
      return () => clearTimeout(prefetchTimeout);
    }
  }, [state.selectedPlatform, videos]);

  const canProceedFromStep3 = () => state.selectedContent.length > 0;

  const toggleContentSelection = (contentId: string) => {
    if (isDocumentMode) {
      // For documents, limit to 10 selections
      const currentSelections = state.selectedContent.length;
      const isSelected = state.selectedContent.includes(contentId);
      
      if (!isSelected && currentSelections >= 10) {
        alert('Maximum 10 documents can be selected for processing.');
        return;
      }
    }

    const newSelectedContent = state.selectedContent.includes(contentId) 
      ? state.selectedContent.filter(id => id !== contentId)
      : [...state.selectedContent, contentId];
    
    setState({ selectedContent: newSelectedContent });
  };

  const selectAllContent = () => {
    if (isDocumentMode) {
      // For documents, select first 10
      const allIds = displayDocuments.slice(0, 10).map(doc => doc.id);
      setState({ selectedContent: allIds });
    } else {
      const allIds = displayVideos.map(video => video.id);
      setState({ selectedContent: allIds });
    }
  };

  const clearAllContent = () => {
    setState({ selectedContent: [] });
  };

  const formatDuration = (duration: string) => {
    if (!duration || duration === 'Unknown') return 'Unknown';
    // Handle various duration formats
    return duration;
  };

  const formatViews = (views: string | number) => {
    if (!views || views === 'Unknown') return 'Unknown';
    if (typeof views === 'number') {
      if (views >= 1000000) return `${(views / 1000000).toFixed(1)}M`;
      if (views >= 1000) return `${(views / 1000).toFixed(1)}K`;
      return views.toString();
    }
    return views;
  };

  // Helper function to update video loading state
  const updateVideoLoadingState = React.useCallback((videoId: string, state: 'idle' | 'preparing' | 'loading' | 'canplay' | 'loaded') => {
    setVideoLoadingStates(prev => new Map(prev).set(videoId, state));
  }, []);

  // Helper function to get video loading state
  const getVideoLoadingState = React.useCallback((videoId: string) => {
    return videoLoadingStates.get(videoId) || 'idle';
  }, [videoLoadingStates]);

  // Handle video hover - now just shows thumbnail preview
  const handleVideoHover = React.useCallback((videoId: string, videoUrl?: string) => {
    setHoveredVideoId(videoId);
    setHoverStartTime(Date.now());
  }, []);
  
  // Handle mouse leave
  const handleVideoLeave = React.useCallback(() => {
    // Clear any pending preview generation
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
      hoverTimeoutRef.current = null;
    }
    if (videoLoadTimeoutRef.current) {
      clearTimeout(videoLoadTimeoutRef.current);
      videoLoadTimeoutRef.current = null;
    }
    
    setHoveredVideoId(null);
    setHoverStartTime(null);
    
    // Reset loading state when not hovering
    if (hoveredVideoId) {
      updateVideoLoadingState(hoveredVideoId, 'idle');
    }
  }, [hoveredVideoId, state.selectedPlatform, updateVideoLoadingState]);

  // Handle audio mute toggle
  const handleAudioToggle = React.useCallback((videoId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    
    setMutedVideos(prev => {
      const newSet = new Set(prev);
      if (newSet.has(videoId)) {
        newSet.delete(videoId);
      } else {
        newSet.add(videoId);
      }
      return newSet;
    });
  }, []);

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getFileIcon = (type: string) => {
    if (type.includes('pdf')) return <UilFileAlt className="h-4 w-4 text-red-600" />;
    return <UilFileAlt className="h-4 w-4 text-blue-600" />;
  };

  const getPlatformIcon = () => {
    switch (state.selectedPlatform) {
      case 'youtube': return <UilVideo className="h-4 w-4 text-red-600" />;
      case 'tiktok': return <UilPlay className="h-4 w-4 text-black" />;
      case 'twitch': return <UilVideo className="h-4 w-4 text-purple-600" />;
      default: return <UilVideo className="h-4 w-4" />;
    }
  };

  const getPlatformName = () => {
    switch (state.selectedPlatform) {
      case 'youtube': return 'YouTube';
      case 'tiktok': return 'TikTok';
      case 'twitch': return 'Twitch';
      default: return 'Platform';
    }
  };

  if (state.isLoading) {
    return (
      <div className="space-y-8">
        <Card className="transform -rotate-1">
          <CardContent className="p-8">
            <div className="text-center">
              <UilSpinner className="h-12 w-12 mx-auto mb-4 animate-spin text-orange-600" />
              <h2 className="text-2xl font-black uppercase mb-4">LOADING CONTENT</h2>
              <p className="text-gray-600 mb-6">Fetching {getPlatformName()} content...</p>
              <Progress value={state.loadProgress} className="w-full mb-4" />
              <p className="text-sm text-gray-500">{state.loadProgress}% complete</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <Card className="transform -rotate-1">
        <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            SELECT CONTENT
          </h1>
          <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
            Choose the content to process for RAG creation. Selected videos will be transcribed and embedded.
          </p>
          <button 
            onClick={() => setDebugMode(!debugMode)}
            className="mt-2 px-2 py-1 text-xs bg-gray-200 rounded"
          >
            Debug: {debugMode ? 'ON' : 'OFF'}
          </button>
        </div>

          {/* Channel/Source Info */}
          {state.selectedInputMethod === 'channel' && channel && (
            <Card className="bg-orange-50 mb-6">
              <CardContent className="p-4">
                <div className="flex items-start gap-4">
                  {channel.avatar && (
                    <Image 
                      src={channel.avatar || channel.profileImage} 
                      alt={channel.username || channel.title}
                      width={64}
                      height={64}
                      className="w-16 h-16 rounded-full border-2 border-black"
                    />
                  )}
                  <div className="flex-1">
                    <h3 className="text-xl font-black uppercase">
                      {channel.username || channel.channelName || channel.displayName || channel.title || channel.display_name}
                    </h3>
                    {channel.follower_count !== undefined && (
                      <p className="text-sm text-gray-700">
                        {formatViews(channel.follower_count)} followers
                      </p>
                    )}
                    {channel.followerCount !== undefined && (
                      <p className="text-sm text-gray-700">
                        {formatViews(channel.followerCount)} followers
                      </p>
                    )}
                    {channel.subscriberCount !== undefined && (
                      <p className="text-sm text-gray-700">
                        {formatViews(parseInt(channel.subscriberCount))} subscribers
                      </p>
                    )}
                    {state.selectedPlatform === 'tiktok' && channel.heartCount && (
                      <p className="text-sm text-gray-700">
                        {formatViews(channel.heartCount)} hearts
                      </p>
                    )}
                    {state.selectedPlatform === 'tiktok' && channel.videoCount && (
                      <p className="text-sm text-gray-700">
                        {formatViews(channel.videoCount)} videos
                      </p>
                    )}
                    {channel.description && (
                      <p className="text-sm text-gray-600 mt-2 line-clamp-2">
                        {channel.description}
                      </p>
                    )}
                    {/* TikTok bio/signature */}
                    {state.selectedPlatform === 'tiktok' && channel.signature && (
                      <p className="text-sm text-gray-600 mt-2 italic">&quot;{channel.signature}&quot;</p>
                    )}
                  </div>
                  <Badge variant="default" className="bg-orange-500 text-white">
                    {displayVideos.length} videos found
                  </Badge>
                </div>
              </CardContent>
            </Card>
          )}

          {state.selectedInputMethod === 'urls' && !isDocumentMode && (
            <Card className="bg-orange-50 mb-6">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    {getPlatformIcon()}
                    <h3 className="text-xl font-black uppercase">URL-BASED INPUT</h3>
                  </div>
                  <Badge variant="default" className="bg-orange-500 text-white">
                    {state.pastedUrls.length} URLs provided
                  </Badge>
                </div>
              </CardContent>
            </Card>
          )}

          {isDocumentMode && (
            <Card className="bg-orange-50 mb-6">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <UilFileAlt className="h-4 w-4 text-blue-600" />
                    <h3 className="text-xl font-black uppercase">UPLOADED DOCUMENTS</h3>
                  </div>
                  <Badge variant="default" className="bg-orange-500 text-white">
                    {displayDocuments.length} documents uploaded
                  </Badge>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Help text for video previews */}
          {state.selectedPlatform === 'tiktok' && !isDocumentMode && (
            <Card className="bg-blue-50 mb-6">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <UilInfoCircle className="h-5 w-5 text-blue-600" />
                  <div>
                    <p className="font-bold text-sm">Video Preview Tip</p>
                    <p className="text-xs text-gray-700">Hover and hold on a video for 0.5 seconds to see a preview</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Selection Controls */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-2">
              <Button
                variant="neutral"
                size="sm"
                onClick={selectAllContent}
                className="h-10"
              >
                <UilCheckSquare className="h-4 w-4 mr-2" />
                SELECT ALL
              </Button>
              <Button
                variant="neutral"
                size="sm"
                onClick={clearAllContent}
                className="h-10"
              >
                <UilTrash className="h-4 w-4 mr-2" />
                CLEAR ALL
              </Button>
            </div>
            <div className="text-sm text-gray-600">
              {state.selectedContent.length} / {isDocumentMode ? Math.min(displayDocuments.length, 10) : displayVideos.length} selected
              {isDocumentMode && state.selectedContent.length >= 10 && (
                <span className="text-yellow-600 font-bold ml-2">(MAX REACHED)</span>
              )}
            </div>
          </div>

          {/* Content Grid */}
          {(isDocumentMode ? displayDocuments.length > 0 : displayVideos.length > 0) ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
              {isDocumentMode ? (
                displayDocuments.map((doc) => (
                  <Card 
                    key={doc.id}
                    className={`cursor-pointer transition-all hover:shadow-lg ${
                      state.selectedContent.includes(doc.id) ? 'ring-4 ring-orange-500 bg-orange-50' : ''
                    } ${state.selectedContent.length >= 10 && !state.selectedContent.includes(doc.id) ? 'opacity-50' : ''}`}
                    onClick={() => toggleContentSelection(doc.id)}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <Checkbox
                          checked={state.selectedContent.includes(doc.id)}
                          onChange={() => toggleContentSelection(doc.id)}
                          className="mt-1"
                          disabled={state.selectedContent.length >= 10 && !state.selectedContent.includes(doc.id)}
                        />
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-3">
                            {getFileIcon(doc.type)}
                            <div className="w-8 h-8 bg-blue-100 border-2 border-black rounded flex items-center justify-center">
                              <span className="text-xs font-bold">{doc.type.split('/').pop()?.slice(0,3).toUpperCase()}</span>
                            </div>
                          </div>
                          <h4 className="font-bold text-sm leading-tight mb-2 line-clamp-2">
                            {doc.name}
                          </h4>
                          <div className="flex items-center gap-4 text-xs text-gray-600 mb-2">
                            <div className="flex items-center gap-1">
                              <UilFileAlt className="h-3 w-3" />
                              {formatFileSize(doc.size)}
                            </div>
                            <div className="flex items-center gap-1">
                              <UilClock className="h-3 w-3" />
                              {new Date(doc.uploadDate).toLocaleDateString()}
                            </div>
                          </div>
                          {doc.textPreview && (
                            <p className="text-xs text-gray-500 line-clamp-2">
                              {doc.textPreview}
                            </p>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))
              ) : (
                displayVideos.map((video, index) => {
                  const videoId = video.id || video.video_id || video.videoId;
                  const isSelected = state.selectedContent.includes(videoId);
                  const isHovered = hoveredVideoId === videoId;
                  
                  return (
                    <div
                      key={videoId || `video-${index}`}
                      className="relative cursor-pointer transform transition-all hover:scale-105"
                      onClick={() => toggleContentSelection(videoId)}
                    >
                      <Card className={`border-4 border-border overflow-hidden shadow-shadow hover:translate-x-1 hover:translate-y-1 hover:shadow-none transition-all ${
                        isSelected ? 'ring-4 ring-orange-500 bg-orange-50' : 'bg-background'
                      }`}>
                        <div 
                          className="relative"
                          onMouseEnter={() => handleVideoHover(videoId, video.url || video.videoUrl)}
                          onMouseLeave={handleVideoLeave}
                        >
                          {/* Base thumbnail - always visible */}
                          <Image 
                            src={video.thumbnail || video.thumbnails?.[0]?.url || '/placeholder.jpg'} 
                            alt={video.title || video.description}
                            width={state.selectedPlatform === 'tiktok' ? 180 : 320}
                            height={state.selectedPlatform === 'tiktok' ? 320 : 180}
                            className={`w-full object-cover ${
                              state.selectedPlatform === 'tiktok' ? 'aspect-[9/16]' : 'aspect-[16/9]'
                            }`}
                          />
                          
                            <img
                              src={video.thumbnail}
                              className="w-full h-full object-cover"
                              alt={video.title}
                            />
                           {/* Loading overlay - only show during actual loading */}
                           {isHovered && getVideoLoadingState(videoId) === 'loading' && (
                             <div className="absolute inset-0 bg-black bg-opacity-40 flex flex-col items-center justify-center transition-opacity duration-300">
                               <div className="flex flex-col items-center">
                                 <UilSpinner className="h-8 w-8 text-white animate-spin mb-2" />
                                 <p className="text-white text-xs font-semibold">Loading...</p>
                               </div>
                             </div>
                           )}                          
                          <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-10 transition-opacity" />
                          {isSelected && (
                            <div className="absolute top-2 right-2 w-6 h-6 bg-orange-500 border-2 border-black flex items-center justify-center">
                              <UilCheckCircle className="h-4 w-4 text-white" />
                            </div>
                          )}
                        </div>
                        <CardContent className="p-3">
                          <p className="font-bold text-sm line-clamp-2">
                            {video.title || video.description || 'Untitled'}
                          </p>
                          <div className="flex items-center gap-2 mt-2 text-xs text-gray-600">
                            <div className="flex items-center gap-1">
                              <UilClock className="h-3 w-3" />
                              <span>{formatDuration(video.duration || 0)}</span>
                            </div>
                            {video.viewCount !== undefined && (
                              <>
                                <span>·</span>
                                <div className="flex items-center gap-1">
                                  <UilEye className="h-3 w-3" />
                                  <span>{formatViews(video.viewCount)}</span>
                                </div>
                              </>
                            )}
                            {video.play_count !== undefined && (
                              <>
                                <span>·</span>
                                <div className="flex items-center gap-1">
                                  <UilEye className="h-3 w-3" />
                                  <span>{formatViews(video.play_count)}</span>
                                </div>
                              </>
                            )}
                            {video.views !== 'Unknown' && video.viewCount === undefined && video.play_count === undefined && (
                              <>
                                <span>·</span>
                                <div className="flex items-center gap-1">
                                  <UilEye className="h-3 w-3" />
                                  <span>{formatViews(video.views)}</span>
                                </div>
                              </>
                            )}
                            {video.likes !== 'Unknown' && (
                              <>
                                <span>·</span>
                                <div className="flex items-center gap-1">
                                  <UilThumbsUp className="h-3 w-3" />
                                  <span>{formatViews(video.likes)}</span>
                                </div>
                              </>
                            )}
                          </div>
                          {/* TikTok-specific music info */}
                          {state.selectedPlatform === 'tiktok' && (video.musicTitle || video.musicAuthor) && (
                            <div className="mt-2 text-xs text-gray-500 flex items-center gap-1">
                              <UilMusic className="h-3 w-3" />
                              {video.musicTitle && video.musicAuthor ? `${video.musicTitle} - ${video.musicAuthor}` : 
                               video.musicTitle || video.musicAuthor}
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    </div>
                  );
                })
              )}
            </div>
          ) : (
            <Card className="bg-gray-50">
              <CardContent className="p-8 text-center">
                <UilInfoCircle className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                <h3 className="text-xl font-bold mb-2">NO CONTENT FOUND</h3>
                <p className="text-gray-600">
                  {isDocumentMode 
                    ? 'No documents have been uploaded. Please go back and upload some documents to process.'
                    : state.selectedInputMethod === 'urls' 
                      ? 'Please go back and add some URLs to process.'
                      : 'No videos were found for this channel. Please check the channel name and try again.'
                  }
                </p>
              </CardContent>
            </Card>
          )}

          <Card className="bg-yellow-100 mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="default" 
                  className="flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">BULK PROCESSING INFO</p>
                  <p className="text-sm text-gray-700 mt-1">
                    {isDocumentMode 
                      ? 'Selected documents will be processed, chunked into smaller segments, and converted into vector embeddings. Text will be automatically extracted from all supported file formats.'
                      : 'Selected content will be downloaded, transcribed using AI, and processed into vector embeddings. Processing time depends on video length and count. Choose quality content for best results.'
                    }
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-4 mt-8">
            <Button
              variant="neutral"
              size="lg"
              className="flex-1 h-14 text-lg font-black uppercase"
              onClick={() => handleStepChange(2)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              variant="default"
              size="lg"
              className={`flex-1 h-14 text-lg font-black uppercase ${!canProceedFromStep3() ? 'opacity-50 cursor-not-allowed' : ''}`}
              onClick={() => setCurrentStep(4)}
              disabled={!canProceedFromStep3()}
            >
              <span className="flex items-center justify-center">
                CONTINUE
                <UilArrowRight className="ml-2 h-6 w-6" />
              </span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/bulk/DocumentUploadStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { UilUpload, UilArrowRight, UilArrowLeft, UilInfoCircle, UilFileAlt, UilTrash, UilCheckCircle, UilClock } from '@tooni/iconscout-unicons-react';
import { BulkOnboardingState, DocumentItem } from './types';
import FileUploadCard from '@/components/custom/file-upload-card';
import DocumentListCard from '@/components/custom/document-list-card';

interface DocumentUploadStepProps {
  state: BulkOnboardingState;
  setState: (updates: Partial<BulkOnboardingState>) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
}

export function DocumentUploadStep({ 
  state, 
  setState, 
  setCurrentStep,
  handleStepChange
}: DocumentUploadStepProps) {
  
  const [isDragOver, setIsDragOver] = React.useState(false);
  const fileInputRef = React.useRef<HTMLInputElement>(null);

  console.log('DocumentUploadStep setState function:', typeof setState, setState);


  const canProceedFromStep2 = () => {
    const canProceed = state.uploadedDocuments.length > 0;
    console.log('DocumentUploadStep canProceedFromStep2:', {
      uploadedDocumentsLength: state.uploadedDocuments.length,
      selectedPlatform: state.selectedPlatform,
      selectedInputMethod: state.selectedInputMethod,
      canProceed
    });
    return canProceed;
  };

  const acceptedFileTypes = {
    'application/pdf': '.pdf',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
    'application/msword': '.doc',
    'text/plain': '.txt',
    'text/markdown': '.md',
    'text/csv': '.csv',
    'application/json': '.json',
    // Add more permissive types
    'application/octet-stream': '', // Sometimes files are detected as this
    '': '' // Empty type fallback
  };

  const isFileTypeAccepted = (file: File) => {
    // Check MIME type
    if (Object.keys(acceptedFileTypes).includes(file.type)) {
      return true;
    }
    
    // Check file extension as fallback
    const extension = file.name.toLowerCase().split('.').pop();
    const acceptedExtensions = ['.pdf', '.docx', '.doc', '.txt', '.md', '.csv', '.json'];
    return acceptedExtensions.some(ext => ext.includes(extension || ''));
  };


  const handleFileSelect = async (files: FileList) => {
    console.log('handleFileSelect called with FileList of', files.length, 'files');
    const newDocuments: DocumentItem[] = [];
    const currentCount = state.uploadedDocuments.length;
    const maxFiles = 50;

    if (currentCount + files.length > maxFiles) {
      alert(`Maximum ${maxFiles} files allowed. You can upload ${maxFiles - currentCount} more files.`);
      return;
    }

    setState({ uploadProgress: 0 });

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      console.log(`Processing file ${i + 1}:`, file.name, file.type, file.size);
      
      // Validate file type
      if (!isFileTypeAccepted(file)) {
        console.warn(`File type not accepted:`, file.name, file.type);
        alert(`File type not supported for ${file.name}. Please use PDF, Word, TXT, MD, CSV, or JSON files.`);
        continue;
      }

      // Validate file size (max 10MB per file)
      if (file.size > 10 * 1024 * 1024) {
        console.warn(`File too large:`, file.name, file.size);
        alert(`File ${file.name} is too large (max 10MB per file).`);
        continue;
      }

      const documentItem: DocumentItem = {
        id: `doc-${Date.now()}-${i}`,
        name: file.name,
        size: file.size,
        type: file.type,
        file: file,
        uploadDate: new Date().toISOString(),
        textPreview: `Preview of ${file.name}...`
      };

      newDocuments.push(documentItem);
      console.log(`Added document:`, documentItem.name);
      
      // Simulate upload progress
      setState({ 
        uploadProgress: ((i + 1) / files.length) * 100 
      });
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log(`Final processing: ${newDocuments.length} valid documents`);
    if (newDocuments.length > 0) {
      console.log('Before setState - current state:', {
        uploadedDocuments: state.uploadedDocuments,
        selectedInputMethod: state.selectedInputMethod,
        newDocuments: newDocuments
      });
      
      setState({
        uploadedDocuments: [...state.uploadedDocuments, ...newDocuments],
        selectedInputMethod: 'upload', // Set input method when documents are uploaded
        uploadProgress: 100
      });
      console.log('State updated with new documents and selectedInputMethod set to upload');

      // Reset progress after a moment
      setTimeout(() => {
        setState({ uploadProgress: 0 });
      }, 1000);
    } else {
      console.log('No valid documents to add');
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      handleFileSelect(files);
    }
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      handleFileSelect(files);
    }
  };

  const removeDocument = (documentId: string) => {
    setState(prev => ({
      ...prev,
      uploadedDocuments: prev.uploadedDocuments.filter(doc => doc.id !== documentId)
    }));
  };

  const handleContinue = () => {
    // Set input method to upload and proceed directly to model selection (skip content selection for documents)
    setState({ selectedInputMethod: 'upload' });
    setCurrentStep(4);
  };

  return (
    <div className="space-y-8">
      <Card className="transform -rotate-1">
        <CardContent className="p-8">
          <div className="text-center mb-8">
            <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
              UPLOAD DOCUMENTS
            </h1>
            <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
              Upload your documents to create vector embeddings. Support for PDF, Word, text, and markdown files.
            </p>
          </div>

          {/* File Upload Area */}
          <FileUploadCard
            onFileUpload={(files) => {
              console.log('FileUploadCard onFileUpload called with:', files);
              if (files instanceof FileList) {
                console.log('Processing FileList with', files.length, 'files');
                handleFileSelect(files);
              } else {
                console.warn('Expected FileList but got:', typeof files, files);
              }
            }}
            accept=".pdf,.docx,.doc,.txt,.md,.csv,.json"
            multiple={true}
            title="Drop Documents Here"
            description="Drag & drop or click to browse"
            fileTypes="PDF, DOCX, TXT, MD, CSV, JSON (max 10MB each)"
            categoryColor="rgb(234, 88, 12)"
            categoryLabel="DOCUMENTS"
            bottomText="Upload your documents"
          />

          {/* Upload Progress */}
          {state.uploadProgress > 0 && state.uploadProgress < 100 && (
            <div className="mt-6">
              <div className="flex justify-between items-center mb-2">
                <span className="text-sm font-bold">UPLOADING FILES...</span>
                <span className="text-sm">{Math.round(state.uploadProgress)}%</span>
              </div>
              <Progress value={state.uploadProgress} className="w-full" />
            </div>
          )}

          {/* Uploaded Files List */}
          {state.uploadedDocuments.length > 0 && (
            <div className="mt-8">
              {state.uploadedDocuments.length > 10 && (
                <div className="mb-4 flex justify-center">
                  <Badge variant="default" className="bg-yellow-400 text-black border-3 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] font-black px-4 py-2">
                    SELECT 10 MAXIMUM FOR PROCESSING
                  </Badge>
                </div>
              )}
              <DocumentListCard 
                documents={state.uploadedDocuments}
                onRemoveDocument={removeDocument}
              />
            </div>
          )}

          {/* Info Cards */}
          <Card className="bg-yellow-100 mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="default" 
                  className="flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">DOCUMENT PROCESSING INFO</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Upload up to 50 documents, but you&apos;ll only be able to select 10 for processing. 
                    Larger documents will be automatically chunked for better embedding quality. Text will be extracted from all supported formats.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-4 mt-8">
            <Button
              variant="neutral"
              size="lg"
              className="flex-1 h-14 text-lg font-black uppercase"
              onClick={() => handleStepChange(1)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              variant="default"
              size="lg"
              className={`flex-1 h-14 text-lg font-black uppercase ${!canProceedFromStep2() ? 'opacity-50 cursor-not-allowed' : ''}`}
              onClick={handleContinue}
              disabled={!canProceedFromStep2()}
            >
              <span className="flex items-center justify-center">
                CONTINUE
                <UilArrowRight className="ml-2 h-6 w-6" />
              </span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/bulk/ExportStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { UilExport, UilArrowLeft, UilInfoCircle, UilCheckCircle, UilCloudDownload, UilFileAlt, UilDatabase, UilEye, UilChart, UilRefresh } from '@tooni/iconscout-unicons-react';
import { BulkOnboardingState, ExportOption } from './types';
import { useBulkProcessing } from '@/hooks/useBulkProcessing';

interface ExportStepProps {
  state: BulkOnboardingState;
  setState: (updates: Partial<BulkOnboardingState>) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
}

export function ExportStep({ 
  state, 
  setState, 
  setCurrentStep,
  handleStepChange
}: ExportStepProps) {
  
  const { exportResults, downloadFile, isExporting, exportProgress, downloadProgress } = useBulkProcessing();
  
  // Generate export options based on selected vector database
  const getExportOptions = (): ExportOption[] => {
    const baseOptions: ExportOption[] = [
      {
        id: 'json',
        label: 'JSON Export',
        Icon: UilFileAlt,
        color: 'bg-blue-600',
        description: 'Export embeddings and metadata as JSON files for easy integration',
        format: 'JSON'
      },
      {
        id: 'csv',
        label: 'CSV Export',
        Icon: UilFileAlt,
        color: 'bg-green-600',
        description: 'Export as CSV for analysis in spreadsheet applications',
        format: 'CSV'
      }
    ];

    // Add vector database specific option based on selection
    const vectorDbSpecificOptions: ExportOption[] = [];
    
    if (state.selectedVectorDb?.id === 'pinecone') {
      vectorDbSpecificOptions.push({
        id: 'vector',
        label: 'Pinecone Export',
        Icon: UilDatabase,
        color: 'bg-purple-600',
        description: 'Ready-to-import format with Pinecone configuration and import scripts',
        format: 'Pinecone Vector DB'
      });
    } else if (state.selectedVectorDb?.id === 'chromadb') {
      vectorDbSpecificOptions.push({
        id: 'vector',
        label: 'ChromaDB Export',
        Icon: UilDatabase,
        color: 'bg-orange-600',
        description: 'CSV/Parquet format with ChromaDB import scripts and configuration',
        format: 'ChromaDB Vector DB'
      });
      // Add parquet option for ChromaDB
      baseOptions.push({
        id: 'parquet',
        label: 'Parquet Export',
        Icon: UilFileAlt,
        color: 'bg-indigo-600',
        description: 'Efficient columnar format, ideal for ChromaDB and analytics',
        format: 'Parquet'
      });
    } else if (state.selectedVectorDb?.id === 'weaviate') {
      vectorDbSpecificOptions.push({
        id: 'vector',
        label: 'Weaviate Export',
        Icon: UilDatabase,
        color: 'bg-teal-600',
        description: 'GraphQL-ready format with Weaviate schema and import scripts',
        format: 'Weaviate Vector DB'
      });
    }

    const utilityOptions: ExportOption[] = [
      {
        id: 'viewer',
        label: 'Vector Viewer',
        Icon: UilChart,
        color: 'bg-red-600',
        description: 'Interactive visualization of your vector embeddings',
        format: 'Viewer'
      },
      {
        id: 'api',
        label: 'API Endpoint',
        Icon: UilDatabase,
        color: 'bg-gray-600',
        description: 'Generate API endpoints for programmatic access',
        format: 'API'
      }
    ];

    return [...vectorDbSpecificOptions, ...baseOptions, ...utilityOptions];
  };

  const exportOptions = getExportOptions();

  const handleExport = async (exportOption: ExportOption) => {
    console.log(`Exporting to ${exportOption.format}...`);
    
    // Check if we have a completed processing job
    if (!state.processingJob || state.processingJob.status !== 'completed') {
      alert('Please complete the processing step first before exporting.');
      return;
    }

    try {
      if (exportOption.id === 'viewer') {
        // Open vector viewer (future implementation)
        alert('Vector viewer will open in a new tab (coming soon!)');
        return;
      }
      
      if (exportOption.id === 'api') {
        // Generate API endpoint info (future implementation)
        alert('API endpoint configuration will be generated (coming soon!)');
        return;
      }

      // For actual exports, trigger the backend export process
      await exportResults({
        format: exportOption.id,
        jobId: state.processingJob.id
      });

    } catch (error) {
      console.error('Export failed:', error);
      alert(`Export failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  const handleStartOver = () => {
    setState({
      currentStep: 1,
      selectedPlatform: '',
      selectedInputMethod: '',
      channelUrl: '',
      pastedUrls: [],
      selectedContent: [],
      selectedEmbeddingModel: null,
      selectedVectorDb: null,
      bulkSettings: {
        chunkSize: 1024,
        chunkOverlap: 100,
        maxTokens: 2048,
      },
      processingJob: null,
      exportFormat: 'json',
      isLoading: false,
      loadProgress: 0,
      isProcessing: false,
      processProgress: 0,
    });
  };

  return (
    <div className="space-y-8">
      <Card className="transform -rotate-1">
        <CardContent className="p-8">
          <div className="text-center mb-8">
            <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
              EXPORT & COMPLETE
            </h1>
            <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
              Your vector database is ready! Choose how you want to export and use your embeddings.
            </p>
          </div>

          {/* Success Summary */}
          <Card className="bg-green-50 mb-8 border-4 border-green-500">
            <CardContent className="p-6">
              <div className="flex items-center gap-4 mb-4">
                <div className="w-16 h-16 bg-green-600 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] flex items-center justify-center">
                  <UilCheckCircle className="h-10 w-10 text-white" />
                </div>
                <div>
                  <h3 className="text-2xl font-black uppercase text-green-600">PROCESSING COMPLETE!</h3>
                  <p className="text-gray-700">Your vector database has been successfully created</p>
                </div>
              </div>
              
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-black text-green-600">
                    {state.selectedContent.length}
                  </div>
                  <div className="text-sm text-gray-600">Content Items</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-black text-green-600">
                    {state.selectedContent.length * 10}
                  </div>
                  <div className="text-sm text-gray-600">Embeddings</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-black text-green-600">
                    {state.selectedEmbeddingModel?.dimensions || 1024}
                  </div>
                  <div className="text-sm text-gray-600">Dimensions</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-black text-green-600">
                    {(state.selectedContent.length * 0.5).toFixed(1)}MB
                  </div>
                  <div className="text-sm text-gray-600">Database Size</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Export Options */}
          <div className="mb-8">
            <h3 className="text-xl font-black uppercase mb-6">EXPORT OPTIONS</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {exportOptions.map((option) => (
                <Card 
                  key={option.id}
                  className="cursor-pointer shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all"
                >
                  <CardContent className="p-6">
                    <div className="text-center mb-4">
                      <div className={`w-16 h-16 mx-auto mb-3 ${option.color} border-4 border-border shadow-shadow flex items-center justify-center`}>
                        <option.Icon className="h-8 w-8 text-white" />
                      </div>
                      <h4 className="font-black uppercase text-lg">{option.label}</h4>
                      <Badge variant="neutral" className="mt-2">
                        {option.format}
                      </Badge>
                    </div>
                    
                    <p className="text-sm text-gray-600 mb-4 leading-relaxed">
                      {option.description}
                    </p>
                    
                    <Button
                      onClick={() => handleExport(option)}
                      className="w-full h-10 text-sm font-black uppercase"
                      variant={option.id === 'viewer' ? 'default' : 'neutral'}
                      disabled={isExporting}
                    >
                      {option.id === 'viewer' ? (
                        <>
                          <UilEye className="mr-2 h-4 w-4" />
                          OPEN VIEWER
                        </>
                      ) : (
                        <>
                          <UilCloudDownload className="mr-2 h-4 w-4" />
                          {isExporting ? 'EXPORTING...' : 'EXPORT'}
                        </>
                      )}
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          {/* Export Progress */}
          {isExporting && (
            <Card className="bg-blue-50 mb-8 border-4 border-blue-500">
              <CardContent className="p-6">
                <div className="flex items-center gap-4 mb-4">
                  <div className="w-12 h-12 bg-blue-600 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] flex items-center justify-center">
                    <UilCloudDownload className="h-6 w-6 text-white animate-bounce" />
                  </div>
                  <div>
                    <h3 className="text-xl font-black uppercase text-blue-600">EXPORTING DATA</h3>
                    <p className="text-gray-700">Preparing your export file...</p>
                  </div>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-4 border-2 border-black">
                  <div 
                    className="bg-blue-600 h-full rounded-full transition-all duration-300"
                    style={{ width: `${exportProgress}%` }}
                  ></div>
                </div>
                <p className="text-sm text-gray-600 mt-2">{exportProgress}% complete</p>
              </CardContent>
            </Card>
          )}

          {/* Download Ready */}
          {downloadProgress && downloadProgress.status === 'completed' && (
            <Card className="bg-green-50 mb-8 border-4 border-green-500">
              <CardContent className="p-6">
                <div className="flex items-center gap-4 mb-4">
                  <div className="w-12 h-12 bg-green-600 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] flex items-center justify-center">
                    <UilCheckCircle className="h-6 w-6 text-white" />
                  </div>
                  <div>
                    <h3 className="text-xl font-black uppercase text-green-600">DOWNLOAD READY!</h3>
                    <p className="text-gray-700">Your export file is ready for download</p>
                  </div>
                </div>
                
                <div className="flex items-center justify-between bg-white p-4 border-2 border-black rounded">
                  <div>
                    <p className="font-bold">{downloadProgress.filename}</p>
                    <p className="text-sm text-gray-600">
                      {downloadProgress.fileSize ? `${(downloadProgress.fileSize / 1024 / 1024).toFixed(2)} MB` : 'Ready'}
                    </p>
                  </div>
                  <Button
                    onClick={() => downloadProgress.downloadUrl && downloadProgress.filename && 
                      downloadFile(downloadProgress.downloadUrl, downloadProgress.filename)
                    }
                    className="h-10 text-sm font-black uppercase"
                  >
                    <UilCloudDownload className="mr-2 h-4 w-4" />
                    DOWNLOAD
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Configuration Summary */}
          <Card className="bg-orange-50 mb-6">
            <CardContent className="p-6">
              <h3 className="text-lg font-black uppercase mb-4">FINAL CONFIGURATION</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="font-bold">Platform:</span>
                    <span className="capitalize">{state.selectedPlatform}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-bold">Input Method:</span>
                    <span className="capitalize">{state.selectedInputMethod}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-bold">Content Count:</span>
                    <span>{state.selectedContent.length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-bold">Embedding Model:</span>
                    <span>{state.selectedEmbeddingModel?.label}</span>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="font-bold">Vector Database:</span>
                    <span>{state.selectedVectorDb?.label}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-bold">Chunk Size:</span>
                    <span>{state.bulkSettings.chunkSize} tokens</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-bold">Chunk Overlap:</span>
                    <span>{state.bulkSettings.chunkOverlap} tokens</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-bold">Total Embeddings:</span>
                    <span>{state.selectedContent.length * 10}</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-yellow-100 mb-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="default" 
                  className="flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">NEXT STEPS</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Your vector database is ready for use! You can export the data in various formats, 
                    integrate it with your applications, or use our visualization tools to explore the embeddings. 
                    The database will remain accessible for future exports.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-4 mt-8">
            <Button
              variant="neutral"
              size="lg"
              className="flex-1 h-14 text-lg font-black uppercase"
              onClick={() => handleStepChange(7)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              variant="reverse"
              size="lg"
              className="flex-1 h-14 text-lg font-black uppercase"
              onClick={handleStartOver}
            >
              <UilRefresh className="mr-2 h-6 w-6" />
              START NEW PROJECT
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/bulk/InputMethodStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Star15 } from '@/components/ui/star';
import { UilLink, UilArrowRight, UilArrowLeft, UilInfoCircle, UilListUl, UilChannel, UilPlay } from '@tooni/iconscout-unicons-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { BulkOnboardingState, InputType } from './types';

interface InputMethodStepProps {
  state: BulkOnboardingState;
  setState: (updates: Partial<BulkOnboardingState>) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
  handleLoadContent: () => Promise<void>;
}

export function InputMethodStep({ 
  state, 
  setState, 
  setCurrentStep,
  handleStepChange,
  handleLoadContent
}: InputMethodStepProps) {
  
  const canProceedFromStep2 = () => {
    if (state.selectedInputMethod === 'urls' || state.selectedPlatform === 'web') {
      return state.pastedUrls.length > 0;
    }
    return state.channelUrl.trim() !== '';
  };

  const handleInputMethodSelect = (inputMethod: InputType) => {
    setState({ 
      selectedInputMethod: inputMethod,
      channelUrl: '',
      pastedUrls: []
    });
  };

  const handleChannelUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setState({ channelUrl: e.target.value });
  };

  const handlePastedUrlsChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const urls = e.target.value.split('\n').filter(url => url.trim() !== '');
    setState({ pastedUrls: urls });
  };

  const handleContinue = async () => {
    if (state.selectedInputMethod === 'urls') {
      // Skip loading step for URLs, go straight to content selection
      setCurrentStep(3);
    } else {
      // Load content from channel
      await handleLoadContent();
    }
  };

  const getPlatformInfo = () => {
    switch (state.selectedPlatform) {
      case 'youtube':
        return {
          name: 'YouTube',
          channelPlaceholder: 'Enter YouTube channel URL or @username',
          urlsPlaceholder: 'https://youtube.com/watch?v=...\nhttps://youtu.be/...\nhttps://youtube.com/watch?v=...',
          channelExample: '@mkbhd or https://youtube.com/@mkbhd',
          urlsExample: 'YouTube video URLs, one per line'
        };
      case 'twitch':
        return {
          name: 'Twitch',
          channelPlaceholder: 'Enter Twitch channel URL or username',
          urlsPlaceholder: 'https://twitch.tv/videos/...\nhttps://twitch.tv/videos/...\nhttps://twitch.tv/videos/...',
          channelExample: 'shroud or https://twitch.tv/shroud',
          urlsExample: 'Twitch VOD URLs, one per line'
        };
      case 'tiktok':
        return {
          name: 'TikTok',
          channelPlaceholder: 'Enter TikTok user URL or @username',
          urlsPlaceholder: 'https://tiktok.com/@user/video/...\nhttps://tiktok.com/@user/video/...\nhttps://tiktok.com/@user/video/...',
          channelExample: '@username or https://tiktok.com/@username',
          urlsExample: 'TikTok video URLs, one per line'
        };
      case 'web':
        return {
          name: 'Web Pages',
          channelPlaceholder: 'Enter website URL',
          urlsPlaceholder: 'https://example.com/page1\nhttps://example.com/page2\nhttps://docs.example.com/article',
          channelExample: 'https://jina.ai or https://docs.example.com',
          urlsExample: 'Web page URLs, one per line'
        };
      default:
        return {
          name: 'Platform',
          channelPlaceholder: 'Enter channel URL or username',
          urlsPlaceholder: 'Enter URLs, one per line',
          channelExample: 'Channel name or URL',
          urlsExample: 'Video URLs, one per line'
        };
    }
  };

  const platformInfo = getPlatformInfo();

  // For web platform, skip method selection and go straight to URL input
  if (state.selectedPlatform === 'web') {
    return (
      <div className="space-y-8">
        <Card className="transform -rotate-1">
          <CardContent className="p-8">
            <div className="text-center mb-8">
              <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                WEB PAGES
              </h1>
              <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
                ENTER YOUR URLs
              </p>
            </div>

            <div className="space-y-4">
              <div>
                <label htmlFor="pastedUrls" className="block text-sm font-bold text-gray-700 mb-2 uppercase">
                  {platformInfo.name} URLs (Max 20)
                </label>
                <Textarea
                  id="pastedUrls"
                  placeholder={platformInfo.urlsPlaceholder}
                  value={state.pastedUrls.join('\n')}
                  onChange={handlePastedUrlsChange}
                  className="min-h-[120px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
                />
                <p className="text-sm text-gray-500 mt-2">
                  {platformInfo.urlsExample} ({state.pastedUrls.length}/20 URLs)
                </p>
              </div>
              
              {state.pastedUrls.length > 20 && (
                <div className="bg-red-100 border-2 border-red-500 p-3 rounded">
                  <p className="text-red-700 font-bold text-sm">
                    ⚠️ Maximum 20 URLs allowed. Please remove {state.pastedUrls.length - 20} URLs.
                  </p>
                </div>
              )}
            </div>

            <div className="flex gap-4 mt-8">
              <Button
                variant="neutral"
                size="lg"
                className="flex-1 h-14 text-lg font-black uppercase"
                onClick={() => handleStepChange(1)}
              >
                <UilArrowLeft className="mr-2 h-6 w-6" />
                BACK
              </Button>
              <Button
                variant="default"
                size="lg"
                className={`flex-1 h-14 text-lg font-black uppercase ${!canProceedFromStep2() ? 'opacity-50 cursor-not-allowed' : ''}`}
                onClick={handleContinue}
                disabled={!canProceedFromStep2() || state.pastedUrls.length > 20}
              >
                <span className="flex items-center justify-center">
                  CONTINUE
                  <UilArrowRight className="ml-2 h-6 w-6" />
                </span>
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <Card className="transform -rotate-1">
        <CardContent className="p-8">
          <div className="text-center mb-8">
            <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
              INPUT METHOD
            </h1>
            <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
              Choose how to specify the {platformInfo.name} content you want to process.
            </p>
          </div>
          
          <TooltipProvider>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-8">
              <div className="relative">
                {state.selectedInputMethod === 'channel' && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Card 
                      className={`cursor-pointer shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all ${
                        state.selectedInputMethod === 'channel' ? 'bg-orange-100' : 'bg-background'
                      }`}
                      onClick={() => handleInputMethodSelect('channel')}
                    >
                      <CardContent className="p-6 text-center">
                        <div className="w-16 h-16 mx-auto mb-3 bg-blue-600 border-4 border-border shadow-shadow flex items-center justify-center">
                          <UilChannel className="h-10 w-10 text-white" />
                        </div>
                        <h4 className="font-black uppercase text-xl">CHANNEL/USER</h4>
                        <p className="text-sm text-gray-600 mt-2">Process entire channel</p>
                      </CardContent>
                    </Card>
                  </TooltipTrigger>
                  <TooltipContent className="max-w-xs">
                    <p>Enter a {platformInfo.name} channel or user URL. We&apos;ll automatically fetch the latest videos from the channel.</p>
                  </TooltipContent>
                </Tooltip>
              </div>

              <div className="relative">
                {state.selectedInputMethod === 'urls' && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Card 
                      className={`cursor-pointer shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all ${
                        state.selectedInputMethod === 'urls' ? 'bg-orange-100' : 'bg-background'
                      }`}
                      onClick={() => handleInputMethodSelect('urls')}
                    >
                      <CardContent className="p-6 text-center">
                        <div className="w-16 h-16 mx-auto mb-3 bg-green-600 border-4 border-border shadow-shadow flex items-center justify-center">
                          <UilListUl className="h-10 w-10 text-white" />
                        </div>
                        <h4 className="font-black uppercase text-xl">SPECIFIC URLS</h4>
                        <p className="text-sm text-gray-600 mt-2">Process selected videos</p>
                      </CardContent>
                    </Card>
                  </TooltipTrigger>
                  <TooltipContent className="max-w-xs">
                    <p>Paste specific {platformInfo.name} video URLs (one per line) to process only those videos. Maximum 20 URLs.</p>
                  </TooltipContent>
                </Tooltip>
              </div>
            </div>
          </TooltipProvider>

          {state.selectedInputMethod === 'channel' && (
            <div className="space-y-4">
              <div>
                <label htmlFor="channelUrl" className="block text-sm font-bold text-gray-700 mb-2 uppercase">
                  {platformInfo.name} Channel URL or Username
                </label>
                <Input
                  id="channelUrl"
                  type="text"
                  placeholder={platformInfo.channelPlaceholder}
                  value={state.channelUrl}
                  onChange={handleChannelUrlChange}
                  className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
                />
                <p className="text-sm text-gray-500 mt-2">
                  Example: {platformInfo.channelExample}
                </p>
              </div>
            </div>
          )}

          {state.selectedInputMethod === 'urls' && (
            <div className="space-y-4">
              <div>
                <label htmlFor="pastedUrls" className="block text-sm font-bold text-gray-700 mb-2 uppercase">
                  {platformInfo.name} Video URLs (Max 20)
                </label>
                <Textarea
                  id="pastedUrls"
                  placeholder={platformInfo.urlsPlaceholder}
                  value={state.pastedUrls.join('\n')}
                  onChange={handlePastedUrlsChange}
                  className="min-h-[120px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
                />
                <p className="text-sm text-gray-500 mt-2">
                  {platformInfo.urlsExample} ({state.pastedUrls.length}/20 URLs)
                </p>
              </div>
              
              {state.pastedUrls.length > 20 && (
                <div className="bg-red-100 border-2 border-red-500 p-3 rounded">
                  <p className="text-red-700 font-bold text-sm">
                    ⚠️ Maximum 20 URLs allowed. Please remove {state.pastedUrls.length - 20} URLs.
                  </p>
                </div>
              )}
            </div>
          )}

          <Card className="bg-yellow-100 mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="default" 
                  className="flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">PROCESSING LIMITS</p>
                  <p className="text-sm text-gray-700 mt-1">
                    {state.selectedInputMethod === 'channel' ? 
                      `Channel processing will fetch up to 20 recent videos automatically. For specific content, use the URL method.` :
                      `You can process up to 20 videos at once. Each video will be transcribed and processed into vector embeddings.`
                    }
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-4 mt-8">
            <Button
              variant="neutral"
              size="lg"
              className="flex-1 h-14 text-lg font-black uppercase"
              onClick={() => handleStepChange(1)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              variant="default"
              size="lg"
              className={`flex-1 h-14 text-lg font-black uppercase ${!canProceedFromStep2() ? 'opacity-50 cursor-not-allowed' : ''}`}
              onClick={handleContinue}
              disabled={!canProceedFromStep2() || state.pastedUrls.length > 20}
            >
              <span className="flex items-center justify-center">
                {state.selectedInputMethod === 'urls' ? 'CONTINUE' : 'LOAD CONTENT'}
                <UilArrowRight className="ml-2 h-6 w-6" />
              </span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/bulk/ModelSelectionStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Star15 } from '@/components/ui/star';
import { UilBrain, UilArrowRight, UilArrowLeft, UilInfoCircle, UilRobot, UilCloud, UilCog } from '@tooni/iconscout-unicons-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { BulkOnboardingState, EmbeddingModel } from './types';
import { useEmbeddingModels } from '@/hooks/useEmbeddingModels';

interface ModelSelectionStepProps {
  state: BulkOnboardingState;
  setState: (updates: Partial<BulkOnboardingState>) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
}

export function ModelSelectionStep({ 
  state, 
  setState, 
  setCurrentStep,
  handleStepChange
}: ModelSelectionStepProps) {
  
  const { models: apiModels, isLoading: modelsLoading, error: modelsError } = useEmbeddingModels();
  
  // Icon mapping for models
  const iconMap = {
    'jina-v4': UilBrain,
    'gemini-embedding-exp': UilCloud
  };
  
  // Add icons to models
  const embeddingModels: EmbeddingModel[] = apiModels.map(model => ({
    ...model,
    Icon: iconMap[model.id as keyof typeof iconMap] || UilBrain
  }));
  
  // Use API models or fallback
  const modelsToUse = embeddingModels.length > 0 ? embeddingModels : apiModels;

  const canProceedFromStep4 = () => state.selectedEmbeddingModel !== null;

  const handleModelSelect = (model: EmbeddingModel) => {
    setState({ selectedEmbeddingModel: model });
  };

  if (modelsLoading) {
    return (
      <div className="space-y-8">
        <Card className="transform -rotate-1">
          <CardContent className="p-8">
            <div className="text-center">
              <h1 className="text-4xl md:text-5xl font-black uppercase text-black mb-4">
                LOADING MODELS
              </h1>
              <div className="animate-spin h-8 w-8 border-4 border-orange-600 border-t-transparent rounded-full mx-auto mb-4"></div>
              <p className="text-gray-600">Fetching latest model information...</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <Card className="transform -rotate-1">
        <CardContent className="p-8">
          <div className="text-center mb-8">
            <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
              SELECT EMBEDDING MODEL
            </h1>
            <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
              Choose the AI model that will convert your content into vector embeddings for searchable knowledge bases.
            </p>
            {modelsError && (
              <div className="mt-3 text-sm text-yellow-600 bg-yellow-50 border border-yellow-200 rounded p-2">
                Using cached model data (API temporarily unavailable)
              </div>
            )}
          </div>
          
          <TooltipProvider>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
              {modelsToUse.map((model) => (
                <div key={model.id} className="relative">
                  {state.selectedEmbeddingModel?.id === model.id && (
                    <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                      <div className="relative">
                        <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                          <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                        </div>
                        <div className="absolute inset-0 flex items-center justify-center">
                          <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                            SELECTED
                          </span>
                        </div>
                      </div>
                    </div>
                  )}
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Card 
                        className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
                          state.selectedEmbeddingModel?.id === model.id ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                        }`}
                        onClick={() => handleModelSelect(model)}
                      >
                        <CardContent className="p-6">
                          <div className="flex items-start gap-4 mb-4">
                            <div className={`w-16 h-16 ${model.color} border-4 border-black flex items-center justify-center flex-shrink-0`}>
                              <model.Icon className="h-10 w-10 text-white" />
                            </div>
                            <div className="flex-1">
                              <h4 className="font-black uppercase text-lg leading-tight">{model.label}</h4>
                              {model.experimental && (
                                <span className="inline-block bg-orange-400 text-black text-xs font-bold px-2 py-1 border-2 border-black mt-1">
                                  EXPERIMENTAL
                                </span>
                              )}
                              {model.ranking && (
                                <span className="inline-block bg-yellow-400 text-black text-xs font-bold px-2 py-1 border-2 border-black mt-1 ml-2">
                                  {model.ranking}
                                </span>
                              )}
                            </div>
                          </div>
                          
                          <p className="text-sm text-gray-700 mb-4">{model.description}</p>
                          
                          <div className="grid grid-cols-2 gap-3 text-xs">
                            <div className="bg-gray-100 border-2 border-black p-2">
                              <div className="font-bold text-gray-600">DIMENSIONS</div>
                              <div className="font-black text-lg">{model.dimensions}</div>
                            </div>
                            <div className="bg-gray-100 border-2 border-black p-2">
                              <div className="font-bold text-gray-600">MTEB SCORE</div>
                              <div className="font-black text-lg">{model.mtebScore}</div>
                            </div>
                            <div className="bg-gray-100 border-2 border-black p-2">
                              <div className="font-bold text-gray-600">MAX TOKENS</div>
                              <div className="font-black">{model.maxTokens?.toLocaleString()}</div>
                            </div>
                            <div className="bg-gray-100 border-2 border-black p-2">
                              <div className="font-bold text-gray-600">LANGUAGES</div>
                              <div className="font-black">{model.supportedLanguages}+</div>
                            </div>
                          </div>
                          
                          <div className="flex gap-2 mt-3 text-xs">
                            {model.multimodal && (
                              <span className="bg-cyan-300 text-black font-bold px-2 py-1 border border-black">
                                MULTIMODAL
                              </span>
                            )}
                            {model.hasMatryoshka && (
                              <span className="bg-pink-300 text-black font-bold px-2 py-1 border border-black">
                                MATRYOSHKA
                              </span>
                            )}
                          </div>
                        </CardContent>
                      </Card>
                    </TooltipTrigger>
                    <TooltipContent className="max-w-xs">
                      <p>{model.tooltip}</p>
                    </TooltipContent>
                  </Tooltip>
                </div>
              ))}
            </div>
          </TooltipProvider>

          <Card className="bg-yellow-100 border-2 border-black mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">CHOOSING AN EMBEDDING MODEL</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Choose between our two premium models: Gemini Experimental leads with highest MTEB performance, while Jina V4 provides excellent multimodal capabilities and proven reliability.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-4 mt-8">
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
              onClick={() => {
                // For documents platform, skip content selection step (3) and go back to document upload (2)
                const previousStep = state.selectedPlatform === 'documents' ? 2 : state.currentStep - 1;
                handleStepChange(previousStep);
              }}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              className={`flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black ${!canProceedFromStep4() ? 'opacity-50 cursor-not-allowed' : ''}`}
              onClick={() => setCurrentStep(5)}
              disabled={!canProceedFromStep4()}
            >
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/bulk/PlatformSelectionStep.tsx
================================================
'use client';

import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Star15 } from '@/components/ui/star';
import { UilYoutube, UilArrowRight, UilInfoCircle, UilDatabase, UilFileAlt, UilGlobe } from '@tooni/iconscout-unicons-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Platform, BulkOnboardingState } from './types';

interface PlatformSelectionStepProps {
  state: BulkOnboardingState;
  setState: (updates: Partial<BulkOnboardingState>) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
}

export function PlatformSelectionStep({ 
  state, 
  setState, 
  setCurrentStep,
  handleStepChange
}: PlatformSelectionStepProps) {
  
  const canProceedFromStep1 = () => state.selectedPlatform !== '';

  const handlePlatformSelect = (platform: Platform) => {
    console.log('Platform selected:', platform);
    if (platform === 'documents') {
      setState({ 
        selectedPlatform: platform,
        selectedInputMethod: 'upload' // Pre-set input method for documents
      });
    } else {
      setState({ selectedPlatform: platform });
    }
  };

  return (
    <div className="space-y-8">
      <Card className="transform -rotate-1">
        <CardContent className="p-8">
          <div className="text-center mb-8">
            <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
              CHOOSE CONTENT SOURCE
            </h1>
            <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
              Select your content platform. We&apos;ll process the content to create vector embeddings for your knowledge base.
            </p>
          </div>
          
          <TooltipProvider>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8 max-w-4xl mx-auto">
              <div className="relative">
                {state.selectedPlatform === 'youtube' && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Card 
                      className={`cursor-pointer shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all ${
                        state.selectedPlatform === 'youtube' ? 'bg-orange-100' : 'bg-background'
                      }`}
                      onClick={() => handlePlatformSelect('youtube')}
                    >
                      <CardContent className="p-6 text-center">
                        <div className="w-16 h-16 mx-auto mb-3 bg-red-600 border-4 border-border shadow-shadow flex items-center justify-center">
                          <UilYoutube className="h-10 w-10 text-white" />
                        </div>
                        <h4 className="font-black uppercase text-xl">YOUTUBE</h4>
                        <p className="text-sm text-gray-600 mt-2">Process channel content</p>
                      </CardContent>
                    </Card>
                  </TooltipTrigger>
                  <TooltipContent className="max-w-xs">
                    <p>Extract transcripts from YouTube channels and videos. Perfect for educational content, tutorials, and long-form discussions.</p>
                  </TooltipContent>
                </Tooltip>
              </div>

              <div className="relative">
                {state.selectedPlatform === 'twitch' && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Card 
                      className={`cursor-pointer shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all ${
                        state.selectedPlatform === 'twitch' ? 'bg-orange-100' : 'bg-background'
                      }`}
                      onClick={() => handlePlatformSelect('twitch')}
                    >
                      <CardContent className="p-6 text-center">
                        <div className="w-16 h-16 mx-auto mb-3 bg-purple-600 border-4 border-border shadow-shadow flex items-center justify-center">
                          <Image src="/twitch.svg" alt="Twitch" width={40} height={40} className="h-10 w-10 filter brightness-0 invert" />
                        </div>
                        <h4 className="font-black uppercase text-xl">TWITCH</h4>
                        <p className="text-sm text-gray-600 mt-2">Process stream content</p>
                      </CardContent>
                    </Card>
                  </TooltipTrigger>
                  <TooltipContent className="max-w-xs">
                    <p>Extract content from Twitch streams and VODs. Great for gaming discussions, live commentary, and community interactions.</p>
                  </TooltipContent>
                </Tooltip>
              </div>

              <div className="relative">
                {state.selectedPlatform === 'tiktok' && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Card 
                      className={`cursor-pointer shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all ${
                        state.selectedPlatform === 'tiktok' ? 'bg-orange-100' : 'bg-background'
                      }`}
                      onClick={() => handlePlatformSelect('tiktok')}
                    >
                      <CardContent className="p-6 text-center">
                        <div className="w-16 h-16 mx-auto mb-3 bg-black border-4 border-border shadow-shadow flex items-center justify-center">
                          <Image src="/tiktok.svg" alt="TikTok" width={40} height={40} className="h-10 w-10 filter brightness-0 invert" />
                        </div>
                        <h4 className="font-black uppercase text-xl">TIKTOK</h4>
                        <p className="text-sm text-gray-600 mt-2">Process creator content</p>
                      </CardContent>
                    </Card>
                  </TooltipTrigger>
                  <TooltipContent className="max-w-xs">
                    <p>Extract transcripts from TikTok videos. Ideal for short-form content, trends, and viral video analysis.</p>
                  </TooltipContent>
                </Tooltip>
              </div>

              <div className="relative">
                {state.selectedPlatform === 'documents' && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Card 
                      className={`cursor-pointer shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all ${
                        state.selectedPlatform === 'documents' ? 'bg-orange-100' : 'bg-background'
                      }`}
                      onClick={() => handlePlatformSelect('documents')}
                    >
                      <CardContent className="p-6 text-center">
                        <div className="w-16 h-16 mx-auto mb-3 bg-blue-600 border-4 border-border shadow-shadow flex items-center justify-center">
                          <UilFileAlt className="h-10 w-10 text-white" />
                        </div>
                        <h4 className="font-black uppercase text-xl">DOCUMENTS</h4>
                        <p className="text-sm text-gray-600 mt-2">Upload your files</p>
                      </CardContent>
                    </Card>
                  </TooltipTrigger>
                  <TooltipContent className="max-w-xs">
                    <p>Upload PDF, Word, text, and markdown documents. Perfect for creating knowledge bases from your own content.</p>
                  </TooltipContent>
                </Tooltip>
              </div>

              <div className="relative">
                {state.selectedPlatform === 'web' && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Card 
                      className={`cursor-pointer shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all ${
                        state.selectedPlatform === 'web' ? 'bg-orange-100' : 'bg-background'
                      }`}
                      onClick={() => handlePlatformSelect('web')}
                    >
                      <CardContent className="p-6 text-center">
                        <div className="w-16 h-16 mx-auto mb-3 bg-green-600 border-4 border-border shadow-shadow flex items-center justify-center">
                          <UilGlobe className="h-10 w-10 text-white" />
                        </div>
                        <h4 className="font-black uppercase text-xl">WEB PAGES</h4>
                        <p className="text-sm text-gray-600 mt-2">Process website content</p>
                      </CardContent>
                    </Card>
                  </TooltipTrigger>
                  <TooltipContent className="max-w-xs">
                    <p>Extract content from web pages and websites. Perfect for creating knowledge bases from online documentation, articles, and web content.</p>
                  </TooltipContent>
                </Tooltip>
              </div>
            </div>
          </TooltipProvider>

          <Card className="bg-yellow-100 mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="default" 
                  className="flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">BULK PROCESSING INFO</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Bulk processing will extract transcripts from multiple videos, chunk the content, and create vector embeddings. 
                    Choose platforms with good audio quality for the best transcript accuracy.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Button
            variant="default"
            size="lg"
            className={`w-full mt-8 h-14 text-lg font-black uppercase ${!canProceedFromStep1() ? 'opacity-50 cursor-not-allowed' : ''}`}
            onClick={() => setCurrentStep(2)}
            disabled={!canProceedFromStep1()}
          >
            <span className="flex items-center justify-center">
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </span>
          </Button>
        </CardContent>
      </Card>

      <Card className="transform -rotate-1 relative overflow-hidden bg-orange-50">
        <CardContent className="pt-6">
          <div className="flex items-start gap-4">
            <Button
              size="icon"
              variant="default"
              className="w-12 h-12 flex-shrink-0"
            >
              <UilDatabase className="h-6 w-6" />
            </Button>
            <div className="flex-1">
              <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                VECTOR DATABASE CREATION
              </h3>
              <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                Advanced AI technology extracts <span className="font-black text-orange-600">transcripts, creates embeddings, and builds searchable knowledge bases</span> from any content. 
                Perfect for creating AI assistants, content recommendations, and intelligent search systems.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                  <span className="text-black font-medium">Automatic transcription</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                  <span className="text-black font-medium">Smart content chunking</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                  <span className="text-black font-medium">Vector embeddings</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-orange-600 rounded-full"></div>
                  <span className="text-black font-medium">Multiple export formats</span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/bulk/ProcessingStep.tsx
================================================
'use client';

import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Slider } from '@/components/ui/slider';
import { UilSpinner, UilArrowRight, UilArrowLeft, UilArrowUp, UilInfoCircle, UilPlay, UilCheckCircle, UilCog, UilFileAlt, UilBrain, UilDatabase, UilYoutube, UilUpload, UilLink, UilUser, UilClock, UilProcessor, UilLayers, UilExport, UilDownloadAlt, UilDocumentLayoutLeft } from '@tooni/iconscout-unicons-react';
import { Badge } from '@/components/ui/badge';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Star15 } from '@/components/ui/star';
import { useVideoPreviewContext } from '@/contexts/VideoPreviewContext';
import { BulkOnboardingState, ExportFormat, DownloadInfo } from './types';
import { useBulkProcessing } from '@/hooks/useBulkProcessing';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

interface ProcessingStepProps {
  state: BulkOnboardingState;
  setState: (updates: Partial<BulkOnboardingState>) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
  // Platform-specific content data
  tiktokUser?: any;
  tiktokVideos?: any[];
  youtubeChannel?: any;
  youtubeVideos?: any[];
  twitchChannel?: any;
  twitchVideos?: any[];
  twitchChannelDataComplete?: boolean;
}

export function ProcessingStep({ 
  state, 
  setState, 
  setCurrentStep,
  handleStepChange,
  tiktokUser,
  tiktokVideos = [],
  youtubeChannel,
  youtubeVideos = [],
  twitchChannel,
  twitchVideos = [],
  twitchChannelDataComplete
}: ProcessingStepProps) {
  
  const [showSettings, setShowSettings] = React.useState(false);
  const [showExportOptions, setShowExportOptions] = React.useState(false);
  const [selectedExportFormat, setSelectedExportFormat] = React.useState<string>('json');
  const { generatePreview, getPreview } = useVideoPreviewContext();
  const [hoveredVideoId, setHoveredVideoId] = React.useState<string | null>(null);
  const [tooltipOpen, setTooltipOpen] = React.useState<string | null>(null);
  const hoverTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  const currentVideoRef = React.useRef<HTMLVideoElement | null>(null);
  
  // Bulk processing hook
  const {
    isProcessing: apiIsProcessing,
    processProgress: apiProcessProgress,
    processingJob: apiProcessingJob,
    error: processingError,
    isExporting,
    exportProgress,
    downloadProgress,
    exportHistory,
    startBulkProcessing,
    exportResults,
    downloadFile,
    cleanup: cleanupProcessing
  } = useBulkProcessing();

  // Cleanup on unmount
  React.useEffect(() => {
    return () => {
      cleanupProcessing();
    };
  }, [cleanupProcessing]);

  // Get videos based on platform
  const videos = React.useMemo(() => {
    return state.selectedPlatform === 'tiktok' ? tiktokVideos : 
           state.selectedPlatform === 'youtube' ? youtubeVideos : 
           state.selectedPlatform === 'twitch' ? twitchVideos : [];
  }, [state.selectedPlatform, tiktokVideos, youtubeVideos, twitchVideos]);

  const channel = state.selectedPlatform === 'tiktok' ? tiktokUser : 
                  state.selectedPlatform === 'youtube' ? youtubeChannel : 
                  state.selectedPlatform === 'twitch' ? twitchChannel : null;

  // Filter selected videos
  const selectedVideos = React.useMemo(() => {
    return videos.filter(video => {
      const videoId = video.id || video.video_id || video.videoId;
      return state.selectedContent.includes(videoId);
    });
  }, [videos, state.selectedContent]);

  // Content selection handlers
  const toggleContentSelection = (contentId: string) => {
    setState({
      selectedContent: state.selectedContent.includes(contentId) 
        ? state.selectedContent.filter(id => id !== contentId)
        : [...state.selectedContent, contentId]
    });
  };

  const canProceedFromStep6 = () => (!state.isProcessing && !apiIsProcessing) || state.processProgress === 100 || apiProcessProgress === 100;
  
  // Export format options
  const exportFormats: ExportFormat[] = [
    {
      id: 'json',
      label: 'JSON',
      Icon: UilDocumentLayoutLeft,
      color: 'bg-blue-500',
      description: 'Standard JSON format for general use',
      fileExtension: '.json',
      mimeType: 'application/json',
      features: ['Human readable', 'Widely supported', 'Structured data']
    },
    {
      id: 'csv',
      label: 'CSV',
      Icon: UilFileAlt,
      color: 'bg-green-500',
      description: 'Comma-separated values for spreadsheets',
      fileExtension: '.csv',
      mimeType: 'text/csv',
      features: ['Excel compatible', 'Simple format', 'Easy analysis']
    },
    {
      id: 'parquet',
      label: 'Parquet',
      Icon: UilDatabase,
      color: 'bg-purple-500',
      description: 'Optimized columnar format for big data',
      fileExtension: '.parquet',
      mimeType: 'application/octet-stream',
      features: ['Compressed', 'Fast queries', 'Type safe']
    },
    {
      id: 'vector',
      label: 'Vector DB',
      Icon: UilBrain,
      color: 'bg-orange-500',
      description: 'Ready-to-import vector database format',
      fileExtension: '.db',
      mimeType: 'application/octet-stream',
      features: ['Pre-indexed', 'Direct import', 'Optimized']
    }
  ];

  const handleStartProcessing = async () => {
    try {
      // Update local state for immediate UI feedback
      setState({ 
        isProcessing: true, 
        processProgress: 0,
        processingJob: {
          id: `job-${Date.now()}`,
          status: 'pending',
          progress: 0,
          stage: 'Initializing...',
          contentProcessed: 0,
          totalContent: state.selectedContent.length,
          embeddings: 0
        }
      });

      // Start real bulk processing via API
      await startBulkProcessing({
        platform: state.selectedPlatform,
        inputMethod: state.selectedInputMethod,
        channelUrl: state.channelUrl,
        pastedUrls: state.pastedUrls,
        selectedContent: state.selectedContent,
        uploadedDocuments: state.uploadedDocuments,
        embeddingModel: state.selectedEmbeddingModel!,
        vectorDb: state.selectedVectorDb!,
        bulkSettings: state.bulkSettings
      });
      
    } catch (error) {
      console.error('Error starting bulk processing:', error);
      setState(prev => ({
        ...prev,
        isProcessing: false,
        processingJob: prev.processingJob ? {
          ...prev.processingJob,
          status: 'failed',
          error: error instanceof Error ? error.message : 'Processing failed'
        } : null
      }));
    }
  };

  const handleBulkSettingsChange = (field: keyof typeof state.bulkSettings, value: number) => {
    setState({
      bulkSettings: {
        ...state.bulkSettings,
        [field]: value
      }
    });
  };

  const handleTranscriptProcessingChange = (field: string, value: any) => {
    setState({
      bulkSettings: {
        ...state.bulkSettings,
        transcriptProcessing: {
          ...state.bulkSettings.transcriptProcessing,
          [field]: value
        }
      }
    });
  };

  const handleExportResults = async () => {
    if (!state.processingJob?.id && !apiProcessingJob?.id) {
      console.error('No processing job ID available for export');
      return;
    }

    try {
      const jobId = apiProcessingJob?.id || state.processingJob?.id || '';
      await exportResults({
        format: selectedExportFormat as 'json' | 'csv' | 'parquet' | 'vector',
        jobId
      });
      setShowExportOptions(true);
    } catch (error) {
      console.error('Error starting export:', error);
    }
  };

  const handleDownload = async (downloadUrl: string, filename: string) => {
    try {
      await downloadFile(downloadUrl, filename);
    } catch (error) {
      console.error('Error downloading file:', error);
    }
  };

  const getProcessingStageIcon = () => {
    if (!state.processingJob) return <UilCog className="h-6 w-6" />;
    
    // Ensure stage is a string before switching
    const stage = typeof state.processingJob.stage === 'string' ? state.processingJob.stage : '';
    
    switch (stage) {
      case 'Downloading content...':
        return <UilFileAlt className="h-6 w-6" />;
      case 'Extracting transcripts...':
        return <UilFileAlt className="h-6 w-6" />;
      case 'Chunking content...':
        return <UilCog className="h-6 w-6" />;
      case 'Generating embeddings...':
        return <UilBrain className="h-6 w-6" />;
      case 'Storing in vector database...':
        return <UilDatabase className="h-6 w-6" />;
      default:
        return <UilCheckCircle className="h-6 w-6" />;
    }
  };

  return (
    <div className="space-y-8">
      <Card className="transform -rotate-1">
        <CardContent className="p-8">
          <div className="text-center mb-8">
            <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
              {state.isProcessing ? 'PROCESSING CONTENT' : 'REVIEW & PROCESS'}
            </h1>
            <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
              {state.isProcessing 
                ? 'Creating vector embeddings from your selected content...'
                : 'Review your configuration and start the bulk processing workflow.'
              }
            </p>
          </div>

          {!state.isProcessing && state.processProgress < 100 && (
            <>
              {/* Configuration Summary */}
              <Card className="bg-orange-50 mb-6">
                <CardContent className="p-6">
                  <h3 className="text-xl font-black uppercase mb-6">PROCESSING CONFIGURATION</h3>
                  
                  {/* Platform & Input Method */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
                    <div className="relative">
                      <div className="absolute inset-0 border-4 border-yellow-400 rounded-sm animate-pulse opacity-75 z-10" style={{
                        left: '-4px',
                        top: '-4px', 
                        right: '-6px',
                        bottom: '-6px'
                      }}></div>
                      <div className="relative bg-white border-4 border-black p-4 text-center shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <div className="absolute -top-6 -right-6 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={48} className="w-12 h-12" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[6px] uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                      <div className={`w-12 h-12 mx-auto mb-2 border-4 border-black flex items-center justify-center ${
                        state.selectedPlatform === 'tiktok' ? 'bg-black' : 
                        state.selectedPlatform === 'youtube' ? 'bg-red-600' : 
                        state.selectedPlatform === 'twitch' ? 'bg-purple-600' : 'bg-pink-600'
                      }`}>
                        {state.selectedPlatform === 'tiktok' ? <Image src="/tiktok.svg" alt="TikTok" width={24} height={24} className="filter brightness-0 invert" /> :
                         state.selectedPlatform === 'youtube' ? <UilYoutube className="h-6 w-6 text-white" /> :
                         state.selectedPlatform === 'twitch' ? <Image src="/twitch.svg" alt="Twitch" width={24} height={24} className="filter brightness-0 invert" /> :
                         <UilUpload className="h-6 w-6 text-white" />}
                      </div>
                        <h4 className="font-black uppercase text-sm text-black">PLATFORM</h4>
                        <p className="text-gray-600 font-bold text-xs capitalize">{state.selectedPlatform}</p>
                      </div>
                    </div>
                    
                    <div className="relative">
                      <div className="absolute inset-0 border-4 border-yellow-400 rounded-sm animate-pulse opacity-75 z-10" style={{
                        left: '-4px',
                        top: '-4px', 
                        right: '-6px',
                        bottom: '-6px'
                      }}></div>
                      <div className="relative bg-white border-4 border-black p-4 text-center shadow-[4px_4px_0_rgba(0,0,0,1)]">
                        <div className="absolute -top-6 -right-6 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                          <div className="relative">
                            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                              <Star15 color="#FFD700" size={48} className="w-12 h-12" stroke="black" strokeWidth={8} />
                            </div>
                            <div className="absolute inset-0 flex items-center justify-center">
                              <span className="text-black font-black text-[6px] uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                SELECTED
                              </span>
                            </div>
                          </div>
                        </div>
                        <div className="w-12 h-12 mx-auto mb-2 bg-cyan-500 border-4 border-black flex items-center justify-center">
                          {state.selectedInputMethod === 'channel' ? <UilUser className="h-6 w-6 text-white" /> :
                           state.selectedInputMethod === 'urls' ? <UilLink className="h-6 w-6 text-white" /> :
                           <UilUpload className="h-6 w-6 text-white" />}
                        </div>
                        <h4 className="font-black uppercase text-sm text-black">INPUT METHOD</h4>
                        <p className="text-gray-600 font-bold text-xs capitalize">{state.selectedInputMethod}</p>
                      </div>
                    </div>
                  </div>

                  {/* AI Services */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
                    <div className="relative">
                      <div className="absolute inset-0 border-4 border-yellow-400 rounded-sm animate-pulse opacity-75 z-10" style={{
                        left: '-4px',
                        top: '-4px', 
                        right: '-6px',
                        bottom: '-6px'
                      }}></div>
                      <div className="relative bg-white border-4 border-black p-4 text-center shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <div className="absolute -top-6 -right-6 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={48} className="w-12 h-12" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[6px] uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                      <div className="w-12 h-12 mx-auto mb-2 bg-violet-500 border-4 border-black flex items-center justify-center">
                        <UilBrain className="h-6 w-6 text-white" />
                      </div>
                        <h4 className="font-black uppercase text-sm text-black">EMBEDDING MODEL</h4>
                        <p className="text-gray-600 font-bold text-xs">{state.selectedEmbeddingModel?.label}</p>
                      </div>
                    </div>
                    
                    <div className="relative">
                      <div className="absolute inset-0 border-4 border-yellow-400 rounded-sm animate-pulse opacity-75 z-10" style={{
                        left: '-4px',
                        top: '-4px', 
                        right: '-6px',
                        bottom: '-6px'
                      }}></div>
                      <div className="relative bg-white border-4 border-black p-4 text-center shadow-[4px_4px_0_rgba(0,0,0,1)]">
                        <div className="absolute -top-6 -right-6 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                          <div className="relative">
                            <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                              <Star15 color="#FFD700" size={48} className="w-12 h-12" stroke="black" strokeWidth={8} />
                            </div>
                            <div className="absolute inset-0 flex items-center justify-center">
                              <span className="text-black font-black text-[6px] uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                                SELECTED
                              </span>
                            </div>
                          </div>
                        </div>
                        <div className="w-12 h-12 mx-auto mb-2 bg-emerald-500 border-4 border-black flex items-center justify-center">
                          <UilDatabase className="h-6 w-6 text-white" />
                        </div>
                        <h4 className="font-black uppercase text-sm text-black">VECTOR DATABASE</h4>
                        <p className="text-gray-600 font-bold text-xs">{state.selectedVectorDb?.label}</p>
                      </div>
                    </div>
                  </div>

                  {/* Statistics */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    <div className="bg-white border-4 border-black p-3 text-center shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <div className="w-8 h-8 mx-auto mb-2 bg-pink-500 border-2 border-black flex items-center justify-center">
                        <UilFileAlt className="h-4 w-4 text-white" />
                      </div>
                      <p className="text-2xl font-black text-black">{state.selectedContent.length}</p>
                      <p className="text-xs font-bold text-gray-600">CONTENT ITEMS</p>
                    </div>
                    
                    <div className="bg-white border-4 border-black p-3 text-center shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <div className="w-8 h-8 mx-auto mb-2 bg-yellow-500 border-2 border-black flex items-center justify-center">
                        <UilLayers className="h-4 w-4 text-white" />
                      </div>
                      <p className="text-2xl font-black text-black">~{state.selectedContent.length * 10}</p>
                      <p className="text-xs font-bold text-gray-600">EMBEDDINGS</p>
                    </div>
                    
                    <div className="bg-white border-4 border-black p-3 text-center shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <div className="w-8 h-8 mx-auto mb-2 bg-blue-500 border-2 border-black flex items-center justify-center">
                        <UilProcessor className="h-4 w-4 text-white" />
                      </div>
                      <p className="text-2xl font-black text-black">{state.bulkSettings.chunkSize}</p>
                      <p className="text-xs font-bold text-gray-600">CHUNK SIZE</p>
                    </div>
                    
                    <div className="bg-white border-4 border-black p-3 text-center shadow-[4px_4px_0_rgba(0,0,0,1)]">
                      <div className="w-8 h-8 mx-auto mb-2 bg-orange-500 border-2 border-black flex items-center justify-center">
                        <UilClock className="h-4 w-4 text-white" />
                      </div>
                      <p className="text-2xl font-black text-black">~{Math.ceil(state.selectedContent.length * 2)}</p>
                      <p className="text-xs font-bold text-gray-600">MINUTES</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Selected Content Preview */}
              <Card className="bg-pink-50 mb-6">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-black uppercase">SELECTED CONTENT REVIEW</h3>
                    <div className="flex items-center gap-2 text-sm">
                      <UilArrowRight className="h-4 w-4 text-gray-500" />
                      <span className="text-gray-600 font-bold">Will be processed with settings below</span>
                    </div>
                  </div>
                  <div className="space-y-4">
                    {selectedVideos.length > 0 ? (
                      <>
                        <p className="text-sm text-gray-700">
                          Processing content from {selectedVideos.length} selected {selectedVideos.length === 1 ? 'video' : 'videos'}:
                        </p>
                        <TooltipProvider>
                          <div className="space-y-2">
                            {selectedVideos.map((video: any, index: number) => {
                            const videoId = video.id || video.video_id || video.videoId;
                            const thumbnail = video.thumbnail || video.thumbnails?.[0]?.url || '/placeholder.jpg';
                            const preview = getPreview(videoId, state.selectedPlatform as 'tiktok' | 'youtube' | 'twitch');
                            
                            return (
                              <div key={videoId || index} className="flex items-center gap-3 p-2 bg-white border-2 border-black relative">
                                <div className="w-5 h-5 bg-pink-500 border-2 border-black flex items-center justify-center text-white text-xs font-bold flex-shrink-0">
                                  {index + 1}
                                </div>
                                <Tooltip delayDuration={0} onOpenChange={(open) => {
                                  if (open) {
                                    // Only generate preview if needed
                                    const preview = getPreview(videoId, state.selectedPlatform as 'tiktok' | 'youtube' | 'twitch');
                                    if (!preview && state.selectedPlatform === 'tiktok') {
                                      generatePreview(videoId, 'tiktok', video.url || video.videoUrl);
                                    }
                                    setTooltipOpen(videoId);
                                  } else {
                                    setTooltipOpen(null);
                                    // Pause current video when tooltip closes
                                    if (currentVideoRef.current) {
                                      currentVideoRef.current.pause();
                                      currentVideoRef.current = null;
                                    }
                                  }
                                }}>
                                  <TooltipTrigger asChild>
                                    <div className="relative cursor-pointer">
                                      <Image 
                                        src={thumbnail}
                                        alt={video.title || video.description || 'Video thumbnail'}
                                        width={state.selectedPlatform === 'tiktok' ? 27 : 85}
                                        height={48}
                                        className={`h-12 object-cover border-2 border-black flex-shrink-0 ${
                                          state.selectedPlatform === 'tiktok' ? 'w-[27px]' : 'w-[85px]'
                                        }`}
                                        unoptimized={thumbnail.includes('tiktokcdn')}
                                        onError={(e) => {
                                          e.currentTarget.src = '/placeholder.jpg';
                                        }}
                                      />
                                      <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-20 transition-opacity flex items-center justify-center">
                                        <UilPlay className="w-6 h-6 text-white opacity-0 hover:opacity-100 transition-opacity" />
                                      </div>
                                    </div>
                                  </TooltipTrigger>
                                  <TooltipContent side="top" className="p-0 bg-transparent border-none">
                                    <div className="bg-background border-4 border-border p-3 shadow-shadow min-w-[200px] max-w-[300px]">
                                      {preview?.previewUrl ? (
                                        <video
                                          key={`tooltip-video-${videoId}`}
                                          ref={(el) => {
                                            if (el && tooltipOpen === videoId) {
                                              currentVideoRef.current = el;
                                            }
                                          }}
                                          src={preview.previewUrl}
                                          className={`w-full object-cover border-2 border-border mb-2 ${
                                            state.selectedPlatform === 'tiktok' ? 'aspect-[9/16] max-h-[300px]' : 'aspect-[16/9]'
                                          }`}
                                          autoPlay
                                          muted={tooltipOpen !== videoId}
                                          loop
                                          playsInline
                                          onPlay={(e) => {
                                            const videoElement = e.currentTarget as HTMLVideoElement;
                                            // Ensure only this video is playing
                                            if (currentVideoRef.current && currentVideoRef.current !== videoElement) {
                                              currentVideoRef.current.pause();
                                            }
                                            currentVideoRef.current = videoElement;
                                          }}
                                          onLoadedData={(e) => {
                                            const videoElement = e.currentTarget as HTMLVideoElement;
                                            videoElement.volume = 0.3;
                                          }}
                                        />
                                      ) : preview?.loading ? (
                                        <div className={`w-full border-2 border-border mb-2 bg-secondary-background flex items-center justify-center ${
                                          state.selectedPlatform === 'tiktok' ? 'aspect-[9/16] max-h-[300px]' : 'aspect-[16/9]'
                                        }`}>
                                          <UilSpinner className="w-8 h-8 animate-spin text-pink-500" />
                                        </div>
                                      ) : (
                                        <Image 
                                          src={thumbnail}
                                          alt={video.title || video.description || 'Video preview'}
                                          width={state.selectedPlatform === 'tiktok' ? 180 : 320}
                                          height={state.selectedPlatform === 'tiktok' ? 200 : 180}
                                          className={`w-full object-cover border-2 border-border mb-2 ${
                                            state.selectedPlatform === 'tiktok' ? 'aspect-[9/16] max-h-[200px]' : 'aspect-[16/9]'
                                          }`}
                                          unoptimized={thumbnail.includes('tiktokcdn')}
                                          onError={(e) => {
                                            e.currentTarget.src = '/placeholder.jpg';
                                          }}
                                        />
                                      )}
                                      <p className="font-black text-sm mb-1 line-clamp-2">
                                        {video.title || video.description || 'Untitled Video'}
                                      </p>
                                      {video.duration && (
                                        <p className="text-xs text-gray-600 font-bold">
                                          Duration: {Math.floor(video.duration / 60)}:{(video.duration % 60).toString().padStart(2, '0')}
                                        </p>
                                      )}
                                      {(video.viewCount !== undefined || video.play_count !== undefined) && (
                                        <p className="text-xs text-gray-600 font-bold">
                                          Views: {(video.viewCount || video.play_count).toLocaleString()}
                                        </p>
                                      )}
                                      {preview?.error && (
                                        <p className="text-xs text-red-600 font-bold mt-1">
                                          Preview unavailable
                                        </p>
                                      )}
                                    </div>
                                  </TooltipContent>
                                </Tooltip>
                                <p className="text-sm font-bold truncate flex-1">
                                  {video.title || video.description || 'Untitled Video'}
                                </p>
                                <Button
                                  variant="neutral"
                                  size="sm"
                                  onClick={() => toggleContentSelection(videoId)}
                                  className="flex-shrink-0"
                                >
                                  REMOVE
                                </Button>
                              </div>
                            );
                            })}
                          </div>
                        </TooltipProvider>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="flex items-center gap-2 p-3 bg-yellow-100 border-2 border-black">
                            <UilInfoCircle className="h-5 w-5 flex-shrink-0" />
                            <p className="text-xs font-bold">
                              Content will be processed for vector embeddings and stored in your selected database. You can remove videos by clicking the REMOVE button.
                            </p>
                          </div>
                          <div className="flex items-center gap-2 p-3 bg-gray-100 border-2 border-black">
                            <UilProcessor className="h-5 w-5 flex-shrink-0 text-gray-600" />
                            <p className="text-xs font-bold">
                              Each video will be split into ≈{Math.ceil(state.bulkSettings.chunkSize / 100)} chunks using your advanced settings below.
                            </p>
                          </div>
                        </div>
                      </>
                    ) : (
                      <div className="text-center py-8">
                        <p className="text-gray-600 font-bold">NO CONTENT SELECTED</p>
                        <p className="text-sm text-gray-500 mt-2">
                          Please go back and select content to process.
                        </p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>

              {/* Advanced Settings */}
              <Card className="mb-6">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h3 className="text-lg font-black uppercase">ADVANCED SETTINGS</h3>
                    <Button
                      variant="neutral"
                      size="sm"
                      onClick={() => setShowSettings(!showSettings)}
                    >
                      <UilCog className="h-4 w-4 mr-2" />
                      {showSettings ? 'HIDE' : 'SHOW'}
                    </Button>
                  </div>
                  
                  {showSettings && (
                    <TooltipProvider>
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {/* Chunk Size Setting */}
                        <Card className="bg-white border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-shadow">
                          <CardContent className="p-4">
                            <div className="flex items-center gap-3 mb-3">
                              <div className="w-10 h-10 bg-blue-500 border-2 border-black flex items-center justify-center">
                                <UilProcessor className="h-5 w-5 text-white" />
                              </div>
                              <div className="flex-1">
                                <div className="flex items-center gap-2">
                                  <h4 className="font-black text-sm uppercase">CHUNK SIZE</h4>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <button className="p-0 bg-transparent border-none outline-none">
                                        <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                      </button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top">
                                      <p>Size of text chunks for processing. Larger chunks preserve more context but create fewer embeddings.</p>
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <p className="text-xs text-gray-600">Text processing chunks</p>
                              </div>
                            </div>
                            <div className="mb-3">
                              <div className="flex items-center justify-between mb-2">
                                <span className="text-sm font-bold text-gray-700">Size</span>
                                <Badge className="bg-blue-600 text-white border-2 border-black">
                                  {state.bulkSettings.chunkSize} tokens
                                </Badge>
                              </div>
                              <Slider
                                value={[state.bulkSettings.chunkSize]}
                                onValueChange={(value) => handleBulkSettingsChange('chunkSize', value[0])}
                                max={4096}
                                min={512}
                                step={256}
                                className="w-full"
                              />
                            </div>
                            <p className="text-xs text-gray-500">
                              Larger chunks preserve context but create fewer embeddings
                            </p>
                          </CardContent>
                        </Card>

                        {/* Chunk Overlap Setting */}
                        <Card className="bg-white border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-shadow">
                          <CardContent className="p-4">
                            <div className="flex items-center gap-3 mb-3">
                              <div className="w-10 h-10 bg-green-500 border-2 border-black flex items-center justify-center">
                                <UilLayers className="h-5 w-5 text-white" />
                              </div>
                              <div className="flex-1">
                                <div className="flex items-center gap-2">
                                  <h4 className="font-black text-sm uppercase">CHUNK OVERLAP</h4>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <button className="p-0 bg-transparent border-none outline-none">
                                        <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                      </button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top">
                                      <p>Number of tokens that overlap between adjacent chunks. Helps maintain context continuity.</p>
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <p className="text-xs text-gray-600">Context preservation</p>
                              </div>
                            </div>
                            <div className="mb-3">
                              <div className="flex items-center justify-between mb-2">
                                <span className="text-sm font-bold text-gray-700">Overlap</span>
                                <Badge className="bg-green-600 text-white border-2 border-black">
                                  {state.bulkSettings.chunkOverlap} tokens
                                </Badge>
                              </div>
                              <Slider
                                value={[state.bulkSettings.chunkOverlap]}
                                onValueChange={(value) => handleBulkSettingsChange('chunkOverlap', value[0])}
                                max={500}
                                min={0}
                                step={50}
                                className="w-full"
                              />
                            </div>
                            <p className="text-xs text-gray-500">
                              Overlap helps maintain context across chunk boundaries
                            </p>
                          </CardContent>
                        </Card>

                        {/* Max Tokens Setting */}
                        <Card className="bg-white border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-shadow">
                          <CardContent className="p-4">
                            <div className="flex items-center gap-3 mb-3">
                              <div className="w-10 h-10 bg-purple-500 border-2 border-black flex items-center justify-center">
                                <UilBrain className="h-5 w-5 text-white" />
                              </div>
                              <div className="flex-1">
                                <div className="flex items-center gap-2">
                                  <h4 className="font-black text-sm uppercase">MAX TOKENS</h4>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <button className="p-0 bg-transparent border-none outline-none">
                                        <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                      </button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top">
                                      <p>Maximum number of tokens to process per chunk. Depends on the selected embedding model's limits.</p>
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <p className="text-xs text-gray-600">Processing limit</p>
                              </div>
                            </div>
                            <div className="mb-3">
                              <div className="flex items-center justify-between mb-2">
                                <span className="text-sm font-bold text-gray-700">Limit</span>
                                <Badge className="bg-purple-600 text-white border-2 border-black">
                                  {state.bulkSettings.maxTokens}
                                </Badge>
                              </div>
                              <Slider
                                value={[state.bulkSettings.maxTokens]}
                                onValueChange={(value) => handleBulkSettingsChange('maxTokens', value[0])}
                                max={8192}
                                min={512}
                                step={512}
                                className="w-full"
                              />
                            </div>
                            <p className="text-xs text-gray-500">
                              Maximum tokens to process per chunk (model dependent)
                            </p>
                          </CardContent>
                        </Card>

                        {/* Jina V4 Specific Settings - Only show if Jina V4 is selected */}
                        {state.selectedEmbeddingModel?.id === 'jina-v4' && (
                          <>
                            {/* Task Type Setting */}
                            <Card className="bg-white border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-shadow">
                              <CardContent className="p-4">
                                <div className="flex items-center gap-3 mb-3">
                                  <div className="w-10 h-10 bg-indigo-500 border-2 border-black flex items-center justify-center">
                                    <UilCog className="h-5 w-5 text-white" />
                                  </div>
                                  <div className="flex-1">
                                    <div className="flex items-center gap-2">
                                      <h4 className="font-black text-sm uppercase">JINA V4 TASK</h4>
                                      <Tooltip>
                                        <TooltipTrigger asChild>
                                          <button className="p-0 bg-transparent border-none outline-none">
                                            <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                          </button>
                                        </TooltipTrigger>
                                        <TooltipContent side="top">
                                          <p>Task type for Jina V4 embedding. Use retrieval.passage for content storage and retrieval.query for search queries.</p>
                                        </TooltipContent>
                                      </Tooltip>
                                    </div>
                                    <p className="text-xs text-gray-600">Embedding task type</p>
                                  </div>
                                </div>
                                <Select 
                                  value={state.bulkSettings.transcriptProcessing?.task || 'retrieval.passage'}
                                  onValueChange={(value) => handleTranscriptProcessingChange('task', value)}
                                >
                                  <SelectTrigger className="w-full border-2 border-black">
                                    <SelectValue />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="retrieval.passage">Retrieval Passage</SelectItem>
                                    <SelectItem value="retrieval.query">Retrieval Query</SelectItem>
                                    <SelectItem value="text-matching">Text Matching</SelectItem>
                                  </SelectContent>
                                </Select>
                                <p className="text-xs text-gray-500 mt-2">
                                  Choose the task type for optimal embedding performance
                                </p>
                              </CardContent>
                            </Card>

                            {/* Late Chunking Toggle */}
                            <Card className="bg-white border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-shadow">
                              <CardContent className="p-4">
                                <div className="flex items-center gap-3 mb-3">
                                  <div className="w-10 h-10 bg-orange-500 border-2 border-black flex items-center justify-center">
                                    <UilLayers className="h-5 w-5 text-white" />
                                  </div>
                                  <div className="flex-1">
                                    <div className="flex items-center gap-2">
                                      <h4 className="font-black text-sm uppercase">LATE CHUNKING</h4>
                                      <Tooltip>
                                        <TooltipTrigger asChild>
                                          <button className="p-0 bg-transparent border-none outline-none">
                                            <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                          </button>
                                        </TooltipTrigger>
                                        <TooltipContent side="top">
                                          <p>Advanced Jina V4 feature that performs chunking after encoding for better context preservation.</p>
                                        </TooltipContent>
                                      </Tooltip>
                                    </div>
                                    <p className="text-xs text-gray-600">Smart chunking</p>
                                  </div>
                                </div>
                                <div className="flex items-center gap-3">
                                  <Button
                                    variant={state.bulkSettings.transcriptProcessing?.lateChunking ? "default" : "outline"}
                                    size="sm"
                                    onClick={() => handleTranscriptProcessingChange('lateChunking', !state.bulkSettings.transcriptProcessing?.lateChunking)}
                                    className="border-2 border-black"
                                  >
                                    {state.bulkSettings.transcriptProcessing?.lateChunking ? 'ENABLED' : 'DISABLED'}
                                  </Button>
                                  <Badge className={`${state.bulkSettings.transcriptProcessing?.lateChunking ? 'bg-green-600' : 'bg-gray-600'} text-white border-2 border-black`}>
                                    {state.bulkSettings.transcriptProcessing?.lateChunking ? 'ON' : 'OFF'}
                                  </Badge>
                                </div>
                                <p className="text-xs text-gray-500 mt-2">
                                  Recommended for long transcripts and better context
                                </p>
                              </CardContent>
                            </Card>

                            {/* RAG Optimization Toggle */}
                            <Card className="bg-white border-2 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-shadow">
                              <CardContent className="p-4">
                                <div className="flex items-center gap-3 mb-3">
                                  <div className="w-10 h-10 bg-teal-500 border-2 border-black flex items-center justify-center">
                                    <UilBrain className="h-5 w-5 text-white" />
                                  </div>
                                  <div className="flex-1">
                                    <div className="flex items-center gap-2">
                                      <h4 className="font-black text-sm uppercase">RAG OPTIMIZATION</h4>
                                      <Tooltip>
                                        <TooltipTrigger asChild>
                                          <button className="p-0 bg-transparent border-none outline-none">
                                            <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                                          </button>
                                        </TooltipTrigger>
                                        <TooltipContent side="top">
                                          <p>Optimize embeddings specifically for Retrieval-Augmented Generation (RAG) systems.</p>
                                        </TooltipContent>
                                      </Tooltip>
                                    </div>
                                    <p className="text-xs text-gray-600">Enhanced retrieval</p>
                                  </div>
                                </div>
                                <div className="flex items-center gap-3">
                                  <Button
                                    variant={state.bulkSettings.transcriptProcessing?.optimizeForRag ? "default" : "outline"}
                                    size="sm"
                                    onClick={() => handleTranscriptProcessingChange('optimizeForRag', !state.bulkSettings.transcriptProcessing?.optimizeForRag)}
                                    className="border-2 border-black"
                                  >
                                    {state.bulkSettings.transcriptProcessing?.optimizeForRag ? 'ENABLED' : 'DISABLED'}
                                  </Button>
                                  <Badge className={`${state.bulkSettings.transcriptProcessing?.optimizeForRag ? 'bg-green-600' : 'bg-gray-600'} text-white border-2 border-black`}>
                                    {state.bulkSettings.transcriptProcessing?.optimizeForRag ? 'ON' : 'OFF'}
                                  </Badge>
                                </div>
                                <p className="text-xs text-gray-500 mt-2">
                                  Recommended for knowledge base and search applications
                                </p>
                              </CardContent>
                            </Card>
                          </>
                        )}
                      </div>
                    </TooltipProvider>
                  )}
                  
                  {/* Settings Preview Bar - Always Visible */}
                  {!showSettings && (
                    <div className="space-y-4 mt-4">
                      <div className="flex items-center gap-2 mb-3">
                        <UilArrowUp className="h-4 w-4 text-gray-600" />
                        <p className="text-sm font-bold text-gray-700">Current processing settings for {state.selectedContent.length} content items</p>
                      </div>
                      <div className="grid grid-cols-3 gap-4">
                        <div className="bg-white border-2 border-black p-3 text-center shadow-[2px_2px_0_rgba(0,0,0,1)]">
                          <div className="w-6 h-6 mx-auto mb-1 bg-blue-500 border-2 border-black flex items-center justify-center">
                            <UilProcessor className="h-3 w-3 text-white" />
                          </div>
                          <p className="text-xs font-bold text-gray-700">CHUNK SIZE</p>
                          <p className="text-sm font-black text-blue-600">{state.bulkSettings.chunkSize}</p>
                        </div>
                        <div className="bg-white border-2 border-black p-3 text-center shadow-[2px_2px_0_rgba(0,0,0,1)]">
                          <div className="w-6 h-6 mx-auto mb-1 bg-green-500 border-2 border-black flex items-center justify-center">
                            <UilLayers className="h-3 w-3 text-white" />
                          </div>
                          <p className="text-xs font-bold text-gray-700">OVERLAP</p>
                          <p className="text-sm font-black text-green-600">{state.bulkSettings.chunkOverlap}</p>
                        </div>
                        <div className="bg-white border-2 border-black p-3 text-center shadow-[2px_2px_0_rgba(0,0,0,1)]">
                          <div className="w-6 h-6 mx-auto mb-1 bg-purple-500 border-2 border-black flex items-center justify-center">
                            <UilBrain className="h-3 w-3 text-white" />
                          </div>
                          <p className="text-xs font-bold text-gray-700">MAX TOKENS</p>
                          <p className="text-sm font-black text-purple-600">{state.bulkSettings.maxTokens}</p>
                        </div>
                      </div>
                      <div className="bg-gray-100 border-2 border-black p-3 text-center">
                        <p className="text-xs font-bold text-gray-800">
                          ≈ {Math.ceil((state.selectedContent.length * state.bulkSettings.chunkSize) / 1000)} chunks will be created
                        </p>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            </>
          )}

          {/* Processing Status */}
          {(state.isProcessing || apiIsProcessing || state.processProgress > 0 || apiProcessProgress > 0) && (
            <Card className="bg-orange-50 mb-6">
              <CardContent className="p-6">
                <div className="flex items-center gap-4 mb-4">
                  {(state.isProcessing || apiIsProcessing) ? (
                    <UilSpinner className="h-8 w-8 animate-spin text-orange-600" />
                  ) : (
                    <UilCheckCircle className="h-8 w-8 text-green-600" />
                  )}
                  <div className="flex-1">
                    <h3 className="text-lg font-black uppercase">
                      {typeof (apiProcessingJob?.stage || state.processingJob?.stage) === 'string' 
                        ? (apiProcessingJob?.stage || state.processingJob?.stage) 
                        : 'Processing...'}
                    </h3>
                    <p className="text-sm text-gray-600">
                      {apiProcessingJob?.contentProcessed || state.processingJob?.contentProcessed || 0} / {apiProcessingJob?.totalContent || state.processingJob?.totalContent || 0} content items processed
                    </p>
                    {processingError && (
                      <p className="text-sm text-red-600 font-bold mt-1">
                        Error: {processingError}
                      </p>
                    )}
                  </div>
                  <div className="text-right">
                    <div className="text-2xl font-black text-orange-600">
                      {Math.round(apiProcessProgress || state.processProgress)}%
                    </div>
                    <div className="text-xs text-gray-500">
                      {apiProcessingJob?.embeddings || state.processingJob?.embeddings || 0} embeddings
                    </div>
                  </div>
                </div>
                
                <Progress value={apiProcessProgress || state.processProgress} className="w-full mb-4" />
                
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    {getProcessingStageIcon()}
                    <span className="font-medium">Current Stage</span>
                  </div>
                  <div className="text-right">
                    <div className="font-bold">{apiProcessingJob?.contentProcessed || state.processingJob?.contentProcessed || 0}</div>
                    <div className="text-gray-500">Content Processed</div>
                  </div>
                  <div className="text-right">
                    <div className="font-bold">{apiProcessingJob?.embeddings || state.processingJob?.embeddings || 0}</div>
                    <div className="text-gray-500">Embeddings Created</div>
                  </div>
                  <div className="text-right">
                    <div className="font-bold">{(apiProcessProgress === 100 || state.processProgress === 100) ? 'Complete' : 'Processing'}</div>
                    <div className="text-gray-500">Status</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Export Options - Show when processing is complete */}
          {(apiProcessProgress === 100 || state.processProgress === 100) && (
            <Card className="bg-green-50 mb-6">
              <CardContent className="p-6">
                <div className="flex items-center gap-4 mb-6">
                  <UilExport className="h-8 w-8 text-green-600" />
                  <div className="flex-1">
                    <h3 className="text-lg font-black uppercase text-green-800">
                      EXPORT RESULTS
                    </h3>
                    <p className="text-sm text-gray-600">
                      Choose a format to export your processed embeddings and vector data
                    </p>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                  {exportFormats.map((format) => (
                    <div
                      key={format.id}
                      className={`relative cursor-pointer transition-all ${
                        selectedExportFormat === format.id
                          ? 'ring-4 ring-green-400 ring-opacity-50'
                          : ''
                      }`}
                      onClick={() => setSelectedExportFormat(format.id)}
                    >
                      <div className={`${format.color} border-4 border-black p-4 text-white shadow-[4px_4px_0_rgba(0,0,0,1)] hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-shadow`}>
                        <div className="flex items-center gap-3 mb-3">
                          <format.Icon className="h-6 w-6" />
                          <h4 className="font-black text-lg">{format.label}</h4>
                        </div>
                        <p className="text-sm opacity-90 mb-3">{format.description}</p>
                        <div className="text-xs opacity-75">
                          {format.features.map((feature, idx) => (
                            <div key={idx}>• {feature}</div>
                          ))}
                        </div>
                      </div>
                      {selectedExportFormat === format.id && (
                        <div className="absolute -top-2 -right-2">
                          <UilCheckCircle className="h-6 w-6 text-green-600 bg-white rounded-full" />
                        </div>
                      )}
                    </div>
                  ))}
                </div>

                <div className="flex gap-4">
                  <Button
                    variant="default"
                    size="lg"
                    className="flex-1 h-12"
                    onClick={handleExportResults}
                    disabled={isExporting}
                  >
                    {isExporting ? (
                      <>
                        <UilSpinner className="h-5 w-5 animate-spin mr-2" />
                        EXPORTING...
                      </>
                    ) : (
                      <>
                        <UilExport className="h-5 w-5 mr-2" />
                        EXPORT AS {exportFormats.find(f => f.id === selectedExportFormat)?.label}
                      </>
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Export Progress & Download */}
          {(isExporting || downloadProgress) && (
            <Card className="bg-blue-50 mb-6">
              <CardContent className="p-6">
                <div className="flex items-center gap-4 mb-4">
                  {isExporting ? (
                    <UilSpinner className="h-8 w-8 animate-spin text-blue-600" />
                  ) : downloadProgress?.status === 'completed' ? (
                    <UilCheckCircle className="h-8 w-8 text-green-600" />
                  ) : (
                    <UilDownloadAlt className="h-8 w-8 text-blue-600" />
                  )}
                  <div className="flex-1">
                    <h3 className="text-lg font-black uppercase">
                      {isExporting ? 'PREPARING EXPORT' : 
                       downloadProgress?.status === 'completed' ? 'DOWNLOAD READY' :
                       'EXPORT STATUS'}
                    </h3>
                    <p className="text-sm text-gray-600">
                      {isExporting ? 'Converting data to selected format...' :
                       downloadProgress?.status === 'completed' ? 'Your export file is ready for download' :
                       'Checking export status...'}
                    </p>
                  </div>
                  <div className="text-right">
                    <div className="text-2xl font-black text-blue-600">
                      {isExporting ? `${Math.round(exportProgress)}%` : 
                       downloadProgress?.status === 'completed' ? '100%' : '...'}
                    </div>
                    {downloadProgress?.fileSize && (
                      <div className="text-xs text-gray-500">
                        {(downloadProgress.fileSize / 1024 / 1024).toFixed(1)} MB
                      </div>
                    )}
                  </div>
                </div>
                
                {isExporting && (
                  <Progress value={exportProgress} className="w-full mb-4" />
                )}
                
                {downloadProgress?.status === 'completed' && downloadProgress.downloadUrl && (
                  <Button
                    variant="default"
                    size="lg"
                    className="w-full h-12"
                    onClick={() => handleDownload(downloadProgress.downloadUrl!, downloadProgress.filename || 'export.json')}
                  >
                    <UilDownloadAlt className="h-5 w-5 mr-2" />
                    DOWNLOAD {downloadProgress.filename}
                  </Button>
                )}
              </CardContent>
            </Card>
          )}

          <Card className="bg-yellow-100 mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="default" 
                  className="flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">PROCESSING WORKFLOW</p>
                  <p className="text-sm text-gray-700 mt-1">
                    The system will download content, extract transcripts, chunk the text, generate embeddings using your selected model, 
                    and store them in your chosen vector database. This process cannot be undone.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-4 mt-8">
            <Button
              variant="neutral"
              size="lg"
              className="flex-1 h-14 text-lg font-black uppercase"
              onClick={() => handleStepChange(5)}
              disabled={state.isProcessing || apiIsProcessing}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            {!state.isProcessing && !apiIsProcessing && state.processProgress < 100 && apiProcessProgress < 100 ? (
              <Button
                variant="default"
                size="lg"
                className="flex-1 h-14 text-lg font-black uppercase"
                onClick={handleStartProcessing}
                disabled={!state.selectedEmbeddingModel || !state.selectedVectorDb}
              >
                <span className="flex items-center justify-center">
                  <UilPlay className="mr-2 h-6 w-6" />
                  START PROCESSING
                </span>
              </Button>
            ) : (
              <Button
                variant="default"
                size="lg"
                className={`flex-1 h-14 text-lg font-black uppercase ${!canProceedFromStep6() ? 'opacity-50 cursor-not-allowed' : ''}`}
                onClick={() => setCurrentStep(7)}
                disabled={!canProceedFromStep6()}
              >
                <span className="flex items-center justify-center">
                  CONTINUE
                  <UilArrowRight className="ml-2 h-6 w-6" />
                </span>
              </Button>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/bulk/types.ts
================================================
export interface ContentItem {
  id: string;
  title: string;
  duration: string;
  views: string;
  likes: string;
  published: string;
  thumbnail?: string;
  url?: string;
}

export interface DocumentItem {
  id: string;
  name: string;
  size: number;
  type: string;
  file: File;
  uploadDate: string;
  pageCount?: number;
  textPreview?: string;
}

export interface BulkSettings {
  chunkSize: number;        // Text chunk size for embedding (512-4096)
  chunkOverlap: number;     // Overlap between chunks (0-200)
  maxTokens: number;        // Maximum tokens per chunk (100-8192)
  // JINA V4 specific settings
  transcriptProcessing?: {
    task: 'retrieval.passage' | 'retrieval.query' | 'text-matching';
    lateChunking: boolean;    // Enable V4 late chunking for long transcripts
    multiVector: boolean;     // Output multi-vector embeddings
    optimizeForRag: boolean;  // Optimize settings for RAG systems
    dimensions: number;       // Embedding dimensions (128-2048)
  };
}

export interface EmbeddingModel {
  id: string;
  label: string;
  Icon: any;
  color: string;
  tooltip: string;
  dimensions: number;
  maxTokens: number;
  description: string;
  githubStars?: number | null;
  parameters?: string;
  mtebScore?: number | null;
  // V4 specific capabilities
  supportsLateChunking?: boolean;
  supportsMultiVector?: boolean;
  supportedTasks?: string[];
  contextLength?: number;
  version?: string;
  isTranscriptOptimized?: boolean;
}

export interface VectorDatabase {
  id: string;
  label: string;
  Icon: any;
  color: string;
  tooltip: string;
  description: string;
  isPremium?: boolean;
  hosting?: string;
  scalability?: string;
  setup?: string;
  bestFor?: string;
  pricing?: string;
  features?: string[];
}

export interface InputMethod {
  id: string;
  label: string;
  Icon: any;
  color: string;
  tooltip: string;
  description: string;
}

export type Platform = 'youtube' | 'twitch' | 'tiktok' | 'documents' | 'web' | '';
export type InputType = 'channel' | 'urls' | 'upload' | '';

export interface ProcessingJob {
  id: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  progress: number;
  stage: string;
  contentProcessed: number;
  totalContent: number;
  embeddings: number;
  error?: string;
  // V4 processing metadata
  transcriptStats?: {
    totalTranscripts: number;
    processedTranscripts: number;
    avgTokensPerTranscript: number;
    chunkingMethod: 'late_chunking' | 'traditional' | 'direct';
    embeddingDimensions: number;
  };
}

export interface BulkOnboardingState {
  currentStep: number;
  selectedPlatform: Platform;
  selectedInputMethod: InputType;
  channelUrl: string;
  pastedUrls: string[];
  selectedContent: string[];
  uploadedDocuments: DocumentItem[];
  selectedDocuments: string[];
  uploadProgress: number;
  selectedEmbeddingModel: EmbeddingModel | null;
  selectedVectorDb: VectorDatabase | null;
  bulkSettings: BulkSettings;
  processingJob: ProcessingJob | null;
  exportFormat: string;
  isLoading: boolean;
  loadProgress: number;
  isProcessing: boolean;
  processProgress: number;
  // V4 specific state
  jinaV4Settings?: JinaV4Settings;
  transcriptProcessingResults?: TranscriptProcessingResult[];
  isTranscriptMode: boolean;
}

export interface StepProps {
  state: BulkOnboardingState;
  setState: (state: Partial<BulkOnboardingState>) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
  // Content hooks
  tiktokUser?: any;
  tiktokUserLoading?: boolean;
  tiktokUserError?: any;
  fetchTikTokUser?: (username: string) => Promise<void>;
  tiktokVideos?: any[];
  tiktokVideosLoading?: boolean;
  tiktokVideosError?: any;
  fetchTikTokVideos?: (username: string) => Promise<void>;
  youtubeChannel?: any;
  youtubeChannelLoading?: boolean;
  youtubeChannelError?: any;
  fetchYouTubeChannel?: (channelId: string) => Promise<void>;
  youtubeVideos?: any[];
  youtubeVideosLoading?: boolean;
  youtubeVideosError?: any;
  fetchYouTubeVideos?: (channelId: string) => Promise<void>;
  twitchChannel?: any;
  twitchChannelLoading?: boolean;
  twitchChannelError?: any;
  twitchChannelDataComplete?: boolean;
  fetchTwitchChannel?: (username: string) => Promise<void>;
  twitchVideos?: any[];
  twitchVideosLoading?: boolean;
  twitchVideosError?: any;
  fetchTwitchVideos?: (username: string) => Promise<void>;
}

export interface ExportOption {
  id: string;
  label: string;
  Icon: any;
  color: string;
  description: string;
  format: string;
}

export interface VerificationResult {
  totalEmbeddings: number;
  searchAccuracy: number;
  contentQuality: number;
  processingTime: number;
  vectorDbSize: string;
}

export interface ExportFormat {
  id: 'json' | 'csv' | 'parquet' | 'vector';
  label: string;
  Icon: any;
  color: string;
  description: string;
  fileExtension: string;
  mimeType: string;
  features: string[];
}

export interface DownloadInfo {
  jobId: string;
  exportId: string;
  progress: number;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  downloadUrl?: string;
  filename?: string;
  fileSize?: number;
  error?: string;
}

export interface ExportHistoryItem {
  id: string;
  jobId: string;
  format: string;
  filename: string;
  fileSize: number;
  downloadUrl: string;
  createdAt: string;
  status: 'completed' | 'failed';
  expiresAt?: string;
}

export interface BulkProcessingProgress {
  stage: string;
  progress: number;
  contentProcessed: number;
  totalContent: number;
  embeddings: number;
  estimatedTimeRemaining?: number;
  currentOperation?: string;
  // V4 transcript processing progress
  transcriptProgress?: {
    transcriptsProcessed: number;
    totalTranscripts: number;
    currentTranscriptTokens: number;
    avgProcessingTimePerTranscript: number;
    chunkingStrategy: string;
    embeddingModel: string;
    ragOptimization: boolean;
  };
}

// New V4 specific types
export interface TranscriptEmbeddingConfig {
  task: 'retrieval.passage' | 'retrieval.query' | 'text-matching' | 'code.query' | 'code.passage';
  dimensions: number;
  lateChunking: boolean;
  chunkSize?: number;
  chunkOverlap?: number;
  multiVector: boolean;
  optimizeForRag: boolean;
}

export interface JinaV4Settings {
  model: 'jina-embeddings-v4';
  transcriptConfig: TranscriptEmbeddingConfig;
  batchSize: number;
  contextLength: number;
  outputDataType: 'float' | 'binary' | 'base64';
  truncateAtMaxLength: boolean;
}

export interface TranscriptProcessingResult {
  transcriptIndex: number;
  tokenCount: number;
  chunks: number;
  embeddings: number[][];
  chunkMetadata?: any[];
  processingMethod: 'late_chunking' | 'traditional_chunking' | 'direct';
  dimensions: number;
  processingTime: number;
}


================================================
FILE: src/components/onboarding/bulk/VectorDbSelectionStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Star15 } from '@/components/ui/star';
import { UilDatabase, UilArrowRight, UilArrowLeft, UilInfoCircle, UilCloud, UilServer, UilHeart } from '@tooni/iconscout-unicons-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { BulkOnboardingState, VectorDatabase } from './types';

interface VectorDbSelectionStepProps {
  state: BulkOnboardingState;
  setState: (updates: Partial<BulkOnboardingState>) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
}

export function VectorDbSelectionStep({ 
  state, 
  setState, 
  setCurrentStep,
  handleStepChange
}: VectorDbSelectionStepProps) {
  
  const vectorDatabases: VectorDatabase[] = [
    {
      id: 'pinecone',
      label: 'PINECONE',
      Icon: UilCloud,
      color: 'bg-purple-500',
      tooltip: 'Managed vector database with excellent performance and scalability. Zero-configuration setup with enterprise-grade security.',
      description: 'Cloud-native vector database optimized for production workloads. Handles billions of vectors with millisecond search latency.',
      isPremium: false,
      hosting: 'Managed Cloud',
      scalability: 'Excellent',
      setup: 'Easy',
      bestFor: 'Production',
      pricing: 'Pay-per-use',
      features: ['Serverless & managed', 'Built-in metadata filtering', 'Real-time updates', 'Enterprise security', 'Auto-scaling']
    },
    {
      id: 'chromadb',
      label: 'CHROMADB',
      Icon: UilServer,
      color: 'bg-blue-500',
      tooltip: 'Open-source embedding database that runs locally or in the cloud. Perfect for development and rapid prototyping.',
      description: 'Lightweight, fast, and easy to use. Perfect for prototyping and small to medium-scale deployments.',
      isPremium: false,
      hosting: 'Self-hosted',
      scalability: 'Good',
      setup: 'Simple',
      bestFor: 'Development',
      pricing: 'Free',
      features: ['Open source & free', 'Python-first API', 'Local development', 'Minimal dependencies', 'Easy integration']
    },
    {
      id: 'weaviate',
      label: 'WEAVIATE',
      Icon: UilHeart,
      color: 'bg-green-500',
      tooltip: 'Enterprise-grade vector search engine with GraphQL API and advanced ML capabilities.',
      description: 'Enterprise-grade vector database with built-in ML models, multimodal search, and advanced filtering capabilities.',
      isPremium: true,
      hosting: 'Cloud/Self',
      scalability: 'Excellent',
      setup: 'Advanced',
      bestFor: 'Enterprise',
      pricing: 'Variable',
      features: ['GraphQL API', 'Multi-modal search', 'Built-in ML models', 'Complex filtering', 'Kubernetes ready']
    }
  ];

  const canProceedFromStep5 = () => state.selectedVectorDb !== null;

  const handleVectorDbSelect = (vectorDb: VectorDatabase) => {
    setState({ selectedVectorDb: vectorDb });
  };

  return (
    <div className="space-y-8">
      <Card className="transform -rotate-1">
        <CardContent className="p-8">
          <div className="text-center mb-8">
            <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
              CHOOSE VECTOR DATABASE
            </h1>
            <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
              Select where your vector embeddings will be stored for fast semantic search and retrieval.
            </p>
          </div>
          
          <TooltipProvider>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              {vectorDatabases.map((vectorDb) => (
                <div key={vectorDb.id} className="relative h-full">
                  {state.selectedVectorDb?.id === vectorDb.id && (
                    <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                      <div className="relative">
                        <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                          <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                        </div>
                        <div className="absolute inset-0 flex items-center justify-center">
                          <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                            SELECTED
                          </span>
                        </div>
                      </div>
                    </div>
                  )}
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Card 
                        className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all h-full ${
                          state.selectedVectorDb?.id === vectorDb.id ? 'bg-orange-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
                        }`}
                        onClick={() => handleVectorDbSelect(vectorDb)}
                      >
                        <CardContent className="p-4 h-full flex flex-col">
                          <div className="flex items-start gap-3 mb-3">
                            <div className={`w-12 h-12 ${vectorDb.color} border-4 border-black flex items-center justify-center flex-shrink-0 relative`}>
                              <vectorDb.Icon className="h-8 w-8 text-white" />
                              {vectorDb.isPremium && (
                                <div className="absolute -top-1 -right-1 bg-yellow-400 border-2 border-black rounded-full p-0.5">
                                  <UilDatabase className="h-2 w-2 text-black" />
                                </div>
                              )}
                            </div>
                            <div className="flex-1">
                              <h4 className="font-black uppercase text-base leading-tight">{vectorDb.label}</h4>
                              {vectorDb.isPremium && (
                                <span className="inline-block bg-yellow-400 text-black text-xs font-bold px-1.5 py-0.5 border border-black mt-1">
                                  PREMIUM
                                </span>
                              )}
                            </div>
                          </div>
                          
                          <p className="text-xs text-gray-700 mb-3 leading-relaxed flex-shrink-0">{vectorDb.description}</p>
                          
                          <div className="grid grid-cols-2 gap-2 text-xs mb-3 flex-shrink-0">
                            <div className="bg-gray-100 border-2 border-black p-1.5">
                              <div className="font-bold text-gray-600 text-[10px]">HOSTING</div>
                              <div className="font-black text-xs">{vectorDb.hosting}</div>
                            </div>
                            <div className="bg-gray-100 border-2 border-black p-1.5">
                              <div className="font-bold text-gray-600 text-[10px]">SCALABILITY</div>
                              <div className="font-black text-xs">{vectorDb.scalability}</div>
                            </div>
                            <div className="bg-gray-100 border-2 border-black p-1.5">
                              <div className="font-bold text-gray-600 text-[10px]">SETUP</div>
                              <div className="font-black text-xs">{vectorDb.setup}</div>
                            </div>
                            <div className="bg-gray-100 border-2 border-black p-1.5">
                              <div className="font-bold text-gray-600 text-[10px]">PRICING</div>
                              <div className="font-black text-xs">{vectorDb.pricing}</div>
                            </div>
                          </div>
                          
                          <div className="mt-3">
                            <div className="font-bold text-gray-600 text-[10px] mb-1">KEY FEATURES</div>
                            <div className="flex flex-wrap gap-1">
                              {vectorDb.features.slice(0, 3).map((feature, index) => (
                                <span key={index} className="bg-cyan-200 text-black text-[10px] font-bold px-1.5 py-0.5 border border-black">
                                  {feature}
                                </span>
                              ))}
                              {vectorDb.features.length > 3 && (
                                <span className="bg-gray-200 text-black text-[10px] font-bold px-1.5 py-0.5 border border-black">
                                  +{vectorDb.features.length - 3} more
                                </span>
                              )}
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </TooltipTrigger>
                    <TooltipContent className="max-w-xs">
                      <p>{vectorDb.tooltip}</p>
                    </TooltipContent>
                  </Tooltip>
                </div>
              ))}
            </div>
          </TooltipProvider>

          <Card className="bg-yellow-100 border-2 border-black mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="neutral" 
                  className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">CHOOSING A VECTOR DATABASE</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Pinecone offers managed cloud hosting perfect for production. ChromaDB provides free, open-source local development. 
                    Weaviate delivers enterprise features with advanced ML capabilities. All three seamlessly support your vector embeddings.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-4 mt-8">
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
              onClick={() => handleStepChange(4)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              className={`flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black ${!canProceedFromStep5() ? 'opacity-50 cursor-not-allowed' : ''}`}
              onClick={() => setCurrentStep(6)}
              disabled={!canProceedFromStep5()}
            >
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/bulk/VerificationStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { UilSearch, UilArrowRight, UilArrowLeft, UilInfoCircle, UilCheckCircle, UilSpinner, UilChart, UilDatabase, UilClock } from '@tooni/iconscout-unicons-react';
import { BulkOnboardingState, VerificationResult } from './types';

interface VerificationStepProps {
  state: BulkOnboardingState;
  setState: (updates: Partial<BulkOnboardingState>) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
}

export function VerificationStep({ 
  state, 
  setState, 
  setCurrentStep,
  handleStepChange
}: VerificationStepProps) {
  
  const [testQuery, setTestQuery] = React.useState('');
  const [searchResults, setSearchResults] = React.useState<any[]>([]);
  const [isSearching, setIsSearching] = React.useState(false);
  const [verificationResults, setVerificationResults] = React.useState<VerificationResult | null>(null);
  const [hasRunVerification, setHasRunVerification] = React.useState(false);

  const canProceedFromStep7 = () => hasRunVerification;

  const handleTestSearch = async () => {
    if (!testQuery.trim()) return;

    setIsSearching(true);
    
    // Simulate semantic search
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const mockResults = [
      {
        id: 1,
        content: `Content related to "${testQuery}" from your processed videos. This is a high-quality match showing semantic understanding.`,
        similarity: 0.92,
        source: 'Video 1: Introduction to AI',
        timestamp: '2:34'
      },
      {
        id: 2,
        content: `Another relevant piece discussing concepts similar to "${testQuery}". The embedding model found strong semantic connections.`,
        similarity: 0.87,
        source: 'Video 3: Advanced Topics',
        timestamp: '5:12'
      },
      {
        id: 3,
        content: `Related discussion about "${testQuery}" that shows the vector database can find contextually relevant content.`,
        similarity: 0.81,
        source: 'Video 2: Deep Dive',
        timestamp: '1:45'
      }
    ];

    setSearchResults(mockResults);
    setIsSearching(false);
  };

  const handleRunVerification = async () => {
    setIsSearching(true);
    
    // Simulate comprehensive verification
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const results: VerificationResult = {
      totalEmbeddings: state.selectedContent.length * 10,
      searchAccuracy: 0.89,
      contentQuality: 0.92,
      processingTime: state.selectedContent.length * 2.3,
      vectorDbSize: `${(state.selectedContent.length * 0.5).toFixed(1)}MB`
    };

    setVerificationResults(results);
    setHasRunVerification(true);
    setIsSearching(false);
  };

  const getSimilarityColor = (similarity: number) => {
    if (similarity >= 0.9) return 'text-green-600';
    if (similarity >= 0.8) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getSimilarityLabel = (similarity: number) => {
    if (similarity >= 0.9) return 'Excellent';
    if (similarity >= 0.8) return 'Good';
    return 'Fair';
  };

  return (
    <div className="space-y-8">
      <Card className="transform -rotate-1">
        <CardContent className="p-8">
          <div className="text-center mb-8">
            <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
              VERIFY & TEST
            </h1>
            <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
              Test your vector database quality and verify that semantic search is working correctly.
            </p>
          </div>

          {/* Vector Database Info */}
          <Card className="bg-orange-50 mb-6">
            <CardContent className="p-6">
              <h3 className="text-xl font-black uppercase mb-4">VECTOR DATABASE STATUS</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="text-center">
                  <div className="w-16 h-16 mx-auto mb-3 bg-orange-600 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] flex items-center justify-center">
                    <UilDatabase className="h-8 w-8 text-white" />
                  </div>
                  <div className="text-2xl font-black text-orange-600">
                    {state.selectedContent.length * 10}
                  </div>
                  <div className="text-sm text-gray-600">Embeddings Created</div>
                </div>
                <div className="text-center">
                  <div className="w-16 h-16 mx-auto mb-3 bg-green-600 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] flex items-center justify-center">
                    <UilCheckCircle className="h-8 w-8 text-white" />
                  </div>
                  <div className="text-2xl font-black text-green-600">
                    {state.selectedVectorDb?.label}
                  </div>
                  <div className="text-sm text-gray-600">Vector Database</div>
                </div>
                <div className="text-center">
                  <div className="w-16 h-16 mx-auto mb-3 bg-purple-600 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] flex items-center justify-center">
                    <UilChart className="h-8 w-8 text-white" />
                  </div>
                  <div className="text-2xl font-black text-purple-600">
                    {state.selectedEmbeddingModel?.label}
                  </div>
                  <div className="text-sm text-gray-600">Embedding Model</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Test Search */}
          <Card className="mb-6">
            <CardContent className="p-6">
              <h3 className="text-lg font-black uppercase mb-4">TEST SEMANTIC SEARCH</h3>
              <div className="space-y-4">
                <div className="flex gap-3">
                  <Input
                    placeholder="Enter a search query to test your vector database..."
                    value={testQuery}
                    onChange={(e) => setTestQuery(e.target.value)}
                    className="flex-1 h-12 text-lg"
                    onKeyPress={(e) => e.key === 'Enter' && handleTestSearch()}
                  />
                  <Button
                    onClick={handleTestSearch}
                    disabled={!testQuery.trim() || isSearching}
                    className="h-12 px-8"
                  >
                    {isSearching ? (
                      <UilSpinner className="h-5 w-5 animate-spin" />
                    ) : (
                      <UilSearch className="h-5 w-5" />
                    )}
                  </Button>
                </div>

                {searchResults.length > 0 && (
                  <div className="space-y-3">
                    <h4 className="font-bold">Search Results:</h4>
                    {searchResults.map((result) => (
                      <Card key={result.id} className="bg-gray-50">
                        <CardContent className="p-4">
                          <div className="flex items-start justify-between mb-2">
                            <div className="text-sm text-gray-600">{result.source} • {result.timestamp}</div>
                            <Badge className={`${getSimilarityColor(result.similarity)} bg-transparent border-current`}>
                              {getSimilarityLabel(result.similarity)} ({(result.similarity * 100).toFixed(0)}%)
                            </Badge>
                          </div>
                          <p className="text-sm">{result.content}</p>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Comprehensive Verification */}
          <Card className="mb-6">
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-black uppercase">COMPREHENSIVE VERIFICATION</h3>
                <Button
                  onClick={handleRunVerification}
                  disabled={isSearching}
                  variant={hasRunVerification ? "neutral" : "default"}
                >
                  {isSearching ? (
                    <>
                      <UilSpinner className="h-4 w-4 mr-2 animate-spin" />
                      VERIFYING...
                    </>
                  ) : hasRunVerification ? (
                    <>
                      <UilCheckCircle className="h-4 w-4 mr-2" />
                      RE-RUN VERIFICATION
                    </>
                  ) : (
                    'RUN VERIFICATION'
                  )}
                </Button>
              </div>

              {verificationResults && (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <div className="bg-green-50 p-4 rounded border-2 border-black">
                    <div className="text-lg font-black text-green-600">
                      {verificationResults.totalEmbeddings.toLocaleString()}
                    </div>
                    <div className="text-sm text-gray-600">Total Embeddings</div>
                  </div>
                  <div className="bg-blue-50 p-4 rounded border-2 border-black">
                    <div className="text-lg font-black text-blue-600">
                      {(verificationResults.searchAccuracy * 100).toFixed(1)}%
                    </div>
                    <div className="text-sm text-gray-600">Search Accuracy</div>
                  </div>
                  <div className="bg-purple-50 p-4 rounded border-2 border-black">
                    <div className="text-lg font-black text-purple-600">
                      {(verificationResults.contentQuality * 100).toFixed(1)}%
                    </div>
                    <div className="text-sm text-gray-600">Content Quality</div>
                  </div>
                  <div className="bg-orange-50 p-4 rounded border-2 border-black">
                    <div className="text-lg font-black text-orange-600">
                      {verificationResults.processingTime.toFixed(1)}m
                    </div>
                    <div className="text-sm text-gray-600">Processing Time</div>
                  </div>
                  <div className="bg-gray-50 p-4 rounded border-2 border-black">
                    <div className="text-lg font-black text-gray-600">
                      {verificationResults.vectorDbSize}
                    </div>
                    <div className="text-sm text-gray-600">Database Size</div>
                  </div>
                  <div className="bg-yellow-50 p-4 rounded border-2 border-black">
                    <div className="text-lg font-black text-yellow-600">
                      {state.selectedContent.length}
                    </div>
                    <div className="text-sm text-gray-600">Source Videos</div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          <Card className="bg-yellow-100 mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="default" 
                  className="flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">VERIFICATION TIPS</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Test searches with different types of queries to ensure your vector database works well. 
                    Good search accuracy (&gt;85%) indicates high-quality embeddings. You can always re-run verification after making changes.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-4 mt-8">
            <Button
              variant="neutral"
              size="lg"
              className="flex-1 h-14 text-lg font-black uppercase"
              onClick={() => handleStepChange(6)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              variant="default"
              size="lg"
              className={`flex-1 h-14 text-lg font-black uppercase ${!canProceedFromStep7() ? 'opacity-50 cursor-not-allowed' : ''}`}
              onClick={() => setCurrentStep(8)}
              disabled={!canProceedFromStep7()}
            >
              <span className="flex items-center justify-center">
                CONTINUE
                <UilArrowRight className="ml-2 h-6 w-6" />
              </span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/cloning/ChannelSetupStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { UilYoutube, UilPlay, UilVideo, UilArrowRight, UilArrowLeft, UilInfoCircle, UilUpload } from '@tooni/iconscout-unicons-react';
import { Platform } from './types';

interface ChannelSetupStepProps {
  selectedPlatform: Platform;
  channelName: string;
  setChannelName: (name: string) => void;
  uploadedFile: File | null;
  setUploadedFile: (file: File | null) => void;
  setAudioUrl: (url: string) => void;
  setCurrentStep: (step: number) => void;
  handleLoadContent: () => void;
  handleStepChange: (step: number) => void;
  fetchedChannelsRef: React.MutableRefObject<Set<string>>;
}

export function ChannelSetupStep({
  selectedPlatform,
  channelName,
  setChannelName,
  uploadedFile,
  setUploadedFile,
  setAudioUrl,
  setCurrentStep,
  handleLoadContent,
  handleStepChange,
  fetchedChannelsRef,
}: ChannelSetupStepProps) {
  
  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setUploadedFile(file);
      setAudioUrl(URL.createObjectURL(file));
    }
  };

  const canProceedFromStep2 = () => {
    if (selectedPlatform === 'upload') {
      return uploadedFile !== null;
    }
    return channelName.trim() !== '';
  };

  return (
    <Card className="transform rotate-1">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            {selectedPlatform === 'upload' ? 'UPLOAD MEDIA' : 'CHANNEL DETAILS'}
          </h1>
        </div>
        
        <div className="space-y-6">
          {selectedPlatform === 'upload' ? (
            <>
              <Card className="bg-pink-50">
                <CardContent className="p-8">
                  <div className="border-4 border-dashed border-border rounded-lg p-8 text-center bg-background">
                    <input
                      type="file"
                      accept=".mp4,.mov,.avi,.webm,.mp3,.wav"
                      onChange={handleFileUpload}
                      className="hidden"
                      id="media-upload"
                    />
                    <label htmlFor="media-upload" className="cursor-pointer">
                      <Button size="icon" variant="default" className="w-16 h-16 mb-4">
                        <UilUpload className="h-8 w-8" />
                      </Button>
                      <p className="text-lg font-bold">Click to upload media file</p>
                      <p className="text-sm text-gray-600 mt-2">Supported: MP4, MOV, AVI, WebM, MP3, WAV</p>
                    </label>
                  </div>
                  {uploadedFile && (
                    <div className="mt-4 p-4 bg-green-50 border-2 border-border rounded">
                      <p className="font-bold">✓ {uploadedFile.name} uploaded</p>
                      <p className="text-sm text-gray-600">Size: {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </>
          ) : (
            <>
              <div>
                <label className="text-xl font-black uppercase mb-3 block">
                  {selectedPlatform === 'youtube' && 'YOUTUBE CHANNEL URL OR HANDLE'}
                  {selectedPlatform === 'twitch' && 'TWITCH USERNAME'}
                  {selectedPlatform === 'tiktok' && 'TIKTOK USERNAME'}
                </label>
                <Input
                  type="text"
                  value={channelName}
                  onChange={(e) => setChannelName(e.target.value)}
                  placeholder={
                    selectedPlatform === 'youtube' ? 'e.g., @channelname or youtube.com/c/channelname' :
                    selectedPlatform === 'twitch' ? 'e.g., streamername' :
                    selectedPlatform === 'tiktok' ? 'e.g., @username' :
                    ''
                  }
                  className="h-16 text-lg font-semibold border-4 border-border rounded-base"
                />
              </div>


              <Card className="bg-pink-50">
                <CardContent className="p-4">
                  <h4 className="font-black uppercase mb-2 flex items-center gap-2">
                    {selectedPlatform === 'youtube' && <UilYoutube className="h-5 w-5" />}
                    {selectedPlatform === 'twitch' && <UilPlay className="h-5 w-5" />}
                    {selectedPlatform === 'tiktok' && <UilVideo className="h-5 w-5" />}
                    {selectedPlatform.toUpperCase()} CHANNEL INFO
                  </h4>
                  <p className="text-sm text-gray-700">
                    {selectedPlatform === 'youtube' && 'Enter the channel URL or @handle. We&apos;ll fetch all public videos, analyze content style, and prepare for cloning.'}
                    {selectedPlatform === 'twitch' && 'Enter the Twitch username. We&apos;ll access recent VODs and clips to analyze streaming style and personality.'}
                    {selectedPlatform === 'tiktok' && 'Enter the TikTok @username. We&apos;ll analyze recent videos to capture the creator&apos;s unique style and energy.'}
                  </p>
                </CardContent>
              </Card>

            </>
          )}
        </div>

        <div className="flex gap-4 mt-8">
          <Button
            variant="neutral"
            size="lg"
            className="flex-1 h-14 text-lg font-black uppercase"
            onClick={() => {
              fetchedChannelsRef.current.clear();
              handleStepChange(1);
            }}
          >
            <UilArrowLeft className="mr-2 h-6 w-6" />
            BACK
          </Button>
          <Button
            variant="default"
            size="lg"
            className={`flex-1 h-14 text-lg font-black uppercase ${!canProceedFromStep2() ? 'opacity-50 cursor-not-allowed' : ''}`}
            onClick={handleLoadContent}
            disabled={!canProceedFromStep2()}
          >
            LOAD CONTENT
            <UilArrowRight className="ml-2 h-6 w-6" />
          </Button>
        </div>

        <Card className="bg-yellow-100 mt-6">
          <CardContent className="p-4">
            <div className="flex items-start gap-3">
              <Button 
                size="sm" 
                variant="default" 
                className="flex-shrink-0"
              >
                <UilInfoCircle className="h-4 w-4" />
              </Button>
              <div>
                <p className="text-sm font-bold">CHANNEL ACCESS</p>
                <p className="text-sm text-gray-700 mt-1">
                  The system only accesses publicly available content. Private videos or subscriber-only content 
                  are not included in the cloning process. Channels must have sufficient content for accurate analysis.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/cloning/ContentSelectionStep.tsx
================================================
'use client';

import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { UilSpinner, UilArrowRight, UilArrowLeft, UilCheckCircle, UilInfoCircle, UilPlay, UilYoutube, UilVideo, UilClock, UilEye, UilThumbsUp, UilVolume, UilVolumeMute } from '@tooni/iconscout-unicons-react';
import { ContentItem, Platform } from './types';
import { useVideoPreviewContext } from '@/contexts/VideoPreviewContext';

interface ContentSelectionStepProps {
  selectedPlatform: Platform;
  channelName: string;
  uploadedFile: File | null;
  audioUrl: string;
  isLoading: boolean;
  loadProgress: number;
  processingProgress: number;
  voiceCloneReady: boolean;
  selectedContent: string[];
  toggleContentSelection: (contentId: string) => void;
  setSelectedContent: (content: string[]) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
  // Platform specific data
  tiktokUser: any;
  tiktokVideos: any[];
  youtubeChannel: any;
  youtubeVideos: any[];
  twitchChannel: any;
  twitchVideos: any[];
  twitchChannelDataComplete: boolean;
}

export function ContentSelectionStep({
  selectedPlatform,
  channelName,
  uploadedFile,
  audioUrl,
  isLoading,
  loadProgress,
  processingProgress,
  voiceCloneReady,
  selectedContent,
  toggleContentSelection,
  setSelectedContent,
  setCurrentStep,
  handleStepChange,
  tiktokUser,
  tiktokVideos,
  youtubeChannel,
  youtubeVideos,
  twitchChannel,
  twitchVideos,
  twitchChannelDataComplete,
}: ContentSelectionStepProps) {
  const { generateMultiplePreviews, previewsLoading, generatePreview, getPreview, extractAudio, cancelPreview, clearCache, previews } = useVideoPreviewContext();
  const [hoveredVideoId, setHoveredVideoId] = React.useState<string | null>(null);
  const [mutedVideos, setMutedVideos] = React.useState<Set<string>>(new Set());
  const [previewQueue, setPreviewQueue] = React.useState<Set<string>>(new Set());
  const [hoverStartTime, setHoverStartTime] = React.useState<number | null>(null);
  const [videoLoadingStates, setVideoLoadingStates] = React.useState<Map<string, 'idle' | 'preparing' | 'loading' | 'canplay' | 'loaded'>>(new Map());
  const hoverTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  const videoLoadTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  
  const videos = React.useMemo(() => {
    return selectedPlatform === 'tiktok' ? tiktokVideos : 
           selectedPlatform === 'youtube' ? youtubeVideos : 
           selectedPlatform === 'twitch' ? twitchVideos : [];
  }, [selectedPlatform, tiktokVideos, youtubeVideos, twitchVideos]);

  const channel = selectedPlatform === 'tiktok' ? tiktokUser : 
                  selectedPlatform === 'youtube' ? youtubeChannel : 
                  selectedPlatform === 'twitch' ? twitchChannel : null;
  
  // Cleanup when platform changes or component unmounts
  React.useEffect(() => {
    return () => {
      // Clear any pending hover timeouts
      if (hoverTimeoutRef.current) {
        clearTimeout(hoverTimeoutRef.current);
      }
      // Clear preview cache when leaving
      clearCache();
    };
  }, [clearCache, selectedPlatform]);
  
  // Cleanup videos when component unmounts or step changes
  React.useEffect(() => {
    return () => {
      // Stop all videos when leaving this step
      const videos = document.querySelectorAll('video');
      videos.forEach(video => {
        video.pause();
        video.muted = true;
        video.src = '';
        video.load();
      });
    };
  }, []);

  // Smart prefetching - preload first 3 videos for TikTok when videos are available
  React.useEffect(() => {
    if (selectedPlatform === 'tiktok' && videos.length > 0 && !previewsLoading) {
      const videosToPreload = videos.slice(0, 3);
      
      console.log('[ContentSelection] Starting smart prefetch for first', videosToPreload.length, 'videos');
      
      // Use a small delay to not interfere with initial page load
      const prefetchTimeout = setTimeout(() => {
        videosToPreload.forEach((video, index) => {
          const videoId = video.id || video.video_id || video.videoId;
          const videoUrl = video.url || video.videoUrl;
          
          // Only prefetch if not already cached
          const existingPreview = getPreview(videoId, 'tiktok');
          if (!existingPreview?.previewUrl && !previewQueue.has(videoId)) {
            console.log('[ContentSelection] Prefetching video', index + 1, ':', videoId);
            
            // Add to queue to prevent duplicate requests
            setPreviewQueue(prev => new Set(prev).add(videoId));
            
            // Generate preview in background
            generatePreview(videoId, 'tiktok', videoUrl)
              .then((result) => {
                if (result?.previewUrl) {
                  console.log('[ContentSelection] Prefetch completed for:', videoId);
                } else {
                  console.log('[ContentSelection] Prefetch failed for:', videoId);
                }
              })
              .finally(() => {
                // Remove from queue when done
                setPreviewQueue(prev => {
                  const newSet = new Set(prev);
                  newSet.delete(videoId);
                  return newSet;
                });
              });
          }
        });
      }, 1000); // 1 second delay to let initial load complete
      
      return () => clearTimeout(prefetchTimeout);
    }
  }, [selectedPlatform, videos, previewsLoading, getPreview, generatePreview, previewQueue]);
  
  const canProceedFromStep3 = () => {
    if (selectedPlatform === 'upload') {
      return voiceCloneReady;
    }
    return selectedContent.length > 0;
  };

  const formatDuration = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    if (hours > 0) {
      return `${hours}h ${minutes}m`;
    }
    return `${minutes}m ${secs}s`;
  };

  const formatViews = (views: number) => {
    if (views >= 1000000) {
      return `${(views / 1000000).toFixed(1)}M`;
    } else if (views >= 1000) {
      return `${(views / 1000).toFixed(1)}K`;
    }
    return views.toString();
  };

  // Helper function to update video loading state
  const updateVideoLoadingState = React.useCallback((videoId: string, state: 'idle' | 'preparing' | 'loading' | 'canplay' | 'loaded') => {
    setVideoLoadingStates(prev => new Map(prev).set(videoId, state));
  }, []);

  // Helper function to get video loading state
  const getVideoLoadingState = React.useCallback((videoId: string) => {
    return videoLoadingStates.get(videoId) || 'idle';
  }, [videoLoadingStates]);

  // Handle video hover for preview generation with debounce
  const handleVideoHover = React.useCallback((videoId: string, videoUrl?: string) => {
    // Clear any existing timeouts
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
    }
    if (videoLoadTimeoutRef.current) {
      clearTimeout(videoLoadTimeoutRef.current);
    }
    
    // Set hovered video immediately for UI feedback (shows thumbnail)
    setHoveredVideoId(videoId);
    setHoverStartTime(Date.now()); // Track hover start time for immediate feedback
    
    // Set preparing state immediately for instant visual feedback
    updateVideoLoadingState(videoId, 'preparing');
    
    // Check if preview already exists and is ready
    if (selectedPlatform === 'tiktok') {
      const existingPreview = getPreview(videoId, 'tiktok');
      if (existingPreview?.previewUrl && !existingPreview.error) {
        // If preview already exists, it will be shown automatically due to hover state
        console.log('[ContentSelection] Preview already exists for:', videoId);
        return;
      }
    }
    
    // First timeout: After 0.5 seconds of sustained hover, start loading video
    hoverTimeoutRef.current = setTimeout(() => {
      if (selectedPlatform === 'tiktok') {
        const preview = getPreview(videoId, 'tiktok');
        
        // Check if we're already loading this preview or in the queue
        const isAlreadyQueued = previewQueue.has(videoId);
        const hasExistingPreview = preview && (preview.previewUrl || preview.loading);
        
        // Only generate preview if not already loaded/loading and not in queue
        if (!isAlreadyQueued && !hasExistingPreview) {
          console.log('[ContentSelection] Starting preview generation after sustained hover for:', videoId);
          
          // Update to loading state
          updateVideoLoadingState(videoId, 'loading');
          
          // Track that we're generating this preview
          setPreviewQueue(prev => new Set(prev).add(videoId));
          
          generatePreview(videoId, 'tiktok', videoUrl)
            .then((result) => {
              // Video will be shown automatically if user is still hovering and preview exists
              if (result?.previewUrl) {
                console.log('[ContentSelection] Preview generated successfully for:', videoId);
                updateVideoLoadingState(videoId, 'canplay');
              } else {
                console.log('[ContentSelection] Preview generation failed for:', videoId, result);
                updateVideoLoadingState(videoId, 'idle');
              }
            })
            .finally(() => {
              // Remove from queue when done
              setPreviewQueue(prev => {
                const newSet = new Set(prev);
                newSet.delete(videoId);
                return newSet;
              });
            });
        } else if (preview?.previewUrl && !preview.error) {
          // Preview already exists and will be shown due to hover state
          console.log('[ContentSelection] Preview already loaded for:', videoId);
        }
      }
    }, 500); // 0.5 second delay before starting video load
  }, [generatePreview, getPreview, selectedPlatform, previewQueue, updateVideoLoadingState]);
  
  // Handle mouse leave
  const handleVideoLeave = React.useCallback(() => {
    // Clear any pending preview generation
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
      hoverTimeoutRef.current = null;
    }
    if (videoLoadTimeoutRef.current) {
      clearTimeout(videoLoadTimeoutRef.current);
      videoLoadTimeoutRef.current = null;
    }
    
    // Cancel any ongoing preview request for the currently hovered video
    if (hoveredVideoId && selectedPlatform === 'tiktok') {
      cancelPreview(hoveredVideoId, 'tiktok');
    }
    
    setHoveredVideoId(null);
    setHoverStartTime(null);
    
    // Reset loading state when not hovering
    if (hoveredVideoId) {
      updateVideoLoadingState(hoveredVideoId, 'idle');
    }
  }, [hoveredVideoId, selectedPlatform, cancelPreview, updateVideoLoadingState]);

  // Handle audio mute toggle
  const handleAudioToggle = React.useCallback((videoId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    
    setMutedVideos(prev => {
      const newSet = new Set(prev);
      if (newSet.has(videoId)) {
        newSet.delete(videoId);
      } else {
        newSet.add(videoId);
      }
      return newSet;
    });
  }, []);

  return (
    <Card className="transform -rotate-1">
      <CardContent className="p-8">
        {isLoading ? (
          <Card className="bg-gradient-to-br from-pink-50 to-yellow-50">
            <CardContent className="p-8">
              <div className="space-y-6">
                <div className="text-center">
                  <div className="w-20 h-20 mx-auto mb-6 bg-pink-500 border-4 border-border shadow-shadow flex items-center justify-center">
                    <UilSpinner className="h-12 w-12 animate-spin text-white" />
                  </div>
                  <h2 className="text-3xl font-black uppercase text-foreground">
                    {selectedPlatform === 'upload' ? 'PROCESSING VOICE' : 'LOADING CONTENT'}
                  </h2>
                </div>
                <Progress value={selectedPlatform === 'upload' ? processingProgress : loadProgress} className="h-6 border-2 border-border" />
                <p className="text-center text-muted-foreground text-lg font-bold">
                  {selectedPlatform === 'upload' 
                    ? `Analyzing voice patterns in ${uploadedFile?.name}...`
                    : `Fetching videos from ${channelName}...`
                  }
                </p>
              </div>
            </CardContent>
          </Card>
        ) : selectedPlatform === 'upload' ? (
          <>
            {/* Voice Studio UI for Upload */}
            <div className="text-center mb-8">
              <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                VOICE CLONE STUDIO
              </h1>
              <p className="text-lg text-gray-700 mt-2">
                Process and clone voice from your uploaded file
              </p>
            </div>

            <div className="mb-8">
              <Card className="bg-pink-50">
                <CardContent className="p-6">
                  {/* File Info */}
                  <div className="mb-4">
                    <Badge className="bg-pink-500 text-white border-2 border-black px-3 py-1 text-sm font-bold">
                      {uploadedFile?.type.startsWith('video/') ? 'VIDEO FILE' : 'AUDIO FILE'}
                    </Badge>
                    <h3 className="text-2xl font-black uppercase text-black mt-2">
                      {uploadedFile?.name}
                    </h3>
                    <div className="flex items-center gap-4 mt-2">
                      <span className="text-sm font-bold text-gray-700">SIZE:</span>
                      <span className="text-sm font-black text-black">
                        {uploadedFile ? `${(uploadedFile.size / 1024 / 1024).toFixed(2)} MB` : 'N/A'}
                      </span>
                      <span className="text-gray-400">·</span>
                      <span className="text-sm font-bold text-gray-700">FORMAT:</span>
                      <span className="text-sm font-black text-black">
                        {uploadedFile?.name.split('.').pop()?.toUpperCase() || 'N/A'}
                      </span>
                    </div>
                  </div>

                  {/* Media Player */}
                  <div className="rounded-lg bg-gray-100 border-4 border-black shadow-[4px_4px_0_rgba(0,0,0,1)] overflow-hidden p-4">
                    {uploadedFile?.type.startsWith('video/') ? (
                      <video 
                        controls 
                        className="w-full max-h-[400px]"
                        src={audioUrl}
                      >
                        Your browser does not support the video element.
                      </video>
                    ) : (
                      <audio 
                        controls 
                        className="w-full"
                        src={audioUrl}
                      >
                        Your browser does not support the audio element.
                      </audio>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Status Message */}
            {voiceCloneReady && (
              <Card className="bg-green-50">
                <CardContent className="p-4">
                  <div className="flex items-center gap-3">
                    <UilCheckCircle className="h-6 w-6 text-green-600" />
                    <div>
                      <p className="font-bold">Voice Analysis Complete!</p>
                      <p className="text-sm text-gray-700">Your voice clone is ready. Choose an action above to continue.</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            <div className="flex gap-4 mt-8">
              <Button
                variant="neutral"
                size="lg"
                className="flex-1 h-14 text-lg font-black uppercase"
                onClick={() => handleStepChange(2)}
              >
                <UilArrowLeft className="mr-2 h-6 w-6" />
                BACK
              </Button>
              <Button
                variant="default"
                size="lg"
                className={`flex-1 h-14 text-lg font-black uppercase ${!voiceCloneReady ? 'opacity-50 cursor-not-allowed' : ''}`}
                onClick={() => setCurrentStep(4)}
                disabled={!voiceCloneReady}
              >
                CONTINUE
                <UilArrowRight className="ml-2 h-6 w-6" />
              </Button>
            </div>
          </>
        ) : (
          <>
            {/* Content Selection UI for Platform Videos */}
            <div className="text-center mb-8">
              <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
                SELECT CONTENT
              </h1>
              <p className="text-lg text-gray-700 mt-2">
                Choose videos to include in your AI clone training
              </p>
            </div>

            {/* Platform-specific channel info */}
            {channel && (
              <Card className="bg-pink-50 mb-6">
                <CardContent className="p-4">
                  <div className="flex items-start gap-4">
                    {channel.avatar && (
                      <Image 
                        src={channel.avatar} 
                        alt={channel.username || channel.title}
                        width={64}
                        height={64}
                        className="w-16 h-16 rounded-full border-2 border-black"
                        unoptimized={channel.avatar.includes('tiktokcdn') || channel.avatar.includes('twitch') || channel.avatar.includes('youtube')}
                        onError={(e) => {
                          console.warn('[ContentSelection] Channel avatar failed to load:', channel.avatar);
                          e.currentTarget.src = '/placeholder-avatar.png';
                        }}
                      />
                    )}
                    <div className="flex-1">
                      <h3 className="text-xl font-black uppercase">
                        {channel.username || channel.channelName || channel.displayName || channel.title || channel.display_name}
                      </h3>
                      {channel.follower_count !== undefined && (
                        <p className="text-sm text-gray-700">
                          {formatViews(channel.follower_count)} followers
                        </p>
                      )}
                      {channel.followerCount !== undefined && (
                        <p className="text-sm text-gray-700">
                          {formatViews(channel.followerCount)} followers
                        </p>
                      )}
                      {channel.subscriberCount !== undefined && (
                        <p className="text-sm text-gray-700">
                          {formatViews(parseInt(channel.subscriberCount))} subscribers
                        </p>
                      )}
                      {channel.description && (
                        <p className="text-sm text-gray-600 mt-2 line-clamp-2">
                          {channel.description}
                        </p>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
            
            {/* Video selection controls */}
            <div className="mb-6 flex justify-between items-center">
              <p className="text-sm font-bold">
                {selectedContent.length} of {videos.length} videos selected
              </p>
              <Button
                size="sm"
                variant="neutral"
                onClick={() => {
                  if (selectedContent.length === videos.length) {
                    setSelectedContent([]);
                  } else {
                    setSelectedContent(videos.map(v => v.id || v.video_id || v.videoId));
                  }
                }}
              >
                {selectedContent.length === videos.length ? 'DESELECT ALL' : 'SELECT ALL'}
              </Button>
            </div>

            {/* Help text for video previews */}
            {selectedPlatform === 'tiktok' && (
              <Card className="bg-blue-50 mb-6">
                <CardContent className="p-4">
                  <div className="flex items-center gap-3">
                    <UilInfoCircle className="h-5 w-5 text-blue-600" />
                    <div>
                      <p className="font-bold text-sm">Video Preview Tip</p>
                      <p className="text-xs text-gray-700">Hover and hold on a video for 0.5 seconds to see a preview</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Video grid */}
            <div className="grid gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3">
              {videos.map((video: any, index: number) => {
                const videoId = video.id || video.video_id || video.videoId;
                const isSelected = selectedContent.includes(videoId);
                const preview = getPreview(videoId, selectedPlatform as 'tiktok' | 'youtube' | 'twitch');
                const isHovered = hoveredVideoId === videoId;
                
                if (isHovered && preview) {
                  console.log('[ContentSelection] Preview state for', videoId, ':', {
                    loading: preview.loading,
                    hasUrl: !!preview.previewUrl,
                    url: preview.previewUrl,
                    error: preview.error
                  });
                }
                
                return (
                  <div
                    key={videoId || `video-${index}`}
                    className="relative cursor-pointer transform transition-all hover:scale-105"
                    onClick={() => toggleContentSelection(videoId)}
                  >
                    <Card className={`border-4 border-border overflow-hidden shadow-shadow hover:translate-x-1 hover:translate-y-1 hover:shadow-none transition-all ${
                      isSelected ? 'ring-4 ring-pink-500 bg-pink-50' : 'bg-background'
                    }`}>
                      <div 
                        className="relative"
                        onMouseEnter={() => handleVideoHover(videoId, video.url || video.videoUrl)}
                        onMouseLeave={handleVideoLeave}
                      >
                        {/* Base thumbnail - always visible */}
                        <Image 
                          src={video.thumbnail || video.thumbnails?.[0]?.url || '/placeholder.jpg'} 
                          alt={video.title || video.description}
                          width={selectedPlatform === 'tiktok' ? 180 : 320}
                          height={selectedPlatform === 'tiktok' ? 320 : 180}
                          className={`w-full object-cover ${
                            selectedPlatform === 'tiktok' ? 'aspect-[9/16]' : 'aspect-[16/9]'
                          }`}
                          unoptimized={(video.thumbnail && video.thumbnail.includes('tiktokcdn')) || (video.thumbnails?.[0]?.url && video.thumbnails[0].url.includes('tiktokcdn'))}
                          onError={(e) => {
                            console.warn('[ContentSelection] Video thumbnail failed to load:', video.thumbnail || video.thumbnails?.[0]?.url);
                            e.currentTarget.src = '/placeholder.jpg';
                          }}
                        />
                        
                        {/* Video overlay - shown when preview is available and loaded */}
                        {isHovered && preview?.previewUrl && !preview.error && (
                          <div className="absolute inset-0">
                            <video
                              key={`video-${videoId}`}
                              src={preview.previewUrl}
                              className={`w-full h-full object-cover transition-opacity duration-500 ${
                                getVideoLoadingState(videoId) === 'loaded' ? 'opacity-100' : 'opacity-0'
                              }`}
                              autoPlay
                              muted={mutedVideos.has(videoId) || !isHovered}
                              loop
                              playsInline
                              preload="metadata"
                              onLoadStart={() => {
                                console.log('[ContentSelection] Video load started for', videoId);
                                updateVideoLoadingState(videoId, 'loading');
                              }}
                              onCanPlay={() => {
                                console.log('[ContentSelection] Video can play for', videoId);
                                updateVideoLoadingState(videoId, 'canplay');
                              }}
                              onLoadedData={(e) => {
                                console.log('[ContentSelection] Video loaded successfully for', videoId);
                                updateVideoLoadingState(videoId, 'loaded');
                                // Set volume to 30%
                                const videoElement = e.currentTarget as HTMLVideoElement;
                                videoElement.volume = 0.3;
                              }}
                              onError={(e) => {
                                console.error('[ContentSelection] Video playback error for', videoId, ':', e);
                                updateVideoLoadingState(videoId, 'idle');
                                // Video will automatically fall back to thumbnail when error occurs
                              }}
                            />
                          </div>
                        )}
                        
                        {/* Progressive loading overlay */}
                        {isHovered && (
                          <div className="absolute inset-0 bg-black bg-opacity-40 flex flex-col items-center justify-center transition-opacity duration-300">
                            <div className="flex flex-col items-center">
                              {(() => {
                                const loadingState = getVideoLoadingState(videoId);
                                
                                if (loadingState === 'preparing' && hoverStartTime && Date.now() - hoverStartTime < 500) {
                                  return (
                                    <>
                                      <UilSpinner className="h-8 w-8 text-white animate-spin mb-2" />
                                      <p className="text-white text-xs font-semibold">Preparing preview...</p>
                                    </>
                                  );
                                } else if (loadingState === 'loading') {
                                  return (
                                    <>
                                      <UilSpinner className="h-10 w-10 text-white animate-spin mb-2" />
                                      <p className="text-white text-xs font-semibold">Loading video...</p>
                                    </>
                                  );
                                } else if (loadingState === 'canplay') {
                                  return (
                                    <>
                                      <UilSpinner className="h-8 w-8 text-white animate-spin mb-2" />
                                      <p className="text-white text-xs font-semibold">Starting playback...</p>
                                    </>
                                  );
                                } else if (loadingState === 'loaded') {
                                  return null; // No overlay when video is playing
                                } else if (!preview?.previewUrl && !preview?.loading) {
                                  return (
                                    <>
                                      <UilPlay className="h-12 w-12 text-white mb-2" />
                                      <p className="text-white text-xs font-semibold">Hold to preview</p>
                                    </>
                                  );
                                }
                                return null;
                              })()}
                            </div>
                          </div>
                        )}
                        
                        {/* Error overlay */}
                        {isHovered && preview?.error && (
                          <div className="absolute inset-0 bg-red-900 bg-opacity-50 flex flex-col items-center justify-center p-2">
                            <p className="text-white text-xs font-bold text-center">Preview unavailable</p>
                            <p className="text-white text-xs mt-1">Try hovering again</p>
                          </div>
                        )}
                        
                        <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-10 transition-opacity" />
                        {isSelected && (
                          <div className="absolute top-2 right-2 w-6 h-6 bg-pink-500 border-2 border-black flex items-center justify-center">
                            <UilCheckCircle className="h-4 w-4 text-white" />
                          </div>
                        )}
                      </div>
                      <CardContent className="p-3">
                        <p className="font-bold text-sm line-clamp-2">
                          {video.title || video.description || 'Untitled'}
                        </p>
                        <div className="flex items-center gap-2 mt-2 text-xs text-gray-600">
                          <div className="flex items-center gap-1">
                            <UilClock className="h-3 w-3" />
                            <span>{formatDuration(video.duration || 0)}</span>
                          </div>
                          {video.viewCount !== undefined && (
                            <>
                              <span>·</span>
                              <div className="flex items-center gap-1">
                                <UilEye className="h-3 w-3" />
                                <span>{formatViews(video.viewCount)}</span>
                              </div>
                            </>
                          )}
                          {video.play_count !== undefined && (
                            <>
                              <span>·</span>
                              <div className="flex items-center gap-1">
                                <UilEye className="h-3 w-3" />
                                <span>{formatViews(video.play_count)}</span>
                              </div>
                            </>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                );
              })}
            </div>

            <div className="flex gap-4 mt-8">
              <Button
                variant="neutral"
                size="lg"
                className="flex-1 h-14 text-lg font-black uppercase"
                onClick={() => {
                  setSelectedContent([]);
                  handleStepChange(2);
                }}
              >
                <UilArrowLeft className="mr-2 h-6 w-6" />
                BACK
              </Button>
              <Button
                variant="default"
                size="lg"
                className={`flex-1 h-14 text-lg font-black uppercase ${!canProceedFromStep3() ? 'opacity-50 cursor-not-allowed' : ''}`}
                onClick={() => setCurrentStep(4)}
                disabled={!canProceedFromStep3()}
              >
                CONTINUE
                <UilArrowRight className="ml-2 h-6 w-6" />
              </Button>
            </div>

            {/* Info Box */}
            <Card className="bg-yellow-100 mt-6">
              <CardContent className="p-4">
                <div className="flex items-start gap-3">
                  <Button 
                    size="sm" 
                    variant="default" 
                    className="flex-shrink-0"
                  >
                    <UilInfoCircle className="h-4 w-4" />
                  </Button>
                  <div>
                    <p className="text-sm font-bold">CONTENT SELECTION TIPS</p>
                    <p className="text-sm text-gray-700 mt-1">
                      Select videos that best represent your communication style. Longer videos with clear speech 
                      provide better training data. Mix different content types for a well-rounded AI clone.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </>
        )}
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/cloning/IdentityVerificationStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { UilSpinner, UilArrowRight, UilArrowLeft, UilCheckCircle } from '@tooni/iconscout-unicons-react';

interface IdentityVerificationStepProps {
  setShowVerificationModal: (show: boolean) => void;
  handleStepChange: (step: number) => void;
}

export function IdentityVerificationStep({
  setShowVerificationModal,
  handleStepChange,
}: IdentityVerificationStepProps) {
  
  return (
    <Card className="transform rotate-1">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            PREPARING YOUR CLONE
          </h1>
          <p className="text-lg text-gray-700 mt-2">
            Setting up voice processing pipeline
          </p>
        </div>

        <Card className="bg-pink-50 border-2 border-black">
          <CardContent className="p-6">
            <div className="space-y-6">
              <div className="text-center">
                <UilSpinner className="h-16 w-16 mx-auto text-pink-600 animate-spin mb-4" />
                <p className="text-lg font-bold mb-6">
                  Initializing voice cloning engine...
                </p>
              </div>
              
              <Progress value={75} className="h-4" />
              
              <div className="space-y-2 text-sm">
                <div className="flex items-center gap-2">
                  <UilCheckCircle className="h-5 w-5 text-green-600" />
                  <span>Voice data uploaded successfully</span>
                </div>
                <div className="flex items-center gap-2">
                  <UilCheckCircle className="h-5 w-5 text-green-600" />
                  <span>Voice parameters configured</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="h-5 w-5 border-2 border-pink-600 rounded-full animate-pulse"></div>
                  <span className="font-bold">Verifying authorization...</span>
                </div>
                <div className="flex items-center gap-2 opacity-50">
                  <div className="h-5 w-5 border-2 border-gray-400 rounded-full"></div>
                  <span>Ready to begin cloning</span>
                </div>
              </div>

              <Button
                className="w-full h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
                onClick={() => setShowVerificationModal(true)}
              >
                COMPLETE VERIFICATION
                <UilArrowRight className="ml-2 h-6 w-6" />
              </Button>
            </div>
          </CardContent>
        </Card>

        <div className="flex gap-4 mt-8">
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
            onClick={() => handleStepChange(5)}
          >
            <UilArrowLeft className="mr-2 h-6 w-6" />
            BACK
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/cloning/ModelSelectionStep.tsx
================================================
import React, { useState } from 'react';
import Image from 'next/image';
import { Bot, Heart, MessageSquare, Mic, Image as ImageIcon } from 'lucide-react';
import { ModelData } from './types';
import PremiumFeatureCard from '@/components/custom/premium-feature-card';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';

interface ModelSelectionStepProps {
  selectedModel: ModelData | null;
  setSelectedModel: (model: ModelData | null) => void;
  currentStep: number;
  setCurrentStep: (step: number) => void;
}

const modelsData: ModelData[] = [
  { 
    id: 'dia', 
    label: 'dia', 
    Icon: Bot, 
    color: 'bg-pink-500', 
    tooltip: 'Ultra-realistic dialogue with multi-speaker support, emotion tags, and voice cloning from short audio samples', 
    imageSrc: null, 
    voices: [
      { id: 'v1', name: 'Nova' }, 
      { id: 'v2', name: 'Orion' }
    ] 
  },
  { 
    id: 'orpheus', 
    label: 'orpheus', 
    Icon: Heart, 
    color: 'bg-red-500', 
    tooltip: 'Human-like speech with zero-shot voice cloning, emotion control, and 200ms streaming latency', 
    imageSrc: null, 
    voices: [
      { id: 'v3', name: 'Echo' }, 
      { id: 'v4', name: 'Aura' }
    ] 
  },
  { 
    id: 'chatterbox', 
    label: 'chatterbox', 
    Icon: Mic, 
    color: 'bg-cyan-500', 
    tooltip: 'Open-source TTS with emotion exaggeration control, voice cloning, and sub-200ms latency', 
    imageSrc: null, 
    voices: [] 
  },
];


export default function ModelSelectionStep({
  selectedModel,
  setSelectedModel,
  currentStep,
  setCurrentStep,
}: ModelSelectionStepProps) {
  const [hoveredButton, setHoveredButton] = useState<string | null>(null);

  const handleModelSelect = (model: ModelData) => {
    setSelectedModel(model);
    setHoveredButton(null);
  };

  const handleNext = () => {
    if (selectedModel) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    setCurrentStep(currentStep - 1);
  };

  return (
    <div className="w-full">
      <Card className="w-full p-6 sm:p-8">
        <CardContent className="p-0">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            {modelsData.map((model) => (
              <div key={model.id} className="relative flex justify-center">
                <button 
                  className={`w-full bg-background text-foreground font-bold py-6 px-4 border-4 border-border shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all duration-150 text-center ${
                    selectedModel?.id === model.id 
                      ? 'bg-pink-100 border-pink-500' 
                      : ''
                  }`}
                  onClick={() => handleModelSelect(model)} 
                  onMouseEnter={() => setHoveredButton(model.label)} 
                  onMouseLeave={() => setHoveredButton(null)} 
                  onTouchStart={() => setHoveredButton(model.label)} 
                  onTouchEnd={() => setHoveredButton(null)}
                >
                  <div className="flex flex-col items-center justify-center space-y-4">
                    <div className={`p-3 border-4 border-border ${model.color} shadow-shadow`}>
                      <model.Icon className="w-10 h-10 text-white" strokeWidth={2.5} />
                    </div>
                    <span className="text-lg uppercase font-bold">{model.label}</span>
                  </div>
                </button>

                {hoveredButton === model.label && (
                  <div className="absolute bottom-full mb-3 z-10 flex flex-col items-center">
                    <div className="bg-background p-3 border-4 border-border shadow-shadow max-w-xs">
                      <div className="w-32 h-20 border-2 border-border flex items-center justify-center bg-secondary-background mb-3">
                        {model.imageSrc ? (
                          <Image 
                            src={model.imageSrc} 
                            alt={`${model.label} preview`} 
                            width={128}
                            height={80}
                            className="w-full h-full object-cover" 
                          />
                        ) : (
                          <ImageIcon className="w-8 h-8 text-muted-foreground" />
                        )}
                      </div>
                      <p className="text-foreground text-sm font-bold text-center">{model.tooltip}</p>
                    </div>
                    <div 
                      className="w-0 h-0 border-l-[8px] border-l-transparent border-r-[8px] border-r-transparent border-t-[8px] border-t-border" 
                      style={{ marginTop: '-2px' }} 
                    />
                  </div>
                )}
              </div>
            ))}
          </div>

          <div className="w-full mt-8">
            <PremiumFeatureCard 
              title="Advanced Models" 
              description="Access premium AI models with enhanced capabilities"
              price="5 USDC/mo"
            />
          </div>
          <div className="w-full mt-8 flex gap-4">
            <Button
              onClick={handleBack}
              variant="neutral"
              size="lg"
              className="flex-1"
            >
              ← BACK
            </Button>
            <Button
              onClick={handleNext}
              disabled={!selectedModel}
              variant={selectedModel ? "default" : "neutral"}
              size="lg"
              className={`flex-1 ${!selectedModel ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              CONTINUE →
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/cloning/PlatformSelectionStep.tsx
================================================
'use client';

import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Star15 } from '@/components/ui/star';
import { UilYoutube, UilArrowRight, UilInfoCircle, UilUpload, UilCopy } from '@tooni/iconscout-unicons-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Platform } from './types';

interface PlatformSelectionStepProps {
  selectedPlatform: Platform;
  setSelectedPlatform: (platform: Platform) => void;
  setCurrentStep: (step: number) => void;
}

export function PlatformSelectionStep({ 
  selectedPlatform, 
  setSelectedPlatform, 
  setCurrentStep 
}: PlatformSelectionStepProps) {
  
  const canProceedFromStep1 = () => selectedPlatform !== '';

  return (
    <div className="space-y-8">
      <Card className="transform -rotate-1">
        <CardContent className="p-8">
          <div className="text-center mb-8">
            <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
              CHOOSE CONTENT SOURCE
            </h1>
            <p className="text-lg text-gray-700 mt-3 max-w-2xl mx-auto">
              Select where your content comes from. We&apos;ll analyze the voice patterns and style to create your AI clone.
            </p>
          </div>
          
          <TooltipProvider>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-8">
              <div className="relative">
                {selectedPlatform === 'youtube' && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Card 
                      className={`cursor-pointer shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all ${
                        selectedPlatform === 'youtube' ? 'bg-pink-100' : 'bg-background'
                      }`}
                      onClick={() => setSelectedPlatform('youtube')}
                    >
                      <CardContent className="p-6 text-center">
                        <div className="w-16 h-16 mx-auto mb-3 bg-red-600 border-4 border-border shadow-shadow flex items-center justify-center">
                          <UilYoutube className="h-10 w-10 text-white" />
                        </div>
                        <h4 className="font-black uppercase text-xl">YOUTUBE</h4>
                        <p className="text-sm text-gray-600 mt-2">Clone from channel videos</p>
                      </CardContent>
                    </Card>
                  </TooltipTrigger>
                  <TooltipContent className="max-w-xs">
                    <p>Clone YouTube channels and videos. Supports playlists, individual videos, and entire channel libraries.</p>
                  </TooltipContent>
                </Tooltip>
              </div>

              <div className="relative">
                {selectedPlatform === 'twitch' && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Card 
                      className={`cursor-pointer shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all ${
                        selectedPlatform === 'twitch' ? 'bg-pink-100' : 'bg-background'
                      }`}
                      onClick={() => setSelectedPlatform('twitch')}
                    >
                      <CardContent className="p-6 text-center">
                        <div className="w-16 h-16 mx-auto mb-3 bg-purple-600 border-4 border-border shadow-shadow flex items-center justify-center">
                          <Image src="/twitch.svg" alt="Twitch" width={40} height={40} className="h-10 w-10 filter brightness-0 invert" />
                        </div>
                        <h4 className="font-black uppercase text-xl">TWITCH</h4>
                        <p className="text-sm text-gray-600 mt-2">Clone from stream archives</p>
                      </CardContent>
                    </Card>
                  </TooltipTrigger>
                  <TooltipContent className="max-w-xs">
                    <p>Import Twitch streams and VODs. Perfect for gaming content, live commentary, and interactive streams.</p>
                  </TooltipContent>
                </Tooltip>
              </div>

              <div className="relative">
                {selectedPlatform === 'tiktok' && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Card 
                      className={`cursor-pointer shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all ${
                        selectedPlatform === 'tiktok' ? 'bg-pink-100' : 'bg-background'
                      }`}
                      onClick={() => setSelectedPlatform('tiktok')}
                    >
                      <CardContent className="p-6 text-center">
                        <div className="w-16 h-16 mx-auto mb-3 bg-black border-4 border-border shadow-shadow flex items-center justify-center">
                          <Image src="/tiktok.svg" alt="TikTok" width={40} height={40} className="h-10 w-10 filter brightness-0 invert" />
                        </div>
                        <h4 className="font-black uppercase text-xl">TIKTOK</h4>
                        <p className="text-sm text-gray-600 mt-2">Clone from creator videos</p>
                      </CardContent>
                    </Card>
                  </TooltipTrigger>
                  <TooltipContent className="max-w-xs">
                    <p>Clone TikTok creators and their content style. Ideal for short-form, engaging video content.</p>
                  </TooltipContent>
                </Tooltip>
              </div>
              <div className="relative">
                {selectedPlatform === 'upload' && (
                  <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-20" style={{animation: 'overshoot 0.3s ease-out'}}>
                    <div className="relative">
                      <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                        <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                          SELECTED
                        </span>
                      </div>
                    </div>
                  </div>
                )}
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Card 
                      className={`cursor-pointer shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none transition-all ${
                        selectedPlatform === 'upload' ? 'bg-pink-100' : 'bg-background'
                      }`}
                      onClick={() => setSelectedPlatform('upload')}
                    >
                      <CardContent className="p-6 text-center">
                        <div className="w-16 h-16 mx-auto mb-3 bg-pink-600 border-4 border-border shadow-shadow flex items-center justify-center">
                          <UilUpload className="h-10 w-10 text-white" />
                        </div>
                        <h4 className="font-black uppercase text-xl">UPLOAD</h4>
                        <p className="text-sm text-gray-600 mt-2">Use your own files</p>
                      </CardContent>
                    </Card>
                  </TooltipTrigger>
                  <TooltipContent className="max-w-xs">
                    <p>Upload video or audio files directly. Support for MP4, MOV, AVI, WebM, MP3, and WAV formats.</p>
                  </TooltipContent>
                </Tooltip>
              </div>
            </div>
          </TooltipProvider>

          <Card className="bg-yellow-100 mt-6">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <Button 
                  size="sm" 
                  variant="default" 
                  className="flex-shrink-0"
                >
                  <UilInfoCircle className="h-4 w-4" />
                </Button>
                <div>
                  <p className="text-sm font-bold">GETTING STARTED</p>
                  <p className="text-sm text-gray-700 mt-1">
                    Pick your content source above. For best results, choose platforms with clear speech and consistent voice quality. 
                    You&apos;ll need access to the content (channel name, video links, or files).
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Button
            variant="default"
            size="lg"
            className={`w-full mt-8 h-14 text-lg font-black uppercase ${!canProceedFromStep1() ? 'opacity-50 cursor-not-allowed' : ''}`}
            onClick={() => setCurrentStep(2)}
            disabled={!canProceedFromStep1()}
          >
            <span className="flex items-center justify-center">
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </span>
          </Button>
        </CardContent>
      </Card>

      <Card className="transform -rotate-1 relative overflow-hidden bg-pink-50">
        <CardContent className="pt-6">
          <div className="flex items-start gap-4">
            <Button
              size="icon"
              variant="default"
              className="w-12 h-12 flex-shrink-0"
            >
              <UilCopy className="h-6 w-6" />
            </Button>
            <div className="flex-1">
              <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                AI VOICE CLONING TECHNOLOGY
              </h3>
              <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                Advanced AI technology analyzes <span className="font-black text-pink-600">speech patterns, tone, and personality</span> from any content. 
                Create digital twins that sound and communicate just like the original creator, perfect for scaling presence across multiple channels.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-pink-600 rounded-full"></div>
                  <span className="text-black font-medium">Voice pattern analysis</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-pink-600 rounded-full"></div>
                  <span className="text-black font-medium">Personality matching</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-pink-600 rounded-full"></div>
                  <span className="text-black font-medium">Content style learning</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-pink-600 rounded-full"></div>
                  <span className="text-black font-medium">Multi-language support</span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/cloning/ReviewCompleteStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { UilCheckCircle, UilPlay, UilCloudDownload, UilArrowRight, UilCopy } from '@tooni/iconscout-unicons-react';
import { Platform, VoiceSettings } from './types';

interface ReviewCompleteStepProps {
  isProcessing: boolean;
  processProgress: number;
  selectedPlatform: Platform;
  uploadedFile: File | null;
  channelName: string;
  selectedContent: string[];
  voiceSettings: VoiceSettings;
  audioUrl: string;
  handleExportAudio: () => void;
  handleStepChange: (step: number) => void;
  setSelectedPlatform: (platform: Platform) => void;
  setChannelName: (name: string) => void;
  setSelectedContent: (content: string[]) => void;
  setUploadedFile: (file: File | null) => void;
  setAudioUrl: (url: string) => void;
  setVoiceCloneReady: (ready: boolean) => void;
  setIsVerified: (verified: boolean) => void;
  cleanupTikTokData: () => Promise<void>;
  cleanupYouTubeData: () => Promise<void>;
  cleanupTwitchData: () => Promise<void>;
  voiceId: string | null;
  voiceCloneError: string | null;
  testText: string;
  testVoice: (text: string) => Promise<string | null>;
  resetVoiceClone: () => void;
}

export function ReviewCompleteStep({
  isProcessing,
  processProgress,
  selectedPlatform,
  uploadedFile,
  channelName,
  selectedContent,
  voiceSettings,
  audioUrl,
  handleExportAudio,
  handleStepChange,
  setSelectedPlatform,
  setChannelName,
  setSelectedContent,
  setUploadedFile,
  setAudioUrl,
  setVoiceCloneReady,
  setIsVerified,
  cleanupTikTokData,
  cleanupYouTubeData,
  cleanupTwitchData,
  voiceId,
  voiceCloneError,
  testText,
  testVoice,
  resetVoiceClone,
}: ReviewCompleteStepProps) {
  const [isTestingVoice, setIsTestingVoice] = React.useState(false);
  const [testAudioUrl, setTestAudioUrl] = React.useState<string | null>(null);
  const audioRef = React.useRef<HTMLAudioElement>(null);

  const handleTestVoice = async () => {
    if (!voiceId || isTestingVoice) return;
    
    setIsTestingVoice(true);
    try {
      const audioUrl = await testVoice(testText || 'Hello, this is my cloned voice!');
      if (audioUrl) {
        setTestAudioUrl(audioUrl);
        // Auto-play the test audio
        if (audioRef.current) {
          audioRef.current.src = audioUrl;
          audioRef.current.play();
        }
      }
    } catch (error) {
      console.error('Error testing voice:', error);
    } finally {
      setIsTestingVoice(false);
    }
  };
  
  return (
    <Card className="transform -rotate-1">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            {isProcessing ? 'CREATING CLONE' : 'CLONE COMPLETE'}
          </h1>
        </div>

        <div className="space-y-6">
          {voiceCloneError && (
            <Card className="bg-red-50 border-2 border-red-500">
              <CardContent className="p-4">
                <p className="text-red-800 font-bold">Error: {voiceCloneError}</p>
              </CardContent>
            </Card>
          )}

          {isProcessing ? (
            <>
              <Progress value={processProgress} className="h-4" />
              <div className="text-center">
                <p className="text-lg mb-4">
                  Creating your AI voice clone...
                </p>
                <div className="space-y-2 text-sm text-gray-600">
                  <p>✓ Uploading audio data</p>
                  <p className={processProgress < 30 ? 'opacity-50' : ''}>
                    {processProgress >= 30 ? '✓' : '○'} Processing audio file
                  </p>
                  <p className={processProgress < 50 ? 'opacity-50' : ''}>
                    {processProgress >= 50 ? '✓' : '○'} Extracting voice characteristics
                  </p>
                  <p className={processProgress < 70 ? 'opacity-50' : ''}>
                    {processProgress >= 70 ? '✓' : '○'} Training voice model
                  </p>
                  <p className={processProgress < 90 ? 'opacity-50' : ''}>
                    {processProgress >= 90 ? '✓' : '○'} Generating test sample
                  </p>
                </div>
              </div>
            </>
          ) : voiceId ? (
            <>
              <div className="text-center">
                <div className="w-24 h-24 mx-auto mb-6 bg-green-500 border-4 border-black flex items-center justify-center">
                  <UilCheckCircle className="h-16 w-16 text-white" />
                </div>
                <p className="text-2xl font-black mb-4">YOUR AI CLONE IS READY!</p>
                <p className="text-gray-700">
                  Successfully created a voice clone from {selectedPlatform === 'upload' ? 'uploaded file' : `${selectedContent.length} videos`}
                </p>
              </div>

              <Card className="bg-pink-50 border-2 border-black">
                <CardContent className="p-6">
                  <h4 className="font-black uppercase mb-3">Clone Details</h4>
                  <div className="space-y-2 text-sm">
                    <p><strong>Clone Name:</strong> {selectedPlatform === 'upload' ? uploadedFile?.name.replace(/\.[^/.]+$/, '') : channelName} AI</p>
                    <p><strong>Voice Model:</strong> High Quality (HQ)</p>
                    <p><strong>Languages:</strong> English (Auto-detected)</p>
                    <p><strong>Training Data:</strong> {selectedPlatform === 'upload' ? '1 file' : `${selectedContent.length} videos`} analyzed</p>
                    <p><strong>Accuracy Score:</strong> <span className="text-green-600 font-bold">98.5%</span></p>
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-white border-2 border-black">
                <CardContent className="p-4">
                  <h4 className="font-black uppercase mb-3">Voice Settings Applied</h4>
                  <div className="grid grid-cols-3 gap-2 text-sm">
                    <p><strong>Exaggeration:</strong> {voiceSettings.exaggeration.toFixed(2)}</p>
                    <p><strong>CFG Weight:</strong> {voiceSettings.cfgWeight.toFixed(2)}</p>
                    <p><strong>Chunk Size:</strong> {voiceSettings.chunkSize}</p>
                  </div>
                </CardContent>
              </Card>

              {/* Action Buttons - 2x2 Grid */}
              <div className="grid grid-cols-2 gap-4">
                {/* Test Voice */}
                <Card 
                  className={`cursor-pointer relative border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-shadow bg-cyan-50 ${isTestingVoice ? 'opacity-50' : ''}`}
                  onClick={handleTestVoice}
                >
                  <CardContent className="p-6 flex flex-col items-center justify-center gap-3">
                    <div className="w-16 h-16 bg-cyan-400 border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] flex items-center justify-center">
                      <UilPlay className="h-8 w-8 text-black" />
                    </div>
                    <span className="text-lg font-black text-black uppercase">
                      {isTestingVoice ? 'TESTING...' : 'TEST VOICE'}
                    </span>
                  </CardContent>
                </Card>

                {/* Export Audio */}
                <Card 
                  className="cursor-pointer relative border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-shadow bg-yellow-50"
                  onClick={() => handleExportAudio()}
                >
                  <CardContent className="p-6 flex flex-col items-center justify-center gap-3">
                    <div className="w-16 h-16 bg-yellow-400 border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] flex items-center justify-center">
                      <UilCloudDownload className="h-8 w-8 text-black" />
                    </div>
                    <span className="text-lg font-black text-black uppercase">EXPORT AUDIO</span>
                  </CardContent>
                </Card>

                {/* Go to Dashboard */}
                <Card 
                  className="cursor-pointer relative border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-shadow bg-blue-50"
                  onClick={() => window.location.href = '/dashboard'}
                >
                  <CardContent className="p-6 flex flex-col items-center justify-center gap-3">
                    <div className="w-16 h-16 bg-[rgb(0,82,255)] border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] flex items-center justify-center">
                      <UilArrowRight className="h-8 w-8 text-white" />
                    </div>
                    <span className="text-lg font-black text-black uppercase">DASHBOARD</span>
                  </CardContent>
                </Card>

                {/* Clone Another */}
                <Card 
                  className="cursor-pointer relative border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-shadow bg-pink-50"
                  onClick={async () => {
                    // Clean up data based on platform
                    if (selectedPlatform === 'tiktok') {
                      await cleanupTikTokData();
                    } else if (selectedPlatform === 'youtube') {
                      await cleanupYouTubeData();
                    } else if (selectedPlatform === 'twitch') {
                      await cleanupTwitchData();
                    }
                    // Reset voice cloning state
                    resetVoiceClone();
                    handleStepChange(1);
                    setSelectedPlatform('');
                    setChannelName('');
                    setSelectedContent([]);
                    setUploadedFile(null);
                    setAudioUrl('');
                    setVoiceCloneReady(false);
                    setIsVerified(false);
                  }}
                >
                  <CardContent className="p-6 flex flex-col items-center justify-center gap-3">
                    <div className="w-16 h-16 bg-pink-600 border-4 border-black shadow-[3px_3px_0_rgba(0,0,0,1)] flex items-center justify-center">
                      <UilCopy className="h-8 w-8 text-white" />
                    </div>
                    <span className="text-lg font-black text-black uppercase">CLONE ANOTHER</span>
                  </CardContent>
                </Card>
              </div>
            </>
          ) : (
            // Show error state or initial state
            <div className="text-center">
              <p className="text-lg text-gray-600">
                {voiceCloneError ? 'Voice cloning failed. Please try again.' : 'Preparing to create your voice clone...'}
              </p>
            </div>
          )}
        </div>

        {/* Hidden audio element for playing test audio */}
        <audio ref={audioRef} style={{ display: 'none' }} />
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/cloning/TextInputStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { UilArrowRight, UilArrowLeft, UilTrash, UilMicrophone } from '@tooni/iconscout-unicons-react';

interface TextInputStepProps {
  testText: string;
  setTestText: (text: string) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
}

export function TextInputStep({
  testText,
  setTestText,
  setCurrentStep,
  handleStepChange,
}: TextInputStepProps) {
  const maxLength = 60;
  const remainingChars = maxLength - testText.length;

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newText = e.target.value;
    if (newText.length <= maxLength) {
      setTestText(newText);
    }
  };

  const handleClear = () => {
    setTestText('');
  };

  const canProceed = testText.trim().length > 0;

  return (
    <Card className="transform -rotate-1">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            TEST YOUR VOICE
          </h1>
          <p className="text-lg text-gray-700 mt-2">
            Enter text for the AI to speak with your cloned voice
          </p>
        </div>

        <div className="space-y-6">
          {/* Text Input Area */}
          <div className="space-y-3">
            <div className="flex items-center justify-between mb-2">
              <label className="text-lg font-black uppercase flex items-center gap-2">
                <UilMicrophone className="h-5 w-5" />
                SAMPLE TEXT
              </label>
              <Badge 
                className={`${
                  remainingChars < 10 
                    ? 'bg-red-500 text-white' 
                    : 'bg-green-500 text-white'
                } border-2 border-black px-3 py-1`}
              >
                {remainingChars} CHARS LEFT
              </Badge>
            </div>
            
            <div className="relative">
              <Textarea
                value={testText}
                onChange={handleTextChange}
                placeholder="Enter text for AI to speak (max 60 characters)"
                className="min-h-[120px] text-lg font-bold border-4 border-black focus:ring-4 focus:ring-pink-500 resize-none"
                maxLength={maxLength}
              />
              {testText.length > 0 && (
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={handleClear}
                  className="absolute top-2 right-2 hover:bg-red-100"
                  title="Clear text"
                >
                  <UilTrash className="h-4 w-4 text-red-600" />
                </Button>
              )}
            </div>
          </div>

          {/* Preview Section */}
          {testText.trim().length > 0 && (
            <Card className="bg-yellow-50 border-2 border-black">
              <CardContent className="p-4">
                <h3 className="text-sm font-black uppercase mb-2">PREVIEW</h3>
                <p className="text-lg font-bold text-gray-800 italic">
                  &quot;{testText}&quot;
                </p>
              </CardContent>
            </Card>
          )}

          {/* Suggestions */}
          <Card className="bg-pink-50 border-2 border-black">
            <CardContent className="p-4">
              <h3 className="text-sm font-black uppercase mb-3">QUICK SUGGESTIONS</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                {[
                  "Hello, this is my AI voice clone!",
                  "Welcome to my channel, let's get started!",
                  "Thanks for watching, see you next time!",
                  "Don't forget to like and subscribe!"
                ].map((suggestion, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    className="text-left justify-start font-bold border-2 border-black hover:bg-yellow-100"
                    onClick={() => setTestText(suggestion.slice(0, maxLength))}
                  >
                    {suggestion.slice(0, maxLength)}
                  </Button>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Info Message */}
          <Card className="bg-blue-50 border-2 border-black">
            <CardContent className="p-4">
              <p className="text-sm font-bold text-gray-700">
                💡 TIP: Choose text that showcases your speaking style. This will be used to test and demonstrate your AI voice clone.
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Navigation Buttons */}
        <div className="flex gap-4 mt-8">
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
            onClick={() => handleStepChange(4)}
          >
            <UilArrowLeft className="mr-2 h-6 w-6" />
            BACK
          </Button>
          <Button
            className="flex-1 h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
            onClick={() => setCurrentStep(6)}
            disabled={!canProceed}
          >
            CONTINUE
            <UilArrowRight className="ml-2 h-6 w-6" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/cloning/types.ts
================================================
export interface ContentItem {
  id: string;
  title: string;
  duration: string;
  views: string;
  likes: string;
  published: string;
  thumbnail?: string;
}

export interface VoiceSettings {
  exaggeration: number;    // Controls expressiveness (0.25-2.0)
  cfgWeight: number;       // CFG/Pace control (0.5-3.0)
  chunkSize: number;       // Audio generation chunk size (512-4096)
}

export interface ModelVoice {
  id: string;
  name: string;
}

export interface ModelData {
  id: string;
  label: string;
  Icon: any;
  color: string;
  tooltip: string;
  imageSrc: string | null;
  voices: ModelVoice[];
}

export type Platform = 'youtube' | 'twitch' | 'tiktok' | 'upload' | '';

export interface StepProps {
  selectedPlatform: Platform;
  setSelectedPlatform: (platform: Platform) => void;
  channelName: string;
  setChannelName: (name: string) => void;
  selectedContent: string[];
  setSelectedContent: (content: string[]) => void;
  isLoading: boolean;
  setIsLoading: (loading: boolean) => void;
  loadProgress: number;
  setLoadProgress: (progress: number) => void;
  isProcessing: boolean;
  setIsProcessing: (processing: boolean) => void;
  processProgress: number;
  setProcessProgress: (progress: number) => void;
  uploadedFile: File | null;
  setUploadedFile: (file: File | null) => void;
  audioUrl: string;
  setAudioUrl: (url: string) => void;
  processingProgress: number;
  setProcessingProgress: (progress: number) => void;
  voiceCloneReady: boolean;
  setVoiceCloneReady: (ready: boolean) => void;
  selectedAction: string | null;
  setSelectedAction: (action: string | null) => void;
  isVerified: boolean;
  setIsVerified: (verified: boolean) => void;
  showVerificationModal: boolean;
  setShowVerificationModal: (show: boolean) => void;
  voiceSettings: VoiceSettings;
  setVoiceSettings: (settings: VoiceSettings) => void;
  selectedModel: ModelData | null;
  setSelectedModel: (model: ModelData | null) => void;
  currentStep: number;
  setCurrentStep: (step: number) => void;
  // Hook data
  tiktokUser: any;
  tiktokUserLoading: boolean;
  tiktokUserError: any;
  fetchTikTokUser: (username: string) => Promise<void>;
  tiktokVideos: any[];
  tiktokVideosLoading: boolean;
  tiktokVideosError: any;
  fetchTikTokVideos: (username: string) => Promise<void>;
  downloadTikTokVideos: (username: string, videoIds: string[]) => Promise<void>;
  tiktokDownloadProgress: number;
  tiktokDownloadStatus: string;
  youtubeChannel: any;
  youtubeChannelLoading: boolean;
  youtubeChannelError: any;
  fetchYouTubeChannel: (channelId: string) => Promise<void>;
  youtubeVideos: any[];
  youtubeVideosLoading: boolean;
  youtubeVideosError: any;
  fetchYouTubeVideos: (channelId: string) => Promise<void>;
  downloadYouTubeVideos: (channelId: string, videoIds: string[]) => Promise<void>;
  youtubeDownloadProgress: number;
  youtubeDownloadStatus: string;
  twitchChannel: any;
  twitchChannelLoading: boolean;
  twitchChannelError: any;
  twitchChannelDataComplete: boolean;
  fetchTwitchChannel: (username: string) => Promise<void>;
  twitchVideos: any[];
  twitchVideosLoading: boolean;
  twitchVideosError: any;
  fetchTwitchVideos: (username: string) => Promise<void>;
  downloadTwitchVideos: (username: string, videoIds: string[]) => Promise<void>;
  twitchDownloadProgress: number;
  twitchDownloadStatus: string;
}


================================================
FILE: src/components/onboarding/cloning/VoiceSettingsStep.tsx
================================================
'use client';

import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { UilArrowRight, UilArrowLeft, UilInfoCircle, UilUpload, UilPlay, UilSpinner } from '@tooni/iconscout-unicons-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { VoiceSettings, Platform, ModelData } from './types';
import { useVideoPreviewContext } from '@/contexts/VideoPreviewContext';

interface VoiceSettingsStepProps {
  voiceSettings: VoiceSettings;
  setVoiceSettings: (settings: VoiceSettings) => void;
  setCurrentStep: (step: number) => void;
  handleStepChange: (step: number) => void;
  selectedContent: string[];
  selectedPlatform: Platform;
  selectedModel: ModelData | null;
  tiktokVideos: any[];
  youtubeVideos: any[];
  twitchVideos: any[];
}

export function VoiceSettingsStep({
  voiceSettings,
  setVoiceSettings,
  setCurrentStep,
  handleStepChange,
  selectedContent,
  selectedPlatform,
  selectedModel,
  tiktokVideos,
  youtubeVideos,
  twitchVideos,
}: VoiceSettingsStepProps) {
  
  const { generatePreview, getPreview } = useVideoPreviewContext();
  const [tooltipOpen, setTooltipOpen] = React.useState<string | null>(null);
  const currentVideoRef = React.useRef<HTMLVideoElement | null>(null);
  
  // Get the selected videos based on platform
  const videos = selectedPlatform === 'tiktok' ? tiktokVideos :
                 selectedPlatform === 'youtube' ? youtubeVideos :
                 selectedPlatform === 'twitch' ? twitchVideos : [];
  
  // Filter to only selected videos
  const selectedVideos = videos.filter((video: any) => {
    const videoId = video.id || video.video_id || video.videoId;
    return selectedContent.includes(videoId);
  });

  
  // Cleanup videos when component unmounts
  React.useEffect(() => {
    return () => {
      // Stop current video when leaving this step
      if (currentVideoRef.current) {
        currentVideoRef.current.pause();
        currentVideoRef.current.muted = true;
        currentVideoRef.current = null;
      }
      setTooltipOpen(null);
    };
  }, []);
  
  return (
    <Card className="transform -rotate-1">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            VOICE CUSTOMIZATION
          </h1>
          <p className="text-lg text-gray-700 mt-2">
            Fine-tune voice parameters for optimal results
          </p>
        </div>

        {/* Selected Model Display */}
        {selectedModel && (
          <Card className="mb-8 bg-pink-50">
            <CardContent className="p-4">
              <div className="flex items-center gap-4">
                <div className={`p-3 border-4 border-border shadow-shadow ${selectedModel.color} flex-shrink-0`}>
                  <selectedModel.Icon className="w-8 h-8 text-white" strokeWidth={2.5} />
                </div>
                <div>
                  <h3 className="text-xl font-bold uppercase">{selectedModel.label}</h3>
                  <p className="text-gray-600">{selectedModel.tooltip}</p>
                  <div className="flex gap-2 mt-2">
                    {selectedModel.voices.map((voice) => (
                      <Badge key={voice.id} variant="outline" className="border-2 border-black">
                        {voice.name}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        <div className="space-y-6">
          <TooltipProvider>
          {/* Voice Exaggeration */}
          <div>
            <div className="flex items-center gap-2 mb-3">
              <label className="text-lg font-black uppercase block">
                VOICE EXAGGERATION: {voiceSettings.exaggeration.toFixed(2)}
              </label>
              <Tooltip>
                <TooltipTrigger asChild>
                  <button className="p-0 bg-transparent border-none outline-none">
                    <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                  </button>
                </TooltipTrigger>
                <TooltipContent side="top">
                  <p>Controls expressiveness. 0.5 is neutral, higher values are more extreme.</p>
                </TooltipContent>
              </Tooltip>
            </div>
            <Slider 
              value={[voiceSettings.exaggeration]}
              onValueChange={(value) => setVoiceSettings({...voiceSettings, exaggeration: value[0]})}
              min={0.25}
              max={2.0}
              step={0.05}
              className="mb-2"
            />
            <p className="text-sm text-gray-600">
              {voiceSettings.exaggeration < 0.4 ? 'Very subtle - minimal expression' :
               voiceSettings.exaggeration > 1.5 ? 'Very extreme - may sound unstable' :
               voiceSettings.exaggeration === 0.5 ? 'Neutral expression' :
               'Balanced expressiveness'}
            </p>
          </div>

          {/* CFG Weight */}
          <div>
            <div className="flex items-center gap-2 mb-3">
              <label className="text-lg font-black uppercase block">
                CFG/PACE CONTROL: {voiceSettings.cfgWeight.toFixed(2)}
              </label>
              <Tooltip>
                <TooltipTrigger asChild>
                  <button className="p-0 bg-transparent border-none outline-none">
                    <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                  </button>
                </TooltipTrigger>
                <TooltipContent side="top">
                  <p>Controls generation pace and consistency. Higher values follow prompt more closely.</p>
                </TooltipContent>
              </Tooltip>
            </div>
            <Slider 
              value={[voiceSettings.cfgWeight]}
              onValueChange={(value) => setVoiceSettings({...voiceSettings, cfgWeight: value[0]})}
              min={0.5}
              max={3.0}
              step={0.1}
              className="mb-2"
            />
            <p className="text-sm text-gray-600">
              {voiceSettings.cfgWeight < 1.0 ? 'More creative, less controlled' :
               voiceSettings.cfgWeight > 2.5 ? 'Very controlled, may sound rigid' :
               'Balanced control and naturalness'}
            </p>
          </div>

          {/* Chunk Size */}
          <div>
            <div className="flex items-center gap-2 mb-3">
              <label className="text-lg font-black uppercase block">
                CHUNK SIZE: {voiceSettings.chunkSize}
              </label>
              <Tooltip>
                <TooltipTrigger asChild>
                  <button className="p-0 bg-transparent border-none outline-none">
                    <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                  </button>
                </TooltipTrigger>
                <TooltipContent side="top">
                  <p>Controls audio generation chunk size. Larger = better quality but slower.</p>
                </TooltipContent>
              </Tooltip>
            </div>
            <Slider 
              value={[voiceSettings.chunkSize]}
              onValueChange={(value) => setVoiceSettings({...voiceSettings, chunkSize: value[0]})}
              min={512}
              max={4096}
              step={256}
              className="mb-2"
            />
            <p className="text-sm text-gray-600">
              {voiceSettings.chunkSize < 1024 ? 'Fast generation, lower quality' :
               voiceSettings.chunkSize > 3072 ? 'High quality, slower generation' :
               'Balanced quality and speed'}
            </p>
          </div>

          {/* Selected Videos as Reference Audio */}
          <Card className="bg-pink-50">
            <CardContent className="p-6">
              <h3 className="text-lg font-black uppercase mb-4">REFERENCE AUDIO SOURCE</h3>
              <div className="space-y-4">
                {selectedVideos.length > 0 ? (
                  <>
                    <p className="text-sm text-gray-700">
                      Using audio from {selectedVideos.length} selected {selectedVideos.length === 1 ? 'video' : 'videos'} for voice cloning:
                    </p>
                    <div className="space-y-2">
                      {selectedVideos.map((video: any, index: number) => {
                        const videoId = video.id || video.video_id || video.videoId;
                        const thumbnail = video.thumbnail || video.thumbnails?.[0]?.url || '/placeholder.jpg';
                        const preview = getPreview(videoId, selectedPlatform as 'tiktok' | 'youtube' | 'twitch');
                        
                        return (
                          <div key={videoId || index} className="flex items-center gap-3 p-2 bg-background border-2 border-border relative">
                            <div className="w-5 h-5 bg-pink-500 border-2 border-border flex items-center justify-center text-white text-xs font-bold flex-shrink-0">
                              {index + 1}
                            </div>
                            <Tooltip delayDuration={0} onOpenChange={(open) => {
                              if (open) {
                                // Only generate preview if needed
                                const preview = getPreview(videoId, selectedPlatform as 'tiktok' | 'youtube' | 'twitch');
                                if (!preview && selectedPlatform === 'tiktok') {
                                  generatePreview(videoId, 'tiktok', video.url || video.videoUrl);
                                }
                                setTooltipOpen(videoId);
                              } else {
                                setTooltipOpen(null);
                                // Pause current video when tooltip closes
                                if (currentVideoRef.current) {
                                  currentVideoRef.current.pause();
                                  currentVideoRef.current = null;
                                }
                              }
                            }}>
                              <TooltipTrigger asChild>
                                <div className="relative cursor-pointer">
                                  <Image 
                                    src={thumbnail}
                                    alt={video.title || video.description || 'Video thumbnail'}
                                    width={selectedPlatform === 'tiktok' ? 27 : 85}
                                    height={48}
                                    className={`h-12 object-cover border-2 border-border flex-shrink-0 ${
                                      selectedPlatform === 'tiktok' ? 'w-[27px]' : 'w-[85px]'
                                    }`}
                                    unoptimized={thumbnail.includes('tiktokcdn')}
                                    onError={(e) => {
                                      console.warn('[VoiceSettings] Tooltip thumbnail failed to load:', thumbnail);
                                      e.currentTarget.src = '/placeholder.jpg';
                                    }}
                                  />
                                  <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-20 transition-opacity flex items-center justify-center">
                                    <UilPlay className="w-6 h-6 text-white opacity-0 hover:opacity-100 transition-opacity" />
                                  </div>
                                </div>
                              </TooltipTrigger>
                              <TooltipContent side="top" className="p-0 bg-transparent border-none">
                                <div className="bg-background border-4 border-border p-3 shadow-shadow min-w-[200px] max-w-[300px]">
                                  {preview?.previewUrl ? (
                                    <video
                                      key={`tooltip-video-${videoId}`}
                                      ref={(el) => {
                                        if (el && tooltipOpen === videoId) {
                                          currentVideoRef.current = el;
                                        }
                                      }}
                                      src={preview.previewUrl}
                                      className={`w-full object-cover border-2 border-border mb-2 ${
                                        selectedPlatform === 'tiktok' ? 'aspect-[9/16] max-h-[300px]' : 'aspect-[16/9]'
                                      }`}
                                      autoPlay
                                      muted={tooltipOpen !== videoId}
                                      loop
                                      playsInline
                                      onPlay={(e) => {
                                        const videoElement = e.currentTarget as HTMLVideoElement;
                                        // Ensure only this video is playing
                                        if (currentVideoRef.current && currentVideoRef.current !== videoElement) {
                                          currentVideoRef.current.pause();
                                        }
                                        currentVideoRef.current = videoElement;
                                      }}
                                      onLoadedData={(e) => {
                                        // Set volume to 30%
                                        const videoElement = e.currentTarget as HTMLVideoElement;
                                        videoElement.volume = 0.3;
                                      }}
                                    />
                                  ) : preview?.loading ? (
                                    <div className={`w-full border-2 border-border mb-2 bg-secondary-background flex items-center justify-center ${
                                      selectedPlatform === 'tiktok' ? 'aspect-[9/16] max-h-[300px]' : 'aspect-[16/9]'
                                    }`}>
                                      <UilSpinner className="w-8 h-8 animate-spin text-pink-500" />
                                    </div>
                                  ) : (
                                    <Image 
                                      src={thumbnail}
                                      alt={video.title || video.description || 'Video preview'}
                                      width={selectedPlatform === 'tiktok' ? 180 : 320}
                                      height={selectedPlatform === 'tiktok' ? 200 : 180}
                                      className={`w-full object-cover border-2 border-border mb-2 ${
                                        selectedPlatform === 'tiktok' ? 'aspect-[9/16] max-h-[200px]' : 'aspect-[16/9]'
                                      }`}
                                      unoptimized={thumbnail.includes('tiktokcdn')}
                                      onError={(e) => {
                                        console.warn('[VoiceSettings] Preview thumbnail failed to load:', thumbnail);
                                        e.currentTarget.src = '/placeholder.jpg';
                                      }}
                                    />
                                  )}
                                  <p className="font-black text-sm mb-1 line-clamp-2">
                                    {video.title || video.description || 'Untitled Video'}
                                  </p>
                                  {video.duration && (
                                    <p className="text-xs text-gray-600 font-bold">
                                      Duration: {Math.floor(video.duration / 60)}:{(video.duration % 60).toString().padStart(2, '0')}
                                    </p>
                                  )}
                                  {video.viewCount !== undefined && (
                                    <p className="text-xs text-gray-600 font-bold">
                                      Views: {video.viewCount.toLocaleString()}
                                    </p>
                                  )}
                                  {preview?.error && (
                                    <p className="text-xs text-red-600 font-bold mt-1">
                                      Preview unavailable
                                    </p>
                                  )}
                                </div>
                              </TooltipContent>
                            </Tooltip>
                            <p className="text-sm font-bold truncate flex-1">
                              {video.title || video.description || 'Untitled Video'}
                            </p>
                          </div>
                        );
                      })}
                    </div>
                    <div className="flex items-center gap-2 p-3 bg-yellow-100 border-2 border-border">
                      <UilInfoCircle className="h-5 w-5 flex-shrink-0" />
                      <p className="text-xs font-bold">
                        Audio will be extracted and combined from these videos to create your custom voice clone.
                      </p>
                    </div>
                  </>
                ) : (
                  <div className="text-center py-8">
                    <p className="text-gray-600 font-bold">NO VIDEOS SELECTED</p>
                    <p className="text-sm text-gray-500 mt-2">
                      Please go back and select videos to use as reference audio.
                    </p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Premium Features Card */}
          <Card className="bg-gradient-to-br from-yellow-50 to-pink-50">
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-black uppercase">PREMIUM VOICE FEATURES</h3>
                <Badge className="bg-yellow-400 text-black border-2 border-border px-3 py-1">
                  PRO
                </Badge>
              </div>
              <div className="space-y-4">
                <div className="flex items-center justify-between opacity-60">
                  <div className="flex items-center gap-2">
                    <span className="font-bold uppercase">Multi-Language Cloning</span>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <button className="p-0 bg-transparent border-none outline-none">
                          <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                        </button>
                      </TooltipTrigger>
                      <TooltipContent side="top">
                        <p>Clone voices in 50+ languages with accent preservation</p>
                      </TooltipContent>
                    </Tooltip>
                  </div>
                  <div className="flex items-center gap-2">
                    <Switch disabled checked={false} />
                    <span className="text-xs font-bold text-yellow-600">LOCKED</span>
                  </div>
                </div>
                <div className="flex items-center justify-between opacity-60">
                  <div className="flex items-center gap-2">
                    <span className="font-bold uppercase">Real-Time Voice Morphing</span>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <button className="p-0 bg-transparent border-none outline-none">
                          <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                        </button>
                      </TooltipTrigger>
                      <TooltipContent side="top">
                        <p>Change voice characteristics during live calls</p>
                      </TooltipContent>
                    </Tooltip>
                  </div>
                  <div className="flex items-center gap-2">
                    <Switch disabled checked={false} />
                    <span className="text-xs font-bold text-yellow-600">LOCKED</span>
                  </div>
                </div>
                <div className="flex items-center justify-between opacity-60">
                  <div className="flex items-center gap-2">
                    <span className="font-bold uppercase">Emotional Intelligence</span>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <button className="p-0 bg-transparent border-none outline-none">
                          <UilInfoCircle className="h-3 w-3 text-gray-500 hover:text-black cursor-help" />
                        </button>
                      </TooltipTrigger>
                      <TooltipContent side="top">
                        <p>AI adapts emotional tone based on conversation context</p>
                      </TooltipContent>
                    </Tooltip>
                  </div>
                  <div className="flex items-center gap-2">
                    <Switch disabled checked={false} />
                    <span className="text-xs font-bold text-yellow-600">LOCKED</span>
                  </div>
                </div>
              </div>
              <div className="mt-4 pt-4 border-t-2 border-border">
                <Button 
                  variant="default"
                  size="lg"
                  className="w-full h-12 font-black uppercase"
                  onClick={() => window.location.href = '/pricing'}
                >
                  UPGRADE TO PRO
                  <UilArrowRight className="ml-2 h-5 w-5" />
                </Button>
              </div>
            </CardContent>
          </Card>
          </TooltipProvider>

          <div className="flex gap-4 mt-8">
            <Button
              variant="neutral"
              size="lg"
              className="flex-1 h-14 text-lg font-black uppercase"
              onClick={() => handleStepChange(4)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              variant="default"
              size="lg"
              className="flex-1 h-14 text-lg font-black uppercase"
              onClick={() => setCurrentStep(5)}
            >
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/courses/CourseCard.tsx
================================================
import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  UilClock,
  UilVideo,
  UilArrowRight,
  UilAward,
  UilStar,
  UilGraduationCap,
  UilCheckCircle,
  UilLock,
  UilPlay,
  UilFileAlt
} from '@tooni/iconscout-unicons-react';

interface Module {
  id: string;
  title: string;
  duration: string;
  completed: boolean;
  locked: boolean;
}

interface CourseCardProps {
  title: string;
  description: string;
  instructor: string;
  level: 'beginner' | 'intermediate' | 'advanced';
  duration: string;
  modules: Module[];
  enrolled: boolean;
  progress: number;
  rating: number;
  students: number;
  certificate: boolean;
  selected?: boolean;
  expanded?: boolean;
  onClick?: () => void;
  onToggleModules?: () => void;
}

export function CourseCard({
  title,
  description,
  instructor,
  level,
  duration,
  modules,
  enrolled,
  progress,
  rating,
  students,
  certificate,
  selected = false,
  expanded = false,
  onClick,
  onToggleModules
}: CourseCardProps) {
  const getLevelColor = (level: string) => {
    switch (level) {
      case 'beginner': return 'bg-green-100 text-green-800 border-green-800';
      case 'intermediate': return 'bg-yellow-100 text-yellow-800 border-yellow-800';
      case 'advanced': return 'bg-red-100 text-red-800 border-red-800';
      default: return 'bg-gray-100 text-gray-800 border-gray-800';
    }
  };

  return (
    <Card 
      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
        selected ? 'bg-purple-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
      }`}
      onClick={onClick}
    >
      <CardContent className="p-6">
        {/* Course Header */}
        <div className="flex justify-between items-start mb-4">
          <div className="flex-1">
            <h4 className="font-black uppercase text-xl mb-2">{title}</h4>
            <p className="text-sm text-gray-600 mb-3">{description}</p>
          </div>
          {certificate && (
            <Badge className="bg-purple-500 text-white border-2 border-black flex-shrink-0 ml-4">
              <UilAward className="h-3 w-3 mr-1" />
              CERTIFICATE
            </Badge>
          )}
        </div>

        {/* Course Meta */}
        <div className="flex flex-wrap gap-4 mb-4">
          <Badge className={`border-2 ${getLevelColor(level)}`}>
            {level.toUpperCase()}
          </Badge>
          <div className="flex items-center gap-1">
            <UilClock className="h-4 w-4" />
            <span className="text-sm font-bold">{duration}</span>
          </div>
          <div className="flex items-center gap-1">
            <UilVideo className="h-4 w-4" />
            <span className="text-sm font-bold">{modules.length} modules</span>
          </div>
          <div className="flex items-center gap-1">
            <UilStar className="h-4 w-4 text-yellow-500" />
            <span className="text-sm font-bold">{rating}</span>
          </div>
          <div className="flex items-center gap-1">
            <UilGraduationCap className="h-4 w-4" />
            <span className="text-sm font-bold">{students} students</span>
          </div>
        </div>

        {/* Instructor */}
        <div className="mb-4">
          <p className="text-sm text-gray-600">Instructor: <span className="font-bold text-black">{instructor}</span></p>
        </div>

        {/* Progress Bar (if enrolled) */}
        {enrolled && (
          <div className="mb-4">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-bold">PROGRESS</span>
              <span className="text-sm font-bold">{progress}%</span>
            </div>
            <Progress value={progress} className="h-3 border-2 border-black" />
          </div>
        )}

        {/* Module List Toggle */}
        <Button
          variant="ghost"
          size="sm"
          onClick={(e) => {
            e.stopPropagation();
            onToggleModules?.();
          }}
          className="mb-4 text-sm font-bold uppercase hover:bg-purple-50"
        >
          <UilFileAlt className="h-4 w-4 mr-2" />
          {expanded ? 'HIDE' : 'VIEW'} CURRICULUM
        </Button>

        {/* Module List */}
        {expanded && (
          <div className="mb-4 space-y-2 border-t-2 border-black pt-4">
            {modules.map((module, moduleIndex) => (
              <div key={module.id} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                <div className="flex items-center gap-2">
                  {module.completed ? (
                    <UilCheckCircle className="h-5 w-5 text-green-600" />
                  ) : module.locked ? (
                    <UilLock className="h-5 w-5 text-gray-400" />
                  ) : (
                    <UilPlay className="h-5 w-5 text-purple-600" />
                  )}
                  <span className={`text-sm ${module.locked ? 'text-gray-400' : 'text-black'} ${module.completed ? 'line-through' : ''}`}>
                    {moduleIndex + 1}. {module.title}
                  </span>
                </div>
                <span className="text-xs text-gray-500">{module.duration}</span>
              </div>
            ))}
          </div>
        )}

        {/* Action Button */}
        <Button 
          className={`w-full ${
            enrolled 
              ? 'bg-purple-600 hover:bg-purple-700' 
              : 'bg-purple-500 hover:bg-purple-600'
          } text-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] hover:shadow-[4px_4px_0_rgba(0,0,0,1)]`}
        >
          {enrolled ? 'CONTINUE LEARNING' : 'ENROLL NOW'}
          <UilArrowRight className="ml-2 h-4 w-4" />
        </Button>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/guides/GuideCard.tsx
================================================
import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  UilClock,
  UilFileAlt,
  UilArrowRight,
  UilStar
} from '@tooni/iconscout-unicons-react';

interface GuideCardProps {
  title: string;
  description: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  estimatedTime: string;
  steps: number;
  popular?: boolean;
  selected?: boolean;
  onClick?: () => void;
}

export function GuideCard({
  title,
  description,
  difficulty,
  estimatedTime,
  steps,
  popular = false,
  selected = false,
  onClick
}: GuideCardProps) {
  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-green-100 text-green-800 border-green-800';
      case 'intermediate': return 'bg-yellow-100 text-yellow-800 border-yellow-800';
      case 'advanced': return 'bg-red-100 text-red-800 border-red-800';
      default: return 'bg-gray-100 text-gray-800 border-gray-800';
    }
  };

  return (
    <Card 
      className={`cursor-pointer border-4 border-black hover:shadow-[6px_6px_0_rgba(0,0,0,1)] transition-all ${
        selected ? 'bg-cyan-100 shadow-[6px_6px_0_rgba(0,0,0,1)]' : 'bg-white'
      }`}
      onClick={onClick}
    >
      <CardContent className="p-6">
        <div className="flex justify-between items-start mb-3">
          <h4 className="font-black uppercase text-lg flex-1 pr-2">{title}</h4>
          {popular && (
            <Badge className="bg-cyan-500 text-white border-2 border-black flex-shrink-0">
              <UilStar className="h-3 w-3 mr-1" />
              POPULAR
            </Badge>
          )}
        </div>
        <p className="text-sm text-gray-600 mb-4">{description}</p>
        <div className="flex items-center justify-between mb-4">
          <Badge className={`border-2 ${getDifficultyColor(difficulty)}`}>
            {difficulty.toUpperCase()}
          </Badge>
          <div className="flex items-center gap-3 text-xs">
            <div className="flex items-center gap-1">
              <UilClock className="h-3 w-3" />
              <span className="font-bold">{estimatedTime}</span>
            </div>
            <div className="flex items-center gap-1">
              <UilFileAlt className="h-3 w-3" />
              <span className="font-bold">{steps} steps</span>
            </div>
          </div>
        </div>
        <Button 
          className="w-full bg-cyan-500 hover:bg-cyan-600 text-white border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] hover:shadow-[4px_4px_0_rgba(0,0,0,1)]"
        >
          START GUIDE
          <UilArrowRight className="ml-2 h-4 w-4" />
        </Button>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/hunter/CompanyDetailsStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Star15 } from '@/components/ui/star';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { 
  UilArrowRight,
  UilArrowLeft,
  UilInfoCircle
} from '@tooni/iconscout-unicons-react';
import { StepProps } from './types';

export function CompanyDetailsStep({
  searchCriteria,
  setSearchCriteria,
  toggleJobTitle,
  setCurrentStep,
  jobTitles
}: StepProps) {
  return (
    <Card className="transform -rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            COMPANY DETAILS
          </h1>
        </div>
        <p className="text-xl text-center text-gray-700 mb-8">
          Narrow down your ideal prospect profile
        </p>
        <div className="space-y-6">
          {/* Company Size */}
          <div>
            <div className="flex items-center gap-2 mb-3">
              <label className="text-xl font-black uppercase block">
                COMPANY SIZE <span className="text-sm font-normal">(OPTIONAL)</span>
              </label>
              <Tooltip>
                <TooltipTrigger asChild>
                  <button className="p-0 bg-transparent border-none outline-none">
                    <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                  </button>
                </TooltipTrigger>
                <TooltipContent side="top">
                  <p>Filter companies by employee count. Smaller companies are often more accessible, larger ones have bigger budgets.</p>
                </TooltipContent>
              </Tooltip>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
              {['1-10', '11-50', '51-100', '101-500', '501-1000', '1000+'].map((size) => (
                <Button
                  key={size}
                  variant={searchCriteria.companySize === size ? "header" : "outline"}
                  className={`h-12 font-bold border-2 border-black relative ${
                    searchCriteria.companySize === size ? 'bg-violet-400' : 'bg-white hover:bg-violet-100'
                  }`}
                  onClick={() => setSearchCriteria({...searchCriteria, companySize: size})}
                >
                  {searchCriteria.companySize === size && (
                    <div className="absolute -top-4 -right-4 z-[100]" style={{animation: 'overshoot 0.3s ease-out'}}>
                      <div className="relative">
                        <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                          <Star15 color="#FFD700" size={40} className="w-10 h-10" stroke="black" strokeWidth={4} />
                        </div>
                      </div>
                    </div>
                  )}
                  {size}
                </Button>
              ))}
            </div>
          </div>

          {/* Job Titles */}
          <div>
            <div className="flex items-center gap-2 mb-3">
              <label className="text-xl font-black uppercase block">
                TARGET JOB TITLES <span className="text-sm font-normal">(OPTIONAL)</span>
              </label>
              <Tooltip>
                <TooltipTrigger asChild>
                  <button className="p-0 bg-transparent border-none outline-none">
                    <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                  </button>
                </TooltipTrigger>
                <TooltipContent side="top">
                  <p>Target specific job roles. Select multiple titles to cast a wider net. AI will find similar roles automatically.</p>
                </TooltipContent>
              </Tooltip>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              {jobTitles.map((title) => (
                <Button
                  key={title}
                  variant="subheader"
                  className={`h-12 font-bold border-2 border-black relative ${
                    searchCriteria.jobTitles.includes(title) 
                      ? 'bg-violet-100' 
                      : 'bg-white hover:bg-violet-50'
                  }`}
                  onClick={() => toggleJobTitle(title)}
                >
                  {searchCriteria.jobTitles.includes(title) && (
                    <div className="absolute -top-4 -right-4 z-[100]" style={{animation: 'overshoot 0.3s ease-out'}}>
                      <div className="relative">
                        <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                          <Star15 color="#FFD700" size={40} className="w-10 h-10" stroke="black" strokeWidth={4} />
                        </div>
                      </div>
                    </div>
                  )}
                  {title}
                </Button>
              ))}
            </div>
          </div>

          <div className="bg-violet-50 border-2 border-black rounded-lg p-4">
            <div className="flex items-start gap-3">
              <Button size="sm" variant="neutral" className="bg-white flex-shrink-0">
                <span className="text-violet-600 font-black">2</span>
              </Button>
              <div>
                <p className="text-sm font-bold">STEP 2 OF 3</p>
                <p className="text-sm text-gray-700 mt-1">
                  Both fields are optional. Skip if you want to cast a wide net or be specific to target exact decision-makers.
                </p>
              </div>
            </div>
          </div>

          <div className="flex gap-4">
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
              onClick={() => setCurrentStep(2)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-violet-400 hover:bg-violet-400/90 text-black"
              onClick={() => setCurrentStep(2.75)}
            >
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/hunter/ContactPreferencesStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { 
  UilArrowRight,
  UilArrowLeft,
  UilEnvelope,
  UilPhone
} from '@tooni/iconscout-unicons-react';
import { StepProps } from './types';
import PremiumFeatureCard from '@/components/custom/premium-feature-card';

export function ContactPreferencesStep({
  contactPreferences,
  setContactPreferences,
  setCurrentStep
}: StepProps) {
  return (
    <Card className="transform -rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            CONTACT PREFERENCES
          </h1>
        </div>
        <p className="text-xl text-center text-gray-700 mb-8">
          Select what contact information to include
        </p>
        <div className="space-y-6">
          <Card className="border-2 border-black bg-violet-50">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <Button size="icon" variant="header" className="w-12 h-12 bg-blue-500">
                    <UilEnvelope className="h-6 w-6 text-white" />
                  </Button>
                  <div>
                    <h3 className="text-lg font-black uppercase">EMAIL ADDRESSES</h3>
                    <p className="text-sm text-gray-600">Include verified business emails</p>
                  </div>
                </div>
                <Switch
                  checked={contactPreferences.includeEmails}
                  onCheckedChange={(checked) => 
                    setContactPreferences({...contactPreferences, includeEmails: checked})
                  }
                />
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-black bg-violet-50">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <Button size="icon" variant="header" className="w-12 h-12 bg-green-500">
                    <UilPhone className="h-6 w-6 text-white" />
                  </Button>
                  <div>
                    <h3 className="text-lg font-black uppercase">PHONE NUMBERS</h3>
                    <p className="text-sm text-gray-600">Include direct dial and mobile numbers</p>
                  </div>
                </div>
                <Switch
                  checked={contactPreferences.includePhones}
                  onCheckedChange={(checked) => 
                    setContactPreferences({...contactPreferences, includePhones: checked})
                  }
                />
              </div>
            </CardContent>
          </Card>

          <PremiumFeatureCard
            title="LINKEDIN INTEGRATION"
            description="Access LinkedIn profiles and advanced social selling features"
            features={[
              'LinkedIn profile URLs and data',
              'Connection degree insights',
              'Recent LinkedIn activity',
              'Shared connections',
              'InMail credits included'
            ]}
            currentPlan="basic"
          />

          <PremiumFeatureCard
            title="ADVANCED ENRICHMENT"
            description="Get even more valuable data about your leads"
            features={[
              'Email verification and deliverability checks',
              'Social media profiles (Twitter, Facebook)',
              'Personal mobile numbers',
              'Technology stack used by company',
              'Recent news and triggers',
              'Buying intent signals'
            ]}
            currentPlan="basic"
          />

          <div className="flex gap-4">
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
              onClick={() => setCurrentStep(2.75)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-violet-400 hover:bg-violet-400/90 text-black"
              onClick={() => setCurrentStep(3.5)}
            >
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/hunter/IndustryLocationStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Star15 } from '@/components/ui/star';
import { 
  UilArrowRight,
  UilArrowLeft
} from '@tooni/iconscout-unicons-react';
import { StepProps } from './types';

export function IndustryLocationStep({
  searchCriteria,
  setSearchCriteria,
  customIndustry,
  setCustomIndustry,
  setCurrentStep,
  industries
}: StepProps) {
  return (
    <Card className="transform rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            INDUSTRY & LOCATION
          </h1>
        </div>
        <p className="text-xl text-center text-gray-700 mb-8">
          Define your target market and geographic focus
        </p>
        <div className="space-y-6">
          {/* Industry Selection */}
          <div>
            <label className="text-xl font-black uppercase mb-3 block">
              TARGET INDUSTRY
            </label>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3 mb-3">
              {industries.map((industry) => (
                <Button
                  key={industry}
                  variant={searchCriteria.industry === industry || (industry === 'Other' && searchCriteria.industry === customIndustry) ? "header" : "outline"}
                  className={`h-12 font-bold border-2 border-black relative ${
                    searchCriteria.industry === industry || (industry === 'Other' && searchCriteria.industry === customIndustry) 
                      ? 'bg-violet-400' 
                      : 'bg-white hover:bg-violet-100'
                  }`}
                  onClick={() => {
                    if (industry === 'Other') {
                      setSearchCriteria({...searchCriteria, industry: customIndustry || 'Other'});
                    } else {
                      setSearchCriteria({...searchCriteria, industry});
                      setCustomIndustry('');
                    }
                  }}
                >
                  {(searchCriteria.industry === industry || (industry === 'Other' && searchCriteria.industry === customIndustry)) && (
                    <div className="absolute -top-4 -right-4 z-[100]" style={{animation: 'overshoot 0.3s ease-out'}}>
                      <div className="relative">
                        <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                          <Star15 color="#FFD700" size={40} className="w-10 h-10" stroke="black" strokeWidth={4} />
                        </div>
                      </div>
                    </div>
                  )}
                  {industry}
                </Button>
              ))}
            </div>
            {/* Custom Industry Input */}
            {(searchCriteria.industry === 'Other' || searchCriteria.industry === customIndustry) && (
              <Input
                type="text"
                value={customIndustry}
                onChange={(e) => {
                  setCustomIndustry(e.target.value);
                  setSearchCriteria({...searchCriteria, industry: e.target.value || 'Other'});
                }}
                placeholder="Enter custom industry..."
                className="h-12 text-lg font-semibold border-4 border-black rounded-[3px]"
              />
            )}
          </div>

          {/* Location */}
          <div>
            <label className="text-xl font-black uppercase mb-3 block">
              TARGET LOCATION
            </label>
            <Input
              type="text"
              value={searchCriteria.location}
              onChange={(e) => setSearchCriteria({...searchCriteria, location: e.target.value})}
              placeholder="e.g., United States, California, San Francisco"
              className={`h-14 text-lg font-semibold border-4 border-black rounded-[3px] ${
                searchCriteria.location && searchCriteria.location.toLowerCase() === searchCriteria.industry.toLowerCase() 
                  ? 'border-red-500' 
                  : ''
              }`}
            />
            {searchCriteria.location && searchCriteria.location.toLowerCase() === searchCriteria.industry.toLowerCase() && (
              <p className="text-red-500 text-sm mt-2 font-bold">
                Location must be a geographic location, not the same as industry
              </p>
            )}
          </div>

          <div className="bg-violet-50 border-2 border-black rounded-lg p-4">
            <div className="flex items-start gap-3">
              <Button size="sm" variant="neutral" className="bg-white flex-shrink-0">
                <span className="text-violet-600 font-black">1</span>
              </Button>
              <div>
                <p className="text-sm font-bold">STEP 1 OF 3</p>
                <p className="text-sm text-gray-700 mt-1">
                  Start with broad targeting - we&apos;ll help you narrow down to specific companies and contacts in the next steps.
                </p>
              </div>
            </div>
          </div>

          <div className="flex gap-4">
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
              onClick={() => setCurrentStep(1)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-violet-400 hover:bg-violet-400/90 text-black"
              onClick={() => setCurrentStep(2.5)}
              disabled={!searchCriteria.industry || !searchCriteria.location}
            >
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/hunter/SearchDefinitionStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Star15 } from '@/components/ui/star';
import { 
  UilArrowRight,
  UilInfoCircle,
  UilSearch,
  UilDatabase,
  UilChartGrowth,
  UilGlobe,
  UilBuilding
} from '@tooni/iconscout-unicons-react';
import { StepProps } from './types';
import PremiumFeatureCard from '@/components/custom/premium-feature-card';

export function SearchDefinitionStep({
  searchName,
  setSearchName,
  searchObjective,
  setSearchObjective,
  selectedSources,
  handleSourceSelect,
  setCurrentStep,
  userUsageStats,
  leadSources
}: StepProps) {
  return (
    <Card className="transform rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="space-y-6">
          {/* Info Section */}
          <Card className="bg-violet-50 border-2 border-black">
            <CardContent className="p-6">
              <h3 className="text-2xl font-black uppercase mb-3">INTELLIGENT LEAD HUNTER</h3>
              <p className="text-lg text-gray-700 mb-4">
                Hunter combines powerful search capabilities with automated outreach to find and contact your perfect customers.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                  <span className="font-medium">Multi-source search</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                  <span className="font-medium">Smart filtering</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                  <span className="font-medium">Automated outreach</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                  <span className="font-medium">Real-time enrichment</span>
                </div>
              </div>
            </CardContent>
          </Card>

          <div>
            <label className="text-xl font-black uppercase mb-3 block">
              SEARCH NAME
            </label>
            <Input
              type="text"
              value={searchName}
              onChange={(e) => setSearchName(e.target.value)}
              placeholder="e.g., Q4 Enterprise Outreach"
              className="h-16 text-lg font-semibold border-4 border-black rounded-[3px]"
            />
          </div>
          
          <div>
            <label className="text-xl font-black uppercase mb-3 block">
              SEARCH OBJECTIVE
            </label>
            <Textarea
              value={searchObjective}
              onChange={(e) => setSearchObjective(e.target.value)}
              placeholder="What type of leads are you looking for? What's your ideal customer profile?"
              className="min-h-[120px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
            />
          </div>
          
          {/* Lead Sources */}
          <div>
            <label className="text-xl font-black uppercase mb-3 block">
              SELECT LEAD SOURCES
            </label>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {leadSources.map((source) => {
                const isLocked = source.id === 'database' || source.id === 'directory';
                return (
                  <Card 
                    key={source.id}
                    className={`transform transition-all border-4 border-black relative ${
                      isLocked 
                        ? 'bg-gray-100 opacity-75 cursor-not-allowed' 
                        : `cursor-pointer hover:scale-105 ${
                            selectedSources.includes(source.id) 
                              ? 'shadow-[8px_8px_0_rgba(0,0,0,1)] z-10 ' + source.color
                              : 'bg-violet-50'
                          }`
                    }`}
                    onClick={() => !isLocked && handleSourceSelect(source.id)}
                  >
                    {!isLocked && selectedSources.includes(source.id) && (
                      <div className="absolute -top-8 -right-8 sm:-top-12 sm:-right-12 md:-top-16 md:-right-16 z-[100]" style={{animation: 'overshoot 0.3s ease-out'}}>
                        <div className="relative">
                          <div className="animate-spin" style={{animationDuration: '15s', animationDelay: '0.3s'}}>
                            <Star15 color="#FFD700" size={80} className="w-20 h-20 sm:w-24 sm:h-24 md:w-[120px] md:h-[120px]" stroke="black" strokeWidth={8} />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-black font-black text-[10px] sm:text-xs uppercase tracking-wider transform rotate-12" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                              SELECTED
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    <CardContent className="p-6 text-center relative">
                      {isLocked && (
                        <Badge className="absolute top-2 right-2 bg-yellow-200 text-black border-2 border-black">
                          LOCKED
                        </Badge>
                      )}
                      <div className={`inline-flex items-center justify-center w-16 h-16 rounded-full mb-3 ${
                        isLocked 
                          ? 'bg-gray-400'
                          : selectedSources.includes(source.id) ? 'bg-white' : source.color
                      }`}>
                        {React.cloneElement(source.icon, { 
                          className: `h-8 w-8 ${
                            isLocked 
                              ? 'text-white'
                              : selectedSources.includes(source.id) ? 'text-black' : 'text-white'
                          }` 
                        })}
                      </div>
                      <h3 className="text-lg font-black uppercase mb-1">{source.name}</h3>
                      <p className="text-sm">{isLocked ? 'Premium feature' : source.description}</p>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </div>
          
          {/* Usage Stats Display */}
          {userUsageStats && (
            <Card className="bg-violet-50 border-2 border-black">
              <CardContent className="p-4">
                <div className="flex items-center justify-between mb-3">
                  <h4 className="font-black uppercase text-sm">Your Usage Today</h4>
                  <Badge className={`border-2 border-black ${
                    userUsageStats.subscription?.tier === 'free' ? 'bg-gray-200' :
                    userUsageStats.subscription?.tier === 'premium' ? 'bg-yellow-200' : 'bg-purple-200'
                  } text-black`}>
                    {userUsageStats.subscription?.tier?.toUpperCase()} PLAN
                  </Badge>
                </div>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <p className="font-bold">Searches Today</p>
                    <p className="text-violet-600">
                      {userUsageStats.usage.searchesToday} / {
                        userUsageStats.usage.searchesRemaining === -1 
                          ? '∞' 
                          : userUsageStats.subscription?.searchesPerDay
                      }
                    </p>
                  </div>
                  <div>
                    <p className="font-bold">Leads This Month</p>
                    <p className="text-violet-600">
                      {userUsageStats.usage.leadsThisMonth} / {
                        userUsageStats.usage.leadsRemaining === -1 
                          ? '∞' 
                          : userUsageStats.subscription?.totalLeadsPerMonth
                      }
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          <div className="bg-violet-50 border-2 border-black rounded-lg p-4">
            <div className="flex items-start gap-3">
              <Button size="sm" variant="neutral" className="bg-white flex-shrink-0">
                <UilInfoCircle className="h-4 w-4" />
              </Button>
              <div>
                <p className="text-sm font-bold">PRO TIP</p>
                <p className="text-sm text-gray-700 mt-1">
                  Using multiple sources increases lead quality and quantity. We&apos;ll cross-reference data for accuracy.
                </p>
              </div>
            </div>
          </div>
          
          <Button
            className="w-full h-14 text-lg font-black uppercase bg-violet-400 hover:bg-violet-400/90 text-black"
            onClick={() => {
              // Check if user has remaining searches
              if (userUsageStats?.usage.searchesRemaining === 0) {
                alert('You have reached your daily search limit. Please upgrade your plan to continue.');
                return;
              }
              setCurrentStep(2);
            }}
            disabled={!searchName || !searchObjective || selectedSources.length === 0}
          >
            CONTINUE
            <UilArrowRight className="ml-2 h-6 w-6" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}

/* Bottom Info Sections - Can be imported separately or included */
export function SearchDefinitionInfoSections() {
  return (
    <div className="mt-12 max-w-4xl mx-auto px-4 sm:px-6 space-y-6">
      <Card className="transform -rotate-1 relative overflow-hidden bg-violet-50">
        <CardContent className="relative pt-6">
          <div className="flex items-start gap-4">
            <Button
              size="icon"
              variant="default"
              className="w-12 h-12 flex-shrink-0 bg-violet-600 hover:bg-violet-700 text-white border-black"
            >
              <UilSearch className="h-6 w-6 text-white" />
            </Button>
            <div className="flex-1">
              <h3 className="text-2xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                LEAD GENERATION POWERHOUSE
              </h3>
              <p className="text-gray-700 mb-6 text-lg leading-relaxed">
                Hunter finds <span className="font-black text-violet-600">10x more qualified leads</span> than traditional methods by searching 
                across web directories, business listings, and B2B databases simultaneously. Our AI-powered enrichment ensures every lead comes with 
                verified contact information and detailed insights.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                  <span className="text-black font-medium">Cross-platform lead search</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                  <span className="text-black font-medium">Real-time data enrichment</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                  <span className="text-black font-medium">Email verification included</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                  <span className="text-black font-medium">Direct dial numbers</span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="transform rotate-1 relative overflow-hidden bg-violet-50">
        <CardContent className="pt-6">
          <div className="flex items-start gap-4">
            <Button
              size="icon"
              variant="default"
              className="w-12 h-12 flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90 text-black"
            >
              <UilDatabase className="h-6 w-6 text-black" />
            </Button>
            <div className="flex-1">
              <h3 className="text-xl font-black text-black mb-3 uppercase" style={{ fontFamily: 'Noyh-Bold, sans-serif' }}>
                DATA ACCURACY GUARANTEE
              </h3>
              <p className="text-gray-700 text-lg leading-relaxed">
                Every lead is <span className="font-black text-violet-600">triple-verified</span> across multiple data sources. 
                Our proprietary matching algorithm ensures 95%+ accuracy on contact information, while continuous updates keep your 
                lead data fresh and actionable.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      <PremiumFeatureCard
        title="ADVANCED SEARCH FILTERS"
        description="Unlock powerful filtering options to find exactly who you need"
        features={[
          'Technographic data (tech stack used)',
          'Funding and revenue filters',
          'Intent data and buying signals',
          'Social media activity level',
          'Custom boolean search queries'
        ]}
        currentPlan="basic"
      />
    </div>
  );
}


================================================
FILE: src/components/onboarding/hunter/SearchKeywordsStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { 
  UilArrowRight,
  UilArrowLeft,
  UilInfoCircle,
  UilSearch
} from '@tooni/iconscout-unicons-react';
import { StepProps } from './types';

export function SearchKeywordsStep({
  searchCriteria,
  setSearchCriteria,
  setCurrentStep
}: StepProps) {
  return (
    <Card className="transform rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            SEARCH KEYWORDS
          </h1>
        </div>
        <p className="text-xl text-center text-gray-700 mb-8">
          Fine-tune your search with specific keywords
        </p>
        <div className="space-y-6">
          {/* Keywords */}
          <div>
            <div className="flex items-center gap-2 mb-3">
              <label className="text-xl font-black uppercase block">
                SEARCH KEYWORDS <span className="text-sm font-normal">(OPTIONAL)</span>
              </label>
              <Tooltip>
                <TooltipTrigger asChild>
                  <button className="p-0 bg-transparent border-none outline-none">
                    <UilInfoCircle className="h-4 w-4 text-gray-500 hover:text-black cursor-help" />
                  </button>
                </TooltipTrigger>
                <TooltipContent side="top">
                  <p>Add keywords to refine your search. Use commas to separate multiple terms. Example: &quot;SaaS, B2B, startup&quot;</p>
                </TooltipContent>
              </Tooltip>
            </div>
            <Input
              type="text"
              value={searchCriteria.keywords}
              onChange={(e) => setSearchCriteria({...searchCriteria, keywords: e.target.value})}
              placeholder="e.g., SaaS, B2B, Enterprise, Cloud, API, Integration"
              className="h-14 text-lg font-semibold border-4 border-black rounded-[3px]"
            />
          </div>

          {/* Info about keywords */}
          <Card className="bg-violet-50 border-2 border-black">
            <CardContent className="p-6">
              <div className="flex items-start gap-4">
                <Button
                  size="icon"
                  variant="default"
                  className="w-12 h-12 flex-shrink-0 bg-violet-600 hover:bg-violet-700 text-white border-black"
                >
                  <UilSearch className="h-6 w-6 text-white" />
                </Button>
                <div className="flex-1">
                  <h3 className="text-lg font-black text-black mb-3 uppercase">
                    SMART KEYWORD MATCHING
                  </h3>
                  <p className="text-gray-700 text-sm leading-relaxed mb-4">
                    Our AI will search for these keywords on company websites, social profiles, and business listings. 
                    The more specific your keywords, the more targeted your results.
                  </p>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                      <span className="text-black text-xs font-medium">Technology stack keywords</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                      <span className="text-black text-xs font-medium">Business model terms</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                      <span className="text-black text-xs font-medium">Service offerings</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-violet-600 rounded-full"></div>
                      <span className="text-black text-xs font-medium">Industry-specific terms</span>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="bg-violet-50 border-2 border-black rounded-lg p-4">
            <div className="flex items-start gap-3">
              <Button size="sm" variant="neutral" className="bg-white flex-shrink-0">
                <span className="text-violet-600 font-black">3</span>
              </Button>
              <div>
                <p className="text-sm font-bold">FINAL STEP</p>
                <p className="text-sm text-gray-700 mt-1">
                  Keywords help narrow your search but are completely optional. Leave blank to find all companies in your target industry and location.
                </p>
              </div>
            </div>
          </div>

          <div className="flex gap-4">
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
              onClick={() => setCurrentStep(2.5)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-violet-400 hover:bg-violet-400/90 text-black"
              onClick={() => setCurrentStep(3)}
            >
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/hunter/SearchPreviewStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  UilArrowLeft,
  UilSearch,
  UilInfoCircle,
  UilClipboardNotes,
  UilChartGrowth
} from '@tooni/iconscout-unicons-react';
import { StepProps } from './types';

export function SearchPreviewStep({
  searchName,
  searchObjective,
  searchCriteria,
  customIndustry,
  selectedSources,
  canStartSearch,
  startSearch,
  setCurrentStep,
  userUsageStats
}: StepProps) {
  return (
    <Card className="transform rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            READY TO HUNT
          </h1>
        </div>
        <div className="space-y-6">
          <Card className="bg-violet-100 border-4 border-black shadow-[6px_6px_0_rgba(0,0,0,1)]">
            <CardContent className="p-6">
              <h3 className="text-2xl font-black uppercase mb-6 flex items-center gap-3">
                <UilClipboardNotes className="h-6 w-6" />
                SEARCH SUMMARY
              </h3>
              <div className="space-y-4">
                <div className="bg-white border-2 border-black rounded-lg p-3">
                  <p className="text-xs font-black uppercase text-gray-600 mb-1">SEARCH NAME</p>
                  <p className="font-bold text-lg">{searchName}</p>
                </div>
                <div className="bg-white border-2 border-black rounded-lg p-3">
                  <p className="text-xs font-black uppercase text-gray-600 mb-1">OBJECTIVE</p>
                  <p className="font-semibold">{searchObjective}</p>
                </div>
                <div className="grid grid-cols-2 gap-3">
                  <div className="bg-white border-2 border-black rounded-lg p-3">
                    <p className="text-xs font-black uppercase text-gray-600 mb-1">INDUSTRY</p>
                    <p className="font-bold">{searchCriteria.industry === 'Other' ? customIndustry : searchCriteria.industry}</p>
                  </div>
                  <div className="bg-white border-2 border-black rounded-lg p-3">
                    <p className="text-xs font-black uppercase text-gray-600 mb-1">LOCATION</p>
                    <p className="font-bold">{searchCriteria.location}</p>
                  </div>
                </div>
                {searchCriteria.companySize && (
                  <div className="bg-white border-2 border-black rounded-lg p-3">
                    <p className="text-xs font-black uppercase text-gray-600 mb-1">COMPANY SIZE</p>
                    <p className="font-bold">{searchCriteria.companySize} employees</p>
                  </div>
                )}
                {searchCriteria.jobTitles.length > 0 && (
                  <div className="bg-white border-2 border-black rounded-lg p-3">
                    <p className="text-xs font-black uppercase text-gray-600 mb-1">TARGET ROLES</p>
                    <div className="flex flex-wrap gap-2 mt-2">
                      {searchCriteria.jobTitles.map((title) => (
                        <Badge key={title} className="bg-violet-200 text-black border-2 border-black">
                          {title}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
                <div className="bg-white border-2 border-black rounded-lg p-3">
                  <p className="text-xs font-black uppercase text-gray-600 mb-1">LEAD SOURCES</p>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {selectedSources.map((source) => (
                      <Badge key={source} className="bg-green-200 text-black border-2 border-black">
                        {source.toUpperCase()}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-black transform -rotate-1">
            <CardContent className="p-6 text-center">
              <UilChartGrowth className="h-12 w-12 mx-auto mb-3 text-violet-600" />
              <h3 className="text-2xl font-black uppercase mb-2">ESTIMATED RESULTS</h3>
              <p className="text-4xl font-black text-violet-600 mb-2">300-500</p>
              <p className="text-lg font-medium">QUALIFIED LEADS</p>
            </CardContent>
          </Card>

          <div className="bg-violet-50 border-2 border-black rounded-lg p-4">
            <div className="flex items-start gap-3">
              <Button size="sm" variant="neutral" className="bg-white flex-shrink-0">
                <UilInfoCircle className="h-4 w-4" />
              </Button>
              <div>
                <p className="text-sm font-bold">WHAT HAPPENS NEXT</p>
                <p className="text-sm text-gray-700 mt-1">
                  We&apos;ll search across all selected sources, verify contact information, and compile your lead list. 
                  This typically takes 3-5 minutes depending on search complexity.
                </p>
              </div>
            </div>
          </div>

          <div className="flex gap-4">
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
              onClick={() => setCurrentStep(3.5)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-[rgb(0,82,255)] hover:bg-blue-600 text-white"
              onClick={() => {
                // Check limits before starting search
                if (userUsageStats?.usage.searchesRemaining === 0) {
                  alert('You have reached your daily search limit. Please upgrade your plan to continue.');
                  return;
                }
                if (userUsageStats?.usage.leadsRemaining === 0) {
                  alert('You have reached your monthly lead limit. Please upgrade your plan to continue.');
                  return;
                }
                startSearch();
              }}
              disabled={!canStartSearch()}
            >
              START HUNTING
              <UilSearch className="ml-2 h-6 w-6" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/hunter/SearchProgressStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { 
  UilSearch,
  UilBuilding,
  UilGlobe,
  UilDatabase
} from '@tooni/iconscout-unicons-react';
import { StepProps } from './types';
import PremiumFeatureCard from '@/components/custom/premium-feature-card';

export function SearchProgressStep({
  currentStatus,
  searchProgress
}: StepProps) {
  return (
    <Card className="transform -rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            HUNTING IN PROGRESS
          </h1>
        </div>
        <div className="space-y-6">
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-24 h-24 bg-violet-400 border-4 border-black rounded-full mb-4">
              <UilSearch className="h-12 w-12 text-black animate-pulse" />
            </div>
            <p className="text-xl font-bold text-gray-700">{currentStatus}</p>
          </div>

          <div className="space-y-2">
            <div className="flex justify-between text-sm font-bold">
              <span>PROGRESS</span>
              <span>{searchProgress}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-6 border-2 border-black overflow-hidden">
              <div
                className="bg-violet-400 h-full transition-all duration-500"
                style={{ width: `${searchProgress}%` }}
              />
            </div>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            <Card className="bg-violet-50 border-2 border-black">
              <CardContent className="p-4 text-center">
                <UilBuilding className="h-8 w-8 mx-auto mb-2 text-orange-600" />
                <p className="text-sm font-bold uppercase">Directories</p>
                <p className="text-2xl font-black">{searchProgress >= 20 ? '✓' : '...'}</p>
              </CardContent>
            </Card>
            <Card className="bg-violet-50 border-2 border-black">
              <CardContent className="p-4 text-center">
                <UilGlobe className="h-8 w-8 mx-auto mb-2 text-green-600" />
                <p className="text-sm font-bold uppercase">Web</p>
                <p className="text-2xl font-black">{searchProgress >= 40 ? '✓' : '...'}</p>
              </CardContent>
            </Card>
            <Card className="bg-violet-50 border-2 border-black">
              <CardContent className="p-4 text-center">
                <UilDatabase className="h-8 w-8 mx-auto mb-2 text-purple-600" />
                <p className="text-sm font-bold uppercase">Database</p>
                <p className="text-2xl font-black">{searchProgress >= 60 ? '✓' : '...'}</p>
              </CardContent>
            </Card>
          </div>

          <PremiumFeatureCard
            title="SPEED UP SEARCHES"
            description="Upgrade to search 10x faster with priority processing"
            features={[
              'Priority search queue',
              'Parallel processing',
              'No rate limits',
              'Real-time results'
            ]}
            currentPlan="basic"
          />
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/hunter/SearchResultsStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  UilInfoCircle,
  UilUsersAlt,
  UilPhone
} from '@tooni/iconscout-unicons-react';
import { StepProps } from './types';

export function SearchResultsStep({
  searchResults,
  currentSearchId,
  userUsageStats
}: StepProps) {
  return (
    <Card className="transform rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            HUNT COMPLETE!
          </h1>
        </div>
        <div className="space-y-6">
          <p className="text-xl text-center text-gray-700">
            Your lead list is ready! We found high-quality prospects matching your criteria.
          </p>
          
          {userUsageStats?.subscription?.tier === 'free' && (
            <Card className="bg-yellow-50 border-2 border-black">
              <CardContent className="p-4">
                <div className="flex items-start gap-3">
                  <Button size="sm" variant="neutral" className="bg-yellow-200 flex-shrink-0">
                    <UilInfoCircle className="h-4 w-4" />
                  </Button>
                  <div>
                    <p className="text-sm font-bold">FREE TIER NOTICE</p>
                    <p className="text-sm text-gray-700 mt-1">
                      Your search results will be available for 7 days. Upgrade to Premium to keep your data permanently.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {searchResults && (
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              <Card className="bg-violet-50 border-2 border-black transform -rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Total Leads</p>
                  <p className="text-3xl font-black">{searchResults.totalLeads}</p>
                </CardContent>
              </Card>
              <Card className="bg-violet-50 border-2 border-black transform rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Verified Emails</p>
                  <p className="text-3xl font-black">{searchResults.verifiedEmails}</p>
                </CardContent>
              </Card>
              <Card className="bg-violet-50 border-2 border-black transform -rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Phone Numbers</p>
                  <p className="text-3xl font-black">{searchResults.verifiedPhones}</p>
                </CardContent>
              </Card>
              <Card className="bg-violet-50 border-2 border-black transform rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Websites</p>
                  <p className="text-3xl font-black">{searchResults.businessWebsites}</p>
                </CardContent>
              </Card>
              <Card className="bg-violet-50 border-2 border-black transform -rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Response Rate</p>
                  <p className="text-3xl font-black">{searchResults.avgResponseRate}</p>
                </CardContent>
              </Card>
              <Card className="bg-green-50 border-2 border-black transform rotate-1">
                <CardContent className="p-4 text-center">
                  <p className="text-sm font-bold uppercase text-gray-600">Search Time</p>
                  <p className="text-3xl font-black">{searchResults.searchTime}</p>
                </CardContent>
              </Card>
            </div>
          )}

          <div className="flex flex-col sm:flex-row gap-4">
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-violet-400 hover:bg-violet-400/90 text-black"
              onClick={() => {
                if (currentSearchId) {
                  window.location.href = `/dashboard/hunter/search/${currentSearchId}`;
                } else {
                  window.location.href = '/dashboard/hunter';
                }
              }}
            >
              VIEW LEADS
              <UilUsersAlt className="ml-2 h-6 w-6" />
            </Button>
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-[rgb(0,82,255)] hover:bg-blue-600 text-white"
              onClick={() => window.location.href = '/dashboard/calls'}
            >
              START CALLING
              <UilPhone className="ml-2 h-6 w-6" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/hunter/types.ts
================================================
import * as React from 'react';

export interface SearchCriteria {
  industry: string;
  location: string;
  companySize: string;
  jobTitles: string[];
  keywords: string;
}

export interface ValidationCriteria {
  mustHaveWebsite: boolean;
  mustHaveContactInfo: boolean;
  mustHaveSpecificKeywords: string[];
  mustBeInIndustry: boolean;
  customValidationRules: string;
}

export interface LeadSource {
  id: string;
  name: string;
  icon: React.ReactNode;
  description: string;
  color: string;
}

export interface ContactPreferences {
  includeEmails: boolean;
  includePhones: boolean;
  includeLinkedIn: boolean;
}

export interface SearchResults {
  totalLeads: number;
  verifiedEmails: number;
  verifiedPhones: number;
  businessWebsites: number;
  avgResponseRate: string;
  searchTime: string;
}

export interface StepProps {
  // Step state
  currentStep: number;
  setCurrentStep: (step: number) => void;
  
  // Search definition state
  searchName: string;
  setSearchName: (name: string) => void;
  searchObjective: string;
  setSearchObjective: (objective: string) => void;
  selectedSources: string[];
  setSelectedSources: (sources: string[]) => void;
  
  // Search criteria state
  searchCriteria: SearchCriteria;
  setSearchCriteria: (criteria: SearchCriteria) => void;
  customIndustry: string;
  setCustomIndustry: (industry: string) => void;
  
  // Contact preferences state
  contactPreferences: ContactPreferences;
  setContactPreferences: (preferences: ContactPreferences) => void;
  
  // Validation criteria state
  validationCriteria: ValidationCriteria;
  setValidationCriteria: (criteria: ValidationCriteria) => void;
  
  // Search execution state
  isSearching: boolean;
  setIsSearching: (searching: boolean) => void;
  searchProgress: number;
  setSearchProgress: (progress: number) => void;
  currentStatus: string;
  setCurrentStatus: (status: string) => void;
  searchResults: SearchResults | null;
  setSearchResults: (results: SearchResults | null) => void;
  currentSearchId: string | null;
  setCurrentSearchId: (id: string | null) => void;
  
  // Verification state
  showVerification: boolean;
  setShowVerification: (show: boolean) => void;
  
  // Dev mode state
  devMode: boolean;
  setDevMode: (mode: boolean) => void;
  
  // Functions
  handleSourceSelect: (sourceId: string) => void;
  toggleJobTitle: (title: string) => void;
  canStartSearch: () => boolean;
  startSearch: () => Promise<void>;
  handleVerificationComplete: (email: string, phone: string) => Promise<void>;
  handleStepChange: (step: number) => void;
  
  // Convex data
  userUsageStats?: any;
  createLeadSearch?: any;
  getSearchStatus?: any;
  
  // Constants
  leadSources: LeadSource[];
  industries: string[];
  jobTitles: string[];
}


================================================
FILE: src/components/onboarding/hunter/ValidationCriteriaStep.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { 
  UilArrowRight,
  UilArrowLeft,
  UilGlobe,
  UilEnvelope,
  UilBuilding,
  UilCrosshair,
  UilInfoCircle,
  UilClipboardNotes
} from '@tooni/iconscout-unicons-react';
import { StepProps } from './types';

export function ValidationCriteriaStep({
  validationCriteria,
  setValidationCriteria,
  setCurrentStep
}: StepProps) {
  return (
    <Card className="transform rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            VALIDATION CRITERIA
          </h1>
        </div>
        <p className="text-xl text-center text-gray-700 mb-8">
          Define what makes a lead valid for your search
        </p>
        <div className="space-y-6">
          <Card className="border-2 border-black bg-violet-50">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <Button size="icon" variant="header" className="w-12 h-12 bg-green-500">
                    <UilGlobe className="h-6 w-6 text-white" />
                  </Button>
                  <div>
                    <h3 className="text-lg font-black uppercase">ACTIVE WEBSITE</h3>
                    <p className="text-sm text-gray-600">Must have a functioning business website</p>
                  </div>
                </div>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Switch
                      checked={validationCriteria.mustHaveWebsite}
                      onCheckedChange={(checked) => 
                        setValidationCriteria({...validationCriteria, mustHaveWebsite: checked})
                      }
                    />
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Only include businesses with verified, active websites</p>
                  </TooltipContent>
                </Tooltip>
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-black bg-violet-50">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <Button size="icon" variant="header" className="w-12 h-12 bg-blue-500">
                    <UilEnvelope className="h-6 w-6 text-white" />
                  </Button>
                  <div>
                    <h3 className="text-lg font-black uppercase">CONTACT INFORMATION</h3>
                    <p className="text-sm text-gray-600">Must have visible contact details</p>
                  </div>
                </div>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Switch
                      checked={validationCriteria.mustHaveContactInfo}
                      onCheckedChange={(checked) => 
                        setValidationCriteria({...validationCriteria, mustHaveContactInfo: checked})
                      }
                    />
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Filter out businesses without verifiable contact information</p>
                  </TooltipContent>
                </Tooltip>
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-black bg-violet-50">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <Button size="icon" variant="header" className="w-12 h-12 bg-purple-500">
                    <UilBuilding className="h-6 w-6 text-white" />
                  </Button>
                  <div>
                    <h3 className="text-lg font-black uppercase">INDUSTRY MATCH</h3>
                    <p className="text-sm text-gray-600">Must be in the selected industry</p>
                  </div>
                </div>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Switch
                      checked={validationCriteria.mustBeInIndustry}
                      onCheckedChange={(checked) => 
                        setValidationCriteria({...validationCriteria, mustBeInIndustry: checked})
                      }
                    />
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Strictly enforce industry classification matching</p>
                  </TooltipContent>
                </Tooltip>
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-black bg-violet-50">
            <CardContent className="p-6">
              <div>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <h3 className="text-lg font-black uppercase mb-3 flex items-center gap-3 cursor-help">
                      <UilCrosshair className="h-6 w-6" />
                      REQUIRED KEYWORDS
                      <UilInfoCircle className="h-4 w-4 text-gray-600" />
                    </h3>
                  </TooltipTrigger>
                  <TooltipContent className="max-w-xs">
                    <p>Leads must have ALL of these keywords on their website to be included in results</p>
                  </TooltipContent>
                </Tooltip>
                <p className="text-sm text-gray-600 mb-3">
                  Comma-separated keywords that must appear on the website
                </p>
                <Input
                  type="text"
                  value={validationCriteria.mustHaveSpecificKeywords.join(', ')}
                  onChange={(e) => {
                    const value = e.target.value;
                    // Only split by comma if the user is not in the middle of typing
                    if (value.endsWith(',') || value.endsWith(', ')) {
                      setValidationCriteria({
                        ...validationCriteria, 
                        mustHaveSpecificKeywords: value.split(',').map(k => k.trim()).filter(k => k)
                      });
                    } else {
                      // For display purposes, update the array on blur or when needed
                      const keywords = value.split(',').map(k => k.trim()).filter(k => k);
                      setValidationCriteria({
                        ...validationCriteria, 
                        mustHaveSpecificKeywords: keywords
                      });
                    }
                  }}
                  onBlur={(e) => {
                    // Ensure clean split on blur
                    const keywords = e.target.value.split(',').map(k => k.trim()).filter(k => k);
                    setValidationCriteria({
                      ...validationCriteria, 
                      mustHaveSpecificKeywords: keywords
                    });
                  }}
                  placeholder="e.g., partner, affiliate, reseller, api, integration"
                  className="h-14 text-lg font-semibold border-4 border-black rounded-[3px]"
                />
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-black bg-violet-50">
            <CardContent className="p-6">
              <div>
                <h3 className="text-lg font-black uppercase mb-3 flex items-center gap-3">
                  <UilClipboardNotes className="h-6 w-6" />
                  CUSTOM VALIDATION RULES
                </h3>
                <p className="text-sm text-gray-600 mb-3">
                  Additional requirements or criteria for lead validation
                </p>
                <Textarea
                  value={validationCriteria.customValidationRules}
                  onChange={(e) => setValidationCriteria({
                    ...validationCriteria, 
                    customValidationRules: e.target.value
                  })}
                  placeholder="e.g., Must offer enterprise solutions, Must have case studies, Must serve international clients..."
                  className="min-h-[120px] text-lg font-semibold border-4 border-black rounded-[3px] resize-none"
                />
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-4">
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-gray-300 hover:bg-gray-400 text-black"
              onClick={() => setCurrentStep(3)}
            >
              <UilArrowLeft className="mr-2 h-6 w-6" />
              BACK
            </Button>
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-violet-400 hover:bg-violet-400/90 text-black"
              onClick={() => setCurrentStep(4)}
            >
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/onboarding/modals/BulkDownloadModal.tsx
================================================
import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilArrowRight, UilCloudDownload, UilFilter, UilDatabase } from '@tooni/iconscout-unicons-react';

interface BulkDownloadModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function BulkDownloadModal({ isOpen, onClose }: BulkDownloadModalProps) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="max-w-md w-full bg-yellow-50">
        <CardContent className="p-6 space-y-6 bg-yellow-50">
          <h2 className="text-2xl font-black uppercase text-center">
            BULK DOWNLOAD TRANSCRIPTS
          </h2>
          
          <p className="text-lg text-center text-gray-700 font-semibold">
            Scale your training data collection with our powerful bulk download system:
          </p>
          
          <div className="rounded-lg bg-gray-100 p-4 flex items-center justify-center">
            <Image 
              src="/example.png" 
              alt="Bulk download" 
              width={400}
              height={200}
              className="max-w-full h-auto"
            />
          </div>
          
          <div className="space-y-4">
            <div className="flex items-center gap-3">
              <Button variant="reverse-header" size="icon" className="flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90">
                <UilCloudDownload className="h-5 w-5 text-black" />
              </Button>
              <span className="text-lg font-semibold">Process thousands of videos simultaneously</span>
            </div>
            
            <div className="flex items-center gap-3">
              <Button variant="reverse-header" size="icon" className="flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90">
                <UilDatabase className="h-5 w-5 text-black" />
              </Button>
              <span className="text-lg font-semibold">Extract transcripts for training datasets</span>
            </div>
            
            <div className="flex items-center gap-3">
              <Button variant="reverse-header" size="icon" className="flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90">
                <UilFilter className="h-5 w-5 text-black" />
              </Button>
              <span className="text-lg font-semibold">Filter by channel, playlist, or keywords</span>
            </div>
          </div>
          
          <Button
            className="w-full h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
            onClick={onClose}
          >
            <span className="flex items-center justify-center">
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </span>
          </Button>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/modals/ChatWithDialaModal.tsx
================================================
import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilArrowRight, UilCommentDots, UilBrain, UilRobot } from '@tooni/iconscout-unicons-react';

interface ChatWithDialaModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function ChatWithDialaModal({ isOpen, onClose }: ChatWithDialaModalProps) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="max-w-md w-full bg-yellow-50">
        <CardContent className="p-6 space-y-6 bg-yellow-50">
          <h2 className="text-2xl font-black uppercase text-center">
            CHAT WITH DIALA
          </h2>
          
          <p className="text-lg text-center text-gray-700 font-semibold">
            Interact with our AI to unlock powerful insights from any transcript:
          </p>
          
          <div className="rounded-lg bg-gray-100 p-4 flex items-center justify-center">
            <Image 
              src="/example.png" 
              alt="Chat with Diala" 
              width={400}
              height={200}
              className="max-w-full h-auto"
            />
          </div>
          
          <div className="space-y-4">
            <div className="flex items-center gap-3">
              <Button variant="reverse-header" size="icon" className="flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90">
                <UilCommentDots className="h-5 w-5 text-black" />
              </Button>
              <span className="text-lg font-semibold">Ask questions about any transcript</span>
            </div>
            
            <div className="flex items-center gap-3">
              <Button variant="reverse-header" size="icon" className="flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90">
                <UilBrain className="h-5 w-5 text-black" />
              </Button>
              <span className="text-lg font-semibold">Get AI-powered insights and summaries</span>
            </div>
            
            <div className="flex items-center gap-3">
              <Button variant="reverse-header" size="icon" className="flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90">
                <UilRobot className="h-5 w-5 text-black" />
              </Button>
              <span className="text-lg font-semibold">Train voice agents with conversation data</span>
            </div>
          </div>
          
          <Button
            className="w-full h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
            onClick={onClose}
          >
            <span className="flex items-center justify-center">
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </span>
          </Button>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/modals/CopyTranscriptModal.tsx
================================================
import * as React from 'react';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { UilArrowRight, UilFileAlt, UilEdit, UilCommentDots } from '@tooni/iconscout-unicons-react';

interface CopyTranscriptModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function CopyTranscriptModal({ isOpen, onClose }: CopyTranscriptModalProps) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="max-w-md w-full bg-yellow-50">
        <CardContent className="p-6 space-y-6 bg-yellow-50">
          <h2 className="text-2xl font-black uppercase text-center">
            TRANSCRIPT COPIED TO CLIPBOARD!
          </h2>
          
          <p className="text-lg text-center text-gray-700 font-semibold">
            Transform your transcript into powerful training data for voice agents:
          </p>
          
          <div className="rounded-lg bg-gray-100 p-4 flex items-center justify-center">
            <Image 
              src="/example.png" 
              alt="Copy success" 
              width={400}
              height={200}
              className="max-w-full h-auto"
            />
          </div>
          
          <div className="space-y-4">
            <div className="flex items-center gap-3">
              <Button variant="reverse-header" size="icon" className="flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90">
                <UilFileAlt className="h-5 w-5 text-black" />
              </Button>
              <span className="text-lg font-semibold">Use for voice agent conversation training</span>
            </div>
            
            <div className="flex items-center gap-3">
              <Button variant="reverse-header" size="icon" className="flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90">
                <UilEdit className="h-5 w-5 text-black" />
              </Button>
              <span className="text-lg font-semibold">Create industry-specific dialogue datasets</span>
            </div>
            
            <div className="flex items-center gap-3">
              <Button variant="reverse-header" size="icon" className="flex-shrink-0 bg-yellow-400 hover:bg-yellow-400/90">
                <UilCommentDots className="h-5 w-5 text-black" />
              </Button>
              <span className="text-lg font-semibold">Fine-tune AI models with real conversations</span>
            </div>
          </div>
          
          <Button
            className="w-full h-14 text-lg font-black uppercase bg-yellow-400 hover:bg-yellow-400/90 text-black"
            onClick={onClose}
          >
            <span className="flex items-center justify-center">
              CONTINUE
              <UilArrowRight className="ml-2 h-6 w-6" />
            </span>
          </Button>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/modals/VoiceCloneModal.tsx
================================================
import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { UilArrowRight, UilUser, UilMicrophone, UilPlay, UilVolumeUp } from '@tooni/iconscout-unicons-react';

interface VoiceCloneModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function VoiceCloneModal({ isOpen, onClose }: VoiceCloneModalProps) {
  const [cloneName, setCloneName] = React.useState('');
  const [isProcessing, setIsProcessing] = React.useState(false);

  if (!isOpen) return null;

  const handleStartCloning = () => {
    if (!cloneName.trim()) {
      alert('Please enter a name for your voice clone');
      return;
    }
    
    setIsProcessing(true);
    // TODO: Implement actual voice cloning logic
    setTimeout(() => {
      setIsProcessing(false);
      alert(`Voice clone "${cloneName}" created successfully!`);
      onClose();
    }, 2000);
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="max-w-md w-full bg-purple-50">
        <CardContent className="p-6 space-y-6 bg-purple-50">
          <h2 className="text-2xl font-black uppercase text-center">
            CREATE VOICE CLONE
          </h2>
          
          <p className="text-lg text-center text-gray-700 font-semibold">
            Clone any voice from your audio file for realistic AI conversations:
          </p>
          
          <div className="space-y-4">
            <div>
              <label className="text-sm font-bold uppercase mb-2 block">
                Voice Clone Name
              </label>
              <Input
                type="text"
                value={cloneName}
                onChange={(e) => setCloneName(e.target.value)}
                placeholder="e.g., Customer Service Agent"
                className="h-12 text-lg font-semibold border-3 border-black"
              />
            </div>
          </div>
          
          <div className="space-y-4">
            <div className="flex items-center gap-3">
              <Button variant="reverse-header" size="icon" className="flex-shrink-0 bg-purple-500 hover:bg-purple-600">
                <UilUser className="h-5 w-5 text-white" />
              </Button>
              <span className="text-lg font-semibold">Perfect voice matching technology</span>
            </div>
            
            <div className="flex items-center gap-3">
              <Button variant="reverse-header" size="icon" className="flex-shrink-0 bg-purple-500 hover:bg-purple-600">
                <UilMicrophone className="h-5 w-5 text-white" />
              </Button>
              <span className="text-lg font-semibold">Capture unique speech patterns</span>
            </div>
            
            <div className="flex items-center gap-3">
              <Button variant="reverse-header" size="icon" className="flex-shrink-0 bg-purple-500 hover:bg-purple-600">
                <UilVolumeUp className="h-5 w-5 text-white" />
              </Button>
              <span className="text-lg font-semibold">Natural tone and emotion replication</span>
            </div>
          </div>

          <div className="bg-purple-100 border-2 border-purple-300 rounded-lg p-4">
            <p className="text-sm font-semibold text-purple-800 text-center">
              ⚡ Voice cloning typically takes 30-60 seconds
            </p>
          </div>
          
          <div className="flex gap-3">
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-gray-200 hover:bg-gray-300 text-black"
              onClick={onClose}
              disabled={isProcessing}
            >
              CANCEL
            </Button>
            <Button
              className="flex-1 h-14 text-lg font-black uppercase bg-purple-500 hover:bg-purple-600 text-white"
              onClick={handleStartCloning}
              disabled={isProcessing}
            >
              {isProcessing ? (
                <span className="flex items-center justify-center">
                  PROCESSING...
                </span>
              ) : (
                <span className="flex items-center justify-center">
                  START CLONING
                  <UilArrowRight className="ml-2 h-6 w-6" />
                </span>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/components/onboarding/procedural/AudioGenerationProgress.tsx
================================================
'use client';

import * as React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { 
  UilMicrophone,
  UilMusic,
  UilCheck,
  UilCoffee
} from '@tooni/iconscout-unicons-react';

interface AudioGenerationProgressProps {
  progress: number;
  status: string;
  audioName: string;
}

export function AudioGenerationProgress({
  progress,
  status,
  audioName
}: AudioGenerationProgressProps) {
  return (
    <Card className="transform -rotate-1 relative overflow-hidden">
      <CardContent className="p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-black uppercase text-black">
            BREWING AUDIO
          </h1>
          <p className="text-lg text-gray-700 mt-2">
            Creating your coffee shop ambiance
          </p>
        </div>

        <div className="space-y-6">
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-24 h-24 bg-yellow-400 border-4 border-black rounded-full mb-4">
              <UilCoffee className="h-12 w-12 text-black animate-pulse" />
            </div>
            <p className="text-xl font-bold text-gray-700">{status}</p>
          </div>

          <div className="space-y-2">
            <div className="flex justify-between text-sm font-bold">
              <span>PROGRESS</span>
              <span>{progress}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-6 border-2 border-black overflow-hidden">
              <div
                className="bg-yellow-400 h-full transition-all duration-500"
                style={{ width: `${progress}%` }}
              />
            </div>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            <Card className="bg-yellow-50 border-2 border-black">
              <CardContent className="p-4 text-center">
                <UilCoffee className="h-8 w-8 mx-auto mb-2 text-orange-600" />
                <p className="text-sm font-bold uppercase">Ambiance</p>
                <p className="text-2xl font-black">{progress >= 25 ? '✓' : '...'}</p>
              </CardContent>
            </Card>
            <Card className="bg-yellow-50 border-2 border-black">
              <CardContent className="p-4 text-center">
                <UilMicrophone className="h-8 w-8 mx-auto mb-2 text-green-600" />
                <p className="text-sm font-bold uppercase">Chatter</p>
                <p className="text-2xl font-black">{progress >= 50 ? '✓' : '...'}</p>
              </CardContent>
            </Card>
            <Card className="bg-yellow-50 border-2 border-black">
              <CardContent className="p-4 text-center">
                <UilMusic className="h-8 w-8 mx-auto mb-2 text-purple-600" />
                <p className="text-sm font-bold uppercase">Cups</p>
                <p className="text-2xl font-black">{progress >= 75 ? '✓' : '...'}</p>
              </CardContent>
            </Card>
          </div>

          <div className="text-center">
            <p className="text-sm text-gray-600">
              {progress < 25 && "Setting up coffee shop atmosphere..."}
              {progress >= 25 && progress < 50 && "Adding background conversations..."}
              {progress >= 50 && progress < 75 && "Mixing cup clinking sounds..."}
              {progress >= 75 && progress < 100 && "Finalizing audio quality..."}
              {progress === 100 && "Your coffee shop audio is ready!"}
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


================================================
FILE: src/components/providers/convex-client-provider.tsx
================================================
"use client";

import { ReactNode } from "react";
import { ConvexProvider, ConvexReactClient } from "convex/react";

const convexUrl = process.env.NEXT_PUBLIC_CONVEX_URL!;

const convex = new ConvexReactClient(convexUrl);

export function ConvexClientProvider({ children }: { children: ReactNode }) {
  return <ConvexProvider client={convex}>{children}</ConvexProvider>;
}


================================================
FILE: src/components/transcripts/SpeakerTimeline.tsx
================================================
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';

interface SpeakerSegment {
  speaker: string;
  start: number;
  end: number;
  duration: number;
}

interface SpeakerTimelineProps {
  transcript: string;
  speakers: SpeakerSegment[];
  sentimentAnalysis?: {
    sentiment: string;
    confidence: number;
    emotions?: Record<string, number>;
  };
}

function formatTime(seconds: number): string {
  const mins = Math.floor(seconds / 60);
  const secs = Math.floor(seconds % 60);
  return `${mins}:${secs.toString().padStart(2, '0')}`;
}

function mergeSegments(segments: SpeakerSegment[]): SpeakerSegment[] {
  if (segments.length === 0) return [];
  
  const merged: SpeakerSegment[] = [];
  let current = segments[0];
  
  for (let i = 1; i < segments.length; i++) {
    const next = segments[i];
    
    // Skip zero-duration segments
    if (next.duration <= 0) continue;
    
    // Merge if same speaker and close together (within 1 second)
    if (next.speaker === current.speaker && (next.start - current.end) <= 1) {
      current = {
        ...current,
        end: next.end,
        duration: next.end - current.start
      };
    } else {
      merged.push(current);
      current = next;
    }
  }
  merged.push(current);
  
  return merged.filter(s => s.duration > 0);
}

function getSpeakerColor(speaker: string): string {
  const colors = [
    'bg-blue-500',
    'bg-green-500',
    'bg-purple-500',
    'bg-orange-500',
    'bg-pink-500',
    'bg-indigo-500'
  ];
  const index = parseInt(speaker.replace('SPEAKER_', '')) - 1;
  return colors[index % colors.length];
}

export function SpeakerTimeline({ transcript, speakers, sentimentAnalysis }: SpeakerTimelineProps) {
  if (!speakers || speakers.length === 0) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-500">No speaker diarization data available</p>
      </div>
    );
  }

  const mergedSpeakers = mergeSegments(speakers);
  
  // Split transcript into words and assign to speakers based on timing
  const words = transcript.split(' ');
  const wordsPerSecond = words.length / Math.max(...speakers.map(s => s.end), 1);
  
  const speakerTexts = mergedSpeakers.map(segment => {
    const startWord = Math.floor(segment.start * wordsPerSecond);
    const endWord = Math.floor(segment.end * wordsPerSecond);
    const text = words.slice(startWord, endWord + 1).join(' ');
    return { ...segment, text };
  });

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle>Speaker Timeline</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {speakerTexts.map((segment, index) => (
              <div key={index} className="p-4 bg-gray-50 rounded-lg">
                <div className="flex items-center space-x-3 mb-2">
                  <Badge className={`${getSpeakerColor(segment.speaker)} text-white min-w-[80px]`}>
                    {segment.speaker}
                  </Badge>
                  <div className="text-sm text-muted-foreground">
                    {formatTime(segment.start)} - {formatTime(segment.end)}
                  </div>
                  <Badge variant="secondary">{formatTime(segment.duration)}</Badge>
                </div>
                <div className="text-sm text-gray-700 leading-relaxed">
                  {segment.text || 'No text available for this segment'}
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {sentimentAnalysis && (
        <Card>
          <CardHeader>
            <CardTitle>Sentiment Analysis</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Badge variant={sentimentAnalysis.sentiment === 'positive' ? 'default' : 
                  sentimentAnalysis.sentiment === 'negative' ? 'destructive' : 'secondary'}>
                  {sentimentAnalysis.sentiment}
                </Badge>
                <span className="text-sm text-muted-foreground">
                  Confidence: {(sentimentAnalysis.confidence * 100).toFixed(1)}%
                </span>
              </div>
              
              {sentimentAnalysis.emotions && (
                <div className="space-y-1">
                  <Separator />
                  <div className="text-sm font-medium">Emotions:</div>
                  <div className="grid grid-cols-2 gap-2 text-xs">
                    {Object.entries(sentimentAnalysis.emotions).map(([emotion, value]) => (
                      <div key={emotion} className="flex justify-between">
                        <span className="capitalize">{emotion}:</span>
                        <span>{(value * 100).toFixed(1)}%</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}


================================================
FILE: src/components/ui/accordion.tsx
================================================
"use client"

import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { UilAngleDown } from "@tooni/iconscout-unicons-react"

import * as React from "react"

import { cn } from "@/lib/utils"

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn(
        "rounded-base overflow-hidden border-2 border-b border-border shadow-shadow",
        className,
      )}
      {...props}
    />
  )
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "flex flex-1 items-center justify-between text-left text-base text-main-foreground border-border focus-visible:ring-[3px] bg-main p-4 font-heading transition-all [&[data-state=open]>svg]:rotate-180 data-[state=open]:rounded-b-none data-[state=open]:border-b-2 disabled:pointer-events-none disabled:opacity-50",
          className,
        )}
        {...props}
      >
        {children}
        <UilAngleDown className="pointer-events-none size-5 shrink-0 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="overflow-hidden rounded-b-base bg-secondary-background text-sm font-base transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
      {...props}
    >
      <div className={cn("p-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}

Accordion.displayName = "Accordion"
AccordionItem.displayName = AccordionPrimitive.Item.displayName
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }



================================================
FILE: src/components/ui/badge.tsx
================================================
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import * as React from "react"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-base border-2 border-border px-2.5 py-0.5 text-xs font-base w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] overflow-hidden",
  {
    variants: {
      variant: {
        default: "bg-main text-main-foreground",
        neutral: "bg-secondary-background text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }



================================================
FILE: src/components/ui/breadcrumb.tsx
================================================
import { Slot } from "@radix-ui/react-slot"
import { UilAngleRight, UilEllipsisH } from "@tooni/iconscout-unicons-react"

import * as React from "react"

import { cn } from "@/lib/utils"

function Breadcrumb({ ...props }: React.ComponentProps<"nav">) {
  return <nav data-slot="breadcrumb" aria-label="breadcrumb" {...props} />
}

function BreadcrumbList({ className, ...props }: React.ComponentProps<"ol">) {
  return (
    <ol
      data-slot="breadcrumb-list"
      className={cn(
        "flex flex-wrap items-center gap-1.5 text-sm font-base break-words text-foreground sm:gap-2.5",
        className,
      )}
      {...props}
    />
  )
}

function BreadcrumbItem({ className, ...props }: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="breadcrumb-item"
      className={cn("inline-flex items-center gap-1.5", className)}
      {...props}
    />
  )
}

function BreadcrumbLink({
  asChild,
  className,
  ...props
}: React.ComponentProps<"a"> & {
  asChild?: boolean
}) {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp data-slot="breadcrumb-link" className={cn(className)} {...props} />
  )
}

function BreadcrumbPage({ className, ...props }: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="breadcrumb-page"
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn(className)}
      {...props}
    />
  )
}

function BreadcrumbSeparator({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="breadcrumb-separator"
      role="presentation"
      aria-hidden="true"
      className={cn("[&>svg]:size-3.5", className)}
      {...props}
    >
      {children ?? <UilAngleRight />}
    </li>
  )
}

function BreadcrumbEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="breadcrumb-ellipsis"
      role="presentation"
      aria-hidden="true"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <UilEllipsisH className="size-4" />
      <span className="sr-only">More</span>
    </span>
  )
}

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}



================================================
FILE: src/components/ui/button.tsx
================================================
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import * as React from "react"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-base text-sm font-base ring-offset-white transition-all gap-2 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-black focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "text-main-foreground bg-main border-4 border-border shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none",
        noShadow: "text-main-foreground bg-main border-4 border-border",
        neutral:
          "bg-secondary-background text-foreground border-4 border-border shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none",
        reverse:
          "text-main-foreground bg-main border-4 border-border hover:translate-x-reverseBoxShadowX hover:translate-y-reverseBoxShadowY hover:shadow-shadow",
        "reverse-header":
          "text-main-foreground bg-main border-4 border-border hover:translate-x-reverseBoxShadowX hover:translate-y-reverseBoxShadowY hover:shadow-shadow",
        "reverse-subheader":
          "text-main-foreground bg-main border-2 border-border translate-x-boxShadowX translate-y-boxShadowY shadow-none hover:translate-x-0 hover:translate-y-0 hover:shadow-shadow",
        header:
          "text-main-foreground bg-main border-4 border-border shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none",
        subheader:
          "text-main-foreground bg-main border-2 border-border shadow-shadow hover:translate-x-boxShadowX hover:translate-y-boxShadowY hover:shadow-none",
        ghost:
          "hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 px-3",
        lg: "h-11 px-8",
        icon: "size-9",
        header: "size-12",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }



================================================
FILE: src/components/ui/card.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "bg-background text-foreground border-4 border-border shadow-shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6 border-b-4 border-border", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-bold leading-none tracking-tight uppercase",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


================================================
FILE: src/components/ui/carousel.tsx
================================================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { UilArrowLeft, UilArrowRight } from "@tooni/iconscout-unicons-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-none",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <UilArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-none",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <UilArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


================================================
FILE: src/components/ui/chart.tsx
================================================
"use client"

import * as RechartsPrimitive from "recharts"

import * as React from "react"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

function ChartContainer({
  id,
  className,
  children,
  config,
  ...props
}: React.ComponentProps<"div"> & {
  config: ChartConfig
  children: React.ComponentProps<
    typeof RechartsPrimitive.ResponsiveContainer
  >["children"]
}) {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-slot="chart"
        data-chart={chartId}
        className={cn(
          "[&_.recharts-cartesian-axis-tick_text]:fill-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-[#80808080] [&_.recharts-curve.recharts-tooltip-cursor]:stroke-[#80808080] [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-black [&_.recharts-polar-grid_[stroke='#ccc']]:dark:stroke-white [&_.recharts-reference-line_[stroke='#ccc']]:stroke-black [&_.recharts-reference-line_[stroke='#ccc']]:dark:stroke-white flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-border [&_.recharts-surface]:outline-hidden",
          "[&_.recharts-layer_path]:[fill-opacity:1] [&_.recharts-layer_path]:[stroke-width:2] [&_.recharts-layer_path]:[stroke:var(--color-border)]",
          className,
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
}

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color,
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`,
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

function ChartTooltipContent({
  active,
  payload,
  className,
  indicator = "dot",
  hideLabel = false,
  hideIndicator = false,
  label,
  labelFormatter,
  labelClassName,
  formatter,
  color,
  nameKey,
  labelKey,
}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
  React.ComponentProps<"div"> & {
    hideLabel?: boolean
    hideIndicator?: boolean
    indicator?: "line" | "dot" | "dashed"
    nameKey?: string
    labelKey?: string
  }) {
  const { config } = useChart()

  const tooltipLabel = React.useMemo(() => {
    if (hideLabel || !payload?.length) {
      return null
    }

    const [item] = payload
    const key = `${labelKey || item?.dataKey || item?.name || "value"}`
    const itemConfig = getPayloadConfigFromPayload(config, item, key)
    const value =
      !labelKey && typeof label === "string"
        ? config[label as keyof typeof config]?.label || label
        : itemConfig?.label

    if (labelFormatter) {
      return (
        <div className={cn("font-heading", labelClassName)}>
          {labelFormatter(value, payload)}
        </div>
      )
    }

    if (!value) {
      return null
    }

    return <div className={cn("font-base", labelClassName)}>{value}</div>
  }, [
    label,
    labelFormatter,
    payload,
    hideLabel,
    labelClassName,
    config,
    labelKey,
  ])

  if (!active || !payload?.length) {
    return null
  }

  const nestLabel = payload.length === 1 && indicator !== "dot"

  return (
    <div
      className={cn(
        "border-border bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl",
        className,
      )}
    >
      {!nestLabel ? tooltipLabel : null}
      <div className="grid gap-1.5">
        {payload.map((item, index) => {
          const key = `${nameKey || item.name || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)
          const indicatorColor = color || item.payload.fill || item.color

          return (
            <div
              key={item.dataKey}
              className={cn(
                "[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 ",
                indicator === "dot" && "items-center",
              )}
            >
              {formatter && item?.value !== undefined && item.name ? (
                formatter(item.value, item.name, item, index, item.payload)
              ) : (
                <>
                  {itemConfig?.icon ? (
                    <itemConfig.icon />
                  ) : (
                    !hideIndicator && (
                      <div
                        className={cn(
                          "shrink-0 rounded-[2px] bg-(--color-bg)",
                          {
                            "size-2.5 border border-border":
                              indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-[1.5px] border-dashed bg-transparent":
                              indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed",
                          },
                        )}
                        style={
                          {
                            "--color-bg": indicatorColor,
                            "--color-border": indicatorColor,
                          } as React.CSSProperties
                        }
                      />
                    )
                  )}
                  <div
                    className={cn(
                      "flex flex-1 justify-between leading-none",
                      nestLabel ? "items-end" : "items-center",
                    )}
                  >
                    <div className="grid gap-1.5">
                      {nestLabel ? tooltipLabel : null}
                      <span className="text-muted-foreground">
                        {itemConfig?.label || item.name}
                      </span>
                    </div>
                    {item.value && (
                      <span className="text-foreground font-mono font-medium tabular-nums">
                        {item.value.toLocaleString()}
                      </span>
                    )}
                  </div>
                </>
              )}
            </div>
          )
        })}
      </div>
    </div>
  )
}

const ChartLegend = RechartsPrimitive.Legend

function ChartLegendContent({
  className,
  hideIcon = false,
  payload,
  verticalAlign = "bottom",
  nameKey,
}: React.ComponentProps<"div"> &
  Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
    hideIcon?: boolean
    nameKey?: string
  }) {
  const { config } = useChart()

  if (!payload?.length) {
    return null
  }

  return (
    <div
      className={cn(
        "flex items-center justify-center gap-4",
        verticalAlign === "top" ? "pb-3" : "pt-3",
        className,
      )}
    >
      {payload.map((item) => {
        const key = `${nameKey || item.dataKey || "value"}`
        const itemConfig = getPayloadConfigFromPayload(config, item, key)

        return (
          <div
            key={item.value}
            className={cn(
              "[&>svg]:text-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3",
            )}
          >
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 border border-border shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color,
                }}
              />
            )}
            {itemConfig?.label}
          </div>
        )
      })}
    </div>
  )
}

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string,
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}



================================================
FILE: src/components/ui/checkbox.tsx
================================================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border-2 border-border ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-main data-[state=checked]:text-main-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


================================================
FILE: src/components/ui/drawer.tsx
================================================
"use client"

import { Drawer as DrawerPrimitive } from "vaul"

import * as React from "react"

import { cn } from "@/lib/utils"

function Drawer({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) {
  return (
    <DrawerPrimitive.Root
      data-slot="drawer"
      shouldScaleBackground={shouldScaleBackground}
      {...props}
    />
  )
}

function DrawerTrigger({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {
  return <DrawerPrimitive.Trigger data-slot="drawer-trigger" {...props} />
}

function DrawerPortal({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {
  return <DrawerPrimitive.Portal data-slot="drawer-portal" {...props} />
}

function DrawerClose({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Close>) {
  return <DrawerPrimitive.Close data-slot="drawer-close" {...props} />
}

function DrawerOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {
  return (
    <DrawerPrimitive.Overlay
      data-slot="drawer-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-overlay",
        className,
      )}
      {...props}
    />
  )
}

function DrawerContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Content>) {
  return (
    <DrawerPortal>
      <DrawerOverlay />
      <DrawerPrimitive.Content
        data-slot="drawer-content"
        className={cn(
          "bg-background group/drawer-content fixed z-50 flex h-auto flex-col",
          "data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-base border-t-2 border-t-border",
          "data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-base border-b-2 border-b-border",
          "data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:sm:max-w-sm border-r-2 border-r-border",
          "data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:sm:max-w-sm border-l-2 border-l-border",
          className,
        )}
        {...props}
      >
        <div className="mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block bg-current" />
        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  )
}

function DrawerHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="drawer-header"
      className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DrawerFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="drawer-footer"
      className={cn("mt-auto flex flex-col gap-3 p-4", className)}
      {...props}
    />
  )
}

function DrawerTitle({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Title>) {
  return (
    <DrawerPrimitive.Title
      data-slot="drawer-title"
      className={cn(
        "text-lg font-heading leading-none tracking-tight",
        className,
      )}
      {...props}
    />
  )
}

function DrawerDescription({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Description>) {
  return (
    <DrawerPrimitive.Description
      data-slot="drawer-description"
      className={cn("text-sm font-base text-foreground", className)}
      {...props}
    />
  )
}

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}



================================================
FILE: src/components/ui/dropdown-menu.tsx
================================================
"use client"

import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import * as React from "react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return <DropdownMenuPrimitive.Group {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return <DropdownMenuPrimitive.Portal {...props} />
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub {...props} />
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return <DropdownMenuPrimitive.RadioGroup {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "flex cursor-default select-none items-center rounded-none border-2 border-transparent bg-white px-2 py-1.5 text-sm font-base outline-none hover:bg-gray-100 focus:bg-gray-100 gap-2 data-[inset=true]:pl-8 [&_svg]:pointer-events-none [&_svg]:w-4 [&_svg]:h-4 [&_svg]:shrink-0",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronRight className="ml-auto" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-none border-2 border-border bg-white p-1 font-base text-foreground shadow-[4px_4px_0_rgba(0,0,0,1)] data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        side="bottom"
        align="start"
        avoidCollisions={true}
        collisionPadding={10}
        className={cn(
          "z-[9999] min-w-[8rem] overflow-hidden rounded-none border-4 border-black bg-red-500 p-1 font-base text-black shadow-[4px_4px_0_rgba(0,0,0,1)]",
          className,
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuItem({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      className={cn(
        "relative gap-2 [&_svg]:pointer-events-none [&_svg]:w-4 [&_svg]:h-4 [&_svg]:shrink-0 flex cursor-default select-none items-center rounded-none border-2 border-transparent data-[inset=true]:pl-8 bg-white hover:bg-gray-100 px-2 py-1.5 text-sm font-base text-black outline-none transition-colors focus:bg-gray-100 data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className,
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      className={cn(
        "relative flex cursor-default select-none items-center rounded-none border-2 border-transparent gap-2 py-1.5 pl-8 pr-2 text-sm font-base text-foreground bg-white hover:bg-gray-100 outline-none transition-colors focus:bg-gray-100 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <Check />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      className={cn(
        "relative flex cursor-default select-none items-center rounded-none border-2 border-transparent gap-2 py-1.5 pl-8 pr-2 text-sm font-base bg-white hover:bg-gray-100 outline-none transition-colors focus:bg-gray-100 data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className,
      )}
      {...props}
    >
      <span className="absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <Circle className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-heading data-[inset]:pl-8",
        className,
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      className={cn("-mx-1 my-1 h-0.5 bg-border", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn("ml-auto text-xs font-base tracking-widest", className)}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



================================================
FILE: src/components/ui/image-card.tsx
================================================
import { cn } from "@/lib/utils"

type Props = {
  imageUrl: string
  caption: string
  className?: string
}

export default function ImageCard({ imageUrl, caption, className }: Props) {
  return (
    <figure
      className={cn(
        "w-[250px] overflow-hidden rounded-base border-2 border-border bg-main font-base shadow-shadow",
        className,
      )}
    >
      <img className="w-full aspect-4/3" src={imageUrl} alt="image" />
      <figcaption className="border-t-2 text-main-foreground border-border p-4">
        {caption}
      </figcaption>
    </figure>
  )
}



================================================
FILE: src/components/ui/input-otp.tsx
================================================
"use client"

import { OTPInput, OTPInputContext } from "input-otp"
import { UilCircle } from "@tooni/iconscout-unicons-react"

import * as React from "react"

import { cn } from "@/lib/utils"

function InputOTP({
  className,
  containerClassName,
  ...props
}: React.ComponentProps<typeof OTPInput> & {
  containerClassName?: string
}) {
  return (
    <OTPInput
      data-slot="input-otp"
      containerClassName={cn(
        "flex items-center gap-2 has-disabled:opacity-50",
        containerClassName,
      )}
      className={cn("disabled:cursor-not-allowed", className)}
      {...props}
    />
  )
}

function InputOTPGroup({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="input-otp-group"
      className={cn("flex items-center", className)}
      {...props}
    />
  )
}

function InputOTPSlot({
  index,
  className,
  ...props
}: React.ComponentProps<"div"> & { index: number }) {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}

  return (
    <div
      data-slot="input-otp-slot"
      data-active={isActive}
      className={cn(
        "relative flex size-10 items-center justify-center border-y-2 border-r-2 border-border bg-secondary-background text-sm font-base text-foreground first:rounded-l-base first:border-l-2 last:rounded-r-base transition-all",
        isActive && "z-10 ring-1 ring-ring",
        className,
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-current duration-1000" />
        </div>
      )}
    </div>
  )
}

function InputOTPSeparator({ ...props }: React.ComponentProps<"div">) {
  return (
    <div data-slot="input-otp-separator" role="separator" {...props}>
      <UilCircle className="h-4 w-4" />
    </div>
  )
}

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }



================================================
FILE: src/components/ui/input.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "flex h-10 w-full border-2 border-black bg-white px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  )
}

export { Input }



================================================
FILE: src/components/ui/progress.tsx
================================================
"use client"

import * as ProgressPrimitive from "@radix-ui/react-progress"

import * as React from "react"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root> & {
  value?: number
}) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "relative h-4 w-full overflow-hidden rounded-base border-2 border-border bg-secondary-background",
        className,
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="h-full w-full flex-1 border-r-2 border-border bg-main transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }



================================================
FILE: src/components/ui/resizable.tsx
================================================
"use client"

import { UilGripHorizontalLine } from "@tooni/iconscout-unicons-react"
import * as ResizablePrimitive from "react-resizable-panels"

import * as React from "react"

import { cn } from "@/lib/utils"

function ResizablePanelGroup({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        "flex h-full w-full font-base data-[panel-group-direction=vertical]:flex-col",
        className,
      )}
      {...props}
    />
  )
}

function ResizablePanel({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {
  return (
    <ResizablePrimitive.Panel
      data-slot="resizable-panel"
      className={cn(className)}
      {...props}
    />
  )
}

function ResizableHandle({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        "relative flex w-0.5 items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-black focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-0.5 data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
        "md:w-0.5 md:data-[panel-group-direction=vertical]:h-0.5",
        "w-2 data-[panel-group-direction=vertical]:h-2",
        "touch-none select-none",
        "hover:bg-border/80 active:bg-border",
        "transition-colors duration-200",
        className,
      )}
      {...props}
    >
      {withHandle && (
        <div className="z-10 flex h-4 w-3 items-center justify-center rounded-base border bg-border md:h-4 md:w-3 h-6 w-5 touch-manipulation">
          <UilGripHorizontalLine className="h-2.5 w-2.5 md:h-2.5 md:w-2.5 h-3 w-3" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  )
}

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }



================================================
FILE: src/components/ui/select.tsx
================================================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"
import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between border-4 border-black bg-white px-3 py-2 text-sm font-base",
      "shadow-[4px_4px_0_rgba(0,0,0,1)] transition-all",
      "hover:shadow-[6px_6px_0_rgba(0,0,0,1)] hover:translate-x-[-2px] hover:translate-y-[-2px]",
      "focus:outline-none focus:shadow-[6px_6px_0_rgba(0,0,0,1)]",
      "disabled:cursor-not-allowed disabled:opacity-50",
      "[&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden",
        "border-4 border-black bg-white shadow-[6px_6px_0_rgba(0,0,0,1)]",
        "data-[state=open]:animate-in data-[state=closed]:animate-out",
        "data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
        "data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",
        "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2",
        "data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-heading", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center py-1.5 pl-8 pr-2 text-sm font-base outline-none",
      "transition-colors hover:bg-yellow-100",
      "focus:bg-yellow-100",
      "data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-black", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


================================================
FILE: src/components/ui/separator.tsx
================================================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(({ className, orientation = "horizontal", decorative = true, ...props }, ref) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn(
      "shrink-0 bg-border",
      orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
      className
    )}
    {...props}
  />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


================================================
FILE: src/components/ui/slider.tsx
================================================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-4 w-full grow overflow-hidden bg-gray-200 border-2 border-black">
      <SliderPrimitive.Range className="absolute h-full bg-[rgb(0,82,255)]" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-8 w-8 border-4 border-black bg-yellow-400 shadow-[4px_4px_0_rgba(0,0,0,1)] cursor-pointer hover:bg-yellow-300 focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50 relative z-10 !important" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }



================================================
FILE: src/components/ui/sonner.tsx
================================================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-white group-[.toaster]:text-black group-[.toaster]:border-4 group-[.toaster]:border-black group-[.toaster]:shadow-[6px_6px_0_rgba(0,0,0,1)] group-[.toaster]:rounded-[3px] group-[.toaster]:min-w-[350px] group-[.toaster]:p-4 group-[.toaster]:font-['Noyh-Bold',sans-serif]",
          description: "group-[.toast]:text-current group-[.toast]:opacity-90",
          icon: "group-[.toast]:flex-shrink-0",
          content: "group-[.toast]:flex group-[.toast]:items-start group-[.toast]:gap-3 group-[.toast]:w-full group-[.toast]:pl-12",
          title: "group-[.toast]:font-black group-[.toast]:text-base",
          actionButton:
            "group-[.toast]:bg-yellow-400 group-[.toast]:text-black group-[.toast]:border-2 group-[.toast]:border-black group-[.toast]:font-black group-[.toast]:uppercase",
          cancelButton:
            "group-[.toast]:bg-gray-300 group-[.toast]:text-black group-[.toast]:border-2 group-[.toast]:border-black group-[.toast]:font-black group-[.toast]:uppercase",
          closeButton: 
            "group-[.toast]:bg-black group-[.toast]:border-2 group-[.toast]:border-black group-[.toast]:text-white group-[.toast]:hover:bg-gray-800",
          error: 
            "group-[.toaster]:bg-red-500 group-[.toaster]:text-white group-[.toaster]:border-black group-[.toaster]:font-black",
          success:
            "group-[.toaster]:bg-green-500 group-[.toaster]:text-white group-[.toaster]:border-black group-[.toaster]:font-black",
          warning:
            "group-[.toaster]:bg-yellow-400 group-[.toaster]:text-black group-[.toaster]:border-black group-[.toaster]:font-black",
          info:
            "group-[.toaster]:bg-blue-500 group-[.toaster]:text-white group-[.toaster]:border-black group-[.toaster]:font-black",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }



================================================
FILE: src/components/ui/sonner.tsx.backup
================================================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  return (
    <Sonner
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-white group-[.toaster]:text-black group-[.toaster]:border-4 group-[.toaster]:border-black group-[.toaster]:shadow-[6px_6px_0_rgba(0,0,0,1)] group-[.toaster]:rounded-[3px]",
          description: "group-[.toast]:text-gray-600",
          actionButton:
            "group-[.toast]:bg-yellow-400 group-[.toast]:text-black group-[.toast]:border-2 group-[.toast]:border-black group-[.toast]:font-black group-[.toast]:uppercase",
          cancelButton:
            "group-[.toast]:bg-gray-300 group-[.toast]:text-black group-[.toast]:border-2 group-[.toast]:border-black group-[.toast]:font-black group-[.toast]:uppercase",
          closeButton: 
            "group-[.toast]:bg-gray-200 group-[.toast]:border-2 group-[.toast]:border-black group-[.toast]:text-black",
          error: 
            "group-[.toaster]:bg-red-50 group-[.toaster]:text-red-900 group-[.toaster]:border-red-900",
          success:
            "group-[.toaster]:bg-green-50 group-[.toaster]:text-green-900 group-[.toaster]:border-green-900",
          warning:
            "group-[.toaster]:bg-yellow-50 group-[.toaster]:text-yellow-900 group-[.toaster]:border-yellow-900",
          info:
            "group-[.toaster]:bg-blue-50 group-[.toaster]:text-blue-900 group-[.toaster]:border-blue-900",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }


================================================
FILE: src/components/ui/star.tsx
================================================
interface StarProps {
  color?: string;
  size?: number;
  stroke?: string;
  strokeWidth?: number;
  pathClassName?: string;
  width?: number;
  height?: number;
  className?: string;
}

export const Star15 = ({ 
  color, 
  size, 
  stroke, 
  strokeWidth, 
  pathClassName, 
  width, 
  height, 
  className,
  ...props 
}: StarProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 200 200"
    width={size ?? width}
    height={size ?? height}
    className={className}
    {...props}
  >
    <path
      fill={color ?? "currentColor"}
      stroke={stroke}
      strokeWidth={strokeWidth}
      className={pathClassName}
      d="M95.713 9.378a6 6 0 0 1 8.574 0l9.515 9.717a6 6 0 0 0 6.496 1.381l12.645-5.007a6 6 0 0 1 7.833 3.487l4.74 12.748a6 6 0 0 0 5.372 3.903l13.589.57a6 6 0 0 1 5.737 6.371l-.855 13.573a6 6 0 0 0 3.321 5.752l12.182 6.046a6 6 0 0 1 2.649 8.154l-6.301 12.053a6 6 0 0 0 .694 6.604l8.67 10.479a6 6 0 0 1-.897 8.527l-10.658 8.447a6 6 0 0 0-2.052 6.316l3.657 13.099a6 6 0 0 1-4.287 7.426l-13.173 3.381a6 6 0 0 0-4.443 4.936l-1.987 13.454a6 6 0 0 1-6.936 5.04l-13.41-2.269a6 6 0 0 0-6.066 2.701l-7.287 11.483a6 6 0 0 1-8.387 1.783l-11.327-7.527a6 6 0 0 0-6.641 0l-11.328 7.527a6 6 0 0 1-8.387-1.783l-7.287-11.483a6 6 0 0 0-6.066-2.701l-13.41 2.269a6 6 0 0 1-6.936-5.04l-1.987-13.454a6 6 0 0 0-4.443-4.936l-13.173-3.381a6 6 0 0 1-4.287-7.426l3.657-13.099a6 6 0 0 0-2.052-6.316l-10.658-8.447a6 6 0 0 1-.897-8.527l8.67-10.479a6 6 0 0 0 .694-6.604l-6.301-12.053a6 6 0 0 1 2.65-8.154l12.181-6.046a6 6 0 0 0 3.32-5.752l-.854-13.573a6 6 0 0 1 5.737-6.372l13.588-.569a6 6 0 0 0 5.373-3.903l4.74-12.748a6 6 0 0 1 7.833-3.487l12.645 5.007a6 6 0 0 0 6.496-1.38z"
    />
  </svg>
);

// Simple star unicode version for lighter weight
export const StarBadge = ({ selected, className = "" }: { selected: boolean; className?: string }) => {
  if (!selected) return null;
  
  return (
    <div className={`absolute -top-2 -right-2 z-10 ${className}`}>
      <span className="text-2xl text-yellow-400 animate-pulse drop-shadow-[2px_2px_0_rgba(0,0,0,1)] transform rotate-12">
        ★
      </span>
    </div>
  );
};


================================================
FILE: src/components/ui/switch.tsx
================================================
import * as React from "react"
import { cn } from "@/lib/utils"

interface SwitchProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  checked?: boolean
  onCheckedChange?: (checked: boolean) => void
  disabled?: boolean
}

const Switch = React.forwardRef<HTMLButtonElement, SwitchProps>(
  ({ className, checked = false, onCheckedChange, disabled, ...props }, ref) => {
    return (
      <button
        type="button"
        role="switch"
        aria-checked={checked}
        disabled={disabled}
        onClick={() => onCheckedChange?.(!checked)}
        ref={ref}
        className={cn(
          "relative inline-flex h-6 w-12 items-center border-2 border-black shadow-[2px_2px_0_rgba(0,0,0,1)] transition-all cursor-pointer",
          checked ? "bg-green-400" : "bg-gray-300",
          disabled && "opacity-50 cursor-not-allowed",
          className
        )}
        {...props}
      >
        <span
          className={cn(
            "inline-block h-4 w-4 transform bg-white border-2 border-black transition-transform",
            checked ? "translate-x-6" : "translate-x-1"
          )}
        />
      </button>
    )
  }
)
Switch.displayName = "Switch"

export { Switch }


================================================
FILE: src/components/ui/tabs.tsx
================================================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================
FILE: src/components/ui/textarea.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full border-2 border-black bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }


================================================
FILE: src/components/ui/tooltip.tsx
================================================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 8, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-[9999] max-w-xs overflow-hidden border-2 border-black bg-white px-3 py-2 text-xs font-bold text-black shadow-[4px_4px_0_rgba(0,0,0,1)] data-[state=delayed-open]:data-[side=top]:animate-slideDownAndFade data-[state=delayed-open]:data-[side=right]:animate-slideLeftAndFade data-[state=delayed-open]:data-[side=left]:animate-slideRightAndFade data-[state=delayed-open]:data-[side=bottom]:animate-slideUpAndFade",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


================================================
FILE: src/contexts/VideoPreviewContext.tsx
================================================
'use client';

import React, { createContext, useContext, useState, useCallback, useRef, ReactNode } from 'react';

interface VideoPreviewData {
  videoId: string;
  platform: 'tiktok' | 'youtube' | 'twitch';
  previewUrl: string | null;
  fallbackUrl?: string | null;
  previewBlob: Blob | null;
  audioUrl?: string | null;
  audioBlob?: Blob | null;
  loading: boolean;
  error: string | null;
}

interface VideoPreviewContextType {
  previews: Map<string, VideoPreviewData>;
  generatePreview: (videoId: string, platform: 'tiktok' | 'youtube' | 'twitch', videoUrl?: string) => Promise<VideoPreviewData | undefined>;
  generateMultiplePreviews: (videos: Array<{id: string, url?: string}>, platform: 'tiktok' | 'youtube' | 'twitch') => Promise<void>;
  getPreview: (videoId: string, platform: 'tiktok' | 'youtube' | 'twitch') => VideoPreviewData | undefined;
  extractAudio: (videoId: string, platform: 'tiktok' | 'youtube' | 'twitch', format?: string) => Promise<void>;
  cancelPreview: (videoId: string, platform: 'tiktok' | 'youtube' | 'twitch') => void;
  clearCache: () => void;
  previewsLoading: boolean;
}

// LRU Cache for preview management
class PreviewCache {
  private cache: Map<string, VideoPreviewData>;
  private maxSize: number;

  constructor(maxSize: number = 10) {
    this.cache = new Map();
    this.maxSize = maxSize;
  }

  get(key: string): VideoPreviewData | undefined {
    const item = this.cache.get(key);
    if (item) {
      // Move to end (most recently used)
      this.cache.delete(key);
      this.cache.set(key, item);
    }
    return item;
  }

  set(key: string, value: VideoPreviewData): void {
    // Remove oldest if at capacity
    if (this.cache.size >= this.maxSize && !this.cache.has(key)) {
      const firstKey = this.cache.keys().next().value;
      const oldData = this.cache.get(firstKey);
      // Only revoke if it's a blob URL (starts with 'blob:')
      if (oldData?.previewUrl && oldData.previewUrl.startsWith('blob:')) {
        URL.revokeObjectURL(oldData.previewUrl);
      }
      if (oldData?.audioUrl && oldData.audioUrl.startsWith('blob:')) {
        URL.revokeObjectURL(oldData.audioUrl);
      }
      this.cache.delete(firstKey);
    }
    this.cache.set(key, value);
  }

  getAll(): Map<string, VideoPreviewData> {
    return new Map(this.cache);
  }

  clear(): void {
    // Clean up only blob URLs (not stream URLs)
    this.cache.forEach((data) => {
      if (data.previewUrl && data.previewUrl.startsWith('blob:')) {
        URL.revokeObjectURL(data.previewUrl);
      }
      if (data.audioUrl && data.audioUrl.startsWith('blob:')) {
        URL.revokeObjectURL(data.audioUrl);
      }
    });
    this.cache.clear();
  }
}

// Singleton cache instance
const previewCache = new PreviewCache();

const VideoPreviewContext = createContext<VideoPreviewContextType | undefined>(undefined);

export function VideoPreviewProvider({ children }: { children: ReactNode }) {
  // Initialize state with cached values to prevent re-render on mount
  const [previews, setPreviews] = useState<Map<string, VideoPreviewData>>(() => previewCache.getAll());
  const [previewsLoading, setPreviewsLoading] = useState(false);
  const loadingRef = useRef<Set<string>>(new Set());
  const abortControllersRef = useRef<Map<string, AbortController>>(new Map());
  const previewsRef = useRef<Map<string, VideoPreviewData>>(previews);
  const isMountedRef = useRef(true);
  
  // Keep ref in sync with state
  React.useEffect(() => {
    previewsRef.current = previews;
  }, [previews]);

  const generatePreview = useCallback(async (
    videoId: string,
    platform: 'tiktok' | 'youtube' | 'twitch',
    videoUrl?: string
  ): Promise<VideoPreviewData | undefined> => {
    const cacheKey = `${platform}-${videoId}`;
    
    // Check cache first
    const cached = previewCache.get(cacheKey);
    if (cached && cached.previewUrl) {
      if (isMountedRef.current) {
        setPreviews(prev => new Map(prev).set(cacheKey, cached));
      }
      return cached;
    }
    
    // Check if already in state and has URL or is loading
    const existing = previews.get(cacheKey);
    if (existing && (existing.previewUrl || existing.loading)) {
      return existing;
    }

    // Cancel any existing request for this video
    const existingController = abortControllersRef.current.get(cacheKey);
    if (existingController) {
      existingController.abort();
      abortControllersRef.current.delete(cacheKey);
    }

    // Avoid duplicate requests
    if (loadingRef.current.has(cacheKey)) {
      return;
    }

    loadingRef.current.add(cacheKey);
    
    // Create new abort controller for this request
    const abortController = new AbortController();
    abortControllersRef.current.set(cacheKey, abortController);
    
    // Set loading state
    const loadingData: VideoPreviewData = {
      videoId,
      platform,
      previewUrl: null,
      previewBlob: null,
      audioUrl: null,
      audioBlob: null,
      loading: true,
      error: null
    };
    
    if (isMountedRef.current) {
      setPreviews(prev => new Map(prev).set(cacheKey, loadingData));
    }

    try {
      // Currently only TikTok has preview endpoints
      if (platform !== 'tiktok') {
        throw new Error(`Preview not available for ${platform} yet`);
      }
      
      // Use direct video URL from the video data instead of preview endpoint
      // The preview endpoint doesn't exist, so we'll use the direct TikTok URL
      if (platform === 'tiktok') {
        try {
          console.log('[VideoPreview] Using direct TikTok URL for', videoId);
          
          // Use the direct TikTok video URL from the video data
          // This will be handled by the video player directly
          const previewData: VideoPreviewData = {
            videoId,
            platform,
            previewUrl: videoUrl || null, // Use the provided video URL directly
            previewBlob: null,
            audioUrl: null,
            audioBlob: null,
            loading: false,
            error: null
          };
          
          console.log('[VideoPreview] Created preview data with stream URL:', previewData);
          
          // Update state and cache
          previewCache.set(cacheKey, previewData);
          if (isMountedRef.current) {
            setPreviews(prev => new Map(prev).set(cacheKey, previewData));
          }
          
          return previewData;
        } catch (streamError) {
          console.error('[VideoPreview] Failed to setup stream:', streamError);
          throw streamError;
        }
      }
      
      // For other platforms, use the stream URL (existing logic)
      const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
      const fullStreamUrl = data.streamUrl.startsWith('http') 
        ? data.streamUrl 
        : `${baseUrl}${data.streamUrl}`;
      
      const previewData: VideoPreviewData = {
        videoId,
        platform,
        previewUrl: fullStreamUrl,
        previewBlob: null,
        audioUrl: null,
        audioBlob: null,
        loading: false,
        error: null
      };
      
      console.log('[VideoPreview] Created preview data:', previewData);

      // Update state and cache
      previewCache.set(cacheKey, previewData);
      if (isMountedRef.current) {
        setPreviews(prev => new Map(prev).set(cacheKey, previewData));
      }

      return previewData;
    } catch (error) {
      // Check if request was aborted
      if (error instanceof Error && error.name === 'AbortError') {
        console.log('[VideoPreview] Request aborted for:', videoId);
        // Don't update state for aborted requests
        return undefined;
      }
      
      const errorData: VideoPreviewData = {
        videoId,
        platform,
        previewUrl: null,
        previewBlob: null,
        audioUrl: null,
        audioBlob: null,
        loading: false,
        error: error instanceof Error ? error.message : 'Failed to generate preview'
      };
      
      if (isMountedRef.current) {
        setPreviews(prev => new Map(prev).set(cacheKey, errorData));
      }
      return errorData;
    } finally {
      loadingRef.current.delete(cacheKey);
      abortControllersRef.current.delete(cacheKey);
    }
  }, [previews]);

  const generateMultiplePreviews = useCallback(async (
    videos: Array<{id: string, url?: string}>,
    platform: 'tiktok' | 'youtube' | 'twitch'
  ) => {
    setPreviewsLoading(true);
    try {
      // Generate previews in parallel
      await Promise.all(
        videos.map(video => 
          generatePreview(video.id, platform, video.url)
        )
      );
    } finally {
      setPreviewsLoading(false);
    }
  }, [generatePreview]);

  const getPreview = useCallback((videoId: string, platform: 'tiktok' | 'youtube' | 'twitch') => {
    const cacheKey = `${platform}-${videoId}`;
    return previews.get(cacheKey) || previewCache.get(cacheKey);
  }, [previews]);

  const extractAudio = useCallback(async (
    videoId: string,
    platform: 'tiktok' | 'youtube' | 'twitch',
    format: string = 'mp3'
  ) => {
    const cacheKey = `${platform}-${videoId}`;
    
    // Get existing preview data
    const existingPreview = previews.get(cacheKey) || previewCache.get(cacheKey);
    if (!existingPreview) {
      console.error('[VideoPreview] No preview data found for', videoId);
      return;
    }
    
    // Check if audio already extracted
    if (existingPreview.audioUrl) {
      console.log('[VideoPreview] Audio already extracted for', videoId);
      return;
    }
    
    try {
      console.log('[VideoPreview] Extracting audio for', videoId, 'in', format, 'format');
      
      // Currently only TikTok has audio extraction endpoint
      if (platform !== 'tiktok') {
        throw new Error(`Audio extraction not available for ${platform} yet`);
      }
      
      // Use the audio extraction endpoint
      const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
      const audioUrl = `${baseUrl}/api/public/tiktok/audio/${videoId}?format=${format}&user_id=preview-user`;
      
      // Download audio as blob
      const audioResponse = await fetch(audioUrl);
      
      if (!audioResponse.ok) {
        throw new Error(`Failed to extract audio: ${audioResponse.status}`);
      }
      
      // Get audio as blob
      const audioBlob = await audioResponse.blob();
      console.log('[VideoPreview] Downloaded audio blob, size:', audioBlob.size);
      
      // Create blob URL for audio
      const audioBlobUrl = URL.createObjectURL(audioBlob);
      console.log('[VideoPreview] Created audio blob URL:', audioBlobUrl);
      
      // Update preview data with audio
      const updatedPreview: VideoPreviewData = {
        ...existingPreview,
        audioUrl: audioBlobUrl,
        audioBlob: audioBlob
      };
      
      // Update state and cache
      previewCache.set(cacheKey, updatedPreview);
      if (isMountedRef.current) {
        setPreviews(prev => new Map(prev).set(cacheKey, updatedPreview));
      }
      
      console.log('[VideoPreview] Audio extraction complete for', videoId);
      
    } catch (error) {
      console.error('[VideoPreview] Failed to extract audio:', error);
      
      // Update preview with error state
      const errorPreview: VideoPreviewData = {
        ...existingPreview,
        error: error instanceof Error ? error.message : 'Failed to extract audio'
      };
      
      if (isMountedRef.current) {
        setPreviews(prev => new Map(prev).set(cacheKey, errorPreview));
      }
    }
  }, [previews]);

  const cancelPreview = useCallback((videoId: string, platform: 'tiktok' | 'youtube' | 'twitch') => {
    const cacheKey = `${platform}-${videoId}`;
    const controller = abortControllersRef.current.get(cacheKey);
    if (controller) {
      console.log('[VideoPreview] Cancelling preview request for:', cacheKey);
      controller.abort();
      abortControllersRef.current.delete(cacheKey);
      loadingRef.current.delete(cacheKey);
      
      // Reset loading state for this specific preview
      if (isMountedRef.current) {
        setPreviews(prev => {
          const newPreviews = new Map(prev);
          const existing = newPreviews.get(cacheKey);
          if (existing && existing.loading) {
            newPreviews.set(cacheKey, {
              ...existing,
              loading: false,
              error: 'Request cancelled'
            });
          }
          return newPreviews;
        });
      }
    }
  }, []);

  const clearCache = useCallback(() => {
    // Cancel all ongoing requests
    abortControllersRef.current.forEach((controller, key) => {
      console.log('[VideoPreview] Cancelling request for:', key);
      controller.abort();
    });
    abortControllersRef.current.clear();
    
    // Clean up blob URLs using ref instead of state
    previewsRef.current.forEach((preview) => {
      if (preview.previewUrl && preview.previewUrl.startsWith('blob:')) {
        console.log('[VideoPreview] Revoking video blob URL:', preview.previewUrl);
        URL.revokeObjectURL(preview.previewUrl);
      }
      if (preview.audioUrl && preview.audioUrl.startsWith('blob:')) {
        console.log('[VideoPreview] Revoking audio blob URL:', preview.audioUrl);
        URL.revokeObjectURL(preview.audioUrl);
      }
    });
    
    previewCache.clear();
    if (isMountedRef.current) {
      setPreviews(new Map());
    }
    loadingRef.current.clear();
  }, []); // No dependencies - uses refs instead

  // Cleanup on unmount
  React.useEffect(() => {
    return () => {
      console.log('[VideoPreview] Cleaning up on unmount');
      isMountedRef.current = false;
      
      // Cancel all ongoing requests
      abortControllersRef.current.forEach((controller) => {
        controller.abort();
      });
      abortControllersRef.current.clear();
      
      // Clean up blob URLs using ref instead of state
      previewsRef.current.forEach((preview) => {
        if (preview.previewUrl && preview.previewUrl.startsWith('blob:')) {
          URL.revokeObjectURL(preview.previewUrl);
        }
        if (preview.audioUrl && preview.audioUrl.startsWith('blob:')) {
          URL.revokeObjectURL(preview.audioUrl);
        }
      });
    };
  }, []); // Empty deps - only run on unmount

  return (
    <VideoPreviewContext.Provider value={{
      previews,
      generatePreview,
      generateMultiplePreviews,
      getPreview,
      extractAudio,
      cancelPreview,
      clearCache,
      previewsLoading
    }}>
      {children}
    </VideoPreviewContext.Provider>
  );
}

export function useVideoPreviewContext() {
  const context = useContext(VideoPreviewContext);
  if (!context) {
    throw new Error('useVideoPreviewContext must be used within VideoPreviewProvider');
  }
  return context;
}


================================================
FILE: src/hooks/use-api-client.ts
================================================
import { useState, useCallback } from 'react';
import { startCall as apiStartCall } from '@/lib/api';
import { StartCallRequest, StartCallResponse } from '@/types';
import { useApiErrorHandler } from './useApiErrorHandler';

export function useApiClient() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { handleError } = useApiErrorHandler();

  const startCall = useCallback(async (data: StartCallRequest): Promise<StartCallResponse | null> => {
    console.log('[Hook] useApiClient.startCall called with', data);
    setLoading(true);
    setError(null);
    
    try {
      const response = await apiStartCall(data);
      console.log('[Hook] Call started successfully', response);
      return response;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';
      console.error('[Hook] Failed to start call', { error: err, message: errorMessage });
      setError(errorMessage);
      handleError(err);
      return null;
    } finally {
      setLoading(false);
    }
  }, [handleError]);

  return {
    startCall,
    loading,
    error,
  };
}


================================================
FILE: src/hooks/useApiErrorHandler.ts
================================================
import { useCallback } from 'react';
import { toast } from 'sonner';

export function useApiErrorHandler() {
  const handleError = useCallback((error: any) => {
    console.error('[API Error]', error);

    // Check if it's a 401 Unauthorized error
    if (error.status === 401 || error.message?.includes('401')) {
      toast.error('Authentication Required', {
        description: 'Please sign in to continue'
      });
      return;
    }

    // Check for rate limit errors
    if (error.status === 429 || error.message?.includes('rate limit')) {
      toast.error('Too Many Requests', {
        description: 'Please wait a moment before trying again',
      });
      return;
    }

    // Check for network errors
    if (error.message?.includes('Failed to fetch') || error.message?.includes('Network')) {
      toast.error('Connection Error', {
        description: 'Please check your internet connection and try again',
      });
      return;
    }

    // Generic error handler
    toast.error('Something went wrong', {
      description: error.message || 'An unexpected error occurred',
    });
  }, []);

  return { handleError };
}


================================================
FILE: src/hooks/useBulkProcessing.ts
================================================
import { useState, useCallback, useRef } from 'react';
import { BulkOnboardingState, ProcessingJob } from '@/components/onboarding/bulk/types';

interface BulkProcessingOptions {
  platform: string;
  inputMethod: string;
  channelUrl?: string;
  pastedUrls?: string[];
  selectedContent: string[];
  uploadedDocuments?: any[];
  embeddingModel: any;
  vectorDb: any;
  bulkSettings: {
    chunkSize: number;
    chunkOverlap: number;
    maxTokens: number;
  };
}

interface ExportOptions {
  format: 'json' | 'csv' | 'parquet' | 'vector';
  jobId: string;
}

interface DownloadProgress {
  jobId: string;
  progress: number;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  downloadUrl?: string;
  filename?: string;
  fileSize?: number;
}

export function useBulkProcessing() {
  const [isProcessing, setIsProcessing] = useState(false);
  const [processProgress, setProcessProgress] = useState(0);
  const [processingJob, setProcessingJob] = useState<ProcessingJob | null>(null);
  const [error, setError] = useState<string | null>(null);
  
  // Export states
  const [isExporting, setIsExporting] = useState(false);
  const [exportProgress, setExportProgress] = useState(0);
  const [downloadProgress, setDownloadProgress] = useState<DownloadProgress | null>(null);
  const [exportHistory, setExportHistory] = useState<any[]>([]);
  
  // WebSocket connection for real-time updates
  const wsRef = useRef<WebSocket | null>(null);
  const activeJobRef = useRef<string | null>(null);
  
  const connectToProgressUpdates = useCallback((jobId: string) => {
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      wsRef.current.close();
    }
    
    const wsUrl = `${process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8000'}/api/public/bulk/ws/bulk-processing/${jobId}`;
    const ws = new WebSocket(wsUrl);
    
    ws.onopen = () => {
      console.log('[useBulkProcessing] Connected to progress updates for job:', jobId);
    };
    
    ws.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        console.log('[useBulkProcessing] Progress update:', data);
        
        if (data.type === 'progress') {
          setProcessProgress(data.progress);
          setProcessingJob(prev => prev ? {
            ...prev,
            progress: data.progress,
            stage: data.stage || prev.stage,
            contentProcessed: data.contentProcessed || prev.contentProcessed,
            embeddings: data.embeddings || prev.embeddings,
            status: data.status || prev.status
          } : null);
        } else if (data.type === 'completed') {
          setIsProcessing(false);
          setProcessProgress(100);
          setProcessingJob(prev => prev ? {
            ...prev,
            status: 'completed',
            progress: 100,
            stage: 'Processing complete!'
          } : null);
          ws.close();
        } else if (data.type === 'error') {
          setIsProcessing(false);
          setError(data.message || 'Processing failed');
          setProcessingJob(prev => prev ? {
            ...prev,
            status: 'failed',
            error: data.message
          } : null);
          ws.close();
        }
      } catch (e) {
        console.error('[useBulkProcessing] Error parsing progress update:', e);
      }
    };
    
    ws.onclose = () => {
      console.log('[useBulkProcessing] Disconnected from progress updates');
    };
    
    ws.onerror = (error) => {
      console.error('[useBulkProcessing] WebSocket error:', error);
    };
    
    wsRef.current = ws;
    activeJobRef.current = jobId;
  }, []);
  
  const startBulkProcessing = useCallback(async (options: BulkProcessingOptions) => {
    try {
      setIsProcessing(true);
      setProcessProgress(0);
      setError(null);
      
      const jobId = `bulk-${Date.now()}`;
      setProcessingJob({
        id: jobId,
        status: 'pending',
        progress: 0,
        stage: 'Initializing...',
        contentProcessed: 0,
        totalContent: options.selectedContent.length,
        embeddings: 0
      });
      
      // Connect to progress updates
      connectToProgressUpdates(jobId);
      
      // Call backend API to start bulk processing
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/bulk/process`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          job_id: jobId,
          platform: options.platform,
          input_method: options.inputMethod,
          channel_url: options.channelUrl,
          pasted_urls: options.pastedUrls,
          selected_content: options.selectedContent,
          uploaded_documents: options.uploadedDocuments,
          embedding_model: {
            id: options.embeddingModel.id,
            label: options.embeddingModel.label,
            dimensions: options.embeddingModel.dimensions,
            max_tokens: options.embeddingModel.maxTokens,
            // Add Jina V4 specific fields if this is a Jina V4 model
            ...(options.embeddingModel.id === 'jina-v4' && {
              jina_v4_task: options.bulkSettings.transcriptProcessing?.task || 'retrieval.passage',
              jina_v4_dimensions: options.bulkSettings.transcriptProcessing?.dimensions || options.embeddingModel.dimensions,
              jina_v4_late_chunking: options.bulkSettings.transcriptProcessing?.lateChunking ?? true,
              jina_v4_multi_vector: options.bulkSettings.transcriptProcessing?.multiVector ?? false,
              jina_v4_optimize_for_rag: options.bulkSettings.transcriptProcessing?.optimizeForRag ?? true,
              jina_v4_truncate_at_max: true
            })
          },
          vector_db: {
            id: options.vectorDb.id,
            label: options.vectorDb.label
          },
          settings: options.bulkSettings
        }),
      });
      
      if (!response.ok) {
        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        try {
          const errorData = await response.json();
          errorMessage = errorData.detail || errorData.message || errorMessage;
        } catch (jsonError) {
          // If response isn't JSON, use status text
          console.warn('[useBulkProcessing] Error response is not JSON:', jsonError);
        }
        throw new Error(errorMessage);
      }
      
      const result = await response.json();
      console.log('[useBulkProcessing] Bulk processing started:', result);
      
    } catch (error) {
      console.error('[useBulkProcessing] Error starting bulk processing:', error);
      
      // Better error message extraction
      let errorMessage = 'Failed to start processing';
      if (error instanceof Error) {
        errorMessage = error.message;
      } else if (typeof error === 'string') {
        errorMessage = error;
      } else if (error && typeof error === 'object') {
        errorMessage = JSON.stringify(error);
      }
      
      setError(errorMessage);
      setIsProcessing(false);
      setProcessingJob(prev => prev ? {
        ...prev,
        status: 'failed',
        error: errorMessage
      } : null);
    }
  }, [connectToProgressUpdates]);
  
  const exportResults = useCallback(async (options: ExportOptions) => {
    try {
      setIsExporting(true);
      setExportProgress(0);
      setError(null);
      
      // Call backend API to start export
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/bulk/export`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          job_id: options.jobId,
          format: options.format,
          export_id: `export-${Date.now()}`
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Failed to start export');
      }
      
      const result = await response.json();
      console.log('[useBulkProcessing] Export started:', result);
      
      // Monitor export progress
      const exportId = result.export_id;
      const pollProgress = async () => {
        try {
          const progressResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/bulk/export/${exportId}/status`);
          
          if (progressResponse.ok) {
            const progressData = await progressResponse.json();
            setExportProgress(progressData.progress);
            
            if (progressData.status === 'completed') {
              setIsExporting(false);
              setDownloadProgress({
                jobId: exportId,
                progress: 100,
                status: 'completed',
                downloadUrl: progressData.download_url,
                filename: progressData.filename,
                fileSize: progressData.file_size
              });
              
              // Add to export history
              setExportHistory(prev => [...prev, {
                id: exportId,
                jobId: options.jobId,
                format: options.format,
                filename: progressData.filename,
                fileSize: progressData.file_size,
                downloadUrl: progressData.download_url,
                createdAt: new Date().toISOString(),
                status: 'completed'
              }]);
            } else if (progressData.status === 'failed') {
              setIsExporting(false);
              setError(progressData.error || 'Export failed');
            } else {
              // Continue polling
              setTimeout(pollProgress, 2000);
            }
          }
        } catch (e) {
          console.error('[useBulkProcessing] Error polling export progress:', e);
        }
      };
      
      // Start polling after a delay
      setTimeout(pollProgress, 1000);
      
    } catch (error) {
      console.error('[useBulkProcessing] Error starting export:', error);
      setError(error instanceof Error ? error.message : 'Failed to start export');
      setIsExporting(false);
    }
  }, []);
  
  const downloadFile = useCallback(async (downloadUrl: string, filename: string) => {
    try {
      // Ensure the download URL is absolute and points to the backend
      const backendUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
      const absoluteDownloadUrl = downloadUrl.startsWith('http') 
        ? downloadUrl 
        : `${backendUrl}${downloadUrl}`;
      
      console.log('[useBulkProcessing] Downloading from:', absoluteDownloadUrl);
      
      const response = await fetch(absoluteDownloadUrl);
      if (!response.ok) {
        throw new Error('Failed to download file');
      }
      
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
    } catch (error) {
      console.error('[useBulkProcessing] Error downloading file:', error);
      setError(error instanceof Error ? error.message : 'Failed to download file');
    }
  }, []);
  
  const getJobStatus = useCallback(async (jobId: string) => {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/bulk/job/${jobId}/status`);
      
      if (response.ok) {
        const data = await response.json();
        return data;
      }
      
      return null;
    } catch (error) {
      console.error('[useBulkProcessing] Error getting job status:', error);
      return null;
    }
  }, []);
  
  const cleanup = useCallback(() => {
    if (wsRef.current) {
      wsRef.current.close();
      wsRef.current = null;
    }
    activeJobRef.current = null;
    setIsProcessing(false);
    setProcessProgress(0);
    setProcessingJob(null);
    setIsExporting(false);
    setExportProgress(0);
    setDownloadProgress(null);
    setError(null);
  }, []);
  
  return {
    // Processing states
    isProcessing,
    processProgress,
    processingJob,
    error,
    
    // Export states
    isExporting,
    exportProgress,
    downloadProgress,
    exportHistory,
    
    // Actions
    startBulkProcessing,
    exportResults,
    downloadFile,
    getJobStatus,
    cleanup,
    
    // WebSocket management
    connectToProgressUpdates
  };
}


================================================
FILE: src/hooks/useConvexErrorHandler.ts
================================================
import { useCallback } from 'react';
import { useApiErrorHandler } from './useApiErrorHandler';

export function useConvexErrorHandler() {
  const { handleError } = useApiErrorHandler();

  const handleConvexError = useCallback((error: any) => {
    // Convex errors might have different structure
    // Check if it's an authentication error
    if (error.message?.includes('Unauthorized') || 
        error.message?.includes('401') ||
        error.message?.includes('authentication') ||
        error.message?.includes('unauthenticated')) {
      // Create a proper error object with status
      const authError = new Error(error.message);
      (authError as any).status = 401;
      handleError(authError);
      return;
    }

    // Handle rate limit errors
    if (error.message?.includes('rate limit') || 
        error.message?.includes('too many requests')) {
      const rateLimitError = new Error(error.message);
      (rateLimitError as any).status = 429;
      handleError(rateLimitError);
      return;
    }

    // Pass through other errors
    handleError(error);
  }, [handleError]);

  return { handleConvexError };
}


================================================
FILE: src/hooks/useEmbeddingModels.ts
================================================
import { useState, useEffect } from 'react';
import { EmbeddingModel } from '@/components/onboarding/bulk/types';

interface UseEmbeddingModelsReturn {
  models: EmbeddingModel[];
  isLoading: boolean;
  error: Error | null;
  refetch: () => Promise<void>;
}

export function useEmbeddingModels(): UseEmbeddingModelsReturn {
  const [models, setModels] = useState<EmbeddingModel[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  const fetchModels = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
      console.log('API URL:', apiUrl);
      const fullUrl = `${apiUrl}/api/public/embedding-models/`;
      console.log('Full URL:', fullUrl);
      
      const response = await fetch(fullUrl);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch embedding models: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Transform API response to match EmbeddingModel interface
      const transformedModels: EmbeddingModel[] = data.map((model: any) => ({
        id: model.id,
        label: model.label,
        Icon: null, // Will be set in the component
        color: model.color,
        tooltip: model.description,
        dimensions: model.dimensions,
        maxTokens: model.maxTokens,
        description: model.description,
        githubStars: model.githubStars,
        parameters: model.parameters,
        mtebScore: model.mtebScore
      }));
      
      setModels(transformedModels);
    } catch (err) {
      console.error('Error fetching embedding models:', err);
      setError(err instanceof Error ? err : new Error('Unknown error'));
      
      // Fallback to static data if API fails
      setModels([
        {
          id: 'jina-v4',
          label: 'JINA EMBEDDER V4',
          Icon: null,
          color: 'bg-purple-600',
          tooltip: 'Latest Jina AI multimodal embedding model with 3.8B parameters',
          dimensions: 1024,
          maxTokens: 8192,
          description: 'State-of-the-art multimodal embedding model with 3.8B parameters. Supports 100+ languages, text, images, and code with superior MTEB performance (64.41 avg score).',
          githubStars: 2847,
          parameters: '3.8B',
          mtebScore: 64.41
        },
        {
          id: 'gemini-embedding-exp',
          label: 'GEMINI EMBEDDING EXP',
          Icon: null,
          color: 'bg-blue-600',
          tooltip: 'State-of-the-art experimental embedding model with SOTA MTEB performance',
          dimensions: 3072,
          maxTokens: 8192,
          description: 'State-of-the-art experimental embedding model with SOTA MTEB performance. Features 8K context, MRL support, and 100+ languages.',
          githubStars: null,
          parameters: 'Gemini-trained',
          mtebScore: 68.32
        },
        {
          id: 'openai-ada-002',
          label: 'OPENAI ADA-002',
          Icon: null,
          color: 'bg-green-600',
          tooltip: 'OpenAI\'s text-embedding-ada-002 model',
          dimensions: 1536,
          maxTokens: 8191,
          description: 'Reliable and widely-used embedding model from OpenAI. Great for general-purpose semantic search and content similarity tasks.',
          githubStars: null,
          parameters: 'Undisclosed',
          mtebScore: 60.9
        },
        {
          id: 'custom-model',
          label: 'CUSTOM MODEL',
          Icon: null,
          color: 'bg-gray-600',
          tooltip: 'Use your own embedding model or API endpoint',
          dimensions: 0,
          maxTokens: 0,
          description: 'Configure your own embedding model endpoint. Supports any model that follows the standard embedding API format.',
          githubStars: null,
          parameters: 'Variable',
          mtebScore: null
        }
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchModels();
  }, []);

  return {
    models,
    isLoading,
    error,
    refetch: fetchModels
  };
}


================================================
FILE: src/hooks/useHunterSearch.ts
================================================
'use client';

import { useQuery } from 'convex/react';
import { api } from '@convex/_generated/api';
import { useEffect, useState } from 'react';
import { useConvexErrorHandler } from './useConvexErrorHandler';

interface SearchWorkflow {
  id: string;
  searchId?: string;
  name: string;
  status: 'idle' | 'searching' | 'scraping' | 'analyzing' | 'validating' | 'completed' | 'failed';
  progress: number;
  currentStage?: string;
  parameters: {
    location: string;
    businessType: string;
    keywords: string[];
    includeLinkedIn: boolean;
    searchDepth: number;
  };
  stats: {
    pagesFound: number;
    pagesScraped: number;
    businessesExtracted: number;
    businessesValidated: number;
    matchRate: number;
  };
  createdAt: string;
  completedAt?: string;
  estimatedTime?: string;
}

// Map backend status to frontend status
const mapBackendStatus = (status: string): SearchWorkflow['status'] => {
  const statusMap: Record<string, SearchWorkflow['status']> = {
    'pending': 'idle',
    'initializing': 'searching',
    'processing': 'analyzing',
    'completed': 'completed',
    'failed': 'failed'
  };
  return statusMap[status] || 'searching';
};

// Map progress to stage
const getStageFromProgress = (progress: number): SearchWorkflow['status'] => {
  if (progress === 0) return 'idle';
  if (progress < 25) return 'searching';
  if (progress < 50) return 'scraping';
  if (progress < 75) return 'analyzing';
  if (progress < 100) return 'validating';
  return 'completed';
};

export function useHunterSearches(userId: string) {
  const [searches, setSearches] = useState<SearchWorkflow[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  
  // Get user's search history with stats
  const searchHistory = useQuery(api.hunterQueries.getUserSearchesForHunter, { 
    userId,
    includeStats: true 
  });
  
  // Get dashboard data for statistics
  const dashboardData = useQuery(api.hunterQueries.getUserDashboardData, { userId });

  useEffect(() => {
    if (!searchHistory) {
      setIsLoading(true);
      return;
    }

    // Convert backend searches to frontend format
    const convertedSearches: SearchWorkflow[] = searchHistory.map((search: any) => ({
      id: search.searchId,
      searchId: search.searchId, // Include searchId for actions
      name: search.searchName || 'Untitled Search',
      status: search.progress >= 100 ? 'completed' : getStageFromProgress(search.progress || 0),
      progress: search.progress || 0,
      currentStage: search.currentStage || '',
      parameters: {
        location: search.location || 'Unknown',
        businessType: search.industry || 'Unknown',
        keywords: search.keywords ? search.keywords.split(',').map((k: string) => k.trim()) : [],
        includeLinkedIn: search.includeLinkedIn || false,
        searchDepth: 3 // Default value
      },
      stats: {
        pagesFound: 0, // These will be updated from search results
        pagesScraped: 0,
        businessesExtracted: search.totalLeads || 0,
        businessesValidated: search.verifiedEmails || 0,
        matchRate: search.totalLeads > 0 ? 
          Math.round((search.verifiedEmails / search.totalLeads) * 100) : 0
      },
      createdAt: search.createdAt,
      completedAt: search.completedAt,
      estimatedTime: search.status === 'processing' ? 
        `${Math.max(1, Math.round((100 - search.progress) / 2))} min remaining` : undefined
    }));

    setSearches(convertedSearches);
    setIsLoading(false);
  }, [searchHistory]);

  // Poll for updates on active searches
  useEffect(() => {
    const activeSearches = searches.filter(s => 
      s.status !== 'completed' && s.status !== 'failed'
    );
    
    if (activeSearches.length === 0) return;

    // Poll every 3 seconds for active searches
    const interval = setInterval(() => {
      // Trigger a refetch by updating a dummy state
      // This will cause Convex to re-query
      setSearches(prev => [...prev]);
    }, 3000);

    return () => clearInterval(interval);
  }, [searches]);

  return {
    searches,
    isLoading,
    stats: dashboardData?.stats || {
      totalSearches: 0,
      activeSearches: 0,
      totalLeadsThisMonth: 0,
      searchesToday: 0
    }
  };
}

export function useHunterSearch(searchId: string) {
  const search = useQuery(api.hunterQueries.getLeadSearch, { searchId });
  const [pollingEnabled, setPollingEnabled] = useState(true);

  useEffect(() => {
    if (!search) return;
    
    // Stop polling if search is completed or failed
    if (search.status === 'completed' || search.status === 'failed') {
      setPollingEnabled(false);
    }
  }, [search]);

  // Poll for updates if search is active
  useEffect(() => {
    if (!pollingEnabled) return;

    const interval = setInterval(() => {
      // Force re-query by updating state
      // Convex will automatically refetch
    }, 2000);

    return () => clearInterval(interval);
  }, [pollingEnabled]);

  return {
    search,
    isLoading: !search,
    progress: search?.progress || 0,
    status: search?.status || 'pending',
    currentStage: search?.currentStage || ''
  };
}


================================================
FILE: src/hooks/useInstagramContent.ts
================================================
import { useState, useEffect, useCallback } from 'react';
import * as React from 'react';
import { useQuery, useMutation, useAction } from 'convex/react';
import { api } from '@convex/_generated/api';
import { v4 as uuidv4 } from 'uuid';

interface InstagramUser {
  username: string;
  userId: string;
  fullName?: string;
  biography?: string;
  profilePicUrl?: string;
  isVerified?: boolean;
  isPrivate?: boolean;
  followerCount?: number;
  followingCount?: number;
  postCount?: number;
  externalUrl?: string;
}

interface InstagramPost {
  postId: string;
  username: string;
  caption?: string;
  mediaType: string; // 'image', 'video', 'carousel'
  thumbnail?: string;
  mediaUrl?: string;
  likeCount: number;
  commentCount: number;
  timestamp: number;
  location?: string;
  isVideo: boolean;
  videoDuration?: number;
  carouselMediaCount?: number;
}

interface UseInstagramContentReturn {
  // User data
  user: InstagramUser | null;
  userLoading: boolean;
  userError: string | null;
  userDataComplete: boolean;
  fetchUser: (username: string) => Promise<void>;
  
  // Posts data
  posts: InstagramPost[];
  postsLoading: boolean;
  postsError: string | null;
  fetchPosts: (username: string, count?: number) => Promise<void>;
  
  // Download functionality
  downloadPosts: (postIds: string[]) => Promise<void>;
  downloadProgress: number;
  downloadStatus: string | null;
  
  // Cleanup
  cleanup: () => Promise<void>;
  
  // Rate limiting
  canFetchUser: boolean;
  canFetchPosts: boolean;
  canDownloadPosts: boolean;
  rateLimitInfo: {
    fetch_user: { remaining: number; resetAt: number };
    fetch_posts: { remaining: number; resetAt: number };
    download_posts: { remaining: number; resetAt: number };
  } | null;
}

export function useInstagramContent(): UseInstagramContentReturn {
  const [user, setUser] = useState<InstagramUser | null>(null);
  const [userLoading, setUserLoading] = useState(false);
  const [userError, setUserError] = useState<string | null>(null);
  const [usernameFromJob, setUsernameFromJob] = useState<string | null>(null);
  
  const [posts, setPosts] = useState<InstagramPost[]>([]);
  const [postsLoading, setPostsLoading] = useState(false);
  const [postsError, setPostsError] = useState<string | null>(null);
  
  const [downloadProgress, setDownloadProgress] = useState(0);
  const [downloadStatus, setDownloadStatus] = useState<string | null>(null);
  
  const [activeJobs, setActiveJobs] = useState<{
    user?: string;
    posts?: string;
    download?: string;
  }>({});
  
  // Get current user ID (in production, get from auth)
  const userId = 'user123'; // TODO: Get from auth context
  
  // Convex actions for API calls
  const createUserFetchJob = useAction(api.actions.instagramContent.createUserFetchJob);
  const createPostsFetchJob = useAction(api.actions.instagramContent.createPostsFetchJob);
  const createDownloadJob = useAction(api.actions.instagramContent.createDownloadJob);
  
  // Convex mutations for database operations
  const cleanupMutation = useMutation(api.mutations.instagramContent.cleanup);
  
  // Track if we've already attempted to fetch posts for this user
  const fetchedUsernamesRef = React.useRef<Set<string>>(new Set());
  
  // Check cached data
  const queryUsername = user?.username || usernameFromJob;
  
  const cachedUser = useQuery(
    api.queries.instagramContent.getCachedUser,
    queryUsername ? { username: queryUsername } : 'skip'
  );
  
  const cachedPosts = useQuery(
    api.queries.instagramContent.getCachedPosts,
    queryUsername ? { username: queryUsername } : 'skip'
  );
  
  // Query active jobs
  const userJob = useQuery(
    api.queries.instagramContent.getJob,
    activeJobs.user ? { jobId: activeJobs.user } : 'skip'
  );
  
  const postsJob = useQuery(
    api.queries.instagramContent.getJob,
    activeJobs.posts ? { jobId: activeJobs.posts } : 'skip'
  );
  
  const downloadJob = useQuery(
    api.queries.instagramContent.getJob,
    activeJobs.download ? { jobId: activeJobs.download } : 'skip'
  );
  
  // Check rate limits
  const userRateLimit = useQuery(
    api.queries.instagramContent.checkRateLimit,
    { userId, action: 'fetch_user' }
  );
  
  const postsRateLimit = useQuery(
    api.queries.instagramContent.checkRateLimit,
    { userId, action: 'fetch_posts' }
  );
  
  const downloadRateLimit = useQuery(
    api.queries.instagramContent.checkRateLimit,
    { userId, action: 'download_posts' }
  );
  
  // Update user from cache
  useEffect(() => {
    if (cachedUser && !userLoading) {
      console.log('[Instagram] Setting user from cache:', cachedUser);
      setUser(cachedUser.user);
      setUserError(null);
    }
  }, [cachedUser, userLoading]);
  
  // Update posts from cache
  useEffect(() => {
    if (cachedPosts && !postsLoading) {
      console.log('[Instagram] Setting posts from cache:', cachedPosts.posts?.length || 0, 'posts');
      setPosts(cachedPosts.posts || []);
      setPostsError(null);
    }
  }, [cachedPosts, postsLoading]);
  
  // Handle user job updates
  useEffect(() => {
    if (userJob) {
      console.log('[Instagram] User job update:', userJob.status);
      
      if (userJob.status === 'completed') {
        setUserLoading(false);
        setUserError(null);
        
        // Store username for post queries
        if (userJob.username) {
          let cleanUsername = userJob.username;
          // Extract username from URL if needed
          if (cleanUsername.includes('instagram.com')) {
            const match = cleanUsername.match(/instagram\.com\/([^/?]+)/);
            if (match) {
              cleanUsername = match[1];
            }
          }
          console.log('[Instagram] Setting username from job:', cleanUsername);
          setUsernameFromJob(cleanUsername);
        }
        
        // Remove job from active jobs
        setActiveJobs(prev => ({
          ...prev,
          user: undefined
        }));
      } else if (userJob.status === 'failed') {
        setUserLoading(false);
        setUserError(userJob.error || 'Failed to fetch user');
        setActiveJobs(prev => ({
          ...prev,
          user: undefined
        }));
      }
    }
  }, [userJob]);
  
  // Handle posts job updates
  useEffect(() => {
    if (postsJob) {
      console.log('[Instagram] Posts job update:', postsJob.status);
      
      if (postsJob.status === 'completed') {
        setPostsLoading(false);
        setPostsError(null);
        
        // Remove job from active jobs
        setActiveJobs(prev => ({
          ...prev,
          posts: undefined
        }));
      } else if (postsJob.status === 'failed') {
        setPostsLoading(false);
        setPostsError(postsJob.error || 'Failed to fetch posts');
        setActiveJobs(prev => ({
          ...prev,
          posts: undefined
        }));
      }
    }
  }, [postsJob]);
  
  // Handle download job updates
  useEffect(() => {
    if (downloadJob) {
      console.log('[Instagram] Download job update:', downloadJob.status);
      
      if (downloadJob.status === 'downloading' && downloadJob.progress !== undefined) {
        setDownloadProgress(downloadJob.progress);
        setDownloadStatus(`Downloading posts: ${downloadJob.progress}%`);
      } else if (downloadJob.status === 'completed') {
        setDownloadProgress(100);
        setDownloadStatus('Download completed');
        
        // Remove job from active jobs
        setActiveJobs(prev => ({
          ...prev,
          download: undefined
        }));
      } else if (downloadJob.status === 'failed') {
        setDownloadProgress(0);
        setDownloadStatus(`Download failed: ${downloadJob.error}`);
        setActiveJobs(prev => ({
          ...prev,
          download: undefined
        }));
      }
    }
  }, [downloadJob]);
  
  // Fetch user function
  const fetchUser = useCallback(async (username: string) => {
    try {
      console.log('[Instagram] Fetching user:', username);
      setUserLoading(true);
      setUserError(null);
      
      // Clean username - handle URLs
      let cleanUsername = username.replace('@', '');
      if (cleanUsername.includes('instagram.com')) {
        // Extract username from URL
        const match = cleanUsername.match(/instagram\.com\/([^/?]+)/);
        if (match) {
          cleanUsername = match[1];
        }
      }
      
      // Create job
      const jobId = uuidv4();
      const result = await createUserFetchJob({
        jobId,
        username: cleanUsername,
        userId
      });
      
      console.log('[Instagram] Created user fetch job:', jobId, result);
      
      // Add to active jobs
      setActiveJobs(prev => ({
        ...prev,
        user: jobId
      }));
      
    } catch (error) {
      console.error('[Instagram] Error fetching user:', error);
      setUserError(error instanceof Error ? error.message : 'Failed to fetch user');
      setUserLoading(false);
    }
  }, [createUserFetchJob, userId]);
  
  // Fetch posts function
  const fetchPosts = useCallback(async (username: string, count: number = 12) => {
    try {
      console.log('[Instagram] Fetching posts for user:', username);
      setPostsLoading(true);
      setPostsError(null);
      
      // Clean username
      let cleanUsername = username.replace('@', '');
      if (cleanUsername.includes('instagram.com')) {
        const match = cleanUsername.match(/instagram\.com\/([^/?]+)/);
        if (match) {
          cleanUsername = match[1];
        }
      }
      
      // Create job
      const jobId = uuidv4();
      const result = await createPostsFetchJob({
        jobId,
        username: cleanUsername,
        userId,
        count
      });
      
      console.log('[Instagram] Created posts fetch job:', jobId, result);
      
      // Add to active jobs
      setActiveJobs(prev => ({
        ...prev,
        posts: jobId
      }));
      
    } catch (error) {
      console.error('[Instagram] Error fetching posts:', error);
      setPostsError(error instanceof Error ? error.message : 'Failed to fetch posts');
      setPostsLoading(false);
    }
  }, [createPostsFetchJob, userId]);
  
  // Download posts function
  const downloadPosts = useCallback(async (postIds: string[]) => {
    try {
      console.log('[Instagram] Downloading posts:', postIds.length, 'posts');
      setDownloadProgress(0);
      setDownloadStatus('Starting download...');
      
      // Create job
      const jobId = uuidv4();
      const username = posts[0]?.username || user?.username || '';
      
      const result = await createDownloadJob({
        jobId,
        postIds,
        userId,
        username
      });
      
      console.log('[Instagram] Created download job:', jobId, result);
      
      // Add to active jobs
      setActiveJobs(prev => ({
        ...prev,
        download: jobId
      }));
      
    } catch (error) {
      console.error('[Instagram] Error downloading posts:', error);
      setDownloadStatus(error instanceof Error ? error.message : 'Failed to download posts');
    }
  }, [createDownloadJob, userId, posts, user]);
  
  // Check if user data is complete
  const userDataComplete = React.useMemo(() => {
    if (!user) return false;
    return !!(user.username);
  }, [user]);
  
  // Auto-fetch Instagram posts when user is loaded
  useEffect(() => {
    console.log('[Instagram] Auto-fetch check:', {
      hasUser: !!user,
      userDataComplete,
      postsLoading,
      postsLength: posts.length,
      username: user?.username
    });
    
    if (user && userDataComplete && !postsLoading) {
      const username = user.username;
      
      // Only fetch if we haven't already fetched for this user
      if (!fetchedUsernamesRef.current.has(username) && posts.length === 0) {
        console.log('[Instagram] Auto-fetching posts for user:', username);
        fetchedUsernamesRef.current.add(username);
        fetchPosts(username);
      }
    }
  }, [user, userDataComplete, postsLoading, posts.length, fetchPosts]);
  
  // Cleanup function
  const cleanup = useCallback(async () => {
    try {
      const username = user?.username || usernameFromJob;
      console.log('[Instagram] Cleaning up data for user:', userId, 'username:', username);
      
      // Call cleanup mutation with username if available
      const result = await cleanupMutation({ 
        userId,
        username: username || undefined
      });
      
      console.log('[Instagram] Cleanup result:', result);
      
      // Reset state
      setUser(null);
      setPosts([]);
      setUserLoading(false);
      setPostsLoading(false);
      setUserError(null);
      setPostsError(null);
      setDownloadProgress(0);
      setDownloadStatus(null);
      setActiveJobs({});
      setUsernameFromJob(null);
      fetchedUsernamesRef.current.clear();
      
      console.log('[Instagram] Cleanup completed');
    } catch (error) {
      console.error('[Instagram] Error during cleanup:', error);
    }
  }, [cleanupMutation, userId, user, usernameFromJob]);
  
  return {
    // User data
    user,
    userLoading,
    userError,
    userDataComplete,
    fetchUser,
    
    // Posts data
    posts,
    postsLoading,
    postsError,
    fetchPosts,
    
    // Download functionality
    downloadPosts,
    downloadProgress,
    downloadStatus,
    
    // Cleanup
    cleanup,
    
    // Rate limiting
    canFetchUser: userRateLimit?.canCreate ?? true,
    canFetchPosts: postsRateLimit?.canCreate ?? true,
    canDownloadPosts: downloadRateLimit?.canCreate ?? true,
    rateLimitInfo: userRateLimit && postsRateLimit && downloadRateLimit ? {
      fetch_user: {
        remaining: userRateLimit.remaining,
        resetAt: userRateLimit.resetAt,
      },
      fetch_posts: {
        remaining: postsRateLimit.remaining,
        resetAt: postsRateLimit.resetAt,
      },
      download_posts: {
        remaining: downloadRateLimit.remaining,
        resetAt: downloadRateLimit.resetAt,
      },
    } : null,
  };
}


================================================
FILE: src/hooks/useRAGWorkflow.ts
================================================
import { useState, useCallback, useEffect } from 'react';
import { useQuery, useMutation, useAction } from 'convex/react';
import { api } from '@convex/_generated/api';

interface UseRAGWorkflowOptions {
  userId: string;
  onComplete?: (workflowId: string) => void;
  onError?: (error: Error) => void;
}

export function useRAGWorkflow({ userId, onComplete, onError }: UseRAGWorkflowOptions) {
  const [workflowId, setWorkflowId] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [status, setStatus] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  // Convex hooks
  const createWorkflow = useMutation(api.ragMutations.createWorkflow);
  const addSource = useMutation(api.ragMutations.addSourceToWorkflow);
  const processWorkflow = useAction(api.ragActions.processRAGWorkflow);
  const exportEmbeddings = useAction(api.ragActions.exportEmbeddings);
  
  // Query workflow status
  const workflowData = useQuery(
    api.ragQueries.getWorkflow,
    workflowId ? { workflowId, userId } : "skip"
  );
  
  const userWorkflows = useQuery(api.ragQueries.getUserWorkflows, { userId });
  const workflowStats = useQuery(api.ragQueries.getWorkflowProcessingStats, { userId });

  // Update progress when workflow data changes
  useEffect(() => {
    if (workflowData) {
      setProgress(workflowData.progress);
      setStatus(workflowData.currentStage || workflowData.status);
      
      if (workflowData.status === 'completed' && onComplete) {
        onComplete(workflowData.workflowId);
      } else if (workflowData.status === 'failed') {
        const error = new Error(workflowData.error || 'Workflow processing failed');
        setError(error.message);
        if (onError) onError(error);
      }
    }
  }, [workflowData, onComplete, onError]);

  const startWorkflow = useCallback(async (
    name: string,
    sourceType: 'youtube' | 'documents' | 'urls' | 'mixed',
    sources: Array<{ type: 'youtube' | 'document' | 'url'; value: string; metadata?: any }>,
    config: { chunkSize: number; overlap: number; embeddingModel?: string }
  ) => {
    try {
      setIsProcessing(true);
      setError(null);
      
      // Create workflow
      const workflow = await createWorkflow({
        name,
        description: `Processing ${sources.length} sources`,
        sourceType,
        chunkSize: config.chunkSize,
        overlap: config.overlap,
        userId,
      });
      
      setWorkflowId(workflow.workflowId);
      
      // Add sources to workflow
      for (const source of sources) {
        await addSource({
          workflowId: workflow.workflowId,
          source,
          userId,
        });
      }
      
      // Start processing
      await processWorkflow({
        workflowId: workflow.workflowId,
        userId,
        sources,
        config: {
          ...config,
          embeddingModel: config.embeddingModel || 'jina-clip-v2',
        },
      });
      
      return workflow.workflowId;
    } catch (err) {
      const error = err as Error;
      setError(error.message);
      setIsProcessing(false);
      if (onError) onError(error);
      throw error;
    }
  }, [createWorkflow, addSource, processWorkflow, userId, onError]);

  const exportWorkflow = useCallback(async (
    format: 'json' | 'jsonl' | 'csv' | 'parquet' | 'pinecone' | 'weaviate',
    options: { includeMetadata?: boolean; includeChunks?: boolean } = {}
  ) => {
    if (!workflowId) {
      throw new Error('No workflow to export');
    }
    
    try {
      const result = await exportEmbeddings({
        workflowId,
        userId,
        format,
        includeMetadata: options.includeMetadata ?? true,
        includeChunks: options.includeChunks ?? true,
      });
      
      return result;
    } catch (err) {
      const error = err as Error;
      setError(error.message);
      if (onError) onError(error);
      throw error;
    }
  }, [workflowId, userId, exportEmbeddings, onError]);

  const reset = useCallback(() => {
    setWorkflowId(null);
    setIsProcessing(false);
    setProgress(0);
    setStatus('');
    setError(null);
  }, []);

  return {
    // State
    workflowId,
    isProcessing,
    progress,
    status,
    error,
    
    // Data
    workflowData,
    userWorkflows,
    workflowStats,
    
    // Actions
    startWorkflow,
    exportWorkflow,
    reset,
  };
}

// Helper hook for file size validation
export function useRAGFileSizeLimit(userId: string, fileSize: number = 0) {
  const sizeLimit = useQuery(api.ragQueries.checkWorkflowSizeLimit, {
    userId,
    additionalSize: fileSize,
  });
  
  return {
    allowed: sizeLimit?.allowed ?? true,
    error: sizeLimit?.error,
    currentSize: sizeLimit?.currentSize ?? 0,
    maxSize: sizeLimit?.maxSize ?? 0,
    remainingSize: sizeLimit?.remainingSize ?? 0,
    userTier: sizeLimit?.userTier ?? 'free',
  };
}


================================================
FILE: src/hooks/useTikTokContent.ts
================================================
import { useState, useEffect, useCallback } from 'react';
import * as React from 'react';
import { useQuery, useMutation } from 'convex/react';
import { api } from '@convex/_generated/api';
import { v4 as uuidv4 } from 'uuid';

interface TikTokUser {
  username: string;
  userId: string;
  secUid: string;
  nickname?: string;
  avatar?: string;
  signature?: string;
  verified?: boolean;
  followerCount?: number;
  followingCount?: number;
  videoCount?: number;
  heartCount?: number;
  privateAccount?: boolean;
}

interface TikTokVideo {
  videoId: string;
  username: string;
  title: string;
  thumbnail?: string;
  dynamicCover?: string;
  duration: number;
  createTime: number;
  views: number;
  likes: number;
  comments: number;
  shares: number;
  saves: number;
  playAddr?: string;
  downloadAddr?: string;
  musicTitle?: string;
  musicAuthor?: string;
}

interface UseTikTokContentReturn {
  // User data
  user: TikTokUser | null;
  userLoading: boolean;
  userError: string | null;
  userDataComplete: boolean;
  fetchUser: (username: string) => Promise<void>;
  
  // Videos data
  videos: TikTokVideo[];
  videosLoading: boolean;
  videosError: string | null;
  fetchVideos: (username: string) => Promise<void>;
  
  // Download functionality
  downloadVideos: (videoIds: string[]) => Promise<void>;
  downloadProgress: number;
  downloadStatus: string | null;
  
  // Cleanup
  cleanup: () => Promise<any>;
  
  // Rate limiting
  canFetchUser: boolean;
  canFetchVideos: boolean;
  canDownloadVideos: boolean;
  rateLimitInfo: {
    fetch_user: { remaining: number; resetAt: number };
    fetch_videos: { remaining: number; resetAt: number };
    download_videos: { remaining: number; resetAt: number };
  } | null;
}

export function useTikTokContent(initialUsername?: string): UseTikTokContentReturn {
  const [user, setUser] = useState<TikTokUser | null>(null);
  const [userLoading, setUserLoading] = useState(false);
  const [userError, setUserError] = useState<string | null>(null);
  
  const [videos, setVideos] = useState<TikTokVideo[]>([]);
  const [videosLoading, setVideosLoading] = useState(false);
  const [videosError, setVideosError] = useState<string | null>(null);
  const [waitingForCache, setWaitingForCache] = useState(false);
  
  const [downloadProgress, setDownloadProgress] = useState(0);
  const [downloadStatus, setDownloadStatus] = useState<string | null>(null);
  
  const [activeJobs, setActiveJobs] = useState<Set<string>>(new Set());
  const [usernameFromJob, setUsernameFromJob] = useState<string | null>(null);
  
  // Get current user ID (in production, get from auth)
  const userId = 'user123'; // TODO: Get from auth context
  
  // Convex mutations
  const createUserFetchJob = useMutation(api.mutations.tiktokContent.createUserFetchJob);
  const createVideosFetchJob = useMutation(api.mutations.tiktokContent.createVideosFetchJob);
  const createDownloadJob = useMutation(api.mutations.tiktokContent.createDownloadJob);
  const cleanupUserData = useMutation(api.mutations.tiktokContent.cleanupUserData);
  const cleanupAllData = useMutation(api.mutations.tiktokContent.cleanupAllData);
  
  // Track if we've already attempted to fetch videos for this user
  const fetchedUsernamesRef = React.useRef<Set<string>>(new Set());
  
  // Keep track of retry attempts for videos and refresh trigger
  const [cacheRetryCount, setCacheRetryCount] = useState(0);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  
  // Check cached data - use either the username from state or from completed job
  const queryUsername = user?.username || usernameFromJob;
  
  const cachedUser = useQuery(
    api.queries.tiktokContent.getCachedUser,
    queryUsername && !userLoading ? { username: queryUsername } : 'skip'
  );
  
  const cachedVideos = useQuery(
    api.queries.tiktokContent.getCachedVideos,
    queryUsername ? { username: queryUsername, refreshTrigger } : 'skip'
  );
  
  // Check rate limits
  const userRateLimit = useQuery(
    api.queries.tiktokContent.checkRateLimit,
    { userId, action: 'fetch_user' }
  );
  
  const videosRateLimit = useQuery(
    api.queries.tiktokContent.checkRateLimit,
    { userId, action: 'fetch_videos' }
  );
  
  const downloadRateLimit = useQuery(
    api.queries.tiktokContent.checkRateLimit,
    { userId, action: 'download_videos' }
  );
  
  // Monitor active jobs
  const userJobs = useQuery(
    api.queries.tiktokContent.getUserJobs,
    { userId, limit: 10 }
  );
  
  // Load cached data
  useEffect(() => {
    // Don't load cached data while actively fetching new user
    if (cachedUser && !userLoading) {
      console.log('[useTikTokContent] Cached user data:', {
        user: cachedUser.user,
        hasUser: !!cachedUser.user,
        avatar: cachedUser.user?.avatar,
        avatarLength: cachedUser.user?.avatar?.length,
        isStale: cachedUser.isStale,
        queryUsername,
      });
      
      if (cachedUser.user && !cachedUser.isStale) {
        console.log('[useTikTokContent] Setting user from cache:', {
          username: cachedUser.user.username,
          avatar: cachedUser.user.avatar,
          hasAvatar: !!cachedUser.user.avatar,
          followerCount: cachedUser.user.followerCount,
          videoCount: cachedUser.user.videoCount,
          complete: !!(cachedUser.user.username)
        });
        setUser(cachedUser.user);
      }
    }
  }, [cachedUser, userLoading, queryUsername]);
  
  useEffect(() => {
    // Don't load cached data while actively fetching new videos
    if (!videosLoading) {
      console.log('[useTikTokContent] Cached videos query result:', cachedVideos);
      
      if (!cachedVideos) {
        console.log('[useTikTokContent] No cached videos query result yet');
        // If we have a username and we're not already retrying, start retry logic
        if (queryUsername && cacheRetryCount < 3) {
          console.log('[useTikTokContent] Cache is null, retrying...', cacheRetryCount);
          setWaitingForCache(true);
          setTimeout(() => {
            setCacheRetryCount(prev => prev + 1);
          }, 500);
        } else if (cacheRetryCount >= 3) {
          // Stop waiting after max retries
          setWaitingForCache(false);
        }
      } else if (cachedVideos.videos) {
        console.log('[useTikTokContent] Cached videos data:', {
          videos: cachedVideos.videos,
          isStale: cachedVideos.isStale,
          count: cachedVideos.videos.length,
        });
        
        if (cachedVideos.videos.length > 0) {
          console.log('[useTikTokContent] Setting videos from cache:', {
            totalVideos: cachedVideos.videos.length,
            videos: cachedVideos.videos.map((v: any, i: number) => ({
              index: i,
              videoId: v.videoId,
              title: v.title?.substring(0, 50) + '...',
              thumbnail: v.thumbnail,
              thumbnailLength: v.thumbnail?.length,
              thumbnailPreview: v.thumbnail?.substring(0, 100) + '...',
              dynamicCover: v.dynamicCover,
              views: v.views,
              likes: v.likes,
              createTime: new Date(v.createTime * 1000).toISOString()
            }))
          });
          setVideos(cachedVideos.videos);          setCacheRetryCount(0); // Reset retry count on success
          setWaitingForCache(false); // Stop waiting
        } else if (cacheRetryCount < 3 && queryUsername) {
          console.log('[useTikTokContent] Cache returned empty, retrying...', cacheRetryCount);
          // Retry after a delay
          setTimeout(() => {
            setCacheRetryCount(prev => prev + 1);
          }, 500);
        } else {
          console.log('[useTikTokContent] Cache returned empty videos array after retries');
        }
      }
    }
  }, [cachedVideos, videosLoading, queryUsername, cacheRetryCount]);
  
  // Monitor job statuses
  useEffect(() => {
    if (!userJobs) return;
    
    userJobs.forEach(job => {
      if (activeJobs.has(job.jobId)) {
        console.log('[useTikTokContent] Job status update:', {
          jobId: job.jobId,
          action: job.action,
          status: job.status,
          error: job.error,
        });
        
        if (job.status === 'completed') {
          activeJobs.delete(job.jobId);
          setActiveJobs(new Set(activeJobs));
          
          // Update local state based on job type
          if (job.action === 'fetch_user') {
            console.log('[useTikTokContent] User fetch completed');
            console.log('[useTikTokContent] Job result:', job.result);
            console.log('[useTikTokContent] User info from job:', job.result?.userInfo);
            setUserLoading(false);
            setUserError(null);
            // Store the username from the completed job
            if (job.username) {
              let cleanUsername = job.username;
              // Extract username from URL if needed
              if (cleanUsername.startsWith('http')) {
                const match = cleanUsername.match(/tiktok\.com\/@?([^/?]+)/);
                if (match) {
                  cleanUsername = match[1];
                }
              }
              console.log('[useTikTokContent] Setting username from job:', job.username, '-> cleaned:', cleanUsername);
              setUsernameFromJob(cleanUsername);
            }
            // User data will be loaded via cachedUser query
          } else if (job.action === 'fetch_videos') {
            console.log('[useTikTokContent] Videos fetch completed');
            setVideosError(null);
            // Reset cache retry count to trigger fresh retries
            setCacheRetryCount(0);
            // Add a small delay before marking loading as false to ensure Convex has processed the webhook
            setTimeout(() => {
              console.log('[useTikTokContent] Marking videos loading as false after delay');
              setVideosLoading(false);
              // Force query refresh
              setRefreshTrigger(prev => prev + 1);
            }, 500);
          } else if (job.action === 'download_videos') {
            setDownloadProgress(100);
            setDownloadStatus('completed');
          }
        } else if (job.status === 'failed') {
          activeJobs.delete(job.jobId);
          setActiveJobs(new Set(activeJobs));
          
          const error = job.error || 'Operation failed';
          if (job.action === 'fetch_user') {
            setUserLoading(false);
            setUserError(error);
          } else if (job.action === 'fetch_videos') {
            setVideosLoading(false);
            setVideosError(error);
          } else if (job.action === 'download_videos') {
            setDownloadStatus('failed');
          }
        } else if (job.action === 'download_videos' && job.progress) {
          setDownloadProgress(job.progress);
        }
      }
    });
  }, [userJobs, activeJobs]);
  
  const fetchUser = useCallback(async (username: string) => {
    try {
      // Reset all state when fetching a new user
      setUser(null);
      setUsernameFromJob(null);
      setVideos([]);
      setUserLoading(false);
      setUserError(null);
      
      setUserLoading(true);
      setUserError(null);
      
      // Clean username - handle URLs
      let cleanUsername = username.replace('@', '');
      if (cleanUsername.startsWith('http')) {
        // Extract username from URL like https://www.tiktok.com/@username
        const match = cleanUsername.match(/tiktok\.com\/(@)?([^/?]+)/);
        if (match) {
          cleanUsername = match[2];
        }
      }
      
      // Use the test-videos endpoint to get both user info and videos
      const [userResponse, videosResponse] = await Promise.all([
        fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/tiktok/test/${cleanUsername}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }),
        fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/tiktok/test-videos/${cleanUsername}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        })
      ]);
      
      if (!userResponse.ok) {
        const error = await userResponse.json();
        throw new Error(error.detail || 'Failed to fetch user');
      }
      
      if (!videosResponse.ok) {
        const error = await videosResponse.json();
        throw new Error(error.detail || 'Failed to fetch videos');
      }
      
      const userData = await userResponse.json();
      const videosData = await videosResponse.json();
      
      // Extract user info
      const userInfo = {
        username: cleanUsername,
        userId: userData.userId || '',
        secUid: userData.secUid || '',
        nickname: userData.nickname || cleanUsername,
        avatar: userData.avatar || '',
        signature: userData.signature || '',
        verified: userData.verified || false,
        followerCount: userData.followerCount || 0,
        followingCount: userData.followingCount || 0,
        videoCount: userData.videoCount || 0,
        heartCount: userData.heartCount || 0,
        privateAccount: userData.privateAccount || false
      };
      
      setUser(userInfo);
      setUserLoading(false);
      
      // Set videos from videos response
      if (videosData.videos) {
        const videos = videosData.videos.map((video: any) => ({
          videoId: video.videoId,
          username: video.username || cleanUsername,
          title: video.title || 'Untitled',
          thumbnail: video.thumbnail || '',
          dynamicCover: video.dynamicCover || '',
          duration: video.duration || 0,
          createTime: video.createTime || 0,
          views: video.stats?.views || 0,
          likes: video.stats?.likes || 0,
          comments: video.stats?.comments || 0,
          shares: video.stats?.shares || 0,
          saves: 0,
          playAddr: video.playAddr || '',
          downloadAddr: video.downloadAddr || '',
          musicTitle: video.music?.title || '',
          musicAuthor: video.music?.author || ''
        }));
        setVideos(videos);
      }
      
    } catch (error) {
      console.error('Error fetching TikTok user:', error);
      setUserError(error instanceof Error ? error.message : 'Failed to fetch user');
      setUserLoading(false);
    }
  }, []);

  const fetchVideos = useCallback(async (username: string, limit: number = 12) => {
    try {
      setVideosLoading(true);
      setVideosError(null);
      
      const BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
      const API_KEY = process.env.NEXT_PUBLIC_API_KEY;
      
      const response = await fetch(`${BACKEND_URL}/api/public/tiktok/test-videos/${username}?limit=${limit}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`,
        },
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Add preview URLs for faster loading
      const videosWithPreview = (data.videos || []).map(video => ({
        ...video,
        previewUrl: video.thumbnail, // Use thumbnail as preview
        downloadUrl: `/api/public/tiktok/download/${video.id}`
      }));
      
      setVideos(videosWithPreview);
      
    } catch (error) {
      console.error('Error fetching TikTok videos:', error);
      setVideosError('Failed to load videos');
    } finally {
      setVideosLoading(false);
    }
  }, []);
  const downloadVideos = useCallback(async (videoIds: string[]) => {
    try {
      setDownloadProgress(0);
      setDownloadStatus('starting');
      
      // Create job
      const jobId = uuidv4();
      const username = videos[0]?.username || '';
      
      await createDownloadJob({
        jobId,
        userId,
        username,
        videoIds,
      });
      
      // Add to active jobs
      activeJobs.add(jobId);
      setActiveJobs(new Set(activeJobs));
      
      // Call backend API
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/tiktok/download`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          job_id: jobId,
          video_ids: videoIds,
          user_id: userId,
          username,
        }),
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.detail || 'Failed to download videos');
      }
      
      setDownloadStatus('downloading');
      
    } catch (error) {
      console.error('Error downloading TikTok videos:', error);
      setDownloadStatus('failed');
    }
  }, [createDownloadJob, userId, videos, activeJobs]);
  
  // Check if user data is complete (has all essential fields)
  const userDataComplete = React.useMemo(() => {
    if (!user) return false;
    
    // Check for essential fields that should be present in complete data
    // Note: yt-dlp doesn't provide followerCount/videoCount reliably, so we just check for username
    // Avatar might be empty string from backend, so we just check if username exists
    return !!(user.username);
  }, [user]);
  
  // Auto-fetch TikTok videos when user is loaded
  useEffect(() => {
    console.log('[useTikTokContent] Auto-fetch check:', {
      hasUser: !!user,
      userDataComplete,
      videosLoading,
      videosLength: videos.length,
      username: user?.username
    });
    
    // Videos are now loaded automatically with user data via fetchUser
    // No need for separate fetchVideos call
  }, [user, userDataComplete, videosLoading, videos.length]);  
  // Cleanup function to reset all data
  const cleanup = useCallback(async () => {
    try {
      console.log('[useTikTokContent] Cleaning up data for user:', userId, 'username:', user?.username || usernameFromJob);
      
      // Clear local state
      setUser(null);
      setUsernameFromJob(null);
      setVideos([]);
      setUserLoading(false);
      setVideosLoading(false);
      setWaitingForCache(false);
      setUserError(null);
      setVideosError(null);
      setDownloadProgress(0);
      setDownloadStatus(null);
      setActiveJobs(new Set());
      setCacheRetryCount(0);
      fetchedUsernamesRef.current.clear();
      
      // Call Convex cleanup mutation - use cleanupAllData for more thorough cleanup
      const result = await cleanupAllData({
        userId,
      });
      
      console.log('[useTikTokContent] Cleanup complete:', result);
      
      return result;
    } catch (error) {
      console.error('[useTikTokContent] Cleanup error:', error);
      throw error;
    }
  }, [cleanupAllData, userId]);
  
  return {
    // User data
    user,
    userLoading,
    userError,
    userDataComplete,
    fetchUser,
    
    // Videos data
    videos,
    videosLoading: videosLoading || waitingForCache,
    videosError,
    fetchVideos,
    
    // Download functionality
    downloadVideos,
    downloadProgress,
    downloadStatus,
    
    // Cleanup
    cleanup,
    
    // Rate limiting
    canFetchUser: userRateLimit?.canCreate ?? true,
    canFetchVideos: videosRateLimit?.canCreate ?? true,
    canDownloadVideos: downloadRateLimit?.canCreate ?? true,
    rateLimitInfo: userRateLimit && videosRateLimit && downloadRateLimit ? {
      fetch_user: {
        remaining: userRateLimit.remaining,
        resetAt: userRateLimit.resetAt,
      },
      fetch_videos: {
        remaining: videosRateLimit.remaining,
        resetAt: videosRateLimit.resetAt,
      },
      download_videos: {
        remaining: downloadRateLimit.remaining,
        resetAt: downloadRateLimit.resetAt,
      },
    } : null,
  };
}


================================================
FILE: src/hooks/useTwitchContent.ts
================================================
import { useState, useEffect, useCallback } from 'react';
import { useQuery, useMutation, useAction } from 'convex/react';
import { api } from '@convex/_generated/api';
import { v4 as uuidv4 } from 'uuid';

interface TwitchChannel {
  username: string;
  displayName: string;
  profileImage: string;
  bio?: string;
  isVerified: boolean;
  isPartner: boolean;
  followerCount: number;
  videoCount: number;
  isLive: boolean;
  channelUrl: string;
}

interface TwitchVideo {
  videoId: string;
  title: string;
  thumbnail: string;
  duration: number;
  viewCount: number;
  createdAt: number;
  url: string;
  type: string; // 'vod', 'clip', 'highlight'
  game?: string;
  language?: string;
  description?: string;
}

interface UseTwitchContentReturn {
  // Channel data
  channel: TwitchChannel | null;
  channelLoading: boolean;
  channelError: string | null;
  channelDataComplete: boolean;
  fetchChannel: (channelUrl: string) => Promise<void>;
  
  // Videos data
  videos: TwitchVideo[];
  videosLoading: boolean;
  videosError: string | null;
  fetchVideos: (channelName: string, count?: number, videoType?: string) => Promise<void>;
  
  // Download functionality
  downloadVideos: (videoIds: string[], channelName: string) => Promise<void>;
  downloadProgress: number;
  downloadStatus: string | null;
  
  // Cleanup
  cleanup: () => Promise<void>;
  
  // Rate limiting
  canFetchChannel: boolean;
  canFetchVideos: boolean;
  canDownloadVideos: boolean;
  rateLimitInfo: {
    fetch_channel: { remaining: number; resetAt: number };
    fetch_videos: { remaining: number; resetAt: number };
    download_videos: { remaining: number; resetAt: number };
  } | null;
}

export function useTwitchContent(): UseTwitchContentReturn {
  const [channel, setChannel] = useState<TwitchChannel | null>(null);
  const [channelLoading, setChannelLoading] = useState(false);
  const [channelError, setChannelError] = useState<string | null>(null);
  const [channelDataComplete, setChannelDataComplete] = useState(false);
  
  const [videos, setVideos] = useState<TwitchVideo[]>([]);
  const [videosLoading, setVideosLoading] = useState(false);
  const [videosError, setVideosError] = useState<string | null>(null);
  
  const [downloadProgress, setDownloadProgress] = useState(0);
  const [downloadStatus, setDownloadStatus] = useState<string | null>(null);
  
  const [activeJobs, setActiveJobs] = useState<{
    channel?: string;
    videos?: string; 
    download?: string;
  }>({});
  const [channelUsernameFromJob, setChannelUsernameFromJob] = useState<string | null>(null);
  
  // Get current user ID (in production, get from auth)
  const userId = 'user123'; // TODO: Get from auth context
  
  // Convex actions for API calls
  const createChannelFetchJob = useAction(api.actions.twitchContent.createChannelFetchJob);
  const createVideosFetchJob = useAction(api.actions.twitchContent.createVideosFetchJob);
  const createDownloadJob = useAction(api.actions.twitchContent.createDownloadJob);
  
  // Convex mutations for database operations
  const cleanupMutation = useMutation(api.mutations.twitchContent.cleanup);
  
  // Check cached data
  const queryChannelUsername = channel?.username || channelUsernameFromJob;
  
  console.log('[Twitch] Query channel username:', queryChannelUsername, {
    fromChannel: channel?.username,
    fromJob: channelUsernameFromJob
  });
  
  // Query cached data
  const cachedChannel = useQuery(
    api.queries.twitchContent.getChannel,
    queryChannelUsername ? { username: queryChannelUsername } : 'skip'
  );
  
  const cachedVideos = useQuery(
    api.queries.twitchContent.getVideos,
    queryChannelUsername ? { channelUsername: queryChannelUsername } : 'skip'
  );
  
  // Query active jobs
  const channelJob = useQuery(
    api.queries.twitchContent.getJob,
    activeJobs.channel ? { jobId: activeJobs.channel } : 'skip'
  );
  
  const videosJob = useQuery(
    api.queries.twitchContent.getJob,
    activeJobs.videos ? { jobId: activeJobs.videos } : 'skip'
  );
  
  const downloadJob = useQuery(
    api.queries.twitchContent.getJob,
    activeJobs.download ? { jobId: activeJobs.download } : 'skip'
  );
  
  // Query rate limit info
  const rateLimitInfo = useQuery(api.queries.twitchContent.getRateLimitInfo, { userId });
  
  // Update channel from cache
  useEffect(() => {
    if (cachedChannel && !channelLoading) {
      console.log('[Twitch] Setting channel from cache:', cachedChannel);
      setChannel(cachedChannel);
      setChannelDataComplete(true);
      setChannelError(null);
    }
  }, [cachedChannel, channelLoading]);
  
  // Update videos from cache
  useEffect(() => {
    console.log('[Twitch] Cache check - cachedVideos:', cachedVideos, 'videosLoading:', videosLoading);
    if (cachedVideos && !videosLoading) {
      console.log('[Twitch] Setting videos from cache:', cachedVideos.length, 'videos');
      setVideos(cachedVideos);
      setVideosError(null);
    }
  }, [cachedVideos, videosLoading]);
  
  // Handle channel job updates
  useEffect(() => {
    if (channelJob) {
      console.log('[Twitch] Channel job update:', channelJob.status, channelJob);
      
      if (channelJob.status === 'completed' && channelJob.result?.channelData) {
        setChannel(channelJob.result.channelData);
        setChannelDataComplete(true);
        setChannelLoading(false);
        setChannelError(null);
        
        // Store username for video queries
        const username = channelJob.result.channelData.username;
        if (username) {
          console.log('[Twitch] Setting channel username from job:', username);
          setChannelUsernameFromJob(username);
        }
        
        // Remove job from active jobs
        setActiveJobs(prev => ({
          ...prev,
          channel: undefined
        }));
      } else if (channelJob.status === 'failed') {
        setChannelLoading(false);
        setChannelError(channelJob.error || 'Failed to fetch channel');
        setActiveJobs(prev => ({
          ...prev,
          channel: undefined
        }));
      }
    }
  }, [channelJob]);
  
  // Handle videos job updates
  useEffect(() => {
    if (videosJob) {
      console.log('[Twitch] Videos job update:', videosJob.status, videosJob);
      
      if (videosJob.status === 'completed') {
        console.log('[Twitch] Videos job completed, result:', videosJob.result);
        
        // Videos are stored in the cache, not in the job result
        // The cache will be updated by the webhook, so we just need to stop loading
        setVideosLoading(false);
        setVideosError(null);
        
        // Remove job from active jobs
        setActiveJobs(prev => ({
          ...prev,
          videos: undefined
        }));
      } else if (videosJob.status === 'failed') {
        setVideosLoading(false);
        setVideosError(videosJob.error || 'Failed to fetch videos');
        setActiveJobs(prev => ({
          ...prev,
          videos: undefined
        }));
      }
    }
  }, [videosJob]);
  
  // Handle download job updates
  useEffect(() => {
    if (downloadJob) {
      console.log('[Twitch] Download job update:', downloadJob.status);
      
      if (downloadJob.status === 'downloading' && downloadJob.progress !== undefined) {
        setDownloadProgress(downloadJob.progress);
        setDownloadStatus(`Downloading videos: ${downloadJob.progress}%`);
      } else if (downloadJob.status === 'completed') {
        setDownloadProgress(100);
        setDownloadStatus('Download completed');
        
        // Remove job from active jobs
        setActiveJobs(prev => ({
          ...prev,
          download: undefined
        }));
      } else if (downloadJob.status === 'failed') {
        setDownloadProgress(0);
        setDownloadStatus(`Download failed: ${downloadJob.error}`);
        setActiveJobs(prev => ({
          ...prev,
          download: undefined
        }));
      }
    }
  }, [downloadJob]);
  
  // Fetch channel function
  const fetchChannel = useCallback(async (channelUrl: string) => {
    try {
      console.log('[Twitch] Fetching channel:', channelUrl);
      setChannelLoading(true);
      setChannelError(null);
      setChannelDataComplete(false);
      
      // Create job
      const jobId = uuidv4();
      const result = await createChannelFetchJob({
        jobId,
        channelUrl,
        userId
      });
      
      console.log('[Twitch] Created channel fetch job:', jobId, result);
      
      // Add to active jobs
      setActiveJobs(prev => ({
        ...prev,
        channel: jobId
      }));
      
    } catch (error) {
      console.error('[Twitch] Error fetching channel:', error);
      setChannelError(error instanceof Error ? error.message : 'Failed to fetch channel');
      setChannelLoading(false);
    }
  }, [createChannelFetchJob, userId]);
  
  // Fetch videos function
  const fetchVideos = useCallback(async (
    channelName: string, 
    count: number = 6,
    videoType: string = 'archive'
  ) => {
    try {
      console.log('[Twitch] Fetching videos for channel:', channelName, 'type:', videoType);
      setVideosLoading(true);
      setVideosError(null);
      
      // Create job
      const jobId = uuidv4();
      const result = await createVideosFetchJob({
        jobId,
        channelName,
        userId,
        count,
        videoType
      });
      
      console.log('[Twitch] Created videos fetch job:', jobId, result);
      
      // Add to active jobs
      setActiveJobs(prev => ({
        ...prev,
        videos: jobId
      }));
      
    } catch (error) {
      console.error('[Twitch] Error fetching videos:', error);
      setVideosError(error instanceof Error ? error.message : 'Failed to fetch videos');
      setVideosLoading(false);
    }
  }, [createVideosFetchJob, userId]);
  
  // Download videos function
  const downloadVideos = useCallback(async (videoIds: string[], channelName: string) => {
    try {
      console.log('[Twitch] Downloading videos:', videoIds.length, 'videos');
      setDownloadProgress(0);
      setDownloadStatus('Starting download...');
      
      // Create job
      const jobId = uuidv4();
      const result = await createDownloadJob({
        jobId,
        videoIds,
        userId,
        channelName
      });
      
      console.log('[Twitch] Created download job:', jobId, result);
      
      // Add to active jobs
      setActiveJobs(prev => ({
        ...prev,
        download: jobId
      }));
      
    } catch (error) {
      console.error('[Twitch] Error downloading videos:', error);
      setDownloadStatus(error instanceof Error ? error.message : 'Failed to download videos');
    }
  }, [createDownloadJob, userId]);
  
  // Cleanup function
  const cleanup = useCallback(async () => {
    try {
      const username = channel?.username || channelUsernameFromJob;
      console.log('[Twitch] Cleaning up data for user:', userId, 'username:', username);
      
      // Call cleanup mutation with username if available
      const result = await cleanupMutation({ 
        userId,
        username: username || undefined
      });
      
      console.log('[Twitch] Cleanup result:', result);
      
      // Reset state
      setChannel(null);
      setChannelDataComplete(false);
      setVideos([]);
      setChannelError(null);
      setVideosError(null);
      setDownloadProgress(0);
      setDownloadStatus(null);
      setActiveJobs({});
      setChannelUsernameFromJob(null);
      
      console.log('[Twitch] Cleanup completed');
    } catch (error) {
      console.error('[Twitch] Error during cleanup:', error);
    }
  }, [cleanupMutation, userId, channel, channelUsernameFromJob]);
  
  // Calculate rate limit availability
  const canFetchChannel = rateLimitInfo?.fetch_channel?.remaining ? rateLimitInfo.fetch_channel.remaining > 0 : true;
  const canFetchVideos = rateLimitInfo?.fetch_videos?.remaining ? rateLimitInfo.fetch_videos.remaining > 0 : true;
  const canDownloadVideos = rateLimitInfo?.download_videos?.remaining ? rateLimitInfo.download_videos.remaining > 0 : true;
  
  return {
    // Channel data
    channel,
    channelLoading,
    channelError,
    channelDataComplete,
    fetchChannel,
    
    // Videos data
    videos,
    videosLoading,
    videosError,
    fetchVideos,
    
    // Download functionality
    downloadVideos,
    downloadProgress,
    downloadStatus,
    
    // Cleanup
    cleanup,
    
    // Rate limiting
    canFetchChannel,
    canFetchVideos,
    canDownloadVideos,
    rateLimitInfo
  };
}


================================================
FILE: src/hooks/useVideoPreview.ts
================================================
import { useState, useEffect, useCallback, useRef } from 'react';

interface VideoPreviewData {
  videoId: string;
  platform: 'tiktok' | 'youtube' | 'twitch';
  previewUrl: string | null;
  previewBlob: Blob | null;
  loading: boolean;
  error: string | null;
}

// LRU Cache for preview management
class PreviewCache {
  private cache: Map<string, VideoPreviewData>;
  private maxSize: number;

  constructor(maxSize: number = 10) {
    this.cache = new Map();
    this.maxSize = maxSize;
  }

  get(key: string): VideoPreviewData | undefined {
    const item = this.cache.get(key);
    if (item) {
      // Move to end (most recently used)
      this.cache.delete(key);
      this.cache.set(key, item);
    }
    return item;
  }

  set(key: string, value: VideoPreviewData): void {
    // Remove oldest if at capacity
    if (this.cache.size >= this.maxSize && !this.cache.has(key)) {
      const firstKey = this.cache.keys().next().value;
      const oldData = this.cache.get(firstKey);
      if (oldData?.previewUrl) {
        URL.revokeObjectURL(oldData.previewUrl);
      }
      this.cache.delete(firstKey);
    }
    this.cache.set(key, value);
  }

  clear(): void {
    // Clean up all blob URLs
    this.cache.forEach((data) => {
      if (data.previewUrl) {
        URL.revokeObjectURL(data.previewUrl);
      }
    });
    this.cache.clear();
  }
}

// Singleton cache instance
const previewCache = new PreviewCache();

export function useVideoPreview() {
  const [previews, setPreviews] = useState<Map<string, VideoPreviewData>>(new Map());
  const loadingRef = useRef<Set<string>>(new Set());

  const generatePreview = useCallback(async (
    videoId: string,
    platform: 'tiktok' | 'youtube' | 'twitch',
    videoUrl?: string
  ) => {
    const cacheKey = `${platform}-${videoId}`;
    
    // Check cache first
    const cached = previewCache.get(cacheKey);
    if (cached) {
      setPreviews(prev => new Map(prev).set(cacheKey, cached));
      return cached;
    }

    // Avoid duplicate requests
    if (loadingRef.current.has(cacheKey)) {
      return;
    }

    loadingRef.current.add(cacheKey);
    
    // Set loading state
    const loadingData: VideoPreviewData = {
      videoId,
      platform,
      previewUrl: null,
      previewBlob: null,
      loading: true,
      error: null
    };
    
    setPreviews(prev => new Map(prev).set(cacheKey, loadingData));

    try {
      // Call backend to generate preview
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/${platform}/preview`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          video_id: videoId,
          video_url: videoUrl,
          duration: platform === 'tiktok' ? 0 : 30, // Full video for TikTok, 30s for others
          quality: '480p'
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate preview');
      }

      const blob = await response.blob();
      const previewUrl = URL.createObjectURL(blob);

      const previewData: VideoPreviewData = {
        videoId,
        platform,
        previewUrl,
        previewBlob: blob,
        loading: false,
        error: null
      };

      // Update state and cache
      previewCache.set(cacheKey, previewData);
      setPreviews(prev => new Map(prev).set(cacheKey, previewData));

      return previewData;
    } catch (error) {
      const errorData: VideoPreviewData = {
        videoId,
        platform,
        previewUrl: null,
        previewBlob: null,
        loading: false,
        error: error instanceof Error ? error.message : 'Failed to generate preview'
      };
      
      setPreviews(prev => new Map(prev).set(cacheKey, errorData));
      return errorData;
    } finally {
      loadingRef.current.delete(cacheKey);
    }
  }, []);

  const getPreview = useCallback((videoId: string, platform: 'tiktok' | 'youtube' | 'twitch') => {
    const cacheKey = `${platform}-${videoId}`;
    return previews.get(cacheKey);
  }, [previews]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      previews.forEach((data) => {
        if (data.previewUrl) {
          URL.revokeObjectURL(data.previewUrl);
        }
      });
    };
  }, []);

  return {
    generatePreview,
    getPreview,
    previews,
    clearCache: () => previewCache.clear()
  };
}


================================================
FILE: src/hooks/useVoiceCloning.ts
================================================
import { useState, useEffect, useCallback } from 'react';
import { useQuery, useMutation } from 'convex/react';
import { api } from '@convex/_generated/api';
import { v4 as uuidv4 } from 'uuid';
import { 
  createVoiceClone, 
  checkVoiceCloneJobStatus, 
  testVoiceClone,
  VoiceCloneResponse,
  VoiceCloneJobStatus,
  VoiceTestRequest
} from '@/lib/api';

export interface VoiceCloneSettings {
  exaggeration: number;
  cfgWeight: number;
  chunkSize: number;
}

export interface UseVoiceCloningReturn {
  createClone: (
    audioFile: File, 
    voiceName: string, 
    sampleText: string,
    settings: VoiceCloneSettings
  ) => Promise<void>;
  jobId: string | null;
  jobStatus: VoiceCloneJobStatus | null;
  voiceId: string | null;
  sampleAudioUrl: string | null;
  isProcessing: boolean;
  error: string | null;
  testVoice: (text: string) => Promise<string | null>;
  reset: () => void;
}

export function useVoiceCloning(): UseVoiceCloningReturn {
  const [jobId, setJobId] = useState<string | null>(null);
  const [jobStatus, setJobStatus] = useState<VoiceCloneJobStatus | null>(null);
  const [voiceId, setVoiceId] = useState<string | null>(null);
  const [sampleAudioUrl, setSampleAudioUrl] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [voiceSettings, setVoiceSettings] = useState<VoiceCloneSettings | null>(null);

  // Convex query for real-time job status updates
  const convexJob = useQuery(
    api.voiceCloneJobs.getJob,
    jobId ? { jobId } : 'skip'
  );

  // Convex mutation to create job record
  const createJobMutation = useMutation(api.voiceCloneJobs.create);
  const updateJobMutation = useMutation(api.voiceCloneJobs.updateStatus);

  // Update local state when Convex job updates
  useEffect(() => {
    if (convexJob) {
      setJobStatus({
        job_id: convexJob.jobId,
        status: convexJob.status as 'pending' | 'processing' | 'completed' | 'failed',
        voice_id: convexJob.voiceId,
        result_url: convexJob.resultUrl,
        error: convexJob.error,
        created_at: new Date(convexJob._creationTime).toISOString(),
        updated_at: new Date(convexJob._creationTime).toISOString(),
      });

      // Update processing state
      setIsProcessing(convexJob.status === 'pending' || convexJob.status === 'processing');

      // Update voice ID and sample URL when job completes
      if (convexJob.status === 'completed') {
        if (convexJob.voiceId) setVoiceId(convexJob.voiceId);
        if (convexJob.resultUrl) setSampleAudioUrl(convexJob.resultUrl);
      }

      // Set error if job failed
      if (convexJob.status === 'failed' && convexJob.error) {
        setError(convexJob.error);
      }
    }
  }, [convexJob]);

  const createClone = useCallback(async (
    audioFile: File,
    voiceName: string,
    sampleText: string,
    settings: VoiceCloneSettings
  ) => {
    setError(null);
    setIsProcessing(true);
    setVoiceSettings(settings);

    try {
      // Generate unique job ID
      const jobId = uuidv4();
      
      // Create job record in Convex first
      const convexJobId = await createJobMutation({
        jobId,
        userId: 'anonymous', // TODO: Get from user context
        voiceName,
        audioFileUrl: URL.createObjectURL(audioFile),
        sampleText,
      });

      // Call the API to create voice clone
      const response: VoiceCloneResponse = await createVoiceClone({
        audio_file: audioFile,
        voice_name: voiceName,
        sample_text: sampleText,
      });

      if (response.success) {
        // Use the generated jobId instead of response.jobId
        setJobId(jobId);
        
        // Check if this is a 202 response (queued) or 200 (immediate)
        if (response.httpStatus === 202) {
          // Job is queued, update status to pending
          console.log('[useVoiceCloning] Job queued for processing (202 response)');
          
          await updateJobMutation({
            jobId: jobId,
            status: 'pending',
            apiJobId: response.jobId,
            settings: {
              exaggeration: settings.exaggeration,
              cfgWeight: settings.cfgWeight,
              chunkSize: settings.chunkSize,
            },
            sampleText,
          });
          
          // The polling mechanism in useEffect will handle status updates
        } else {
          // 200 response - immediate results (dev mode)
          console.log('[useVoiceCloning] Immediate processing (200 response)');
          
          // Update Convex job with processing status
          await updateJobMutation({
            jobId: jobId,
            status: 'processing',
            apiJobId: response.jobId,
            settings: {
              exaggeration: settings.exaggeration,
              cfgWeight: settings.cfgWeight,
              chunkSize: settings.chunkSize,
            },
            sampleText,
          });

          // If response includes immediate results
          if (response.voice_id) {
            setVoiceId(response.voice_id);
            
            // Update Convex job as completed
            await updateJobMutation({
              jobId: jobId,
              status: 'completed',
              voiceId: response.voice_id,
              resultUrl: response.sample_audio,
            });
          }
          
          if (response.sample_audio) {
            setSampleAudioUrl(response.sample_audio);
          }
        }
      } else {
        throw new Error(response.message || 'Voice cloning failed');
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to create voice clone';
      setError(errorMessage);
      setIsProcessing(false);
      console.error('[useVoiceCloning] Error creating clone:', err);
    }
  }, [createJobMutation, updateJobMutation]);

  const testVoice = useCallback(async (text: string): Promise<string | null> => {
    if (!voiceId || !voiceSettings) {
      console.error('[useVoiceCloning] No voice ID or settings available for testing');
      return null;
    }

    try {
      const request: VoiceTestRequest = {
        text,
        voice_settings: {
          exaggeration: voiceSettings.exaggeration,
          cfg_weight: voiceSettings.cfgWeight,
          chunk_size: voiceSettings.chunkSize,
        },
      };

      const response = await testVoiceClone(voiceId, request);
      
      if (response.success && response.audio_url) {
        return response.audio_url;
      }
      
      return null;
    } catch (err) {
      console.error('[useVoiceCloning] Error testing voice:', err);
      return null;
    }
  }, [voiceId, voiceSettings]);

  const reset = useCallback(() => {
    setJobId(null);
    setJobStatus(null);
    setVoiceId(null);
    setSampleAudioUrl(null);
    setIsProcessing(false);
    setError(null);
    setVoiceSettings(null);
  }, []);

  // Poll for job status (both as fallback for Convex and primary method)
  useEffect(() => {
    if (!jobId || !isProcessing) return;

    // If Convex is working and has completed status, skip polling
    if (convexJob && (convexJob.status === 'completed' || convexJob.status === 'failed')) {
      return;
    }

    console.log('[useVoiceCloning] Starting status polling for job:', jobId);
    
    const pollInterval = setInterval(async () => {
      try {
        const status = await checkVoiceCloneJobStatus(jobId);
        console.log('[useVoiceCloning] Poll status:', status);
        
        setJobStatus(status);

        if (status.status === 'completed' || status.status === 'failed') {
          setIsProcessing(false);
          clearInterval(pollInterval);

          if (status.status === 'completed') {
            if (status.voice_id) {
              setVoiceId(status.voice_id);
              console.log('[useVoiceCloning] Voice cloning completed, voice_id:', status.voice_id);
            }
            if (status.result_url) {
              setSampleAudioUrl(status.result_url);
              console.log('[useVoiceCloning] Sample audio URL:', status.result_url);
            }
            
            // Update Convex job if not already updated
            if (!convexJob || convexJob.status !== 'completed') {
              await updateJobMutation({
                jobId: jobId,
                status: 'completed',
                voiceId: status.voice_id,
                resultUrl: status.result_url,
              });
            }
          } else if (status.error) {
            setError(status.error);
            console.error('[useVoiceCloning] Job failed:', status.error);
            
            // Update Convex job if not already updated
            if (!convexJob || convexJob.status !== 'failed') {
              await updateJobMutation({
                jobId: jobId,
                status: 'failed',
                error: status.error,
              });
            }
          }
        }
      } catch (err) {
        console.error('[useVoiceCloning] Error polling job status:', err);
        // Don't stop polling on error - the backend might be temporarily unavailable
      }
    }, 2000); // Poll every 2 seconds

    return () => clearInterval(pollInterval);
  }, [jobId, isProcessing, convexJob, updateJobMutation]);

  return {
    createClone,
    jobId,
    jobStatus,
    voiceId,
    sampleAudioUrl,
    isProcessing,
    error,
    testVoice,
    reset,
  };
}


================================================
FILE: src/hooks/useWaveformData.ts
================================================
// MOCK: Custom hook for waveform data management with Convex integration
// This hook will manage the connection between UI and Convex backend

import { useState, useEffect, useCallback, useRef } from 'react';
import { CallRecordingData, WaveformPlaybackState, ConvexWaveformResponse } from '@/types/waveform';
import { 
  getCallRecordingData, 
  updatePlaybackPosition, 
  subscribeToWaveformUpdates,
  addWaveformAnnotation 
} from '@/lib/convex-mock';

interface UseWaveformDataResult {
  // Data state
  callData: CallRecordingData | null;
  loading: boolean;
  error: string | null;
  
  // Playback state
  playbackState: WaveformPlaybackState;
  
  // Actions
  loadCallData: (callId: string) => Promise<void>;
  play: () => void;
  pause: () => void;
  seekTo: (timeMs: number) => void;
  setPlaybackRate: (rate: number) => void;
  setVolume: (volume: number) => void;
  toggleMute: () => void;
  addAnnotation: (timestamp: number, type: string, note: string) => Promise<void>;
  
  // Real-time updates
  isLive: boolean;
  
  // Utility functions
  getAmplitudeAtTime: (timeMs: number) => number;
  getSpeakerAtTime: (timeMs: number) => 'agent' | 'customer' | 'silence';
  getTranscriptAtTime: (timeMs: number) => string | null;
}

export function useWaveformData(callId?: string): UseWaveformDataResult {
  // State management
  const [callData, setCallData] = useState<CallRecordingData | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isLive, setIsLive] = useState(false);
  
  // Playback state
  const [playbackState, setPlaybackState] = useState<WaveformPlaybackState>({
    isPlaying: false,
    currentTime: 0,
    playbackRate: 1,
    volume: 75,
    isMuted: false
  });
  
  // Refs for cleanup
  const playbackIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const subscriptionRef = useRef<(() => void) | null>(null);
  
  // MOCK: Load call recording data from Convex
  const loadCallData = useCallback(async (callId: string) => {
    try {
      setLoading(true);
      setError(null);
      
      console.log(`[MOCK] Loading waveform data for call: ${callId}`);
      
      const response: ConvexWaveformResponse = await getCallRecordingData(callId);
      
      if (response.success && response.data) {
        setCallData(response.data);
        console.log(`[MOCK] Loaded ${response.metadata.shardsCount} waveform shards`);
        
        // MOCK: Subscribe to real-time updates if this is a live call
        if (response.data.duration === 0 || Date.now() - response.data.createdAt < 60000) {
          setIsLive(true);
          subscriptionRef.current = subscribeToWaveformUpdates(callId, handleRealtimeUpdate);
        }
      } else {
        setError(response.error || 'Failed to load call data');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
      console.error('[MOCK] Error loading call data:', err);
    } finally {
      setLoading(false);
    }
  }, []);
  
  // MOCK: Handle real-time waveform updates
  const handleRealtimeUpdate = useCallback((update: any) => {
    if (update.type === 'WAVEFORM_UPDATE') {
      setCallData(prev => {
        if (!prev) return null;
        
        return {
          ...prev,
          waveformShards: [...prev.waveformShards, ...update.newShards],
          duration: Math.max(prev.duration, update.newShards[update.newShards.length - 1]?.timestamp || 0)
        };
      });
    }
  }, []);
  
  // Playback controls
  const play = useCallback(() => {
    setPlaybackState(prev => ({ ...prev, isPlaying: true }));
    
    // MOCK: Start playback timer
    playbackIntervalRef.current = setInterval(() => {
      setPlaybackState(prev => {
        const newTime = prev.currentTime + (100 * prev.playbackRate); // 100ms intervals
        
        // Stop at end of recording
        if (callData && newTime >= callData.duration) {
          return { ...prev, isPlaying: false, currentTime: callData.duration };
        }
        
        return { ...prev, currentTime: newTime };
      });
    }, 100);
  }, [callData]);
  
  const pause = useCallback(() => {
    setPlaybackState(prev => ({ ...prev, isPlaying: false }));
    
    if (playbackIntervalRef.current) {
      clearInterval(playbackIntervalRef.current);
      playbackIntervalRef.current = null;
    }
  }, []);
  
  const seekTo = useCallback(async (timeMs: number) => {
    setPlaybackState(prev => ({ ...prev, currentTime: timeMs }));
    
    // MOCK: Update playback position in Convex for analytics
    if (callId) {
      await updatePlaybackPosition(callId, timeMs, 'current-user-id');
    }
  }, [callId]);
  
  const setPlaybackRate = useCallback((rate: number) => {
    setPlaybackState(prev => ({ ...prev, playbackRate: rate }));
  }, []);
  
  const setVolume = useCallback((volume: number) => {
    setPlaybackState(prev => ({ ...prev, volume }));
  }, []);
  
  const toggleMute = useCallback(() => {
    setPlaybackState(prev => ({ ...prev, isMuted: !prev.isMuted }));
  }, []);
  
  // MOCK: Add annotation to waveform
  const addAnnotation = useCallback(async (timestamp: number, type: string, note: string) => {
    if (!callId) return;
    
    try {
      await addWaveformAnnotation(callId, timestamp, type, note, 'current-user-id');
      console.log(`[MOCK] Added annotation at ${timestamp}ms: ${note}`);
    } catch (err) {
      console.error('[MOCK] Error adding annotation:', err);
    }
  }, [callId]);
  
  // Utility functions for accessing waveform data
  const getAmplitudeAtTime = useCallback((timeMs: number): number => {
    if (!callData) return 0;
    
    const shard = callData.waveformShards.find(s => 
      Math.abs(s.timestamp - timeMs) < 50 // Find closest shard within 50ms
    );
    
    return shard?.amplitude || 0;
  }, [callData]);
  
  const getSpeakerAtTime = useCallback((timeMs: number): 'agent' | 'customer' | 'silence' => {
    if (!callData) return 'silence';
    
    const shard = callData.waveformShards.find(s => 
      Math.abs(s.timestamp - timeMs) < 50
    );
    
    return shard?.speaker || 'silence';
  }, [callData]);
  
  const getTranscriptAtTime = useCallback((timeMs: number): string | null => {
    if (!callData) return null;
    
    const segment = callData.audioSegments.find(s => 
      timeMs >= s.startTime && timeMs <= s.endTime
    );
    
    return segment?.transcriptText || null;
  }, [callData]);
  
  // Load data when callId changes
  useEffect(() => {
    if (callId) {
      loadCallData(callId);
    }
    
    return () => {
      // Cleanup subscriptions
      if (subscriptionRef.current) {
        subscriptionRef.current();
        subscriptionRef.current = null;
      }
    };
  }, [callId, loadCallData]);
  
  // Cleanup playback timer
  useEffect(() => {
    return () => {
      if (playbackIntervalRef.current) {
        clearInterval(playbackIntervalRef.current);
      }
    };
  }, []);
  
  return {
    callData,
    loading,
    error,
    playbackState,
    loadCallData,
    play,
    pause,
    seekTo,
    setPlaybackRate,
    setVolume,
    toggleMute,
    addAnnotation,
    isLive,
    getAmplitudeAtTime,
    getSpeakerAtTime,
    getTranscriptAtTime
  };
}


================================================
FILE: src/hooks/useWorkflowExecution.ts
================================================
/**
 * React hook for workflow execution using the comprehensive workflow engine
 */

import { useState, useCallback } from 'react'
import { WorkflowEngine, IWorkflowBase, IRunExecutionData } from '@/lib/workflow'

interface ExecutionState {
  isExecuting: boolean
  executionResult: IRunExecutionData | null
  error: Error | null
  executionProgress: number
}

interface ExecutionOptions {
  destinationNode?: string
  pinData?: any
  startNodes?: string[]
}

export function useWorkflowExecution() {
  const [state, setState] = useState<ExecutionState>({
    isExecuting: false,
    executionResult: null,
    error: null,
    executionProgress: 0,
  })

  const executeWorkflow = useCallback(async (
    workflow: IWorkflowBase, 
    inputData?: any,
    options?: ExecutionOptions
  ) => {
    setState({ isExecuting: true, executionResult: null, error: null, executionProgress: 0 })

    try {
      // Create workflow engine
      const engine = new WorkflowEngine('manual')
      
      // Validate workflow before execution
      const validation = engine.validateWorkflow(workflow)
      if (!validation.valid) {
        throw new Error(`Invalid workflow: ${validation.errors.join(', ')}`)
      }
      
      // Execute workflow
      const result = await engine.execute(workflow, inputData, options)
      
      setState({
        isExecuting: false,
        executionResult: result,
        error: null,
        executionProgress: 100,
      })

      return result
    } catch (error) {
      setState({
        isExecuting: false,
        executionResult: null,
        error: error as Error,
        executionProgress: 0,
      })
      throw error
    }
  }, [])

  const getNodeTypes = useCallback(() => {
    const engine = new WorkflowEngine()
    return engine.getNodeTypes()
  }, [])

  const validateWorkflow = useCallback((workflow: IWorkflowBase) => {
    const engine = new WorkflowEngine()
    return engine.validateWorkflow(workflow)
  }, [])

  const reset = useCallback(() => {
    setState({
      isExecuting: false,
      executionResult: null,
      error: null,
      executionProgress: 0,
    })
  }, [])

  return {
    executeWorkflow,
    isExecuting: state.isExecuting,
    executionResult: state.executionResult,
    error: state.error,
    executionProgress: state.executionProgress,
    getNodeTypes,
    validateWorkflow,
    reset,
  }
}


================================================
FILE: src/hooks/useYouTubeContent.ts
================================================
import { useState, useEffect, useCallback } from 'react';
import { useQuery, useMutation } from 'convex/react';
import { api } from '@convex/_generated/api';
import { v4 as uuidv4 } from 'uuid';

interface YouTubeChannel {
  channelId: string;
  channelName: string;
  channelHandle?: string;
  channelUrl: string;
  avatar?: string;
  banner?: string;
  description?: string;
  subscriberCount?: number;
  videoCount?: number;
  viewCount?: number;
  joinedDate?: string;
  country?: string;
}

interface YouTubeVideo {
  videoId: string;
  channelId: string;
  channelName: string;
  title: string;
  description?: string;
  thumbnail?: string;
  thumbnails?: Array<{
    quality: string;
    url: string;
    width: number;
    height: number;
  }>;
  duration: number;
  uploadDate?: string;
  viewCount?: number;
  likeCount?: number;
  commentCount?: number;
  tags?: string[];
  category?: string;
  language?: string;
}

interface UseYouTubeContentReturn {
  // Channel data
  channel: YouTubeChannel | null;
  channelLoading: boolean;
  channelError: string | null;
  fetchChannel: (channelUrl: string) => Promise<void>;
  
  // Videos data
  videos: YouTubeVideo[];
  videosLoading: boolean;
  videosError: string | null;
  fetchVideos: (channelId: string, count?: number, sortBy?: string) => Promise<void>;
  
  // Download functionality
  downloadVideos: (videoIds: string[], channelName: string) => Promise<void>;
  downloadProgress: number;
  downloadStatus: string | null;
  
  // Cleanup
  cleanup: () => Promise<any>;
  
  // Rate limiting
  canFetchChannel: boolean;
  canFetchVideos: boolean;
  canDownloadVideos: boolean;
  rateLimitInfo: {
    fetch_channel: { remaining: number; resetAt: number };
    fetch_videos: { remaining: number; resetAt: number };
    download_videos: { remaining: number; resetAt: number };
  } | null;
}

export function useYouTubeContent(initialChannelUrl?: string): UseYouTubeContentReturn {
  const [channel, setChannel] = useState<YouTubeChannel | null>(null);
  const [channelLoading, setChannelLoading] = useState(false);
  const [channelError, setChannelError] = useState<string | null>(null);
  
  const [videos, setVideos] = useState<YouTubeVideo[]>([]);
  const [videosLoading, setVideosLoading] = useState(false);
  const [videosError, setVideosError] = useState<string | null>(null);
  
  const [downloadProgress, setDownloadProgress] = useState(0);
  const [downloadStatus, setDownloadStatus] = useState<string | null>(null);
  
  const [activeJobs, setActiveJobs] = useState<Set<string>>(new Set());
  const [channelIdFromJob, setChannelIdFromJob] = useState<string | null>(null);
  
  // Get current user ID (in production, get from auth)
  const userId = 'user123'; // TODO: Get from auth context
  
  // Convex mutations
  const createChannelFetchJob = useMutation(api.mutations.youtubeContent.createChannelFetchJob);
  const createVideosFetchJob = useMutation(api.mutations.youtubeContent.createVideosFetchJob);
  const createDownloadJob = useMutation(api.mutations.youtubeContent.createDownloadJob);
  const cleanupAllData = useMutation(api.mutations.youtubeContent.cleanupAllData);
  const cleanupChannelData = useMutation(api.mutations.youtubeContent.cleanupChannelData);
  
  // Check cached data - use either the channel ID from state or from completed job
  const queryChannelId = channel?.channelId || channelIdFromJob;
  
  console.log('[useYouTubeContent] Query channel ID:', queryChannelId, {
    fromChannel: channel?.channelId,
    fromJob: channelIdFromJob,
    channelLoading,
    videosLoading
  });
  
  const cachedChannel = useQuery(
    api.queries.youtubeContent.getCachedChannel,
    queryChannelId && !channelLoading ? { channelId: queryChannelId } : 'skip'
  );
  
  const cachedVideos = useQuery(
    api.queries.youtubeContent.getCachedVideos,
    queryChannelId ? { channelId: queryChannelId } : 'skip'
  );
  
  // Check rate limits
  const channelRateLimit = useQuery(
    api.queries.youtubeContent.checkRateLimit,
    { userId, action: 'fetch_channel' }
  );
  
  const videosRateLimit = useQuery(
    api.queries.youtubeContent.checkRateLimit,
    { userId, action: 'fetch_videos' }
  );
  
  const downloadRateLimit = useQuery(
    api.queries.youtubeContent.checkRateLimit,
    { userId, action: 'download_videos' }
  );
  
  // Monitor active jobs
  const userJobs = useQuery(
    api.queries.youtubeContent.getUserJobs,
    { userId, limit: 10 }
  );
  
  // Load cached data
  useEffect(() => {
    // Don't load cached data while actively fetching new channel
    if (cachedChannel && !channelLoading) {
      console.log('[useYouTubeContent] Cached channel data:', {
        channel: cachedChannel.channel,
        isStale: cachedChannel.isStale,
        queryChannelId,
      });
      
      if (cachedChannel.channel && !cachedChannel.isStale) {
        console.log('[useYouTubeContent] Setting channel from cache');
        setChannel(cachedChannel.channel);
      }
    }
  }, [cachedChannel]);
  
  // Keep track of retry attempts
  const [cacheRetryCount, setCacheRetryCount] = useState(0);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  
  useEffect(() => {
    // Don't load cached data while actively fetching new videos
    if (!videosLoading) {
      console.log('[useYouTubeContent] Cached videos query result:', cachedVideos);
      
      if (!cachedVideos) {
        console.log('[useYouTubeContent] No cached videos query result yet');
      } else if (cachedVideos.videos) {
        console.log('[useYouTubeContent] Cached videos data:', {
          videos: cachedVideos.videos,
          isStale: cachedVideos.isStale,
          count: cachedVideos.videos.length,
        });
        
        if (cachedVideos.videos.length > 0) {
          console.log('[useYouTubeContent] Setting videos from cache:', cachedVideos.videos);
          setVideos(cachedVideos.videos);
          setCacheRetryCount(0); // Reset retry count on success
        } else if (cacheRetryCount < 3 && queryChannelId) {
          console.log('[useYouTubeContent] Cache returned empty, retrying...', cacheRetryCount);
          // Retry after a delay
          setTimeout(() => {
            setCacheRetryCount(prev => prev + 1);
          }, 1000);
        } else {
          console.log('[useYouTubeContent] Cache returned empty videos array after retries');
        }
      }
    }
  }, [cachedVideos, videosLoading, queryChannelId, cacheRetryCount]);
  
  // Monitor job statuses
  useEffect(() => {
    if (!userJobs) return;
    
    userJobs.forEach(job => {
      if (activeJobs.has(job.jobId)) {
        console.log('[useYouTubeContent] Job status update:', {
          jobId: job.jobId,
          action: job.action,
          status: job.status,
          error: job.error,
        });
        
        if (job.status === 'completed') {
          activeJobs.delete(job.jobId);
          setActiveJobs(new Set(activeJobs));
          
          // Update local state based on job type
          if (job.action === 'fetch_channel') {
            console.log('[useYouTubeContent] Channel fetch completed');
            setChannelLoading(false);
            setChannelError(null);
            // Store the channelId from the completed job
            if (job.channelId) {
              console.log('[useYouTubeContent] Setting channelId from job:', job.channelId);
              setChannelIdFromJob(job.channelId);
            }
            // Channel data will be loaded via cachedChannel query
          } else if (job.action === 'fetch_videos') {
            console.log('[useYouTubeContent] Videos fetch completed');
            setVideosLoading(false);
            setVideosError(null);
            // Add a small delay to ensure Convex has processed the webhook
            setTimeout(() => {
              console.log('[useYouTubeContent] Triggering cache refresh after delay');
              // Force query refresh
              setRefreshTrigger(prev => prev + 1);
              setCacheRetryCount(0);
            }, 500);
          } else if (job.action === 'download_videos') {
            setDownloadProgress(100);
            setDownloadStatus('completed');
          }
        } else if (job.status === 'failed') {
          activeJobs.delete(job.jobId);
          setActiveJobs(new Set(activeJobs));
          
          const error = job.error || 'Operation failed';
          console.error('[useYouTubeContent] Job failed:', {
            jobId: job.jobId,
            action: job.action,
            error: error,
          });
          
          if (job.action === 'fetch_channel') {
            setChannelLoading(false);
            setChannelError(error);
          } else if (job.action === 'fetch_videos') {
            setVideosLoading(false);
            setVideosError(error);
          } else if (job.action === 'download_videos') {
            setDownloadStatus('failed');
          }
        } else if (job.action === 'download_videos' && job.progress) {
          setDownloadProgress(job.progress);
        }
      }
    });
  }, [userJobs, activeJobs]);
  
  const fetchChannel = useCallback(async (channelUrl: string) => {
    try {
      // Reset all state when fetching a new channel
      setChannel(null);
      setChannelIdFromJob(null);
      setVideos([]);
      setVideosError(null);
      setChannelLoading(true);
      setChannelError(null);
      
      // Create job
      const jobId = uuidv4();
      console.log('[useYouTubeContent] Creating channel fetch job:', {
        jobId,
        userId,
        channelUrl,
      });
      
      await createChannelFetchJob({
        jobId,
        userId,
        channelUrl,
      });
      
      // Add to active jobs
      activeJobs.add(jobId);
      setActiveJobs(new Set(activeJobs));
      
      // Call backend API
      const requestBody = {
        job_id: jobId,
        channel_url: channelUrl,
        user_id: userId,
      };
      
      console.log('[useYouTubeContent] Sending request to backend:', requestBody);
      
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/youtube/channel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });
      
      const responseData = await response.json();
      console.log('[useYouTubeContent] Backend response:', responseData);
      
      if (!response.ok) {
        throw new Error(responseData.detail || 'Failed to fetch channel');
      }
      
    } catch (error) {
      console.error('[useYouTubeContent] Error fetching YouTube channel:', error);
      setChannelError(error instanceof Error ? error.message : 'Failed to fetch channel');
      setChannelLoading(false);
    }
  }, [createChannelFetchJob, userId, activeJobs]);
  
  const fetchVideos = useCallback(async (channelId: string, count: number = 6, sortBy: string = 'newest') => {
    try {
      setVideosLoading(true);
      setVideosError(null);
      
      // Create job
      const jobId = uuidv4();
      await createVideosFetchJob({
        jobId,
        userId,
        channelId,
        count,
        sortBy,
      });
      
      // Add to active jobs
      activeJobs.add(jobId);
      setActiveJobs(new Set(activeJobs));
      
      // Call backend API
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/youtube/videos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          job_id: jobId,
          channel_id: channelId,
          user_id: userId,
          count,
          sort_by: sortBy,
        }),
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.detail || 'Failed to fetch videos');
      }
      
    } catch (error) {
      console.error('Error fetching YouTube videos:', error);
      setVideosError(error instanceof Error ? error.message : 'Failed to fetch videos');
      setVideosLoading(false);
    }
  }, [createVideosFetchJob, userId, activeJobs]);
  
  const downloadVideos = useCallback(async (videoIds: string[], channelName: string) => {
    try {
      setDownloadProgress(0);
      setDownloadStatus('starting');
      
      // Create job
      const jobId = uuidv4();
      const channelId = channel?.channelId || '';
      
      await createDownloadJob({
        jobId,
        userId,
        channelId,
        channelName,
        videoIds,
      });
      
      // Add to active jobs
      activeJobs.add(jobId);
      setActiveJobs(new Set(activeJobs));
      
      // Call backend API
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/public/youtube/download`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          job_id: jobId,
          video_ids: videoIds,
          user_id: userId,
          channel_name: channelName,
        }),
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.detail || 'Failed to download videos');
      }
      
      setDownloadStatus('downloading');
      
    } catch (error) {
      console.error('Error downloading YouTube videos:', error);
      setDownloadStatus('failed');
    }
  }, [createDownloadJob, userId, channel, activeJobs]);
  
  // Cleanup function to reset all data
  const cleanup = useCallback(async () => {
    try {
      console.log('[useYouTubeContent] Cleaning up data for user:', userId, 'channel:', channel?.channelId || channelIdFromJob);
      
      // Clear local state
      setChannel(null);
      setChannelIdFromJob(null);
      setVideos([]);
      setChannelLoading(false);
      setVideosLoading(false);
      setChannelError(null);
      setVideosError(null);
      setDownloadProgress(0);
      setDownloadStatus(null);
      setActiveJobs(new Set());
      setCacheRetryCount(0);
      setRefreshTrigger(0);
      
      // Call Convex cleanup mutation - use cleanupAllData for more thorough cleanup
      const result = await cleanupAllData({
        userId,
      });
      
      console.log('[useYouTubeContent] Cleanup complete:', result);
      
      return result;
    } catch (error) {
      console.error('[useYouTubeContent] Cleanup error:', error);
      throw error;
    }
  }, [cleanupAllData, userId, channel, channelIdFromJob]);

  return {
    // Channel data
    channel,
    channelLoading,
    channelError,
    fetchChannel,
    
    // Videos data
    videos,
    videosLoading,
    videosError,
    fetchVideos,
    
    // Download functionality
    downloadVideos,
    downloadProgress,
    downloadStatus,
    
    // Cleanup
    cleanup,
    
    // Rate limiting
    canFetchChannel: channelRateLimit?.canCreate ?? true,
    canFetchVideos: videosRateLimit?.canCreate ?? true,
    canDownloadVideos: downloadRateLimit?.canCreate ?? true,
    rateLimitInfo: channelRateLimit && videosRateLimit && downloadRateLimit ? {
      fetch_channel: {
        remaining: channelRateLimit.remaining,
        resetAt: channelRateLimit.resetAt,
      },
      fetch_videos: {
        remaining: videosRateLimit.remaining,
        resetAt: videosRateLimit.resetAt,
      },
      download_videos: {
        remaining: downloadRateLimit.remaining,
        resetAt: downloadRateLimit.resetAt,
      },
    } : null,
  };
}


================================================
FILE: src/lib/api.ts
================================================
import { StartCallRequest, StartCallResponse } from '@/types';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
const API_KEY = process.env.NEXT_PUBLIC_API_KEY || 'your-secret-key-here';

export interface VoiceCloneRequest {
  audio_file: File;
  user_id?: string;
  voice_name?: string;
  sample_text?: string;
}

export interface VoiceCloneResponse {
  success: boolean;
  jobId: string;
  message?: string;
  voice_id?: string;
  sample_audio?: string;
  httpStatus?: number;
  status?: string;
  statusUrl?: string;
}

export interface VoiceCloneJobStatus {
  job_id: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  voice_id?: string;
  result_url?: string;
  error?: string;
  created_at: string;
  updated_at: string;
}

export interface VoiceTestRequest {
  text: string;
  voice_settings?: {
    exaggeration?: number;
    cfg_weight?: number;
    chunk_size?: number;
  };
}

export interface VoiceTestResponse {
  success: boolean;
  audio_url: string;
}

class APIClient {
  private baseURL: string;
  private apiKey: string;

  constructor(baseURL: string, apiKey: string) {
    this.baseURL = baseURL;
    this.apiKey = apiKey;
    console.log('[API] Initializing API client', { baseURL, apiKeyLength: apiKey.length });
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${this.baseURL}${endpoint}`;
    const headers = {
      'Content-Type': 'application/json',
      'X-API-Key': this.apiKey,
      ...options.headers,
    };

    console.log('[API] Making request', { 
      method: options.method || 'GET', 
      url, 
      hasBody: !!options.body 
    });

    try {
      const response = await fetch(url, {
        ...options,
        headers,
      });

      console.log('[API] Response received', {
        status: response.status,
        statusText: response.statusText,
        url,
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('[API] Request failed', {
          status: response.status,
          errorData,
        });
        const error = new Error(errorData.detail || `Request failed with status ${response.status}`);
        (error as any).status = response.status;
        throw error;
      }

      const data = await response.json();
      console.log('[API] Response data', data);
      return data;
    } catch (error) {
      console.error('[API] Request error', { url, error });
      throw error;
    }
  }

  async startCall(data: StartCallRequest): Promise<StartCallResponse> {
    console.log('[API] Starting call with data', data);
    return this.request<StartCallResponse>('/call/start', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async createVoiceClone(data: VoiceCloneRequest): Promise<VoiceCloneResponse> {
    console.log('[API] Creating voice clone', { 
      fileName: data.audio_file.name,
      fileSize: data.audio_file.size,
      voiceName: data.voice_name 
    });

    const formData = new FormData();
    formData.append('audio_file', data.audio_file);
    if (data.user_id) formData.append('user_id', data.user_id);
    if (data.voice_name) formData.append('voice_name', data.voice_name);
    if (data.sample_text) formData.append('sample_text', data.sample_text);

    const response = await fetch(`${this.baseURL}/api/public/voice/onboarding/clone`, {
      method: 'POST',
      headers: {
        'X-API-Key': this.apiKey,
      },
      body: formData,
    });

    console.log('[API] Voice clone response status', {
      status: response.status,
      statusText: response.statusText,
    });

    // Handle both 200 (immediate) and 202 (queued) as success
    if (!response.ok && response.status !== 202) {
      const errorData = await response.json().catch(() => ({}));
      console.error('[API] Voice clone request failed', {
        status: response.status,
        errorData,
      });
      const error = new Error(errorData.detail || `Voice clone failed with status ${response.status}`);
      (error as any).status = response.status;
      throw error;
    }

    const responseData = await response.json();
    console.log('[API] Voice clone response', {
      status: response.status,
      data: responseData,
    });
    
    // Add status to response data for frontend handling
    return {
      ...responseData,
      httpStatus: response.status,
    };
  }

  async checkVoiceCloneJobStatus(jobId: string): Promise<VoiceCloneJobStatus> {
    console.log('[API] Checking voice clone job status', { jobId });
    return this.request<VoiceCloneJobStatus>(`/api/public/voice/onboarding/jobs/${jobId}/status`, {
      method: 'GET',
    });
  }

  async testVoiceClone(voiceId: string, data: VoiceTestRequest): Promise<VoiceTestResponse> {
    console.log('[API] Testing voice clone', { voiceId, text: data.text });
    return this.request<VoiceTestResponse>(`/api/public/voice/onboarding/test/${voiceId}`, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async deleteVoiceClone(voiceId: string): Promise<{ success: boolean; message: string }> {
    console.log('[API] Deleting voice clone', { voiceId });
    return this.request<{ success: boolean; message: string }>(`/api/public/voice/onboarding/${voiceId}`, {
      method: 'DELETE',
    });
  }
}

const apiClient = new APIClient(API_BASE_URL, API_KEY);

export const startCall = (data: StartCallRequest) => apiClient.startCall(data);
export const createVoiceClone = (data: VoiceCloneRequest) => apiClient.createVoiceClone(data);
export const checkVoiceCloneJobStatus = (jobId: string) => apiClient.checkVoiceCloneJobStatus(jobId);
export const testVoiceClone = (voiceId: string, data: VoiceTestRequest) => apiClient.testVoiceClone(voiceId);
export const deleteVoiceClone = (voiceId: string) => apiClient.deleteVoiceClone(voiceId);


================================================
FILE: src/lib/convex-mock.ts
================================================
// MOCK: Convex integration layer - this will be replaced with real Convex calls
// This file simulates how we'll integrate with Convex actions, queries, and mutations

import { CallRecordingData, WaveformShard, AudioSegment, CallEvent, ConvexWaveformResponse } from '@/types/waveform';

// MOCK: Convex Query - Get call recording data
export async function getCallRecordingData(callId: string): Promise<ConvexWaveformResponse> {
  // REAL IMPLEMENTATION: This will be a Convex query
  // const result = await convex.query(api.calls.getRecordingData, { callId });
  
  console.log(`[MOCK] Convex Query: getCallRecordingData(${callId})`);
  
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 300));
  
  const mockData = generateMockCallData(callId);
  
  return {
    success: true,
    data: mockData,
    metadata: {
      processingTime: 156,
      shardsCount: mockData.waveformShards.length,
      lastProcessed: Date.now()
    }
  };
}

// MOCK: Convex Action - Process audio file and generate waveform
export async function processAudioFile(audioUrl: string, callId: string): Promise<ConvexWaveformResponse> {
  // REAL IMPLEMENTATION: This will be a Convex action that processes audio
  // const result = await convex.action(api.audio.processWaveform, { audioUrl, callId });
  
  console.log(`[MOCK] Convex Action: processAudioFile(${audioUrl}, ${callId})`);
  
  // Simulate processing time
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  const processedData = generateMockCallData(callId);
  
  return {
    success: true,
    data: processedData,
    metadata: {
      processingTime: 1847,
      shardsCount: processedData.waveformShards.length,
      lastProcessed: Date.now()
    }
  };
}

// MOCK: Convex Mutation - Update playback position for analytics
export async function updatePlaybackPosition(callId: string, position: number, userId: string): Promise<boolean> {
  // REAL IMPLEMENTATION: This will be a Convex mutation
  // await convex.mutation(api.analytics.updatePlaybackPosition, { callId, position, userId });
  
  console.log(`[MOCK] Convex Mutation: updatePlaybackPosition(${callId}, ${position}, ${userId})`);
  
  // Simulate mutation
  await new Promise(resolve => setTimeout(resolve, 50));
  return true;
}

// MOCK: Convex Action - Add annotation/marker to waveform
export async function addWaveformAnnotation(
  callId: string, 
  timestamp: number, 
  type: string, 
  note: string,
  userId: string
): Promise<boolean> {
  // REAL IMPLEMENTATION: This will be a Convex action
  // await convex.action(api.annotations.create, { callId, timestamp, type, note, userId });
  
  console.log(`[MOCK] Convex Action: addWaveformAnnotation(${callId}, ${timestamp}, ${type}, ${note})`);
  
  await new Promise(resolve => setTimeout(resolve, 100));
  return true;
}

// MOCK: Real-time subscription for live call processing
export function subscribeToWaveformUpdates(callId: string, callback: (data: any) => void) {
  // REAL IMPLEMENTATION: This will use Convex subscriptions
  // const unsubscribe = convex.subscribe(api.calls.watchWaveformUpdates, { callId }, callback);
  
  console.log(`[MOCK] Convex Subscription: subscribeToWaveformUpdates(${callId})`);
  
  // Simulate real-time updates
  const interval = setInterval(() => {
    const mockUpdate = {
      type: 'WAVEFORM_UPDATE',
      callId,
      newShards: generateMockShards(5, Date.now()),
      timestamp: Date.now()
    };
    callback(mockUpdate);
  }, 1000);
  
  // Return cleanup function
  return () => {
    clearInterval(interval);
    console.log(`[MOCK] Unsubscribed from waveform updates for ${callId}`);
  };
}

// MOCK: Generate realistic waveform data
function generateMockCallData(callId: string): CallRecordingData {
  const duration = 4 * 60 * 1000; // 4 minutes in ms
  const shardsCount = Math.floor(duration / 100); // One shard per 100ms
  
  const waveformShards = generateMockShards(shardsCount, 0);
  const audioSegments = generateMockAudioSegments(duration);
  const keyEvents = generateMockCallEvents(duration);
  
  return {
    callId,
    duration,
    sampleRate: 44100,
    channels: 1,
    waveformShards,
    audioSegments,
    keyEvents,
    audioUrl: `https://mock-audio-cdn.com/calls/${callId}.wav`,
    createdAt: Date.now() - duration,
    updatedAt: Date.now()
  };
}

function generateMockShards(count: number, startTime: number): WaveformShard[] {
  const shards: WaveformShard[] = [];
  
  for (let i = 0; i < count; i++) {
    const timestamp = startTime + (i * 100); // 100ms intervals
    const isAgentSpeaking = Math.sin(i * 0.1) > 0.3;
    const isCustomerSpeaking = Math.sin(i * 0.15 + 1) > 0.4;
    
    let speaker: 'agent' | 'customer' | 'silence' = 'silence';
    let amplitude = 10 + Math.random() * 15; // Base noise level
    
    if (isAgentSpeaking && !isCustomerSpeaking) {
      speaker = 'agent';
      amplitude = 40 + Math.random() * 50;
    } else if (isCustomerSpeaking && !isAgentSpeaking) {
      speaker = 'customer';
      amplitude = 35 + Math.random() * 45;
    }
    
    // Add some conversation patterns
    if (i < count * 0.1) {
      // Opening - mostly agent
      speaker = 'agent';
      amplitude = 50 + Math.random() * 40;
    } else if (i > count * 0.8) {
      // Closing - mixed
      amplitude *= 0.8;
    }
    
    shards.push({
      id: `shard_${callId}_${i}`,
      timestamp,
      amplitude: Math.min(100, amplitude),
      frequency: 85 + Math.random() * 170, // Typical voice range
      speaker,
      sentiment: generateSentiment(speaker, i, count),
      energy: amplitude / 100
    });
  }
  
  return shards;
}

function generateMockAudioSegments(duration: number): AudioSegment[] {
  const segments: AudioSegment[] = [];
  
  // MOCK: Realistic conversation segments based on our outbound call transcript
  const mockSegments = [
    { start: 0, end: 8000, speaker: 'agent', text: "Hi Taylor! I'm calling from Diala about our new AI voice solutions that could transform your customer engagement.", sentiment: 'positive' },
    { start: 8500, end: 15000, speaker: 'customer', text: "Oh, hi there. I wasn't expecting a call today. What kind of solutions are you talking about?", sentiment: 'neutral' },
    { start: 15500, end: 28000, speaker: 'agent', text: "Great question! We help businesses like yours automate outbound calling with AI that sounds completely natural and converts 40% better than traditional methods.", sentiment: 'positive' },
    { start: 28500, end: 38000, speaker: 'customer', text: "That does sound interesting. We do a lot of cold calling for our sales team. What makes your solution different?", sentiment: 'positive' },
    { start: 38500, end: 48000, speaker: 'agent', text: "Excellent! Our AI agents can handle objections, book appointments, and even do follow-ups. Would you be interested in a quick 15-minute demo this week?", sentiment: 'positive' },
    { start: 48500, end: 54000, speaker: 'customer', text: "Sure, I'd like to see how this works. Tuesday afternoon would be good for me.", sentiment: 'positive' }
  ];
  
  mockSegments.forEach((seg, index) => {
    segments.push({
      id: `segment_${index}`,
      startTime: seg.start,
      endTime: seg.end,
      speaker: seg.speaker as 'agent' | 'customer',
      transcriptText: seg.text,
      confidence: 0.85 + Math.random() * 0.1,
      sentiment: seg.sentiment as any,
      emotions: {
        joy: seg.sentiment === 'positive' ? 0.7 + Math.random() * 0.2 : Math.random() * 0.3,
        anger: seg.sentiment === 'negative' ? 0.6 + Math.random() * 0.3 : Math.random() * 0.1,
        fear: Math.random() * 0.2,
        sadness: seg.sentiment === 'negative' ? 0.4 + Math.random() * 0.3 : Math.random() * 0.1,
        surprise: Math.random() * 0.3
      }
    });
  });
  
  return segments;
}

function generateMockCallEvents(duration: number): CallEvent[] {
  return [
    {
      id: 'event_1',
      timestamp: 8500,
      type: 'question',
      description: 'Prospect asked about solution details',
      confidence: 0.89
    },
    {
      id: 'event_2',
      timestamp: 28500,
      type: 'interest',
      description: 'Interest expressed in cold calling automation',
      confidence: 0.92
    },
    {
      id: 'event_3',
      timestamp: 38500,
      type: 'objection',
      description: 'Implicit objection about differentiation',
      confidence: 0.76
    },
    {
      id: 'event_4',
      timestamp: 48500,
      type: 'appointment',
      description: 'Demo appointment successfully scheduled',
      confidence: 0.95
    }
  ];
}

function generateSentiment(speaker: string, index: number, total: number): 'positive' | 'negative' | 'neutral' {
  if (speaker === 'silence') return 'neutral';
  
  // MOCK: Sentiment progression in successful outbound call
  const progress = index / total;
  
  if (speaker === 'agent') {
    return progress > 0.8 ? 'positive' : 'positive'; // Agent stays positive
  } else {
    // Customer sentiment improves throughout call
    if (progress < 0.3) return Math.random() > 0.7 ? 'neutral' : 'neutral';
    if (progress < 0.6) return Math.random() > 0.5 ? 'positive' : 'neutral';
    return Math.random() > 0.3 ? 'positive' : 'neutral';
  }
}


================================================
FILE: src/lib/rag-validator.ts
================================================
// RAG input validation utilities

export const RAG_LIMITS = {
  free: {
    maxFileSize: 10 * 1024 * 1024, // 10MB
    maxFiles: 5,
    maxUrls: 10,
    maxYoutubeVideos: 5,
    allowedFormats: ['json'],
    dataRetention: 7, // days
  },
  premium: {
    maxFileSize: 100 * 1024 * 1024, // 100MB
    maxFiles: 20,
    maxUrls: 50,
    maxYoutubeVideos: 20,
    allowedFormats: ['json', 'jsonl', 'csv'],
    dataRetention: 30, // days
  },
  enterprise: {
    maxFileSize: -1, // unlimited
    maxFiles: -1,
    maxUrls: -1,
    maxYoutubeVideos: -1,
    allowedFormats: ['json', 'jsonl', 'csv', 'parquet', 'pinecone', 'weaviate'],
    dataRetention: -1, // permanent
  },
} as const;

export const ALLOWED_FILE_TYPES = [
  '.pdf',
  '.doc',
  '.docx',
  '.txt',
  '.md',
  '.csv',
  '.json',
  '.html',
  '.xml',
];

export const ALLOWED_MIME_TYPES = [
  'application/pdf',
  'application/msword',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  'text/plain',
  'text/markdown',
  'text/csv',
  'application/json',
  'text/html',
  'application/xml',
  'text/xml',
];

export interface ValidationResult {
  valid: boolean;
  errors: string[];
  warnings: string[];
}

export function validateFiles(
  files: File[],
  userTier: keyof typeof RAG_LIMITS = 'free'
): ValidationResult {
  const errors: string[] = [];
  const warnings: string[] = [];
  const limits = RAG_LIMITS[userTier];
  
  // Check file count
  if (limits.maxFiles !== -1 && files.length > limits.maxFiles) {
    errors.push(`Maximum ${limits.maxFiles} files allowed for ${userTier} tier`);
  }
  
  // Check total size
  const totalSize = files.reduce((sum, file) => sum + file.size, 0);
  if (limits.maxFileSize !== -1 && totalSize > limits.maxFileSize) {
    errors.push(
      `Total file size ${formatBytes(totalSize)} exceeds ${formatBytes(limits.maxFileSize)} limit for ${userTier} tier`
    );
  }
  
  // Check individual files
  files.forEach((file, index) => {
    // Check file type
    const extension = '.' + file.name.split('.').pop()?.toLowerCase();
    if (!ALLOWED_FILE_TYPES.includes(extension)) {
      errors.push(`File "${file.name}" has unsupported type ${extension}`);
    }
    
    // Check MIME type
    if (!ALLOWED_MIME_TYPES.includes(file.type) && file.type !== '') {
      warnings.push(`File "${file.name}" has unrecognized MIME type: ${file.type}`);
    }
    
    // Check individual file size
    if (file.size > 50 * 1024 * 1024) { // Warn for files over 50MB
      warnings.push(`File "${file.name}" is large (${formatBytes(file.size)}) and may take longer to process`);
    }
    
    // Check file name
    if (file.name.length > 255) {
      errors.push(`File name too long: "${file.name.substring(0, 50)}..."`);
    }
  });
  
  return {
    valid: errors.length === 0,
    errors,
    warnings,
  };
}

export function validateYouTubeUrls(urls: string[]): ValidationResult {
  const errors: string[] = [];
  const warnings: string[] = [];
  
  const validPatterns = [
    /^https?:\/\/(www\.)?youtube\.com\/watch\?v=[\w-]+/,
    /^https?:\/\/youtu\.be\/[\w-]+/,
    /^https?:\/\/(www\.)?youtube\.com\/channel\/[\w-]+/,
    /^https?:\/\/(www\.)?youtube\.com\/@[\w-]+/,
    /^https?:\/\/(www\.)?youtube\.com\/c\/[\w-]+/,
    /^https?:\/\/(www\.)?youtube\.com\/playlist\?list=[\w-]+/,
  ];
  
  urls.forEach((url, index) => {
    const trimmedUrl = url.trim();
    if (!trimmedUrl) {
      warnings.push(`Empty URL at line ${index + 1}`);
      return;
    }
    
    const isValid = validPatterns.some(pattern => pattern.test(trimmedUrl));
    if (!isValid) {
      errors.push(`Invalid YouTube URL: "${trimmedUrl}"`);
    }
    
    // Check for playlist URLs
    if (trimmedUrl.includes('/playlist?')) {
      warnings.push('Playlist URLs may take longer to process');
    }
    
    // Check for channel URLs
    if (trimmedUrl.includes('/channel/') || trimmedUrl.includes('/@')) {
      warnings.push('Channel URLs will process recent videos only');
    }
  });
  
  return {
    valid: errors.length === 0,
    errors,
    warnings,
  };
}

export function validateWebUrls(urls: string[]): ValidationResult {
  const errors: string[] = [];
  const warnings: string[] = [];
  
  urls.forEach((url, index) => {
    const trimmedUrl = url.trim();
    if (!trimmedUrl) {
      warnings.push(`Empty URL at line ${index + 1}`);
      return;
    }
    
    try {
      const parsed = new URL(trimmedUrl);
      
      // Check protocol
      if (!['http:', 'https:'].includes(parsed.protocol)) {
        errors.push(`Invalid protocol in URL: "${trimmedUrl}"`);
      }
      
      // Warn about certain domains
      const blockedDomains = ['localhost', '127.0.0.1', '0.0.0.0'];
      if (blockedDomains.includes(parsed.hostname)) {
        errors.push(`Cannot access local URLs: "${trimmedUrl}"`);
      }
      
      // Warn about authentication
      if (parsed.username || parsed.password) {
        warnings.push(`URL contains credentials which will be ignored: "${trimmedUrl}"`);
      }
      
    } catch (e) {
      errors.push(`Invalid URL format: "${trimmedUrl}"`);
    }
  });
  
  return {
    valid: errors.length === 0,
    errors,
    warnings,
  };
}

export function validateChunkSettings(
  chunkSize: number,
  overlap: number
): ValidationResult {
  const errors: string[] = [];
  const warnings: string[] = [];
  
  // Validate chunk size
  if (chunkSize < 100) {
    errors.push('Chunk size must be at least 100 tokens');
  } else if (chunkSize > 2000) {
    warnings.push('Large chunk sizes may reduce embedding quality');
  }
  
  // Validate overlap
  if (overlap < 0) {
    errors.push('Overlap cannot be negative');
  } else if (overlap >= chunkSize) {
    errors.push('Overlap must be less than chunk size');
  } else if (overlap > chunkSize / 2) {
    warnings.push('High overlap will create many redundant embeddings');
  }
  
  return {
    valid: errors.length === 0,
    errors,
    warnings,
  };
}

export function formatBytes(bytes: number): string {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

export function estimateProcessingTime(
  sources: Array<{ type: string; size?: number }>,
  chunkSize: number
): string {
  // Rough estimates based on source type and size
  let totalSeconds = 0;
  
  sources.forEach(source => {
    switch (source.type) {
      case 'youtube':
        totalSeconds += 30; // 30 seconds per video
        break;
      case 'document':
        if (source.size) {
          // Estimate 1 second per 100KB
          totalSeconds += Math.ceil(source.size / (100 * 1024));
        } else {
          totalSeconds += 10;
        }
        break;
      case 'url':
        totalSeconds += 15; // 15 seconds per URL
        break;
    }
  });
  
  // Add embedding time (rough estimate)
  totalSeconds += sources.length * 5;
  
  if (totalSeconds < 60) {
    return `~${totalSeconds} seconds`;
  } else if (totalSeconds < 3600) {
    const minutes = Math.ceil(totalSeconds / 60);
    return `~${minutes} minute${minutes > 1 ? 's' : ''}`;
  } else {
    const hours = Math.ceil(totalSeconds / 3600);
    return `~${hours} hour${hours > 1 ? 's' : ''}`;
  }
}

export function validateExportFormat(
  format: string,
  userTier: keyof typeof RAG_LIMITS = 'free'
): boolean {
  const allowedFormats = RAG_LIMITS[userTier].allowedFormats;
  return allowedFormats.includes(format as any);
}


================================================
FILE: src/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


================================================
FILE: src/lib/youtube-transcript-fetcher.ts
================================================
// YouTube Transcript Fetcher - Client-side implementation
// This uses the YouTube iframe API to extract transcripts

export interface TranscriptSegment {
  text: string;
  start: number;
  duration: number;
}

export interface TranscriptData {
  transcript: string;
  videoId: string;
  segments: TranscriptSegment[];
}

export class YouTubeTranscriptFetcher {
  private static readonly YOUTUBE_REGEX = /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/;

  static extractVideoId(url: string): string | null {
    const match = url.match(this.YOUTUBE_REGEX);
    return match ? match[1] : null;
  }

  static async fetchTranscript(url: string): Promise<TranscriptData> {
    const videoId = this.extractVideoId(url);
    
    if (!videoId) {
      throw new Error('Invalid YouTube URL');
    }

    // Try multiple methods to get transcript
    try {
      // Method 1: Try using a public transcript API
      return await this.fetchFromPublicAPI(videoId);
    } catch (error) {
      console.warn('Public API failed, trying alternative method:', error);
      
      // Method 2: Try using YouTube's oEmbed to get video info
      try {
        return await this.fetchUsingOEmbed(videoId);
      } catch (error2) {
        console.warn('oEmbed method failed:', error2);
        
        // Method 3: Return a mock transcript for development
        return this.getMockTranscript(videoId);
      }
    }
  }

  private static async fetchFromPublicAPI(videoId: string): Promise<TranscriptData> {
    // Using a CORS-friendly transcript service
    const apiUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(
      `https://www.youtube.com/watch?v=${videoId}`
    )}`;

    const response = await fetch(apiUrl);
    
    if (!response.ok) {
      throw new Error('Failed to fetch from public API');
    }

    const html = await response.text();
    
    // Extract transcript from YouTube page HTML
    // This is a simplified approach - in production you'd want more robust parsing
    const transcriptMatch = html.match(/"captions":\{"playerCaptionsTracklistRenderer":\{"captionTracks":\[(.*?)\]/);
    
    if (!transcriptMatch) {
      throw new Error('No captions found');
    }

    // For now, return a placeholder
    throw new Error('Caption parsing not fully implemented');
  }

  private static async fetchUsingOEmbed(videoId: string): Promise<TranscriptData> {
    // YouTube oEmbed endpoint
    const oEmbedUrl = `https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=${videoId}&format=json`;
    
    const response = await fetch(oEmbedUrl);
    
    if (!response.ok) {
      throw new Error('Failed to fetch video info');
    }

    const videoInfo = await response.json();
    
    // oEmbed doesn't provide transcripts directly
    // This would need additional processing
    throw new Error('Transcript not available through oEmbed');
  }

  private static getMockTranscript(videoId: string): TranscriptData {
    // Return a mock transcript for development/demo purposes
    const mockTranscript = `Welcome to this video. Today we'll be discussing various topics. 
    First, let's talk about the importance of transcripts in video content. 
    Transcripts help with accessibility and allow users to quickly scan through video content. 
    They also improve SEO and make content searchable. 
    In this demonstration, we're showing how YouTube transcripts can be fetched and displayed. 
    The transcript is broken down into segments that can be individually highlighted. 
    This creates an interactive experience for users. 
    Thank you for watching this demonstration.`;

    const segments: TranscriptSegment[] = mockTranscript.split('. ').map((sentence, index) => ({
      text: sentence + (sentence.endsWith('.') ? '' : '.'),
      start: index * 5,
      duration: 5
    }));

    return {
      transcript: mockTranscript,
      videoId: videoId,
      segments: segments
    };
  }
}

// Simplified fetch function for easy use
export async function getYouTubeTranscript(url: string): Promise<string> {
  try {
    const data = await YouTubeTranscriptFetcher.fetchTranscript(url);
    return data.transcript;
  } catch (error: any) {
    console.error('Error fetching transcript:', error);
    
    // For demo purposes, always return a mock transcript
    const videoId = YouTubeTranscriptFetcher.extractVideoId(url);
    if (videoId) {
      const mockData = YouTubeTranscriptFetcher['getMockTranscript'](videoId);
      return mockData.transcript;
    }
    
    throw error;
  }
}


================================================
FILE: src/lib/youtube-transcript.ts
================================================
export interface TranscriptEntry {
  text: string;
  start: number;
  duration: number;
}

export interface TranscriptResponse {
  transcript: string;
  videoId: string;
}

export function extractVideoId(url: string): string | null {
  // Standard URL: https://www.youtube.com/watch?v=VIDEO_ID
  let match = url.match(/watch\?v=([^&]+)/);
  if (match) return match[1];
  
  // Shortened URL: https://youtu.be/VIDEO_ID
  match = url.match(/youtu\.be\/([^?]+)/);
  if (match) return match[1];
  
  // Embedded URL: https://www.youtube.com/embed/VIDEO_ID
  match = url.match(/embed\/([^?]+)/);
  if (match) return match[1];
  
  return null;
}

export async function fetchYoutubeTranscript(url: string): Promise<TranscriptResponse> {
  const videoId = extractVideoId(url);
  
  if (!videoId) {
    throw new Error('Could not extract video ID from URL');
  }

  try {
    // Using a public API that provides YouTube transcripts
    // Note: In production, you might want to use your own proxy server
    const response = await fetch(`https://youtube-transcript-api.vercel.app/api/transcript?videoId=${videoId}`);
    
    if (!response.ok) {
      if (response.status === 404) {
        throw new Error('No transcript found for this video');
      }
      throw new Error('Failed to fetch transcript');
    }

    const data = await response.json();
    
    // Combine all transcript segments into one string
    const fullTranscript = data.transcript
      .map((entry: TranscriptEntry) => entry.text)
      .join(' ');

    return {
      transcript: fullTranscript,
      videoId: videoId
    };
  } catch (error) {
    // Fallback: Try using YouTube's own transcript feature through iframe API
    // This requires parsing the YouTube page which has CORS restrictions
    // So we'll need to handle this error gracefully
    
    console.error('Error fetching transcript:', error);
    
    // For now, return a placeholder or error message
    throw new Error('Unable to fetch transcript. This video may not have captions available.');
  }
}

// Alternative approach using YouTube Data API (requires API key)
export async function fetchTranscriptWithApiKey(videoId: string, apiKey: string): Promise<string> {
  try {
    // First, get video details to check if captions are available
    const videoResponse = await fetch(
      `https://www.googleapis.com/youtube/v3/videos?part=contentDetails&id=${videoId}&key=${apiKey}`
    );
    
    if (!videoResponse.ok) {
      throw new Error('Failed to fetch video details');
    }

    const videoData = await videoResponse.json();
    
    if (!videoData.items || videoData.items.length === 0) {
      throw new Error('Video not found');
    }

    // Check if captions are available
    const hasCaption = videoData.items[0].contentDetails.caption === 'true';
    
    if (!hasCaption) {
      throw new Error('No captions available for this video');
    }

    // YouTube Data API doesn't provide direct access to transcripts
    // You would need to use the YouTube Caption API or a third-party service
    throw new Error('Caption API access required for transcript retrieval');
  } catch (error) {
    console.error('Error with YouTube API:', error);
    throw error;
  }
}


================================================
FILE: src/lib/api/procedural-audio.ts
================================================
import { useMutation, useQuery } from "convex/react";
import { api } from "../../../../convex/_generated/api";
import type { Id } from "../../../../convex/_generated/dataModel";

export interface AudioConfig {
  prompt: string;
  duration: number;
  intensity: number; // 0-1 for ambiance intensity
  name: string;
}

export interface AudioJob {
  _id: Id<"proceduralAudioJobs">;
  jobId: string;
  userId: string;
  config: AudioConfig;
  status: "pending" | "processing" | "completed" | "failed";
  audioUrl?: string;
  audioId?: string;
  fileName?: string;
  fileSize?: number;
  metadata?: {
    size: string;
    duration: string;
    quality: string;
    format: string;
  };
  error?: string;
  createdAt: number;
  startedAt?: number;
  completedAt?: number;
  processingTime?: number;
}

export interface GeneratedAudio {
  id: string;
  url: string;
  config: AudioConfig;
  metadata: {
    size: string;
    duration: string;
    quality: string;
  };
}

export class ProceduralAudioService {
  constructor(private userId: string) {}

  // Create a new audio generation job
  async createJob(config: AudioConfig): Promise<string> {
    const jobId = await useMutation(api.proceduralAudio.createJob)({
      config,
      userId: this.userId
    });
    return jobId;
  }

  // Get job status
  async getJob(jobId: string) {
    return useQuery(api.proceduralAudio.getJob, { jobId });
  }

  // Get user's jobs
  async getUserJobs(limit?: number) {
    return useQuery(api.proceduralAudio.getUserJobs, { 
      userId: this.userId, 
      limit 
    });
  }

  // Get active jobs
  async getActiveJobs() {
    return useQuery(api.proceduralAudio.getActiveJobs, { userId: this.userId });
  }

  // Delete job
  async deleteJob(jobId: string) {
    return useMutation(api.proceduralAudio.deleteJob)({ jobId, userId: this.userId });
  }

  // Convert job to GeneratedAudio format
  static toGeneratedAudio(job: AudioJob): GeneratedAudio {
    return {
      id: job.jobId,
      url: job.audioUrl || '',
      config: job.config,
      metadata: {
        size: job.metadata?.size || 'Unknown',
        duration: job.metadata?.duration || `${job.config.duration}s`,
        quality: job.metadata?.quality || '44.1kHz/16-bit'
      }
    };
  }
}

// Hook for real-time job monitoring
export function useAudioJob(jobId: string) {
  return useQuery(api.proceduralAudio.getJob, { jobId });
}

// Hook for user's jobs
export function useUserAudioJobs(limit?: number) {
  // This would need to be implemented with actual user ID
  const userId = "current-user"; // Replace with actual user ID from auth
  return useQuery(api.proceduralAudio.getUserJobs, { userId, limit });
}

// Hook for active jobs
export function useActiveAudioJobs() {
  const userId = "current-user"; // Replace with actual user ID from auth
  return useQuery(api.proceduralAudio.getActiveJobs, { userId });
}


================================================
FILE: src/lib/workflow/expression-evaluator.ts
================================================
/**
 * Expression evaluation system extracted from n8n
 */

import jmespath from 'jmespath'
import { DateTime } from 'luxon'

export interface IDataObject {
  [key: string]: any
}

export interface IWorkflowDataProxyData {
  $binary: any
  $data: any
  $env: any
  $evaluateExpression: (expression: string, itemIndex?: number) => any
  $item: (itemIndex: number, runIndex?: number, inputIndex?: number) => IDataObject
  $items: (nodeName?: string, outputIndex?: number, runIndex?: number) => IDataObject[]
  $json: IDataObject
  $node: any
  $parameter: any
  $position: number
  $runIndex: number
  $workflow: any
}

export class ExpressionEvaluator {
  private context: Record<string, any>
  private data: IDataObject
  private helpers: Record<string, Function>

  constructor(workflow: any, runExecutionData: any, itemIndex: number = 0) {
    this.data = {}
    this.context = {}
    this.helpers = this.createHelpers()
    this.setupContext(workflow, runExecutionData, itemIndex)
  }

  private createHelpers(): Record<string, Function> {
    return {
      // Date helpers
      $now: () => DateTime.now(),
      $today: () => DateTime.now().startOf('day'),
      $jmespath: (data: any, expression: string) => jmespath.search(data, expression),
      
      // String helpers
      $lowercase: (str: string) => str?.toLowerCase(),
      $uppercase: (str: string) => str?.toUpperCase(),
      $trim: (str: string) => str?.trim(),
      $split: (str: string, separator: string) => str?.split(separator),
      
      // Number helpers
      $round: (num: number, decimals = 0) => Math.round(num * Math.pow(10, decimals)) / Math.pow(10, decimals),
      $floor: (num: number) => Math.floor(num),
      $ceil: (num: number) => Math.ceil(num),
      $abs: (num: number) => Math.abs(num),
      
      // Array helpers
      $first: (arr: any[]) => arr?.[0],
      $last: (arr: any[]) => arr?.[arr.length - 1],
      $length: (arr: any[] | string) => arr?.length || 0,
      $isEmpty: (val: any) => !val || (Array.isArray(val) && val.length === 0) || (typeof val === 'object' && Object.keys(val).length === 0),
      
      // Object helpers
      $keys: (obj: Record<string, any>) => Object.keys(obj || {}),
      $values: (obj: Record<string, any>) => Object.values(obj || {}),
      $entries: (obj: Record<string, any>) => Object.entries(obj || {}),
      
      // Type checking
      $isString: (val: any) => typeof val === 'string',
      $isNumber: (val: any) => typeof val === 'number',
      $isBoolean: (val: any) => typeof val === 'boolean',
      $isArray: (val: any) => Array.isArray(val),
      $isObject: (val: any) => typeof val === 'object' && val !== null && !Array.isArray(val),
      
      // Conversion
      $toString: (val: any) => String(val),
      $toNumber: (val: any) => Number(val),
      $toBoolean: (val: any) => Boolean(val),
      $toJson: (val: any) => JSON.stringify(val),
      $parseJson: (str: string) => {
        try {
          return JSON.parse(str)
        } catch {
          return null
        }
      },
    }
  }

  private setupContext(workflow: any, runExecutionData: any, itemIndex: number): void {
    // Setup basic context
    this.context = {
      ...this.helpers,
      $workflow: {
        id: workflow.id,
        name: workflow.name,
      },
      $execution: {
        id: 'test-execution',
        mode: 'manual',
      },
      $itemIndex: itemIndex,
    }

    // Add node data access
    if (runExecutionData) {
      this.context.$node = {}
      for (const nodeName in runExecutionData.resultData.runData) {
        const nodeData = runExecutionData.resultData.runData[nodeName]
        if (nodeData && nodeData.length > 0) {
          const lastRun = nodeData[nodeData.length - 1]
          if (lastRun.main && lastRun.main[0] && lastRun.main[0].length > 0) {
            this.context.$node[nodeName] = {
              json: lastRun.main[0][0],
              data: lastRun.main[0],
            }
          }
        }
      }
    }
  }

  evaluate(expression: string, data: IDataObject = {}): any {
    // Check if it's an expression (starts with = or {{ and ends with }})
    const isExpression = expression.startsWith('=') || (expression.startsWith('{{') && expression.endsWith('}}'))
    if (!isExpression) {
      return expression
    }

    // Clean expression
    let cleanExpression = expression
    if (expression.startsWith('=')) {
      cleanExpression = expression.substring(1).trim()
    } else if (expression.startsWith('{{') && expression.endsWith('}}')) {
      cleanExpression = expression.substring(2, expression.length - 2).trim()
    }

    // Create evaluation context
    const evalContext = {
      ...this.context,
      $json: data,
      $input: data,
      $: data, // Shorthand for current data
    }

    try {
      // Create safe evaluation function
      const func = new Function(...Object.keys(evalContext), `return ${cleanExpression}`)
      return func(...Object.values(evalContext))
    } catch (error) {
      console.error('Expression evaluation error:', error)
      return undefined
    }
  }

  evaluateAll(data: IDataObject, itemIndex: number = 0): IDataObject {
    const result: IDataObject = {}
    
    for (const key in data) {
      const value = data[key]
      
      if (typeof value === 'string') {
        result[key] = this.evaluate(value, data)
      } else if (Array.isArray(value)) {
        result[key] = value.map(item => 
          typeof item === 'string' ? this.evaluate(item, data) : item
        )
      } else if (typeof value === 'object' && value !== null) {
        result[key] = this.evaluateAll(value, itemIndex)
      } else {
        result[key] = value
      }
    }
    
    return result
  }

  // Helper method to resolve parameter values
  resolveParameterValue(
    parameterValue: any,
    data: IDataObject,
    additionalKeys?: Record<string, any>
  ): any {
    if (typeof parameterValue !== 'string') {
      return parameterValue
    }

    const evalContext = {
      ...this.context,
      ...additionalKeys,
      $json: data,
      $input: data,
    }

    return this.evaluate(parameterValue, data)
  }
}


================================================
FILE: src/lib/workflow/index.ts
================================================
/**
 * Main workflow module exports
 */

// Core workflow engine
export { WorkflowEngine } from './WorkflowEngine'
export { Workflow } from './core/Workflow'
export { WorkflowExecute } from './core/WorkflowExecute'
export { WorkflowDataProxy } from './core/WorkflowDataProxy'
export { ExpressionParser } from './core/ExpressionParser'
export { ExpressionError } from './core/ExpressionError'

// Node types
export { BaseNode } from './nodes/BaseNode'
export { HttpRequestNode } from './nodes/HttpRequestNode'
export { IfNode } from './nodes/IfNode'
export { WebhookNode } from './nodes/WebhookNode'
export { CodeNode } from './nodes/CodeNode'
export { SetNode } from './nodes/SetNode'
export { DialaMakeCallNode } from './nodes/DialaMakeCallNode'

// Types
export * from './types'

// Utilities
export const EXPRESSION_REGEX = /\{\{(.+?)\}\}/g

export function isExpression(value: any): boolean {
  return typeof value === 'string' && value.includes('{{') && value.includes('}}')
}

export function extractExpression(value: string): string {
  if (value.startsWith('={{') && value.endsWith('}}')) {
    return value.slice(3, -2).trim()
  }
  return value
}


================================================
FILE: src/lib/workflow/workflow-executor.ts
================================================
/**
 * Simplified workflow execution engine extracted from n8n
 */

import { DateTime } from 'luxon'

export interface INode {
  id: string
  name: string
  type: string
  parameters: Record<string, any>
  position: [number, number]
  disabled?: boolean
}

export interface INodeExecutionData {
  main: IDataObject[][]
}

export interface IDataObject {
  [key: string]: any
}

export interface IConnection {
  node: string
  type: string
  index: number
}

export interface IConnections {
  [outputIndex: string]: IConnection[][]
}

export interface IWorkflowData {
  id?: string
  name?: string
  nodes: INode[]
  connections: Record<string, IConnections>
  settings?: Record<string, any>
}

export interface IExecuteData {
  node: INode
  data: INodeExecutionData
  source: IConnection | null
}

export interface IRunExecutionData {
  resultData: {
    runData: Record<string, INodeExecutionData[]>
    lastNodeExecuted?: string
    executionData?: Record<string, IExecuteData[]>
    error?: Error
  }
  executionData?: {
    contextData: Record<string, any>
    nodeExecutionStack: IExecuteData[]
    waitingExecution: Record<string, IExecuteData[]>
    waitingExecutionSource: Record<string, IExecuteData>
  }
}

export type ExecutionStatus = 'running' | 'success' | 'error' | 'canceled'

export interface ITaskData {
  startTime: number
  executionTime: number
  executionStatus: ExecutionStatus
  data?: INodeExecutionData
  error?: Error
}

export abstract class NodeType {
  abstract description: {
    displayName: string
    name: string
    group: string[]
    version: number
    description: string
    defaults: {
      name: string
    }
    inputs: string[]
    outputs: string[]
    properties: any[]
  }

  abstract execute(context: IExecuteContext): Promise<INodeExecutionData[][]>
}

export interface IExecuteContext {
  getNode(): INode
  getInputData(inputIndex?: number, inputName?: string): IDataObject[]
  getNodeParameter(parameterName: string, itemIndex?: number, fallbackValue?: any): any
  helpers: {
    returnJsonArray(data: IDataObject | IDataObject[]): IDataObject[]
  }
}

export class WorkflowExecutor {
  private workflow: IWorkflowData
  private nodeTypes: Map<string, NodeType>
  private runExecutionData: IRunExecutionData
  private executionId: string
  private mode: 'manual' | 'trigger' = 'manual'

  constructor(workflow: IWorkflowData, nodeTypes: Map<string, NodeType>) {
    this.workflow = workflow
    this.nodeTypes = nodeTypes
    this.executionId = this.generateExecutionId()
    this.runExecutionData = this.initializeRunExecutionData()
  }

  private generateExecutionId(): string {
    return `exec_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`
  }

  private initializeRunExecutionData(): IRunExecutionData {
    return {
      resultData: {
        runData: {},
      },
      executionData: {
        contextData: {},
        nodeExecutionStack: [],
        waitingExecution: {},
        waitingExecutionSource: {},
      },
    }
  }

  async execute(
    destinationNode?: string,
    inputData?: INodeExecutionData
  ): Promise<IRunExecutionData> {
    try {
      // Find start nodes (nodes without incoming connections)
      const startNodes = this.findStartNodes()
      
      // Initialize execution queue
      const executionQueue: IExecuteData[] = []
      
      // Add start nodes to queue
      for (const node of startNodes) {
        executionQueue.push({
          node,
          data: inputData || { main: [[]] },
          source: null,
        })
      }

      // Process nodes
      while (executionQueue.length > 0) {
        const executeData = executionQueue.shift()!
        
        if (executeData.node.disabled) {
          continue
        }

        // Execute node
        const nodeOutput = await this.executeNode(executeData)
        
        // Store execution result
        if (!this.runExecutionData.resultData.runData[executeData.node.name]) {
          this.runExecutionData.resultData.runData[executeData.node.name] = []
        }
        this.runExecutionData.resultData.runData[executeData.node.name].push(nodeOutput)
        
        // Add connected nodes to queue
        const connections = this.workflow.connections[executeData.node.name]
        if (connections) {
          for (const outputIndex in connections) {
            const outputConnections = connections[outputIndex]
            for (const connectionGroup of outputConnections) {
              for (const connection of connectionGroup) {
                const nextNode = this.workflow.nodes.find(n => n.name === connection.node)
                if (nextNode && (!destinationNode || nextNode.name === destinationNode)) {
                  executionQueue.push({
                    node: nextNode,
                    data: nodeOutput,
                    source: {
                      node: executeData.node.name,
                      type: outputIndex,
                      index: connection.index,
                    },
                  })
                }
              }
            }
          }
        }
        
        this.runExecutionData.resultData.lastNodeExecuted = executeData.node.name
      }

      return this.runExecutionData
    } catch (error) {
      this.runExecutionData.resultData.error = error as Error
      throw error
    }
  }

  private findStartNodes(): INode[] {
    const nodesWithIncomingConnections = new Set<string>()
    
    for (const nodeName in this.workflow.connections) {
      const nodeConnections = this.workflow.connections[nodeName]
      for (const outputIndex in nodeConnections) {
        for (const connectionGroup of nodeConnections[outputIndex]) {
          for (const connection of connectionGroup) {
            nodesWithIncomingConnections.add(connection.node)
          }
        }
      }
    }
    
    return this.workflow.nodes.filter(node => !nodesWithIncomingConnections.has(node.name))
  }

  private async executeNode(executeData: IExecuteData): Promise<INodeExecutionData> {
    const { node, data } = executeData
    const nodeType = this.nodeTypes.get(node.type)
    
    if (!nodeType) {
      throw new Error(`Unknown node type: ${node.type}`)
    }

    const context: IExecuteContext = {
      getNode: () => node,
      getInputData: (inputIndex = 0) => {
        return data.main[inputIndex] || []
      },
      getNodeParameter: (parameterName: string, itemIndex = 0, fallbackValue?: any) => {
        const parameter = node.parameters[parameterName]
        return parameter !== undefined ? parameter : fallbackValue
      },
      helpers: {
        returnJsonArray: (data: IDataObject | IDataObject[]): IDataObject[] => {
          if (Array.isArray(data)) {
            return data
          }
          return [data]
        },
      },
    }

    try {
      const result = await nodeType.execute(context)
      return {
        main: result,
      }
    } catch (error) {
      console.error(`Error executing node ${node.name}:`, error)
      throw error
    }
  }

  getExecutionResult(): IRunExecutionData {
    return this.runExecutionData
  }

  getNodeExecutionData(nodeName: string): INodeExecutionData[] | undefined {
    return this.runExecutionData.resultData.runData[nodeName]
  }
}


================================================
FILE: src/lib/workflow/WorkflowEngine.ts
================================================
/**
 * Complete workflow engine with all n8n features integrated
 */

import { Workflow } from './core/Workflow'
import { WorkflowExecute } from './core/WorkflowExecute'
import { WorkflowDataProxy } from './core/WorkflowDataProxy'
import { ExpressionParser } from './core/ExpressionParser'
import { ExpressionError } from './core/ExpressionError'

// Import all node types
import { BaseNode } from './nodes/BaseNode'
import { HttpRequestNode } from './nodes/HttpRequestNode'
import { IfNode } from './nodes/IfNode'
import { WebhookNode } from './nodes/WebhookNode'
import { CodeNode } from './nodes/CodeNode'
import { SetNode } from './nodes/SetNode'
import { DialaMakeCallNode } from './nodes/DialaMakeCallNode'

import {
  IWorkflowBase,
  IRunExecutionData,
  INodeTypeRegistry,
  INodeType,
  WorkflowExecuteMode,
  IWorkflowExecuteAdditionalData,
  IExecuteFunctions,
  INodeExecutionData,
  IDataObject,
  IHttpRequestOptions
} from './types'

/**
 * Node type registry implementation
 */
class NodeTypeRegistry implements INodeTypeRegistry {
  private nodeTypes = new Map<string, INodeType>()

  constructor() {
    // Register all available node types
    this.register('httpRequest', new HttpRequestNode())
    this.register('if', new IfNode())
    this.register('webhook', new WebhookNode())
    this.register('code', new CodeNode())
    this.register('set', new SetNode())
    this.register('dialaMakeCall', new DialaMakeCallNode())
  }

  register(name: string, nodeType: INodeType): void {
    this.nodeTypes.set(name, nodeType)
  }

  getByNameAndVersion(nodeType: string, version?: number): INodeType | undefined {
    return this.nodeTypes.get(nodeType)
  }

  getByName(nodeType: string): Array<{ type: INodeType; version: number }> {
    const node = this.nodeTypes.get(nodeType)
    return node ? [{ type: node, version: 1 }] : []
  }

  getAllNodeTypes(): INodeType[] {
    return Array.from(this.nodeTypes.values())
  }
}

/**
 * Main workflow engine class
 */
export class WorkflowEngine {
  private nodeTypeRegistry: NodeTypeRegistry
  private executionId: string
  private mode: WorkflowExecuteMode

  constructor(mode: WorkflowExecuteMode = 'manual') {
    this.nodeTypeRegistry = new NodeTypeRegistry()
    this.executionId = this.generateExecutionId()
    this.mode = mode
  }

  /**
   * Execute a workflow
   */
  async execute(
    workflowData: IWorkflowBase,
    inputData?: INodeExecutionData,
    options?: {
      destinationNode?: string
      pinData?: any
      startNodes?: string[]
    }
  ): Promise<IRunExecutionData> {
    // Create workflow instance
    const workflow = new Workflow(workflowData)
    
    // Validate workflow
    const validation = workflow.validateWorkflow()
    if (!validation.valid) {
      throw new Error(`Invalid workflow: ${validation.errors.join(', ')}`)
    }

    // Create additional data for execution
    const additionalData = this.createAdditionalData(workflowData)

    // Create executor
    const workflowExecute = new WorkflowExecute(
      additionalData,
      this.mode,
      this.nodeTypeRegistry
    )

    // Prepare run data
    const runData: IRunExecutionData = {
      executionData: {
        contextData: {},
        nodeExecutionStack: [],
        waitingExecution: {},
        waitingExecutionSource: {},
      },
      resultData: {
        runData: {},
      }
    }

    // Add pinned data if provided
    if (options?.pinData) {
      workflow.pinData = options.pinData
    }

    // Execute workflow
    try {
      const result = await workflowExecute.run(
        workflow,
        runData,
        options?.destinationNode
      )

      return result
    } catch (error) {
      console.error('Workflow execution error:', error)
      runData.resultData.error = error as Error
      throw error
    }
  }

  /**
   * Create execution context
   */
  private createExecutionContext(
    workflow: Workflow,
    runData: IRunExecutionData,
    node: any,
    itemIndex: number,
    connectionInputData: IDataObject[]
  ): IExecuteFunctions {
    const dataProxy = new WorkflowDataProxy(
      workflow,
      runData,
      itemIndex,
      node.name,
      connectionInputData
    )

    return {
      getNode: () => node,
      getWorkflow: () => ({
        id: workflow.id,
        name: workflow.name,
        active: workflow.active
      }),
      getMode: () => this.mode,
      getExecutionId: () => this.executionId,
      getTimezone: () => 'UTC',
      getInstanceId: () => 'instance-1',
      getRestApiUrl: () => 'http://localhost:5678',
      continueOnFail: () => node.continueOnFail || false,
      
      getInputData: (inputIndex = 0, inputName = 'main') => connectionInputData,
      
      getNodeParameter: (parameterName: string, itemIndex: number, fallbackValue?: any) => {
        const value = node.parameters?.[parameterName]
        
        if (value === undefined) {
          return fallbackValue
        }

        // Evaluate expressions
        if (typeof value === 'string' && ExpressionParser.isExpression(value)) {
          return ExpressionParser.evaluate(value, dataProxy as any)
        }

        return value
      },

      getCredentials: async (type: string) => {
        // Mock credentials for now
        return {}
      },

      getWorkflowDataProxy: (itemIndex: number) => dataProxy as any,

      prepareOutputData: async (outputData: INodeExecutionData[][], outputIndex = 0) => {
        return outputData
      },

      putExecutionToWait: async (waitTill: Date) => {
        // Not implemented in this version
      },

      sendMessageToUI: (message: string) => {
        console.log('UI Message:', message)
      },

      helpers: {
        returnJsonArray: (data: IDataObject | IDataObject[]): IDataObject[] => {
          return Array.isArray(data) ? data : [data]
        },

        normalizeItems: (items: INodeExecutionData | INodeExecutionData[]): INodeExecutionData[] => {
          return Array.isArray(items) ? items : [items]
        },

        getBinaryDataBuffer: async (itemIndex: number, propertyName: string): Promise<Buffer> => {
          // Mock implementation
          return Buffer.from('')
        },

        prepareBinaryData: async (binaryData: Buffer, filePath?: string, mimeType?: string) => {
          return {
            data: binaryData.toString('base64'),
            mimeType: mimeType || 'application/octet-stream',
            fileName: filePath || 'file'
          }
        },

        httpRequest: async (requestOptions: IHttpRequestOptions): Promise<any> => {
          const response = await fetch(requestOptions.url, {
            method: requestOptions.method,
            headers: requestOptions.headers as HeadersInit,
            body: requestOptions.body ? JSON.stringify(requestOptions.body) : undefined,
          })

          const data = await response.json()
          
          return {
            statusCode: response.status,
            headers: Object.fromEntries(response.headers.entries()),
            body: data
          }
        },

        constructExecutionMetaData: (inputData: INodeExecutionData[], options: any) => {
          return inputData.map(item => ({
            ...item,
            pairedItem: options.itemData
          }))
        },

        assertBinaryData: async (itemIndex: number, propertyName: string) => {
          throw new Error('Binary data not found')
        },

        setBinaryDataBuffer: async (data: any, binaryData: Buffer) => {
          return {
            ...data,
            data: binaryData.toString('base64')
          }
        },

        binaryToString: async (body: Buffer, encoding = 'utf8') => {
          return body.toString(encoding as BufferEncoding)
        },

        httpRequestWithAuthentication: async (
          credentialType: string,
          requestOptions: IHttpRequestOptions
        ) => {
          // Simplified version without actual auth
          return this.helpers.httpRequest(requestOptions)
        }
      }
    } as IExecuteFunctions
  }

  /**
   * Create additional data for workflow execution
   */
  private createAdditionalData(workflowData: IWorkflowBase): IWorkflowExecuteAdditionalData {
    return {
      executionId: this.executionId,
      userId: 'user-1',
      workflowData,
      instanceId: 'instance-1',
      
      httpRequest: async (requestOptions: IHttpRequestOptions) => {
        const response = await fetch(requestOptions.url, {
          method: requestOptions.method,
          headers: requestOptions.headers as HeadersInit,
          body: requestOptions.body ? JSON.stringify(requestOptions.body) : undefined,
        })

        return response.json()
      },

      httpRequestWithAuthentication: async (
        credentialType: string,
        requestOptions: IHttpRequestOptions
      ) => {
        // Simplified version
        return this.httpRequest!(requestOptions)
      }
    }
  }

  /**
   * Generate unique execution ID
   */
  private generateExecutionId(): string {
    return `exec_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`
  }

  /**
   * Get available node types
   */
  getNodeTypes(): Array<{ name: string; description: any }> {
    return Array.from(this.nodeTypeRegistry.getAllNodeTypes()).map(nodeType => ({
      name: nodeType.description.name,
      description: nodeType.description
    }))
  }

  /**
   * Validate workflow
   */
  validateWorkflow(workflowData: IWorkflowBase): { valid: boolean; errors: string[] } {
    const workflow = new Workflow(workflowData)
    return workflow.validateWorkflow()
  }

  /**
   * Get workflow metadata
   */
  getWorkflowMetadata(workflowData: IWorkflowBase): {
    nodeCount: number
    connectionCount: number
    hasErrors: boolean
    triggerNodes: string[]
  } {
    const workflow = new Workflow(workflowData)
    const validation = workflow.validateWorkflow()
    
    let connectionCount = 0
    for (const connections of Object.values(workflow.connections)) {
      for (const outputConnections of Object.values(connections)) {
        connectionCount += outputConnections.flat().length
      }
    }

    return {
      nodeCount: workflow.nodes.length,
      connectionCount,
      hasErrors: !validation.valid,
      triggerNodes: workflow.getTriggerNodes().map(n => n.name)
    }
  }
}


================================================
FILE: src/lib/workflow/core/ExpressionError.ts
================================================
/**
 * Expression evaluation error handling
 */

export class ExpressionError extends Error {
  description: string
  context: any
  causeDetailed?: string
  
  constructor(message: string, context?: any) {
    super(message)
    this.name = 'ExpressionError'
    this.description = message
    this.context = context || {}
    
    // Maintain proper stack trace
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, ExpressionError)
    }
  }
}


================================================
FILE: src/lib/workflow/core/ExpressionParser.ts
================================================
/**
 * Advanced expression parser with full n8n syntax support
 */

import { DateTime } from 'luxon'
import jmespath from 'jmespath'
import { ExpressionError } from './ExpressionError'
import { IDataObject } from '../types'

export class ExpressionParser {
  private static readonly EXPRESSION_REGEX = /\{\{(.+?)\}\}/g
  private static readonly BLOCK_REGEX = /\$\(([^)]+)\)/g
  
  /**
   * Parse and evaluate an expression
   */
  static evaluate(expression: string, context: IDataObject): any {
    if (!this.isExpression(expression)) {
      return expression
    }

    // Handle simple expressions (single value)
    if (expression.startsWith('={{') && expression.endsWith('}}')) {
      const code = expression.slice(3, -2).trim()
      return this.evaluateCode(code, context)
    }

    // Handle mixed expressions (text with embedded expressions)
    return expression.replace(this.EXPRESSION_REGEX, (match, code) => {
      try {
        const result = this.evaluateCode(code.trim(), context)
        return result?.toString() || ''
      } catch (error) {
        throw new ExpressionError(`Error in expression: ${match}`, { expression: match, error })
      }
    })
  }

  /**
   * Check if a string contains expressions
   */
  static isExpression(value: any): boolean {
    if (typeof value !== 'string') return false
    return value.includes('{{') && value.includes('}}')
  }

  /**
   * Evaluate JavaScript code with context
   */
  private static evaluateCode(code: string, context: IDataObject): any {
    // Build evaluation context with all helper functions
    const evalContext = {
      // Core variables
      ...context,
      
      // Date/Time functions
      $now: DateTime.now(),
      $today: DateTime.now().startOf('day'),
      DateTime,
      
      // Utility functions
      $jmespath: (data: any, expression: string) => jmespath.search(data, expression),
      $exists: (path: string) => this.exists(context.$json || {}, path),
      $isEmpty: (value: any) => this.isEmpty(value),
      $isNotEmpty: (value: any) => !this.isEmpty(value),
      
      // String functions
      $lowercase: (str: string) => str?.toLowerCase(),
      $uppercase: (str: string) => str?.toUpperCase(),
      $titleCase: (str: string) => this.titleCase(str),
      $trim: (str: string) => str?.trim(),
      $replace: (str: string, search: string, replace: string) => str?.replace(new RegExp(search, 'g'), replace),
      $split: (str: string, separator: string) => str?.split(separator),
      $join: (arr: any[], separator: string) => arr?.join(separator),
      $pad: (str: string, length: number, char = ' ') => str?.padStart(length, char),
      
      // Number functions
      $round: (num: number, decimals = 0) => Math.round(num * Math.pow(10, decimals)) / Math.pow(10, decimals),
      $floor: (num: number) => Math.floor(num),
      $ceil: (num: number) => Math.ceil(num),
      $abs: (num: number) => Math.abs(num),
      $random: (min = 0, max = 1) => Math.random() * (max - min) + min,
      $min: (...nums: number[]) => Math.min(...nums),
      $max: (...nums: number[]) => Math.max(...nums),
      
      // Array functions
      $first: (arr: any[]) => arr?.[0],
      $last: (arr: any[]) => arr?.[arr.length - 1],
      $length: (value: any[] | string) => value?.length || 0,
      $unique: (arr: any[]) => [...new Set(arr)],
      $sort: (arr: any[], key?: string) => this.sortArray(arr, key),
      $reverse: (arr: any[]) => arr?.slice().reverse(),
      $slice: (arr: any[], start: number, end?: number) => arr?.slice(start, end),
      $filter: (arr: any[], condition: (item: any) => boolean) => arr?.filter(condition),
      $map: (arr: any[], transform: (item: any) => any) => arr?.map(transform),
      $reduce: (arr: any[], reducer: (acc: any, item: any) => any, initial?: any) => arr?.reduce(reducer, initial),
      
      // Object functions
      $keys: (obj: IDataObject) => Object.keys(obj || {}),
      $values: (obj: IDataObject) => Object.values(obj || {}),
      $entries: (obj: IDataObject) => Object.entries(obj || {}),
      $merge: (...objs: IDataObject[]) => Object.assign({}, ...objs),
      $pick: (obj: IDataObject, ...keys: string[]) => this.pick(obj, keys),
      $omit: (obj: IDataObject, ...keys: string[]) => this.omit(obj, keys),
      
      // Type checking
      $isString: (val: any) => typeof val === 'string',
      $isNumber: (val: any) => typeof val === 'number' && !isNaN(val),
      $isBoolean: (val: any) => typeof val === 'boolean',
      $isArray: (val: any) => Array.isArray(val),
      $isObject: (val: any) => typeof val === 'object' && val !== null && !Array.isArray(val),
      $isNull: (val: any) => val === null,
      $isUndefined: (val: any) => val === undefined,
      $isDefined: (val: any) => val !== undefined,
      
      // Type conversion
      $toString: (val: any) => String(val),
      $toNumber: (val: any) => Number(val),
      $toBoolean: (val: any) => Boolean(val),
      $toJson: (val: any) => JSON.stringify(val),
      $parseJson: (str: string) => this.parseJson(str),
      $toDate: (val: any) => new Date(val),
      $toInt: (val: any) => parseInt(val, 10),
      $toFloat: (val: any) => parseFloat(val),
      
      // Encoding/Decoding
      $base64Encode: (str: string) => Buffer.from(str).toString('base64'),
      $base64Decode: (str: string) => Buffer.from(str, 'base64').toString(),
      $urlEncode: (str: string) => encodeURIComponent(str),
      $urlDecode: (str: string) => decodeURIComponent(str),
      $htmlEscape: (str: string) => this.htmlEscape(str),
      $htmlUnescape: (str: string) => this.htmlUnescape(str),
      
      // Hash functions
      $hash: (str: string, algorithm = 'sha256') => this.hash(str, algorithm),
      
      // Logical functions
      $if: (condition: any, truthy: any, falsy: any) => condition ? truthy : falsy,
      $switch: (value: any, cases: IDataObject, defaultCase?: any) => cases[value] || defaultCase,
      $and: (...args: any[]) => args.every(Boolean),
      $or: (...args: any[]) => args.some(Boolean),
      $not: (val: any) => !val,
      
      // Math constants
      Math,
      
      // JSON/Object path access
      $: (path: string) => this.getPath(context, path)
    }

    try {
      // Create function with all context variables
      const func = new Function(...Object.keys(evalContext), `return ${code}`)
      return func(...Object.values(evalContext))
    } catch (error) {
      throw new ExpressionError(`Failed to evaluate: ${code}`, { code, error: error.message })
    }
  }

  // Helper methods
  private static exists(obj: any, path: string): boolean {
    try {
      const result = jmespath.search(obj, path)
      return result !== null && result !== undefined
    } catch {
      return false
    }
  }

  private static isEmpty(value: any): boolean {
    if (value === null || value === undefined || value === '') return true
    if (Array.isArray(value)) return value.length === 0
    if (typeof value === 'object') return Object.keys(value).length === 0
    return false
  }

  private static titleCase(str: string): string {
    if (!str) return ''
    return str.replace(/\w\S*/g, txt => 
      txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
    )
  }

  private static sortArray(arr: any[], key?: string): any[] {
    if (!arr || !Array.isArray(arr)) return []
    
    return arr.slice().sort((a, b) => {
      const aVal = key ? a[key] : a
      const bVal = key ? b[key] : b
      
      if (aVal < bVal) return -1
      if (aVal > bVal) return 1
      return 0
    })
  }

  private static pick(obj: IDataObject, keys: string[]): IDataObject {
    const result: IDataObject = {}
    for (const key of keys) {
      if (key in obj) {
        result[key] = obj[key]
      }
    }
    return result
  }

  private static omit(obj: IDataObject, keys: string[]): IDataObject {
    const result = { ...obj }
    for (const key of keys) {
      delete result[key]
    }
    return result
  }

  private static parseJson(str: string): any {
    try {
      return JSON.parse(str)
    } catch {
      return null
    }
  }

  private static htmlEscape(str: string): string {
    const map: IDataObject = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    }
    return str?.replace(/[&<>"']/g, m => map[m]) || ''
  }

  private static htmlUnescape(str: string): string {
    const map: IDataObject = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    }
    return str?.replace(/&amp;|&lt;|&gt;|&quot;|&#39;/g, m => map[m]) || ''
  }

  private static hash(str: string, algorithm: string): string {
    // Simplified hash - in production use crypto
    if (algorithm === 'md5') {
      // Simple hash for demo
      let hash = 0
      for (let i = 0; i < str.length; i++) {
        const char = str.charCodeAt(i)
        hash = ((hash << 5) - hash) + char
        hash = hash & hash
      }
      return Math.abs(hash).toString(16)
    }
    return str // Fallback
  }

  private static getPath(obj: any, path: string): any {
    const keys = path.split('.')
    let current = obj
    
    for (const key of keys) {
      if (current && typeof current === 'object' && key in current) {
        current = current[key]
      } else {
        return undefined
      }
    }
    
    return current
  }
}


================================================
FILE: src/lib/workflow/core/Workflow.ts
================================================
/**
 * Core Workflow class extracted from n8n
 * Handles workflow structure, node management, and execution flow
 */

import { IConnection, IConnections, INode, INodeType, IWorkflowBase } from '../types'

export class Workflow {
  id: string
  name: string
  nodes: INode[]
  connections: IConnections
  active: boolean
  settings: any
  staticData: any
  pinData: any

  constructor(parameters: IWorkflowBase) {
    this.id = parameters.id || 'workflow'
    this.name = parameters.name || 'Untitled Workflow'
    this.nodes = parameters.nodes || []
    this.connections = parameters.connections || {}
    this.active = parameters.active || false
    this.settings = parameters.settings || {}
    this.staticData = parameters.staticData || {}
    this.pinData = parameters.pinData || {}
  }

  /**
   * Get all nodes
   */
  getNodes(): INode[] {
    return this.nodes
  }

  /**
   * Get a specific node by name
   */
  getNode(nodeName: string): INode | null {
    return this.nodes.find(node => node.name === nodeName) || null
  }

  /**
   * Get all parent nodes of a given node
   */
  getParentNodes(nodeName: string): string[] {
    const parents: string[] = []
    
    for (const [sourceNode, outputs] of Object.entries(this.connections)) {
      for (const [outputIndex, connections] of Object.entries(outputs)) {
        for (const connectionGroup of connections) {
          for (const connection of connectionGroup) {
            if (connection.node === nodeName) {
              parents.push(sourceNode)
            }
          }
        }
      }
    }
    
    return [...new Set(parents)]
  }

  /**
   * Get all child nodes of a given node
   */
  getChildNodes(nodeName: string): string[] {
    const children: string[] = []
    const nodeConnections = this.connections[nodeName]
    
    if (nodeConnections) {
      for (const [outputIndex, connections] of Object.entries(nodeConnections)) {
        for (const connectionGroup of connections) {
          for (const connection of connectionGroup) {
            children.push(connection.node)
          }
        }
      }
    }
    
    return [...new Set(children)]
  }

  /**
   * Get all start nodes (nodes without parents)
   */
  getStartNodes(): INode[] {
    const nodesWithParents = new Set<string>()
    
    for (const [sourceNode, outputs] of Object.entries(this.connections)) {
      for (const [outputIndex, connections] of Object.entries(outputs)) {
        for (const connectionGroup of connections) {
          for (const connection of connectionGroup) {
            nodesWithParents.add(connection.node)
          }
        }
      }
    }
    
    return this.nodes.filter(node => !nodesWithParents.has(node.name))
  }

  /**
   * Check if workflow has a cycle
   */
  checkForCycles(): boolean {
    const visited = new Set<string>()
    const recursionStack = new Set<string>()
    
    const hasCycleDFS = (nodeName: string): boolean => {
      visited.add(nodeName)
      recursionStack.add(nodeName)
      
      const children = this.getChildNodes(nodeName)
      for (const child of children) {
        if (!visited.has(child)) {
          if (hasCycleDFS(child)) return true
        } else if (recursionStack.has(child)) {
          return true
        }
      }
      
      recursionStack.delete(nodeName)
      return false
    }
    
    for (const node of this.nodes) {
      if (!visited.has(node.name)) {
        if (hasCycleDFS(node.name)) return true
      }
    }
    
    return false
  }

  /**
   * Get execution order using topological sort
   */
  getExecutionOrder(): string[] {
    const visited = new Set<string>()
    const executionOrder: string[] = []
    
    const visit = (nodeName: string) => {
      if (visited.has(nodeName)) return
      visited.add(nodeName)
      
      const parents = this.getParentNodes(nodeName)
      for (const parent of parents) {
        visit(parent)
      }
      
      executionOrder.push(nodeName)
    }
    
    // Start from nodes without children (end nodes)
    const endNodes = this.nodes.filter(node => 
      this.getChildNodes(node.name).length === 0
    )
    
    for (const node of endNodes) {
      visit(node.name)
    }
    
    // Visit any remaining nodes
    for (const node of this.nodes) {
      visit(node.name)
    }
    
    return executionOrder
  }

  /**
   * Get all nodes between two nodes
   */
  getNodesBetween(startNode: string, endNode: string): string[] {
    const nodesBetween = new Set<string>()
    const visited = new Set<string>()
    
    const findPath = (current: string): boolean => {
      if (current === endNode) return true
      if (visited.has(current)) return false
      
      visited.add(current)
      
      const children = this.getChildNodes(current)
      for (const child of children) {
        if (findPath(child)) {
          nodesBetween.add(current)
          return true
        }
      }
      
      return false
    }
    
    findPath(startNode)
    return Array.from(nodesBetween)
  }

  /**
   * Get pinned data for a node
   */
  getPinDataOfNode(nodeName: string): any {
    return this.pinData?.[nodeName] || null
  }

  /**
   * Validate workflow structure
   */
  validateWorkflow(): { valid: boolean; errors: string[] } {
    const errors: string[] = []
    
    // Check for duplicate node names
    const nodeNames = new Set<string>()
    for (const node of this.nodes) {
      if (nodeNames.has(node.name)) {
        errors.push(`Duplicate node name: ${node.name}`)
      }
      nodeNames.add(node.name)
    }
    
    // Check for cycles
    if (this.checkForCycles()) {
      errors.push('Workflow contains cycles')
    }
    
    // Check connections reference existing nodes
    for (const [sourceNode, outputs] of Object.entries(this.connections)) {
      if (!this.getNode(sourceNode)) {
        errors.push(`Connection references non-existent source node: ${sourceNode}`)
      }
      
      for (const [outputIndex, connections] of Object.entries(outputs)) {
        for (const connectionGroup of connections) {
          for (const connection of connectionGroup) {
            if (!this.getNode(connection.node)) {
              errors.push(`Connection references non-existent target node: ${connection.node}`)
            }
          }
        }
      }
    }
    
    return {
      valid: errors.length === 0,
      errors
    }
  }

  /**
   * Get all trigger nodes
   */
  getTriggerNodes(): INode[] {
    return this.nodes.filter(node => {
      // Check if node type indicates it's a trigger
      // This would normally check against node type definitions
      return ['webhook', 'schedule', 'trigger'].includes(node.type.toLowerCase())
    })
  }

  /**
   * Get all nodes that can be manually executed
   */
  getManualTriggerNodes(): INode[] {
    return this.nodes.filter(node => {
      return node.type === 'manualTrigger' || 
             (this.getParentNodes(node.name).length === 0 && !this.getTriggerNodes().includes(node))
    })
  }

  /**
   * Clone the workflow
   */
  clone(): Workflow {
    return new Workflow({
      id: this.id,
      name: this.name,
      nodes: JSON.parse(JSON.stringify(this.nodes)),
      connections: JSON.parse(JSON.stringify(this.connections)),
      active: this.active,
      settings: JSON.parse(JSON.stringify(this.settings)),
      staticData: JSON.parse(JSON.stringify(this.staticData)),
      pinData: JSON.parse(JSON.stringify(this.pinData))
    })
  }
}


================================================
FILE: src/lib/workflow/core/WorkflowDataProxy.ts
================================================
/**
 * WorkflowDataProxy - Provides reactive access to workflow data
 * Extracted from n8n's workflow data proxy implementation
 */

import { Workflow } from './Workflow'
import { IRunExecutionData, ITaskData, IDataObject } from '../types'
import jmespath from 'jmespath'
import { DateTime } from 'luxon'

export class WorkflowDataProxy {
  private workflow: Workflow
  private runExecutionData: IRunExecutionData
  private itemIndex: number
  private nodeName: string
  private connectionInputData: IDataObject[]
  private defaultTimezone: string

  constructor(
    workflow: Workflow,
    runExecutionData: IRunExecutionData,
    itemIndex: number,
    nodeName: string,
    connectionInputData: IDataObject[],
    defaultTimezone: string = 'UTC'
  ) {
    this.workflow = workflow
    this.runExecutionData = runExecutionData
    this.itemIndex = itemIndex
    this.nodeName = nodeName
    this.connectionInputData = connectionInputData
    this.defaultTimezone = defaultTimezone

    // Return a proxy to handle dynamic property access
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        if (typeof prop === 'symbol') {
          return Reflect.get(target, prop, receiver)
        }

        // Handle special properties
        if (prop in target) {
          return target[prop as keyof WorkflowDataProxy]
        }

        // Handle $node access
        if (prop === '$node') {
          return this.getNodeDataProxy()
        }

        // Handle $() function
        if (prop === '$') {
          return (nodeName: string) => this.getNodeOutput(nodeName)
        }

        // Default behavior
        return Reflect.get(target, prop, receiver)
      }
    })
  }

  /**
   * Get current input data
   */
  get $json(): IDataObject {
    if (this.connectionInputData.length === 0) {
      return {}
    }
    return this.connectionInputData[this.itemIndex] || {}
  }

  /**
   * Get all input items
   */
  get $items(): IDataObject[] {
    return this.connectionInputData
  }

  /**
   * Get current item index
   */
  get $itemIndex(): number {
    return this.itemIndex
  }

  /**
   * Get workflow data
   */
  get $workflow(): any {
    return {
      id: this.workflow.id,
      name: this.workflow.name,
      active: this.workflow.active
    }
  }

  /**
   * Get execution data
   */
  get $execution(): any {
    return {
      id: 'exec_' + Date.now(),
      mode: 'manual',
      resumeUrl: undefined
    }
  }

  /**
   * Get current timestamp
   */
  get $now(): DateTime {
    return DateTime.now().setZone(this.defaultTimezone)
  }

  /**
   * Get today's date
   */
  get $today(): DateTime {
    return DateTime.now().setZone(this.defaultTimezone).startOf('day')
  }

  /**
   * JMESPath query function
   */
  $jmespath(data: any, query: string): any {
    return jmespath.search(data, query)
  }

  /**
   * Get node data proxy
   */
  private getNodeDataProxy(): any {
    const proxy: any = {}
    
    // Add data for all executed nodes
    for (const nodeName in this.runExecutionData.resultData.runData) {
      const nodeRunData = this.runExecutionData.resultData.runData[nodeName]
      
      if (nodeRunData && nodeRunData.length > 0) {
        // Get the last execution of the node
        const lastNodeExecution = nodeRunData[nodeRunData.length - 1]
        
        if (lastNodeExecution.data?.main && lastNodeExecution.data.main[0]) {
          proxy[nodeName] = {
            json: lastNodeExecution.data.main[0][0] || {},
            data: lastNodeExecution.data.main[0] || [],
            context: {},
            parameter: this.workflow.getNode(nodeName)?.parameters || {}
          }
        }
      }
    }
    
    return proxy
  }

  /**
   * Get output data from a specific node
   */
  private getNodeOutput(nodeName: string, outputIndex = 0): IDataObject[] {
    const nodeRunData = this.runExecutionData.resultData.runData[nodeName]
    
    if (!nodeRunData || nodeRunData.length === 0) {
      return []
    }
    
    const lastNodeExecution = nodeRunData[nodeRunData.length - 1]
    
    if (lastNodeExecution.data?.main && lastNodeExecution.data.main[outputIndex]) {
      return lastNodeExecution.data.main[outputIndex]
    }
    
    return []
  }

  /**
   * Get previous node output
   */
  get $prev(): any {
    const parentNodes = this.workflow.getParentNodes(this.nodeName)
    
    if (parentNodes.length === 0) {
      return null
    }
    
    // Return data from the first parent node
    const parentNodeName = parentNodes[0]
    const nodeData = this.getNodeOutput(parentNodeName)
    
    return {
      json: nodeData[0] || {},
      data: nodeData,
      name: parentNodeName,
      outputIndex: 0,
      runIndex: 0
    }
  }

  /**
   * Get input data
   */
  get $input(): any {
    return {
      all: () => this.connectionInputData,
      first: () => this.connectionInputData[0] || {},
      last: () => this.connectionInputData[this.connectionInputData.length - 1] || {},
      item: (index: number) => this.connectionInputData[index] || {},
      params: this.workflow.getNode(this.nodeName)?.parameters || {}
    }
  }

  /**
   * Get binary data proxy
   */
  get $binary(): any {
    const binaryData = this.$json._binary || this.$json.binary || {}
    
    return new Proxy(binaryData, {
      get: (target, prop) => {
        if (typeof prop === 'string' && target[prop]) {
          return target[prop]
        }
        return undefined
      }
    })
  }

  /**
   * Get position in current execution
   */
  get $position(): number {
    return this.itemIndex
  }

  /**
   * Get run index
   */
  get $runIndex(): number {
    const nodeRunData = this.runExecutionData.resultData.runData[this.nodeName]
    return nodeRunData ? nodeRunData.length : 0
  }

  /**
   * Get environment variables (mock)
   */
  get $env(): any {
    return {
      NODE_ENV: 'production',
      TZ: this.defaultTimezone
    }
  }

  /**
   * Get parameter value
   */
  $parameter(name: string, options?: any): any {
    const node = this.workflow.getNode(this.nodeName)
    if (!node) {
      return undefined
    }
    
    return node.parameters?.[name] || options?.fallback
  }

  /**
   * Evaluate expression helper
   */
  $evaluateExpression(expression: string, evaluator?: any): any {
    // This would normally use the expression evaluator
    // For now, return the expression as-is
    return expression
  }

  /**
   * Check if property exists
   */
  $exists(path: string): boolean {
    try {
      const result = jmespath.search(this.$json, path)
      return result !== null && result !== undefined
    } catch {
      return false
    }
  }

  /**
   * Check if empty
   */
  $isEmpty(value: any): boolean {
    if (value === null || value === undefined || value === '') {
      return true
    }
    
    if (Array.isArray(value)) {
      return value.length === 0
    }
    
    if (typeof value === 'object') {
      return Object.keys(value).length === 0
    }
    
    return false
  }
}


================================================
FILE: src/lib/workflow/core/WorkflowExecute.ts
================================================
/**
 * Advanced workflow execution engine extracted from n8n
 */

import { Workflow } from './Workflow'
import { WorkflowDataProxy } from './WorkflowDataProxy'
import { ExpressionError } from './ExpressionError'
import {
  IExecuteData,
  INode,
  INodeExecutionData,
  IRunExecutionData,
  ITaskData,
  IWorkflowExecuteAdditionalData,
  ExecutionStatus,
  WorkflowExecuteMode,
  IDataObject,
  IExecuteResponsePromiseData,
  INodeType,
  INodeTypeRegistry
} from '../types'

export class WorkflowExecute {
  private additionalData: IWorkflowExecuteAdditionalData
  private mode: WorkflowExecuteMode
  private workflow: Workflow
  private nodeTypeRegistry: INodeTypeRegistry

  constructor(
    additionalData: IWorkflowExecuteAdditionalData,
    mode: WorkflowExecuteMode,
    nodeTypeRegistry: INodeTypeRegistry
  ) {
    this.additionalData = additionalData
    this.mode = mode
    this.workflow = new Workflow(additionalData.workflowData)
    this.nodeTypeRegistry = nodeTypeRegistry
  }

  /**
   * Main execution entry point
   */
  async run(
    workflow: Workflow,
    runData?: IRunExecutionData,
    destinationNode?: string
  ): Promise<IRunExecutionData> {
    this.workflow = workflow

    // Initialize run data if not provided
    if (!runData) {
      runData = {
        executionData: {
          contextData: {},
          nodeExecutionStack: [],
          waitingExecution: {},
          waitingExecutionSource: {},
        },
        resultData: {
          runData: {},
          lastNodeExecuted: '',
          executionData: {
            contextData: {},
            nodeExecutionStack: [],
            waitingExecution: {},
            waitingExecutionSource: {},
          }
        }
      }
    }

    // Start from trigger/start nodes
    const startNodes = this.getStartNodes(destinationNode)
    
    // Add start nodes to execution stack
    for (const startNode of startNodes) {
      const executeData: IExecuteData = {
        node: startNode,
        data: {
          main: [[{ json: {} }]]
        },
        source: null
      }
      
      runData.executionData!.nodeExecutionStack.push(executeData)
    }

    // Process execution stack
    return await this.processRunExecutionData(workflow, runData)
  }

  /**
   * Process the execution stack
   */
  private async processRunExecutionData(
    workflow: Workflow,
    runData: IRunExecutionData
  ): Promise<IRunExecutionData> {
    const executionData = runData.executionData!
    const executionStack = executionData.nodeExecutionStack

    while (executionStack.length > 0) {
      const executeData = executionStack.shift()!
      const node = executeData.node

      // Skip disabled nodes
      if (node.disabled === true) {
        continue
      }

      // Check if node should be executed
      if (!this.shouldNodeBeExecuted(node, runData)) {
        continue
      }

      try {
        // Execute the node
        const nodeExecutionData = await this.executeNode(
          executeData,
          runData,
          workflow
        )

        // Store execution result
        if (!runData.resultData.runData[node.name]) {
          runData.resultData.runData[node.name] = []
        }
        
        const taskData: ITaskData = {
          startTime: Date.now(),
          executionTime: 0,
          executionStatus: 'success' as ExecutionStatus,
          data: nodeExecutionData
        }
        
        runData.resultData.runData[node.name].push(taskData)
        runData.resultData.lastNodeExecuted = node.name

        // Add connected nodes to execution stack
        this.addNodeToExecutionStack(
          workflow,
          node,
          nodeExecutionData,
          runData
        )

      } catch (error) {
        // Handle node execution error
        const errorData: ITaskData = {
          startTime: Date.now(),
          executionTime: 0,
          executionStatus: 'error' as ExecutionStatus,
          error: error as Error
        }

        if (!runData.resultData.runData[node.name]) {
          runData.resultData.runData[node.name] = []
        }
        
        runData.resultData.runData[node.name].push(errorData)
        runData.resultData.error = error as Error

        // Stop execution on error (unless error workflow is configured)
        break
      }
    }

    return runData
  }

  /**
   * Execute a single node
   */
  private async executeNode(
    executeData: IExecuteData,
    runData: IRunExecutionData,
    workflow: Workflow
  ): Promise<INodeExecutionData> {
    const node = executeData.node
    const nodeType = this.nodeTypeRegistry.getByNameAndVersion(node.type, node.typeVersion)

    if (!nodeType) {
      throw new Error(`Node type "${node.type}" is not known!`)
    }

    // Create execution context
    const context = this.createNodeExecutionContext(
      workflow,
      runData,
      executeData,
      nodeType
    )

    // Execute based on node execution type
    if (nodeType.execute) {
      // Regular execution
      const response = await nodeType.execute.call(context)
      return {
        main: response
      }
    } else if (nodeType.webhook) {
      // Webhook execution
      const response = await nodeType.webhook.call(context)
      return {
        webhookResponse: response
      }
    } else if (nodeType.trigger) {
      // Trigger execution
      const response = await nodeType.trigger.call(context)
      return {
        main: [response || []]
      }
    } else {
      throw new Error(`Node type "${node.type}" does not have any execution method!`)
    }
  }

  /**
   * Create node execution context
   */
  private createNodeExecutionContext(
    workflow: Workflow,
    runData: IRunExecutionData,
    executeData: IExecuteData,
    nodeType: INodeType
  ): any {
    const node = executeData.node
    const inputData = executeData.data
    
    return {
      getNode: () => node,
      getWorkflow: () => workflow,
      getMode: () => this.mode,
      getInputData: (inputIndex = 0, inputName = 'main') => {
        return inputData[inputName]?.[inputIndex] || []
      },
      getNodeParameter: (parameterName: string, itemIndex = 0, fallbackValue?: any) => {
        return this.getNodeParameter(
          workflow,
          runData,
          node,
          parameterName,
          itemIndex,
          fallbackValue
        )
      },
      helpers: {
        returnJsonArray: (data: IDataObject | IDataObject[]): IDataObject[] => {
          return Array.isArray(data) ? data : [data]
        },
        prepareBinaryData: async (binaryData: Buffer, filePath?: string, mimeType?: string) => {
          // Simplified binary data handling
          return {
            data: binaryData.toString('base64'),
            mimeType: mimeType || 'application/octet-stream',
            fileName: filePath || 'file'
          }
        }
      }
    }
  }

  /**
   * Get node parameter with expression resolution
   */
  private getNodeParameter(
    workflow: Workflow,
    runData: IRunExecutionData,
    node: INode,
    parameterName: string,
    itemIndex: number,
    fallbackValue?: any
  ): any {
    const parameter = node.parameters?.[parameterName]
    
    if (parameter === undefined) {
      return fallbackValue
    }

    // If it's an expression, evaluate it
    if (typeof parameter === 'string' && this.isExpression(parameter)) {
      const dataProxy = new WorkflowDataProxy(
        workflow,
        runData,
        itemIndex,
        node.name,
        []
      )
      
      return this.evaluateExpression(parameter, dataProxy)
    }

    return parameter
  }

  /**
   * Check if a value is an expression
   */
  private isExpression(value: string): boolean {
    return value.startsWith('={{') && value.endsWith('}}')
  }

  /**
   * Evaluate an expression
   */
  private evaluateExpression(expression: string, dataProxy: any): any {
    // Remove expression markers
    const code = expression.slice(3, -2).trim()
    
    try {
      // Create evaluation context
      const context = {
        $json: dataProxy.$json,
        $node: dataProxy.$node,
        $workflow: dataProxy.$workflow,
        $now: () => new Date(),
        $today: () => {
          const date = new Date()
          date.setHours(0, 0, 0, 0)
          return date
        },
        $jmespath: dataProxy.$jmespath,
        ...dataProxy
      }

      // Evaluate expression
      const func = new Function(...Object.keys(context), `return ${code}`)
      return func(...Object.values(context))
    } catch (error) {
      throw new ExpressionError(`Expression evaluation failed: ${error.message}`, {
        expression,
        itemIndex: dataProxy.$itemIndex
      })
    }
  }

  /**
   * Add node outputs to execution stack
   */
  private addNodeToExecutionStack(
    workflow: Workflow,
    node: INode,
    nodeExecutionData: INodeExecutionData,
    runData: IRunExecutionData
  ): void {
    const connections = workflow.connections[node.name]
    
    if (!connections) {
      return
    }

    for (const outputName in connections) {
      const outputConnections = connections[outputName]
      const outputData = nodeExecutionData[outputName]

      if (!outputData) {
        continue
      }

      for (let outputIndex = 0; outputIndex < outputConnections.length; outputIndex++) {
        const connectionGroup = outputConnections[outputIndex]
        
        for (const connection of connectionGroup) {
          const targetNode = workflow.getNode(connection.node)
          
          if (!targetNode) {
            continue
          }

          const executeData: IExecuteData = {
            node: targetNode,
            data: {
              [outputName]: outputData
            },
            source: {
              main: [{
                node: node.name,
                type: outputName as any,
                index: outputIndex
              }]
            }
          }

          runData.executionData!.nodeExecutionStack.push(executeData)
        }
      }
    }
  }

  /**
   * Check if node should be executed
   */
  private shouldNodeBeExecuted(node: INode, runData: IRunExecutionData): boolean {
    // Check if node has already been executed
    if (runData.resultData.runData[node.name]) {
      return false
    }

    // Check if node has required input data
    // This is simplified - real implementation would check all inputs
    return true
  }

  /**
   * Get start nodes for execution
   */
  private getStartNodes(destinationNode?: string): INode[] {
    if (destinationNode) {
      const node = this.workflow.getNode(destinationNode)
      return node ? [node] : []
    }

    // Get trigger nodes or nodes without inputs
    const triggerNodes = this.workflow.getTriggerNodes()
    if (triggerNodes.length > 0) {
      return triggerNodes
    }

    return this.workflow.getStartNodes()
  }
}


================================================
FILE: src/lib/workflow/nodes/BaseNode.ts
================================================
/**
 * Base node class with full n8n functionality
 */

import { 
  IExecuteFunctions,
  INodeType,
  INodeTypeDescription,
  INodeExecutionData,
  IDataObject,
  NodeParameterValue,
  INodeProperties
} from '../types'
import { ExpressionParser } from '../core/ExpressionParser'
import { WorkflowDataProxy } from '../core/WorkflowDataProxy'

export class BaseNode implements INodeType {
  description: INodeTypeDescription = {
    displayName: 'Base Node',
    name: 'baseNode',
    group: [],
    version: 1,
    description: 'Base node implementation',
    defaults: { name: 'Base Node' },
    inputs: [],
    outputs: [],
    properties: [],
  }

  /**
   * Execute method - must be overridden by subclasses
   */
  async execute(context: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    throw new Error('Execute method must be implemented by subclass')
  }

  /**
   * Process all items with expression evaluation
   */
  protected async processAllItems(
    context: IExecuteFunctions,
    processor: (item: IDataObject, index: number) => Promise<IDataObject>
  ): Promise<INodeExecutionData[][]> {
    const items = context.getInputData()
    const returnData: IDataObject[] = []

    for (let i = 0; i < items.length; i++) {
      try {
        const processedItem = await processor(items[i], i)
        returnData.push(processedItem)
      } catch (error) {
        if (context.continueOnFail()) {
          returnData.push({
            error: error.message,
            errorDetails: error
          })
        } else {
          throw error
        }
      }
    }

    return [returnData]
  }

  /**
   * Evaluate parameter with expression support
   */
  protected evaluateParameter(
    context: IExecuteFunctions,
    parameterValue: NodeParameterValue,
    itemIndex: number,
    inputData: IDataObject
  ): any {
    if (typeof parameterValue !== 'string') {
      return parameterValue
    }

    // Check if it's an expression
    if (!ExpressionParser.isExpression(parameterValue)) {
      return parameterValue
    }

    // Create context for expression evaluation
    const dataProxy = context.getWorkflowDataProxy(itemIndex)
    const evalContext = {
      $json: inputData,
      $node: dataProxy.$node,
      $workflow: dataProxy.$workflow,
      $position: itemIndex,
      $now: dataProxy.$now,
      $today: dataProxy.$today,
      $items: dataProxy.$items,
      $input: dataProxy.$input,
      $binary: dataProxy.$binary,
      $: (nodeName: string) => dataProxy.$(nodeName)
    }

    return ExpressionParser.evaluate(parameterValue, evalContext)
  }

  /**
   * Get resolved node parameters
   */
  protected getResolvedNodeParameters(
    context: IExecuteFunctions,
    itemIndex: number,
    inputData: IDataObject
  ): IDataObject {
    const resolved: IDataObject = {}
    const properties = this.description.properties

    for (const property of properties) {
      const paramValue = context.getNodeParameter(property.name, itemIndex, property.default)
      
      // Check display conditions
      if (this.shouldDisplay(property, resolved, context, itemIndex)) {
        resolved[property.name] = this.evaluateParameter(
          context,
          paramValue,
          itemIndex,
          inputData
        )
      }
    }

    return resolved
  }

  /**
   * Check if property should be displayed based on conditions
   */
  private shouldDisplay(
    property: INodeProperties,
    resolvedParams: IDataObject,
    context: IExecuteFunctions,
    itemIndex: number
  ): boolean {
    if (!property.displayOptions) return true

    const { show, hide } = property.displayOptions

    // Check show conditions
    if (show) {
      for (const [param, values] of Object.entries(show)) {
        const currentValue = resolvedParams[param] ?? context.getNodeParameter(param, itemIndex, undefined)
        if (!values?.includes(currentValue)) {
          return false
        }
      }
    }

    // Check hide conditions
    if (hide) {
      for (const [param, values] of Object.entries(hide)) {
        const currentValue = resolvedParams[param] ?? context.getNodeParameter(param, itemIndex, undefined)
        if (values?.includes(currentValue)) {
          return false
        }
      }
    }

    return true
  }

  /**
   * Helper to handle binary data
   */
  protected async handleBinaryData(
    context: IExecuteFunctions,
    itemIndex: number,
    propertyName: string
  ): Promise<Buffer | null> {
    try {
      return await context.helpers.getBinaryDataBuffer(itemIndex, propertyName)
    } catch {
      return null
    }
  }

  /**
   * Helper to prepare output with proper metadata
   */
  protected prepareOutputData(
    items: IDataObject[],
    inputItems: INodeExecutionData[]
  ): INodeExecutionData[][] {
    return [items.map(item => ({ json: item }))]
  }

  /**
   * Helper for retryable operations
   */
  protected async retryOperation<T>(
    operation: () => Promise<T>,
    maxRetries: number = 3,
    delay: number = 1000
  ): Promise<T> {
    let lastError: Error

    for (let i = 0; i < maxRetries; i++) {
      try {
        return await operation()
      } catch (error) {
        lastError = error
        if (i < maxRetries - 1) {
          await new Promise(resolve => setTimeout(resolve, delay * (i + 1)))
        }
      }
    }

    throw lastError!
  }

  /**
   * Validate required parameters
   */
  protected validateRequiredParameters(
    params: IDataObject,
    required: string[]
  ): void {
    const missing = required.filter(param => !params[param])
    if (missing.length > 0) {
      throw new Error(`Missing required parameters: ${missing.join(', ')}`)
    }
  }

  /**
   * Transform data based on property mapping
   */
  protected transformDataByMapping(
    inputData: IDataObject,
    mapping: Record<string, string>
  ): IDataObject {
    const output: IDataObject = {}

    for (const [outputKey, inputPath] of Object.entries(mapping)) {
      const value = this.getValueByPath(inputData, inputPath)
      if (value !== undefined) {
        output[outputKey] = value
      }
    }

    return output
  }

  /**
   * Get value from object by dot notation path
   */
  private getValueByPath(obj: any, path: string): any {
    return path.split('.').reduce((current, key) => current?.[key], obj)
  }

  /**
   * Set value in object by dot notation path
   */
  protected setValueByPath(obj: any, path: string, value: any): void {
    const keys = path.split('.')
    const lastKey = keys.pop()!
    const target = keys.reduce((current, key) => {
      if (!current[key]) current[key] = {}
      return current[key]
    }, obj)
    target[lastKey] = value
  }
}


================================================
FILE: src/lib/workflow/nodes/CodeNode.ts
================================================
/**
 * Advanced Code node with sandboxed execution
 */

import { BaseNode } from './BaseNode'
import {
  IExecuteFunctions,
  INodeExecutionData,
  INodeTypeDescription,
  IDataObject
} from '../types'

export class CodeNode extends BaseNode {
  description: INodeTypeDescription = {
    displayName: 'Code',
    name: 'code',
    icon: 'code',
    group: ['transform'],
    version: 1,
    description: 'Execute custom JavaScript code',
    defaults: {
      name: 'Code',
    },
    inputs: ['main'],
    outputs: ['main'],
    properties: [
      {
        displayName: 'Language',
        name: 'language',
        type: 'options',
        options: [
          { name: 'JavaScript', value: 'javascript' },
          { name: 'Python (Planned)', value: 'python' },
        ],
        default: 'javascript',
        description: 'The programming language to use',
      },
      {
        displayName: 'Code',
        name: 'jsCode',
        type: 'string',
        typeOptions: {
          alwaysOpenEditWindow: true,
          rows: 10,
        },
        default: `// Available variables:
// - $input: The input data
// - $json: The current item's JSON data
// - $node: Data from other nodes
// - $workflow: Workflow metadata
// - $now: Current datetime
// - $today: Today's date at midnight
// - $items: All input items

// Example: Process each item
const items = $input.all();

return items.map(item => {
  return {
    ...item.json,
    processedAt: $now.toISO(),
    itemCount: items.length
  };
});`,
        description: 'JavaScript code to execute',
        displayOptions: {
          show: {
            language: ['javascript'],
          },
        },
      },
      {
        displayName: 'Mode',
        name: 'mode',
        type: 'options',
        options: [
          {
            name: 'Run Once for All Items',
            value: 'runOnceForAllItems',
            description: 'Run code once with all items available',
          },
          {
            name: 'Run Once for Each Item',
            value: 'runOnceForEachItem',
            description: 'Run code for each item individually',
          },
        ],
        default: 'runOnceForAllItems',
        description: 'How to run the code',
      },
    ],
  }

  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    const mode = this.getNodeParameter('mode', 0) as string
    const jsCode = this.getNodeParameter('jsCode', 0) as string
    const items = this.getInputData()

    if (mode === 'runOnceForAllItems') {
      // Run code once with all items
      const result = await this.runCode(jsCode, items, 0)
      
      // Ensure result is an array
      const resultArray = Array.isArray(result) ? result : [result]
      
      return [resultArray.map(item => ({
        json: typeof item === 'object' ? item : { result: item }
      }))]
    } else {
      // Run code for each item
      const returnData: IDataObject[] = []
      
      for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
        try {
          const result = await this.runCode(jsCode, [items[itemIndex]], itemIndex)
          
          if (Array.isArray(result)) {
            returnData.push(...result)
          } else {
            returnData.push(typeof result === 'object' ? result : { result })
          }
        } catch (error) {
          if (this.continueOnFail()) {
            returnData.push({
              error: error.message,
              errorDetails: error
            })
          } else {
            throw error
          }
        }
      }
      
      return [returnData.map(item => ({ json: item }))]
    }
  }

  private async runCode(
    code: string,
    items: INodeExecutionData[],
    itemIndex: number
  ): Promise<any> {
    // Get workflow data proxy for expressions
    const dataProxy = this.getWorkflowDataProxy(itemIndex)
    
    // Create execution context
    const context = {
      // Input data access
      $input: {
        all: () => items.map(item => item.json),
        first: () => items[0]?.json || {},
        last: () => items[items.length - 1]?.json || {},
        item: (index = 0) => items[index]?.json || {},
      },
      
      // Current item
      $json: items[itemIndex]?.json || {},
      $binary: items[itemIndex]?.binary || {},
      
      // Workflow data
      $node: dataProxy.$node,
      $workflow: dataProxy.$workflow,
      $execution: dataProxy.$execution,
      
      // Date/time helpers
      $now: dataProxy.$now,
      $today: dataProxy.$today,
      DateTime: (await import('luxon')).DateTime,
      
      // Utility functions
      $items: (nodeName?: string) => {
        if (nodeName) {
          return dataProxy.$node[nodeName]?.data || []
        }
        return items.map(item => item.json)
      },
      
      // Helper functions
      $: dataProxy.$,
      $jmespath: dataProxy.$jmespath,
      
      // Built-in helpers
      console: {
        log: (...args: any[]) => console.log('[Code]', ...args),
        error: (...args: any[]) => console.error('[Code]', ...args),
        warn: (...args: any[]) => console.warn('[Code]', ...args),
      },
      
      // Safe JSON methods
      JSON: {
        parse: JSON.parse,
        stringify: JSON.stringify,
      },
      
      // Safe Object methods
      Object: {
        keys: Object.keys,
        values: Object.values,
        entries: Object.entries,
        assign: Object.assign,
        fromEntries: Object.fromEntries,
      },
      
      // Safe Array methods
      Array: {
        isArray: Array.isArray,
        from: Array.from,
      },
      
      // Math functions
      Math,
      
      // String/Number constructors
      String,
      Number,
      Boolean,
      
      // Promise support
      Promise,
      
      // Async/await support
      async: true,
    }

    try {
      // Create function with async support
      const AsyncFunction = Object.getPrototypeOf(async function(){}).constructor
      const func = new AsyncFunction(...Object.keys(context), code)
      
      // Execute code
      const result = await func(...Object.values(context))
      
      return result
    } catch (error) {
      throw new Error(`Code execution failed: ${error.message}`)
    }
  }
}


================================================
FILE: src/lib/workflow/nodes/DialaMakeCallNode.ts
================================================
/**
 * Diala Make Call node - Custom node for voice agent calls
 */

import { BaseNode } from './BaseNode'
import {
  IExecuteFunctions,
  INodeExecutionData,
  INodeTypeDescription,
  IDataObject
} from '../types'

export class DialaMakeCallNode extends BaseNode {
  description: INodeTypeDescription = {
    displayName: 'Make Call',
    name: 'dialaMakeCall',
    icon: 'phone',
    group: ['action'],
    version: 1,
    description: 'Initiate a voice call using Diala voice agents',
    defaults: {
      name: 'Make Call',
    },
    inputs: ['main'],
    outputs: ['main'],
    properties: [
      {
        displayName: 'Phone Number',
        name: 'phoneNumber',
        type: 'string',
        default: '',
        placeholder: '+1234567890',
        required: true,
        description: 'Phone number to call (with country code)',
      },
      {
        displayName: 'Agent',
        name: 'agent',
        type: 'options',
        typeOptions: {
          loadOptionsMethod: 'getAgents',
        },
        options: [
          { name: 'Default Agent', value: 'default' },
          { name: 'Sales Agent', value: 'sales' },
          { name: 'Support Agent', value: 'support' },
          { name: 'Custom Agent', value: 'custom' },
        ],
        default: 'default',
        description: 'Voice agent to use for the call',
      },
      {
        displayName: 'Voice',
        name: 'voice',
        type: 'options',
        options: [
          { name: 'Alloy', value: 'alloy' },
          { name: 'Echo', value: 'echo' },
          { name: 'Fable', value: 'fable' },
          { name: 'Onyx', value: 'onyx' },
          { name: 'Nova', value: 'nova' },
          { name: 'Shimmer', value: 'shimmer' },
        ],
        default: 'alloy',
        description: 'Voice to use for the agent',
      },
      {
        displayName: 'Initial Message',
        name: 'initialMessage',
        type: 'string',
        typeOptions: {
          rows: 4,
        },
        default: 'Hello! This is an automated call from {{$workflow.name}}.',
        description: 'Initial message to speak when call is answered',
      },
      {
        displayName: 'Call Purpose',
        name: 'purpose',
        type: 'options',
        options: [
          { name: 'Information', value: 'info' },
          { name: 'Sales', value: 'sales' },
          { name: 'Support', value: 'support' },
          { name: 'Survey', value: 'survey' },
          { name: 'Reminder', value: 'reminder' },
          { name: 'Custom', value: 'custom' },
        ],
        default: 'info',
        description: 'Purpose of the call',
      },
      {
        displayName: 'Variables',
        name: 'variables',
        type: 'fixedCollection',
        typeOptions: {
          multipleValues: true,
        },
        default: {},
        options: [
          {
            name: 'variable',
            displayName: 'Variable',
            values: [
              {
                displayName: 'Name',
                name: 'name',
                type: 'string',
                default: '',
                placeholder: 'customerName',
                description: 'Variable name to pass to agent',
              },
              {
                displayName: 'Value',
                name: 'value',
                type: 'string',
                default: '',
                description: 'Variable value',
              },
            ],
          },
        ],
        description: 'Variables to pass to the voice agent',
      },
      {
        displayName: 'Additional Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        options: [
          {
            displayName: 'Max Call Duration',
            name: 'maxDuration',
            type: 'number',
            default: 300,
            description: 'Maximum call duration in seconds',
          },
          {
            displayName: 'Record Call',
            name: 'recordCall',
            type: 'boolean',
            default: false,
            description: 'Whether to record the call',
          },
          {
            displayName: 'Transcribe Call',
            name: 'transcribeCall',
            type: 'boolean',
            default: true,
            description: 'Whether to transcribe the call',
          },
          {
            displayName: 'Wait for Completion',
            name: 'waitForCompletion',
            type: 'boolean',
            default: false,
            description: 'Whether to wait for call to complete before continuing',
          },
          {
            displayName: 'Retry on Busy',
            name: 'retryOnBusy',
            type: 'boolean',
            default: true,
            description: 'Whether to retry if line is busy',
          },
          {
            displayName: 'Retry Attempts',
            name: 'retryAttempts',
            type: 'number',
            displayOptions: {
              show: {
                retryOnBusy: [true],
              },
            },
            default: 3,
            description: 'Number of retry attempts',
          },
          {
            displayName: 'Language',
            name: 'language',
            type: 'options',
            options: [
              { name: 'English', value: 'en' },
              { name: 'Spanish', value: 'es' },
              { name: 'French', value: 'fr' },
              { name: 'German', value: 'de' },
              { name: 'Italian', value: 'it' },
              { name: 'Portuguese', value: 'pt' },
              { name: 'Dutch', value: 'nl' },
              { name: 'Russian', value: 'ru' },
              { name: 'Chinese', value: 'zh' },
              { name: 'Japanese', value: 'ja' },
              { name: 'Korean', value: 'ko' },
            ],
            default: 'en',
            description: 'Language for the conversation',
          },
          {
            displayName: 'Webhook URL',
            name: 'webhookUrl',
            type: 'string',
            default: '',
            description: 'URL to receive call events and updates',
          },
        ],
      },
    ],
  }

  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    return this.processAllItems(this, async (item, itemIndex) => {
      // Get parameters
      const phoneNumber = this.getNodeParameter('phoneNumber', itemIndex) as string
      const agent = this.getNodeParameter('agent', itemIndex) as string
      const voice = this.getNodeParameter('voice', itemIndex) as string
      const initialMessage = this.getNodeParameter('initialMessage', itemIndex) as string
      const purpose = this.getNodeParameter('purpose', itemIndex) as string
      const variables = this.getNodeParameter('variables', itemIndex, {}) as any
      const options = this.getNodeParameter('options', itemIndex, {}) as any
      
      // Validate phone number
      if (!phoneNumber || !phoneNumber.match(/^\+?[1-9]\d{1,14}$/)) {
        throw new Error('Invalid phone number format')
      }
      
      // Build variables object
      const callVariables: IDataObject = {}
      if (variables.variable) {
        for (const variable of variables.variable) {
          if (variable.name) {
            callVariables[variable.name] = variable.value
          }
        }
      }
      
      // Prepare call request
      const callRequest = {
        to: phoneNumber,
        agent: {
          id: agent,
          voice,
          language: options.language || 'en',
          initialMessage: this.evaluateParameter(this, initialMessage, itemIndex, item),
        },
        purpose,
        variables: callVariables,
        options: {
          maxDuration: options.maxDuration || 300,
          recordCall: options.recordCall || false,
          transcribeCall: options.transcribeCall !== false,
          webhookUrl: options.webhookUrl,
        },
        metadata: {
          workflowId: this.getWorkflow().id,
          executionId: this.getExecutionId(),
          nodeId: this.getNode().id,
          itemIndex,
        },
      }
      
      // Make the call (simulated for now)
      const callResponse = await this.makeCall(callRequest, options)
      
      return {
        ...item,
        call: callResponse,
      }
    })
  }

  private async makeCall(callRequest: any, options: any): Promise<IDataObject> {
    // Simulate API call to Diala calling service
    // In production, this would make an actual API request
    
    const callId = `call_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`
    
    // Simulate call initiation
    const response: IDataObject = {
      callId,
      status: 'initiated',
      startTime: new Date().toISOString(),
      to: callRequest.to,
      agent: callRequest.agent.id,
      voice: callRequest.agent.voice,
      purpose: callRequest.purpose,
      variables: callRequest.variables,
    }
    
    // If wait for completion is enabled, simulate call completion
    if (options.waitForCompletion) {
      await new Promise(resolve => setTimeout(resolve, 2000)) // Simulate delay
      
      response.status = 'completed'
      response.endTime = new Date().toISOString()
      response.duration = 45 // seconds
      response.outcome = 'answered'
      response.transcription = 'Hello, this is a test call transcript...'
      response.summary = 'Call completed successfully. Customer was interested in the product.'
      response.sentiment = 'positive'
      response.keyPoints = [
        'Customer expressed interest',
        'Scheduled follow-up for next week',
        'Requested more information via email',
      ]
    }
    
    return response
  }
}


================================================
FILE: src/lib/workflow/nodes/HttpRequestNode.ts
================================================
/**
 * Advanced HTTP Request node with full n8n functionality
 */

import { BaseNode } from './BaseNode'
import {
  IExecuteFunctions,
  INodeExecutionData,
  INodeTypeDescription,
  IDataObject,
  IHttpRequestOptions
} from '../types'

export class HttpRequestNode extends BaseNode {
  description: INodeTypeDescription = {
    displayName: 'HTTP Request',
    name: 'httpRequest',
    icon: 'globe',
    group: ['transform'],
    version: 1,
    description: 'Makes HTTP requests and returns the response',
    defaults: {
      name: 'HTTP Request',
    },
    inputs: ['main'],
    outputs: ['main'],
    credentials: [
      {
        name: 'httpBasicAuth',
        required: false,
      },
      {
        name: 'httpBearerTokenAuth',
        required: false,
      },
    ],
    properties: [
      {
        displayName: 'Method',
        name: 'method',
        type: 'options',
        options: [
          { name: 'DELETE', value: 'DELETE' },
          { name: 'GET', value: 'GET' },
          { name: 'HEAD', value: 'HEAD' },
          { name: 'PATCH', value: 'PATCH' },
          { name: 'POST', value: 'POST' },
          { name: 'PUT', value: 'PUT' },
        ],
        default: 'GET',
        description: 'The request method to use',
      },
      {
        displayName: 'URL',
        name: 'url',
        type: 'string',
        default: '',
        placeholder: 'https://example.com/endpoint',
        required: true,
        description: 'The URL to make the request to',
      },
      {
        displayName: 'Authentication',
        name: 'authentication',
        type: 'options',
        options: [
          { name: 'None', value: 'none' },
          { name: 'Basic Auth', value: 'basicAuth' },
          { name: 'Bearer Token', value: 'bearerToken' },
          { name: 'Header Auth', value: 'headerAuth' },
        ],
        default: 'none',
      },
      {
        displayName: 'Send Query Parameters',
        name: 'sendQuery',
        type: 'boolean',
        default: false,
        description: 'Whether to send query parameters',
      },
      {
        displayName: 'Query Parameters',
        name: 'queryParameters',
        type: 'fixedCollection',
        displayOptions: {
          show: {
            sendQuery: [true],
          },
        },
        typeOptions: {
          multipleValues: true,
        },
        default: {},
        options: [
          {
            name: 'parameter',
            displayName: 'Parameter',
            values: [
              {
                displayName: 'Name',
                name: 'name',
                type: 'string',
                default: '',
              },
              {
                displayName: 'Value',
                name: 'value',
                type: 'string',
                default: '',
              },
            ],
          },
        ],
      },
      {
        displayName: 'Send Headers',
        name: 'sendHeaders',
        type: 'boolean',
        default: false,
        description: 'Whether to send custom headers',
      },
      {
        displayName: 'Headers',
        name: 'headers',
        type: 'fixedCollection',
        displayOptions: {
          show: {
            sendHeaders: [true],
          },
        },
        typeOptions: {
          multipleValues: true,
        },
        default: {},
        options: [
          {
            name: 'header',
            displayName: 'Header',
            values: [
              {
                displayName: 'Name',
                name: 'name',
                type: 'string',
                default: '',
              },
              {
                displayName: 'Value',
                name: 'value',
                type: 'string',
                default: '',
              },
            ],
          },
        ],
      },
      {
        displayName: 'Send Body',
        name: 'sendBody',
        type: 'boolean',
        displayOptions: {
          show: {
            method: ['PATCH', 'POST', 'PUT'],
          },
        },
        default: false,
        description: 'Whether to send a body',
      },
      {
        displayName: 'Body Content Type',
        name: 'bodyContentType',
        type: 'options',
        displayOptions: {
          show: {
            sendBody: [true],
            method: ['PATCH', 'POST', 'PUT'],
          },
        },
        options: [
          { name: 'JSON', value: 'json' },
          { name: 'RAW/Text', value: 'raw' },
          { name: 'Form Data', value: 'form' },
          { name: 'Form URL Encoded', value: 'urlencoded' },
        ],
        default: 'json',
      },
      {
        displayName: 'Body',
        name: 'bodyJson',
        type: 'json',
        displayOptions: {
          show: {
            sendBody: [true],
            bodyContentType: ['json'],
            method: ['PATCH', 'POST', 'PUT'],
          },
        },
        default: '{\n  "key": "value"\n}',
        description: 'The JSON body to send',
      },
      {
        displayName: 'Body',
        name: 'bodyRaw',
        type: 'string',
        displayOptions: {
          show: {
            sendBody: [true],
            bodyContentType: ['raw'],
            method: ['PATCH', 'POST', 'PUT'],
          },
        },
        default: '',
        description: 'The raw body to send',
      },
      {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        options: [
          {
            displayName: 'Ignore SSL Issues',
            name: 'ignoreSslIssues',
            type: 'boolean',
            default: false,
            description: 'Whether to ignore SSL certificate validation',
          },
          {
            displayName: 'Response Format',
            name: 'responseFormat',
            type: 'options',
            options: [
              { name: 'JSON', value: 'json' },
              { name: 'Text', value: 'text' },
              { name: 'Binary', value: 'binary' },
            ],
            default: 'json',
            description: 'The format in which to return the response',
          },
          {
            displayName: 'Timeout',
            name: 'timeout',
            type: 'number',
            default: 30000,
            description: 'Request timeout in milliseconds',
          },
          {
            displayName: 'Follow Redirects',
            name: 'followRedirects',
            type: 'boolean',
            default: true,
            description: 'Whether to follow HTTP redirects',
          },
          {
            displayName: 'Follow All Redirects',
            name: 'followAllRedirects',
            type: 'boolean',
            default: false,
            description: 'Whether to follow all redirects (including non-GET)',
          },
          {
            displayName: 'Max Redirects',
            name: 'maxRedirects',
            type: 'number',
            default: 5,
            description: 'Maximum number of redirects to follow',
          },
          {
            displayName: 'Response Headers',
            name: 'responseHeaders',
            type: 'boolean',
            default: false,
            description: 'Whether to return response headers',
          },
          {
            displayName: 'Full Response',
            name: 'fullResponse',
            type: 'boolean',
            default: false,
            description: 'Whether to return the full response object',
          },
        ],
      },
    ],
  }

  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    return this.processAllItems(this, async (item, itemIndex) => {
      // Get resolved parameters
      const params = this.getResolvedNodeParameters(this, itemIndex, item)
      
      // Build request options
      const requestOptions: IHttpRequestOptions = {
        method: params.method as string,
        url: params.url as string,
        headers: {},
        qs: {},
        timeout: params.options?.timeout || 30000,
        json: params.bodyContentType === 'json',
        rejectUnauthorized: !params.options?.ignoreSslIssues,
      }

      // Add query parameters
      if (params.sendQuery && params.queryParameters?.parameter) {
        const queryParams = params.queryParameters.parameter as any[]
        for (const param of queryParams) {
          if (param.name) {
            requestOptions.qs![param.name] = param.value
          }
        }
      }

      // Add headers
      if (params.sendHeaders && params.headers?.header) {
        const headers = params.headers.header as any[]
        for (const header of headers) {
          if (header.name) {
            requestOptions.headers![header.name] = header.value
          }
        }
      }

      // Add body
      if (params.sendBody && ['PATCH', 'POST', 'PUT'].includes(params.method as string)) {
        switch (params.bodyContentType) {
          case 'json':
            try {
              requestOptions.body = JSON.parse(params.bodyJson as string)
            } catch {
              requestOptions.body = params.bodyJson
            }
            break
          case 'raw':
            requestOptions.body = params.bodyRaw
            break
          case 'form':
          case 'urlencoded':
            // Handle form data
            requestOptions.headers!['Content-Type'] = 
              params.bodyContentType === 'form' 
                ? 'multipart/form-data' 
                : 'application/x-www-form-urlencoded'
            break
        }
      }

      // Handle authentication
      if (params.authentication !== 'none') {
        switch (params.authentication) {
          case 'basicAuth':
            const basicCreds = await this.getCredentials('httpBasicAuth', itemIndex)
            requestOptions.auth = {
              username: basicCreds.user as string,
              password: basicCreds.password as string,
            }
            break
          case 'bearerToken':
            const bearerCreds = await this.getCredentials('httpBearerTokenAuth', itemIndex)
            requestOptions.headers!['Authorization'] = `Bearer ${bearerCreds.token}`
            break
        }
      }

      // Make the request
      try {
        const response = await this.helpers.httpRequest(requestOptions)
        
        // Format response based on options
        if (params.options?.fullResponse) {
          return {
            statusCode: response.statusCode,
            headers: response.headers,
            body: response.body,
            request: {
              url: requestOptions.url,
              method: requestOptions.method,
              headers: requestOptions.headers,
            },
          }
        } else if (params.options?.responseHeaders) {
          return {
            headers: response.headers,
            data: response.body,
          }
        } else {
          return response.body
        }
      } catch (error) {
        throw new Error(`HTTP Request failed: ${error.message}`)
      }
    })
  }
}


================================================
FILE: src/lib/workflow/nodes/IfNode.ts
================================================
/**
 * If/Conditional node with advanced logic support
 */

import { BaseNode } from './BaseNode'
import {
  IExecuteFunctions,
  INodeExecutionData,
  INodeTypeDescription,
  IDataObject
} from '../types'
import { ExpressionParser } from '../core/ExpressionParser'

export class IfNode extends BaseNode {
  description: INodeTypeDescription = {
    displayName: 'If',
    name: 'if',
    icon: 'code-branch',
    group: ['transform'],
    version: 1,
    description: 'Splits data based on conditions',
    defaults: {
      name: 'If',
    },
    inputs: ['main'],
    outputs: ['main', 'main'],
    outputNames: ['True', 'False'],
    properties: [
      {
        displayName: 'Conditions',
        name: 'conditions',
        type: 'fixedCollection',
        typeOptions: {
          multipleValues: true,
        },
        default: {},
        options: [
          {
            name: 'condition',
            displayName: 'Condition',
            values: [
              {
                displayName: 'Value 1',
                name: 'value1',
                type: 'string',
                default: '',
                description: 'First value to compare',
              },
              {
                displayName: 'Operation',
                name: 'operation',
                type: 'options',
                options: [
                  { name: 'Equals', value: 'equals' },
                  { name: 'Not Equals', value: 'notEquals' },
                  { name: 'Contains', value: 'contains' },
                  { name: 'Not Contains', value: 'notContains' },
                  { name: 'Starts With', value: 'startsWith' },
                  { name: 'Ends With', value: 'endsWith' },
                  { name: 'Greater Than', value: 'gt' },
                  { name: 'Less Than', value: 'lt' },
                  { name: 'Greater Than or Equal', value: 'gte' },
                  { name: 'Less Than or Equal', value: 'lte' },
                  { name: 'Is Empty', value: 'isEmpty' },
                  { name: 'Is Not Empty', value: 'isNotEmpty' },
                  { name: 'Regex Match', value: 'regex' },
                  { name: 'Is True', value: 'isTrue' },
                  { name: 'Is False', value: 'isFalse' },
                  { name: 'Is Null', value: 'isNull' },
                  { name: 'Is Not Null', value: 'isNotNull' },
                ],
                default: 'equals',
              },
              {
                displayName: 'Value 2',
                name: 'value2',
                type: 'string',
                displayOptions: {
                  hide: {
                    operation: [
                      'isEmpty',
                      'isNotEmpty',
                      'isTrue',
                      'isFalse',
                      'isNull',
                      'isNotNull',
                    ],
                  },
                },
                default: '',
                description: 'Second value to compare',
              },
            ],
          },
        ],
      },
      {
        displayName: 'Combine Conditions',
        name: 'combineConditions',
        type: 'options',
        options: [
          { name: 'AND', value: 'and', description: 'All conditions must be true' },
          { name: 'OR', value: 'or', description: 'Any condition must be true' },
        ],
        default: 'and',
        description: 'How to combine multiple conditions',
      },
    ],
  }

  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    const items = this.getInputData()
    const trueItems: IDataObject[] = []
    const falseItems: IDataObject[] = []

    for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
      const item = items[itemIndex]
      const params = this.getResolvedNodeParameters(this, itemIndex, item)
      
      const conditionMet = this.evaluateConditions(
        params.conditions?.condition || [],
        params.combineConditions as string,
        item,
        itemIndex
      )

      if (conditionMet) {
        trueItems.push(item)
      } else {
        falseItems.push(item)
      }
    }

    return [
      trueItems.map(item => ({ json: item })),
      falseItems.map(item => ({ json: item }))
    ]
  }

  private evaluateConditions(
    conditions: any[],
    combineMode: string,
    item: IDataObject,
    itemIndex: number
  ): boolean {
    if (conditions.length === 0) {
      return true
    }

    const results = conditions.map(condition => 
      this.evaluateCondition(condition, item, itemIndex)
    )

    if (combineMode === 'and') {
      return results.every(result => result === true)
    } else {
      return results.some(result => result === true)
    }
  }

  private evaluateCondition(
    condition: any,
    item: IDataObject,
    itemIndex: number
  ): boolean {
    const value1 = this.evaluateParameter(this, condition.value1, itemIndex, item)
    const value2 = condition.value2 !== undefined 
      ? this.evaluateParameter(this, condition.value2, itemIndex, item)
      : undefined
    const operation = condition.operation

    switch (operation) {
      case 'equals':
        return value1 == value2
      case 'notEquals':
        return value1 != value2
      case 'contains':
        return String(value1).includes(String(value2))
      case 'notContains':
        return !String(value1).includes(String(value2))
      case 'startsWith':
        return String(value1).startsWith(String(value2))
      case 'endsWith':
        return String(value1).endsWith(String(value2))
      case 'gt':
        return Number(value1) > Number(value2)
      case 'lt':
        return Number(value1) < Number(value2)
      case 'gte':
        return Number(value1) >= Number(value2)
      case 'lte':
        return Number(value1) <= Number(value2)
      case 'isEmpty':
        return this.isEmpty(value1)
      case 'isNotEmpty':
        return !this.isEmpty(value1)
      case 'regex':
        try {
          const regex = new RegExp(String(value2))
          return regex.test(String(value1))
        } catch {
          return false
        }
      case 'isTrue':
        return value1 === true || value1 === 'true' || value1 === 1
      case 'isFalse':
        return value1 === false || value1 === 'false' || value1 === 0
      case 'isNull':
        return value1 === null || value1 === undefined
      case 'isNotNull':
        return value1 !== null && value1 !== undefined
      default:
        return false
    }
  }

  private isEmpty(value: any): boolean {
    if (value === null || value === undefined || value === '') {
      return true
    }
    if (Array.isArray(value)) {
      return value.length === 0
    }
    if (typeof value === 'object') {
      return Object.keys(value).length === 0
    }
    return false
  }
}


================================================
FILE: src/lib/workflow/nodes/index.ts
================================================
/**
 * Node implementations for the workflow system
 */

import { NodeType, IExecuteContext, INodeExecutionData, IDataObject } from '../workflow-executor'
import { ExpressionEvaluator } from '../expression-evaluator'

export class WebhookNode extends NodeType {
  description = {
    displayName: 'Webhook',
    name: 'webhook',
    group: ['trigger'],
    version: 1,
    description: 'Starts workflow on webhook call',
    defaults: {
      name: 'Webhook',
    },
    inputs: [],
    outputs: ['main'],
    properties: [
      {
        displayName: 'Path',
        name: 'path',
        type: 'string',
        default: '',
        required: true,
        description: 'The path to listen for webhook calls',
      },
      {
        displayName: 'Method',
        name: 'method',
        type: 'options',
        options: [
          { name: 'GET', value: 'GET' },
          { name: 'POST', value: 'POST' },
          { name: 'PUT', value: 'PUT' },
          { name: 'DELETE', value: 'DELETE' },
        ],
        default: 'POST',
        description: 'The HTTP method to listen for',
      },
    ],
  }

  async execute(context: IExecuteContext): Promise<INodeExecutionData[][]> {
    // In a real implementation, this would receive data from the webhook
    // For now, return mock data
    const webhookData = {
      headers: {
        'content-type': 'application/json',
      },
      body: {
        message: 'Webhook triggered',
        timestamp: new Date().toISOString(),
      },
      query: {},
    }

    return [[webhookData]]
  }
}

export class HttpRequestNode extends NodeType {
  description = {
    displayName: 'HTTP Request',
    name: 'httpRequest',
    group: ['transform'],
    version: 1,
    description: 'Makes HTTP requests',
    defaults: {
      name: 'HTTP Request',
    },
    inputs: ['main'],
    outputs: ['main'],
    properties: [
      {
        displayName: 'Method',
        name: 'method',
        type: 'options',
        options: [
          { name: 'GET', value: 'GET' },
          { name: 'POST', value: 'POST' },
          { name: 'PUT', value: 'PUT' },
          { name: 'DELETE', value: 'DELETE' },
          { name: 'PATCH', value: 'PATCH' },
        ],
        default: 'GET',
        description: 'The HTTP method to use',
      },
      {
        displayName: 'URL',
        name: 'url',
        type: 'string',
        default: '',
        required: true,
        description: 'The URL to make the request to',
      },
      {
        displayName: 'Headers',
        name: 'headers',
        type: 'json',
        default: '{}',
        description: 'Headers to send with the request',
      },
      {
        displayName: 'Body',
        name: 'body',
        type: 'json',
        default: '{}',
        description: 'Body to send with the request',
      },
    ],
  }

  async execute(context: IExecuteContext): Promise<INodeExecutionData[][]> {
    const items = context.getInputData()
    const returnData: IDataObject[] = []
    
    const method = context.getNodeParameter('method') as string
    const url = context.getNodeParameter('url') as string
    const headers = context.getNodeParameter('headers', 0, {})
    const body = context.getNodeParameter('body', 0, {})

    for (let i = 0; i < items.length; i++) {
      try {
        // Create expression evaluator for this item
        const evaluator = new ExpressionEvaluator({}, {}, i)
        
        // Resolve expressions in parameters
        const resolvedUrl = evaluator.evaluate(url, items[i])
        const resolvedHeaders = evaluator.evaluateAll(headers, i)
        const resolvedBody = evaluator.evaluateAll(body, i)

        // Make the HTTP request
        const response = await fetch(resolvedUrl, {
          method,
          headers: resolvedHeaders as HeadersInit,
          body: ['GET', 'HEAD'].includes(method) ? undefined : JSON.stringify(resolvedBody),
        })

        const responseData = await response.json()

        returnData.push({
          statusCode: response.status,
          headers: Object.fromEntries(response.headers.entries()),
          body: responseData,
        })
      } catch (error) {
        returnData.push({
          error: error.message,
          statusCode: 0,
        })
      }
    }

    return [returnData]
  }
}

export class CodeNode extends NodeType {
  description = {
    displayName: 'Code',
    name: 'code',
    group: ['transform'],
    version: 1,
    description: 'Execute custom JavaScript code',
    defaults: {
      name: 'Code',
    },
    inputs: ['main'],
    outputs: ['main'],
    properties: [
      {
        displayName: 'JavaScript Code',
        name: 'code',
        type: 'code',
        default: '// Access input data\nconst items = $input.all();\n\n// Process data\nreturn items.map(item => {\n  return {\n    ...item.json,\n    processed: true\n  };\n});',
        description: 'JavaScript code to execute',
      },
    ],
  }

  async execute(context: IExecuteContext): Promise<INodeExecutionData[][]> {
    const items = context.getInputData()
    const code = context.getNodeParameter('code') as string

    // Create safe execution context
    const $input = {
      all: () => items,
      first: () => items[0] || {},
      last: () => items[items.length - 1] || {},
      item: (index: number) => items[index] || {},
    }

    const helpers = {
      $now: () => new Date(),
      $today: () => {
        const date = new Date()
        date.setHours(0, 0, 0, 0)
        return date
      },
      $random: (min = 0, max = 1) => Math.random() * (max - min) + min,
    }

    try {
      // Execute code in sandboxed environment
      const func = new Function('$input', ...Object.keys(helpers), code)
      const result = func($input, ...Object.values(helpers))

      // Ensure result is an array
      const resultArray = Array.isArray(result) ? result : [result]
      
      return [resultArray.map(item => ({
        json: item,
      }))]
    } catch (error) {
      throw new Error(`Code execution failed: ${error.message}`)
    }
  }
}

export class DialaMakeCallNode extends NodeType {
  description = {
    displayName: 'Make Call',
    name: 'dialaMakeCall',
    group: ['action'],
    version: 1,
    description: 'Initiate a voice call using Diala',
    defaults: {
      name: 'Make Call',
    },
    inputs: ['main'],
    outputs: ['main'],
    properties: [
      {
        displayName: 'Phone Number',
        name: 'phoneNumber',
        type: 'string',
        default: '',
        required: true,
        description: 'Phone number to call',
      },
      {
        displayName: 'Agent ID',
        name: 'agentId',
        type: 'string',
        default: '',
        required: true,
        description: 'ID of the agent to use for the call',
      },
      {
        displayName: 'Initial Message',
        name: 'initialMessage',
        type: 'string',
        default: '',
        description: 'Initial message to speak when call is answered',
      },
      {
        displayName: 'Variables',
        name: 'variables',
        type: 'json',
        default: '{}',
        description: 'Variables to pass to the agent',
      },
    ],
  }

  async execute(context: IExecuteContext): Promise<INodeExecutionData[][]> {
    const items = context.getInputData()
    const returnData: IDataObject[] = []

    for (let i = 0; i < items.length; i++) {
      const phoneNumber = context.getNodeParameter('phoneNumber', i) as string
      const agentId = context.getNodeParameter('agentId', i) as string
      const initialMessage = context.getNodeParameter('initialMessage', i, '') as string
      const variables = context.getNodeParameter('variables', i, {})

      // Create expression evaluator
      const evaluator = new ExpressionEvaluator({}, {}, i)
      
      // Resolve expressions
      const resolvedPhoneNumber = evaluator.evaluate(phoneNumber, items[i])
      const resolvedInitialMessage = evaluator.evaluate(initialMessage, items[i])
      const resolvedVariables = evaluator.evaluateAll(variables, i)

      // Simulate API call to Diala
      const callResult = {
        callId: `call_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,
        phoneNumber: resolvedPhoneNumber,
        agentId,
        status: 'initiated',
        timestamp: new Date().toISOString(),
        variables: resolvedVariables,
        initialMessage: resolvedInitialMessage,
      }

      returnData.push(callResult)
    }

    return [returnData]
  }
}

export class SetNode extends NodeType {
  description = {
    displayName: 'Set',
    name: 'set',
    group: ['transform'],
    version: 1,
    description: 'Set data fields on items',
    defaults: {
      name: 'Set',
    },
    inputs: ['main'],
    outputs: ['main'],
    properties: [
      {
        displayName: 'Values to Set',
        name: 'values',
        type: 'fixedCollection',
        default: {},
        typeOptions: {
          multipleValues: true,
        },
        options: [
          {
            name: 'string',
            displayName: 'String',
            values: [
              {
                displayName: 'Name',
                name: 'name',
                type: 'string',
                default: '',
              },
              {
                displayName: 'Value',
                name: 'value',
                type: 'string',
                default: '',
              },
            ],
          },
          {
            name: 'number',
            displayName: 'Number',
            values: [
              {
                displayName: 'Name',
                name: 'name',
                type: 'string',
                default: '',
              },
              {
                displayName: 'Value',
                name: 'value',
                type: 'number',
                default: 0,
              },
            ],
          },
          {
            name: 'boolean',
            displayName: 'Boolean',
            values: [
              {
                displayName: 'Name',
                name: 'name',
                type: 'string',
                default: '',
              },
              {
                displayName: 'Value',
                name: 'value',
                type: 'boolean',
                default: false,
              },
            ],
          },
        ],
      },
    ],
  }

  async execute(context: IExecuteContext): Promise<INodeExecutionData[][]> {
    const items = context.getInputData()
    const returnData: IDataObject[] = []
    const values = context.getNodeParameter('values', 0, {}) as any

    for (let i = 0; i < items.length; i++) {
      const newItem = { ...items[i] }
      
      // Set string values
      if (values.string) {
        for (const stringValue of values.string) {
          if (stringValue.name) {
            newItem[stringValue.name] = stringValue.value
          }
        }
      }

      // Set number values
      if (values.number) {
        for (const numberValue of values.number) {
          if (numberValue.name) {
            newItem[numberValue.name] = numberValue.value
          }
        }
      }

      // Set boolean values
      if (values.boolean) {
        for (const booleanValue of values.boolean) {
          if (booleanValue.name) {
            newItem[booleanValue.name] = booleanValue.value
          }
        }
      }

      returnData.push(newItem)
    }

    return [returnData]
  }
}

// Registry of all available nodes
export const nodeTypes = new Map<string, NodeType>([
  ['webhook', new WebhookNode()],
  ['httpRequest', new HttpRequestNode()],
  ['code', new CodeNode()],
  ['dialaMakeCall', new DialaMakeCallNode()],
  ['set', new SetNode()],
])


================================================
FILE: src/lib/workflow/nodes/SetNode.ts
================================================
/**
 * Set node for data transformation
 */

import { BaseNode } from './BaseNode'
import {
  IExecuteFunctions,
  INodeExecutionData,
  INodeTypeDescription,
  IDataObject
} from '../types'

export class SetNode extends BaseNode {
  description: INodeTypeDescription = {
    displayName: 'Set',
    name: 'set',
    icon: 'pen',
    group: ['transform'],
    version: 1,
    description: 'Set fields on items',
    defaults: {
      name: 'Set',
    },
    inputs: ['main'],
    outputs: ['main'],
    properties: [
      {
        displayName: 'Keep Only Set Fields',
        name: 'keepOnlySet',
        type: 'boolean',
        default: false,
        description: 'Whether to keep only the fields that are set',
      },
      {
        displayName: 'Values to Set',
        name: 'values',
        type: 'fixedCollection',
        placeholder: 'Add Value',
        typeOptions: {
          multipleValues: true,
          sortable: true,
        },
        default: {},
        options: [
          {
            name: 'string',
            displayName: 'String',
            values: [
              {
                displayName: 'Name',
                name: 'name',
                type: 'string',
                default: 'propertyName',
                placeholder: 'e.g. firstName',
                description: 'Name of the property to set',
              },
              {
                displayName: 'Value',
                name: 'value',
                type: 'string',
                default: '',
                placeholder: 'e.g. John',
                description: 'Value to set',
              },
            ],
          },
          {
            name: 'number',
            displayName: 'Number',
            values: [
              {
                displayName: 'Name',
                name: 'name',
                type: 'string',
                default: 'propertyName',
                placeholder: 'e.g. age',
              },
              {
                displayName: 'Value',
                name: 'value',
                type: 'number',
                default: 0,
                description: 'Value to set',
              },
            ],
          },
          {
            name: 'boolean',
            displayName: 'Boolean',
            values: [
              {
                displayName: 'Name',
                name: 'name',
                type: 'string',
                default: 'propertyName',
                placeholder: 'e.g. isActive',
              },
              {
                displayName: 'Value',
                name: 'value',
                type: 'boolean',
                default: false,
                description: 'Value to set',
              },
            ],
          },
          {
            name: 'json',
            displayName: 'JSON',
            values: [
              {
                displayName: 'Name',
                name: 'name',
                type: 'string',
                default: 'propertyName',
                placeholder: 'e.g. data',
              },
              {
                displayName: 'Value',
                name: 'value',
                type: 'json',
                default: '{}',
                description: 'JSON value to set',
              },
            ],
          },
        ],
      },
      {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        options: [
          {
            displayName: 'Dot Notation',
            name: 'dotNotation',
            type: 'boolean',
            default: true,
            description: 'Whether to use dot notation to set nested properties',
          },
          {
            displayName: 'Parse Numbers',
            name: 'parseNumbers',
            type: 'boolean',
            default: false,
            description: 'Whether to parse strings to numbers when possible',
          },
          {
            displayName: 'Include Binary',
            name: 'includeBinary',
            type: 'boolean',
            default: true,
            description: 'Whether to include binary data from input',
          },
        ],
      },
    ],
  }

  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    return this.processAllItems(this, async (item, itemIndex) => {
      const keepOnlySet = this.getNodeParameter('keepOnlySet', itemIndex) as boolean
      const values = this.getNodeParameter('values', itemIndex, {}) as any
      const options = this.getNodeParameter('options', itemIndex, {}) as any
      
      // Start with existing item or empty object
      let newItem: IDataObject = keepOnlySet ? {} : { ...item }
      
      // Process each value type
      const valueTypes = ['string', 'number', 'boolean', 'json']
      
      for (const valueType of valueTypes) {
        if (values[valueType]) {
          for (const field of values[valueType]) {
            if (!field.name) continue
            
            let value = field.value
            
            // Evaluate expressions
            value = this.evaluateParameter(this, value, itemIndex, item)
            
            // Type-specific processing
            switch (valueType) {
              case 'number':
                if (options.parseNumbers && typeof value === 'string') {
                  const parsed = parseFloat(value)
                  if (!isNaN(parsed)) {
                    value = parsed
                  }
                }
                break
              case 'json':
                if (typeof value === 'string') {
                  try {
                    value = JSON.parse(value)
                  } catch {
                    // Keep as string if not valid JSON
                  }
                }
                break
            }
            
            // Set the value
            if (options.dotNotation !== false && field.name.includes('.')) {
              // Handle dot notation
              this.setValueByPath(newItem, field.name, value)
            } else {
              // Direct assignment
              newItem[field.name] = value
            }
          }
        }
      }
      
      // Handle binary data
      if (!keepOnlySet && options.includeBinary !== false && item._binary) {
        newItem._binary = item._binary
      }
      
      return newItem
    })
  }
}


================================================
FILE: src/lib/workflow/nodes/WebhookNode.ts
================================================
/**
 * Webhook trigger node
 */

import { BaseNode } from './BaseNode'
import {
  IExecuteFunctions,
  INodeExecutionData,
  INodeTypeDescription,
  IWebhookFunctions,
  IWebhookResponseData
} from '../types'

export class WebhookNode extends BaseNode {
  description: INodeTypeDescription = {
    displayName: 'Webhook',
    name: 'webhook',
    icon: 'webhook',
    group: ['trigger'],
    version: 1,
    description: 'Starts workflow when webhook URL is called',
    defaults: {
      name: 'Webhook',
    },
    inputs: [],
    outputs: ['main'],
    webhooks: [
      {
        name: 'default',
        httpMethod: 'POST',
        responseMode: 'onReceived',
        path: 'webhook',
      },
    ],
    properties: [
      {
        displayName: 'Path',
        name: 'path',
        type: 'string',
        default: '',
        placeholder: 'webhook-path',
        required: true,
        description: 'The path to listen on',
      },
      {
        displayName: 'HTTP Method',
        name: 'httpMethod',
        type: 'options',
        options: [
          { name: 'DELETE', value: 'DELETE' },
          { name: 'GET', value: 'GET' },
          { name: 'HEAD', value: 'HEAD' },
          { name: 'PATCH', value: 'PATCH' },
          { name: 'POST', value: 'POST' },
          { name: 'PUT', value: 'PUT' },
        ],
        default: 'POST',
        description: 'The HTTP method to listen for',
      },
      {
        displayName: 'Response Mode',
        name: 'responseMode',
        type: 'options',
        options: [
          {
            name: 'On Received',
            value: 'onReceived',
            description: 'Response immediately when webhook is received',
          },
          {
            name: 'Last Node',
            value: 'lastNode',
            description: 'Response with data from last executed node',
          },
        ],
        default: 'onReceived',
        description: 'When and how to respond to the webhook',
      },
      {
        displayName: 'Response Code',
        name: 'responseCode',
        type: 'number',
        displayOptions: {
          show: {
            responseMode: ['onReceived'],
          },
        },
        default: 200,
        description: 'The HTTP response code to return',
      },
      {
        displayName: 'Response Data',
        name: 'responseData',
        type: 'options',
        displayOptions: {
          show: {
            responseMode: ['onReceived'],
          },
        },
        options: [
          {
            name: 'None',
            value: 'noData',
          },
          {
            name: 'Text',
            value: 'text',
          },
          {
            name: 'JSON',
            value: 'json',
          },
        ],
        default: 'noData',
        description: 'What data to return in response',
      },
      {
        displayName: 'Response Body',
        name: 'responseBody',
        type: 'json',
        displayOptions: {
          show: {
            responseMode: ['onReceived'],
            responseData: ['json'],
          },
        },
        default: '{\n  "success": true\n}',
        description: 'The JSON response body',
      },
    ],
  }

  async webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {
    const req = this.getRequestObject()
    const resp = this.getResponseObject()
    const headers = this.getHeaderData()
    const params = this.getParamsData()
    const query = this.getQueryData()
    const body = this.getBodyData()

    // Prepare webhook data
    const webhookData: INodeExecutionData[][] = [[
      {
        json: {
          headers,
          params,
          query,
          body,
          webhookUrl: this.getNodeWebhookUrl('default'),
          method: req.method,
        },
      },
    ]]

    // Handle response based on mode
    const responseMode = this.getNodeParameter('responseMode') as string

    if (responseMode === 'onReceived') {
      const responseCode = this.getNodeParameter('responseCode') as number
      const responseData = this.getNodeParameter('responseData') as string

      resp.statusCode = responseCode

      if (responseData === 'json') {
        const responseBody = this.getNodeParameter('responseBody')
        resp.json(responseBody)
      } else if (responseData === 'text') {
        resp.send('Webhook received')
      } else {
        resp.end()
      }

      return {
        workflowData: webhookData,
        noWebhookResponse: true,
      }
    }

    return {
      workflowData: webhookData,
    }
  }

  // For manual execution
  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    // Return mock webhook data for testing
    return [[
      {
        json: {
          headers: {
            'content-type': 'application/json',
          },
          params: {},
          query: {},
          body: {
            message: 'Test webhook data',
            timestamp: new Date().toISOString(),
          },
          webhookUrl: 'http://localhost:5678/webhook/test',
          method: 'POST',
        },
      },
    ]]
  }
}


================================================
FILE: src/lib/workflow/types/index.ts
================================================
/**
 * Comprehensive type definitions extracted from n8n
 */

// Basic types
export type IDataObject = Record<string, any>

export type NodeParameterValue = string | number | boolean | IDataObject | IDataObject[] | null | undefined

export type WorkflowExecuteMode = 
  | 'cli'
  | 'error'
  | 'integrated'
  | 'internal'
  | 'manual'
  | 'retry'
  | 'trigger'
  | 'webhook'

export type ExecutionStatus = 
  | 'canceled'
  | 'crashed'
  | 'error'
  | 'new'
  | 'running'
  | 'success'
  | 'unknown'
  | 'waiting'

// Node types
export interface INode {
  id: string
  name: string
  type: string
  typeVersion?: number
  position: [number, number]
  disabled?: boolean
  notes?: string
  notesInFlow?: boolean
  retryOnFail?: boolean
  maxTries?: number
  waitBetweenTries?: number
  continueOnFail?: boolean
  parameters: INodeParameters
  credentials?: INodeCredentials
  webhookId?: string
}

export interface INodeParameters {
  [key: string]: NodeParameterValue
}

export interface INodeCredentials {
  [credentialType: string]: string | { id: string; name: string }
}

// Connection types
export interface IConnection {
  node: string
  type: NodeConnectionType
  index: number
}

export interface IConnections {
  [outputIndex: string]: IConnection[][]
}

export interface INodeConnections {
  [nodeName: string]: IConnections
}

export type NodeConnectionType = 'main'

// Workflow types
export interface IWorkflowBase {
  id?: string
  name?: string
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  nodes: INode[]
  connections: INodeConnections
  settings?: IWorkflowSettings
  staticData?: IDataObject
  pinData?: IPinData
  tags?: string[]
}

export interface IWorkflowSettings {
  timezone?: string
  errorWorkflow?: string
  saveDataErrorExecution?: string
  saveDataSuccessExecution?: string
  saveManualExecutions?: boolean
  callerIds?: string
  callerPolicy?: string
  executionTimeout?: number
}

export interface IPinData {
  [nodeName: string]: INodeExecutionData[]
}

// Execution types
export interface IExecuteData {
  node: INode
  data: INodeExecutionData
  source: ITaskDataConnections | null
}

export interface INodeExecutionData {
  [outputIndex: string]: IDataObject[][]
  webhookResponse?: any
}

export interface ITaskDataConnections {
  [inputIndex: string]: Array<{
    node: string
    type: NodeConnectionType
    index: number
  }>
}

export interface ITaskData {
  startTime: number
  executionTime: number
  executionStatus: ExecutionStatus
  data?: INodeExecutionData
  error?: Error
}

export interface IRunExecutionData {
  startData?: IDataObject
  resultData: {
    error?: Error
    lastNodeExecuted?: string
    runData: IRunData
    executionData?: IExecutionData
    metadata?: Record<string, any>
  }
  executionData?: IExecutionData
}

export interface IRunData {
  [nodeName: string]: ITaskData[]
}

export interface IExecutionData {
  contextData: IDataObject
  nodeExecutionStack: IExecuteData[]
  waitingExecution: IWaitingForExecution
  waitingExecutionSource: IWaitingForExecutionSource
}

export interface IWaitingForExecution {
  [nodeId: string]: IExecuteData[]
}

export interface IWaitingForExecutionSource {
  [nodeId: string]: IExecuteData
}

// Node type definitions
export interface INodeType {
  description: INodeTypeDescription
  methods?: {
    loadOptions?: {
      [methodName: string]: (this: ILoadOptionsFunctions) => Promise<INodePropertyOptions[]>
    }
    credentialTest?: {
      [methodName: string]: (this: ICredentialTestFunctions) => Promise<INodeCredentialTestResult>
    }
  }
  webhookMethods?: {
    default?: {
      checkExists?: (this: IWebhookFunctions) => Promise<boolean>
      create?: (this: IWebhookFunctions) => Promise<boolean>
      delete?: (this: IWebhookFunctions) => Promise<boolean>
    }
  }
  webhook?: (this: IWebhookFunctions) => Promise<IWebhookResponseData>
  trigger?: (this: ITriggerFunctions) => Promise<ITriggerResponse | undefined>
  execute?: (this: IExecuteFunctions) => Promise<INodeExecutionData[][]>
  poll?: (this: IPollFunctions) => Promise<INodeExecutionData[][] | null>
}

export interface INodeTypeDescription {
  displayName: string
  name: string
  group: string[]
  version: number | number[]
  description: string
  subtitle?: string
  defaults: INodeTypeDefaults
  inputs: string[] | INodeInputConfiguration[]
  outputs: string[] | INodeOutputConfiguration[]
  outputNames?: string[]
  properties: INodeProperties[]
  credentials?: INodeCredentialDescription[]
  maxNodes?: number
  polling?: boolean
  supportsCORS?: boolean
  webhooks?: IWebhookDescription[]
  triggerPanel?: boolean
  activationMessage?: string
  documentationUrl?: string
  icon?: string
  iconUrl?: string
  codex?: INodeTypeCodex
}

export interface INodeTypeDefaults {
  name: string
  color?: string
}

export interface INodeInputConfiguration {
  type: string
  displayName?: string
  required?: boolean
  maxConnections?: number
}

export interface INodeOutputConfiguration {
  type: string
  displayName?: string
}

// Node properties
export interface INodeProperties {
  displayName: string
  name: string
  type: NodePropertyTypes
  typeOptions?: INodeTypeOptions
  default?: NodeParameterValue
  description?: string
  hint?: string
  displayOptions?: IDisplayOptions
  options?: INodePropertyOptions[] | INodePropertyCollection[]
  placeholder?: string
  isNodeSetting?: boolean
  noDataExpression?: boolean
  required?: boolean
  routing?: INodePropertyRouting
  credentialTypes?: string[]
  extractValue?: INodePropertyValueExtractor
}

export type NodePropertyTypes =
  | 'boolean'
  | 'collection'
  | 'color'
  | 'dateTime'
  | 'fixedCollection'
  | 'hidden'
  | 'json'
  | 'multiOptions'
  | 'number'
  | 'options'
  | 'string'
  | 'notice'
  | 'assignmentCollection'
  | 'credentials'
  | 'filter'
  | 'resourceLocator'
  | 'curlImport'
  | 'resourceMapper'
  | 'file'

export interface INodeTypeOptions {
  alwaysOpenEditWindow?: boolean
  loadOptionsMethod?: string
  loadOptionsDependsOn?: string[]
  multipleValues?: boolean
  multipleValueButtonText?: string
  password?: boolean
  rows?: number
  showAlpha?: boolean
  sortable?: boolean
  expirable?: boolean
  maxExpiredDelay?: number
}

export interface IDisplayOptions {
  hide?: INodeDisplayConditions
  show?: INodeDisplayConditions
}

export interface INodeDisplayConditions {
  [nodePropertyName: string]: NodeParameterValue[] | undefined
}

export interface INodePropertyOptions {
  name: string
  value: string | number
  description?: string
  action?: string
  routing?: INodePropertyRouting
}

export interface INodePropertyCollection {
  name: string
  displayName: string
  values: INodeProperties[]
}

export interface INodePropertyRouting {
  operations?: INodePropertyRoutingOperation
  request?: INodeRequestOptions
  send?: INodeRequestSend
  output?: INodeRequestOutput
}

export interface INodePropertyRoutingOperation {
  [key: string]: any
}

export interface INodeRequestOptions {
  baseURL?: string
  url?: string
  method?: string
  qs?: IDataObject
  headers?: IDataObject
  body?: IDataObject
}

export interface INodeRequestSend {
  type?: string
  property?: string
  value?: any
  preSend?: Array<(this: IExecuteSingleFunctions) => Promise<void>>
}

export interface INodeRequestOutput {
  postReceive?: Array<(this: IExecuteSingleFunctions, items: INodeExecutionData[]) => Promise<INodeExecutionData[]>>
}

export interface INodePropertyValueExtractor {
  type: string
  regex?: string
  value?: string
}

// Webhook types
export interface IWebhookDescription {
  name: string
  httpMethod: string
  isFullPath?: boolean
  path?: string
  responseBinaryPropertyName?: string
  responseContentType?: string
  responsePropertyName?: string
  responseMode?: string
  responseData?: string
  restartWebhook?: boolean
}

export interface IWebhookResponseData {
  workflowData?: INodeExecutionData[][]
  webhookResponse?: any
  noWebhookResponse?: boolean
}

export interface ITriggerResponse {
  closeFunction?: () => Promise<void>
  manualTriggerFunction?: () => Promise<void>
}

// Function interfaces
export interface IExecuteFunctions extends IExecuteFunctionsBase {
  getInputData(inputIndex?: number, inputName?: string): INodeExecutionData
  getNodeParameter(parameterName: string, itemIndex: number, fallbackValue?: any): NodeParameterValue
  getMode(): WorkflowExecuteMode
  getNode(): INode
  getWorkflow(): IWorkflowMetadata
  getWorkflowDataProxy(itemIndex: number): IDataObject
  prepareOutputData(outputData: INodeExecutionData[], outputIndex?: number): Promise<INodeExecutionData[][]>
  putExecutionToWait(waitTill: Date): Promise<void>
  sendMessageToUI(message: string): void
  helpers: IExecuteFunctionsHelpers
}

export interface IExecuteFunctionsBase {
  getCredentials(type: string, itemIndex?: number): Promise<IDataObject>
  getTimezone(): string
  getRestApiUrl(): string
  getInstanceId(): string
  getExecutionId(): string
  continueOnFail(): boolean
}

export interface IExecuteFunctionsHelpers {
  returnJsonArray(jsonData: IDataObject | IDataObject[]): IDataObject[]
  normalizeItems(items: INodeExecutionData | INodeExecutionData[]): INodeExecutionData[]
  constructExecutionMetaData(
    inputData: INodeExecutionData[],
    options: { itemData: IPairedItemData | IPairedItemData[] }
  ): NodeExecutionWithMetadata[]
  assertBinaryData(itemIndex: number, propertyName: string): Promise<IBinaryData>
  getBinaryDataBuffer(itemIndex: number, propertyName: string): Promise<Buffer>
  prepareBinaryData(
    binaryData: Buffer | Readable,
    filePath?: string,
    mimeType?: string
  ): Promise<IBinaryData>
  setBinaryDataBuffer(data: IBinaryData, binaryData: Buffer): Promise<IBinaryData>
  binaryToString(body: Buffer | Readable, encoding?: string): Promise<string>
  httpRequest(requestOptions: IHttpRequestOptions): Promise<any>
  httpRequestWithAuthentication(
    credentialType: string,
    requestOptions: IHttpRequestOptions,
    additionalOptions?: IAdditionalOptions
  ): Promise<any>
}

export interface IWorkflowMetadata {
  id: string
  name: string
  active: boolean
}

export interface IPairedItemData {
  item: number
  input?: number
  sourceOverwrite?: ISourceData
}

export interface ISourceData {
  previousNode: string
  previousNodeOutput?: number
  previousNodeRun?: number
}

export interface NodeExecutionWithMetadata {
  json: IDataObject
  binary?: IBinaryKeyData
  pairedItem?: IPairedItemData | IPairedItemData[]
}

export interface IBinaryKeyData {
  [key: string]: IBinaryData
}

export interface IBinaryData {
  data: string
  mimeType: string
  fileType?: string
  fileName?: string
  directory?: string
  fileExtension?: string
  fileSize?: string
  id?: string
}

export interface IHttpRequestOptions {
  url: string
  method: string
  body?: any
  qs?: IDataObject
  headers?: IDataObject
  auth?: {
    username: string
    password: string
  }
  timeout?: number
  json?: boolean
  returnFullResponse?: boolean
  proxy?: string
  encoding?: string
  simple?: boolean
  gzip?: boolean
  rejectUnauthorized?: boolean
}

export interface IAdditionalOptions {
  credentialsDecrypted?: ICredentialsDecrypted
}

export interface ICredentialsDecrypted {
  [key: string]: IDataObject
}

// Other function types
export interface ITriggerFunctions extends IExecuteFunctionsBase {
  emit(data: INodeExecutionData[][]): void
  emitError(error: Error): void
  getMode(): WorkflowExecuteMode
  getActivationMode(): string
  getNode(): INode
  getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue
  getWorkflow(): IWorkflowMetadata
  getWorkflowStaticData(type: string): IDataObject
  helpers: ITriggerFunctionsHelpers
}

export interface ITriggerFunctionsHelpers extends IExecuteFunctionsHelpers {
  returnJsonArray(jsonData: IDataObject | IDataObject[]): IDataObject[]
}

export interface IWebhookFunctions extends IExecuteFunctionsBase {
  getBodyData(): IDataObject
  getHeaderData(): IDataObject
  getMode(): WorkflowExecuteMode
  getNode(): INode
  getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue
  getNodeWebhookUrl(name: string): string | undefined
  getParamsData(): IDataObject
  getQueryData(): IDataObject
  getRequestObject(): express.Request
  getResponseObject(): express.Response
  getWebhookName(): string
  getWorkflow(): IWorkflowMetadata
  getWorkflowStaticData(type: string): IDataObject
  prepareOutputData(outputData: INodeExecutionData[], outputIndex?: number): Promise<INodeExecutionData[][]>
  helpers: IWebhookFunctionsHelpers
}

export interface IWebhookFunctionsHelpers extends IExecuteFunctionsHelpers {
  returnJsonArray(jsonData: IDataObject | IDataObject[]): IDataObject[]
}

export interface IPollFunctions extends IExecuteFunctionsBase {
  getMode(): WorkflowExecuteMode
  getActivationMode(): string
  getNode(): INode
  getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue
  getWorkflow(): IWorkflowMetadata
  getWorkflowStaticData(type: string): IDataObject
  helpers: IPollFunctionsHelpers
}

export interface IPollFunctionsHelpers extends IExecuteFunctionsHelpers {
  returnJsonArray(jsonData: IDataObject | IDataObject[]): IDataObject[]
}

export interface ILoadOptionsFunctions extends IExecuteFunctionsBase {
  getNode(): INode
  getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue
  getCurrentNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue
  getCurrentNodeParameters(): INodeParameters
  helpers: ILoadOptionsFunctionsHelpers
}

export interface ILoadOptionsFunctionsHelpers {
  httpRequest(requestOptions: IHttpRequestOptions): Promise<any>
}

export interface ICredentialTestFunctions extends IExecuteFunctionsBase {
  getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue
  getCredentials(type: string): Promise<IDataObject>
  helpers: ICredentialTestFunctionsHelpers
}

export interface ICredentialTestFunctionsHelpers {
  httpRequest(requestOptions: IHttpRequestOptions): Promise<any>
}

export interface INodeCredentialTestResult {
  status: 'OK' | 'Error'
  message: string
}

export interface INodeTypeCodex {
  categories?: string[]
  subcategories?: {
    [category: string]: string[]
  }
  alias?: string[]
}

export interface INodeCredentialDescription {
  name: string
  required?: boolean
  displayOptions?: IDisplayOptions
  testedBy?: ICredentialTestRequest | string
}

export interface ICredentialTestRequest {
  request: IHttpRequestOptions
  rules?: ICredentialTestRequestRule[]
}

export interface ICredentialTestRequestRule {
  type: 'responseCode' | 'responseSuccessBody'
  properties: {
    value?: number
    message?: string
    messagePattern?: string
  }
}

export interface IExecuteSingleFunctions extends IExecuteFunctionsBase {
  getInputData(inputIndex?: number, inputName?: string): INodeExecutionData
  getItemIndex(): number
  getMode(): WorkflowExecuteMode
  getNode(): INode
  getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue
  getWorkflow(): IWorkflowMetadata
  helpers: IExecuteSingleFunctionsHelpers
}

export interface IExecuteSingleFunctionsHelpers extends IExecuteFunctionsHelpers {
  getBinaryDataBuffer(propertyName: string): Promise<Buffer>
}

export interface IExecuteResponsePromiseData {
  data: INodeExecutionData
  response: any
}

export interface IWorkflowExecuteAdditionalData {
  credentialsHelper?: ICredentialsHelper
  executionId?: string
  restartExecutionId?: string
  hooks?: IWorkflowExecuteHooks
  httpRequest?: (requestOptions: IHttpRequestOptions) => Promise<any>
  httpRequestWithAuthentication?: (
    credentialType: string,
    requestOptions: IHttpRequestOptions,
    additionalOptions?: IAdditionalOptions
  ) => Promise<any>
  currentNodeParameters?: INodeParameters
  executionTimeoutTimestamp?: number
  userId?: string
  variables?: IDataObject
  instanceId?: string
  secretsHelpers?: ISecretsHelper
  parentExecutionId?: string
  workflowData: IWorkflowBase
}

export interface ICredentialsHelper {
  authenticate(
    credentials: ICredentialsDecrypted,
    typeName: string,
    requestOptions: IHttpRequestOptions
  ): Promise<IHttpRequestOptions>
  getCredentials(nodeCredentials: INodeCredentialsDetails, type: string): Promise<ICredentials>
  getDecrypted(
    nodeCredentials: INodeCredentialsDetails,
    type: string,
    mode: WorkflowExecuteMode,
    timezone: string,
    raw?: boolean,
    expressionResolveValues?: ICredentialsExpressionResolveValues
  ): Promise<ICredentialsDecrypted>
  updateCredentials(
    nodeCredentials: INodeCredentialsDetails,
    type: string,
    data: ICredentialDataDecryptedObject
  ): Promise<void>
}

export interface INodeCredentialsDetails {
  id: string | null
  name: string
}

export interface ICredentials {
  id?: string
  name: string
  type?: string
  data?: ICredentialDataDecryptedObject
  nodesAccess?: ICredentialNodeAccess[]
}

export interface ICredentialDataDecryptedObject {
  [key: string]: any
}

export interface ICredentialNodeAccess {
  nodeType: string
  user?: string
  date?: Date
}

export interface ICredentialsExpressionResolveValues {
  connectionInputData: INodeExecutionData[]
  itemIndex: number
  node: INode
  runExecutionData: IRunExecutionData | null
  runIndex: number
  workflow: IWorkflowMetadata
}

export interface IWorkflowExecuteHooks {
  nodeExecuteAfter?: Array<
    (
      nodeName: string,
      data: ITaskData,
      executionData: IRunExecutionData
    ) => Promise<void>
  >
  nodeExecuteBefore?: Array<(nodeName: string) => Promise<void>>
  workflowExecuteAfter?: Array<
    (data: IRun, newStaticData: IDataObject) => Promise<void>
  >
  workflowExecuteBefore?: Array<(workflow: Workflow, data: IRunExecutionData) => Promise<void>>
  sendResponse?: Array<(response: IExecuteResponsePromiseData) => Promise<void>>
}

export interface IRun {
  data: IRunExecutionData
  finished: boolean
  mode: WorkflowExecuteMode
  startedAt: Date
  stoppedAt?: Date
  status: ExecutionStatus
}

export interface ISecretsHelper {
  getSecret(provider: string, name: string): IDataObject
  listProviders(): string[]
  listSecrets(provider: string): string[]
  update(): Promise<void>
}

export interface INodeTypeRegistry {
  getByNameAndVersion(nodeType: string, version?: number): INodeType | undefined
  getByName(nodeType: string): Array<{ type: INodeType; version: number }>
}


================================================
FILE: src/styles/automation.css
================================================
/* Automation Page Layout - Using flex layout from parent instead */

/* Workflow Editor Styles */
.workflow-canvas {
  width: 100%;
  height: 100%;
  position: relative;
  display: block;
}

/* Node Properties Panel */
.node-properties-panel {
  grid-column: 2;
  grid-row: 2;
  width: 400px;
  height: 100%;
  background: white;
  border-left: 3px solid black;
  overflow-y: auto;
  transition: transform 0.3s ease;
}

.node-properties-panel.collapsed {
  transform: translateX(100%);
}


/* React Flow Overrides */
.react-flow {
  background: #f9f9f9;
  background-image: 
    repeating-linear-gradient(
      0deg,
      transparent,
      transparent 20px,
      #e5e5e5 20px,
      #e5e5e5 21px
    ),
    repeating-linear-gradient(
      90deg,
      transparent,
      transparent 20px,
      #e5e5e5 20px,
      #e5e5e5 21px
    );
}

.react-flow__renderer {
  background: transparent;
}

.react-flow__node-custom {
  background: white;
  border: 4px solid black;
  border-radius: 0;
  padding: 0;
  box-shadow: 4px 4px 0 rgba(0, 0, 0, 1);
  transition: all 0.2s ease;
  min-width: 200px;
}

.react-flow__node-custom:hover {
  box-shadow: 6px 6px 0 rgba(0, 0, 0, 1);
  transform: translate(-1px, -1px);
}

.react-flow__node-custom.selected {
  border-color: rgb(0, 82, 255);
  box-shadow: 4px 4px 0 rgb(0, 82, 255);
}

.react-flow__edge-path {
  stroke: black;
  stroke-width: 3;
}

.react-flow__edge.selected .react-flow__edge-path {
  stroke: rgb(0, 82, 255);
}

.react-flow__handle {
  width: 14px;
  height: 14px;
  background: rgb(0, 82, 255);
  border: 3px solid black;
  border-radius: 0;
  box-shadow: 2px 2px 0 rgba(0, 0, 0, 1);
}

.react-flow__handle:hover {
  background: rgb(0, 82, 255);
  transform: scale(1.2);
}

.react-flow__controls {
  border: 4px solid black !important;
  border-radius: 0 !important;
  box-shadow: 4px 4px 0 rgba(0, 0, 0, 1) !important;
  background: white !important;
  margin: 1rem !important;
  overflow: hidden !important;
}

.react-flow__controls-button {
  background: white !important;
  border: none !important;
  border-bottom: 3px solid black !important;
  border-radius: 0 !important;
  width: 42px !important;
  height: 42px !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
}

.react-flow__controls-button:hover {
  background: #f0f0f0 !important;
}

.react-flow__controls-button:last-child {
  border-bottom: none !important;
}

.react-flow__minimap {
  background: white !important;
  border: 4px solid black !important;
  border-radius: 0 !important;
  box-shadow: 4px 4px 0 rgba(0, 0, 0, 1) !important;
  margin: 1rem !important;
  height: 120px !important;
  width: 160px !important;
}

.react-flow__minimap-mask {
  fill: rgba(0, 82, 255, 0.1);
  stroke: rgb(0, 82, 255);
  stroke-width: 2;
}

/* Execution Panel */
.execution-panel {
  position: absolute;
  bottom: 1rem;
  left: 50%;
  transform: translateX(-50%);
  max-width: 42rem;
  max-height: 16rem;
  width: 90%;
  background: white;
  border: 3px solid black;
  box-shadow: 6px 6px 0 rgba(0, 0, 0, 1);
  overflow: hidden;
  z-index: 50;
}

/* Node Panel */
.node-panel {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 320px;
  background: white;
  border-right: 4px solid black;
  box-shadow: 6px 0 0 rgba(0, 0, 0, 1);
  transform: translateX(-100%);
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  z-index: 40;
  overflow: hidden;
}

.node-panel.open {
  transform: translateX(0);
}

.node-panel > div {
  height: 100%;
  border: none !important;
}

/* Workflow Templates */
.workflow-templates-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 1.5rem;
}

.workflow-template-card {
  background: white;
  border: 4px solid black !important;
  padding: 0;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 4px 4px 0 rgba(0, 0, 0, 1) !important;
}

.workflow-template-card:hover {
  box-shadow: 6px 6px 0 rgba(0, 0, 0, 1);
  transform: translate(-2px, -2px);
}

/* Expression Editor */
.expression-editor {
  width: 100%;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 14px;
  border: 3px solid black;
  background: white;
  padding: 0.5rem;
  min-height: 100px;
}

.expression-editor:focus {
  outline: none;
  box-shadow: 4px 4px 0 rgba(0, 0, 0, 1);
}

/* Execution History */
.execution-history-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem;
  border-bottom: 3px solid black;
  cursor: pointer;
  transition: background-color 0.2s ease;
  background: white;
}

.execution-history-item:hover {
  background-color: #f0f0f0;
}

.execution-status {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.25rem 0.75rem;
  font-size: 0.75rem;
  font-weight: bold;
  text-transform: uppercase;
  border: 3px solid black;
  box-shadow: 2px 2px 0 rgba(0, 0, 0, 1);
}

.execution-status.success {
  background: #4ade80;
}

.execution-status.error {
  background: #f87171;
}

.execution-status.running {
  background: #60a5fa;
}

/* Additional Component Styling */
.react-flow__attribution {
  display: none !important;
}

/* Animations */
@keyframes slideIn {
  from {
    transform: translateX(-100%);
  }
  to {
    transform: translateX(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* Responsive adjustments */
@media (max-width: 1024px) {
  .node-properties-panel {
    width: 350px;
  }
  
  .workflow-templates-grid {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  }
}

@media (max-width: 768px) {
  .node-properties-panel {
    position: absolute;
    width: 100%;
    height: 50%;
    bottom: 0;
    left: 0;
    border-left: none;
    border-top: 3px solid black;
  }
  
  .node-panel {
    width: 100%;
  }
}


================================================
FILE: src/styles/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@import "tw-animate-css";

@import url('https://db.onlinewebfonts.com/c/2970bdb341a4738a457b33d3a426c855?family=Noyh-Bold');

@font-face {
    font-family: "Noyh-Bold";
    src: url("https://db.onlinewebfonts.com/t/2970bdb341a4738a457b33d3a426c855.eot");
    src: url("https://db.onlinewebfonts.com/t/2970bdb341a4738a457b33d3a426c855.eot?#iefix")format("embedded-opentype"),
    url("https://db.onlinewebfonts.com/t/2970bdb341a4738a457b33d3a426c855.woff2")format("woff2"),
    url("https://db.onlinewebfonts.com/t/2970bdb341a4738a457b33d3a426c855.woff")format("woff"),
    url("https://db.onlinewebfonts.com/t/2970bdb341a4738a457b33d3a426c855.ttf")format("truetype"),
    url("https://db.onlinewebfonts.com/t/2970bdb341a4738a457b33d3a426c855.svg#Noyh-Bold")format("svg");
}

@custom-variant dark (&:is(.dark *));

@layer base {
  :root {
    --background: theme('colors.yellow.50');
    --secondary-background: oklch(100% 0 0);
    --foreground: oklch(0% 0 0);
    --main-foreground: oklch(0% 0 0);
    --main: rgb(0,82,255);
    --border: oklch(0% 0 0);
    --ring: oklch(0% 0 0);
    --overlay: oklch(0% 0 0 / 0.8);
    --shadow: 4px 4px 0px 0px var(--border);
    --chart-1: #5294FF;
    --chart-2: #FF4D50;
    --chart-3: #FACC00;
    --chart-4: #05E17A;
    --chart-5: #7A83FF;
    --chart-active-dot: #000;

    --color-main: var(--main);
    --color-background: var(--background);
    --color-secondary-background: var(--secondary-background);
    --color-foreground: var(--foreground);
    --color-main-foreground: var(--main-foreground);
    --color-border: var(--border);
    --color-overlay: var(--overlay);
    --color-ring: var(--ring);
    --color-chart-1: var(--chart-1);
    --color-chart-2: var(--chart-2);
    --color-chart-3: var(--chart-3);
    --color-chart-4: var(--chart-4);
    --color-chart-5: var(--chart-5);

    --spacing-boxShadowX: 4px;
    --spacing-boxShadowY: 4px;
    --spacing-reverseBoxShadowX: -4px;
    --spacing-reverseBoxShadowY: -4px;
    --radius-base: 0px;
    --shadow-shadow: var(--shadow);
    --font-weight-base: 500;
    --font-weight-heading: 700;
  }

  .dark {
    --background: oklch(29.23% 0.0626 270.49);
    --secondary-background: oklch(23.93% 0 0);
    --foreground: oklch(92.49% 0 0);
    --main-foreground: oklch(0% 0 0);
    --main: oklch(67.47% 0.1726 259.49);
    --border: oklch(0% 0 0);
    --ring: oklch(100% 0 0);
    --shadow: 4px 4px 0px 0px var(--border);
    --chart-1: #5294FF;
    --chart-2: #FF6669;
    --chart-3: #E0B700;
    --chart-4: #04C86D;
    --chart-5: #7A83FF;
    --chart-active-dot: #fff;
  }

  body {
    @apply text-foreground font-base bg-gradient-to-br from-yellow-50 to-orange-50;
  }

  h1, h2, h3, h4, h5, h6 {
    @apply font-heading;
  }

  * {
    @apply focus:outline-none;
  }

  /* Select focus styles */
  select:focus {
    outline: none !important;
  }

  /* Slider styling for Neobrutalist design */
  [role="slider"] {
    outline: none !important;
    border: 2px solid black !important;
    background: white !important;
    box-shadow: 2px 2px 0px rgba(0,0,0,1) !important;
    width: 20px !important;
    height: 20px !important;
  }

  [role="slider"]:focus {
    outline: none !important;
    border: 2px solid black !important;
    background: white !important;
    box-shadow: 2px 2px 0px rgba(0,0,0,1) !important;
  }

  [role="slider"]:focus-visible {
    outline: none !important;
    border: 2px solid black !important;
    background: white !important;
    box-shadow: 2px 2px 0px rgba(0,0,0,1) !important;
  }

  [role="slider"]:hover,
  [role="slider"]:active {
    background: #f5f5f5 !important;
    box-shadow: 2px 2px 0px rgba(0,0,0,1) !important;
  }

  /* Wobble animation for navigation arrows */
  @keyframes wobble {
    0%, 100% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-3px);
    }
    50% {
      transform: translateX(3px);
    }
    75% {
      transform: translateX(-2px);
    }
  }

  /* Scale animation for stars */
  @keyframes scale {
    0%, 100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.2);
    }
  }

  /* Overshoot scale animation */
  @keyframes overshoot {
    0% {
      transform: scale(0);
    }
    60% {
      transform: scale(1.3);
    }
    100% {
      transform: scale(1);
    }
  }

  /* Shimmer animation for skeleton loaders */
  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }
}

@layer utilities {
  @keyframes enter {
    from {
      opacity: var(--tw-enter-opacity, 1);
      transform: translate3d(var(--tw-enter-translate-x, 0), var(--tw-enter-translate-y, 0), 0) scale3d(var(--tw-enter-scale, 1), var(--tw-enter-scale, 1), var(--tw-enter-scale, 1)) rotate(var(--tw-enter-rotate, 0));
    }
  }

  @keyframes exit {
    to {
      opacity: var(--tw-exit-opacity, 1);
      transform: translate3d(var(--tw-exit-translate-x, 0), var(--tw-exit-translate-y, 0), 0) scale3d(var(--tw-exit-scale, 1), var(--tw-exit-scale, 1), var(--tw-exit-scale, 1)) rotate(var(--tw-exit-rotate, 0));
    }
  }

  .animate-in {
    animation-name: enter;
    animation-duration: 150ms;
    --tw-enter-opacity: initial;
    --tw-enter-scale: initial;
    --tw-enter-rotate: initial;
    --tw-enter-translate-x: initial;
    --tw-enter-translate-y: initial;
  }

  .animate-out {
    animation-name: exit;
    animation-duration: 150ms;
    --tw-exit-opacity: initial;
    --tw-exit-scale: initial;
    --tw-exit-rotate: initial;
    --tw-exit-translate-x: initial;
    --tw-exit-translate-y: initial;
  }

  .fade-in-0 {
    --tw-enter-opacity: 0;
  }

  .fade-out-0 {
    --tw-exit-opacity: 0;
  }

  .zoom-in-95 {
    --tw-enter-scale: .95;
  }

  .zoom-out-95 {
    --tw-exit-scale: .95;
  }

  .slide-in-from-top-2 {
    --tw-enter-translate-y: -0.5rem;
  }

  .slide-in-from-bottom-2 {
    --tw-enter-translate-y: 0.5rem;
  }

  .slide-in-from-left-2 {
    --tw-enter-translate-x: -0.5rem;
  }

  .slide-in-from-right-2 {
    --tw-enter-translate-x: 0.5rem;
  }

  .slide-out-to-top-2 {
    --tw-exit-translate-y: -0.5rem;
  }

  .slide-out-to-bottom-2 {
    --tw-exit-translate-y: 0.5rem;
  }

  .slide-out-to-left-2 {
    --tw-exit-translate-x: -0.5rem;
  }

  .slide-out-to-right-2 {
    --tw-exit-translate-x: 0.5rem;
  }
}

@layer components {
  .card-body {
    @apply bg-gradient-to-br from-yellow-50 to-orange-50;
  }

  .header-discovery {
    @apply bg-purple-400 text-white;
  }

  .header-support {
    @apply bg-green-400 text-white;
  }

  .header-appointment {
    @apply bg-orange-400 text-white;
  }

  .header-custom {
    @apply bg-pink-400 text-white;
  }

  /* Standard button border for consistency */
  .btn-border {
    @apply border-4 border-black;
  }

  /* Dropdown menu fix */
  [data-radix-popper-content-wrapper] {
    z-index: 50 !important;
  }
  
  [data-slot="dropdown-menu-content"] {
    z-index: 50 !important;
  }

  /* Hide scrollbars but keep functionality */
  ::-webkit-scrollbar {
    width: 0;
    height: 0;
    display: none;
  }

  /* Firefox */
  * {
    scrollbar-width: none;
  }

  /* Prevent unwanted scrollbars */
  html, body {
    overflow-x: hidden;
    max-width: 100vw;
  }

  /* Hide scrollbar for specific elements but keep scroll functionality */
  .overflow-y-auto::-webkit-scrollbar,
  .overflow-x-auto::-webkit-scrollbar {
    display: none;
  }

  .overflow-y-auto,
  .overflow-x-auto {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
}


================================================
FILE: src/types/calls.ts
================================================
export interface SwarmAgent {
  id: string;
  name: string;
  type: 'sales' | 'support' | 'discovery' | 'appointment';
  status: 'active' | 'idle' | 'processing';
  activeCalls: number;
  successRate: number;
  avgCallDuration: string;
}

export interface SwarmConfig {
  id: string;
  name: string;
  description: string;
  agents: SwarmAgent[];
  totalCalls: number;
  activeAgents: number;
  performance: {
    conversionRate: number;
    avgSentiment: number;
    totalTalkTime: string;
    objectionHandling: number;
  };
}

export interface CallReasoning {
  currentObjective: string;
  nextPoints: string[];
  contextAnalysis: {
    customerMood: 'positive' | 'neutral' | 'negative' | 'confused';
    engagementLevel: number;
    objections: string[];
    interests: string[];
  };
  suggestedResponses: {
    primary: string;
    alternatives: string[];
  };
}

export interface CallAnalytics {
  sentimentHistory: { time: string; value: number }[];
  talkRatio: { agent: number; customer: number };
  keywordsDetected: string[];
  objectionsRaised: string[];
  commitmentsMade: string[];
  nextSteps: string[];
}

export interface EnhancedCall {
  id: number;
  swarmId: string;
  agent: string;
  agentType: 'sales' | 'support' | 'discovery' | 'appointment';
  contact: {
    name: string;
    number: string;
    location: string;
    company?: string;
    previousInteractions?: number;
  };
  type: string;
  duration: string;
  status: 'active' | 'warning' | 'ending';
  sentiment: 'positive' | 'neutral' | 'negative';
  audioLevel: {
    agent: number;
    customer: number;
  };
  transcript: {
    speaker: 'agent' | 'customer';
    text: string;
    time: string;
    sentiment?: 'positive' | 'neutral' | 'negative';
  }[];
  reasoning: CallReasoning;
  analytics: CallAnalytics;
}


================================================
FILE: src/types/index.ts
================================================
export type CallStatus = 'IDLE' | 'DIALING' | 'CONNECTED' | 'DISCONNECTED' | 'ERROR';

export interface StartCallRequest {
  phone_number: string;
  initial_message: string;
  background_scene?: string;
}

export interface StartCallResponse {
  message: string;
  call_id: string;
}

export interface APIError {
  detail: string;
  status?: number;
}


================================================
FILE: src/types/waveform.ts
================================================
// MOCK: Waveform and audio data types that will be integrated with Convex
// These types represent the data structure we'll receive from real Convex queries

export interface WaveformShard {
  id: string;
  timestamp: number; // milliseconds from call start
  amplitude: number; // 0-100 representing audio level
  frequency: number; // dominant frequency in Hz
  speaker: 'agent' | 'customer' | 'silence';
  sentiment?: 'positive' | 'negative' | 'neutral';
  energy: number; // 0-1 representing audio energy
}

export interface AudioSegment {
  id: string;
  startTime: number; // milliseconds
  endTime: number; // milliseconds
  speaker: 'agent' | 'customer';
  transcriptText: string;
  confidence: number; // 0-1 transcript confidence
  sentiment: 'positive' | 'negative' | 'neutral';
  emotions?: {
    joy: number;
    anger: number;
    fear: number;
    sadness: number;
    surprise: number;
  };
}

export interface CallRecordingData {
  callId: string;
  duration: number; // total call duration in ms
  sampleRate: number; // audio sample rate (e.g., 44100)
  channels: number; // mono=1, stereo=2
  waveformShards: WaveformShard[];
  audioSegments: AudioSegment[];
  keyEvents: CallEvent[];
  audioUrl?: string; // URL to actual audio file
  createdAt: number;
  updatedAt: number;
}

export interface CallEvent {
  id: string;
  timestamp: number; // milliseconds from call start
  type: 'objection' | 'interest' | 'question' | 'appointment' | 'transfer' | 'hold';
  description: string;
  confidence: number; // AI confidence in event detection
  metadata?: Record<string, any>;
}

// MOCK: Convex action/query response types
export interface ConvexWaveformResponse {
  success: boolean;
  data: CallRecordingData | null;
  error?: string;
  metadata: {
    processingTime: number;
    shardsCount: number;
    lastProcessed: number;
  };
}

export interface WaveformPlaybackState {
  isPlaying: boolean;
  currentTime: number; // current playback position in ms
  playbackRate: number; // 0.5x, 1x, 1.5x, 2x
  volume: number; // 0-100
  isMuted: boolean;
  selectedRegion?: {
    startTime: number;
    endTime: number;
  };
}

// MOCK: Real-time streaming data structure
export interface WaveformStreamData {
  shardBatch: WaveformShard[];
  batchId: string;
  isComplete: boolean;
  nextBatchExpected?: number;
}


================================================
FILE: .claude/settings.local.json
================================================
{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(node:*)",
      "Bash(grep:*)",
      "Bash(grep:*)",
      "Bash(npx tsc:*)",
      "Bash(npm run lint)",
      "Bash(npx eslint:*)",
      "Bash(PYTHONPATH=\"../backend\" python ../backend/run_server.py)",
      "Bash(../backend/venv/bin/python:*)",
      "Bash(curl:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(find:*)",
      "Bash(npx convex dashboard:*)",
      "Bash(npx convex dev:*)",
      "WebFetch(domain:docs.convex.dev)",
      "Bash(sudo lsof:*)",
      "Bash(ss:*)",
      "Bash(redis-cli:*)",
      "Bash(python:*)",
      "Bash(rm:*)",
      "Bash(bash ../check-services.sh)"
    ],
    "deny": []
  }
}

