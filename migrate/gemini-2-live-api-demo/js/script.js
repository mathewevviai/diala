"use client";

import { GeminiAgent } from './main/agent.js';
import { getConfig, getWebsocketUrl, getElevenLabsApiKey, MODEL_SAMPLE_RATE, ELEVENLABS_OUTPUT_SAMPLERATE } from './config/config.js';

import { GoogleSearchTool } from './tools/google-search.js';
import { ToolManager } from './tools/tool-manager.js';
import { ChatManager } from './chat/chat-manager.js';

import { setupEventListeners } from './dom/events.js';

// Function to load sales data
async function loadSalesData() {
    const overviewPath = './js/sales_data/TickedTillOverview.txt';
    const salesDataBasePath = './js/sales_data/';
    const regionalDataPath = './js/sales_data/regional_data.json';
    const salesTechniquesManifestPath = './js/sales_data/sales_techniques_manifest.json'; // Path to the manifest file (generated by Python script)
    let tickedTillOverview = '';
    let salesTechniquesData = [];
    let regionalData = {};

    // Load TickedTill Overview
    try {
        const response = await fetch(overviewPath);
        if (response.ok) {
            tickedTillOverview = await response.text();
            console.info('[Script.js - loadSalesData] TickedTillOverview.txt loaded successfully.');
        } else {
            console.error(`[Script.js - loadSalesData] Failed to load TickedTillOverview.txt: ${response.status} ${response.statusText}`);
        }
    } catch (error) {
        console.error('[Script.js - loadSalesData] Error fetching TickedTillOverview.txt:', error);
    }

    // Load Regional Data
    try {
        const response = await fetch(regionalDataPath);
        if (response.ok) {
            regionalData = await response.json();
            console.info('[Script.js - loadSalesData] regional_data.json loaded successfully.');
        } else {
            console.error(`[Script.js - loadSalesData] Failed to load regional_data.json: ${response.status} ${response.statusText}`);
        }
    } catch (error) {
        console.error('[Script.js - loadSalesData] Error fetching regional_data.json:', error);
    }

    // Load Sales Techniques using the manifest file (generated by generate_sales_manifest.py)
    try {
        const manifestResponse = await fetch(salesTechniquesManifestPath);
        if (manifestResponse.ok) {
            const manifest = await manifestResponse.json();
            console.info('[Script.js - loadSalesData] sales_techniques_manifest.json loaded successfully.');
            console.debug('[Script.js - loadSalesData] Manifest content:', JSON.stringify(manifest, null, 2)); // Log the manifest content

            if (Object.keys(manifest).length === 0) {
                console.warn('[Script.js - loadSalesData] Manifest is empty. No directories to process.');
            }

            for (const dirName in manifest) {
                console.debug(`[Script.js - loadSalesData] Processing directory from manifest: ${dirName}`);
                if (manifest.hasOwnProperty(dirName) && Array.isArray(manifest[dirName]) && manifest[dirName].length > 0) {
                    const filesInDir = manifest[dirName];
                    console.debug(`[Script.js - loadSalesData] Files in directory ${dirName}:`, filesInDir);
                    const randomFileIndex = Math.floor(Math.random() * filesInDir.length);
                    const randomFileName = filesInDir[randomFileIndex];
                    const filePath = `${salesDataBasePath}${dirName}/${randomFileName}`;

                    try {
                        console.log(`[Script.js - loadSalesData] Attempting to load random technique file: ${filePath}`);
                        const techniqueFileResponse = await fetch(filePath);
                        if (techniqueFileResponse.ok) {
                            const jsonData = await techniqueFileResponse.json();
                            if (jsonData && Array.isArray(jsonData.entries)) {
                                const validEntries = jsonData.entries.filter(entry => entry && typeof entry.content === 'string');
                                salesTechniquesData.push(...validEntries);
                                console.info(`[Script.js - loadSalesData] Loaded ${validEntries.length} techniques from ${filePath}`);
                            } else {
                                console.warn(`[Script.js - loadSalesData] No valid 'entries' array in ${filePath}`);
                            }
                        } else {
                            console.error(`[Script.js - loadSalesData] Failed to load technique file ${filePath}: ${techniqueFileResponse.status} ${techniqueFileResponse.statusText}`);
                        }
                    } catch (fileError) {
                        console.error(`[Script.js - loadSalesData] Error fetching or parsing technique file ${filePath}:`, fileError);
                    }
                } else {
                    console.warn(`[Script.js - loadSalesData] Skipping directory ${dirName}: not a valid array or is empty.`);
                }
            }
        } else {
            console.error(`[Script.js - loadSalesData] Failed to load sales_techniques_manifest.json: ${manifestResponse.status} ${manifestResponse.statusText}`);
        }
    } catch (error) {
        console.error('[Script.js - loadSalesData] Error fetching sales_techniques_manifest.json:', error);
    }

    if (salesTechniquesData.length === 0) {
        console.warn("[Script.js - loadSalesData] No sales techniques loaded. Check manifest (should be auto-generated) and file paths.");
    }
    console.info(`[Script.js - loadSalesData] Total sales techniques loaded: ${salesTechniquesData.length}`);

    return { tickedTillOverview, salesTechniquesData, regionalData };
}

console.debug('[Script.js] Initializing script...');

async function initializeApp() {
    console.debug('[Script.js - initializeApp] Starting app initialization...');
    const salesData = await loadSalesData();
    console.debug('[Script.js - initializeApp] Sales data loaded:', 
                  'Overview length:', salesData?.tickedTillOverview?.length, 
                  'TechniquesData count:', salesData?.salesTechniquesData?.length,
                  'RegionalData keys:', salesData?.regionalData ? Object.keys(salesData.regionalData).length : 0); // Log regional data

    console.info('--- API Keys & Configurations ---');

    const url = getWebsocketUrl();
    console.info('[Script.js - Boot Log] Gemini WebSocket URL:', url);

    const config = getConfig();

    const elevenLabsApiKey = getElevenLabsApiKey();
    console.info('[Script.js - Boot Log] ElevenLabs API Key (DEBUG):', elevenLabsApiKey || 'NOT FOUND');
    console.info('---------------------------------');

    console.info('[Script.js] About to instantiate GeminiAgent with elevenLabsApiKey:', elevenLabsApiKey ? 'Exists' : 'MISSING');

    const toolManager = new ToolManager();
    toolManager.registerTool('googleSearch', new GoogleSearchTool());

    const chatManager = new ChatManager();

    console.info('[Script.js] Instantiating GeminiAgent...');
    const geminiAgent = new GeminiAgent({
        url,
        config,
        elevenLabsApiKey: elevenLabsApiKey,
        toolManager,
        tickedTillOverview: salesData.tickedTillOverview,
        salesTechniquesData: salesData.salesTechniquesData,
        regionalData: salesData.regionalData, // Pass regional data
        useChatterboxInitially: true, // Ensure Chatterbox is the primary TTS
        chatterboxClientConfig: { // Pass Chatterbox specific config if any
            // apiBaseUrl: 'http://custom-chatterbox-url.com:8888', // Example if not default
            // voice: 'path/to/your/custom_prompt.wav', // Example custom voice prompt
            // exaggeration: 0.7, // Example custom param
            outputSampleRate: ELEVENLABS_OUTPUT_SAMPLERATE // Ensure consistency
        },
    });

    // Populate Region Select Dropdown
    const regionSelectElement = document.getElementById('region-select');
    if (regionSelectElement && salesData.regionalData) {
        Object.keys(salesData.regionalData).forEach(regionName => {
            const option = document.createElement('option');
            option.value = regionName;
            option.textContent = regionName;
            if (regionName === geminiAgent.currentRegionName) { // Select current/default region
                option.selected = true;
            }
            regionSelectElement.appendChild(option);
        });

        // Add event listener for region change
        regionSelectElement.addEventListener('change', (event) => {
            const selectedRegion = event.target.value;
            if (geminiAgent && selectedRegion) {
                geminiAgent.setCurrentRegion(selectedRegion);
            }
        });
    } else {
        console.warn('[Script.js] Region select dropdown or regional data not found.');
    }

    console.info('[Script.js] Setting up GeminiAgent event listeners...');
    
    geminiAgent.on('transcription', (textChunk) => {
        chatManager.updateStreamingMessage(textChunk);
    });

    geminiAgent.on('text_sent', (text) => {
        console.debug('[Script.js] Event: text_sent from GeminiAgent - ', text);
        chatManager.addUserMessage(text);
    });

    geminiAgent.on('interrupted', () => {
        console.debug('[Script.js] Event: interrupted from GeminiAgent');
        chatManager.finalizeStreamingMessage();
    });

    geminiAgent.on('turn_complete', () => {
        console.debug('[Script.js] Event: turn_complete from GeminiAgent');
        chatManager.finalizeStreamingMessage();
    });

    console.info('[Script.js] Connecting GeminiAgent...');
    try {
        await geminiAgent.connect();
        console.info('[Script.js] GeminiAgent connected.');
    } catch (error) {
        console.error('[Script.js] Failed to connect GeminiAgent on initial load:', error);
    }

    console.info('[Script.js] Setting up DOM event listeners...');
    setupEventListeners(geminiAgent);

    // Microphone Button Functionality
    const micButton = document.getElementById('micBtn');
    const micIcon = micButton ? micButton.querySelector('.mic-icon') : null;

    if (micButton && micIcon) {
        micButton.addEventListener('click', async () => {
            if (!geminiAgent.audioRecorder || !geminiAgent.config.transcribeUsersSpeech) {
                console.warn("[MicBtn] AudioRecorder not available or transcribeUsersSpeech disabled.");
                // Optionally provide user feedback here (e.g., alert)
                return;
            }
            try {
                await geminiAgent.toggleUserMic(); // This now handles starting if not already recording
            } catch (error) {
                console.error("[MicBtn] Error toggling mic:", error);
                // Optionally provide user feedback
            }
        });

        geminiAgent.on('user_recording_started', () => {
            micButton.classList.add('active');
            micIcon.textContent = '❚❚'; // Pause symbol or similar for recording
            console.log('[UI] Mic button: Recording started, class active added');
        });

        geminiAgent.on('user_recording_stopped', () => {
            micButton.classList.remove('active');
            micButton.classList.remove('muted'); // Ensure not stuck in muted state
            micIcon.textContent = '🎤';
            console.log('[UI] Mic button: Recording stopped, class active/muted removed');
        });

        geminiAgent.on('user_mic_suspended', () => {
            micButton.classList.add('muted'); // A new class for muted state
            micButton.classList.remove('active'); // If suspend keeps it "recording" but no audio flows
            micIcon.textContent = '🤫'; // Muted symbol or similar
            console.log('[UI] Mic button: Mic suspended, class muted added');
        });

        geminiAgent.on('user_mic_resumed', () => {
            micButton.classList.remove('muted');
            micButton.classList.add('active'); // Back to active recording state
            micIcon.textContent = '❚❚';
            console.log('[UI] Mic button: Mic resumed, class muted removed, active added');
        });

    } else {
        console.warn('[Script.js] Mic button or mic icon not found.');
    }

    console.info('[Script.js] Script initialization complete.');
}

initializeApp();
